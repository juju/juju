// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state/migrations (interfaces: MigrationRelationNetworks,RelationNetworksSource,RelationNetworksModel)
//
// Generated by this command:
//
//	mockgen -typed -package migrations -destination relationetworks_mock_test.go github.com/juju/juju/state/migrations MigrationRelationNetworks,RelationNetworksSource,RelationNetworksModel
//

// Package migrations is a generated GoMock package.
package migrations

import (
	reflect "reflect"

	description "github.com/juju/description/v8"
	gomock "go.uber.org/mock/gomock"
)

// MockMigrationRelationNetworks is a mock of MigrationRelationNetworks interface.
type MockMigrationRelationNetworks struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationRelationNetworksMockRecorder
}

// MockMigrationRelationNetworksMockRecorder is the mock recorder for MockMigrationRelationNetworks.
type MockMigrationRelationNetworksMockRecorder struct {
	mock *MockMigrationRelationNetworks
}

// NewMockMigrationRelationNetworks creates a new mock instance.
func NewMockMigrationRelationNetworks(ctrl *gomock.Controller) *MockMigrationRelationNetworks {
	mock := &MockMigrationRelationNetworks{ctrl: ctrl}
	mock.recorder = &MockMigrationRelationNetworksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationRelationNetworks) EXPECT() *MockMigrationRelationNetworksMockRecorder {
	return m.recorder
}

// CIDRS mocks base method.
func (m *MockMigrationRelationNetworks) CIDRS() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CIDRS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// CIDRS indicates an expected call of CIDRS.
func (mr *MockMigrationRelationNetworksMockRecorder) CIDRS() *MockMigrationRelationNetworksCIDRSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CIDRS", reflect.TypeOf((*MockMigrationRelationNetworks)(nil).CIDRS))
	return &MockMigrationRelationNetworksCIDRSCall{Call: call}
}

// MockMigrationRelationNetworksCIDRSCall wrap *gomock.Call
type MockMigrationRelationNetworksCIDRSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRelationNetworksCIDRSCall) Return(arg0 []string) *MockMigrationRelationNetworksCIDRSCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRelationNetworksCIDRSCall) Do(f func() []string) *MockMigrationRelationNetworksCIDRSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRelationNetworksCIDRSCall) DoAndReturn(f func() []string) *MockMigrationRelationNetworksCIDRSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockMigrationRelationNetworks) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockMigrationRelationNetworksMockRecorder) Id() *MockMigrationRelationNetworksIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMigrationRelationNetworks)(nil).Id))
	return &MockMigrationRelationNetworksIdCall{Call: call}
}

// MockMigrationRelationNetworksIdCall wrap *gomock.Call
type MockMigrationRelationNetworksIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRelationNetworksIdCall) Return(arg0 string) *MockMigrationRelationNetworksIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRelationNetworksIdCall) Do(f func() string) *MockMigrationRelationNetworksIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRelationNetworksIdCall) DoAndReturn(f func() string) *MockMigrationRelationNetworksIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationKey mocks base method.
func (m *MockMigrationRelationNetworks) RelationKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// RelationKey indicates an expected call of RelationKey.
func (mr *MockMigrationRelationNetworksMockRecorder) RelationKey() *MockMigrationRelationNetworksRelationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationKey", reflect.TypeOf((*MockMigrationRelationNetworks)(nil).RelationKey))
	return &MockMigrationRelationNetworksRelationKeyCall{Call: call}
}

// MockMigrationRelationNetworksRelationKeyCall wrap *gomock.Call
type MockMigrationRelationNetworksRelationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRelationNetworksRelationKeyCall) Return(arg0 string) *MockMigrationRelationNetworksRelationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRelationNetworksRelationKeyCall) Do(f func() string) *MockMigrationRelationNetworksRelationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRelationNetworksRelationKeyCall) DoAndReturn(f func() string) *MockMigrationRelationNetworksRelationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationNetworksSource is a mock of RelationNetworksSource interface.
type MockRelationNetworksSource struct {
	ctrl     *gomock.Controller
	recorder *MockRelationNetworksSourceMockRecorder
}

// MockRelationNetworksSourceMockRecorder is the mock recorder for MockRelationNetworksSource.
type MockRelationNetworksSourceMockRecorder struct {
	mock *MockRelationNetworksSource
}

// NewMockRelationNetworksSource creates a new mock instance.
func NewMockRelationNetworksSource(ctrl *gomock.Controller) *MockRelationNetworksSource {
	mock := &MockRelationNetworksSource{ctrl: ctrl}
	mock.recorder = &MockRelationNetworksSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationNetworksSource) EXPECT() *MockRelationNetworksSourceMockRecorder {
	return m.recorder
}

// AllRelationNetworks mocks base method.
func (m *MockRelationNetworksSource) AllRelationNetworks() ([]MigrationRelationNetworks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRelationNetworks")
	ret0, _ := ret[0].([]MigrationRelationNetworks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRelationNetworks indicates an expected call of AllRelationNetworks.
func (mr *MockRelationNetworksSourceMockRecorder) AllRelationNetworks() *MockRelationNetworksSourceAllRelationNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRelationNetworks", reflect.TypeOf((*MockRelationNetworksSource)(nil).AllRelationNetworks))
	return &MockRelationNetworksSourceAllRelationNetworksCall{Call: call}
}

// MockRelationNetworksSourceAllRelationNetworksCall wrap *gomock.Call
type MockRelationNetworksSourceAllRelationNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationNetworksSourceAllRelationNetworksCall) Return(arg0 []MigrationRelationNetworks, arg1 error) *MockRelationNetworksSourceAllRelationNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationNetworksSourceAllRelationNetworksCall) Do(f func() ([]MigrationRelationNetworks, error)) *MockRelationNetworksSourceAllRelationNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationNetworksSourceAllRelationNetworksCall) DoAndReturn(f func() ([]MigrationRelationNetworks, error)) *MockRelationNetworksSourceAllRelationNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationNetworksModel is a mock of RelationNetworksModel interface.
type MockRelationNetworksModel struct {
	ctrl     *gomock.Controller
	recorder *MockRelationNetworksModelMockRecorder
}

// MockRelationNetworksModelMockRecorder is the mock recorder for MockRelationNetworksModel.
type MockRelationNetworksModelMockRecorder struct {
	mock *MockRelationNetworksModel
}

// NewMockRelationNetworksModel creates a new mock instance.
func NewMockRelationNetworksModel(ctrl *gomock.Controller) *MockRelationNetworksModel {
	mock := &MockRelationNetworksModel{ctrl: ctrl}
	mock.recorder = &MockRelationNetworksModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationNetworksModel) EXPECT() *MockRelationNetworksModelMockRecorder {
	return m.recorder
}

// AddRelationNetwork mocks base method.
func (m *MockRelationNetworksModel) AddRelationNetwork(arg0 description.RelationNetworkArgs) description.RelationNetwork {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelationNetwork", arg0)
	ret0, _ := ret[0].(description.RelationNetwork)
	return ret0
}

// AddRelationNetwork indicates an expected call of AddRelationNetwork.
func (mr *MockRelationNetworksModelMockRecorder) AddRelationNetwork(arg0 any) *MockRelationNetworksModelAddRelationNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationNetwork", reflect.TypeOf((*MockRelationNetworksModel)(nil).AddRelationNetwork), arg0)
	return &MockRelationNetworksModelAddRelationNetworkCall{Call: call}
}

// MockRelationNetworksModelAddRelationNetworkCall wrap *gomock.Call
type MockRelationNetworksModelAddRelationNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationNetworksModelAddRelationNetworkCall) Return(arg0 description.RelationNetwork) *MockRelationNetworksModelAddRelationNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationNetworksModelAddRelationNetworkCall) Do(f func(description.RelationNetworkArgs) description.RelationNetwork) *MockRelationNetworksModelAddRelationNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationNetworksModelAddRelationNetworkCall) DoAndReturn(f func(description.RelationNetworkArgs) description.RelationNetwork) *MockRelationNetworksModelAddRelationNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
