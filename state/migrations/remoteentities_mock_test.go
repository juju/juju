// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state/migrations (interfaces: MigrationRemoteEntity,RemoteEntitiesSource,RemoteEntitiesModel)
//
// Generated by this command:
//
//	mockgen -typed -package migrations -destination remoteentities_mock_test.go github.com/juju/juju/state/migrations MigrationRemoteEntity,RemoteEntitiesSource,RemoteEntitiesModel
//

// Package migrations is a generated GoMock package.
package migrations

import (
	reflect "reflect"

	description "github.com/juju/description/v8"
	gomock "go.uber.org/mock/gomock"
)

// MockMigrationRemoteEntity is a mock of MigrationRemoteEntity interface.
type MockMigrationRemoteEntity struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationRemoteEntityMockRecorder
}

// MockMigrationRemoteEntityMockRecorder is the mock recorder for MockMigrationRemoteEntity.
type MockMigrationRemoteEntityMockRecorder struct {
	mock *MockMigrationRemoteEntity
}

// NewMockMigrationRemoteEntity creates a new mock instance.
func NewMockMigrationRemoteEntity(ctrl *gomock.Controller) *MockMigrationRemoteEntity {
	mock := &MockMigrationRemoteEntity{ctrl: ctrl}
	mock.recorder = &MockMigrationRemoteEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationRemoteEntity) EXPECT() *MockMigrationRemoteEntityMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockMigrationRemoteEntity) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockMigrationRemoteEntityMockRecorder) ID() *MockMigrationRemoteEntityIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockMigrationRemoteEntity)(nil).ID))
	return &MockMigrationRemoteEntityIDCall{Call: call}
}

// MockMigrationRemoteEntityIDCall wrap *gomock.Call
type MockMigrationRemoteEntityIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteEntityIDCall) Return(arg0 string) *MockMigrationRemoteEntityIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteEntityIDCall) Do(f func() string) *MockMigrationRemoteEntityIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteEntityIDCall) DoAndReturn(f func() string) *MockMigrationRemoteEntityIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Macaroon mocks base method.
func (m *MockMigrationRemoteEntity) Macaroon() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(string)
	return ret0
}

// Macaroon indicates an expected call of Macaroon.
func (mr *MockMigrationRemoteEntityMockRecorder) Macaroon() *MockMigrationRemoteEntityMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockMigrationRemoteEntity)(nil).Macaroon))
	return &MockMigrationRemoteEntityMacaroonCall{Call: call}
}

// MockMigrationRemoteEntityMacaroonCall wrap *gomock.Call
type MockMigrationRemoteEntityMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteEntityMacaroonCall) Return(arg0 string) *MockMigrationRemoteEntityMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteEntityMacaroonCall) Do(f func() string) *MockMigrationRemoteEntityMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteEntityMacaroonCall) DoAndReturn(f func() string) *MockMigrationRemoteEntityMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Token mocks base method.
func (m *MockMigrationRemoteEntity) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockMigrationRemoteEntityMockRecorder) Token() *MockMigrationRemoteEntityTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockMigrationRemoteEntity)(nil).Token))
	return &MockMigrationRemoteEntityTokenCall{Call: call}
}

// MockMigrationRemoteEntityTokenCall wrap *gomock.Call
type MockMigrationRemoteEntityTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteEntityTokenCall) Return(arg0 string) *MockMigrationRemoteEntityTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteEntityTokenCall) Do(f func() string) *MockMigrationRemoteEntityTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteEntityTokenCall) DoAndReturn(f func() string) *MockMigrationRemoteEntityTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteEntitiesSource is a mock of RemoteEntitiesSource interface.
type MockRemoteEntitiesSource struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteEntitiesSourceMockRecorder
}

// MockRemoteEntitiesSourceMockRecorder is the mock recorder for MockRemoteEntitiesSource.
type MockRemoteEntitiesSourceMockRecorder struct {
	mock *MockRemoteEntitiesSource
}

// NewMockRemoteEntitiesSource creates a new mock instance.
func NewMockRemoteEntitiesSource(ctrl *gomock.Controller) *MockRemoteEntitiesSource {
	mock := &MockRemoteEntitiesSource{ctrl: ctrl}
	mock.recorder = &MockRemoteEntitiesSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteEntitiesSource) EXPECT() *MockRemoteEntitiesSourceMockRecorder {
	return m.recorder
}

// AllRemoteEntities mocks base method.
func (m *MockRemoteEntitiesSource) AllRemoteEntities() ([]MigrationRemoteEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRemoteEntities")
	ret0, _ := ret[0].([]MigrationRemoteEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRemoteEntities indicates an expected call of AllRemoteEntities.
func (mr *MockRemoteEntitiesSourceMockRecorder) AllRemoteEntities() *MockRemoteEntitiesSourceAllRemoteEntitiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRemoteEntities", reflect.TypeOf((*MockRemoteEntitiesSource)(nil).AllRemoteEntities))
	return &MockRemoteEntitiesSourceAllRemoteEntitiesCall{Call: call}
}

// MockRemoteEntitiesSourceAllRemoteEntitiesCall wrap *gomock.Call
type MockRemoteEntitiesSourceAllRemoteEntitiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntitiesSourceAllRemoteEntitiesCall) Return(arg0 []MigrationRemoteEntity, arg1 error) *MockRemoteEntitiesSourceAllRemoteEntitiesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntitiesSourceAllRemoteEntitiesCall) Do(f func() ([]MigrationRemoteEntity, error)) *MockRemoteEntitiesSourceAllRemoteEntitiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntitiesSourceAllRemoteEntitiesCall) DoAndReturn(f func() ([]MigrationRemoteEntity, error)) *MockRemoteEntitiesSourceAllRemoteEntitiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteEntitiesModel is a mock of RemoteEntitiesModel interface.
type MockRemoteEntitiesModel struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteEntitiesModelMockRecorder
}

// MockRemoteEntitiesModelMockRecorder is the mock recorder for MockRemoteEntitiesModel.
type MockRemoteEntitiesModelMockRecorder struct {
	mock *MockRemoteEntitiesModel
}

// NewMockRemoteEntitiesModel creates a new mock instance.
func NewMockRemoteEntitiesModel(ctrl *gomock.Controller) *MockRemoteEntitiesModel {
	mock := &MockRemoteEntitiesModel{ctrl: ctrl}
	mock.recorder = &MockRemoteEntitiesModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteEntitiesModel) EXPECT() *MockRemoteEntitiesModelMockRecorder {
	return m.recorder
}

// AddRemoteEntity mocks base method.
func (m *MockRemoteEntitiesModel) AddRemoteEntity(arg0 description.RemoteEntityArgs) description.RemoteEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteEntity", arg0)
	ret0, _ := ret[0].(description.RemoteEntity)
	return ret0
}

// AddRemoteEntity indicates an expected call of AddRemoteEntity.
func (mr *MockRemoteEntitiesModelMockRecorder) AddRemoteEntity(arg0 any) *MockRemoteEntitiesModelAddRemoteEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteEntity", reflect.TypeOf((*MockRemoteEntitiesModel)(nil).AddRemoteEntity), arg0)
	return &MockRemoteEntitiesModelAddRemoteEntityCall{Call: call}
}

// MockRemoteEntitiesModelAddRemoteEntityCall wrap *gomock.Call
type MockRemoteEntitiesModelAddRemoteEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntitiesModelAddRemoteEntityCall) Return(arg0 description.RemoteEntity) *MockRemoteEntitiesModelAddRemoteEntityCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntitiesModelAddRemoteEntityCall) Do(f func(description.RemoteEntityArgs) description.RemoteEntity) *MockRemoteEntitiesModelAddRemoteEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntitiesModelAddRemoteEntityCall) DoAndReturn(f func(description.RemoteEntityArgs) description.RemoteEntity) *MockRemoteEntitiesModelAddRemoteEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
