// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state/migrations (interfaces: MigrationRemoteApplication,AllRemoteApplicationSource,StatusSource,RemoteApplicationSource,RemoteApplicationModel)
//
// Generated by this command:
//
//	mockgen -typed -package migrations -destination remoteapplications_mock_test.go github.com/juju/juju/state/migrations MigrationRemoteApplication,AllRemoteApplicationSource,StatusSource,RemoteApplicationSource,RemoteApplicationModel
//

// Package migrations is a generated GoMock package.
package migrations

import (
	reflect "reflect"

	description "github.com/juju/description/v8"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockMigrationRemoteApplication is a mock of MigrationRemoteApplication interface.
type MockMigrationRemoteApplication struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationRemoteApplicationMockRecorder
}

// MockMigrationRemoteApplicationMockRecorder is the mock recorder for MockMigrationRemoteApplication.
type MockMigrationRemoteApplicationMockRecorder struct {
	mock *MockMigrationRemoteApplication
}

// NewMockMigrationRemoteApplication creates a new mock instance.
func NewMockMigrationRemoteApplication(ctrl *gomock.Controller) *MockMigrationRemoteApplication {
	mock := &MockMigrationRemoteApplication{ctrl: ctrl}
	mock.recorder = &MockMigrationRemoteApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationRemoteApplication) EXPECT() *MockMigrationRemoteApplicationMockRecorder {
	return m.recorder
}

// ConsumeVersion mocks base method.
func (m *MockMigrationRemoteApplication) ConsumeVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConsumeVersion indicates an expected call of ConsumeVersion.
func (mr *MockMigrationRemoteApplicationMockRecorder) ConsumeVersion() *MockMigrationRemoteApplicationConsumeVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeVersion", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).ConsumeVersion))
	return &MockMigrationRemoteApplicationConsumeVersionCall{Call: call}
}

// MockMigrationRemoteApplicationConsumeVersionCall wrap *gomock.Call
type MockMigrationRemoteApplicationConsumeVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationConsumeVersionCall) Return(arg0 int) *MockMigrationRemoteApplicationConsumeVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationConsumeVersionCall) Do(f func() int) *MockMigrationRemoteApplicationConsumeVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationConsumeVersionCall) DoAndReturn(f func() int) *MockMigrationRemoteApplicationConsumeVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Endpoints mocks base method.
func (m *MockMigrationRemoteApplication) Endpoints() ([]MigrationRemoteEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints")
	ret0, _ := ret[0].([]MigrationRemoteEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockMigrationRemoteApplicationMockRecorder) Endpoints() *MockMigrationRemoteApplicationEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).Endpoints))
	return &MockMigrationRemoteApplicationEndpointsCall{Call: call}
}

// MockMigrationRemoteApplicationEndpointsCall wrap *gomock.Call
type MockMigrationRemoteApplicationEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationEndpointsCall) Return(arg0 []MigrationRemoteEndpoint, arg1 error) *MockMigrationRemoteApplicationEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationEndpointsCall) Do(f func() ([]MigrationRemoteEndpoint, error)) *MockMigrationRemoteApplicationEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationEndpointsCall) DoAndReturn(f func() ([]MigrationRemoteEndpoint, error)) *MockMigrationRemoteApplicationEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GlobalKey mocks base method.
func (m *MockMigrationRemoteApplication) GlobalKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GlobalKey indicates an expected call of GlobalKey.
func (mr *MockMigrationRemoteApplicationMockRecorder) GlobalKey() *MockMigrationRemoteApplicationGlobalKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalKey", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).GlobalKey))
	return &MockMigrationRemoteApplicationGlobalKeyCall{Call: call}
}

// MockMigrationRemoteApplicationGlobalKeyCall wrap *gomock.Call
type MockMigrationRemoteApplicationGlobalKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationGlobalKeyCall) Return(arg0 string) *MockMigrationRemoteApplicationGlobalKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationGlobalKeyCall) Do(f func() string) *MockMigrationRemoteApplicationGlobalKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationGlobalKeyCall) DoAndReturn(f func() string) *MockMigrationRemoteApplicationGlobalKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsConsumerProxy mocks base method.
func (m *MockMigrationRemoteApplication) IsConsumerProxy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConsumerProxy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConsumerProxy indicates an expected call of IsConsumerProxy.
func (mr *MockMigrationRemoteApplicationMockRecorder) IsConsumerProxy() *MockMigrationRemoteApplicationIsConsumerProxyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConsumerProxy", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).IsConsumerProxy))
	return &MockMigrationRemoteApplicationIsConsumerProxyCall{Call: call}
}

// MockMigrationRemoteApplicationIsConsumerProxyCall wrap *gomock.Call
type MockMigrationRemoteApplicationIsConsumerProxyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationIsConsumerProxyCall) Return(arg0 bool) *MockMigrationRemoteApplicationIsConsumerProxyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationIsConsumerProxyCall) Do(f func() bool) *MockMigrationRemoteApplicationIsConsumerProxyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationIsConsumerProxyCall) DoAndReturn(f func() bool) *MockMigrationRemoteApplicationIsConsumerProxyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Macaroon mocks base method.
func (m *MockMigrationRemoteApplication) Macaroon() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(string)
	return ret0
}

// Macaroon indicates an expected call of Macaroon.
func (mr *MockMigrationRemoteApplicationMockRecorder) Macaroon() *MockMigrationRemoteApplicationMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).Macaroon))
	return &MockMigrationRemoteApplicationMacaroonCall{Call: call}
}

// MockMigrationRemoteApplicationMacaroonCall wrap *gomock.Call
type MockMigrationRemoteApplicationMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationMacaroonCall) Return(arg0 string) *MockMigrationRemoteApplicationMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationMacaroonCall) Do(f func() string) *MockMigrationRemoteApplicationMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationMacaroonCall) DoAndReturn(f func() string) *MockMigrationRemoteApplicationMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockMigrationRemoteApplication) OfferUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockMigrationRemoteApplicationMockRecorder) OfferUUID() *MockMigrationRemoteApplicationOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).OfferUUID))
	return &MockMigrationRemoteApplicationOfferUUIDCall{Call: call}
}

// MockMigrationRemoteApplicationOfferUUIDCall wrap *gomock.Call
type MockMigrationRemoteApplicationOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationOfferUUIDCall) Return(arg0 string) *MockMigrationRemoteApplicationOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationOfferUUIDCall) Do(f func() string) *MockMigrationRemoteApplicationOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationOfferUUIDCall) DoAndReturn(f func() string) *MockMigrationRemoteApplicationOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SourceModel mocks base method.
func (m *MockMigrationRemoteApplication) SourceModel() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceModel")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// SourceModel indicates an expected call of SourceModel.
func (mr *MockMigrationRemoteApplicationMockRecorder) SourceModel() *MockMigrationRemoteApplicationSourceModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceModel", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).SourceModel))
	return &MockMigrationRemoteApplicationSourceModelCall{Call: call}
}

// MockMigrationRemoteApplicationSourceModelCall wrap *gomock.Call
type MockMigrationRemoteApplicationSourceModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationSourceModelCall) Return(arg0 names.ModelTag) *MockMigrationRemoteApplicationSourceModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationSourceModelCall) Do(f func() names.ModelTag) *MockMigrationRemoteApplicationSourceModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationSourceModelCall) DoAndReturn(f func() names.ModelTag) *MockMigrationRemoteApplicationSourceModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockMigrationRemoteApplication) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockMigrationRemoteApplicationMockRecorder) Tag() *MockMigrationRemoteApplicationTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).Tag))
	return &MockMigrationRemoteApplicationTagCall{Call: call}
}

// MockMigrationRemoteApplicationTagCall wrap *gomock.Call
type MockMigrationRemoteApplicationTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationTagCall) Return(arg0 names.Tag) *MockMigrationRemoteApplicationTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationTagCall) Do(f func() names.Tag) *MockMigrationRemoteApplicationTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationTagCall) DoAndReturn(f func() names.Tag) *MockMigrationRemoteApplicationTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// URL mocks base method.
func (m *MockMigrationRemoteApplication) URL() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// URL indicates an expected call of URL.
func (mr *MockMigrationRemoteApplicationMockRecorder) URL() *MockMigrationRemoteApplicationURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockMigrationRemoteApplication)(nil).URL))
	return &MockMigrationRemoteApplicationURLCall{Call: call}
}

// MockMigrationRemoteApplicationURLCall wrap *gomock.Call
type MockMigrationRemoteApplicationURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationRemoteApplicationURLCall) Return(arg0 string, arg1 bool) *MockMigrationRemoteApplicationURLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationRemoteApplicationURLCall) Do(f func() (string, bool)) *MockMigrationRemoteApplicationURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationRemoteApplicationURLCall) DoAndReturn(f func() (string, bool)) *MockMigrationRemoteApplicationURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAllRemoteApplicationSource is a mock of AllRemoteApplicationSource interface.
type MockAllRemoteApplicationSource struct {
	ctrl     *gomock.Controller
	recorder *MockAllRemoteApplicationSourceMockRecorder
}

// MockAllRemoteApplicationSourceMockRecorder is the mock recorder for MockAllRemoteApplicationSource.
type MockAllRemoteApplicationSourceMockRecorder struct {
	mock *MockAllRemoteApplicationSource
}

// NewMockAllRemoteApplicationSource creates a new mock instance.
func NewMockAllRemoteApplicationSource(ctrl *gomock.Controller) *MockAllRemoteApplicationSource {
	mock := &MockAllRemoteApplicationSource{ctrl: ctrl}
	mock.recorder = &MockAllRemoteApplicationSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllRemoteApplicationSource) EXPECT() *MockAllRemoteApplicationSourceMockRecorder {
	return m.recorder
}

// AllRemoteApplications mocks base method.
func (m *MockAllRemoteApplicationSource) AllRemoteApplications() ([]MigrationRemoteApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRemoteApplications")
	ret0, _ := ret[0].([]MigrationRemoteApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRemoteApplications indicates an expected call of AllRemoteApplications.
func (mr *MockAllRemoteApplicationSourceMockRecorder) AllRemoteApplications() *MockAllRemoteApplicationSourceAllRemoteApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRemoteApplications", reflect.TypeOf((*MockAllRemoteApplicationSource)(nil).AllRemoteApplications))
	return &MockAllRemoteApplicationSourceAllRemoteApplicationsCall{Call: call}
}

// MockAllRemoteApplicationSourceAllRemoteApplicationsCall wrap *gomock.Call
type MockAllRemoteApplicationSourceAllRemoteApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAllRemoteApplicationSourceAllRemoteApplicationsCall) Return(arg0 []MigrationRemoteApplication, arg1 error) *MockAllRemoteApplicationSourceAllRemoteApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAllRemoteApplicationSourceAllRemoteApplicationsCall) Do(f func() ([]MigrationRemoteApplication, error)) *MockAllRemoteApplicationSourceAllRemoteApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAllRemoteApplicationSourceAllRemoteApplicationsCall) DoAndReturn(f func() ([]MigrationRemoteApplication, error)) *MockAllRemoteApplicationSourceAllRemoteApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusSource is a mock of StatusSource interface.
type MockStatusSource struct {
	ctrl     *gomock.Controller
	recorder *MockStatusSourceMockRecorder
}

// MockStatusSourceMockRecorder is the mock recorder for MockStatusSource.
type MockStatusSourceMockRecorder struct {
	mock *MockStatusSource
}

// NewMockStatusSource creates a new mock instance.
func NewMockStatusSource(ctrl *gomock.Controller) *MockStatusSource {
	mock := &MockStatusSource{ctrl: ctrl}
	mock.recorder = &MockStatusSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusSource) EXPECT() *MockStatusSourceMockRecorder {
	return m.recorder
}

// StatusArgs mocks base method.
func (m *MockStatusSource) StatusArgs(arg0 string) (description.StatusArgs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusArgs", arg0)
	ret0, _ := ret[0].(description.StatusArgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusArgs indicates an expected call of StatusArgs.
func (mr *MockStatusSourceMockRecorder) StatusArgs(arg0 any) *MockStatusSourceStatusArgsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusArgs", reflect.TypeOf((*MockStatusSource)(nil).StatusArgs), arg0)
	return &MockStatusSourceStatusArgsCall{Call: call}
}

// MockStatusSourceStatusArgsCall wrap *gomock.Call
type MockStatusSourceStatusArgsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusSourceStatusArgsCall) Return(arg0 description.StatusArgs, arg1 error) *MockStatusSourceStatusArgsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusSourceStatusArgsCall) Do(f func(string) (description.StatusArgs, error)) *MockStatusSourceStatusArgsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusSourceStatusArgsCall) DoAndReturn(f func(string) (description.StatusArgs, error)) *MockStatusSourceStatusArgsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteApplicationSource is a mock of RemoteApplicationSource interface.
type MockRemoteApplicationSource struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationSourceMockRecorder
}

// MockRemoteApplicationSourceMockRecorder is the mock recorder for MockRemoteApplicationSource.
type MockRemoteApplicationSourceMockRecorder struct {
	mock *MockRemoteApplicationSource
}

// NewMockRemoteApplicationSource creates a new mock instance.
func NewMockRemoteApplicationSource(ctrl *gomock.Controller) *MockRemoteApplicationSource {
	mock := &MockRemoteApplicationSource{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteApplicationSource) EXPECT() *MockRemoteApplicationSourceMockRecorder {
	return m.recorder
}

// AllRemoteApplications mocks base method.
func (m *MockRemoteApplicationSource) AllRemoteApplications() ([]MigrationRemoteApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRemoteApplications")
	ret0, _ := ret[0].([]MigrationRemoteApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRemoteApplications indicates an expected call of AllRemoteApplications.
func (mr *MockRemoteApplicationSourceMockRecorder) AllRemoteApplications() *MockRemoteApplicationSourceAllRemoteApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRemoteApplications", reflect.TypeOf((*MockRemoteApplicationSource)(nil).AllRemoteApplications))
	return &MockRemoteApplicationSourceAllRemoteApplicationsCall{Call: call}
}

// MockRemoteApplicationSourceAllRemoteApplicationsCall wrap *gomock.Call
type MockRemoteApplicationSourceAllRemoteApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationSourceAllRemoteApplicationsCall) Return(arg0 []MigrationRemoteApplication, arg1 error) *MockRemoteApplicationSourceAllRemoteApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationSourceAllRemoteApplicationsCall) Do(f func() ([]MigrationRemoteApplication, error)) *MockRemoteApplicationSourceAllRemoteApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationSourceAllRemoteApplicationsCall) DoAndReturn(f func() ([]MigrationRemoteApplication, error)) *MockRemoteApplicationSourceAllRemoteApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StatusArgs mocks base method.
func (m *MockRemoteApplicationSource) StatusArgs(arg0 string) (description.StatusArgs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusArgs", arg0)
	ret0, _ := ret[0].(description.StatusArgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusArgs indicates an expected call of StatusArgs.
func (mr *MockRemoteApplicationSourceMockRecorder) StatusArgs(arg0 any) *MockRemoteApplicationSourceStatusArgsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusArgs", reflect.TypeOf((*MockRemoteApplicationSource)(nil).StatusArgs), arg0)
	return &MockRemoteApplicationSourceStatusArgsCall{Call: call}
}

// MockRemoteApplicationSourceStatusArgsCall wrap *gomock.Call
type MockRemoteApplicationSourceStatusArgsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationSourceStatusArgsCall) Return(arg0 description.StatusArgs, arg1 error) *MockRemoteApplicationSourceStatusArgsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationSourceStatusArgsCall) Do(f func(string) (description.StatusArgs, error)) *MockRemoteApplicationSourceStatusArgsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationSourceStatusArgsCall) DoAndReturn(f func(string) (description.StatusArgs, error)) *MockRemoteApplicationSourceStatusArgsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteApplicationModel is a mock of RemoteApplicationModel interface.
type MockRemoteApplicationModel struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationModelMockRecorder
}

// MockRemoteApplicationModelMockRecorder is the mock recorder for MockRemoteApplicationModel.
type MockRemoteApplicationModelMockRecorder struct {
	mock *MockRemoteApplicationModel
}

// NewMockRemoteApplicationModel creates a new mock instance.
func NewMockRemoteApplicationModel(ctrl *gomock.Controller) *MockRemoteApplicationModel {
	mock := &MockRemoteApplicationModel{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteApplicationModel) EXPECT() *MockRemoteApplicationModelMockRecorder {
	return m.recorder
}

// AddRemoteApplication mocks base method.
func (m *MockRemoteApplicationModel) AddRemoteApplication(arg0 description.RemoteApplicationArgs) description.RemoteApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplication", arg0)
	ret0, _ := ret[0].(description.RemoteApplication)
	return ret0
}

// AddRemoteApplication indicates an expected call of AddRemoteApplication.
func (mr *MockRemoteApplicationModelMockRecorder) AddRemoteApplication(arg0 any) *MockRemoteApplicationModelAddRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplication", reflect.TypeOf((*MockRemoteApplicationModel)(nil).AddRemoteApplication), arg0)
	return &MockRemoteApplicationModelAddRemoteApplicationCall{Call: call}
}

// MockRemoteApplicationModelAddRemoteApplicationCall wrap *gomock.Call
type MockRemoteApplicationModelAddRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationModelAddRemoteApplicationCall) Return(arg0 description.RemoteApplication) *MockRemoteApplicationModelAddRemoteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationModelAddRemoteApplicationCall) Do(f func(description.RemoteApplicationArgs) description.RemoteApplication) *MockRemoteApplicationModelAddRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationModelAddRemoteApplicationCall) DoAndReturn(f func(description.RemoteApplicationArgs) description.RemoteApplication) *MockRemoteApplicationModelAddRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
