// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: TransactionRunner,DocModelNamespace,ModelRemoteEntities,ModelRelationNetworks)

// Package state is a generated GoMock package.
package state

import (
	gomock "github.com/golang/mock/gomock"
	description "github.com/juju/description"
	txn "gopkg.in/mgo.v2/txn"
	reflect "reflect"
)

// MockTransactionRunner is a mock of TransactionRunner interface
type MockTransactionRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRunnerMockRecorder
}

// MockTransactionRunnerMockRecorder is the mock recorder for MockTransactionRunner
type MockTransactionRunnerMockRecorder struct {
	mock *MockTransactionRunner
}

// NewMockTransactionRunner creates a new mock instance
func NewMockTransactionRunner(ctrl *gomock.Controller) *MockTransactionRunner {
	mock := &MockTransactionRunner{ctrl: ctrl}
	mock.recorder = &MockTransactionRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionRunner) EXPECT() *MockTransactionRunnerMockRecorder {
	return m.recorder
}

// RunTransaction mocks base method
func (m *MockTransactionRunner) RunTransaction(arg0 []txn.Op) error {
	ret := m.ctrl.Call(m, "RunTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction
func (mr *MockTransactionRunnerMockRecorder) RunTransaction(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockTransactionRunner)(nil).RunTransaction), arg0)
}

// MockDocModelNamespace is a mock of DocModelNamespace interface
type MockDocModelNamespace struct {
	ctrl     *gomock.Controller
	recorder *MockDocModelNamespaceMockRecorder
}

// MockDocModelNamespaceMockRecorder is the mock recorder for MockDocModelNamespace
type MockDocModelNamespaceMockRecorder struct {
	mock *MockDocModelNamespace
}

// NewMockDocModelNamespace creates a new mock instance
func NewMockDocModelNamespace(ctrl *gomock.Controller) *MockDocModelNamespace {
	mock := &MockDocModelNamespace{ctrl: ctrl}
	mock.recorder = &MockDocModelNamespaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocModelNamespace) EXPECT() *MockDocModelNamespaceMockRecorder {
	return m.recorder
}

// DocID mocks base method
func (m *MockDocModelNamespace) DocID(arg0 string) string {
	ret := m.ctrl.Call(m, "DocID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DocID indicates an expected call of DocID
func (mr *MockDocModelNamespaceMockRecorder) DocID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocID", reflect.TypeOf((*MockDocModelNamespace)(nil).DocID), arg0)
}

// MockModelRemoteEntities is a mock of ModelRemoteEntities interface
type MockModelRemoteEntities struct {
	ctrl     *gomock.Controller
	recorder *MockModelRemoteEntitiesMockRecorder
}

// MockModelRemoteEntitiesMockRecorder is the mock recorder for MockModelRemoteEntities
type MockModelRemoteEntitiesMockRecorder struct {
	mock *MockModelRemoteEntities
}

// NewMockModelRemoteEntities creates a new mock instance
func NewMockModelRemoteEntities(ctrl *gomock.Controller) *MockModelRemoteEntities {
	mock := &MockModelRemoteEntities{ctrl: ctrl}
	mock.recorder = &MockModelRemoteEntitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelRemoteEntities) EXPECT() *MockModelRemoteEntitiesMockRecorder {
	return m.recorder
}

// RemoteEntities mocks base method
func (m *MockModelRemoteEntities) RemoteEntities() []description.RemoteEntity {
	ret := m.ctrl.Call(m, "RemoteEntities")
	ret0, _ := ret[0].([]description.RemoteEntity)
	return ret0
}

// RemoteEntities indicates an expected call of RemoteEntities
func (mr *MockModelRemoteEntitiesMockRecorder) RemoteEntities() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteEntities", reflect.TypeOf((*MockModelRemoteEntities)(nil).RemoteEntities))
}

// MockModelRelationNetworks is a mock of ModelRelationNetworks interface
type MockModelRelationNetworks struct {
	ctrl     *gomock.Controller
	recorder *MockModelRelationNetworksMockRecorder
}

// MockModelRelationNetworksMockRecorder is the mock recorder for MockModelRelationNetworks
type MockModelRelationNetworksMockRecorder struct {
	mock *MockModelRelationNetworks
}

// NewMockModelRelationNetworks creates a new mock instance
func NewMockModelRelationNetworks(ctrl *gomock.Controller) *MockModelRelationNetworks {
	mock := &MockModelRelationNetworks{ctrl: ctrl}
	mock.recorder = &MockModelRelationNetworksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelRelationNetworks) EXPECT() *MockModelRelationNetworksMockRecorder {
	return m.recorder
}

// RelationNetworks mocks base method
func (m *MockModelRelationNetworks) RelationNetworks() []description.RelationNetwork {
	ret := m.ctrl.Call(m, "RelationNetworks")
	ret0, _ := ret[0].([]description.RelationNetwork)
	return ret0
}

// RelationNetworks indicates an expected call of RelationNetworks
func (mr *MockModelRelationNetworksMockRecorder) RelationNetworks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationNetworks", reflect.TypeOf((*MockModelRelationNetworks)(nil).RelationNetworks))
}
