// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: RemoteEntitiesInput,RelationNetworksInput,RemoteApplicationsInput,ApplicationOfferStateDocumentFactory,ApplicationOfferInput,FirewallRulesInput,FirewallRulesOutput)
//
// Generated by this command:
//
//	mockgen -typed -package state -destination migration_import_input_mock_test.go github.com/juju/juju/state RemoteEntitiesInput,RelationNetworksInput,RemoteApplicationsInput,ApplicationOfferStateDocumentFactory,ApplicationOfferInput,FirewallRulesInput,FirewallRulesOutput
//

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	description "github.com/juju/description/v8"
	config "github.com/juju/juju/environs/config"
	txn "github.com/juju/mgo/v3/txn"
	gomock "go.uber.org/mock/gomock"
)

// MockRemoteEntitiesInput is a mock of RemoteEntitiesInput interface.
type MockRemoteEntitiesInput struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteEntitiesInputMockRecorder
}

// MockRemoteEntitiesInputMockRecorder is the mock recorder for MockRemoteEntitiesInput.
type MockRemoteEntitiesInputMockRecorder struct {
	mock *MockRemoteEntitiesInput
}

// NewMockRemoteEntitiesInput creates a new mock instance.
func NewMockRemoteEntitiesInput(ctrl *gomock.Controller) *MockRemoteEntitiesInput {
	mock := &MockRemoteEntitiesInput{ctrl: ctrl}
	mock.recorder = &MockRemoteEntitiesInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteEntitiesInput) EXPECT() *MockRemoteEntitiesInputMockRecorder {
	return m.recorder
}

// DocID mocks base method.
func (m *MockRemoteEntitiesInput) DocID(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DocID indicates an expected call of DocID.
func (mr *MockRemoteEntitiesInputMockRecorder) DocID(arg0 any) *MockRemoteEntitiesInputDocIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocID", reflect.TypeOf((*MockRemoteEntitiesInput)(nil).DocID), arg0)
	return &MockRemoteEntitiesInputDocIDCall{Call: call}
}

// MockRemoteEntitiesInputDocIDCall wrap *gomock.Call
type MockRemoteEntitiesInputDocIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntitiesInputDocIDCall) Return(arg0 string) *MockRemoteEntitiesInputDocIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntitiesInputDocIDCall) Do(f func(string) string) *MockRemoteEntitiesInputDocIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntitiesInputDocIDCall) DoAndReturn(f func(string) string) *MockRemoteEntitiesInputDocIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockRemoteEntitiesInput) OfferUUID(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockRemoteEntitiesInputMockRecorder) OfferUUID(arg0 any) *MockRemoteEntitiesInputOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockRemoteEntitiesInput)(nil).OfferUUID), arg0)
	return &MockRemoteEntitiesInputOfferUUIDCall{Call: call}
}

// MockRemoteEntitiesInputOfferUUIDCall wrap *gomock.Call
type MockRemoteEntitiesInputOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntitiesInputOfferUUIDCall) Return(arg0 string, arg1 bool) *MockRemoteEntitiesInputOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntitiesInputOfferUUIDCall) Do(f func(string) (string, bool)) *MockRemoteEntitiesInputOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntitiesInputOfferUUIDCall) DoAndReturn(f func(string) (string, bool)) *MockRemoteEntitiesInputOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUIDForApp mocks base method.
func (m *MockRemoteEntitiesInput) OfferUUIDForApp(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUIDForApp", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferUUIDForApp indicates an expected call of OfferUUIDForApp.
func (mr *MockRemoteEntitiesInputMockRecorder) OfferUUIDForApp(arg0 any) *MockRemoteEntitiesInputOfferUUIDForAppCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUIDForApp", reflect.TypeOf((*MockRemoteEntitiesInput)(nil).OfferUUIDForApp), arg0)
	return &MockRemoteEntitiesInputOfferUUIDForAppCall{Call: call}
}

// MockRemoteEntitiesInputOfferUUIDForAppCall wrap *gomock.Call
type MockRemoteEntitiesInputOfferUUIDForAppCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntitiesInputOfferUUIDForAppCall) Return(arg0 string, arg1 error) *MockRemoteEntitiesInputOfferUUIDForAppCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntitiesInputOfferUUIDForAppCall) Do(f func(string) (string, error)) *MockRemoteEntitiesInputOfferUUIDForAppCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntitiesInputOfferUUIDForAppCall) DoAndReturn(f func(string) (string, error)) *MockRemoteEntitiesInputOfferUUIDForAppCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteEntities mocks base method.
func (m *MockRemoteEntitiesInput) RemoteEntities() []description.RemoteEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteEntities")
	ret0, _ := ret[0].([]description.RemoteEntity)
	return ret0
}

// RemoteEntities indicates an expected call of RemoteEntities.
func (mr *MockRemoteEntitiesInputMockRecorder) RemoteEntities() *MockRemoteEntitiesInputRemoteEntitiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteEntities", reflect.TypeOf((*MockRemoteEntitiesInput)(nil).RemoteEntities))
	return &MockRemoteEntitiesInputRemoteEntitiesCall{Call: call}
}

// MockRemoteEntitiesInputRemoteEntitiesCall wrap *gomock.Call
type MockRemoteEntitiesInputRemoteEntitiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntitiesInputRemoteEntitiesCall) Return(arg0 []description.RemoteEntity) *MockRemoteEntitiesInputRemoteEntitiesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntitiesInputRemoteEntitiesCall) Do(f func() []description.RemoteEntity) *MockRemoteEntitiesInputRemoteEntitiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntitiesInputRemoteEntitiesCall) DoAndReturn(f func() []description.RemoteEntity) *MockRemoteEntitiesInputRemoteEntitiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationNetworksInput is a mock of RelationNetworksInput interface.
type MockRelationNetworksInput struct {
	ctrl     *gomock.Controller
	recorder *MockRelationNetworksInputMockRecorder
}

// MockRelationNetworksInputMockRecorder is the mock recorder for MockRelationNetworksInput.
type MockRelationNetworksInputMockRecorder struct {
	mock *MockRelationNetworksInput
}

// NewMockRelationNetworksInput creates a new mock instance.
func NewMockRelationNetworksInput(ctrl *gomock.Controller) *MockRelationNetworksInput {
	mock := &MockRelationNetworksInput{ctrl: ctrl}
	mock.recorder = &MockRelationNetworksInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationNetworksInput) EXPECT() *MockRelationNetworksInputMockRecorder {
	return m.recorder
}

// DocID mocks base method.
func (m *MockRelationNetworksInput) DocID(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DocID indicates an expected call of DocID.
func (mr *MockRelationNetworksInputMockRecorder) DocID(arg0 any) *MockRelationNetworksInputDocIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocID", reflect.TypeOf((*MockRelationNetworksInput)(nil).DocID), arg0)
	return &MockRelationNetworksInputDocIDCall{Call: call}
}

// MockRelationNetworksInputDocIDCall wrap *gomock.Call
type MockRelationNetworksInputDocIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationNetworksInputDocIDCall) Return(arg0 string) *MockRelationNetworksInputDocIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationNetworksInputDocIDCall) Do(f func(string) string) *MockRelationNetworksInputDocIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationNetworksInputDocIDCall) DoAndReturn(f func(string) string) *MockRelationNetworksInputDocIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationNetworks mocks base method.
func (m *MockRelationNetworksInput) RelationNetworks() []description.RelationNetwork {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationNetworks")
	ret0, _ := ret[0].([]description.RelationNetwork)
	return ret0
}

// RelationNetworks indicates an expected call of RelationNetworks.
func (mr *MockRelationNetworksInputMockRecorder) RelationNetworks() *MockRelationNetworksInputRelationNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationNetworks", reflect.TypeOf((*MockRelationNetworksInput)(nil).RelationNetworks))
	return &MockRelationNetworksInputRelationNetworksCall{Call: call}
}

// MockRelationNetworksInputRelationNetworksCall wrap *gomock.Call
type MockRelationNetworksInputRelationNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationNetworksInputRelationNetworksCall) Return(arg0 []description.RelationNetwork) *MockRelationNetworksInputRelationNetworksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationNetworksInputRelationNetworksCall) Do(f func() []description.RelationNetwork) *MockRelationNetworksInputRelationNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationNetworksInputRelationNetworksCall) DoAndReturn(f func() []description.RelationNetwork) *MockRelationNetworksInputRelationNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteApplicationsInput is a mock of RemoteApplicationsInput interface.
type MockRemoteApplicationsInput struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationsInputMockRecorder
}

// MockRemoteApplicationsInputMockRecorder is the mock recorder for MockRemoteApplicationsInput.
type MockRemoteApplicationsInputMockRecorder struct {
	mock *MockRemoteApplicationsInput
}

// NewMockRemoteApplicationsInput creates a new mock instance.
func NewMockRemoteApplicationsInput(ctrl *gomock.Controller) *MockRemoteApplicationsInput {
	mock := &MockRemoteApplicationsInput{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationsInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteApplicationsInput) EXPECT() *MockRemoteApplicationsInputMockRecorder {
	return m.recorder
}

// DocID mocks base method.
func (m *MockRemoteApplicationsInput) DocID(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DocID indicates an expected call of DocID.
func (mr *MockRemoteApplicationsInputMockRecorder) DocID(arg0 any) *MockRemoteApplicationsInputDocIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocID", reflect.TypeOf((*MockRemoteApplicationsInput)(nil).DocID), arg0)
	return &MockRemoteApplicationsInputDocIDCall{Call: call}
}

// MockRemoteApplicationsInputDocIDCall wrap *gomock.Call
type MockRemoteApplicationsInputDocIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationsInputDocIDCall) Return(arg0 string) *MockRemoteApplicationsInputDocIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationsInputDocIDCall) Do(f func(string) string) *MockRemoteApplicationsInputDocIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationsInputDocIDCall) DoAndReturn(f func(string) string) *MockRemoteApplicationsInputDocIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeRemoteApplicationDoc mocks base method.
func (m *MockRemoteApplicationsInput) MakeRemoteApplicationDoc(arg0 description.RemoteApplication) *remoteApplicationDoc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRemoteApplicationDoc", arg0)
	ret0, _ := ret[0].(*remoteApplicationDoc)
	return ret0
}

// MakeRemoteApplicationDoc indicates an expected call of MakeRemoteApplicationDoc.
func (mr *MockRemoteApplicationsInputMockRecorder) MakeRemoteApplicationDoc(arg0 any) *MockRemoteApplicationsInputMakeRemoteApplicationDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRemoteApplicationDoc", reflect.TypeOf((*MockRemoteApplicationsInput)(nil).MakeRemoteApplicationDoc), arg0)
	return &MockRemoteApplicationsInputMakeRemoteApplicationDocCall{Call: call}
}

// MockRemoteApplicationsInputMakeRemoteApplicationDocCall wrap *gomock.Call
type MockRemoteApplicationsInputMakeRemoteApplicationDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationsInputMakeRemoteApplicationDocCall) Return(arg0 *remoteApplicationDoc) *MockRemoteApplicationsInputMakeRemoteApplicationDocCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationsInputMakeRemoteApplicationDocCall) Do(f func(description.RemoteApplication) *remoteApplicationDoc) *MockRemoteApplicationsInputMakeRemoteApplicationDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationsInputMakeRemoteApplicationDocCall) DoAndReturn(f func(description.RemoteApplication) *remoteApplicationDoc) *MockRemoteApplicationsInputMakeRemoteApplicationDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeStatusDoc mocks base method.
func (m *MockRemoteApplicationsInput) MakeStatusDoc(arg0 description.Status) statusDoc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeStatusDoc", arg0)
	ret0, _ := ret[0].(statusDoc)
	return ret0
}

// MakeStatusDoc indicates an expected call of MakeStatusDoc.
func (mr *MockRemoteApplicationsInputMockRecorder) MakeStatusDoc(arg0 any) *MockRemoteApplicationsInputMakeStatusDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeStatusDoc", reflect.TypeOf((*MockRemoteApplicationsInput)(nil).MakeStatusDoc), arg0)
	return &MockRemoteApplicationsInputMakeStatusDocCall{Call: call}
}

// MockRemoteApplicationsInputMakeStatusDocCall wrap *gomock.Call
type MockRemoteApplicationsInputMakeStatusDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationsInputMakeStatusDocCall) Return(arg0 statusDoc) *MockRemoteApplicationsInputMakeStatusDocCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationsInputMakeStatusDocCall) Do(f func(description.Status) statusDoc) *MockRemoteApplicationsInputMakeStatusDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationsInputMakeStatusDocCall) DoAndReturn(f func(description.Status) statusDoc) *MockRemoteApplicationsInputMakeStatusDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeStatusOp mocks base method.
func (m *MockRemoteApplicationsInput) MakeStatusOp(arg0 string, arg1 statusDoc) txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeStatusOp", arg0, arg1)
	ret0, _ := ret[0].(txn.Op)
	return ret0
}

// MakeStatusOp indicates an expected call of MakeStatusOp.
func (mr *MockRemoteApplicationsInputMockRecorder) MakeStatusOp(arg0, arg1 any) *MockRemoteApplicationsInputMakeStatusOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeStatusOp", reflect.TypeOf((*MockRemoteApplicationsInput)(nil).MakeStatusOp), arg0, arg1)
	return &MockRemoteApplicationsInputMakeStatusOpCall{Call: call}
}

// MockRemoteApplicationsInputMakeStatusOpCall wrap *gomock.Call
type MockRemoteApplicationsInputMakeStatusOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationsInputMakeStatusOpCall) Return(arg0 txn.Op) *MockRemoteApplicationsInputMakeStatusOpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationsInputMakeStatusOpCall) Do(f func(string, statusDoc) txn.Op) *MockRemoteApplicationsInputMakeStatusOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationsInputMakeStatusOpCall) DoAndReturn(f func(string, statusDoc) txn.Op) *MockRemoteApplicationsInputMakeStatusOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewRemoteApplication mocks base method.
func (m *MockRemoteApplicationsInput) NewRemoteApplication(arg0 *remoteApplicationDoc) *RemoteApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRemoteApplication", arg0)
	ret0, _ := ret[0].(*RemoteApplication)
	return ret0
}

// NewRemoteApplication indicates an expected call of NewRemoteApplication.
func (mr *MockRemoteApplicationsInputMockRecorder) NewRemoteApplication(arg0 any) *MockRemoteApplicationsInputNewRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRemoteApplication", reflect.TypeOf((*MockRemoteApplicationsInput)(nil).NewRemoteApplication), arg0)
	return &MockRemoteApplicationsInputNewRemoteApplicationCall{Call: call}
}

// MockRemoteApplicationsInputNewRemoteApplicationCall wrap *gomock.Call
type MockRemoteApplicationsInputNewRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationsInputNewRemoteApplicationCall) Return(arg0 *RemoteApplication) *MockRemoteApplicationsInputNewRemoteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationsInputNewRemoteApplicationCall) Do(f func(*remoteApplicationDoc) *RemoteApplication) *MockRemoteApplicationsInputNewRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationsInputNewRemoteApplicationCall) DoAndReturn(f func(*remoteApplicationDoc) *RemoteApplication) *MockRemoteApplicationsInputNewRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplications mocks base method.
func (m *MockRemoteApplicationsInput) RemoteApplications() []description.RemoteApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplications")
	ret0, _ := ret[0].([]description.RemoteApplication)
	return ret0
}

// RemoteApplications indicates an expected call of RemoteApplications.
func (mr *MockRemoteApplicationsInputMockRecorder) RemoteApplications() *MockRemoteApplicationsInputRemoteApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplications", reflect.TypeOf((*MockRemoteApplicationsInput)(nil).RemoteApplications))
	return &MockRemoteApplicationsInputRemoteApplicationsCall{Call: call}
}

// MockRemoteApplicationsInputRemoteApplicationsCall wrap *gomock.Call
type MockRemoteApplicationsInputRemoteApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationsInputRemoteApplicationsCall) Return(arg0 []description.RemoteApplication) *MockRemoteApplicationsInputRemoteApplicationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationsInputRemoteApplicationsCall) Do(f func() []description.RemoteApplication) *MockRemoteApplicationsInputRemoteApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationsInputRemoteApplicationsCall) DoAndReturn(f func() []description.RemoteApplication) *MockRemoteApplicationsInputRemoteApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationOfferStateDocumentFactory is a mock of ApplicationOfferStateDocumentFactory interface.
type MockApplicationOfferStateDocumentFactory struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationOfferStateDocumentFactoryMockRecorder
}

// MockApplicationOfferStateDocumentFactoryMockRecorder is the mock recorder for MockApplicationOfferStateDocumentFactory.
type MockApplicationOfferStateDocumentFactoryMockRecorder struct {
	mock *MockApplicationOfferStateDocumentFactory
}

// NewMockApplicationOfferStateDocumentFactory creates a new mock instance.
func NewMockApplicationOfferStateDocumentFactory(ctrl *gomock.Controller) *MockApplicationOfferStateDocumentFactory {
	mock := &MockApplicationOfferStateDocumentFactory{ctrl: ctrl}
	mock.recorder = &MockApplicationOfferStateDocumentFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationOfferStateDocumentFactory) EXPECT() *MockApplicationOfferStateDocumentFactoryMockRecorder {
	return m.recorder
}

// MakeApplicationOfferDoc mocks base method.
func (m *MockApplicationOfferStateDocumentFactory) MakeApplicationOfferDoc(arg0 description.ApplicationOffer) (applicationOfferDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeApplicationOfferDoc", arg0)
	ret0, _ := ret[0].(applicationOfferDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeApplicationOfferDoc indicates an expected call of MakeApplicationOfferDoc.
func (mr *MockApplicationOfferStateDocumentFactoryMockRecorder) MakeApplicationOfferDoc(arg0 any) *MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeApplicationOfferDoc", reflect.TypeOf((*MockApplicationOfferStateDocumentFactory)(nil).MakeApplicationOfferDoc), arg0)
	return &MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall{Call: call}
}

// MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall wrap *gomock.Call
type MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall) Return(arg0 applicationOfferDoc, arg1 error) *MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall) Do(f func(description.ApplicationOffer) (applicationOfferDoc, error)) *MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall) DoAndReturn(f func(description.ApplicationOffer) (applicationOfferDoc, error)) *MockApplicationOfferStateDocumentFactoryMakeApplicationOfferDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeApplicationOffersRefOp mocks base method.
func (m *MockApplicationOfferStateDocumentFactory) MakeApplicationOffersRefOp(arg0 string, arg1 int) (txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeApplicationOffersRefOp", arg0, arg1)
	ret0, _ := ret[0].(txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeApplicationOffersRefOp indicates an expected call of MakeApplicationOffersRefOp.
func (mr *MockApplicationOfferStateDocumentFactoryMockRecorder) MakeApplicationOffersRefOp(arg0, arg1 any) *MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeApplicationOffersRefOp", reflect.TypeOf((*MockApplicationOfferStateDocumentFactory)(nil).MakeApplicationOffersRefOp), arg0, arg1)
	return &MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall{Call: call}
}

// MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall wrap *gomock.Call
type MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall) Return(arg0 txn.Op, arg1 error) *MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall) Do(f func(string, int) (txn.Op, error)) *MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall) DoAndReturn(f func(string, int) (txn.Op, error)) *MockApplicationOfferStateDocumentFactoryMakeApplicationOffersRefOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationOfferInput is a mock of ApplicationOfferInput interface.
type MockApplicationOfferInput struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationOfferInputMockRecorder
}

// MockApplicationOfferInputMockRecorder is the mock recorder for MockApplicationOfferInput.
type MockApplicationOfferInputMockRecorder struct {
	mock *MockApplicationOfferInput
}

// NewMockApplicationOfferInput creates a new mock instance.
func NewMockApplicationOfferInput(ctrl *gomock.Controller) *MockApplicationOfferInput {
	mock := &MockApplicationOfferInput{ctrl: ctrl}
	mock.recorder = &MockApplicationOfferInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationOfferInput) EXPECT() *MockApplicationOfferInputMockRecorder {
	return m.recorder
}

// DocID mocks base method.
func (m *MockApplicationOfferInput) DocID(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DocID indicates an expected call of DocID.
func (mr *MockApplicationOfferInputMockRecorder) DocID(arg0 any) *MockApplicationOfferInputDocIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocID", reflect.TypeOf((*MockApplicationOfferInput)(nil).DocID), arg0)
	return &MockApplicationOfferInputDocIDCall{Call: call}
}

// MockApplicationOfferInputDocIDCall wrap *gomock.Call
type MockApplicationOfferInputDocIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferInputDocIDCall) Return(arg0 string) *MockApplicationOfferInputDocIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferInputDocIDCall) Do(f func(string) string) *MockApplicationOfferInputDocIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferInputDocIDCall) DoAndReturn(f func(string) string) *MockApplicationOfferInputDocIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeApplicationOfferDoc mocks base method.
func (m *MockApplicationOfferInput) MakeApplicationOfferDoc(arg0 description.ApplicationOffer) (applicationOfferDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeApplicationOfferDoc", arg0)
	ret0, _ := ret[0].(applicationOfferDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeApplicationOfferDoc indicates an expected call of MakeApplicationOfferDoc.
func (mr *MockApplicationOfferInputMockRecorder) MakeApplicationOfferDoc(arg0 any) *MockApplicationOfferInputMakeApplicationOfferDocCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeApplicationOfferDoc", reflect.TypeOf((*MockApplicationOfferInput)(nil).MakeApplicationOfferDoc), arg0)
	return &MockApplicationOfferInputMakeApplicationOfferDocCall{Call: call}
}

// MockApplicationOfferInputMakeApplicationOfferDocCall wrap *gomock.Call
type MockApplicationOfferInputMakeApplicationOfferDocCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferInputMakeApplicationOfferDocCall) Return(arg0 applicationOfferDoc, arg1 error) *MockApplicationOfferInputMakeApplicationOfferDocCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferInputMakeApplicationOfferDocCall) Do(f func(description.ApplicationOffer) (applicationOfferDoc, error)) *MockApplicationOfferInputMakeApplicationOfferDocCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferInputMakeApplicationOfferDocCall) DoAndReturn(f func(description.ApplicationOffer) (applicationOfferDoc, error)) *MockApplicationOfferInputMakeApplicationOfferDocCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeApplicationOffersRefOp mocks base method.
func (m *MockApplicationOfferInput) MakeApplicationOffersRefOp(arg0 string, arg1 int) (txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeApplicationOffersRefOp", arg0, arg1)
	ret0, _ := ret[0].(txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeApplicationOffersRefOp indicates an expected call of MakeApplicationOffersRefOp.
func (mr *MockApplicationOfferInputMockRecorder) MakeApplicationOffersRefOp(arg0, arg1 any) *MockApplicationOfferInputMakeApplicationOffersRefOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeApplicationOffersRefOp", reflect.TypeOf((*MockApplicationOfferInput)(nil).MakeApplicationOffersRefOp), arg0, arg1)
	return &MockApplicationOfferInputMakeApplicationOffersRefOpCall{Call: call}
}

// MockApplicationOfferInputMakeApplicationOffersRefOpCall wrap *gomock.Call
type MockApplicationOfferInputMakeApplicationOffersRefOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferInputMakeApplicationOffersRefOpCall) Return(arg0 txn.Op, arg1 error) *MockApplicationOfferInputMakeApplicationOffersRefOpCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferInputMakeApplicationOffersRefOpCall) Do(f func(string, int) (txn.Op, error)) *MockApplicationOfferInputMakeApplicationOffersRefOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferInputMakeApplicationOffersRefOpCall) DoAndReturn(f func(string, int) (txn.Op, error)) *MockApplicationOfferInputMakeApplicationOffersRefOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Offers mocks base method.
func (m *MockApplicationOfferInput) Offers() []description.ApplicationOffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offers")
	ret0, _ := ret[0].([]description.ApplicationOffer)
	return ret0
}

// Offers indicates an expected call of Offers.
func (mr *MockApplicationOfferInputMockRecorder) Offers() *MockApplicationOfferInputOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offers", reflect.TypeOf((*MockApplicationOfferInput)(nil).Offers))
	return &MockApplicationOfferInputOffersCall{Call: call}
}

// MockApplicationOfferInputOffersCall wrap *gomock.Call
type MockApplicationOfferInputOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferInputOffersCall) Return(arg0 []description.ApplicationOffer) *MockApplicationOfferInputOffersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferInputOffersCall) Do(f func() []description.ApplicationOffer) *MockApplicationOfferInputOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferInputOffersCall) DoAndReturn(f func() []description.ApplicationOffer) *MockApplicationOfferInputOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFirewallRulesInput is a mock of FirewallRulesInput interface.
type MockFirewallRulesInput struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallRulesInputMockRecorder
}

// MockFirewallRulesInputMockRecorder is the mock recorder for MockFirewallRulesInput.
type MockFirewallRulesInputMockRecorder struct {
	mock *MockFirewallRulesInput
}

// NewMockFirewallRulesInput creates a new mock instance.
func NewMockFirewallRulesInput(ctrl *gomock.Controller) *MockFirewallRulesInput {
	mock := &MockFirewallRulesInput{ctrl: ctrl}
	mock.recorder = &MockFirewallRulesInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallRulesInput) EXPECT() *MockFirewallRulesInputMockRecorder {
	return m.recorder
}

// ConfigSchemaSourceGetter mocks base method.
func (m *MockFirewallRulesInput) ConfigSchemaSourceGetter() config.ConfigSchemaSourceGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSchemaSourceGetter")
	ret0, _ := ret[0].(config.ConfigSchemaSourceGetter)
	return ret0
}

// ConfigSchemaSourceGetter indicates an expected call of ConfigSchemaSourceGetter.
func (mr *MockFirewallRulesInputMockRecorder) ConfigSchemaSourceGetter() *MockFirewallRulesInputConfigSchemaSourceGetterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSchemaSourceGetter", reflect.TypeOf((*MockFirewallRulesInput)(nil).ConfigSchemaSourceGetter))
	return &MockFirewallRulesInputConfigSchemaSourceGetterCall{Call: call}
}

// MockFirewallRulesInputConfigSchemaSourceGetterCall wrap *gomock.Call
type MockFirewallRulesInputConfigSchemaSourceGetterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallRulesInputConfigSchemaSourceGetterCall) Return(arg0 config.ConfigSchemaSourceGetter) *MockFirewallRulesInputConfigSchemaSourceGetterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallRulesInputConfigSchemaSourceGetterCall) Do(f func() config.ConfigSchemaSourceGetter) *MockFirewallRulesInputConfigSchemaSourceGetterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallRulesInputConfigSchemaSourceGetterCall) DoAndReturn(f func() config.ConfigSchemaSourceGetter) *MockFirewallRulesInputConfigSchemaSourceGetterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FirewallRules mocks base method.
func (m *MockFirewallRulesInput) FirewallRules() []description.FirewallRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirewallRules")
	ret0, _ := ret[0].([]description.FirewallRule)
	return ret0
}

// FirewallRules indicates an expected call of FirewallRules.
func (mr *MockFirewallRulesInputMockRecorder) FirewallRules() *MockFirewallRulesInputFirewallRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirewallRules", reflect.TypeOf((*MockFirewallRulesInput)(nil).FirewallRules))
	return &MockFirewallRulesInputFirewallRulesCall{Call: call}
}

// MockFirewallRulesInputFirewallRulesCall wrap *gomock.Call
type MockFirewallRulesInputFirewallRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallRulesInputFirewallRulesCall) Return(arg0 []description.FirewallRule) *MockFirewallRulesInputFirewallRulesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallRulesInputFirewallRulesCall) Do(f func() []description.FirewallRule) *MockFirewallRulesInputFirewallRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallRulesInputFirewallRulesCall) DoAndReturn(f func() []description.FirewallRule) *MockFirewallRulesInputFirewallRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFirewallRulesOutput is a mock of FirewallRulesOutput interface.
type MockFirewallRulesOutput struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallRulesOutputMockRecorder
}

// MockFirewallRulesOutputMockRecorder is the mock recorder for MockFirewallRulesOutput.
type MockFirewallRulesOutputMockRecorder struct {
	mock *MockFirewallRulesOutput
}

// NewMockFirewallRulesOutput creates a new mock instance.
func NewMockFirewallRulesOutput(ctrl *gomock.Controller) *MockFirewallRulesOutput {
	mock := &MockFirewallRulesOutput{ctrl: ctrl}
	mock.recorder = &MockFirewallRulesOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallRulesOutput) EXPECT() *MockFirewallRulesOutputMockRecorder {
	return m.recorder
}

// UpdateModelConfig mocks base method.
func (m *MockFirewallRulesOutput) UpdateModelConfig(arg0 config.ConfigSchemaSourceGetter, arg1 map[string]any, arg2 []string, arg3 ...ValidateConfigFunc) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelConfig indicates an expected call of UpdateModelConfig.
func (mr *MockFirewallRulesOutputMockRecorder) UpdateModelConfig(arg0, arg1, arg2 any, arg3 ...any) *MockFirewallRulesOutputUpdateModelConfigCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelConfig", reflect.TypeOf((*MockFirewallRulesOutput)(nil).UpdateModelConfig), varargs...)
	return &MockFirewallRulesOutputUpdateModelConfigCall{Call: call}
}

// MockFirewallRulesOutputUpdateModelConfigCall wrap *gomock.Call
type MockFirewallRulesOutputUpdateModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallRulesOutputUpdateModelConfigCall) Return(arg0 error) *MockFirewallRulesOutputUpdateModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallRulesOutputUpdateModelConfigCall) Do(f func(config.ConfigSchemaSourceGetter, map[string]any, []string, ...ValidateConfigFunc) error) *MockFirewallRulesOutputUpdateModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallRulesOutputUpdateModelConfigCall) DoAndReturn(f func(config.ConfigSchemaSourceGetter, map[string]any, []string, ...ValidateConfigFunc) error) *MockFirewallRulesOutputUpdateModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
