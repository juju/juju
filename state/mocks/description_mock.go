// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/description/v8 (interfaces: Application,Machine,PortRanges,UnitPortRanges)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/description_mock.go github.com/juju/description/v8 Application,Machine,PortRanges,UnitPortRanges
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	description "github.com/juju/description/v8"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// AddOffer mocks base method.
func (m *MockApplication) AddOffer(arg0 description.ApplicationOfferArgs) description.ApplicationOffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOffer", arg0)
	ret0, _ := ret[0].(description.ApplicationOffer)
	return ret0
}

// AddOffer indicates an expected call of AddOffer.
func (mr *MockApplicationMockRecorder) AddOffer(arg0 any) *MockApplicationAddOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffer", reflect.TypeOf((*MockApplication)(nil).AddOffer), arg0)
	return &MockApplicationAddOfferCall{Call: call}
}

// MockApplicationAddOfferCall wrap *gomock.Call
type MockApplicationAddOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAddOfferCall) Return(arg0 description.ApplicationOffer) *MockApplicationAddOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAddOfferCall) Do(f func(description.ApplicationOfferArgs) description.ApplicationOffer) *MockApplicationAddOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAddOfferCall) DoAndReturn(f func(description.ApplicationOfferArgs) description.ApplicationOffer) *MockApplicationAddOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddOpenedPortRange mocks base method.
func (m *MockApplication) AddOpenedPortRange(arg0 description.OpenedPortRangeArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOpenedPortRange", arg0)
}

// AddOpenedPortRange indicates an expected call of AddOpenedPortRange.
func (mr *MockApplicationMockRecorder) AddOpenedPortRange(arg0 any) *MockApplicationAddOpenedPortRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenedPortRange", reflect.TypeOf((*MockApplication)(nil).AddOpenedPortRange), arg0)
	return &MockApplicationAddOpenedPortRangeCall{Call: call}
}

// MockApplicationAddOpenedPortRangeCall wrap *gomock.Call
type MockApplicationAddOpenedPortRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAddOpenedPortRangeCall) Return() *MockApplicationAddOpenedPortRangeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAddOpenedPortRangeCall) Do(f func(description.OpenedPortRangeArgs)) *MockApplicationAddOpenedPortRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAddOpenedPortRangeCall) DoAndReturn(f func(description.OpenedPortRangeArgs)) *MockApplicationAddOpenedPortRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddResource mocks base method.
func (m *MockApplication) AddResource(arg0 description.ResourceArgs) description.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResource", arg0)
	ret0, _ := ret[0].(description.Resource)
	return ret0
}

// AddResource indicates an expected call of AddResource.
func (mr *MockApplicationMockRecorder) AddResource(arg0 any) *MockApplicationAddResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResource", reflect.TypeOf((*MockApplication)(nil).AddResource), arg0)
	return &MockApplicationAddResourceCall{Call: call}
}

// MockApplicationAddResourceCall wrap *gomock.Call
type MockApplicationAddResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAddResourceCall) Return(arg0 description.Resource) *MockApplicationAddResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAddResourceCall) Do(f func(description.ResourceArgs) description.Resource) *MockApplicationAddResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAddResourceCall) DoAndReturn(f func(description.ResourceArgs) description.Resource) *MockApplicationAddResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUnit mocks base method.
func (m *MockApplication) AddUnit(arg0 description.UnitArgs) description.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUnit", arg0)
	ret0, _ := ret[0].(description.Unit)
	return ret0
}

// AddUnit indicates an expected call of AddUnit.
func (mr *MockApplicationMockRecorder) AddUnit(arg0 any) *MockApplicationAddUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnit", reflect.TypeOf((*MockApplication)(nil).AddUnit), arg0)
	return &MockApplicationAddUnitCall{Call: call}
}

// MockApplicationAddUnitCall wrap *gomock.Call
type MockApplicationAddUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAddUnitCall) Return(arg0 description.Unit) *MockApplicationAddUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAddUnitCall) Do(f func(description.UnitArgs) description.Unit) *MockApplicationAddUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAddUnitCall) DoAndReturn(f func(description.UnitArgs) description.Unit) *MockApplicationAddUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Annotations mocks base method.
func (m *MockApplication) Annotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Annotations indicates an expected call of Annotations.
func (mr *MockApplicationMockRecorder) Annotations() *MockApplicationAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotations", reflect.TypeOf((*MockApplication)(nil).Annotations))
	return &MockApplicationAnnotationsCall{Call: call}
}

// MockApplicationAnnotationsCall wrap *gomock.Call
type MockApplicationAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAnnotationsCall) Return(arg0 map[string]string) *MockApplicationAnnotationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAnnotationsCall) Do(f func() map[string]string) *MockApplicationAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAnnotationsCall) DoAndReturn(f func() map[string]string) *MockApplicationAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationConfig mocks base method.
func (m *MockApplication) ApplicationConfig() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationConfig")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// ApplicationConfig indicates an expected call of ApplicationConfig.
func (mr *MockApplicationMockRecorder) ApplicationConfig() *MockApplicationApplicationConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationConfig", reflect.TypeOf((*MockApplication)(nil).ApplicationConfig))
	return &MockApplicationApplicationConfigCall{Call: call}
}

// MockApplicationApplicationConfigCall wrap *gomock.Call
type MockApplicationApplicationConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationApplicationConfigCall) Return(arg0 map[string]any) *MockApplicationApplicationConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationApplicationConfigCall) Do(f func() map[string]any) *MockApplicationApplicationConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationApplicationConfigCall) DoAndReturn(f func() map[string]any) *MockApplicationApplicationConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Channel mocks base method.
func (m *MockApplication) Channel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(string)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockApplicationMockRecorder) Channel() *MockApplicationChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockApplication)(nil).Channel))
	return &MockApplicationChannelCall{Call: call}
}

// MockApplicationChannelCall wrap *gomock.Call
type MockApplicationChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationChannelCall) Return(arg0 string) *MockApplicationChannelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationChannelCall) Do(f func() string) *MockApplicationChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationChannelCall) DoAndReturn(f func() string) *MockApplicationChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmConfig mocks base method.
func (m *MockApplication) CharmConfig() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmConfig")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// CharmConfig indicates an expected call of CharmConfig.
func (mr *MockApplicationMockRecorder) CharmConfig() *MockApplicationCharmConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmConfig", reflect.TypeOf((*MockApplication)(nil).CharmConfig))
	return &MockApplicationCharmConfigCall{Call: call}
}

// MockApplicationCharmConfigCall wrap *gomock.Call
type MockApplicationCharmConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmConfigCall) Return(arg0 map[string]any) *MockApplicationCharmConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmConfigCall) Do(f func() map[string]any) *MockApplicationCharmConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmConfigCall) DoAndReturn(f func() map[string]any) *MockApplicationCharmConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmManifest mocks base method.
func (m *MockApplication) CharmManifest() description.CharmManifest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmManifest")
	ret0, _ := ret[0].(description.CharmManifest)
	return ret0
}

// CharmManifest indicates an expected call of CharmManifest.
func (mr *MockApplicationMockRecorder) CharmManifest() *MockApplicationCharmManifestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmManifest", reflect.TypeOf((*MockApplication)(nil).CharmManifest))
	return &MockApplicationCharmManifestCall{Call: call}
}

// MockApplicationCharmManifestCall wrap *gomock.Call
type MockApplicationCharmManifestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmManifestCall) Return(arg0 description.CharmManifest) *MockApplicationCharmManifestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmManifestCall) Do(f func() description.CharmManifest) *MockApplicationCharmManifestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmManifestCall) DoAndReturn(f func() description.CharmManifest) *MockApplicationCharmManifestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmMetadata mocks base method.
func (m *MockApplication) CharmMetadata() description.CharmMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmMetadata")
	ret0, _ := ret[0].(description.CharmMetadata)
	return ret0
}

// CharmMetadata indicates an expected call of CharmMetadata.
func (mr *MockApplicationMockRecorder) CharmMetadata() *MockApplicationCharmMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmMetadata", reflect.TypeOf((*MockApplication)(nil).CharmMetadata))
	return &MockApplicationCharmMetadataCall{Call: call}
}

// MockApplicationCharmMetadataCall wrap *gomock.Call
type MockApplicationCharmMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmMetadataCall) Return(arg0 description.CharmMetadata) *MockApplicationCharmMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmMetadataCall) Do(f func() description.CharmMetadata) *MockApplicationCharmMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmMetadataCall) DoAndReturn(f func() description.CharmMetadata) *MockApplicationCharmMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmModifiedVersion mocks base method.
func (m *MockApplication) CharmModifiedVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmModifiedVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// CharmModifiedVersion indicates an expected call of CharmModifiedVersion.
func (mr *MockApplicationMockRecorder) CharmModifiedVersion() *MockApplicationCharmModifiedVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmModifiedVersion", reflect.TypeOf((*MockApplication)(nil).CharmModifiedVersion))
	return &MockApplicationCharmModifiedVersionCall{Call: call}
}

// MockApplicationCharmModifiedVersionCall wrap *gomock.Call
type MockApplicationCharmModifiedVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmModifiedVersionCall) Return(arg0 int) *MockApplicationCharmModifiedVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmModifiedVersionCall) Do(f func() int) *MockApplicationCharmModifiedVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmModifiedVersionCall) DoAndReturn(f func() int) *MockApplicationCharmModifiedVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmOrigin mocks base method.
func (m *MockApplication) CharmOrigin() description.CharmOrigin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmOrigin")
	ret0, _ := ret[0].(description.CharmOrigin)
	return ret0
}

// CharmOrigin indicates an expected call of CharmOrigin.
func (mr *MockApplicationMockRecorder) CharmOrigin() *MockApplicationCharmOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmOrigin", reflect.TypeOf((*MockApplication)(nil).CharmOrigin))
	return &MockApplicationCharmOriginCall{Call: call}
}

// MockApplicationCharmOriginCall wrap *gomock.Call
type MockApplicationCharmOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmOriginCall) Return(arg0 description.CharmOrigin) *MockApplicationCharmOriginCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmOriginCall) Do(f func() description.CharmOrigin) *MockApplicationCharmOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmOriginCall) DoAndReturn(f func() description.CharmOrigin) *MockApplicationCharmOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmURL mocks base method.
func (m *MockApplication) CharmURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// CharmURL indicates an expected call of CharmURL.
func (mr *MockApplicationMockRecorder) CharmURL() *MockApplicationCharmURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmURL", reflect.TypeOf((*MockApplication)(nil).CharmURL))
	return &MockApplicationCharmURLCall{Call: call}
}

// MockApplicationCharmURLCall wrap *gomock.Call
type MockApplicationCharmURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmURLCall) Return(arg0 string) *MockApplicationCharmURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmURLCall) Do(f func() string) *MockApplicationCharmURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmURLCall) DoAndReturn(f func() string) *MockApplicationCharmURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudService mocks base method.
func (m *MockApplication) CloudService() description.CloudService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudService")
	ret0, _ := ret[0].(description.CloudService)
	return ret0
}

// CloudService indicates an expected call of CloudService.
func (mr *MockApplicationMockRecorder) CloudService() *MockApplicationCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudService", reflect.TypeOf((*MockApplication)(nil).CloudService))
	return &MockApplicationCloudServiceCall{Call: call}
}

// MockApplicationCloudServiceCall wrap *gomock.Call
type MockApplicationCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCloudServiceCall) Return(arg0 description.CloudService) *MockApplicationCloudServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCloudServiceCall) Do(f func() description.CloudService) *MockApplicationCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCloudServiceCall) DoAndReturn(f func() description.CloudService) *MockApplicationCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Constraints mocks base method.
func (m *MockApplication) Constraints() description.Constraints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Constraints")
	ret0, _ := ret[0].(description.Constraints)
	return ret0
}

// Constraints indicates an expected call of Constraints.
func (mr *MockApplicationMockRecorder) Constraints() *MockApplicationConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Constraints", reflect.TypeOf((*MockApplication)(nil).Constraints))
	return &MockApplicationConstraintsCall{Call: call}
}

// MockApplicationConstraintsCall wrap *gomock.Call
type MockApplicationConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationConstraintsCall) Return(arg0 description.Constraints) *MockApplicationConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationConstraintsCall) Do(f func() description.Constraints) *MockApplicationConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationConstraintsCall) DoAndReturn(f func() description.Constraints) *MockApplicationConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DesiredScale mocks base method.
func (m *MockApplication) DesiredScale() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DesiredScale")
	ret0, _ := ret[0].(int)
	return ret0
}

// DesiredScale indicates an expected call of DesiredScale.
func (mr *MockApplicationMockRecorder) DesiredScale() *MockApplicationDesiredScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DesiredScale", reflect.TypeOf((*MockApplication)(nil).DesiredScale))
	return &MockApplicationDesiredScaleCall{Call: call}
}

// MockApplicationDesiredScaleCall wrap *gomock.Call
type MockApplicationDesiredScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationDesiredScaleCall) Return(arg0 int) *MockApplicationDesiredScaleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationDesiredScaleCall) Do(f func() int) *MockApplicationDesiredScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationDesiredScaleCall) DoAndReturn(f func() int) *MockApplicationDesiredScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndpointBindings mocks base method.
func (m *MockApplication) EndpointBindings() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointBindings")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// EndpointBindings indicates an expected call of EndpointBindings.
func (mr *MockApplicationMockRecorder) EndpointBindings() *MockApplicationEndpointBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointBindings", reflect.TypeOf((*MockApplication)(nil).EndpointBindings))
	return &MockApplicationEndpointBindingsCall{Call: call}
}

// MockApplicationEndpointBindingsCall wrap *gomock.Call
type MockApplicationEndpointBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationEndpointBindingsCall) Return(arg0 map[string]string) *MockApplicationEndpointBindingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationEndpointBindingsCall) Do(f func() map[string]string) *MockApplicationEndpointBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationEndpointBindingsCall) DoAndReturn(f func() map[string]string) *MockApplicationEndpointBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exposed mocks base method.
func (m *MockApplication) Exposed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exposed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exposed indicates an expected call of Exposed.
func (mr *MockApplicationMockRecorder) Exposed() *MockApplicationExposedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exposed", reflect.TypeOf((*MockApplication)(nil).Exposed))
	return &MockApplicationExposedCall{Call: call}
}

// MockApplicationExposedCall wrap *gomock.Call
type MockApplicationExposedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationExposedCall) Return(arg0 bool) *MockApplicationExposedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationExposedCall) Do(f func() bool) *MockApplicationExposedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationExposedCall) DoAndReturn(f func() bool) *MockApplicationExposedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExposedEndpoints mocks base method.
func (m *MockApplication) ExposedEndpoints() map[string]description.ExposedEndpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExposedEndpoints")
	ret0, _ := ret[0].(map[string]description.ExposedEndpoint)
	return ret0
}

// ExposedEndpoints indicates an expected call of ExposedEndpoints.
func (mr *MockApplicationMockRecorder) ExposedEndpoints() *MockApplicationExposedEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExposedEndpoints", reflect.TypeOf((*MockApplication)(nil).ExposedEndpoints))
	return &MockApplicationExposedEndpointsCall{Call: call}
}

// MockApplicationExposedEndpointsCall wrap *gomock.Call
type MockApplicationExposedEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationExposedEndpointsCall) Return(arg0 map[string]description.ExposedEndpoint) *MockApplicationExposedEndpointsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationExposedEndpointsCall) Do(f func() map[string]description.ExposedEndpoint) *MockApplicationExposedEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationExposedEndpointsCall) DoAndReturn(f func() map[string]description.ExposedEndpoint) *MockApplicationExposedEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ForceCharm mocks base method.
func (m *MockApplication) ForceCharm() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceCharm")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ForceCharm indicates an expected call of ForceCharm.
func (mr *MockApplicationMockRecorder) ForceCharm() *MockApplicationForceCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceCharm", reflect.TypeOf((*MockApplication)(nil).ForceCharm))
	return &MockApplicationForceCharmCall{Call: call}
}

// MockApplicationForceCharmCall wrap *gomock.Call
type MockApplicationForceCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationForceCharmCall) Return(arg0 bool) *MockApplicationForceCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationForceCharmCall) Do(f func() bool) *MockApplicationForceCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationForceCharmCall) DoAndReturn(f func() bool) *MockApplicationForceCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasResources mocks base method.
func (m *MockApplication) HasResources() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasResources")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasResources indicates an expected call of HasResources.
func (mr *MockApplicationMockRecorder) HasResources() *MockApplicationHasResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasResources", reflect.TypeOf((*MockApplication)(nil).HasResources))
	return &MockApplicationHasResourcesCall{Call: call}
}

// MockApplicationHasResourcesCall wrap *gomock.Call
type MockApplicationHasResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationHasResourcesCall) Return(arg0 bool) *MockApplicationHasResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationHasResourcesCall) Do(f func() bool) *MockApplicationHasResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationHasResourcesCall) DoAndReturn(f func() bool) *MockApplicationHasResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Leader mocks base method.
func (m *MockApplication) Leader() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leader")
	ret0, _ := ret[0].(string)
	return ret0
}

// Leader indicates an expected call of Leader.
func (mr *MockApplicationMockRecorder) Leader() *MockApplicationLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockApplication)(nil).Leader))
	return &MockApplicationLeaderCall{Call: call}
}

// MockApplicationLeaderCall wrap *gomock.Call
type MockApplicationLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationLeaderCall) Return(arg0 string) *MockApplicationLeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationLeaderCall) Do(f func() string) *MockApplicationLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationLeaderCall) DoAndReturn(f func() string) *MockApplicationLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeadershipSettings mocks base method.
func (m *MockApplication) LeadershipSettings() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeadershipSettings")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// LeadershipSettings indicates an expected call of LeadershipSettings.
func (mr *MockApplicationMockRecorder) LeadershipSettings() *MockApplicationLeadershipSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeadershipSettings", reflect.TypeOf((*MockApplication)(nil).LeadershipSettings))
	return &MockApplicationLeadershipSettingsCall{Call: call}
}

// MockApplicationLeadershipSettingsCall wrap *gomock.Call
type MockApplicationLeadershipSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationLeadershipSettingsCall) Return(arg0 map[string]any) *MockApplicationLeadershipSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationLeadershipSettingsCall) Do(f func() map[string]any) *MockApplicationLeadershipSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationLeadershipSettingsCall) DoAndReturn(f func() map[string]any) *MockApplicationLeadershipSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MetricsCredentials mocks base method.
func (m *MockApplication) MetricsCredentials() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsCredentials")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MetricsCredentials indicates an expected call of MetricsCredentials.
func (mr *MockApplicationMockRecorder) MetricsCredentials() *MockApplicationMetricsCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsCredentials", reflect.TypeOf((*MockApplication)(nil).MetricsCredentials))
	return &MockApplicationMetricsCredentialsCall{Call: call}
}

// MockApplicationMetricsCredentialsCall wrap *gomock.Call
type MockApplicationMetricsCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationMetricsCredentialsCall) Return(arg0 []byte) *MockApplicationMetricsCredentialsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationMetricsCredentialsCall) Do(f func() []byte) *MockApplicationMetricsCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationMetricsCredentialsCall) DoAndReturn(f func() []byte) *MockApplicationMetricsCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MinUnits mocks base method.
func (m *MockApplication) MinUnits() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinUnits")
	ret0, _ := ret[0].(int)
	return ret0
}

// MinUnits indicates an expected call of MinUnits.
func (mr *MockApplicationMockRecorder) MinUnits() *MockApplicationMinUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinUnits", reflect.TypeOf((*MockApplication)(nil).MinUnits))
	return &MockApplicationMinUnitsCall{Call: call}
}

// MockApplicationMinUnitsCall wrap *gomock.Call
type MockApplicationMinUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationMinUnitsCall) Return(arg0 int) *MockApplicationMinUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationMinUnitsCall) Do(f func() int) *MockApplicationMinUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationMinUnitsCall) DoAndReturn(f func() int) *MockApplicationMinUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockApplication) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockApplicationMockRecorder) Name() *MockApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockApplication)(nil).Name))
	return &MockApplicationNameCall{Call: call}
}

// MockApplicationNameCall wrap *gomock.Call
type MockApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationNameCall) Return(arg0 string) *MockApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationNameCall) Do(f func() string) *MockApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationNameCall) DoAndReturn(f func() string) *MockApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Offers mocks base method.
func (m *MockApplication) Offers() []description.ApplicationOffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offers")
	ret0, _ := ret[0].([]description.ApplicationOffer)
	return ret0
}

// Offers indicates an expected call of Offers.
func (mr *MockApplicationMockRecorder) Offers() *MockApplicationOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offers", reflect.TypeOf((*MockApplication)(nil).Offers))
	return &MockApplicationOffersCall{Call: call}
}

// MockApplicationOffersCall wrap *gomock.Call
type MockApplicationOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOffersCall) Return(arg0 []description.ApplicationOffer) *MockApplicationOffersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOffersCall) Do(f func() []description.ApplicationOffer) *MockApplicationOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOffersCall) DoAndReturn(f func() []description.ApplicationOffer) *MockApplicationOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenedPortRanges mocks base method.
func (m *MockApplication) OpenedPortRanges() description.PortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenedPortRanges")
	ret0, _ := ret[0].(description.PortRanges)
	return ret0
}

// OpenedPortRanges indicates an expected call of OpenedPortRanges.
func (mr *MockApplicationMockRecorder) OpenedPortRanges() *MockApplicationOpenedPortRangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenedPortRanges", reflect.TypeOf((*MockApplication)(nil).OpenedPortRanges))
	return &MockApplicationOpenedPortRangesCall{Call: call}
}

// MockApplicationOpenedPortRangesCall wrap *gomock.Call
type MockApplicationOpenedPortRangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOpenedPortRangesCall) Return(arg0 description.PortRanges) *MockApplicationOpenedPortRangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOpenedPortRangesCall) Do(f func() description.PortRanges) *MockApplicationOpenedPortRangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOpenedPortRangesCall) DoAndReturn(f func() description.PortRanges) *MockApplicationOpenedPortRangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OperatorStatus mocks base method.
func (m *MockApplication) OperatorStatus() description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorStatus")
	ret0, _ := ret[0].(description.Status)
	return ret0
}

// OperatorStatus indicates an expected call of OperatorStatus.
func (mr *MockApplicationMockRecorder) OperatorStatus() *MockApplicationOperatorStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorStatus", reflect.TypeOf((*MockApplication)(nil).OperatorStatus))
	return &MockApplicationOperatorStatusCall{Call: call}
}

// MockApplicationOperatorStatusCall wrap *gomock.Call
type MockApplicationOperatorStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOperatorStatusCall) Return(arg0 description.Status) *MockApplicationOperatorStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOperatorStatusCall) Do(f func() description.Status) *MockApplicationOperatorStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOperatorStatusCall) DoAndReturn(f func() description.Status) *MockApplicationOperatorStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PasswordHash mocks base method.
func (m *MockApplication) PasswordHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// PasswordHash indicates an expected call of PasswordHash.
func (mr *MockApplicationMockRecorder) PasswordHash() *MockApplicationPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHash", reflect.TypeOf((*MockApplication)(nil).PasswordHash))
	return &MockApplicationPasswordHashCall{Call: call}
}

// MockApplicationPasswordHashCall wrap *gomock.Call
type MockApplicationPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationPasswordHashCall) Return(arg0 string) *MockApplicationPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationPasswordHashCall) Do(f func() string) *MockApplicationPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationPasswordHashCall) DoAndReturn(f func() string) *MockApplicationPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Placement mocks base method.
func (m *MockApplication) Placement() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Placement")
	ret0, _ := ret[0].(string)
	return ret0
}

// Placement indicates an expected call of Placement.
func (mr *MockApplicationMockRecorder) Placement() *MockApplicationPlacementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placement", reflect.TypeOf((*MockApplication)(nil).Placement))
	return &MockApplicationPlacementCall{Call: call}
}

// MockApplicationPlacementCall wrap *gomock.Call
type MockApplicationPlacementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationPlacementCall) Return(arg0 string) *MockApplicationPlacementCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationPlacementCall) Do(f func() string) *MockApplicationPlacementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationPlacementCall) DoAndReturn(f func() string) *MockApplicationPlacementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PodSpec mocks base method.
func (m *MockApplication) PodSpec() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodSpec")
	ret0, _ := ret[0].(string)
	return ret0
}

// PodSpec indicates an expected call of PodSpec.
func (mr *MockApplicationMockRecorder) PodSpec() *MockApplicationPodSpecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodSpec", reflect.TypeOf((*MockApplication)(nil).PodSpec))
	return &MockApplicationPodSpecCall{Call: call}
}

// MockApplicationPodSpecCall wrap *gomock.Call
type MockApplicationPodSpecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationPodSpecCall) Return(arg0 string) *MockApplicationPodSpecCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationPodSpecCall) Do(f func() string) *MockApplicationPodSpecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationPodSpecCall) DoAndReturn(f func() string) *MockApplicationPodSpecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProvisioningState mocks base method.
func (m *MockApplication) ProvisioningState() description.ProvisioningState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisioningState")
	ret0, _ := ret[0].(description.ProvisioningState)
	return ret0
}

// ProvisioningState indicates an expected call of ProvisioningState.
func (mr *MockApplicationMockRecorder) ProvisioningState() *MockApplicationProvisioningStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisioningState", reflect.TypeOf((*MockApplication)(nil).ProvisioningState))
	return &MockApplicationProvisioningStateCall{Call: call}
}

// MockApplicationProvisioningStateCall wrap *gomock.Call
type MockApplicationProvisioningStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationProvisioningStateCall) Return(arg0 description.ProvisioningState) *MockApplicationProvisioningStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationProvisioningStateCall) Do(f func() description.ProvisioningState) *MockApplicationProvisioningStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationProvisioningStateCall) DoAndReturn(f func() description.ProvisioningState) *MockApplicationProvisioningStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resources mocks base method.
func (m *MockApplication) Resources() []description.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resources")
	ret0, _ := ret[0].([]description.Resource)
	return ret0
}

// Resources indicates an expected call of Resources.
func (mr *MockApplicationMockRecorder) Resources() *MockApplicationResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resources", reflect.TypeOf((*MockApplication)(nil).Resources))
	return &MockApplicationResourcesCall{Call: call}
}

// MockApplicationResourcesCall wrap *gomock.Call
type MockApplicationResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationResourcesCall) Return(arg0 []description.Resource) *MockApplicationResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationResourcesCall) Do(f func() []description.Resource) *MockApplicationResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationResourcesCall) DoAndReturn(f func() []description.Resource) *MockApplicationResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAnnotations mocks base method.
func (m *MockApplication) SetAnnotations(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAnnotations", arg0)
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockApplicationMockRecorder) SetAnnotations(arg0 any) *MockApplicationSetAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockApplication)(nil).SetAnnotations), arg0)
	return &MockApplicationSetAnnotationsCall{Call: call}
}

// MockApplicationSetAnnotationsCall wrap *gomock.Call
type MockApplicationSetAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetAnnotationsCall) Return() *MockApplicationSetAnnotationsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetAnnotationsCall) Do(f func(map[string]string)) *MockApplicationSetAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetAnnotationsCall) DoAndReturn(f func(map[string]string)) *MockApplicationSetAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmManifest mocks base method.
func (m *MockApplication) SetCharmManifest(arg0 description.CharmManifestArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCharmManifest", arg0)
}

// SetCharmManifest indicates an expected call of SetCharmManifest.
func (mr *MockApplicationMockRecorder) SetCharmManifest(arg0 any) *MockApplicationSetCharmManifestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmManifest", reflect.TypeOf((*MockApplication)(nil).SetCharmManifest), arg0)
	return &MockApplicationSetCharmManifestCall{Call: call}
}

// MockApplicationSetCharmManifestCall wrap *gomock.Call
type MockApplicationSetCharmManifestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetCharmManifestCall) Return() *MockApplicationSetCharmManifestCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetCharmManifestCall) Do(f func(description.CharmManifestArgs)) *MockApplicationSetCharmManifestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetCharmManifestCall) DoAndReturn(f func(description.CharmManifestArgs)) *MockApplicationSetCharmManifestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmMetadata mocks base method.
func (m *MockApplication) SetCharmMetadata(arg0 description.CharmMetadataArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCharmMetadata", arg0)
}

// SetCharmMetadata indicates an expected call of SetCharmMetadata.
func (mr *MockApplicationMockRecorder) SetCharmMetadata(arg0 any) *MockApplicationSetCharmMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmMetadata", reflect.TypeOf((*MockApplication)(nil).SetCharmMetadata), arg0)
	return &MockApplicationSetCharmMetadataCall{Call: call}
}

// MockApplicationSetCharmMetadataCall wrap *gomock.Call
type MockApplicationSetCharmMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetCharmMetadataCall) Return() *MockApplicationSetCharmMetadataCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetCharmMetadataCall) Do(f func(description.CharmMetadataArgs)) *MockApplicationSetCharmMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetCharmMetadataCall) DoAndReturn(f func(description.CharmMetadataArgs)) *MockApplicationSetCharmMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmOrigin mocks base method.
func (m *MockApplication) SetCharmOrigin(arg0 description.CharmOriginArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCharmOrigin", arg0)
}

// SetCharmOrigin indicates an expected call of SetCharmOrigin.
func (mr *MockApplicationMockRecorder) SetCharmOrigin(arg0 any) *MockApplicationSetCharmOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmOrigin", reflect.TypeOf((*MockApplication)(nil).SetCharmOrigin), arg0)
	return &MockApplicationSetCharmOriginCall{Call: call}
}

// MockApplicationSetCharmOriginCall wrap *gomock.Call
type MockApplicationSetCharmOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetCharmOriginCall) Return() *MockApplicationSetCharmOriginCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetCharmOriginCall) Do(f func(description.CharmOriginArgs)) *MockApplicationSetCharmOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetCharmOriginCall) DoAndReturn(f func(description.CharmOriginArgs)) *MockApplicationSetCharmOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCloudService mocks base method.
func (m *MockApplication) SetCloudService(arg0 description.CloudServiceArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCloudService", arg0)
}

// SetCloudService indicates an expected call of SetCloudService.
func (mr *MockApplicationMockRecorder) SetCloudService(arg0 any) *MockApplicationSetCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloudService", reflect.TypeOf((*MockApplication)(nil).SetCloudService), arg0)
	return &MockApplicationSetCloudServiceCall{Call: call}
}

// MockApplicationSetCloudServiceCall wrap *gomock.Call
type MockApplicationSetCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetCloudServiceCall) Return() *MockApplicationSetCloudServiceCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetCloudServiceCall) Do(f func(description.CloudServiceArgs)) *MockApplicationSetCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetCloudServiceCall) DoAndReturn(f func(description.CloudServiceArgs)) *MockApplicationSetCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConstraints mocks base method.
func (m *MockApplication) SetConstraints(arg0 description.ConstraintsArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConstraints", arg0)
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockApplicationMockRecorder) SetConstraints(arg0 any) *MockApplicationSetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockApplication)(nil).SetConstraints), arg0)
	return &MockApplicationSetConstraintsCall{Call: call}
}

// MockApplicationSetConstraintsCall wrap *gomock.Call
type MockApplicationSetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetConstraintsCall) Return() *MockApplicationSetConstraintsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetConstraintsCall) Do(f func(description.ConstraintsArgs)) *MockApplicationSetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetConstraintsCall) DoAndReturn(f func(description.ConstraintsArgs)) *MockApplicationSetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOperatorStatus mocks base method.
func (m *MockApplication) SetOperatorStatus(arg0 description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOperatorStatus", arg0)
}

// SetOperatorStatus indicates an expected call of SetOperatorStatus.
func (mr *MockApplicationMockRecorder) SetOperatorStatus(arg0 any) *MockApplicationSetOperatorStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOperatorStatus", reflect.TypeOf((*MockApplication)(nil).SetOperatorStatus), arg0)
	return &MockApplicationSetOperatorStatusCall{Call: call}
}

// MockApplicationSetOperatorStatusCall wrap *gomock.Call
type MockApplicationSetOperatorStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetOperatorStatusCall) Return() *MockApplicationSetOperatorStatusCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetOperatorStatusCall) Do(f func(description.StatusArgs)) *MockApplicationSetOperatorStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetOperatorStatusCall) DoAndReturn(f func(description.StatusArgs)) *MockApplicationSetOperatorStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockApplication) SetStatus(arg0 description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockApplicationMockRecorder) SetStatus(arg0 any) *MockApplicationSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockApplication)(nil).SetStatus), arg0)
	return &MockApplicationSetStatusCall{Call: call}
}

// MockApplicationSetStatusCall wrap *gomock.Call
type MockApplicationSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetStatusCall) Return() *MockApplicationSetStatusCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetStatusCall) Do(f func(description.StatusArgs)) *MockApplicationSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetStatusCall) DoAndReturn(f func(description.StatusArgs)) *MockApplicationSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusHistory mocks base method.
func (m *MockApplication) SetStatusHistory(arg0 []description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusHistory", arg0)
}

// SetStatusHistory indicates an expected call of SetStatusHistory.
func (mr *MockApplicationMockRecorder) SetStatusHistory(arg0 any) *MockApplicationSetStatusHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusHistory", reflect.TypeOf((*MockApplication)(nil).SetStatusHistory), arg0)
	return &MockApplicationSetStatusHistoryCall{Call: call}
}

// MockApplicationSetStatusHistoryCall wrap *gomock.Call
type MockApplicationSetStatusHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetStatusHistoryCall) Return() *MockApplicationSetStatusHistoryCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetStatusHistoryCall) Do(f func([]description.StatusArgs)) *MockApplicationSetStatusHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetStatusHistoryCall) DoAndReturn(f func([]description.StatusArgs)) *MockApplicationSetStatusHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTools mocks base method.
func (m *MockApplication) SetTools(arg0 description.AgentToolsArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTools", arg0)
}

// SetTools indicates an expected call of SetTools.
func (mr *MockApplicationMockRecorder) SetTools(arg0 any) *MockApplicationSetToolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTools", reflect.TypeOf((*MockApplication)(nil).SetTools), arg0)
	return &MockApplicationSetToolsCall{Call: call}
}

// MockApplicationSetToolsCall wrap *gomock.Call
type MockApplicationSetToolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetToolsCall) Return() *MockApplicationSetToolsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetToolsCall) Do(f func(description.AgentToolsArgs)) *MockApplicationSetToolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetToolsCall) DoAndReturn(f func(description.AgentToolsArgs)) *MockApplicationSetToolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockApplication) Status() description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(description.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockApplicationMockRecorder) Status() *MockApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockApplication)(nil).Status))
	return &MockApplicationStatusCall{Call: call}
}

// MockApplicationStatusCall wrap *gomock.Call
type MockApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationStatusCall) Return(arg0 description.Status) *MockApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationStatusCall) Do(f func() description.Status) *MockApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationStatusCall) DoAndReturn(f func() description.Status) *MockApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StatusHistory mocks base method.
func (m *MockApplication) StatusHistory() []description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusHistory")
	ret0, _ := ret[0].([]description.Status)
	return ret0
}

// StatusHistory indicates an expected call of StatusHistory.
func (mr *MockApplicationMockRecorder) StatusHistory() *MockApplicationStatusHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusHistory", reflect.TypeOf((*MockApplication)(nil).StatusHistory))
	return &MockApplicationStatusHistoryCall{Call: call}
}

// MockApplicationStatusHistoryCall wrap *gomock.Call
type MockApplicationStatusHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationStatusHistoryCall) Return(arg0 []description.Status) *MockApplicationStatusHistoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationStatusHistoryCall) Do(f func() []description.Status) *MockApplicationStatusHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationStatusHistoryCall) DoAndReturn(f func() []description.Status) *MockApplicationStatusHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageDirectives mocks base method.
func (m *MockApplication) StorageDirectives() map[string]description.StorageDirective {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageDirectives")
	ret0, _ := ret[0].(map[string]description.StorageDirective)
	return ret0
}

// StorageDirectives indicates an expected call of StorageDirectives.
func (mr *MockApplicationMockRecorder) StorageDirectives() *MockApplicationStorageDirectivesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageDirectives", reflect.TypeOf((*MockApplication)(nil).StorageDirectives))
	return &MockApplicationStorageDirectivesCall{Call: call}
}

// MockApplicationStorageDirectivesCall wrap *gomock.Call
type MockApplicationStorageDirectivesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationStorageDirectivesCall) Return(arg0 map[string]description.StorageDirective) *MockApplicationStorageDirectivesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationStorageDirectivesCall) Do(f func() map[string]description.StorageDirective) *MockApplicationStorageDirectivesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationStorageDirectivesCall) DoAndReturn(f func() map[string]description.StorageDirective) *MockApplicationStorageDirectivesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subordinate mocks base method.
func (m *MockApplication) Subordinate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subordinate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Subordinate indicates an expected call of Subordinate.
func (mr *MockApplicationMockRecorder) Subordinate() *MockApplicationSubordinateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subordinate", reflect.TypeOf((*MockApplication)(nil).Subordinate))
	return &MockApplicationSubordinateCall{Call: call}
}

// MockApplicationSubordinateCall wrap *gomock.Call
type MockApplicationSubordinateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSubordinateCall) Return(arg0 bool) *MockApplicationSubordinateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSubordinateCall) Do(f func() bool) *MockApplicationSubordinateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSubordinateCall) DoAndReturn(f func() bool) *MockApplicationSubordinateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockApplication) Tag() names.ApplicationTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.ApplicationTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockApplicationMockRecorder) Tag() *MockApplicationTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockApplication)(nil).Tag))
	return &MockApplicationTagCall{Call: call}
}

// MockApplicationTagCall wrap *gomock.Call
type MockApplicationTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationTagCall) Return(arg0 names.ApplicationTag) *MockApplicationTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationTagCall) Do(f func() names.ApplicationTag) *MockApplicationTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationTagCall) DoAndReturn(f func() names.ApplicationTag) *MockApplicationTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tools mocks base method.
func (m *MockApplication) Tools() description.AgentTools {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tools")
	ret0, _ := ret[0].(description.AgentTools)
	return ret0
}

// Tools indicates an expected call of Tools.
func (mr *MockApplicationMockRecorder) Tools() *MockApplicationToolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tools", reflect.TypeOf((*MockApplication)(nil).Tools))
	return &MockApplicationToolsCall{Call: call}
}

// MockApplicationToolsCall wrap *gomock.Call
type MockApplicationToolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationToolsCall) Return(arg0 description.AgentTools) *MockApplicationToolsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationToolsCall) Do(f func() description.AgentTools) *MockApplicationToolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationToolsCall) DoAndReturn(f func() description.AgentTools) *MockApplicationToolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockApplication) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockApplicationMockRecorder) Type() *MockApplicationTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockApplication)(nil).Type))
	return &MockApplicationTypeCall{Call: call}
}

// MockApplicationTypeCall wrap *gomock.Call
type MockApplicationTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationTypeCall) Return(arg0 string) *MockApplicationTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationTypeCall) Do(f func() string) *MockApplicationTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationTypeCall) DoAndReturn(f func() string) *MockApplicationTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Units mocks base method.
func (m *MockApplication) Units() []description.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Units")
	ret0, _ := ret[0].([]description.Unit)
	return ret0
}

// Units indicates an expected call of Units.
func (mr *MockApplicationMockRecorder) Units() *MockApplicationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Units", reflect.TypeOf((*MockApplication)(nil).Units))
	return &MockApplicationUnitsCall{Call: call}
}

// MockApplicationUnitsCall wrap *gomock.Call
type MockApplicationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationUnitsCall) Return(arg0 []description.Unit) *MockApplicationUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationUnitsCall) Do(f func() []description.Unit) *MockApplicationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationUnitsCall) DoAndReturn(f func() []description.Unit) *MockApplicationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockApplication) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockApplicationMockRecorder) Validate() *MockApplicationValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockApplication)(nil).Validate))
	return &MockApplicationValidateCall{Call: call}
}

// MockApplicationValidateCall wrap *gomock.Call
type MockApplicationValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationValidateCall) Return(arg0 error) *MockApplicationValidateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationValidateCall) Do(f func() error) *MockApplicationValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationValidateCall) DoAndReturn(f func() error) *MockApplicationValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// AddBlockDevice mocks base method.
func (m *MockMachine) AddBlockDevice(arg0 description.BlockDeviceArgs) description.BlockDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockDevice", arg0)
	ret0, _ := ret[0].(description.BlockDevice)
	return ret0
}

// AddBlockDevice indicates an expected call of AddBlockDevice.
func (mr *MockMachineMockRecorder) AddBlockDevice(arg0 any) *MockMachineAddBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockDevice", reflect.TypeOf((*MockMachine)(nil).AddBlockDevice), arg0)
	return &MockMachineAddBlockDeviceCall{Call: call}
}

// MockMachineAddBlockDeviceCall wrap *gomock.Call
type MockMachineAddBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineAddBlockDeviceCall) Return(arg0 description.BlockDevice) *MockMachineAddBlockDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineAddBlockDeviceCall) Do(f func(description.BlockDeviceArgs) description.BlockDevice) *MockMachineAddBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineAddBlockDeviceCall) DoAndReturn(f func(description.BlockDeviceArgs) description.BlockDevice) *MockMachineAddBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddContainer mocks base method.
func (m *MockMachine) AddContainer(arg0 description.MachineArgs) description.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContainer", arg0)
	ret0, _ := ret[0].(description.Machine)
	return ret0
}

// AddContainer indicates an expected call of AddContainer.
func (mr *MockMachineMockRecorder) AddContainer(arg0 any) *MockMachineAddContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainer", reflect.TypeOf((*MockMachine)(nil).AddContainer), arg0)
	return &MockMachineAddContainerCall{Call: call}
}

// MockMachineAddContainerCall wrap *gomock.Call
type MockMachineAddContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineAddContainerCall) Return(arg0 description.Machine) *MockMachineAddContainerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineAddContainerCall) Do(f func(description.MachineArgs) description.Machine) *MockMachineAddContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineAddContainerCall) DoAndReturn(f func(description.MachineArgs) description.Machine) *MockMachineAddContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddOpenedPortRange mocks base method.
func (m *MockMachine) AddOpenedPortRange(arg0 description.OpenedPortRangeArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOpenedPortRange", arg0)
}

// AddOpenedPortRange indicates an expected call of AddOpenedPortRange.
func (mr *MockMachineMockRecorder) AddOpenedPortRange(arg0 any) *MockMachineAddOpenedPortRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenedPortRange", reflect.TypeOf((*MockMachine)(nil).AddOpenedPortRange), arg0)
	return &MockMachineAddOpenedPortRangeCall{Call: call}
}

// MockMachineAddOpenedPortRangeCall wrap *gomock.Call
type MockMachineAddOpenedPortRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineAddOpenedPortRangeCall) Return() *MockMachineAddOpenedPortRangeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineAddOpenedPortRangeCall) Do(f func(description.OpenedPortRangeArgs)) *MockMachineAddOpenedPortRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineAddOpenedPortRangeCall) DoAndReturn(f func(description.OpenedPortRangeArgs)) *MockMachineAddOpenedPortRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Annotations mocks base method.
func (m *MockMachine) Annotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Annotations indicates an expected call of Annotations.
func (mr *MockMachineMockRecorder) Annotations() *MockMachineAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotations", reflect.TypeOf((*MockMachine)(nil).Annotations))
	return &MockMachineAnnotationsCall{Call: call}
}

// MockMachineAnnotationsCall wrap *gomock.Call
type MockMachineAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineAnnotationsCall) Return(arg0 map[string]string) *MockMachineAnnotationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineAnnotationsCall) Do(f func() map[string]string) *MockMachineAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineAnnotationsCall) DoAndReturn(f func() map[string]string) *MockMachineAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Base mocks base method.
func (m *MockMachine) Base() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base")
	ret0, _ := ret[0].(string)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockMachineMockRecorder) Base() *MockMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockMachine)(nil).Base))
	return &MockMachineBaseCall{Call: call}
}

// MockMachineBaseCall wrap *gomock.Call
type MockMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineBaseCall) Return(arg0 string) *MockMachineBaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineBaseCall) Do(f func() string) *MockMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineBaseCall) DoAndReturn(f func() string) *MockMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockDevices mocks base method.
func (m *MockMachine) BlockDevices() []description.BlockDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevices")
	ret0, _ := ret[0].([]description.BlockDevice)
	return ret0
}

// BlockDevices indicates an expected call of BlockDevices.
func (mr *MockMachineMockRecorder) BlockDevices() *MockMachineBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevices", reflect.TypeOf((*MockMachine)(nil).BlockDevices))
	return &MockMachineBlockDevicesCall{Call: call}
}

// MockMachineBlockDevicesCall wrap *gomock.Call
type MockMachineBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineBlockDevicesCall) Return(arg0 []description.BlockDevice) *MockMachineBlockDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineBlockDevicesCall) Do(f func() []description.BlockDevice) *MockMachineBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineBlockDevicesCall) DoAndReturn(f func() []description.BlockDevice) *MockMachineBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Constraints mocks base method.
func (m *MockMachine) Constraints() description.Constraints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Constraints")
	ret0, _ := ret[0].(description.Constraints)
	return ret0
}

// Constraints indicates an expected call of Constraints.
func (mr *MockMachineMockRecorder) Constraints() *MockMachineConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Constraints", reflect.TypeOf((*MockMachine)(nil).Constraints))
	return &MockMachineConstraintsCall{Call: call}
}

// MockMachineConstraintsCall wrap *gomock.Call
type MockMachineConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineConstraintsCall) Return(arg0 description.Constraints) *MockMachineConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineConstraintsCall) Do(f func() description.Constraints) *MockMachineConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineConstraintsCall) DoAndReturn(f func() description.Constraints) *MockMachineConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerType mocks base method.
func (m *MockMachine) ContainerType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockMachineMockRecorder) ContainerType() *MockMachineContainerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockMachine)(nil).ContainerType))
	return &MockMachineContainerTypeCall{Call: call}
}

// MockMachineContainerTypeCall wrap *gomock.Call
type MockMachineContainerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineContainerTypeCall) Return(arg0 string) *MockMachineContainerTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineContainerTypeCall) Do(f func() string) *MockMachineContainerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineContainerTypeCall) DoAndReturn(f func() string) *MockMachineContainerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Containers mocks base method.
func (m *MockMachine) Containers() []description.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers")
	ret0, _ := ret[0].([]description.Machine)
	return ret0
}

// Containers indicates an expected call of Containers.
func (mr *MockMachineMockRecorder) Containers() *MockMachineContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockMachine)(nil).Containers))
	return &MockMachineContainersCall{Call: call}
}

// MockMachineContainersCall wrap *gomock.Call
type MockMachineContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineContainersCall) Return(arg0 []description.Machine) *MockMachineContainersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineContainersCall) Do(f func() []description.Machine) *MockMachineContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineContainersCall) DoAndReturn(f func() []description.Machine) *MockMachineContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockMachine) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockMachineMockRecorder) Id() *MockMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMachine)(nil).Id))
	return &MockMachineIdCall{Call: call}
}

// MockMachineIdCall wrap *gomock.Call
type MockMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineIdCall) Return(arg0 string) *MockMachineIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineIdCall) Do(f func() string) *MockMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineIdCall) DoAndReturn(f func() string) *MockMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Instance mocks base method.
func (m *MockMachine) Instance() description.CloudInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(description.CloudInstance)
	return ret0
}

// Instance indicates an expected call of Instance.
func (mr *MockMachineMockRecorder) Instance() *MockMachineInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockMachine)(nil).Instance))
	return &MockMachineInstanceCall{Call: call}
}

// MockMachineInstanceCall wrap *gomock.Call
type MockMachineInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineInstanceCall) Return(arg0 description.CloudInstance) *MockMachineInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineInstanceCall) Do(f func() description.CloudInstance) *MockMachineInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineInstanceCall) DoAndReturn(f func() description.CloudInstance) *MockMachineInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Jobs mocks base method.
func (m *MockMachine) Jobs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Jobs indicates an expected call of Jobs.
func (mr *MockMachineMockRecorder) Jobs() *MockMachineJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockMachine)(nil).Jobs))
	return &MockMachineJobsCall{Call: call}
}

// MockMachineJobsCall wrap *gomock.Call
type MockMachineJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineJobsCall) Return(arg0 []string) *MockMachineJobsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineJobsCall) Do(f func() []string) *MockMachineJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineJobsCall) DoAndReturn(f func() []string) *MockMachineJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineAddresses mocks base method.
func (m *MockMachine) MachineAddresses() []description.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineAddresses")
	ret0, _ := ret[0].([]description.Address)
	return ret0
}

// MachineAddresses indicates an expected call of MachineAddresses.
func (mr *MockMachineMockRecorder) MachineAddresses() *MockMachineMachineAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineAddresses", reflect.TypeOf((*MockMachine)(nil).MachineAddresses))
	return &MockMachineMachineAddressesCall{Call: call}
}

// MockMachineMachineAddressesCall wrap *gomock.Call
type MockMachineMachineAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineMachineAddressesCall) Return(arg0 []description.Address) *MockMachineMachineAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineMachineAddressesCall) Do(f func() []description.Address) *MockMachineMachineAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineMachineAddressesCall) DoAndReturn(f func() []description.Address) *MockMachineMachineAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Nonce mocks base method.
func (m *MockMachine) Nonce() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(string)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockMachineMockRecorder) Nonce() *MockMachineNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockMachine)(nil).Nonce))
	return &MockMachineNonceCall{Call: call}
}

// MockMachineNonceCall wrap *gomock.Call
type MockMachineNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineNonceCall) Return(arg0 string) *MockMachineNonceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineNonceCall) Do(f func() string) *MockMachineNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineNonceCall) DoAndReturn(f func() string) *MockMachineNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenedPortRanges mocks base method.
func (m *MockMachine) OpenedPortRanges() description.PortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenedPortRanges")
	ret0, _ := ret[0].(description.PortRanges)
	return ret0
}

// OpenedPortRanges indicates an expected call of OpenedPortRanges.
func (mr *MockMachineMockRecorder) OpenedPortRanges() *MockMachineOpenedPortRangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenedPortRanges", reflect.TypeOf((*MockMachine)(nil).OpenedPortRanges))
	return &MockMachineOpenedPortRangesCall{Call: call}
}

// MockMachineOpenedPortRangesCall wrap *gomock.Call
type MockMachineOpenedPortRangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineOpenedPortRangesCall) Return(arg0 description.PortRanges) *MockMachineOpenedPortRangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineOpenedPortRangesCall) Do(f func() description.PortRanges) *MockMachineOpenedPortRangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineOpenedPortRangesCall) DoAndReturn(f func() description.PortRanges) *MockMachineOpenedPortRangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PasswordHash mocks base method.
func (m *MockMachine) PasswordHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// PasswordHash indicates an expected call of PasswordHash.
func (mr *MockMachineMockRecorder) PasswordHash() *MockMachinePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHash", reflect.TypeOf((*MockMachine)(nil).PasswordHash))
	return &MockMachinePasswordHashCall{Call: call}
}

// MockMachinePasswordHashCall wrap *gomock.Call
type MockMachinePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinePasswordHashCall) Return(arg0 string) *MockMachinePasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinePasswordHashCall) Do(f func() string) *MockMachinePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinePasswordHashCall) DoAndReturn(f func() string) *MockMachinePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Placement mocks base method.
func (m *MockMachine) Placement() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Placement")
	ret0, _ := ret[0].(string)
	return ret0
}

// Placement indicates an expected call of Placement.
func (mr *MockMachineMockRecorder) Placement() *MockMachinePlacementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placement", reflect.TypeOf((*MockMachine)(nil).Placement))
	return &MockMachinePlacementCall{Call: call}
}

// MockMachinePlacementCall wrap *gomock.Call
type MockMachinePlacementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinePlacementCall) Return(arg0 string) *MockMachinePlacementCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinePlacementCall) Do(f func() string) *MockMachinePlacementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinePlacementCall) DoAndReturn(f func() string) *MockMachinePlacementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreferredPrivateAddress mocks base method.
func (m *MockMachine) PreferredPrivateAddress() description.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreferredPrivateAddress")
	ret0, _ := ret[0].(description.Address)
	return ret0
}

// PreferredPrivateAddress indicates an expected call of PreferredPrivateAddress.
func (mr *MockMachineMockRecorder) PreferredPrivateAddress() *MockMachinePreferredPrivateAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreferredPrivateAddress", reflect.TypeOf((*MockMachine)(nil).PreferredPrivateAddress))
	return &MockMachinePreferredPrivateAddressCall{Call: call}
}

// MockMachinePreferredPrivateAddressCall wrap *gomock.Call
type MockMachinePreferredPrivateAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinePreferredPrivateAddressCall) Return(arg0 description.Address) *MockMachinePreferredPrivateAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinePreferredPrivateAddressCall) Do(f func() description.Address) *MockMachinePreferredPrivateAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinePreferredPrivateAddressCall) DoAndReturn(f func() description.Address) *MockMachinePreferredPrivateAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreferredPublicAddress mocks base method.
func (m *MockMachine) PreferredPublicAddress() description.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreferredPublicAddress")
	ret0, _ := ret[0].(description.Address)
	return ret0
}

// PreferredPublicAddress indicates an expected call of PreferredPublicAddress.
func (mr *MockMachineMockRecorder) PreferredPublicAddress() *MockMachinePreferredPublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreferredPublicAddress", reflect.TypeOf((*MockMachine)(nil).PreferredPublicAddress))
	return &MockMachinePreferredPublicAddressCall{Call: call}
}

// MockMachinePreferredPublicAddressCall wrap *gomock.Call
type MockMachinePreferredPublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinePreferredPublicAddressCall) Return(arg0 description.Address) *MockMachinePreferredPublicAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinePreferredPublicAddressCall) Do(f func() description.Address) *MockMachinePreferredPublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinePreferredPublicAddressCall) DoAndReturn(f func() description.Address) *MockMachinePreferredPublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderAddresses mocks base method.
func (m *MockMachine) ProviderAddresses() []description.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderAddresses")
	ret0, _ := ret[0].([]description.Address)
	return ret0
}

// ProviderAddresses indicates an expected call of ProviderAddresses.
func (mr *MockMachineMockRecorder) ProviderAddresses() *MockMachineProviderAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderAddresses", reflect.TypeOf((*MockMachine)(nil).ProviderAddresses))
	return &MockMachineProviderAddressesCall{Call: call}
}

// MockMachineProviderAddressesCall wrap *gomock.Call
type MockMachineProviderAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineProviderAddressesCall) Return(arg0 []description.Address) *MockMachineProviderAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineProviderAddressesCall) Do(f func() []description.Address) *MockMachineProviderAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineProviderAddressesCall) DoAndReturn(f func() []description.Address) *MockMachineProviderAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAddresses mocks base method.
func (m *MockMachine) SetAddresses(arg0, arg1 []description.AddressArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAddresses", arg0, arg1)
}

// SetAddresses indicates an expected call of SetAddresses.
func (mr *MockMachineMockRecorder) SetAddresses(arg0, arg1 any) *MockMachineSetAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddresses", reflect.TypeOf((*MockMachine)(nil).SetAddresses), arg0, arg1)
	return &MockMachineSetAddressesCall{Call: call}
}

// MockMachineSetAddressesCall wrap *gomock.Call
type MockMachineSetAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetAddressesCall) Return() *MockMachineSetAddressesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetAddressesCall) Do(f func([]description.AddressArgs, []description.AddressArgs)) *MockMachineSetAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetAddressesCall) DoAndReturn(f func([]description.AddressArgs, []description.AddressArgs)) *MockMachineSetAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAnnotations mocks base method.
func (m *MockMachine) SetAnnotations(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAnnotations", arg0)
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockMachineMockRecorder) SetAnnotations(arg0 any) *MockMachineSetAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockMachine)(nil).SetAnnotations), arg0)
	return &MockMachineSetAnnotationsCall{Call: call}
}

// MockMachineSetAnnotationsCall wrap *gomock.Call
type MockMachineSetAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetAnnotationsCall) Return() *MockMachineSetAnnotationsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetAnnotationsCall) Do(f func(map[string]string)) *MockMachineSetAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetAnnotationsCall) DoAndReturn(f func(map[string]string)) *MockMachineSetAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConstraints mocks base method.
func (m *MockMachine) SetConstraints(arg0 description.ConstraintsArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConstraints", arg0)
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockMachineMockRecorder) SetConstraints(arg0 any) *MockMachineSetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockMachine)(nil).SetConstraints), arg0)
	return &MockMachineSetConstraintsCall{Call: call}
}

// MockMachineSetConstraintsCall wrap *gomock.Call
type MockMachineSetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetConstraintsCall) Return() *MockMachineSetConstraintsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetConstraintsCall) Do(f func(description.ConstraintsArgs)) *MockMachineSetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetConstraintsCall) DoAndReturn(f func(description.ConstraintsArgs)) *MockMachineSetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetInstance mocks base method.
func (m *MockMachine) SetInstance(arg0 description.CloudInstanceArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInstance", arg0)
}

// SetInstance indicates an expected call of SetInstance.
func (mr *MockMachineMockRecorder) SetInstance(arg0 any) *MockMachineSetInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstance", reflect.TypeOf((*MockMachine)(nil).SetInstance), arg0)
	return &MockMachineSetInstanceCall{Call: call}
}

// MockMachineSetInstanceCall wrap *gomock.Call
type MockMachineSetInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetInstanceCall) Return() *MockMachineSetInstanceCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetInstanceCall) Do(f func(description.CloudInstanceArgs)) *MockMachineSetInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetInstanceCall) DoAndReturn(f func(description.CloudInstanceArgs)) *MockMachineSetInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPreferredAddresses mocks base method.
func (m *MockMachine) SetPreferredAddresses(arg0, arg1 description.AddressArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreferredAddresses", arg0, arg1)
}

// SetPreferredAddresses indicates an expected call of SetPreferredAddresses.
func (mr *MockMachineMockRecorder) SetPreferredAddresses(arg0, arg1 any) *MockMachineSetPreferredAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreferredAddresses", reflect.TypeOf((*MockMachine)(nil).SetPreferredAddresses), arg0, arg1)
	return &MockMachineSetPreferredAddressesCall{Call: call}
}

// MockMachineSetPreferredAddressesCall wrap *gomock.Call
type MockMachineSetPreferredAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetPreferredAddressesCall) Return() *MockMachineSetPreferredAddressesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetPreferredAddressesCall) Do(f func(description.AddressArgs, description.AddressArgs)) *MockMachineSetPreferredAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetPreferredAddressesCall) DoAndReturn(f func(description.AddressArgs, description.AddressArgs)) *MockMachineSetPreferredAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockMachine) SetStatus(arg0 description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockMachineMockRecorder) SetStatus(arg0 any) *MockMachineSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockMachine)(nil).SetStatus), arg0)
	return &MockMachineSetStatusCall{Call: call}
}

// MockMachineSetStatusCall wrap *gomock.Call
type MockMachineSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetStatusCall) Return() *MockMachineSetStatusCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetStatusCall) Do(f func(description.StatusArgs)) *MockMachineSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetStatusCall) DoAndReturn(f func(description.StatusArgs)) *MockMachineSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusHistory mocks base method.
func (m *MockMachine) SetStatusHistory(arg0 []description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusHistory", arg0)
}

// SetStatusHistory indicates an expected call of SetStatusHistory.
func (mr *MockMachineMockRecorder) SetStatusHistory(arg0 any) *MockMachineSetStatusHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusHistory", reflect.TypeOf((*MockMachine)(nil).SetStatusHistory), arg0)
	return &MockMachineSetStatusHistoryCall{Call: call}
}

// MockMachineSetStatusHistoryCall wrap *gomock.Call
type MockMachineSetStatusHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetStatusHistoryCall) Return() *MockMachineSetStatusHistoryCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetStatusHistoryCall) Do(f func([]description.StatusArgs)) *MockMachineSetStatusHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetStatusHistoryCall) DoAndReturn(f func([]description.StatusArgs)) *MockMachineSetStatusHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTools mocks base method.
func (m *MockMachine) SetTools(arg0 description.AgentToolsArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTools", arg0)
}

// SetTools indicates an expected call of SetTools.
func (mr *MockMachineMockRecorder) SetTools(arg0 any) *MockMachineSetToolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTools", reflect.TypeOf((*MockMachine)(nil).SetTools), arg0)
	return &MockMachineSetToolsCall{Call: call}
}

// MockMachineSetToolsCall wrap *gomock.Call
type MockMachineSetToolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetToolsCall) Return() *MockMachineSetToolsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetToolsCall) Do(f func(description.AgentToolsArgs)) *MockMachineSetToolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetToolsCall) DoAndReturn(f func(description.AgentToolsArgs)) *MockMachineSetToolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockMachine) Status() description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(description.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockMachineMockRecorder) Status() *MockMachineStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMachine)(nil).Status))
	return &MockMachineStatusCall{Call: call}
}

// MockMachineStatusCall wrap *gomock.Call
type MockMachineStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineStatusCall) Return(arg0 description.Status) *MockMachineStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineStatusCall) Do(f func() description.Status) *MockMachineStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineStatusCall) DoAndReturn(f func() description.Status) *MockMachineStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StatusHistory mocks base method.
func (m *MockMachine) StatusHistory() []description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusHistory")
	ret0, _ := ret[0].([]description.Status)
	return ret0
}

// StatusHistory indicates an expected call of StatusHistory.
func (mr *MockMachineMockRecorder) StatusHistory() *MockMachineStatusHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusHistory", reflect.TypeOf((*MockMachine)(nil).StatusHistory))
	return &MockMachineStatusHistoryCall{Call: call}
}

// MockMachineStatusHistoryCall wrap *gomock.Call
type MockMachineStatusHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineStatusHistoryCall) Return(arg0 []description.Status) *MockMachineStatusHistoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineStatusHistoryCall) Do(f func() []description.Status) *MockMachineStatusHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineStatusHistoryCall) DoAndReturn(f func() []description.Status) *MockMachineStatusHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportedContainers mocks base method.
func (m *MockMachine) SupportedContainers() ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedContainers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SupportedContainers indicates an expected call of SupportedContainers.
func (mr *MockMachineMockRecorder) SupportedContainers() *MockMachineSupportedContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedContainers", reflect.TypeOf((*MockMachine)(nil).SupportedContainers))
	return &MockMachineSupportedContainersCall{Call: call}
}

// MockMachineSupportedContainersCall wrap *gomock.Call
type MockMachineSupportedContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSupportedContainersCall) Return(arg0 []string, arg1 bool) *MockMachineSupportedContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSupportedContainersCall) Do(f func() ([]string, bool)) *MockMachineSupportedContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSupportedContainersCall) DoAndReturn(f func() ([]string, bool)) *MockMachineSupportedContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockMachine) Tag() names.MachineTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.MachineTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockMachineMockRecorder) Tag() *MockMachineTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockMachine)(nil).Tag))
	return &MockMachineTagCall{Call: call}
}

// MockMachineTagCall wrap *gomock.Call
type MockMachineTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineTagCall) Return(arg0 names.MachineTag) *MockMachineTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineTagCall) Do(f func() names.MachineTag) *MockMachineTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineTagCall) DoAndReturn(f func() names.MachineTag) *MockMachineTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tools mocks base method.
func (m *MockMachine) Tools() description.AgentTools {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tools")
	ret0, _ := ret[0].(description.AgentTools)
	return ret0
}

// Tools indicates an expected call of Tools.
func (mr *MockMachineMockRecorder) Tools() *MockMachineToolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tools", reflect.TypeOf((*MockMachine)(nil).Tools))
	return &MockMachineToolsCall{Call: call}
}

// MockMachineToolsCall wrap *gomock.Call
type MockMachineToolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineToolsCall) Return(arg0 description.AgentTools) *MockMachineToolsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineToolsCall) Do(f func() description.AgentTools) *MockMachineToolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineToolsCall) DoAndReturn(f func() description.AgentTools) *MockMachineToolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockMachine) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockMachineMockRecorder) Validate() *MockMachineValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMachine)(nil).Validate))
	return &MockMachineValidateCall{Call: call}
}

// MockMachineValidateCall wrap *gomock.Call
type MockMachineValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineValidateCall) Return(arg0 error) *MockMachineValidateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineValidateCall) Do(f func() error) *MockMachineValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineValidateCall) DoAndReturn(f func() error) *MockMachineValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPortRanges is a mock of PortRanges interface.
type MockPortRanges struct {
	ctrl     *gomock.Controller
	recorder *MockPortRangesMockRecorder
}

// MockPortRangesMockRecorder is the mock recorder for MockPortRanges.
type MockPortRangesMockRecorder struct {
	mock *MockPortRanges
}

// NewMockPortRanges creates a new mock instance.
func NewMockPortRanges(ctrl *gomock.Controller) *MockPortRanges {
	mock := &MockPortRanges{ctrl: ctrl}
	mock.recorder = &MockPortRangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortRanges) EXPECT() *MockPortRangesMockRecorder {
	return m.recorder
}

// ByUnit mocks base method.
func (m *MockPortRanges) ByUnit() map[string]description.UnitPortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUnit")
	ret0, _ := ret[0].(map[string]description.UnitPortRanges)
	return ret0
}

// ByUnit indicates an expected call of ByUnit.
func (mr *MockPortRangesMockRecorder) ByUnit() *MockPortRangesByUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUnit", reflect.TypeOf((*MockPortRanges)(nil).ByUnit))
	return &MockPortRangesByUnitCall{Call: call}
}

// MockPortRangesByUnitCall wrap *gomock.Call
type MockPortRangesByUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortRangesByUnitCall) Return(arg0 map[string]description.UnitPortRanges) *MockPortRangesByUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortRangesByUnitCall) Do(f func() map[string]description.UnitPortRanges) *MockPortRangesByUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortRangesByUnitCall) DoAndReturn(f func() map[string]description.UnitPortRanges) *MockPortRangesByUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnitPortRanges is a mock of UnitPortRanges interface.
type MockUnitPortRanges struct {
	ctrl     *gomock.Controller
	recorder *MockUnitPortRangesMockRecorder
}

// MockUnitPortRangesMockRecorder is the mock recorder for MockUnitPortRanges.
type MockUnitPortRangesMockRecorder struct {
	mock *MockUnitPortRanges
}

// NewMockUnitPortRanges creates a new mock instance.
func NewMockUnitPortRanges(ctrl *gomock.Controller) *MockUnitPortRanges {
	mock := &MockUnitPortRanges{ctrl: ctrl}
	mock.recorder = &MockUnitPortRangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitPortRanges) EXPECT() *MockUnitPortRangesMockRecorder {
	return m.recorder
}

// ByEndpoint mocks base method.
func (m *MockUnitPortRanges) ByEndpoint() map[string][]description.UnitPortRange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByEndpoint")
	ret0, _ := ret[0].(map[string][]description.UnitPortRange)
	return ret0
}

// ByEndpoint indicates an expected call of ByEndpoint.
func (mr *MockUnitPortRangesMockRecorder) ByEndpoint() *MockUnitPortRangesByEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByEndpoint", reflect.TypeOf((*MockUnitPortRanges)(nil).ByEndpoint))
	return &MockUnitPortRangesByEndpointCall{Call: call}
}

// MockUnitPortRangesByEndpointCall wrap *gomock.Call
type MockUnitPortRangesByEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitPortRangesByEndpointCall) Return(arg0 map[string][]description.UnitPortRange) *MockUnitPortRangesByEndpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitPortRangesByEndpointCall) Do(f func() map[string][]description.UnitPortRange) *MockUnitPortRangesByEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitPortRangesByEndpointCall) DoAndReturn(f func() map[string][]description.UnitPortRange) *MockUnitPortRangesByEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
