// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: ApplicationPortRanges)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/application_ports_mock.go github.com/juju/juju/state ApplicationPortRanges
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationPortRanges is a mock of ApplicationPortRanges interface.
type MockApplicationPortRanges struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationPortRangesMockRecorder
}

// MockApplicationPortRangesMockRecorder is the mock recorder for MockApplicationPortRanges.
type MockApplicationPortRangesMockRecorder struct {
	mock *MockApplicationPortRanges
}

// NewMockApplicationPortRanges creates a new mock instance.
func NewMockApplicationPortRanges(ctrl *gomock.Controller) *MockApplicationPortRanges {
	mock := &MockApplicationPortRanges{ctrl: ctrl}
	mock.recorder = &MockApplicationPortRangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationPortRanges) EXPECT() *MockApplicationPortRangesMockRecorder {
	return m.recorder
}

// ApplicationName mocks base method.
func (m *MockApplicationPortRanges) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockApplicationPortRangesMockRecorder) ApplicationName() *MockApplicationPortRangesApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockApplicationPortRanges)(nil).ApplicationName))
	return &MockApplicationPortRangesApplicationNameCall{Call: call}
}

// MockApplicationPortRangesApplicationNameCall wrap *gomock.Call
type MockApplicationPortRangesApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationPortRangesApplicationNameCall) Return(arg0 string) *MockApplicationPortRangesApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationPortRangesApplicationNameCall) Do(f func() string) *MockApplicationPortRangesApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationPortRangesApplicationNameCall) DoAndReturn(f func() string) *MockApplicationPortRangesApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByEndpoint mocks base method.
func (m *MockApplicationPortRanges) ByEndpoint() network.GroupedPortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByEndpoint")
	ret0, _ := ret[0].(network.GroupedPortRanges)
	return ret0
}

// ByEndpoint indicates an expected call of ByEndpoint.
func (mr *MockApplicationPortRangesMockRecorder) ByEndpoint() *MockApplicationPortRangesByEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByEndpoint", reflect.TypeOf((*MockApplicationPortRanges)(nil).ByEndpoint))
	return &MockApplicationPortRangesByEndpointCall{Call: call}
}

// MockApplicationPortRangesByEndpointCall wrap *gomock.Call
type MockApplicationPortRangesByEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationPortRangesByEndpointCall) Return(arg0 network.GroupedPortRanges) *MockApplicationPortRangesByEndpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationPortRangesByEndpointCall) Do(f func() network.GroupedPortRanges) *MockApplicationPortRangesByEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationPortRangesByEndpointCall) DoAndReturn(f func() network.GroupedPortRanges) *MockApplicationPortRangesByEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByUnit mocks base method.
func (m *MockApplicationPortRanges) ByUnit() map[string]state.UnitPortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUnit")
	ret0, _ := ret[0].(map[string]state.UnitPortRanges)
	return ret0
}

// ByUnit indicates an expected call of ByUnit.
func (mr *MockApplicationPortRangesMockRecorder) ByUnit() *MockApplicationPortRangesByUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUnit", reflect.TypeOf((*MockApplicationPortRanges)(nil).ByUnit))
	return &MockApplicationPortRangesByUnitCall{Call: call}
}

// MockApplicationPortRangesByUnitCall wrap *gomock.Call
type MockApplicationPortRangesByUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationPortRangesByUnitCall) Return(arg0 map[string]state.UnitPortRanges) *MockApplicationPortRangesByUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationPortRangesByUnitCall) Do(f func() map[string]state.UnitPortRanges) *MockApplicationPortRangesByUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationPortRangesByUnitCall) DoAndReturn(f func() map[string]state.UnitPortRanges) *MockApplicationPortRangesByUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ForUnit mocks base method.
func (m *MockApplicationPortRanges) ForUnit(arg0 string) state.UnitPortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForUnit", arg0)
	ret0, _ := ret[0].(state.UnitPortRanges)
	return ret0
}

// ForUnit indicates an expected call of ForUnit.
func (mr *MockApplicationPortRangesMockRecorder) ForUnit(arg0 any) *MockApplicationPortRangesForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForUnit", reflect.TypeOf((*MockApplicationPortRanges)(nil).ForUnit), arg0)
	return &MockApplicationPortRangesForUnitCall{Call: call}
}

// MockApplicationPortRangesForUnitCall wrap *gomock.Call
type MockApplicationPortRangesForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationPortRangesForUnitCall) Return(arg0 state.UnitPortRanges) *MockApplicationPortRangesForUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationPortRangesForUnitCall) Do(f func(string) state.UnitPortRanges) *MockApplicationPortRangesForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationPortRangesForUnitCall) DoAndReturn(f func(string) state.UnitPortRanges) *MockApplicationPortRangesForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
