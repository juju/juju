// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: ApplicationPortRanges)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/juju/juju/core/network"
	state "github.com/juju/juju/state"
	reflect "reflect"
)

// MockApplicationPortRanges is a mock of ApplicationPortRanges interface
type MockApplicationPortRanges struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationPortRangesMockRecorder
}

// MockApplicationPortRangesMockRecorder is the mock recorder for MockApplicationPortRanges
type MockApplicationPortRangesMockRecorder struct {
	mock *MockApplicationPortRanges
}

// NewMockApplicationPortRanges creates a new mock instance
func NewMockApplicationPortRanges(ctrl *gomock.Controller) *MockApplicationPortRanges {
	mock := &MockApplicationPortRanges{ctrl: ctrl}
	mock.recorder = &MockApplicationPortRangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationPortRanges) EXPECT() *MockApplicationPortRangesMockRecorder {
	return m.recorder
}

// ApplicationName mocks base method
func (m *MockApplicationPortRanges) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName
func (mr *MockApplicationPortRangesMockRecorder) ApplicationName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockApplicationPortRanges)(nil).ApplicationName))
}

// ByEndpoint mocks base method
func (m *MockApplicationPortRanges) ByEndpoint() network.GroupedPortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByEndpoint")
	ret0, _ := ret[0].(network.GroupedPortRanges)
	return ret0
}

// ByEndpoint indicates an expected call of ByEndpoint
func (mr *MockApplicationPortRangesMockRecorder) ByEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByEndpoint", reflect.TypeOf((*MockApplicationPortRanges)(nil).ByEndpoint))
}

// Changes mocks base method
func (m *MockApplicationPortRanges) Changes() state.ModelOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(state.ModelOperation)
	return ret0
}

// Changes indicates an expected call of Changes
func (mr *MockApplicationPortRangesMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockApplicationPortRanges)(nil).Changes))
}

// Close mocks base method
func (m *MockApplicationPortRanges) Close(arg0 string, arg1 network.PortRange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0, arg1)
}

// Close indicates an expected call of Close
func (mr *MockApplicationPortRangesMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockApplicationPortRanges)(nil).Close), arg0, arg1)
}

// Open mocks base method
func (m *MockApplicationPortRanges) Open(arg0 string, arg1 network.PortRange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Open", arg0, arg1)
}

// Open indicates an expected call of Open
func (mr *MockApplicationPortRangesMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockApplicationPortRanges)(nil).Open), arg0, arg1)
}

// Persisted mocks base method
func (m *MockApplicationPortRanges) Persisted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persisted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Persisted indicates an expected call of Persisted
func (mr *MockApplicationPortRangesMockRecorder) Persisted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persisted", reflect.TypeOf((*MockApplicationPortRanges)(nil).Persisted))
}

// Refresh mocks base method
func (m *MockApplicationPortRanges) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockApplicationPortRangesMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockApplicationPortRanges)(nil).Refresh))
}

// Remove mocks base method
func (m *MockApplicationPortRanges) Remove() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockApplicationPortRangesMockRecorder) Remove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockApplicationPortRanges)(nil).Remove))
}

// UniquePortRanges mocks base method
func (m *MockApplicationPortRanges) UniquePortRanges() []network.PortRange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniquePortRanges")
	ret0, _ := ret[0].([]network.PortRange)
	return ret0
}

// UniquePortRanges indicates an expected call of UniquePortRanges
func (mr *MockApplicationPortRangesMockRecorder) UniquePortRanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniquePortRanges", reflect.TypeOf((*MockApplicationPortRanges)(nil).UniquePortRanges))
}
