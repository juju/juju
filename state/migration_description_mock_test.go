// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/description/v8 (interfaces: ApplicationOffer,FirewallRule,RemoteEntity,RelationNetwork,RemoteApplication,RemoteSpace,Status)
//
// Generated by this command:
//
//	mockgen -typed -package state -destination migration_description_mock_test.go github.com/juju/description/v8 ApplicationOffer,FirewallRule,RemoteEntity,RelationNetwork,RemoteApplication,RemoteSpace,Status
//

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"
	time "time"

	description "github.com/juju/description/v8"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationOffer is a mock of ApplicationOffer interface.
type MockApplicationOffer struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationOfferMockRecorder
}

// MockApplicationOfferMockRecorder is the mock recorder for MockApplicationOffer.
type MockApplicationOfferMockRecorder struct {
	mock *MockApplicationOffer
}

// NewMockApplicationOffer creates a new mock instance.
func NewMockApplicationOffer(ctrl *gomock.Controller) *MockApplicationOffer {
	mock := &MockApplicationOffer{ctrl: ctrl}
	mock.recorder = &MockApplicationOfferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationOffer) EXPECT() *MockApplicationOfferMockRecorder {
	return m.recorder
}

// ACL mocks base method.
func (m *MockApplicationOffer) ACL() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACL")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ACL indicates an expected call of ACL.
func (mr *MockApplicationOfferMockRecorder) ACL() *MockApplicationOfferACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACL", reflect.TypeOf((*MockApplicationOffer)(nil).ACL))
	return &MockApplicationOfferACLCall{Call: call}
}

// MockApplicationOfferACLCall wrap *gomock.Call
type MockApplicationOfferACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferACLCall) Return(arg0 map[string]string) *MockApplicationOfferACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferACLCall) Do(f func() map[string]string) *MockApplicationOfferACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferACLCall) DoAndReturn(f func() map[string]string) *MockApplicationOfferACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationDescription mocks base method.
func (m *MockApplicationOffer) ApplicationDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationDescription indicates an expected call of ApplicationDescription.
func (mr *MockApplicationOfferMockRecorder) ApplicationDescription() *MockApplicationOfferApplicationDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDescription", reflect.TypeOf((*MockApplicationOffer)(nil).ApplicationDescription))
	return &MockApplicationOfferApplicationDescriptionCall{Call: call}
}

// MockApplicationOfferApplicationDescriptionCall wrap *gomock.Call
type MockApplicationOfferApplicationDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferApplicationDescriptionCall) Return(arg0 string) *MockApplicationOfferApplicationDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferApplicationDescriptionCall) Do(f func() string) *MockApplicationOfferApplicationDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferApplicationDescriptionCall) DoAndReturn(f func() string) *MockApplicationOfferApplicationDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationName mocks base method.
func (m *MockApplicationOffer) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockApplicationOfferMockRecorder) ApplicationName() *MockApplicationOfferApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockApplicationOffer)(nil).ApplicationName))
	return &MockApplicationOfferApplicationNameCall{Call: call}
}

// MockApplicationOfferApplicationNameCall wrap *gomock.Call
type MockApplicationOfferApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferApplicationNameCall) Return(arg0 string) *MockApplicationOfferApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferApplicationNameCall) Do(f func() string) *MockApplicationOfferApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferApplicationNameCall) DoAndReturn(f func() string) *MockApplicationOfferApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Endpoints mocks base method.
func (m *MockApplicationOffer) Endpoints() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockApplicationOfferMockRecorder) Endpoints() *MockApplicationOfferEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockApplicationOffer)(nil).Endpoints))
	return &MockApplicationOfferEndpointsCall{Call: call}
}

// MockApplicationOfferEndpointsCall wrap *gomock.Call
type MockApplicationOfferEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferEndpointsCall) Return(arg0 map[string]string) *MockApplicationOfferEndpointsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferEndpointsCall) Do(f func() map[string]string) *MockApplicationOfferEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferEndpointsCall) DoAndReturn(f func() map[string]string) *MockApplicationOfferEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferName mocks base method.
func (m *MockApplicationOffer) OfferName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferName")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferName indicates an expected call of OfferName.
func (mr *MockApplicationOfferMockRecorder) OfferName() *MockApplicationOfferOfferNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferName", reflect.TypeOf((*MockApplicationOffer)(nil).OfferName))
	return &MockApplicationOfferOfferNameCall{Call: call}
}

// MockApplicationOfferOfferNameCall wrap *gomock.Call
type MockApplicationOfferOfferNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferOfferNameCall) Return(arg0 string) *MockApplicationOfferOfferNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferOfferNameCall) Do(f func() string) *MockApplicationOfferOfferNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferOfferNameCall) DoAndReturn(f func() string) *MockApplicationOfferOfferNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockApplicationOffer) OfferUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockApplicationOfferMockRecorder) OfferUUID() *MockApplicationOfferOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockApplicationOffer)(nil).OfferUUID))
	return &MockApplicationOfferOfferUUIDCall{Call: call}
}

// MockApplicationOfferOfferUUIDCall wrap *gomock.Call
type MockApplicationOfferOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationOfferOfferUUIDCall) Return(arg0 string) *MockApplicationOfferOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationOfferOfferUUIDCall) Do(f func() string) *MockApplicationOfferOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationOfferOfferUUIDCall) DoAndReturn(f func() string) *MockApplicationOfferOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFirewallRule is a mock of FirewallRule interface.
type MockFirewallRule struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallRuleMockRecorder
}

// MockFirewallRuleMockRecorder is the mock recorder for MockFirewallRule.
type MockFirewallRuleMockRecorder struct {
	mock *MockFirewallRule
}

// NewMockFirewallRule creates a new mock instance.
func NewMockFirewallRule(ctrl *gomock.Controller) *MockFirewallRule {
	mock := &MockFirewallRule{ctrl: ctrl}
	mock.recorder = &MockFirewallRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallRule) EXPECT() *MockFirewallRuleMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockFirewallRule) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockFirewallRuleMockRecorder) ID() *MockFirewallRuleIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockFirewallRule)(nil).ID))
	return &MockFirewallRuleIDCall{Call: call}
}

// MockFirewallRuleIDCall wrap *gomock.Call
type MockFirewallRuleIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallRuleIDCall) Return(arg0 string) *MockFirewallRuleIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallRuleIDCall) Do(f func() string) *MockFirewallRuleIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallRuleIDCall) DoAndReturn(f func() string) *MockFirewallRuleIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WellKnownService mocks base method.
func (m *MockFirewallRule) WellKnownService() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WellKnownService")
	ret0, _ := ret[0].(string)
	return ret0
}

// WellKnownService indicates an expected call of WellKnownService.
func (mr *MockFirewallRuleMockRecorder) WellKnownService() *MockFirewallRuleWellKnownServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WellKnownService", reflect.TypeOf((*MockFirewallRule)(nil).WellKnownService))
	return &MockFirewallRuleWellKnownServiceCall{Call: call}
}

// MockFirewallRuleWellKnownServiceCall wrap *gomock.Call
type MockFirewallRuleWellKnownServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallRuleWellKnownServiceCall) Return(arg0 string) *MockFirewallRuleWellKnownServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallRuleWellKnownServiceCall) Do(f func() string) *MockFirewallRuleWellKnownServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallRuleWellKnownServiceCall) DoAndReturn(f func() string) *MockFirewallRuleWellKnownServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WhitelistCIDRs mocks base method.
func (m *MockFirewallRule) WhitelistCIDRs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhitelistCIDRs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WhitelistCIDRs indicates an expected call of WhitelistCIDRs.
func (mr *MockFirewallRuleMockRecorder) WhitelistCIDRs() *MockFirewallRuleWhitelistCIDRsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhitelistCIDRs", reflect.TypeOf((*MockFirewallRule)(nil).WhitelistCIDRs))
	return &MockFirewallRuleWhitelistCIDRsCall{Call: call}
}

// MockFirewallRuleWhitelistCIDRsCall wrap *gomock.Call
type MockFirewallRuleWhitelistCIDRsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallRuleWhitelistCIDRsCall) Return(arg0 []string) *MockFirewallRuleWhitelistCIDRsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallRuleWhitelistCIDRsCall) Do(f func() []string) *MockFirewallRuleWhitelistCIDRsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallRuleWhitelistCIDRsCall) DoAndReturn(f func() []string) *MockFirewallRuleWhitelistCIDRsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteEntity is a mock of RemoteEntity interface.
type MockRemoteEntity struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteEntityMockRecorder
}

// MockRemoteEntityMockRecorder is the mock recorder for MockRemoteEntity.
type MockRemoteEntityMockRecorder struct {
	mock *MockRemoteEntity
}

// NewMockRemoteEntity creates a new mock instance.
func NewMockRemoteEntity(ctrl *gomock.Controller) *MockRemoteEntity {
	mock := &MockRemoteEntity{ctrl: ctrl}
	mock.recorder = &MockRemoteEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteEntity) EXPECT() *MockRemoteEntityMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockRemoteEntity) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRemoteEntityMockRecorder) ID() *MockRemoteEntityIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRemoteEntity)(nil).ID))
	return &MockRemoteEntityIDCall{Call: call}
}

// MockRemoteEntityIDCall wrap *gomock.Call
type MockRemoteEntityIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntityIDCall) Return(arg0 string) *MockRemoteEntityIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntityIDCall) Do(f func() string) *MockRemoteEntityIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntityIDCall) DoAndReturn(f func() string) *MockRemoteEntityIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Macaroon mocks base method.
func (m *MockRemoteEntity) Macaroon() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(string)
	return ret0
}

// Macaroon indicates an expected call of Macaroon.
func (mr *MockRemoteEntityMockRecorder) Macaroon() *MockRemoteEntityMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockRemoteEntity)(nil).Macaroon))
	return &MockRemoteEntityMacaroonCall{Call: call}
}

// MockRemoteEntityMacaroonCall wrap *gomock.Call
type MockRemoteEntityMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntityMacaroonCall) Return(arg0 string) *MockRemoteEntityMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntityMacaroonCall) Do(f func() string) *MockRemoteEntityMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntityMacaroonCall) DoAndReturn(f func() string) *MockRemoteEntityMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Token mocks base method.
func (m *MockRemoteEntity) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockRemoteEntityMockRecorder) Token() *MockRemoteEntityTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockRemoteEntity)(nil).Token))
	return &MockRemoteEntityTokenCall{Call: call}
}

// MockRemoteEntityTokenCall wrap *gomock.Call
type MockRemoteEntityTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteEntityTokenCall) Return(arg0 string) *MockRemoteEntityTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteEntityTokenCall) Do(f func() string) *MockRemoteEntityTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteEntityTokenCall) DoAndReturn(f func() string) *MockRemoteEntityTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationNetwork is a mock of RelationNetwork interface.
type MockRelationNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockRelationNetworkMockRecorder
}

// MockRelationNetworkMockRecorder is the mock recorder for MockRelationNetwork.
type MockRelationNetworkMockRecorder struct {
	mock *MockRelationNetwork
}

// NewMockRelationNetwork creates a new mock instance.
func NewMockRelationNetwork(ctrl *gomock.Controller) *MockRelationNetwork {
	mock := &MockRelationNetwork{ctrl: ctrl}
	mock.recorder = &MockRelationNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationNetwork) EXPECT() *MockRelationNetworkMockRecorder {
	return m.recorder
}

// CIDRS mocks base method.
func (m *MockRelationNetwork) CIDRS() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CIDRS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// CIDRS indicates an expected call of CIDRS.
func (mr *MockRelationNetworkMockRecorder) CIDRS() *MockRelationNetworkCIDRSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CIDRS", reflect.TypeOf((*MockRelationNetwork)(nil).CIDRS))
	return &MockRelationNetworkCIDRSCall{Call: call}
}

// MockRelationNetworkCIDRSCall wrap *gomock.Call
type MockRelationNetworkCIDRSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationNetworkCIDRSCall) Return(arg0 []string) *MockRelationNetworkCIDRSCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationNetworkCIDRSCall) Do(f func() []string) *MockRelationNetworkCIDRSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationNetworkCIDRSCall) DoAndReturn(f func() []string) *MockRelationNetworkCIDRSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockRelationNetwork) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRelationNetworkMockRecorder) ID() *MockRelationNetworkIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRelationNetwork)(nil).ID))
	return &MockRelationNetworkIDCall{Call: call}
}

// MockRelationNetworkIDCall wrap *gomock.Call
type MockRelationNetworkIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationNetworkIDCall) Return(arg0 string) *MockRelationNetworkIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationNetworkIDCall) Do(f func() string) *MockRelationNetworkIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationNetworkIDCall) DoAndReturn(f func() string) *MockRelationNetworkIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationKey mocks base method.
func (m *MockRelationNetwork) RelationKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// RelationKey indicates an expected call of RelationKey.
func (mr *MockRelationNetworkMockRecorder) RelationKey() *MockRelationNetworkRelationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationKey", reflect.TypeOf((*MockRelationNetwork)(nil).RelationKey))
	return &MockRelationNetworkRelationKeyCall{Call: call}
}

// MockRelationNetworkRelationKeyCall wrap *gomock.Call
type MockRelationNetworkRelationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationNetworkRelationKeyCall) Return(arg0 string) *MockRelationNetworkRelationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationNetworkRelationKeyCall) Do(f func() string) *MockRelationNetworkRelationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationNetworkRelationKeyCall) DoAndReturn(f func() string) *MockRelationNetworkRelationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteApplication is a mock of RemoteApplication interface.
type MockRemoteApplication struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationMockRecorder
}

// MockRemoteApplicationMockRecorder is the mock recorder for MockRemoteApplication.
type MockRemoteApplicationMockRecorder struct {
	mock *MockRemoteApplication
}

// NewMockRemoteApplication creates a new mock instance.
func NewMockRemoteApplication(ctrl *gomock.Controller) *MockRemoteApplication {
	mock := &MockRemoteApplication{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteApplication) EXPECT() *MockRemoteApplicationMockRecorder {
	return m.recorder
}

// AddEndpoint mocks base method.
func (m *MockRemoteApplication) AddEndpoint(arg0 description.RemoteEndpointArgs) description.RemoteEndpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEndpoint", arg0)
	ret0, _ := ret[0].(description.RemoteEndpoint)
	return ret0
}

// AddEndpoint indicates an expected call of AddEndpoint.
func (mr *MockRemoteApplicationMockRecorder) AddEndpoint(arg0 any) *MockRemoteApplicationAddEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEndpoint", reflect.TypeOf((*MockRemoteApplication)(nil).AddEndpoint), arg0)
	return &MockRemoteApplicationAddEndpointCall{Call: call}
}

// MockRemoteApplicationAddEndpointCall wrap *gomock.Call
type MockRemoteApplicationAddEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationAddEndpointCall) Return(arg0 description.RemoteEndpoint) *MockRemoteApplicationAddEndpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationAddEndpointCall) Do(f func(description.RemoteEndpointArgs) description.RemoteEndpoint) *MockRemoteApplicationAddEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationAddEndpointCall) DoAndReturn(f func(description.RemoteEndpointArgs) description.RemoteEndpoint) *MockRemoteApplicationAddEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddSpace mocks base method.
func (m *MockRemoteApplication) AddSpace(arg0 description.RemoteSpaceArgs) description.RemoteSpace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0)
	ret0, _ := ret[0].(description.RemoteSpace)
	return ret0
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockRemoteApplicationMockRecorder) AddSpace(arg0 any) *MockRemoteApplicationAddSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockRemoteApplication)(nil).AddSpace), arg0)
	return &MockRemoteApplicationAddSpaceCall{Call: call}
}

// MockRemoteApplicationAddSpaceCall wrap *gomock.Call
type MockRemoteApplicationAddSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationAddSpaceCall) Return(arg0 description.RemoteSpace) *MockRemoteApplicationAddSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationAddSpaceCall) Do(f func(description.RemoteSpaceArgs) description.RemoteSpace) *MockRemoteApplicationAddSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationAddSpaceCall) DoAndReturn(f func(description.RemoteSpaceArgs) description.RemoteSpace) *MockRemoteApplicationAddSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bindings mocks base method.
func (m *MockRemoteApplication) Bindings() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bindings")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Bindings indicates an expected call of Bindings.
func (mr *MockRemoteApplicationMockRecorder) Bindings() *MockRemoteApplicationBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bindings", reflect.TypeOf((*MockRemoteApplication)(nil).Bindings))
	return &MockRemoteApplicationBindingsCall{Call: call}
}

// MockRemoteApplicationBindingsCall wrap *gomock.Call
type MockRemoteApplicationBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationBindingsCall) Return(arg0 map[string]string) *MockRemoteApplicationBindingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationBindingsCall) Do(f func() map[string]string) *MockRemoteApplicationBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationBindingsCall) DoAndReturn(f func() map[string]string) *MockRemoteApplicationBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsumeVersion mocks base method.
func (m *MockRemoteApplication) ConsumeVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConsumeVersion indicates an expected call of ConsumeVersion.
func (mr *MockRemoteApplicationMockRecorder) ConsumeVersion() *MockRemoteApplicationConsumeVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeVersion", reflect.TypeOf((*MockRemoteApplication)(nil).ConsumeVersion))
	return &MockRemoteApplicationConsumeVersionCall{Call: call}
}

// MockRemoteApplicationConsumeVersionCall wrap *gomock.Call
type MockRemoteApplicationConsumeVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationConsumeVersionCall) Return(arg0 int) *MockRemoteApplicationConsumeVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationConsumeVersionCall) Do(f func() int) *MockRemoteApplicationConsumeVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationConsumeVersionCall) DoAndReturn(f func() int) *MockRemoteApplicationConsumeVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Endpoints mocks base method.
func (m *MockRemoteApplication) Endpoints() []description.RemoteEndpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints")
	ret0, _ := ret[0].([]description.RemoteEndpoint)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockRemoteApplicationMockRecorder) Endpoints() *MockRemoteApplicationEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockRemoteApplication)(nil).Endpoints))
	return &MockRemoteApplicationEndpointsCall{Call: call}
}

// MockRemoteApplicationEndpointsCall wrap *gomock.Call
type MockRemoteApplicationEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationEndpointsCall) Return(arg0 []description.RemoteEndpoint) *MockRemoteApplicationEndpointsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationEndpointsCall) Do(f func() []description.RemoteEndpoint) *MockRemoteApplicationEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationEndpointsCall) DoAndReturn(f func() []description.RemoteEndpoint) *MockRemoteApplicationEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsConsumerProxy mocks base method.
func (m *MockRemoteApplication) IsConsumerProxy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConsumerProxy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConsumerProxy indicates an expected call of IsConsumerProxy.
func (mr *MockRemoteApplicationMockRecorder) IsConsumerProxy() *MockRemoteApplicationIsConsumerProxyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConsumerProxy", reflect.TypeOf((*MockRemoteApplication)(nil).IsConsumerProxy))
	return &MockRemoteApplicationIsConsumerProxyCall{Call: call}
}

// MockRemoteApplicationIsConsumerProxyCall wrap *gomock.Call
type MockRemoteApplicationIsConsumerProxyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationIsConsumerProxyCall) Return(arg0 bool) *MockRemoteApplicationIsConsumerProxyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationIsConsumerProxyCall) Do(f func() bool) *MockRemoteApplicationIsConsumerProxyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationIsConsumerProxyCall) DoAndReturn(f func() bool) *MockRemoteApplicationIsConsumerProxyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Macaroon mocks base method.
func (m *MockRemoteApplication) Macaroon() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(string)
	return ret0
}

// Macaroon indicates an expected call of Macaroon.
func (mr *MockRemoteApplicationMockRecorder) Macaroon() *MockRemoteApplicationMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockRemoteApplication)(nil).Macaroon))
	return &MockRemoteApplicationMacaroonCall{Call: call}
}

// MockRemoteApplicationMacaroonCall wrap *gomock.Call
type MockRemoteApplicationMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationMacaroonCall) Return(arg0 string) *MockRemoteApplicationMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationMacaroonCall) Do(f func() string) *MockRemoteApplicationMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationMacaroonCall) DoAndReturn(f func() string) *MockRemoteApplicationMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockRemoteApplication) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRemoteApplicationMockRecorder) Name() *MockRemoteApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRemoteApplication)(nil).Name))
	return &MockRemoteApplicationNameCall{Call: call}
}

// MockRemoteApplicationNameCall wrap *gomock.Call
type MockRemoteApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationNameCall) Return(arg0 string) *MockRemoteApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationNameCall) Do(f func() string) *MockRemoteApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationNameCall) DoAndReturn(f func() string) *MockRemoteApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockRemoteApplication) OfferUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockRemoteApplicationMockRecorder) OfferUUID() *MockRemoteApplicationOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockRemoteApplication)(nil).OfferUUID))
	return &MockRemoteApplicationOfferUUIDCall{Call: call}
}

// MockRemoteApplicationOfferUUIDCall wrap *gomock.Call
type MockRemoteApplicationOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationOfferUUIDCall) Return(arg0 string) *MockRemoteApplicationOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationOfferUUIDCall) Do(f func() string) *MockRemoteApplicationOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationOfferUUIDCall) DoAndReturn(f func() string) *MockRemoteApplicationOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockRemoteApplication) SetStatus(arg0 description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockRemoteApplicationMockRecorder) SetStatus(arg0 any) *MockRemoteApplicationSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockRemoteApplication)(nil).SetStatus), arg0)
	return &MockRemoteApplicationSetStatusCall{Call: call}
}

// MockRemoteApplicationSetStatusCall wrap *gomock.Call
type MockRemoteApplicationSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationSetStatusCall) Return() *MockRemoteApplicationSetStatusCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationSetStatusCall) Do(f func(description.StatusArgs)) *MockRemoteApplicationSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationSetStatusCall) DoAndReturn(f func(description.StatusArgs)) *MockRemoteApplicationSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SourceModelTag mocks base method.
func (m *MockRemoteApplication) SourceModelTag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// SourceModelTag indicates an expected call of SourceModelTag.
func (mr *MockRemoteApplicationMockRecorder) SourceModelTag() *MockRemoteApplicationSourceModelTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceModelTag", reflect.TypeOf((*MockRemoteApplication)(nil).SourceModelTag))
	return &MockRemoteApplicationSourceModelTagCall{Call: call}
}

// MockRemoteApplicationSourceModelTagCall wrap *gomock.Call
type MockRemoteApplicationSourceModelTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationSourceModelTagCall) Return(arg0 names.ModelTag) *MockRemoteApplicationSourceModelTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationSourceModelTagCall) Do(f func() names.ModelTag) *MockRemoteApplicationSourceModelTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationSourceModelTagCall) DoAndReturn(f func() names.ModelTag) *MockRemoteApplicationSourceModelTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Spaces mocks base method.
func (m *MockRemoteApplication) Spaces() []description.RemoteSpace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces")
	ret0, _ := ret[0].([]description.RemoteSpace)
	return ret0
}

// Spaces indicates an expected call of Spaces.
func (mr *MockRemoteApplicationMockRecorder) Spaces() *MockRemoteApplicationSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockRemoteApplication)(nil).Spaces))
	return &MockRemoteApplicationSpacesCall{Call: call}
}

// MockRemoteApplicationSpacesCall wrap *gomock.Call
type MockRemoteApplicationSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationSpacesCall) Return(arg0 []description.RemoteSpace) *MockRemoteApplicationSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationSpacesCall) Do(f func() []description.RemoteSpace) *MockRemoteApplicationSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationSpacesCall) DoAndReturn(f func() []description.RemoteSpace) *MockRemoteApplicationSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockRemoteApplication) Status() description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(description.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockRemoteApplicationMockRecorder) Status() *MockRemoteApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRemoteApplication)(nil).Status))
	return &MockRemoteApplicationStatusCall{Call: call}
}

// MockRemoteApplicationStatusCall wrap *gomock.Call
type MockRemoteApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationStatusCall) Return(arg0 description.Status) *MockRemoteApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationStatusCall) Do(f func() description.Status) *MockRemoteApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationStatusCall) DoAndReturn(f func() description.Status) *MockRemoteApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockRemoteApplication) Tag() names.ApplicationTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.ApplicationTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockRemoteApplicationMockRecorder) Tag() *MockRemoteApplicationTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockRemoteApplication)(nil).Tag))
	return &MockRemoteApplicationTagCall{Call: call}
}

// MockRemoteApplicationTagCall wrap *gomock.Call
type MockRemoteApplicationTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationTagCall) Return(arg0 names.ApplicationTag) *MockRemoteApplicationTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationTagCall) Do(f func() names.ApplicationTag) *MockRemoteApplicationTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationTagCall) DoAndReturn(f func() names.ApplicationTag) *MockRemoteApplicationTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// URL mocks base method.
func (m *MockRemoteApplication) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockRemoteApplicationMockRecorder) URL() *MockRemoteApplicationURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockRemoteApplication)(nil).URL))
	return &MockRemoteApplicationURLCall{Call: call}
}

// MockRemoteApplicationURLCall wrap *gomock.Call
type MockRemoteApplicationURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationURLCall) Return(arg0 string) *MockRemoteApplicationURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationURLCall) Do(f func() string) *MockRemoteApplicationURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationURLCall) DoAndReturn(f func() string) *MockRemoteApplicationURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteSpace is a mock of RemoteSpace interface.
type MockRemoteSpace struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteSpaceMockRecorder
}

// MockRemoteSpaceMockRecorder is the mock recorder for MockRemoteSpace.
type MockRemoteSpaceMockRecorder struct {
	mock *MockRemoteSpace
}

// NewMockRemoteSpace creates a new mock instance.
func NewMockRemoteSpace(ctrl *gomock.Controller) *MockRemoteSpace {
	mock := &MockRemoteSpace{ctrl: ctrl}
	mock.recorder = &MockRemoteSpaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteSpace) EXPECT() *MockRemoteSpaceMockRecorder {
	return m.recorder
}

// AddSubnet mocks base method.
func (m *MockRemoteSpace) AddSubnet(arg0 description.SubnetArgs) description.Subnet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0)
	ret0, _ := ret[0].(description.Subnet)
	return ret0
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockRemoteSpaceMockRecorder) AddSubnet(arg0 any) *MockRemoteSpaceAddSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockRemoteSpace)(nil).AddSubnet), arg0)
	return &MockRemoteSpaceAddSubnetCall{Call: call}
}

// MockRemoteSpaceAddSubnetCall wrap *gomock.Call
type MockRemoteSpaceAddSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteSpaceAddSubnetCall) Return(arg0 description.Subnet) *MockRemoteSpaceAddSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteSpaceAddSubnetCall) Do(f func(description.SubnetArgs) description.Subnet) *MockRemoteSpaceAddSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteSpaceAddSubnetCall) DoAndReturn(f func(description.SubnetArgs) description.Subnet) *MockRemoteSpaceAddSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudType mocks base method.
func (m *MockRemoteSpace) CloudType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudType")
	ret0, _ := ret[0].(string)
	return ret0
}

// CloudType indicates an expected call of CloudType.
func (mr *MockRemoteSpaceMockRecorder) CloudType() *MockRemoteSpaceCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudType", reflect.TypeOf((*MockRemoteSpace)(nil).CloudType))
	return &MockRemoteSpaceCloudTypeCall{Call: call}
}

// MockRemoteSpaceCloudTypeCall wrap *gomock.Call
type MockRemoteSpaceCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteSpaceCloudTypeCall) Return(arg0 string) *MockRemoteSpaceCloudTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteSpaceCloudTypeCall) Do(f func() string) *MockRemoteSpaceCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteSpaceCloudTypeCall) DoAndReturn(f func() string) *MockRemoteSpaceCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockRemoteSpace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRemoteSpaceMockRecorder) Name() *MockRemoteSpaceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRemoteSpace)(nil).Name))
	return &MockRemoteSpaceNameCall{Call: call}
}

// MockRemoteSpaceNameCall wrap *gomock.Call
type MockRemoteSpaceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteSpaceNameCall) Return(arg0 string) *MockRemoteSpaceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteSpaceNameCall) Do(f func() string) *MockRemoteSpaceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteSpaceNameCall) DoAndReturn(f func() string) *MockRemoteSpaceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderAttributes mocks base method.
func (m *MockRemoteSpace) ProviderAttributes() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderAttributes")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// ProviderAttributes indicates an expected call of ProviderAttributes.
func (mr *MockRemoteSpaceMockRecorder) ProviderAttributes() *MockRemoteSpaceProviderAttributesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderAttributes", reflect.TypeOf((*MockRemoteSpace)(nil).ProviderAttributes))
	return &MockRemoteSpaceProviderAttributesCall{Call: call}
}

// MockRemoteSpaceProviderAttributesCall wrap *gomock.Call
type MockRemoteSpaceProviderAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteSpaceProviderAttributesCall) Return(arg0 map[string]any) *MockRemoteSpaceProviderAttributesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteSpaceProviderAttributesCall) Do(f func() map[string]any) *MockRemoteSpaceProviderAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteSpaceProviderAttributesCall) DoAndReturn(f func() map[string]any) *MockRemoteSpaceProviderAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderId mocks base method.
func (m *MockRemoteSpace) ProviderId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderId")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProviderId indicates an expected call of ProviderId.
func (mr *MockRemoteSpaceMockRecorder) ProviderId() *MockRemoteSpaceProviderIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderId", reflect.TypeOf((*MockRemoteSpace)(nil).ProviderId))
	return &MockRemoteSpaceProviderIdCall{Call: call}
}

// MockRemoteSpaceProviderIdCall wrap *gomock.Call
type MockRemoteSpaceProviderIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteSpaceProviderIdCall) Return(arg0 string) *MockRemoteSpaceProviderIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteSpaceProviderIdCall) Do(f func() string) *MockRemoteSpaceProviderIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteSpaceProviderIdCall) DoAndReturn(f func() string) *MockRemoteSpaceProviderIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subnets mocks base method.
func (m *MockRemoteSpace) Subnets() []description.Subnet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets")
	ret0, _ := ret[0].([]description.Subnet)
	return ret0
}

// Subnets indicates an expected call of Subnets.
func (mr *MockRemoteSpaceMockRecorder) Subnets() *MockRemoteSpaceSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockRemoteSpace)(nil).Subnets))
	return &MockRemoteSpaceSubnetsCall{Call: call}
}

// MockRemoteSpaceSubnetsCall wrap *gomock.Call
type MockRemoteSpaceSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteSpaceSubnetsCall) Return(arg0 []description.Subnet) *MockRemoteSpaceSubnetsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteSpaceSubnetsCall) Do(f func() []description.Subnet) *MockRemoteSpaceSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteSpaceSubnetsCall) DoAndReturn(f func() []description.Subnet) *MockRemoteSpaceSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockStatus) Data() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockStatusMockRecorder) Data() *MockStatusDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockStatus)(nil).Data))
	return &MockStatusDataCall{Call: call}
}

// MockStatusDataCall wrap *gomock.Call
type MockStatusDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusDataCall) Return(arg0 map[string]any) *MockStatusDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusDataCall) Do(f func() map[string]any) *MockStatusDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusDataCall) DoAndReturn(f func() map[string]any) *MockStatusDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Message mocks base method.
func (m *MockStatus) Message() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(string)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockStatusMockRecorder) Message() *MockStatusMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockStatus)(nil).Message))
	return &MockStatusMessageCall{Call: call}
}

// MockStatusMessageCall wrap *gomock.Call
type MockStatusMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusMessageCall) Return(arg0 string) *MockStatusMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusMessageCall) Do(f func() string) *MockStatusMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusMessageCall) DoAndReturn(f func() string) *MockStatusMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NeverSet mocks base method.
func (m *MockStatus) NeverSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeverSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeverSet indicates an expected call of NeverSet.
func (mr *MockStatusMockRecorder) NeverSet() *MockStatusNeverSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeverSet", reflect.TypeOf((*MockStatus)(nil).NeverSet))
	return &MockStatusNeverSetCall{Call: call}
}

// MockStatusNeverSetCall wrap *gomock.Call
type MockStatusNeverSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusNeverSetCall) Return(arg0 bool) *MockStatusNeverSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusNeverSetCall) Do(f func() bool) *MockStatusNeverSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusNeverSetCall) DoAndReturn(f func() bool) *MockStatusNeverSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Updated mocks base method.
func (m *MockStatus) Updated() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updated")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Updated indicates an expected call of Updated.
func (mr *MockStatusMockRecorder) Updated() *MockStatusUpdatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updated", reflect.TypeOf((*MockStatus)(nil).Updated))
	return &MockStatusUpdatedCall{Call: call}
}

// MockStatusUpdatedCall wrap *gomock.Call
type MockStatusUpdatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusUpdatedCall) Return(arg0 time.Time) *MockStatusUpdatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusUpdatedCall) Do(f func() time.Time) *MockStatusUpdatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusUpdatedCall) DoAndReturn(f func() time.Time) *MockStatusUpdatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockStatus) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockStatusMockRecorder) Value() *MockStatusValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockStatus)(nil).Value))
	return &MockStatusValueCall{Call: call}
}

// MockStatusValueCall wrap *gomock.Call
type MockStatusValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusValueCall) Return(arg0 string) *MockStatusValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusValueCall) Do(f func() string) *MockStatusValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusValueCall) DoAndReturn(f func() string) *MockStatusValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
