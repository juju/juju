// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/description (interfaces: RemoteEntity,RelationNetwork)

// Package state is a generated GoMock package.
package state

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRemoteEntity is a mock of RemoteEntity interface
type MockRemoteEntity struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteEntityMockRecorder
}

// MockRemoteEntityMockRecorder is the mock recorder for MockRemoteEntity
type MockRemoteEntityMockRecorder struct {
	mock *MockRemoteEntity
}

// NewMockRemoteEntity creates a new mock instance
func NewMockRemoteEntity(ctrl *gomock.Controller) *MockRemoteEntity {
	mock := &MockRemoteEntity{ctrl: ctrl}
	mock.recorder = &MockRemoteEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteEntity) EXPECT() *MockRemoteEntityMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockRemoteEntity) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockRemoteEntityMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRemoteEntity)(nil).ID))
}

// Macaroon mocks base method
func (m *MockRemoteEntity) Macaroon() string {
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(string)
	return ret0
}

// Macaroon indicates an expected call of Macaroon
func (mr *MockRemoteEntityMockRecorder) Macaroon() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockRemoteEntity)(nil).Macaroon))
}

// Token mocks base method
func (m *MockRemoteEntity) Token() string {
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token
func (mr *MockRemoteEntityMockRecorder) Token() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockRemoteEntity)(nil).Token))
}

// MockRelationNetwork is a mock of RelationNetwork interface
type MockRelationNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockRelationNetworkMockRecorder
}

// MockRelationNetworkMockRecorder is the mock recorder for MockRelationNetwork
type MockRelationNetworkMockRecorder struct {
	mock *MockRelationNetwork
}

// NewMockRelationNetwork creates a new mock instance
func NewMockRelationNetwork(ctrl *gomock.Controller) *MockRelationNetwork {
	mock := &MockRelationNetwork{ctrl: ctrl}
	mock.recorder = &MockRelationNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRelationNetwork) EXPECT() *MockRelationNetworkMockRecorder {
	return m.recorder
}

// CIDRS mocks base method
func (m *MockRelationNetwork) CIDRS() []string {
	ret := m.ctrl.Call(m, "CIDRS")
	ret0, _ := ret[0].([]string)
	return ret0
}

// CIDRS indicates an expected call of CIDRS
func (mr *MockRelationNetworkMockRecorder) CIDRS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CIDRS", reflect.TypeOf((*MockRelationNetwork)(nil).CIDRS))
}

// ID mocks base method
func (m *MockRelationNetwork) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockRelationNetworkMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRelationNetwork)(nil).ID))
}

// RelationKey mocks base method
func (m *MockRelationNetwork) RelationKey() string {
	ret := m.ctrl.Call(m, "RelationKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// RelationKey indicates an expected call of RelationKey
func (mr *MockRelationNetworkMockRecorder) RelationKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationKey", reflect.TypeOf((*MockRelationNetwork)(nil).RelationKey))
}
