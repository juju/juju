// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: StatusSource,RemoteEntitiesSource,RemoteEntitiesModel,RelationNetworksSource,RelationNetworksModel,RemoteApplicationSource,RemoteApplicationModel)

// Package state is a generated GoMock package.
package state

import (
	gomock "github.com/golang/mock/gomock"
	description "github.com/juju/description"
	reflect "reflect"
)

// MockStatusSource is a mock of StatusSource interface
type MockStatusSource struct {
	ctrl     *gomock.Controller
	recorder *MockStatusSourceMockRecorder
}

// MockStatusSourceMockRecorder is the mock recorder for MockStatusSource
type MockStatusSourceMockRecorder struct {
	mock *MockStatusSource
}

// NewMockStatusSource creates a new mock instance
func NewMockStatusSource(ctrl *gomock.Controller) *MockStatusSource {
	mock := &MockStatusSource{ctrl: ctrl}
	mock.recorder = &MockStatusSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatusSource) EXPECT() *MockStatusSourceMockRecorder {
	return m.recorder
}

// StatusArgs mocks base method
func (m *MockStatusSource) StatusArgs(arg0 string) (description.StatusArgs, error) {
	ret := m.ctrl.Call(m, "StatusArgs", arg0)
	ret0, _ := ret[0].(description.StatusArgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusArgs indicates an expected call of StatusArgs
func (mr *MockStatusSourceMockRecorder) StatusArgs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusArgs", reflect.TypeOf((*MockStatusSource)(nil).StatusArgs), arg0)
}

// MockRemoteEntitiesSource is a mock of RemoteEntitiesSource interface
type MockRemoteEntitiesSource struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteEntitiesSourceMockRecorder
}

// MockRemoteEntitiesSourceMockRecorder is the mock recorder for MockRemoteEntitiesSource
type MockRemoteEntitiesSourceMockRecorder struct {
	mock *MockRemoteEntitiesSource
}

// NewMockRemoteEntitiesSource creates a new mock instance
func NewMockRemoteEntitiesSource(ctrl *gomock.Controller) *MockRemoteEntitiesSource {
	mock := &MockRemoteEntitiesSource{ctrl: ctrl}
	mock.recorder = &MockRemoteEntitiesSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteEntitiesSource) EXPECT() *MockRemoteEntitiesSourceMockRecorder {
	return m.recorder
}

// AllRemoteEntities mocks base method
func (m *MockRemoteEntitiesSource) AllRemoteEntities() ([]RemoteEntity, error) {
	ret := m.ctrl.Call(m, "AllRemoteEntities")
	ret0, _ := ret[0].([]RemoteEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRemoteEntities indicates an expected call of AllRemoteEntities
func (mr *MockRemoteEntitiesSourceMockRecorder) AllRemoteEntities() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRemoteEntities", reflect.TypeOf((*MockRemoteEntitiesSource)(nil).AllRemoteEntities))
}

// MockRemoteEntitiesModel is a mock of RemoteEntitiesModel interface
type MockRemoteEntitiesModel struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteEntitiesModelMockRecorder
}

// MockRemoteEntitiesModelMockRecorder is the mock recorder for MockRemoteEntitiesModel
type MockRemoteEntitiesModelMockRecorder struct {
	mock *MockRemoteEntitiesModel
}

// NewMockRemoteEntitiesModel creates a new mock instance
func NewMockRemoteEntitiesModel(ctrl *gomock.Controller) *MockRemoteEntitiesModel {
	mock := &MockRemoteEntitiesModel{ctrl: ctrl}
	mock.recorder = &MockRemoteEntitiesModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteEntitiesModel) EXPECT() *MockRemoteEntitiesModelMockRecorder {
	return m.recorder
}

// AddRemoteEntity mocks base method
func (m *MockRemoteEntitiesModel) AddRemoteEntity(arg0 description.RemoteEntityArgs) description.RemoteEntity {
	ret := m.ctrl.Call(m, "AddRemoteEntity", arg0)
	ret0, _ := ret[0].(description.RemoteEntity)
	return ret0
}

// AddRemoteEntity indicates an expected call of AddRemoteEntity
func (mr *MockRemoteEntitiesModelMockRecorder) AddRemoteEntity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteEntity", reflect.TypeOf((*MockRemoteEntitiesModel)(nil).AddRemoteEntity), arg0)
}

// MockRelationNetworksSource is a mock of RelationNetworksSource interface
type MockRelationNetworksSource struct {
	ctrl     *gomock.Controller
	recorder *MockRelationNetworksSourceMockRecorder
}

// MockRelationNetworksSourceMockRecorder is the mock recorder for MockRelationNetworksSource
type MockRelationNetworksSourceMockRecorder struct {
	mock *MockRelationNetworksSource
}

// NewMockRelationNetworksSource creates a new mock instance
func NewMockRelationNetworksSource(ctrl *gomock.Controller) *MockRelationNetworksSource {
	mock := &MockRelationNetworksSource{ctrl: ctrl}
	mock.recorder = &MockRelationNetworksSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRelationNetworksSource) EXPECT() *MockRelationNetworksSourceMockRecorder {
	return m.recorder
}

// AllRelationNetworks mocks base method
func (m *MockRelationNetworksSource) AllRelationNetworks() ([]RelationNetworks, error) {
	ret := m.ctrl.Call(m, "AllRelationNetworks")
	ret0, _ := ret[0].([]RelationNetworks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRelationNetworks indicates an expected call of AllRelationNetworks
func (mr *MockRelationNetworksSourceMockRecorder) AllRelationNetworks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRelationNetworks", reflect.TypeOf((*MockRelationNetworksSource)(nil).AllRelationNetworks))
}

// MockRelationNetworksModel is a mock of RelationNetworksModel interface
type MockRelationNetworksModel struct {
	ctrl     *gomock.Controller
	recorder *MockRelationNetworksModelMockRecorder
}

// MockRelationNetworksModelMockRecorder is the mock recorder for MockRelationNetworksModel
type MockRelationNetworksModelMockRecorder struct {
	mock *MockRelationNetworksModel
}

// NewMockRelationNetworksModel creates a new mock instance
func NewMockRelationNetworksModel(ctrl *gomock.Controller) *MockRelationNetworksModel {
	mock := &MockRelationNetworksModel{ctrl: ctrl}
	mock.recorder = &MockRelationNetworksModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRelationNetworksModel) EXPECT() *MockRelationNetworksModelMockRecorder {
	return m.recorder
}

// AddRelationNetwork mocks base method
func (m *MockRelationNetworksModel) AddRelationNetwork(arg0 description.RelationNetworkArgs) description.RelationNetwork {
	ret := m.ctrl.Call(m, "AddRelationNetwork", arg0)
	ret0, _ := ret[0].(description.RelationNetwork)
	return ret0
}

// AddRelationNetwork indicates an expected call of AddRelationNetwork
func (mr *MockRelationNetworksModelMockRecorder) AddRelationNetwork(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationNetwork", reflect.TypeOf((*MockRelationNetworksModel)(nil).AddRelationNetwork), arg0)
}

// MockRemoteApplicationSource is a mock of RemoteApplicationSource interface
type MockRemoteApplicationSource struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationSourceMockRecorder
}

// MockRemoteApplicationSourceMockRecorder is the mock recorder for MockRemoteApplicationSource
type MockRemoteApplicationSourceMockRecorder struct {
	mock *MockRemoteApplicationSource
}

// NewMockRemoteApplicationSource creates a new mock instance
func NewMockRemoteApplicationSource(ctrl *gomock.Controller) *MockRemoteApplicationSource {
	mock := &MockRemoteApplicationSource{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteApplicationSource) EXPECT() *MockRemoteApplicationSourceMockRecorder {
	return m.recorder
}

// AllRemoteApplications mocks base method
func (m *MockRemoteApplicationSource) AllRemoteApplications() ([]*RemoteApplication, error) {
	ret := m.ctrl.Call(m, "AllRemoteApplications")
	ret0, _ := ret[0].([]*RemoteApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRemoteApplications indicates an expected call of AllRemoteApplications
func (mr *MockRemoteApplicationSourceMockRecorder) AllRemoteApplications() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRemoteApplications", reflect.TypeOf((*MockRemoteApplicationSource)(nil).AllRemoteApplications))
}

// MockRemoteApplicationModel is a mock of RemoteApplicationModel interface
type MockRemoteApplicationModel struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationModelMockRecorder
}

// MockRemoteApplicationModelMockRecorder is the mock recorder for MockRemoteApplicationModel
type MockRemoteApplicationModelMockRecorder struct {
	mock *MockRemoteApplicationModel
}

// NewMockRemoteApplicationModel creates a new mock instance
func NewMockRemoteApplicationModel(ctrl *gomock.Controller) *MockRemoteApplicationModel {
	mock := &MockRemoteApplicationModel{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteApplicationModel) EXPECT() *MockRemoteApplicationModelMockRecorder {
	return m.recorder
}

// AddRemoteApplication mocks base method
func (m *MockRemoteApplicationModel) AddRemoteApplication(arg0 description.RemoteApplicationArgs) description.RemoteApplication {
	ret := m.ctrl.Call(m, "AddRemoteApplication", arg0)
	ret0, _ := ret[0].(description.RemoteApplication)
	return ret0
}

// AddRemoteApplication indicates an expected call of AddRemoteApplication
func (mr *MockRemoteApplicationModelMockRecorder) AddRemoteApplication(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplication", reflect.TypeOf((*MockRemoteApplicationModel)(nil).AddRemoteApplication), arg0)
}
