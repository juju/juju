// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: CloudAccessor)

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	cloud "github.com/juju/juju/cloud"
	state "github.com/juju/juju/state"
	names_v2 "gopkg.in/juju/names.v2"
	reflect "reflect"
)

// MockCloudAccessor is a mock of CloudAccessor interface
type MockCloudAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccessorMockRecorder
}

// MockCloudAccessorMockRecorder is the mock recorder for MockCloudAccessor
type MockCloudAccessorMockRecorder struct {
	mock *MockCloudAccessor
}

// NewMockCloudAccessor creates a new mock instance
func NewMockCloudAccessor(ctrl *gomock.Controller) *MockCloudAccessor {
	mock := &MockCloudAccessor{ctrl: ctrl}
	mock.recorder = &MockCloudAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudAccessor) EXPECT() *MockCloudAccessorMockRecorder {
	return m.recorder
}

// Cloud mocks base method
func (m *MockCloudAccessor) Cloud(arg0 string) (cloud.Cloud, error) {
	ret := m.ctrl.Call(m, "Cloud", arg0)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud
func (mr *MockCloudAccessorMockRecorder) Cloud(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockCloudAccessor)(nil).Cloud), arg0)
}

// CloudCredential mocks base method
func (m *MockCloudAccessor) CloudCredential(arg0 names_v2.CloudCredentialTag) (state.Credential, error) {
	ret := m.ctrl.Call(m, "CloudCredential", arg0)
	ret0, _ := ret[0].(state.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredential indicates an expected call of CloudCredential
func (mr *MockCloudAccessorMockRecorder) CloudCredential(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredential", reflect.TypeOf((*MockCloudAccessor)(nil).CloudCredential), arg0)
}

// Clouds mocks base method
func (m *MockCloudAccessor) Clouds() (map[names_v2.CloudTag]cloud.Cloud, error) {
	ret := m.ctrl.Call(m, "Clouds")
	ret0, _ := ret[0].(map[names_v2.CloudTag]cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clouds indicates an expected call of Clouds
func (mr *MockCloudAccessorMockRecorder) Clouds() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clouds", reflect.TypeOf((*MockCloudAccessor)(nil).Clouds))
}
