// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/containeragent/utils (interfaces: Environment)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/environment_mock.go github.com/juju/juju/cmd/containeragent/utils Environment
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEnvironment is a mock of Environment interface.
type MockEnvironment struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentMockRecorder
}

// MockEnvironmentMockRecorder is the mock recorder for MockEnvironment.
type MockEnvironmentMockRecorder struct {
	mock *MockEnvironment
}

// NewMockEnvironment creates a new mock instance.
func NewMockEnvironment(ctrl *gomock.Controller) *MockEnvironment {
	mock := &MockEnvironment{ctrl: ctrl}
	mock.recorder = &MockEnvironmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironment) EXPECT() *MockEnvironmentMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnvironment) ISGOMOCK() struct{} {
	return struct{}{}
}

// ExpandEnv mocks base method.
func (m *MockEnvironment) ExpandEnv(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandEnv", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExpandEnv indicates an expected call of ExpandEnv.
func (mr *MockEnvironmentMockRecorder) ExpandEnv(arg0 any) *MockEnvironmentExpandEnvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandEnv", reflect.TypeOf((*MockEnvironment)(nil).ExpandEnv), arg0)
	return &MockEnvironmentExpandEnvCall{Call: call}
}

// MockEnvironmentExpandEnvCall wrap *gomock.Call
type MockEnvironmentExpandEnvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentExpandEnvCall) Return(arg0 string) *MockEnvironmentExpandEnvCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentExpandEnvCall) Do(f func(string) string) *MockEnvironmentExpandEnvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentExpandEnvCall) DoAndReturn(f func(string) string) *MockEnvironmentExpandEnvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Getenv mocks base method.
func (m *MockEnvironment) Getenv(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv.
func (mr *MockEnvironmentMockRecorder) Getenv(arg0 any) *MockEnvironmentGetenvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockEnvironment)(nil).Getenv), arg0)
	return &MockEnvironmentGetenvCall{Call: call}
}

// MockEnvironmentGetenvCall wrap *gomock.Call
type MockEnvironmentGetenvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentGetenvCall) Return(arg0 string) *MockEnvironmentGetenvCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentGetenvCall) Do(f func(string) string) *MockEnvironmentGetenvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentGetenvCall) DoAndReturn(f func(string) string) *MockEnvironmentGetenvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Setenv mocks base method.
func (m *MockEnvironment) Setenv(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setenv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setenv indicates an expected call of Setenv.
func (mr *MockEnvironmentMockRecorder) Setenv(arg0, arg1 any) *MockEnvironmentSetenvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setenv", reflect.TypeOf((*MockEnvironment)(nil).Setenv), arg0, arg1)
	return &MockEnvironmentSetenvCall{Call: call}
}

// MockEnvironmentSetenvCall wrap *gomock.Call
type MockEnvironmentSetenvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentSetenvCall) Return(arg0 error) *MockEnvironmentSetenvCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentSetenvCall) Do(f func(string, string) error) *MockEnvironmentSetenvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentSetenvCall) DoAndReturn(f func(string, string) error) *MockEnvironmentSetenvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unsetenv mocks base method.
func (m *MockEnvironment) Unsetenv(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsetenv", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsetenv indicates an expected call of Unsetenv.
func (mr *MockEnvironmentMockRecorder) Unsetenv(arg0 any) *MockEnvironmentUnsetenvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsetenv", reflect.TypeOf((*MockEnvironment)(nil).Unsetenv), arg0)
	return &MockEnvironmentUnsetenvCall{Call: call}
}

// MockEnvironmentUnsetenvCall wrap *gomock.Call
type MockEnvironmentUnsetenvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentUnsetenvCall) Return(arg0 error) *MockEnvironmentUnsetenvCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentUnsetenvCall) Do(f func(string) error) *MockEnvironmentUnsetenvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentUnsetenvCall) DoAndReturn(f func(string) error) *MockEnvironmentUnsetenvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
