// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/containeragent/initialize (interfaces: ApplicationAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/application_mock.go github.com/juju/juju/cmd/containeragent/initialize ApplicationAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	caasapplication "github.com/juju/juju/api/agent/caasapplication"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationAPI is a mock of ApplicationAPI interface.
type MockApplicationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationAPIMockRecorder
}

// MockApplicationAPIMockRecorder is the mock recorder for MockApplicationAPI.
type MockApplicationAPIMockRecorder struct {
	mock *MockApplicationAPI
}

// NewMockApplicationAPI creates a new mock instance.
func NewMockApplicationAPI(ctrl *gomock.Controller) *MockApplicationAPI {
	mock := &MockApplicationAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationAPI) EXPECT() *MockApplicationAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplicationAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockApplicationAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockApplicationAPIMockRecorder) Close() *MockApplicationAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockApplicationAPI)(nil).Close))
	return &MockApplicationAPICloseCall{Call: call}
}

// MockApplicationAPICloseCall wrap *gomock.Call
type MockApplicationAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPICloseCall) Return(arg0 error) *MockApplicationAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPICloseCall) Do(f func() error) *MockApplicationAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPICloseCall) DoAndReturn(f func() error) *MockApplicationAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitIntroduction mocks base method.
func (m *MockApplicationAPI) UnitIntroduction(arg0 context.Context, arg1, arg2 string) (*caasapplication.UnitConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitIntroduction", arg0, arg1, arg2)
	ret0, _ := ret[0].(*caasapplication.UnitConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitIntroduction indicates an expected call of UnitIntroduction.
func (mr *MockApplicationAPIMockRecorder) UnitIntroduction(arg0, arg1, arg2 any) *MockApplicationAPIUnitIntroductionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitIntroduction", reflect.TypeOf((*MockApplicationAPI)(nil).UnitIntroduction), arg0, arg1, arg2)
	return &MockApplicationAPIUnitIntroductionCall{Call: call}
}

// MockApplicationAPIUnitIntroductionCall wrap *gomock.Call
type MockApplicationAPIUnitIntroductionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIUnitIntroductionCall) Return(arg0 *caasapplication.UnitConfig, arg1 error) *MockApplicationAPIUnitIntroductionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIUnitIntroductionCall) Do(f func(context.Context, string, string) (*caasapplication.UnitConfig, error)) *MockApplicationAPIUnitIntroductionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIUnitIntroductionCall) DoAndReturn(f func(context.Context, string, string) (*caasapplication.UnitConfig, error)) *MockApplicationAPIUnitIntroductionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
