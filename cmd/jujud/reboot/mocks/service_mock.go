// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/jujud/reboot (interfaces: AgentConfig,Manager,Model,RebootWaiter,Service)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/service_mock.go github.com/juju/juju/cmd/jujud/reboot AgentConfig,Manager,Model,RebootWaiter,Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	reboot "github.com/juju/juju/cmd/jujud/reboot"
	instance "github.com/juju/juju/core/instance"
	instances "github.com/juju/juju/environs/instances"
	container "github.com/juju/juju/internal/container"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentConfig is a mock of AgentConfig interface.
type MockAgentConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAgentConfigMockRecorder
}

// MockAgentConfigMockRecorder is the mock recorder for MockAgentConfig.
type MockAgentConfigMockRecorder struct {
	mock *MockAgentConfig
}

// NewMockAgentConfig creates a new mock instance.
func NewMockAgentConfig(ctrl *gomock.Controller) *MockAgentConfig {
	mock := &MockAgentConfig{ctrl: ctrl}
	mock.recorder = &MockAgentConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentConfig) EXPECT() *MockAgentConfigMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAgentConfig) ISGOMOCK() struct{} {
	return struct{}{}
}

// Model mocks base method.
func (m *MockAgentConfig) Model() reboot.Model {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(reboot.Model)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockAgentConfigMockRecorder) Model() *MockAgentConfigModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockAgentConfig)(nil).Model))
	return &MockAgentConfigModelCall{Call: call}
}

// MockAgentConfigModelCall wrap *gomock.Call
type MockAgentConfigModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentConfigModelCall) Return(arg0 reboot.Model) *MockAgentConfigModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentConfigModelCall) Do(f func() reboot.Model) *MockAgentConfigModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentConfigModelCall) DoAndReturn(f func() reboot.Model) *MockAgentConfigModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockManager) ISGOMOCK() struct{} {
	return struct{}{}
}

// IsInitialized mocks base method.
func (m *MockManager) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockManagerMockRecorder) IsInitialized() *MockManagerIsInitializedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockManager)(nil).IsInitialized))
	return &MockManagerIsInitializedCall{Call: call}
}

// MockManagerIsInitializedCall wrap *gomock.Call
type MockManagerIsInitializedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerIsInitializedCall) Return(arg0 bool) *MockManagerIsInitializedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerIsInitializedCall) Do(f func() bool) *MockManagerIsInitializedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerIsInitializedCall) DoAndReturn(f func() bool) *MockManagerIsInitializedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListContainers mocks base method.
func (m *MockManager) ListContainers() ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers")
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockManagerMockRecorder) ListContainers() *MockManagerListContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockManager)(nil).ListContainers))
	return &MockManagerListContainersCall{Call: call}
}

// MockManagerListContainersCall wrap *gomock.Call
type MockManagerListContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerListContainersCall) Return(arg0 []instances.Instance, arg1 error) *MockManagerListContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerListContainersCall) Do(f func() ([]instances.Instance, error)) *MockManagerListContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerListContainersCall) DoAndReturn(f func() ([]instances.Instance, error)) *MockManagerListContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModel) ISGOMOCK() struct{} {
	return struct{}{}
}

// Id mocks base method.
func (m *MockModel) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockModelMockRecorder) Id() *MockModelIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockModel)(nil).Id))
	return &MockModelIdCall{Call: call}
}

// MockModelIdCall wrap *gomock.Call
type MockModelIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelIdCall) Return(arg0 string) *MockModelIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelIdCall) Do(f func() string) *MockModelIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelIdCall) DoAndReturn(f func() string) *MockModelIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRebootWaiter is a mock of RebootWaiter interface.
type MockRebootWaiter struct {
	ctrl     *gomock.Controller
	recorder *MockRebootWaiterMockRecorder
}

// MockRebootWaiterMockRecorder is the mock recorder for MockRebootWaiter.
type MockRebootWaiterMockRecorder struct {
	mock *MockRebootWaiter
}

// NewMockRebootWaiter creates a new mock instance.
func NewMockRebootWaiter(ctrl *gomock.Controller) *MockRebootWaiter {
	mock := &MockRebootWaiter{ctrl: ctrl}
	mock.recorder = &MockRebootWaiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRebootWaiter) EXPECT() *MockRebootWaiterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRebootWaiter) ISGOMOCK() struct{} {
	return struct{}{}
}

// ListServices mocks base method.
func (m *MockRebootWaiter) ListServices() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockRebootWaiterMockRecorder) ListServices() *MockRebootWaiterListServicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockRebootWaiter)(nil).ListServices))
	return &MockRebootWaiterListServicesCall{Call: call}
}

// MockRebootWaiterListServicesCall wrap *gomock.Call
type MockRebootWaiterListServicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRebootWaiterListServicesCall) Return(arg0 []string, arg1 error) *MockRebootWaiterListServicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRebootWaiterListServicesCall) Do(f func() ([]string, error)) *MockRebootWaiterListServicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRebootWaiterListServicesCall) DoAndReturn(f func() ([]string, error)) *MockRebootWaiterListServicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewContainerManager mocks base method.
func (m *MockRebootWaiter) NewContainerManager(arg0 instance.ContainerType, arg1 container.ManagerConfig) (reboot.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContainerManager", arg0, arg1)
	ret0, _ := ret[0].(reboot.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContainerManager indicates an expected call of NewContainerManager.
func (mr *MockRebootWaiterMockRecorder) NewContainerManager(arg0, arg1 any) *MockRebootWaiterNewContainerManagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainerManager", reflect.TypeOf((*MockRebootWaiter)(nil).NewContainerManager), arg0, arg1)
	return &MockRebootWaiterNewContainerManagerCall{Call: call}
}

// MockRebootWaiterNewContainerManagerCall wrap *gomock.Call
type MockRebootWaiterNewContainerManagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRebootWaiterNewContainerManagerCall) Return(arg0 reboot.Manager, arg1 error) *MockRebootWaiterNewContainerManagerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRebootWaiterNewContainerManagerCall) Do(f func(instance.ContainerType, container.ManagerConfig) (reboot.Manager, error)) *MockRebootWaiterNewContainerManagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRebootWaiterNewContainerManagerCall) DoAndReturn(f func(instance.ContainerType, container.ManagerConfig) (reboot.Manager, error)) *MockRebootWaiterNewContainerManagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewServiceReference mocks base method.
func (m *MockRebootWaiter) NewServiceReference(arg0 string) (reboot.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewServiceReference", arg0)
	ret0, _ := ret[0].(reboot.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewServiceReference indicates an expected call of NewServiceReference.
func (mr *MockRebootWaiterMockRecorder) NewServiceReference(arg0 any) *MockRebootWaiterNewServiceReferenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewServiceReference", reflect.TypeOf((*MockRebootWaiter)(nil).NewServiceReference), arg0)
	return &MockRebootWaiterNewServiceReferenceCall{Call: call}
}

// MockRebootWaiterNewServiceReferenceCall wrap *gomock.Call
type MockRebootWaiterNewServiceReferenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRebootWaiterNewServiceReferenceCall) Return(arg0 reboot.Service, arg1 error) *MockRebootWaiterNewServiceReferenceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRebootWaiterNewServiceReferenceCall) Do(f func(string) (reboot.Service, error)) *MockRebootWaiterNewServiceReferenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRebootWaiterNewServiceReferenceCall) DoAndReturn(f func(string) (reboot.Service, error)) *MockRebootWaiterNewServiceReferenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleAction mocks base method.
func (m *MockRebootWaiter) ScheduleAction(arg0 params.RebootAction, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleAction indicates an expected call of ScheduleAction.
func (mr *MockRebootWaiterMockRecorder) ScheduleAction(arg0, arg1 any) *MockRebootWaiterScheduleActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleAction", reflect.TypeOf((*MockRebootWaiter)(nil).ScheduleAction), arg0, arg1)
	return &MockRebootWaiterScheduleActionCall{Call: call}
}

// MockRebootWaiterScheduleActionCall wrap *gomock.Call
type MockRebootWaiterScheduleActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRebootWaiterScheduleActionCall) Return(arg0 error) *MockRebootWaiterScheduleActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRebootWaiterScheduleActionCall) Do(f func(params.RebootAction, int) error) *MockRebootWaiterScheduleActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRebootWaiterScheduleActionCall) DoAndReturn(f func(params.RebootAction, int) error) *MockRebootWaiterScheduleActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Stop mocks base method.
func (m *MockService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop() *MockServiceStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop))
	return &MockServiceStopCall{Call: call}
}

// MockServiceStopCall wrap *gomock.Call
type MockServiceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceStopCall) Return(arg0 error) *MockServiceStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceStopCall) Do(f func() error) *MockServiceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceStopCall) DoAndReturn(f func() error) *MockServiceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
