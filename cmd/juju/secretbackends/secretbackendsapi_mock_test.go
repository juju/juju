// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/secretbackends (interfaces: ListSecretBackendsAPI,AddSecretBackendsAPI,RemoveSecretBackendsAPI,UpdateSecretBackendsAPI,ModelSecretBackendAPI)
//
// Generated by this command:
//
//	mockgen -typed -package secretbackends -destination secretbackendsapi_mock_test.go github.com/juju/juju/cmd/juju/secretbackends ListSecretBackendsAPI,AddSecretBackendsAPI,RemoveSecretBackendsAPI,UpdateSecretBackendsAPI,ModelSecretBackendAPI
//

// Package secretbackends is a generated GoMock package.
package secretbackends

import (
	context "context"
	reflect "reflect"

	secretbackends "github.com/juju/juju/api/client/secretbackends"
	gomock "go.uber.org/mock/gomock"
)

// MockListSecretBackendsAPI is a mock of ListSecretBackendsAPI interface.
type MockListSecretBackendsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockListSecretBackendsAPIMockRecorder
}

// MockListSecretBackendsAPIMockRecorder is the mock recorder for MockListSecretBackendsAPI.
type MockListSecretBackendsAPIMockRecorder struct {
	mock *MockListSecretBackendsAPI
}

// NewMockListSecretBackendsAPI creates a new mock instance.
func NewMockListSecretBackendsAPI(ctrl *gomock.Controller) *MockListSecretBackendsAPI {
	mock := &MockListSecretBackendsAPI{ctrl: ctrl}
	mock.recorder = &MockListSecretBackendsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListSecretBackendsAPI) EXPECT() *MockListSecretBackendsAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockListSecretBackendsAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockListSecretBackendsAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockListSecretBackendsAPIMockRecorder) Close() *MockListSecretBackendsAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockListSecretBackendsAPI)(nil).Close))
	return &MockListSecretBackendsAPICloseCall{Call: call}
}

// MockListSecretBackendsAPICloseCall wrap *gomock.Call
type MockListSecretBackendsAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListSecretBackendsAPICloseCall) Return(arg0 error) *MockListSecretBackendsAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListSecretBackendsAPICloseCall) Do(f func() error) *MockListSecretBackendsAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListSecretBackendsAPICloseCall) DoAndReturn(f func() error) *MockListSecretBackendsAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecretBackends mocks base method.
func (m *MockListSecretBackendsAPI) ListSecretBackends(arg0 context.Context, arg1 []string, arg2 bool) ([]secretbackends.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretBackends", arg0, arg1, arg2)
	ret0, _ := ret[0].([]secretbackends.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretBackends indicates an expected call of ListSecretBackends.
func (mr *MockListSecretBackendsAPIMockRecorder) ListSecretBackends(arg0, arg1, arg2 any) *MockListSecretBackendsAPIListSecretBackendsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretBackends", reflect.TypeOf((*MockListSecretBackendsAPI)(nil).ListSecretBackends), arg0, arg1, arg2)
	return &MockListSecretBackendsAPIListSecretBackendsCall{Call: call}
}

// MockListSecretBackendsAPIListSecretBackendsCall wrap *gomock.Call
type MockListSecretBackendsAPIListSecretBackendsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListSecretBackendsAPIListSecretBackendsCall) Return(arg0 []secretbackends.SecretBackend, arg1 error) *MockListSecretBackendsAPIListSecretBackendsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListSecretBackendsAPIListSecretBackendsCall) Do(f func(context.Context, []string, bool) ([]secretbackends.SecretBackend, error)) *MockListSecretBackendsAPIListSecretBackendsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListSecretBackendsAPIListSecretBackendsCall) DoAndReturn(f func(context.Context, []string, bool) ([]secretbackends.SecretBackend, error)) *MockListSecretBackendsAPIListSecretBackendsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAddSecretBackendsAPI is a mock of AddSecretBackendsAPI interface.
type MockAddSecretBackendsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAddSecretBackendsAPIMockRecorder
}

// MockAddSecretBackendsAPIMockRecorder is the mock recorder for MockAddSecretBackendsAPI.
type MockAddSecretBackendsAPIMockRecorder struct {
	mock *MockAddSecretBackendsAPI
}

// NewMockAddSecretBackendsAPI creates a new mock instance.
func NewMockAddSecretBackendsAPI(ctrl *gomock.Controller) *MockAddSecretBackendsAPI {
	mock := &MockAddSecretBackendsAPI{ctrl: ctrl}
	mock.recorder = &MockAddSecretBackendsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddSecretBackendsAPI) EXPECT() *MockAddSecretBackendsAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAddSecretBackendsAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddSecretBackend mocks base method.
func (m *MockAddSecretBackendsAPI) AddSecretBackend(arg0 context.Context, arg1 secretbackends.CreateSecretBackend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecretBackend indicates an expected call of AddSecretBackend.
func (mr *MockAddSecretBackendsAPIMockRecorder) AddSecretBackend(arg0, arg1 any) *MockAddSecretBackendsAPIAddSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretBackend", reflect.TypeOf((*MockAddSecretBackendsAPI)(nil).AddSecretBackend), arg0, arg1)
	return &MockAddSecretBackendsAPIAddSecretBackendCall{Call: call}
}

// MockAddSecretBackendsAPIAddSecretBackendCall wrap *gomock.Call
type MockAddSecretBackendsAPIAddSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddSecretBackendsAPIAddSecretBackendCall) Return(arg0 error) *MockAddSecretBackendsAPIAddSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddSecretBackendsAPIAddSecretBackendCall) Do(f func(context.Context, secretbackends.CreateSecretBackend) error) *MockAddSecretBackendsAPIAddSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddSecretBackendsAPIAddSecretBackendCall) DoAndReturn(f func(context.Context, secretbackends.CreateSecretBackend) error) *MockAddSecretBackendsAPIAddSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockAddSecretBackendsAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAddSecretBackendsAPIMockRecorder) Close() *MockAddSecretBackendsAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAddSecretBackendsAPI)(nil).Close))
	return &MockAddSecretBackendsAPICloseCall{Call: call}
}

// MockAddSecretBackendsAPICloseCall wrap *gomock.Call
type MockAddSecretBackendsAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddSecretBackendsAPICloseCall) Return(arg0 error) *MockAddSecretBackendsAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddSecretBackendsAPICloseCall) Do(f func() error) *MockAddSecretBackendsAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddSecretBackendsAPICloseCall) DoAndReturn(f func() error) *MockAddSecretBackendsAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoveSecretBackendsAPI is a mock of RemoveSecretBackendsAPI interface.
type MockRemoveSecretBackendsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRemoveSecretBackendsAPIMockRecorder
}

// MockRemoveSecretBackendsAPIMockRecorder is the mock recorder for MockRemoveSecretBackendsAPI.
type MockRemoveSecretBackendsAPIMockRecorder struct {
	mock *MockRemoveSecretBackendsAPI
}

// NewMockRemoveSecretBackendsAPI creates a new mock instance.
func NewMockRemoveSecretBackendsAPI(ctrl *gomock.Controller) *MockRemoveSecretBackendsAPI {
	mock := &MockRemoveSecretBackendsAPI{ctrl: ctrl}
	mock.recorder = &MockRemoveSecretBackendsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoveSecretBackendsAPI) EXPECT() *MockRemoveSecretBackendsAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRemoveSecretBackendsAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockRemoveSecretBackendsAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRemoveSecretBackendsAPIMockRecorder) Close() *MockRemoveSecretBackendsAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRemoveSecretBackendsAPI)(nil).Close))
	return &MockRemoveSecretBackendsAPICloseCall{Call: call}
}

// MockRemoveSecretBackendsAPICloseCall wrap *gomock.Call
type MockRemoveSecretBackendsAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveSecretBackendsAPICloseCall) Return(arg0 error) *MockRemoveSecretBackendsAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveSecretBackendsAPICloseCall) Do(f func() error) *MockRemoveSecretBackendsAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveSecretBackendsAPICloseCall) DoAndReturn(f func() error) *MockRemoveSecretBackendsAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSecretBackend mocks base method.
func (m *MockRemoveSecretBackendsAPI) RemoveSecretBackend(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSecretBackend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecretBackend indicates an expected call of RemoveSecretBackend.
func (mr *MockRemoveSecretBackendsAPIMockRecorder) RemoveSecretBackend(arg0, arg1, arg2 any) *MockRemoveSecretBackendsAPIRemoveSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecretBackend", reflect.TypeOf((*MockRemoveSecretBackendsAPI)(nil).RemoveSecretBackend), arg0, arg1, arg2)
	return &MockRemoveSecretBackendsAPIRemoveSecretBackendCall{Call: call}
}

// MockRemoveSecretBackendsAPIRemoveSecretBackendCall wrap *gomock.Call
type MockRemoveSecretBackendsAPIRemoveSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveSecretBackendsAPIRemoveSecretBackendCall) Return(arg0 error) *MockRemoveSecretBackendsAPIRemoveSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveSecretBackendsAPIRemoveSecretBackendCall) Do(f func(context.Context, string, bool) error) *MockRemoveSecretBackendsAPIRemoveSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveSecretBackendsAPIRemoveSecretBackendCall) DoAndReturn(f func(context.Context, string, bool) error) *MockRemoveSecretBackendsAPIRemoveSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpdateSecretBackendsAPI is a mock of UpdateSecretBackendsAPI interface.
type MockUpdateSecretBackendsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateSecretBackendsAPIMockRecorder
}

// MockUpdateSecretBackendsAPIMockRecorder is the mock recorder for MockUpdateSecretBackendsAPI.
type MockUpdateSecretBackendsAPIMockRecorder struct {
	mock *MockUpdateSecretBackendsAPI
}

// NewMockUpdateSecretBackendsAPI creates a new mock instance.
func NewMockUpdateSecretBackendsAPI(ctrl *gomock.Controller) *MockUpdateSecretBackendsAPI {
	mock := &MockUpdateSecretBackendsAPI{ctrl: ctrl}
	mock.recorder = &MockUpdateSecretBackendsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateSecretBackendsAPI) EXPECT() *MockUpdateSecretBackendsAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUpdateSecretBackendsAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockUpdateSecretBackendsAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUpdateSecretBackendsAPIMockRecorder) Close() *MockUpdateSecretBackendsAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUpdateSecretBackendsAPI)(nil).Close))
	return &MockUpdateSecretBackendsAPICloseCall{Call: call}
}

// MockUpdateSecretBackendsAPICloseCall wrap *gomock.Call
type MockUpdateSecretBackendsAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpdateSecretBackendsAPICloseCall) Return(arg0 error) *MockUpdateSecretBackendsAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpdateSecretBackendsAPICloseCall) Do(f func() error) *MockUpdateSecretBackendsAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpdateSecretBackendsAPICloseCall) DoAndReturn(f func() error) *MockUpdateSecretBackendsAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecretBackend mocks base method.
func (m *MockUpdateSecretBackendsAPI) UpdateSecretBackend(arg0 context.Context, arg1 secretbackends.UpdateSecretBackend, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretBackend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecretBackend indicates an expected call of UpdateSecretBackend.
func (mr *MockUpdateSecretBackendsAPIMockRecorder) UpdateSecretBackend(arg0, arg1, arg2 any) *MockUpdateSecretBackendsAPIUpdateSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretBackend", reflect.TypeOf((*MockUpdateSecretBackendsAPI)(nil).UpdateSecretBackend), arg0, arg1, arg2)
	return &MockUpdateSecretBackendsAPIUpdateSecretBackendCall{Call: call}
}

// MockUpdateSecretBackendsAPIUpdateSecretBackendCall wrap *gomock.Call
type MockUpdateSecretBackendsAPIUpdateSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpdateSecretBackendsAPIUpdateSecretBackendCall) Return(arg0 error) *MockUpdateSecretBackendsAPIUpdateSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpdateSecretBackendsAPIUpdateSecretBackendCall) Do(f func(context.Context, secretbackends.UpdateSecretBackend, bool) error) *MockUpdateSecretBackendsAPIUpdateSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpdateSecretBackendsAPIUpdateSecretBackendCall) DoAndReturn(f func(context.Context, secretbackends.UpdateSecretBackend, bool) error) *MockUpdateSecretBackendsAPIUpdateSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelSecretBackendAPI is a mock of ModelSecretBackendAPI interface.
type MockModelSecretBackendAPI struct {
	ctrl     *gomock.Controller
	recorder *MockModelSecretBackendAPIMockRecorder
}

// MockModelSecretBackendAPIMockRecorder is the mock recorder for MockModelSecretBackendAPI.
type MockModelSecretBackendAPIMockRecorder struct {
	mock *MockModelSecretBackendAPI
}

// NewMockModelSecretBackendAPI creates a new mock instance.
func NewMockModelSecretBackendAPI(ctrl *gomock.Controller) *MockModelSecretBackendAPI {
	mock := &MockModelSecretBackendAPI{ctrl: ctrl}
	mock.recorder = &MockModelSecretBackendAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelSecretBackendAPI) EXPECT() *MockModelSecretBackendAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelSecretBackendAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockModelSecretBackendAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModelSecretBackendAPIMockRecorder) Close() *MockModelSecretBackendAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelSecretBackendAPI)(nil).Close))
	return &MockModelSecretBackendAPICloseCall{Call: call}
}

// MockModelSecretBackendAPICloseCall wrap *gomock.Call
type MockModelSecretBackendAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSecretBackendAPICloseCall) Return(arg0 error) *MockModelSecretBackendAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSecretBackendAPICloseCall) Do(f func() error) *MockModelSecretBackendAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSecretBackendAPICloseCall) DoAndReturn(f func() error) *MockModelSecretBackendAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelSecretBackend mocks base method.
func (m *MockModelSecretBackendAPI) GetModelSecretBackend(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSecretBackend", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSecretBackend indicates an expected call of GetModelSecretBackend.
func (mr *MockModelSecretBackendAPIMockRecorder) GetModelSecretBackend(arg0 any) *MockModelSecretBackendAPIGetModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSecretBackend", reflect.TypeOf((*MockModelSecretBackendAPI)(nil).GetModelSecretBackend), arg0)
	return &MockModelSecretBackendAPIGetModelSecretBackendCall{Call: call}
}

// MockModelSecretBackendAPIGetModelSecretBackendCall wrap *gomock.Call
type MockModelSecretBackendAPIGetModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSecretBackendAPIGetModelSecretBackendCall) Return(arg0 string, arg1 error) *MockModelSecretBackendAPIGetModelSecretBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSecretBackendAPIGetModelSecretBackendCall) Do(f func(context.Context) (string, error)) *MockModelSecretBackendAPIGetModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSecretBackendAPIGetModelSecretBackendCall) DoAndReturn(f func(context.Context) (string, error)) *MockModelSecretBackendAPIGetModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelSecretBackend mocks base method.
func (m *MockModelSecretBackendAPI) SetModelSecretBackend(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelSecretBackend indicates an expected call of SetModelSecretBackend.
func (mr *MockModelSecretBackendAPIMockRecorder) SetModelSecretBackend(arg0, arg1 any) *MockModelSecretBackendAPISetModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelSecretBackend", reflect.TypeOf((*MockModelSecretBackendAPI)(nil).SetModelSecretBackend), arg0, arg1)
	return &MockModelSecretBackendAPISetModelSecretBackendCall{Call: call}
}

// MockModelSecretBackendAPISetModelSecretBackendCall wrap *gomock.Call
type MockModelSecretBackendAPISetModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSecretBackendAPISetModelSecretBackendCall) Return(arg0 error) *MockModelSecretBackendAPISetModelSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSecretBackendAPISetModelSecretBackendCall) Do(f func(context.Context, string) error) *MockModelSecretBackendAPISetModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSecretBackendAPISetModelSecretBackendCall) DoAndReturn(f func(context.Context, string) error) *MockModelSecretBackendAPISetModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
