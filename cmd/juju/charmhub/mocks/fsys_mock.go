// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/modelcmd (interfaces: Filesystem,ReadSeekCloser)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ./mocks/fsys_mock.go github.com/juju/juju/cmd/modelcmd Filesystem,ReadSeekCloser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	fs "io/fs"
	os "os"
	reflect "reflect"

	modelcmd "github.com/juju/juju/cmd/modelcmd"
	gomock "go.uber.org/mock/gomock"
)

// MockFilesystem is a mock of Filesystem interface.
type MockFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemMockRecorder
}

// MockFilesystemMockRecorder is the mock recorder for MockFilesystem.
type MockFilesystemMockRecorder struct {
	mock *MockFilesystem
}

// NewMockFilesystem creates a new mock instance.
func NewMockFilesystem(ctrl *gomock.Controller) *MockFilesystem {
	mock := &MockFilesystem{ctrl: ctrl}
	mock.recorder = &MockFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystem) EXPECT() *MockFilesystemMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFilesystem) ISGOMOCK() struct{} {
	return struct{}{}
}

// Create mocks base method.
func (m *MockFilesystem) Create(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFilesystemMockRecorder) Create(arg0 any) *MockFilesystemCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFilesystem)(nil).Create), arg0)
	return &MockFilesystemCreateCall{Call: call}
}

// MockFilesystemCreateCall wrap *gomock.Call
type MockFilesystemCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemCreateCall) Return(arg0 *os.File, arg1 error) *MockFilesystemCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemCreateCall) Do(f func(string) (*os.File, error)) *MockFilesystemCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemCreateCall) DoAndReturn(f func(string) (*os.File, error)) *MockFilesystemCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockFilesystem) Open(arg0 string) (modelcmd.ReadSeekCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(modelcmd.ReadSeekCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFilesystemMockRecorder) Open(arg0 any) *MockFilesystemOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFilesystem)(nil).Open), arg0)
	return &MockFilesystemOpenCall{Call: call}
}

// MockFilesystemOpenCall wrap *gomock.Call
type MockFilesystemOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemOpenCall) Return(arg0 modelcmd.ReadSeekCloser, arg1 error) *MockFilesystemOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemOpenCall) Do(f func(string) (modelcmd.ReadSeekCloser, error)) *MockFilesystemOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemOpenCall) DoAndReturn(f func(string) (modelcmd.ReadSeekCloser, error)) *MockFilesystemOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenFile mocks base method.
func (m *MockFilesystem) OpenFile(arg0 string, arg1 int, arg2 fs.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFilesystemMockRecorder) OpenFile(arg0, arg1, arg2 any) *MockFilesystemOpenFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFilesystem)(nil).OpenFile), arg0, arg1, arg2)
	return &MockFilesystemOpenFileCall{Call: call}
}

// MockFilesystemOpenFileCall wrap *gomock.Call
type MockFilesystemOpenFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemOpenFileCall) Return(arg0 *os.File, arg1 error) *MockFilesystemOpenFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemOpenFileCall) Do(f func(string, int, fs.FileMode) (*os.File, error)) *MockFilesystemOpenFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemOpenFileCall) DoAndReturn(f func(string, int, fs.FileMode) (*os.File, error)) *MockFilesystemOpenFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAll mocks base method.
func (m *MockFilesystem) RemoveAll(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFilesystemMockRecorder) RemoveAll(arg0 any) *MockFilesystemRemoveAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFilesystem)(nil).RemoveAll), arg0)
	return &MockFilesystemRemoveAllCall{Call: call}
}

// MockFilesystemRemoveAllCall wrap *gomock.Call
type MockFilesystemRemoveAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemRemoveAllCall) Return(arg0 error) *MockFilesystemRemoveAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemRemoveAllCall) Do(f func(string) error) *MockFilesystemRemoveAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemRemoveAllCall) DoAndReturn(f func(string) error) *MockFilesystemRemoveAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stat mocks base method.
func (m *MockFilesystem) Stat(arg0 string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFilesystemMockRecorder) Stat(arg0 any) *MockFilesystemStatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFilesystem)(nil).Stat), arg0)
	return &MockFilesystemStatCall{Call: call}
}

// MockFilesystemStatCall wrap *gomock.Call
type MockFilesystemStatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilesystemStatCall) Return(arg0 fs.FileInfo, arg1 error) *MockFilesystemStatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilesystemStatCall) Do(f func(string) (fs.FileInfo, error)) *MockFilesystemStatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilesystemStatCall) DoAndReturn(f func(string) (fs.FileInfo, error)) *MockFilesystemStatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadSeekCloser is a mock of ReadSeekCloser interface.
type MockReadSeekCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadSeekCloserMockRecorder
}

// MockReadSeekCloserMockRecorder is the mock recorder for MockReadSeekCloser.
type MockReadSeekCloserMockRecorder struct {
	mock *MockReadSeekCloser
}

// NewMockReadSeekCloser creates a new mock instance.
func NewMockReadSeekCloser(ctrl *gomock.Controller) *MockReadSeekCloser {
	mock := &MockReadSeekCloser{ctrl: ctrl}
	mock.recorder = &MockReadSeekCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadSeekCloser) EXPECT() *MockReadSeekCloserMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockReadSeekCloser) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockReadSeekCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadSeekCloserMockRecorder) Close() *MockReadSeekCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadSeekCloser)(nil).Close))
	return &MockReadSeekCloserCloseCall{Call: call}
}

// MockReadSeekCloserCloseCall wrap *gomock.Call
type MockReadSeekCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekCloserCloseCall) Return(arg0 error) *MockReadSeekCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekCloserCloseCall) Do(f func() error) *MockReadSeekCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekCloserCloseCall) DoAndReturn(f func() error) *MockReadSeekCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockReadSeekCloser) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadSeekCloserMockRecorder) Read(arg0 any) *MockReadSeekCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadSeekCloser)(nil).Read), arg0)
	return &MockReadSeekCloserReadCall{Call: call}
}

// MockReadSeekCloserReadCall wrap *gomock.Call
type MockReadSeekCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekCloserReadCall) Return(arg0 int, arg1 error) *MockReadSeekCloserReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekCloserReadCall) Do(f func([]byte) (int, error)) *MockReadSeekCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReadSeekCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockReadSeekCloser) Seek(arg0 int64, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockReadSeekCloserMockRecorder) Seek(arg0, arg1 any) *MockReadSeekCloserSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockReadSeekCloser)(nil).Seek), arg0, arg1)
	return &MockReadSeekCloserSeekCall{Call: call}
}

// MockReadSeekCloserSeekCall wrap *gomock.Call
type MockReadSeekCloserSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekCloserSeekCall) Return(arg0 int64, arg1 error) *MockReadSeekCloserSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekCloserSeekCall) Do(f func(int64, int) (int64, error)) *MockReadSeekCloserSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekCloserSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockReadSeekCloserSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
