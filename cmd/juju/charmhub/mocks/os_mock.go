// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/charmhub (interfaces: OSEnviron)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ./mocks/os_mock.go github.com/juju/juju/cmd/juju/charmhub OSEnviron
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOSEnviron is a mock of OSEnviron interface.
type MockOSEnviron struct {
	ctrl     *gomock.Controller
	recorder *MockOSEnvironMockRecorder
}

// MockOSEnvironMockRecorder is the mock recorder for MockOSEnviron.
type MockOSEnvironMockRecorder struct {
	mock *MockOSEnviron
}

// NewMockOSEnviron creates a new mock instance.
func NewMockOSEnviron(ctrl *gomock.Controller) *MockOSEnviron {
	mock := &MockOSEnviron{ctrl: ctrl}
	mock.recorder = &MockOSEnvironMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSEnviron) EXPECT() *MockOSEnvironMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOSEnviron) ISGOMOCK() struct{} {
	return struct{}{}
}

// Getenv mocks base method.
func (m *MockOSEnviron) Getenv(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv.
func (mr *MockOSEnvironMockRecorder) Getenv(arg0 any) *MockOSEnvironGetenvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockOSEnviron)(nil).Getenv), arg0)
	return &MockOSEnvironGetenvCall{Call: call}
}

// MockOSEnvironGetenvCall wrap *gomock.Call
type MockOSEnvironGetenvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOSEnvironGetenvCall) Return(arg0 string) *MockOSEnvironGetenvCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOSEnvironGetenvCall) Do(f func(string) string) *MockOSEnvironGetenvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOSEnvironGetenvCall) DoAndReturn(f func(string) string) *MockOSEnvironGetenvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsTerminal mocks base method.
func (m *MockOSEnviron) IsTerminal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTerminal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTerminal indicates an expected call of IsTerminal.
func (mr *MockOSEnvironMockRecorder) IsTerminal() *MockOSEnvironIsTerminalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTerminal", reflect.TypeOf((*MockOSEnviron)(nil).IsTerminal))
	return &MockOSEnvironIsTerminalCall{Call: call}
}

// MockOSEnvironIsTerminalCall wrap *gomock.Call
type MockOSEnvironIsTerminalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOSEnvironIsTerminalCall) Return(arg0 bool) *MockOSEnvironIsTerminalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOSEnvironIsTerminalCall) Do(f func() bool) *MockOSEnvironIsTerminalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOSEnvironIsTerminalCall) DoAndReturn(f func() bool) *MockOSEnvironIsTerminalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
