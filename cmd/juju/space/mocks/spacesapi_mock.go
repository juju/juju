// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/space (interfaces: SpaceAPI,SubnetAPI,API)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/spacesapi_mock.go github.com/juju/juju/cmd/juju/space SpaceAPI,SubnetAPI,API
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockSpaceAPI is a mock of SpaceAPI interface.
type MockSpaceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceAPIMockRecorder
}

// MockSpaceAPIMockRecorder is the mock recorder for MockSpaceAPI.
type MockSpaceAPIMockRecorder struct {
	mock *MockSpaceAPI
}

// NewMockSpaceAPI creates a new mock instance.
func NewMockSpaceAPI(ctrl *gomock.Controller) *MockSpaceAPI {
	mock := &MockSpaceAPI{ctrl: ctrl}
	mock.recorder = &MockSpaceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceAPI) EXPECT() *MockSpaceAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSpaceAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddSpace mocks base method.
func (m *MockSpaceAPI) AddSpace(arg0 context.Context, arg1 string, arg2 []string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockSpaceAPIMockRecorder) AddSpace(arg0, arg1, arg2, arg3 any) *MockSpaceAPIAddSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockSpaceAPI)(nil).AddSpace), arg0, arg1, arg2, arg3)
	return &MockSpaceAPIAddSpaceCall{Call: call}
}

// MockSpaceAPIAddSpaceCall wrap *gomock.Call
type MockSpaceAPIAddSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpaceAPIAddSpaceCall) Return(arg0 error) *MockSpaceAPIAddSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpaceAPIAddSpaceCall) Do(f func(context.Context, string, []string, bool) error) *MockSpaceAPIAddSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpaceAPIAddSpaceCall) DoAndReturn(f func(context.Context, string, []string, bool) error) *MockSpaceAPIAddSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSpaces mocks base method.
func (m *MockSpaceAPI) ListSpaces(arg0 context.Context) ([]params.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpaces", arg0)
	ret0, _ := ret[0].([]params.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpaces indicates an expected call of ListSpaces.
func (mr *MockSpaceAPIMockRecorder) ListSpaces(arg0 any) *MockSpaceAPIListSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpaces", reflect.TypeOf((*MockSpaceAPI)(nil).ListSpaces), arg0)
	return &MockSpaceAPIListSpacesCall{Call: call}
}

// MockSpaceAPIListSpacesCall wrap *gomock.Call
type MockSpaceAPIListSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpaceAPIListSpacesCall) Return(arg0 []params.Space, arg1 error) *MockSpaceAPIListSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpaceAPIListSpacesCall) Do(f func(context.Context) ([]params.Space, error)) *MockSpaceAPIListSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpaceAPIListSpacesCall) DoAndReturn(f func(context.Context) ([]params.Space, error)) *MockSpaceAPIListSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveSubnets mocks base method.
func (m *MockSpaceAPI) MoveSubnets(arg0 context.Context, arg1 names.SpaceTag, arg2 []names.SubnetTag, arg3 bool) (params.MoveSubnetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveSubnets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(params.MoveSubnetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveSubnets indicates an expected call of MoveSubnets.
func (mr *MockSpaceAPIMockRecorder) MoveSubnets(arg0, arg1, arg2, arg3 any) *MockSpaceAPIMoveSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveSubnets", reflect.TypeOf((*MockSpaceAPI)(nil).MoveSubnets), arg0, arg1, arg2, arg3)
	return &MockSpaceAPIMoveSubnetsCall{Call: call}
}

// MockSpaceAPIMoveSubnetsCall wrap *gomock.Call
type MockSpaceAPIMoveSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpaceAPIMoveSubnetsCall) Return(arg0 params.MoveSubnetsResult, arg1 error) *MockSpaceAPIMoveSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpaceAPIMoveSubnetsCall) Do(f func(context.Context, names.SpaceTag, []names.SubnetTag, bool) (params.MoveSubnetsResult, error)) *MockSpaceAPIMoveSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpaceAPIMoveSubnetsCall) DoAndReturn(f func(context.Context, names.SpaceTag, []names.SubnetTag, bool) (params.MoveSubnetsResult, error)) *MockSpaceAPIMoveSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReloadSpaces mocks base method.
func (m *MockSpaceAPI) ReloadSpaces(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockSpaceAPIMockRecorder) ReloadSpaces(arg0 any) *MockSpaceAPIReloadSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockSpaceAPI)(nil).ReloadSpaces), arg0)
	return &MockSpaceAPIReloadSpacesCall{Call: call}
}

// MockSpaceAPIReloadSpacesCall wrap *gomock.Call
type MockSpaceAPIReloadSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpaceAPIReloadSpacesCall) Return(arg0 error) *MockSpaceAPIReloadSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpaceAPIReloadSpacesCall) Do(f func(context.Context) error) *MockSpaceAPIReloadSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpaceAPIReloadSpacesCall) DoAndReturn(f func(context.Context) error) *MockSpaceAPIReloadSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSpace mocks base method.
func (m *MockSpaceAPI) RemoveSpace(arg0 context.Context, arg1 string, arg2, arg3 bool) (params.RemoveSpaceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(params.RemoveSpaceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSpace indicates an expected call of RemoveSpace.
func (mr *MockSpaceAPIMockRecorder) RemoveSpace(arg0, arg1, arg2, arg3 any) *MockSpaceAPIRemoveSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpace", reflect.TypeOf((*MockSpaceAPI)(nil).RemoveSpace), arg0, arg1, arg2, arg3)
	return &MockSpaceAPIRemoveSpaceCall{Call: call}
}

// MockSpaceAPIRemoveSpaceCall wrap *gomock.Call
type MockSpaceAPIRemoveSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpaceAPIRemoveSpaceCall) Return(arg0 params.RemoveSpaceResult, arg1 error) *MockSpaceAPIRemoveSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpaceAPIRemoveSpaceCall) Do(f func(context.Context, string, bool, bool) (params.RemoveSpaceResult, error)) *MockSpaceAPIRemoveSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpaceAPIRemoveSpaceCall) DoAndReturn(f func(context.Context, string, bool, bool) (params.RemoveSpaceResult, error)) *MockSpaceAPIRemoveSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameSpace mocks base method.
func (m *MockSpaceAPI) RenameSpace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameSpace indicates an expected call of RenameSpace.
func (mr *MockSpaceAPIMockRecorder) RenameSpace(arg0, arg1, arg2 any) *MockSpaceAPIRenameSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSpace", reflect.TypeOf((*MockSpaceAPI)(nil).RenameSpace), arg0, arg1, arg2)
	return &MockSpaceAPIRenameSpaceCall{Call: call}
}

// MockSpaceAPIRenameSpaceCall wrap *gomock.Call
type MockSpaceAPIRenameSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpaceAPIRenameSpaceCall) Return(arg0 error) *MockSpaceAPIRenameSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpaceAPIRenameSpaceCall) Do(f func(context.Context, string, string) error) *MockSpaceAPIRenameSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpaceAPIRenameSpaceCall) DoAndReturn(f func(context.Context, string, string) error) *MockSpaceAPIRenameSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowSpace mocks base method.
func (m *MockSpaceAPI) ShowSpace(arg0 context.Context, arg1 string) (params.ShowSpaceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowSpace", arg0, arg1)
	ret0, _ := ret[0].(params.ShowSpaceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowSpace indicates an expected call of ShowSpace.
func (mr *MockSpaceAPIMockRecorder) ShowSpace(arg0, arg1 any) *MockSpaceAPIShowSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSpace", reflect.TypeOf((*MockSpaceAPI)(nil).ShowSpace), arg0, arg1)
	return &MockSpaceAPIShowSpaceCall{Call: call}
}

// MockSpaceAPIShowSpaceCall wrap *gomock.Call
type MockSpaceAPIShowSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpaceAPIShowSpaceCall) Return(arg0 params.ShowSpaceResult, arg1 error) *MockSpaceAPIShowSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpaceAPIShowSpaceCall) Do(f func(context.Context, string) (params.ShowSpaceResult, error)) *MockSpaceAPIShowSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpaceAPIShowSpaceCall) DoAndReturn(f func(context.Context, string) (params.ShowSpaceResult, error)) *MockSpaceAPIShowSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSubnetAPI is a mock of SubnetAPI interface.
type MockSubnetAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetAPIMockRecorder
}

// MockSubnetAPIMockRecorder is the mock recorder for MockSubnetAPI.
type MockSubnetAPIMockRecorder struct {
	mock *MockSubnetAPI
}

// NewMockSubnetAPI creates a new mock instance.
func NewMockSubnetAPI(ctrl *gomock.Controller) *MockSubnetAPI {
	mock := &MockSubnetAPI{ctrl: ctrl}
	mock.recorder = &MockSubnetAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetAPI) EXPECT() *MockSubnetAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSubnetAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// SubnetsByCIDR mocks base method.
func (m *MockSubnetAPI) SubnetsByCIDR(arg0 context.Context, arg1 []string) ([]params.SubnetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetsByCIDR", arg0, arg1)
	ret0, _ := ret[0].([]params.SubnetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetsByCIDR indicates an expected call of SubnetsByCIDR.
func (mr *MockSubnetAPIMockRecorder) SubnetsByCIDR(arg0, arg1 any) *MockSubnetAPISubnetsByCIDRCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetsByCIDR", reflect.TypeOf((*MockSubnetAPI)(nil).SubnetsByCIDR), arg0, arg1)
	return &MockSubnetAPISubnetsByCIDRCall{Call: call}
}

// MockSubnetAPISubnetsByCIDRCall wrap *gomock.Call
type MockSubnetAPISubnetsByCIDRCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubnetAPISubnetsByCIDRCall) Return(arg0 []params.SubnetsResult, arg1 error) *MockSubnetAPISubnetsByCIDRCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubnetAPISubnetsByCIDRCall) Do(f func(context.Context, []string) ([]params.SubnetsResult, error)) *MockSubnetAPISubnetsByCIDRCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubnetAPISubnetsByCIDRCall) DoAndReturn(f func(context.Context, []string) ([]params.SubnetsResult, error)) *MockSubnetAPISubnetsByCIDRCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddSpace mocks base method.
func (m *MockAPI) AddSpace(arg0 context.Context, arg1 string, arg2 []string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockAPIMockRecorder) AddSpace(arg0, arg1, arg2, arg3 any) *MockAPIAddSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockAPI)(nil).AddSpace), arg0, arg1, arg2, arg3)
	return &MockAPIAddSpaceCall{Call: call}
}

// MockAPIAddSpaceCall wrap *gomock.Call
type MockAPIAddSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddSpaceCall) Return(arg0 error) *MockAPIAddSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddSpaceCall) Do(f func(context.Context, string, []string, bool) error) *MockAPIAddSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddSpaceCall) DoAndReturn(f func(context.Context, string, []string, bool) error) *MockAPIAddSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAPIMockRecorder) Close() *MockAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAPI)(nil).Close))
	return &MockAPICloseCall{Call: call}
}

// MockAPICloseCall wrap *gomock.Call
type MockAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPICloseCall) Return(arg0 error) *MockAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPICloseCall) Do(f func() error) *MockAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPICloseCall) DoAndReturn(f func() error) *MockAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSpaces mocks base method.
func (m *MockAPI) ListSpaces(arg0 context.Context) ([]params.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpaces", arg0)
	ret0, _ := ret[0].([]params.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpaces indicates an expected call of ListSpaces.
func (mr *MockAPIMockRecorder) ListSpaces(arg0 any) *MockAPIListSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpaces", reflect.TypeOf((*MockAPI)(nil).ListSpaces), arg0)
	return &MockAPIListSpacesCall{Call: call}
}

// MockAPIListSpacesCall wrap *gomock.Call
type MockAPIListSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIListSpacesCall) Return(arg0 []params.Space, arg1 error) *MockAPIListSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIListSpacesCall) Do(f func(context.Context) ([]params.Space, error)) *MockAPIListSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIListSpacesCall) DoAndReturn(f func(context.Context) ([]params.Space, error)) *MockAPIListSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveSubnets mocks base method.
func (m *MockAPI) MoveSubnets(arg0 context.Context, arg1 names.SpaceTag, arg2 []names.SubnetTag, arg3 bool) (params.MoveSubnetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveSubnets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(params.MoveSubnetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveSubnets indicates an expected call of MoveSubnets.
func (mr *MockAPIMockRecorder) MoveSubnets(arg0, arg1, arg2, arg3 any) *MockAPIMoveSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveSubnets", reflect.TypeOf((*MockAPI)(nil).MoveSubnets), arg0, arg1, arg2, arg3)
	return &MockAPIMoveSubnetsCall{Call: call}
}

// MockAPIMoveSubnetsCall wrap *gomock.Call
type MockAPIMoveSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIMoveSubnetsCall) Return(arg0 params.MoveSubnetsResult, arg1 error) *MockAPIMoveSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIMoveSubnetsCall) Do(f func(context.Context, names.SpaceTag, []names.SubnetTag, bool) (params.MoveSubnetsResult, error)) *MockAPIMoveSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIMoveSubnetsCall) DoAndReturn(f func(context.Context, names.SpaceTag, []names.SubnetTag, bool) (params.MoveSubnetsResult, error)) *MockAPIMoveSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReloadSpaces mocks base method.
func (m *MockAPI) ReloadSpaces(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockAPIMockRecorder) ReloadSpaces(arg0 any) *MockAPIReloadSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockAPI)(nil).ReloadSpaces), arg0)
	return &MockAPIReloadSpacesCall{Call: call}
}

// MockAPIReloadSpacesCall wrap *gomock.Call
type MockAPIReloadSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIReloadSpacesCall) Return(arg0 error) *MockAPIReloadSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIReloadSpacesCall) Do(f func(context.Context) error) *MockAPIReloadSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIReloadSpacesCall) DoAndReturn(f func(context.Context) error) *MockAPIReloadSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSpace mocks base method.
func (m *MockAPI) RemoveSpace(arg0 context.Context, arg1 string, arg2, arg3 bool) (params.RemoveSpaceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(params.RemoveSpaceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSpace indicates an expected call of RemoveSpace.
func (mr *MockAPIMockRecorder) RemoveSpace(arg0, arg1, arg2, arg3 any) *MockAPIRemoveSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpace", reflect.TypeOf((*MockAPI)(nil).RemoveSpace), arg0, arg1, arg2, arg3)
	return &MockAPIRemoveSpaceCall{Call: call}
}

// MockAPIRemoveSpaceCall wrap *gomock.Call
type MockAPIRemoveSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIRemoveSpaceCall) Return(arg0 params.RemoveSpaceResult, arg1 error) *MockAPIRemoveSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIRemoveSpaceCall) Do(f func(context.Context, string, bool, bool) (params.RemoveSpaceResult, error)) *MockAPIRemoveSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIRemoveSpaceCall) DoAndReturn(f func(context.Context, string, bool, bool) (params.RemoveSpaceResult, error)) *MockAPIRemoveSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameSpace mocks base method.
func (m *MockAPI) RenameSpace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameSpace indicates an expected call of RenameSpace.
func (mr *MockAPIMockRecorder) RenameSpace(arg0, arg1, arg2 any) *MockAPIRenameSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSpace", reflect.TypeOf((*MockAPI)(nil).RenameSpace), arg0, arg1, arg2)
	return &MockAPIRenameSpaceCall{Call: call}
}

// MockAPIRenameSpaceCall wrap *gomock.Call
type MockAPIRenameSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIRenameSpaceCall) Return(arg0 error) *MockAPIRenameSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIRenameSpaceCall) Do(f func(context.Context, string, string) error) *MockAPIRenameSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIRenameSpaceCall) DoAndReturn(f func(context.Context, string, string) error) *MockAPIRenameSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowSpace mocks base method.
func (m *MockAPI) ShowSpace(arg0 context.Context, arg1 string) (params.ShowSpaceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowSpace", arg0, arg1)
	ret0, _ := ret[0].(params.ShowSpaceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowSpace indicates an expected call of ShowSpace.
func (mr *MockAPIMockRecorder) ShowSpace(arg0, arg1 any) *MockAPIShowSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSpace", reflect.TypeOf((*MockAPI)(nil).ShowSpace), arg0, arg1)
	return &MockAPIShowSpaceCall{Call: call}
}

// MockAPIShowSpaceCall wrap *gomock.Call
type MockAPIShowSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIShowSpaceCall) Return(arg0 params.ShowSpaceResult, arg1 error) *MockAPIShowSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIShowSpaceCall) Do(f func(context.Context, string) (params.ShowSpaceResult, error)) *MockAPIShowSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIShowSpaceCall) DoAndReturn(f func(context.Context, string) (params.ShowSpaceResult, error)) *MockAPIShowSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubnetsByCIDR mocks base method.
func (m *MockAPI) SubnetsByCIDR(arg0 context.Context, arg1 []string) ([]params.SubnetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetsByCIDR", arg0, arg1)
	ret0, _ := ret[0].([]params.SubnetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetsByCIDR indicates an expected call of SubnetsByCIDR.
func (mr *MockAPIMockRecorder) SubnetsByCIDR(arg0, arg1 any) *MockAPISubnetsByCIDRCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetsByCIDR", reflect.TypeOf((*MockAPI)(nil).SubnetsByCIDR), arg0, arg1)
	return &MockAPISubnetsByCIDRCall{Call: call}
}

// MockAPISubnetsByCIDRCall wrap *gomock.Call
type MockAPISubnetsByCIDRCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPISubnetsByCIDRCall) Return(arg0 []params.SubnetsResult, arg1 error) *MockAPISubnetsByCIDRCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPISubnetsByCIDRCall) Do(f func(context.Context, []string) ([]params.SubnetsResult, error)) *MockAPISubnetsByCIDRCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPISubnetsByCIDRCall) DoAndReturn(f func(context.Context, []string) ([]params.SubnetsResult, error)) *MockAPISubnetsByCIDRCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
