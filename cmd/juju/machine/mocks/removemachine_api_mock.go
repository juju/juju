// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/machine (interfaces: RemoveMachineAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/removemachine_api_mock.go github.com/juju/juju/cmd/juju/machine RemoveMachineAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockRemoveMachineAPI is a mock of RemoveMachineAPI interface.
type MockRemoveMachineAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRemoveMachineAPIMockRecorder
}

// MockRemoveMachineAPIMockRecorder is the mock recorder for MockRemoveMachineAPI.
type MockRemoveMachineAPIMockRecorder struct {
	mock *MockRemoveMachineAPI
}

// NewMockRemoveMachineAPI creates a new mock instance.
func NewMockRemoveMachineAPI(ctrl *gomock.Controller) *MockRemoveMachineAPI {
	mock := &MockRemoveMachineAPI{ctrl: ctrl}
	mock.recorder = &MockRemoveMachineAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoveMachineAPI) EXPECT() *MockRemoveMachineAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRemoveMachineAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// BestAPIVersion mocks base method.
func (m *MockRemoveMachineAPI) BestAPIVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestAPIVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// BestAPIVersion indicates an expected call of BestAPIVersion.
func (mr *MockRemoveMachineAPIMockRecorder) BestAPIVersion() *MockRemoveMachineAPIBestAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestAPIVersion", reflect.TypeOf((*MockRemoveMachineAPI)(nil).BestAPIVersion))
	return &MockRemoveMachineAPIBestAPIVersionCall{Call: call}
}

// MockRemoveMachineAPIBestAPIVersionCall wrap *gomock.Call
type MockRemoveMachineAPIBestAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveMachineAPIBestAPIVersionCall) Return(arg0 int) *MockRemoveMachineAPIBestAPIVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveMachineAPIBestAPIVersionCall) Do(f func() int) *MockRemoveMachineAPIBestAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveMachineAPIBestAPIVersionCall) DoAndReturn(f func() int) *MockRemoveMachineAPIBestAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockRemoveMachineAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRemoveMachineAPIMockRecorder) Close() *MockRemoveMachineAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRemoveMachineAPI)(nil).Close))
	return &MockRemoveMachineAPICloseCall{Call: call}
}

// MockRemoveMachineAPICloseCall wrap *gomock.Call
type MockRemoveMachineAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveMachineAPICloseCall) Return(arg0 error) *MockRemoveMachineAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveMachineAPICloseCall) Do(f func() error) *MockRemoveMachineAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveMachineAPICloseCall) DoAndReturn(f func() error) *MockRemoveMachineAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyMachinesWithParams mocks base method.
func (m *MockRemoveMachineAPI) DestroyMachinesWithParams(arg0 context.Context, arg1, arg2, arg3 bool, arg4 *time.Duration, arg5 ...string) ([]params.DestroyMachineResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DestroyMachinesWithParams", varargs...)
	ret0, _ := ret[0].([]params.DestroyMachineResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyMachinesWithParams indicates an expected call of DestroyMachinesWithParams.
func (mr *MockRemoveMachineAPIMockRecorder) DestroyMachinesWithParams(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockRemoveMachineAPIDestroyMachinesWithParamsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyMachinesWithParams", reflect.TypeOf((*MockRemoveMachineAPI)(nil).DestroyMachinesWithParams), varargs...)
	return &MockRemoveMachineAPIDestroyMachinesWithParamsCall{Call: call}
}

// MockRemoveMachineAPIDestroyMachinesWithParamsCall wrap *gomock.Call
type MockRemoveMachineAPIDestroyMachinesWithParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveMachineAPIDestroyMachinesWithParamsCall) Return(arg0 []params.DestroyMachineResult, arg1 error) *MockRemoveMachineAPIDestroyMachinesWithParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveMachineAPIDestroyMachinesWithParamsCall) Do(f func(context.Context, bool, bool, bool, *time.Duration, ...string) ([]params.DestroyMachineResult, error)) *MockRemoveMachineAPIDestroyMachinesWithParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveMachineAPIDestroyMachinesWithParamsCall) DoAndReturn(f func(context.Context, bool, bool, bool, *time.Duration, ...string) ([]params.DestroyMachineResult, error)) *MockRemoveMachineAPIDestroyMachinesWithParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
