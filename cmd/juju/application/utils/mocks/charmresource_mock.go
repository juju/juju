// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application/utils (interfaces: CharmClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/charmresource_mock.go github.com/juju/juju/cmd/juju/application/utils CharmClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	charm "github.com/juju/juju/api/common/charm"
	charms "github.com/juju/juju/api/common/charms"
	resource "github.com/juju/juju/internal/charm/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmClient is a mock of CharmClient interface.
type MockCharmClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharmClientMockRecorder
}

// MockCharmClientMockRecorder is the mock recorder for MockCharmClient.
type MockCharmClientMockRecorder struct {
	mock *MockCharmClient
}

// NewMockCharmClient creates a new mock instance.
func NewMockCharmClient(ctrl *gomock.Controller) *MockCharmClient {
	mock := &MockCharmClient{ctrl: ctrl}
	mock.recorder = &MockCharmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmClient) EXPECT() *MockCharmClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// CharmInfo mocks base method.
func (m *MockCharmClient) CharmInfo(arg0 context.Context, arg1 string) (*charms.CharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmInfo", arg0, arg1)
	ret0, _ := ret[0].(*charms.CharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmInfo indicates an expected call of CharmInfo.
func (mr *MockCharmClientMockRecorder) CharmInfo(arg0, arg1 any) *MockCharmClientCharmInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmInfo", reflect.TypeOf((*MockCharmClient)(nil).CharmInfo), arg0, arg1)
	return &MockCharmClientCharmInfoCall{Call: call}
}

// MockCharmClientCharmInfoCall wrap *gomock.Call
type MockCharmClientCharmInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmClientCharmInfoCall) Return(arg0 *charms.CharmInfo, arg1 error) *MockCharmClientCharmInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmClientCharmInfoCall) Do(f func(context.Context, string) (*charms.CharmInfo, error)) *MockCharmClientCharmInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmClientCharmInfoCall) DoAndReturn(f func(context.Context, string) (*charms.CharmInfo, error)) *MockCharmClientCharmInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCharmResources mocks base method.
func (m *MockCharmClient) ListCharmResources(arg0 context.Context, arg1 string, arg2 charm.Origin) ([]resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharmResources", arg0, arg1, arg2)
	ret0, _ := ret[0].([]resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharmResources indicates an expected call of ListCharmResources.
func (mr *MockCharmClientMockRecorder) ListCharmResources(arg0, arg1, arg2 any) *MockCharmClientListCharmResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmResources", reflect.TypeOf((*MockCharmClient)(nil).ListCharmResources), arg0, arg1, arg2)
	return &MockCharmClientListCharmResourcesCall{Call: call}
}

// MockCharmClientListCharmResourcesCall wrap *gomock.Call
type MockCharmClientListCharmResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmClientListCharmResourcesCall) Return(arg0 []resource.Resource, arg1 error) *MockCharmClientListCharmResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmClientListCharmResourcesCall) Do(f func(context.Context, string, charm.Origin) ([]resource.Resource, error)) *MockCharmClientListCharmResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmClientListCharmResourcesCall) DoAndReturn(f func(context.Context, string, charm.Origin) ([]resource.Resource, error)) *MockCharmClientListCharmResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
