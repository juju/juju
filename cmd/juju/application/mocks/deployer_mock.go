// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application/deployer (interfaces: Deployer,DeployerFactory)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/deployer_mock.go github.com/juju/juju/cmd/juju/application/deployer Deployer,DeployerFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	deployer "github.com/juju/juju/cmd/juju/application/deployer"
	cmd "github.com/juju/juju/internal/cmd"
	gomock "go.uber.org/mock/gomock"
)

// MockDeployer is a mock of Deployer interface.
type MockDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockDeployerMockRecorder
}

// MockDeployerMockRecorder is the mock recorder for MockDeployer.
type MockDeployerMockRecorder struct {
	mock *MockDeployer
}

// NewMockDeployer creates a new mock instance.
func NewMockDeployer(ctrl *gomock.Controller) *MockDeployer {
	mock := &MockDeployer{ctrl: ctrl}
	mock.recorder = &MockDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployer) EXPECT() *MockDeployerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDeployer) ISGOMOCK() struct{} {
	return struct{}{}
}

// PrepareAndDeploy mocks base method.
func (m *MockDeployer) PrepareAndDeploy(arg0 *cmd.Context, arg1 deployer.DeployerAPI, arg2 deployer.Resolver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareAndDeploy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareAndDeploy indicates an expected call of PrepareAndDeploy.
func (mr *MockDeployerMockRecorder) PrepareAndDeploy(arg0, arg1, arg2 any) *MockDeployerPrepareAndDeployCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAndDeploy", reflect.TypeOf((*MockDeployer)(nil).PrepareAndDeploy), arg0, arg1, arg2)
	return &MockDeployerPrepareAndDeployCall{Call: call}
}

// MockDeployerPrepareAndDeployCall wrap *gomock.Call
type MockDeployerPrepareAndDeployCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerPrepareAndDeployCall) Return(arg0 error) *MockDeployerPrepareAndDeployCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerPrepareAndDeployCall) Do(f func(*cmd.Context, deployer.DeployerAPI, deployer.Resolver) error) *MockDeployerPrepareAndDeployCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerPrepareAndDeployCall) DoAndReturn(f func(*cmd.Context, deployer.DeployerAPI, deployer.Resolver) error) *MockDeployerPrepareAndDeployCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockDeployer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDeployerMockRecorder) String() *MockDeployerStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDeployer)(nil).String))
	return &MockDeployerStringCall{Call: call}
}

// MockDeployerStringCall wrap *gomock.Call
type MockDeployerStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerStringCall) Return(arg0 string) *MockDeployerStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerStringCall) Do(f func() string) *MockDeployerStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerStringCall) DoAndReturn(f func() string) *MockDeployerStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDeployerFactory is a mock of DeployerFactory interface.
type MockDeployerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDeployerFactoryMockRecorder
}

// MockDeployerFactoryMockRecorder is the mock recorder for MockDeployerFactory.
type MockDeployerFactoryMockRecorder struct {
	mock *MockDeployerFactory
}

// NewMockDeployerFactory creates a new mock instance.
func NewMockDeployerFactory(ctrl *gomock.Controller) *MockDeployerFactory {
	mock := &MockDeployerFactory{ctrl: ctrl}
	mock.recorder = &MockDeployerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployerFactory) EXPECT() *MockDeployerFactoryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDeployerFactory) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetDeployer mocks base method.
func (m *MockDeployerFactory) GetDeployer(arg0 context.Context, arg1 deployer.DeployerConfig, arg2 deployer.CharmDeployAPI, arg3 deployer.Resolver) (deployer.Deployer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(deployer.Deployer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployer indicates an expected call of GetDeployer.
func (mr *MockDeployerFactoryMockRecorder) GetDeployer(arg0, arg1, arg2, arg3 any) *MockDeployerFactoryGetDeployerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployer", reflect.TypeOf((*MockDeployerFactory)(nil).GetDeployer), arg0, arg1, arg2, arg3)
	return &MockDeployerFactoryGetDeployerCall{Call: call}
}

// MockDeployerFactoryGetDeployerCall wrap *gomock.Call
type MockDeployerFactoryGetDeployerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerFactoryGetDeployerCall) Return(arg0 deployer.Deployer, arg1 error) *MockDeployerFactoryGetDeployerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerFactoryGetDeployerCall) Do(f func(context.Context, deployer.DeployerConfig, deployer.CharmDeployAPI, deployer.Resolver) (deployer.Deployer, error)) *MockDeployerFactoryGetDeployerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerFactoryGetDeployerCall) DoAndReturn(f func(context.Context, deployer.DeployerConfig, deployer.CharmDeployAPI, deployer.Resolver) (deployer.Deployer, error)) *MockDeployerFactoryGetDeployerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
