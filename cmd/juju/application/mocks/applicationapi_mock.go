// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application (interfaces: ApplicationAPI,RemoveApplicationAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/applicationapi_mock.go github.com/juju/juju/cmd/juju/application ApplicationAPI,RemoveApplicationAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/api/client/application"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationAPI is a mock of ApplicationAPI interface.
type MockApplicationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationAPIMockRecorder
}

// MockApplicationAPIMockRecorder is the mock recorder for MockApplicationAPI.
type MockApplicationAPIMockRecorder struct {
	mock *MockApplicationAPI
}

// NewMockApplicationAPI creates a new mock instance.
func NewMockApplicationAPI(ctrl *gomock.Controller) *MockApplicationAPI {
	mock := &MockApplicationAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationAPI) EXPECT() *MockApplicationAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplicationAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockApplicationAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockApplicationAPIMockRecorder) Close() *MockApplicationAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockApplicationAPI)(nil).Close))
	return &MockApplicationAPICloseCall{Call: call}
}

// MockApplicationAPICloseCall wrap *gomock.Call
type MockApplicationAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPICloseCall) Return(arg0 error) *MockApplicationAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPICloseCall) Do(f func() error) *MockApplicationAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPICloseCall) DoAndReturn(f func() error) *MockApplicationAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockApplicationAPI) Get(arg0 context.Context, arg1 string) (*params.ApplicationGetResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*params.ApplicationGetResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockApplicationAPIMockRecorder) Get(arg0, arg1 any) *MockApplicationAPIGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationAPI)(nil).Get), arg0, arg1)
	return &MockApplicationAPIGetCall{Call: call}
}

// MockApplicationAPIGetCall wrap *gomock.Call
type MockApplicationAPIGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIGetCall) Return(arg0 *params.ApplicationGetResults, arg1 error) *MockApplicationAPIGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIGetCall) Do(f func(context.Context, string) (*params.ApplicationGetResults, error)) *MockApplicationAPIGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIGetCall) DoAndReturn(f func(context.Context, string) (*params.ApplicationGetResults, error)) *MockApplicationAPIGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockApplicationAPI) SetConfig(arg0 context.Context, arg1, arg2 string, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockApplicationAPIMockRecorder) SetConfig(arg0, arg1, arg2, arg3 any) *MockApplicationAPISetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockApplicationAPI)(nil).SetConfig), arg0, arg1, arg2, arg3)
	return &MockApplicationAPISetConfigCall{Call: call}
}

// MockApplicationAPISetConfigCall wrap *gomock.Call
type MockApplicationAPISetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPISetConfigCall) Return(arg0 error) *MockApplicationAPISetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPISetConfigCall) Do(f func(context.Context, string, string, map[string]string) error) *MockApplicationAPISetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPISetConfigCall) DoAndReturn(f func(context.Context, string, string, map[string]string) error) *MockApplicationAPISetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnsetApplicationConfig mocks base method.
func (m *MockApplicationAPI) UnsetApplicationConfig(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetApplicationConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetApplicationConfig indicates an expected call of UnsetApplicationConfig.
func (mr *MockApplicationAPIMockRecorder) UnsetApplicationConfig(arg0, arg1, arg2 any) *MockApplicationAPIUnsetApplicationConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetApplicationConfig", reflect.TypeOf((*MockApplicationAPI)(nil).UnsetApplicationConfig), arg0, arg1, arg2)
	return &MockApplicationAPIUnsetApplicationConfigCall{Call: call}
}

// MockApplicationAPIUnsetApplicationConfigCall wrap *gomock.Call
type MockApplicationAPIUnsetApplicationConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIUnsetApplicationConfigCall) Return(arg0 error) *MockApplicationAPIUnsetApplicationConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIUnsetApplicationConfigCall) Do(f func(context.Context, string, []string) error) *MockApplicationAPIUnsetApplicationConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIUnsetApplicationConfigCall) DoAndReturn(f func(context.Context, string, []string) error) *MockApplicationAPIUnsetApplicationConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoveApplicationAPI is a mock of RemoveApplicationAPI interface.
type MockRemoveApplicationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRemoveApplicationAPIMockRecorder
}

// MockRemoveApplicationAPIMockRecorder is the mock recorder for MockRemoveApplicationAPI.
type MockRemoveApplicationAPIMockRecorder struct {
	mock *MockRemoveApplicationAPI
}

// NewMockRemoveApplicationAPI creates a new mock instance.
func NewMockRemoveApplicationAPI(ctrl *gomock.Controller) *MockRemoveApplicationAPI {
	mock := &MockRemoveApplicationAPI{ctrl: ctrl}
	mock.recorder = &MockRemoveApplicationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoveApplicationAPI) EXPECT() *MockRemoveApplicationAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRemoveApplicationAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// BestAPIVersion mocks base method.
func (m *MockRemoveApplicationAPI) BestAPIVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestAPIVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// BestAPIVersion indicates an expected call of BestAPIVersion.
func (mr *MockRemoveApplicationAPIMockRecorder) BestAPIVersion() *MockRemoveApplicationAPIBestAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestAPIVersion", reflect.TypeOf((*MockRemoveApplicationAPI)(nil).BestAPIVersion))
	return &MockRemoveApplicationAPIBestAPIVersionCall{Call: call}
}

// MockRemoveApplicationAPIBestAPIVersionCall wrap *gomock.Call
type MockRemoveApplicationAPIBestAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveApplicationAPIBestAPIVersionCall) Return(arg0 int) *MockRemoveApplicationAPIBestAPIVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveApplicationAPIBestAPIVersionCall) Do(f func() int) *MockRemoveApplicationAPIBestAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveApplicationAPIBestAPIVersionCall) DoAndReturn(f func() int) *MockRemoveApplicationAPIBestAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockRemoveApplicationAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRemoveApplicationAPIMockRecorder) Close() *MockRemoveApplicationAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRemoveApplicationAPI)(nil).Close))
	return &MockRemoveApplicationAPICloseCall{Call: call}
}

// MockRemoveApplicationAPICloseCall wrap *gomock.Call
type MockRemoveApplicationAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveApplicationAPICloseCall) Return(arg0 error) *MockRemoveApplicationAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveApplicationAPICloseCall) Do(f func() error) *MockRemoveApplicationAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveApplicationAPICloseCall) DoAndReturn(f func() error) *MockRemoveApplicationAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyApplications mocks base method.
func (m *MockRemoveApplicationAPI) DestroyApplications(arg0 context.Context, arg1 application.DestroyApplicationsParams) ([]params.DestroyApplicationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyApplications", arg0, arg1)
	ret0, _ := ret[0].([]params.DestroyApplicationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyApplications indicates an expected call of DestroyApplications.
func (mr *MockRemoveApplicationAPIMockRecorder) DestroyApplications(arg0, arg1 any) *MockRemoveApplicationAPIDestroyApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyApplications", reflect.TypeOf((*MockRemoveApplicationAPI)(nil).DestroyApplications), arg0, arg1)
	return &MockRemoveApplicationAPIDestroyApplicationsCall{Call: call}
}

// MockRemoveApplicationAPIDestroyApplicationsCall wrap *gomock.Call
type MockRemoveApplicationAPIDestroyApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveApplicationAPIDestroyApplicationsCall) Return(arg0 []params.DestroyApplicationResult, arg1 error) *MockRemoveApplicationAPIDestroyApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveApplicationAPIDestroyApplicationsCall) Do(f func(context.Context, application.DestroyApplicationsParams) ([]params.DestroyApplicationResult, error)) *MockRemoveApplicationAPIDestroyApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveApplicationAPIDestroyApplicationsCall) DoAndReturn(f func(context.Context, application.DestroyApplicationsParams) ([]params.DestroyApplicationResult, error)) *MockRemoveApplicationAPIDestroyApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyUnits mocks base method.
func (m *MockRemoveApplicationAPI) DestroyUnits(arg0 context.Context, arg1 application.DestroyUnitsParams) ([]params.DestroyUnitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyUnits", arg0, arg1)
	ret0, _ := ret[0].([]params.DestroyUnitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyUnits indicates an expected call of DestroyUnits.
func (mr *MockRemoveApplicationAPIMockRecorder) DestroyUnits(arg0, arg1 any) *MockRemoveApplicationAPIDestroyUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyUnits", reflect.TypeOf((*MockRemoveApplicationAPI)(nil).DestroyUnits), arg0, arg1)
	return &MockRemoveApplicationAPIDestroyUnitsCall{Call: call}
}

// MockRemoveApplicationAPIDestroyUnitsCall wrap *gomock.Call
type MockRemoveApplicationAPIDestroyUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveApplicationAPIDestroyUnitsCall) Return(arg0 []params.DestroyUnitResult, arg1 error) *MockRemoveApplicationAPIDestroyUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveApplicationAPIDestroyUnitsCall) Do(f func(context.Context, application.DestroyUnitsParams) ([]params.DestroyUnitResult, error)) *MockRemoveApplicationAPIDestroyUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveApplicationAPIDestroyUnitsCall) DoAndReturn(f func(context.Context, application.DestroyUnitsParams) ([]params.DestroyUnitResult, error)) *MockRemoveApplicationAPIDestroyUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockRemoveApplicationAPI) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockRemoveApplicationAPIMockRecorder) ModelUUID() *MockRemoveApplicationAPIModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockRemoveApplicationAPI)(nil).ModelUUID))
	return &MockRemoveApplicationAPIModelUUIDCall{Call: call}
}

// MockRemoveApplicationAPIModelUUIDCall wrap *gomock.Call
type MockRemoveApplicationAPIModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveApplicationAPIModelUUIDCall) Return(arg0 string) *MockRemoveApplicationAPIModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveApplicationAPIModelUUIDCall) Do(f func() string) *MockRemoveApplicationAPIModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveApplicationAPIModelUUIDCall) DoAndReturn(f func() string) *MockRemoveApplicationAPIModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScaleApplication mocks base method.
func (m *MockRemoveApplicationAPI) ScaleApplication(arg0 context.Context, arg1 application.ScaleApplicationParams) (params.ScaleApplicationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleApplication", arg0, arg1)
	ret0, _ := ret[0].(params.ScaleApplicationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleApplication indicates an expected call of ScaleApplication.
func (mr *MockRemoveApplicationAPIMockRecorder) ScaleApplication(arg0, arg1 any) *MockRemoveApplicationAPIScaleApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleApplication", reflect.TypeOf((*MockRemoveApplicationAPI)(nil).ScaleApplication), arg0, arg1)
	return &MockRemoveApplicationAPIScaleApplicationCall{Call: call}
}

// MockRemoveApplicationAPIScaleApplicationCall wrap *gomock.Call
type MockRemoveApplicationAPIScaleApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveApplicationAPIScaleApplicationCall) Return(arg0 params.ScaleApplicationResult, arg1 error) *MockRemoveApplicationAPIScaleApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveApplicationAPIScaleApplicationCall) Do(f func(context.Context, application.ScaleApplicationParams) (params.ScaleApplicationResult, error)) *MockRemoveApplicationAPIScaleApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveApplicationAPIScaleApplicationCall) DoAndReturn(f func(context.Context, application.ScaleApplicationParams) (params.ScaleApplicationResult, error)) *MockRemoveApplicationAPIScaleApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
