// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application (interfaces: ModelConfigClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/modelconfigapi_mock.go github.com/juju/juju/cmd/juju/application ModelConfigClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockModelConfigClient is a mock of ModelConfigClient interface.
type MockModelConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigClientMockRecorder
}

// MockModelConfigClientMockRecorder is the mock recorder for MockModelConfigClient.
type MockModelConfigClientMockRecorder struct {
	mock *MockModelConfigClient
}

// NewMockModelConfigClient creates a new mock instance.
func NewMockModelConfigClient(ctrl *gomock.Controller) *MockModelConfigClient {
	mock := &MockModelConfigClient{ctrl: ctrl}
	mock.recorder = &MockModelConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigClient) EXPECT() *MockModelConfigClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelConfigClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockModelConfigClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModelConfigClientMockRecorder) Close() *MockModelConfigClientCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelConfigClient)(nil).Close))
	return &MockModelConfigClientCloseCall{Call: call}
}

// MockModelConfigClientCloseCall wrap *gomock.Call
type MockModelConfigClientCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigClientCloseCall) Return(arg0 error) *MockModelConfigClientCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigClientCloseCall) Do(f func() error) *MockModelConfigClientCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigClientCloseCall) DoAndReturn(f func() error) *MockModelConfigClientCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelGet mocks base method.
func (m *MockModelConfigClient) ModelGet(arg0 context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelGet", arg0)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelGet indicates an expected call of ModelGet.
func (mr *MockModelConfigClientMockRecorder) ModelGet(arg0 any) *MockModelConfigClientModelGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelGet", reflect.TypeOf((*MockModelConfigClient)(nil).ModelGet), arg0)
	return &MockModelConfigClientModelGetCall{Call: call}
}

// MockModelConfigClientModelGetCall wrap *gomock.Call
type MockModelConfigClientModelGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigClientModelGetCall) Return(arg0 map[string]any, arg1 error) *MockModelConfigClientModelGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigClientModelGetCall) Do(f func(context.Context) (map[string]any, error)) *MockModelConfigClientModelGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigClientModelGetCall) DoAndReturn(f func(context.Context) (map[string]any, error)) *MockModelConfigClientModelGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
