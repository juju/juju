// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application/store (interfaces: CharmAdder)
//
// Generated by this command:
//
//	mockgen -typed -package refresher -destination store_mock_test.go github.com/juju/juju/cmd/juju/application/store CharmAdder
//

// Package refresher is a generated GoMock package.
package refresher

import (
	context "context"
	reflect "reflect"

	charm "github.com/juju/juju/api/common/charm"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmAdder is a mock of CharmAdder interface.
type MockCharmAdder struct {
	ctrl     *gomock.Controller
	recorder *MockCharmAdderMockRecorder
}

// MockCharmAdderMockRecorder is the mock recorder for MockCharmAdder.
type MockCharmAdderMockRecorder struct {
	mock *MockCharmAdder
}

// NewMockCharmAdder creates a new mock instance.
func NewMockCharmAdder(ctrl *gomock.Controller) *MockCharmAdder {
	mock := &MockCharmAdder{ctrl: ctrl}
	mock.recorder = &MockCharmAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmAdder) EXPECT() *MockCharmAdderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmAdder) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddCharm mocks base method.
func (m *MockCharmAdder) AddCharm(arg0 context.Context, arg1 *charm0.URL, arg2 charm.Origin, arg3 bool) (charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCharm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(charm.Origin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCharm indicates an expected call of AddCharm.
func (mr *MockCharmAdderMockRecorder) AddCharm(arg0, arg1, arg2, arg3 any) *MockCharmAdderAddCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCharm", reflect.TypeOf((*MockCharmAdder)(nil).AddCharm), arg0, arg1, arg2, arg3)
	return &MockCharmAdderAddCharmCall{Call: call}
}

// MockCharmAdderAddCharmCall wrap *gomock.Call
type MockCharmAdderAddCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAdderAddCharmCall) Return(arg0 charm.Origin, arg1 error) *MockCharmAdderAddCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAdderAddCharmCall) Do(f func(context.Context, *charm0.URL, charm.Origin, bool) (charm.Origin, error)) *MockCharmAdderAddCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAdderAddCharmCall) DoAndReturn(f func(context.Context, *charm0.URL, charm.Origin, bool) (charm.Origin, error)) *MockCharmAdderAddCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddLocalCharm mocks base method.
func (m *MockCharmAdder) AddLocalCharm(arg0 context.Context, arg1 *charm0.URL, arg2 charm0.Charm, arg3 bool) (*charm0.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalCharm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*charm0.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocalCharm indicates an expected call of AddLocalCharm.
func (mr *MockCharmAdderMockRecorder) AddLocalCharm(arg0, arg1, arg2, arg3 any) *MockCharmAdderAddLocalCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalCharm", reflect.TypeOf((*MockCharmAdder)(nil).AddLocalCharm), arg0, arg1, arg2, arg3)
	return &MockCharmAdderAddLocalCharmCall{Call: call}
}

// MockCharmAdderAddLocalCharmCall wrap *gomock.Call
type MockCharmAdderAddLocalCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAdderAddLocalCharmCall) Return(arg0 *charm0.URL, arg1 error) *MockCharmAdderAddLocalCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAdderAddLocalCharmCall) Do(f func(context.Context, *charm0.URL, charm0.Charm, bool) (*charm0.URL, error)) *MockCharmAdderAddLocalCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAdderAddLocalCharmCall) DoAndReturn(f func(context.Context, *charm0.URL, charm0.Charm, bool) (*charm0.URL, error)) *MockCharmAdderAddLocalCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckCharmPlacement mocks base method.
func (m *MockCharmAdder) CheckCharmPlacement(arg0 context.Context, arg1 string, arg2 *charm0.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCharmPlacement", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCharmPlacement indicates an expected call of CheckCharmPlacement.
func (mr *MockCharmAdderMockRecorder) CheckCharmPlacement(arg0, arg1, arg2 any) *MockCharmAdderCheckCharmPlacementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCharmPlacement", reflect.TypeOf((*MockCharmAdder)(nil).CheckCharmPlacement), arg0, arg1, arg2)
	return &MockCharmAdderCheckCharmPlacementCall{Call: call}
}

// MockCharmAdderCheckCharmPlacementCall wrap *gomock.Call
type MockCharmAdderCheckCharmPlacementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAdderCheckCharmPlacementCall) Return(arg0 error) *MockCharmAdderCheckCharmPlacementCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAdderCheckCharmPlacementCall) Do(f func(context.Context, string, *charm0.URL) error) *MockCharmAdderCheckCharmPlacementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAdderCheckCharmPlacementCall) DoAndReturn(f func(context.Context, string, *charm0.URL) error) *MockCharmAdderCheckCharmPlacementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
