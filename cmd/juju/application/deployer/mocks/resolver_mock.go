// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application/deployer (interfaces: Resolver)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/resolver_mock.go github.com/juju/juju/cmd/juju/application/deployer Resolver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	charm "github.com/juju/juju/api/common/charm"
	base "github.com/juju/juju/core/base"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockResolver) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetBundle mocks base method.
func (m *MockResolver) GetBundle(arg0 context.Context, arg1 *charm0.URL, arg2 charm.Origin, arg3 string) (charm0.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundle", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(charm0.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundle indicates an expected call of GetBundle.
func (mr *MockResolverMockRecorder) GetBundle(arg0, arg1, arg2, arg3 any) *MockResolverGetBundleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundle", reflect.TypeOf((*MockResolver)(nil).GetBundle), arg0, arg1, arg2, arg3)
	return &MockResolverGetBundleCall{Call: call}
}

// MockResolverGetBundleCall wrap *gomock.Call
type MockResolverGetBundleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolverGetBundleCall) Return(arg0 charm0.Bundle, arg1 error) *MockResolverGetBundleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolverGetBundleCall) Do(f func(context.Context, *charm0.URL, charm.Origin, string) (charm0.Bundle, error)) *MockResolverGetBundleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolverGetBundleCall) DoAndReturn(f func(context.Context, *charm0.URL, charm.Origin, string) (charm0.Bundle, error)) *MockResolverGetBundleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveBundleURL mocks base method.
func (m *MockResolver) ResolveBundleURL(arg0 context.Context, arg1 *charm0.URL, arg2 charm.Origin) (*charm0.URL, charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBundleURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*charm0.URL)
	ret1, _ := ret[1].(charm.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveBundleURL indicates an expected call of ResolveBundleURL.
func (mr *MockResolverMockRecorder) ResolveBundleURL(arg0, arg1, arg2 any) *MockResolverResolveBundleURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBundleURL", reflect.TypeOf((*MockResolver)(nil).ResolveBundleURL), arg0, arg1, arg2)
	return &MockResolverResolveBundleURLCall{Call: call}
}

// MockResolverResolveBundleURLCall wrap *gomock.Call
type MockResolverResolveBundleURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolverResolveBundleURLCall) Return(arg0 *charm0.URL, arg1 charm.Origin, arg2 error) *MockResolverResolveBundleURLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolverResolveBundleURLCall) Do(f func(context.Context, *charm0.URL, charm.Origin) (*charm0.URL, charm.Origin, error)) *MockResolverResolveBundleURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolverResolveBundleURLCall) DoAndReturn(f func(context.Context, *charm0.URL, charm.Origin) (*charm0.URL, charm.Origin, error)) *MockResolverResolveBundleURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveCharm mocks base method.
func (m *MockResolver) ResolveCharm(arg0 context.Context, arg1 *charm0.URL, arg2 charm.Origin, arg3 bool) (*charm0.URL, charm.Origin, []base.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCharm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*charm0.URL)
	ret1, _ := ret[1].(charm.Origin)
	ret2, _ := ret[2].([]base.Base)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ResolveCharm indicates an expected call of ResolveCharm.
func (mr *MockResolverMockRecorder) ResolveCharm(arg0, arg1, arg2, arg3 any) *MockResolverResolveCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCharm", reflect.TypeOf((*MockResolver)(nil).ResolveCharm), arg0, arg1, arg2, arg3)
	return &MockResolverResolveCharmCall{Call: call}
}

// MockResolverResolveCharmCall wrap *gomock.Call
type MockResolverResolveCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolverResolveCharmCall) Return(arg0 *charm0.URL, arg1 charm.Origin, arg2 []base.Base, arg3 error) *MockResolverResolveCharmCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolverResolveCharmCall) Do(f func(context.Context, *charm0.URL, charm.Origin, bool) (*charm0.URL, charm.Origin, []base.Base, error)) *MockResolverResolveCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolverResolveCharmCall) DoAndReturn(f func(context.Context, *charm0.URL, charm.Origin, bool) (*charm0.URL, charm.Origin, []base.Base, error)) *MockResolverResolveCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
