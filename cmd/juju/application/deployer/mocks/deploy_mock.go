// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application/deployer (interfaces: DeployerAPI,CharmReader,DeployConfigFlag)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/deploy_mock.go github.com/juju/juju/cmd/juju/application/deployer DeployerAPI,CharmReader,DeployConfigFlag
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	base "github.com/juju/juju/api/base"
	application "github.com/juju/juju/api/client/application"
	client "github.com/juju/juju/api/client/client"
	charm "github.com/juju/juju/api/common/charm"
	charms "github.com/juju/juju/api/common/charms"
	constraints "github.com/juju/juju/core/constraints"
	crossmodel "github.com/juju/juju/core/crossmodel"
	charm0 "github.com/juju/juju/internal/charm"
	resource "github.com/juju/juju/internal/charm/resource"
	cmd "github.com/juju/juju/internal/cmd"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
	httprequest "gopkg.in/httprequest.v1"
)

// MockDeployerAPI is a mock of DeployerAPI interface.
type MockDeployerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDeployerAPIMockRecorder
}

// MockDeployerAPIMockRecorder is the mock recorder for MockDeployerAPI.
type MockDeployerAPIMockRecorder struct {
	mock *MockDeployerAPI
}

// NewMockDeployerAPI creates a new mock instance.
func NewMockDeployerAPI(ctrl *gomock.Controller) *MockDeployerAPI {
	mock := &MockDeployerAPI{ctrl: ctrl}
	mock.recorder = &MockDeployerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployerAPI) EXPECT() *MockDeployerAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDeployerAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// APICall mocks base method.
func (m *MockDeployerAPI) APICall(arg0 context.Context, arg1 string, arg2 int, arg3, arg4 string, arg5, arg6 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APICall", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// APICall indicates an expected call of APICall.
func (mr *MockDeployerAPIMockRecorder) APICall(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockDeployerAPIAPICallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APICall", reflect.TypeOf((*MockDeployerAPI)(nil).APICall), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockDeployerAPIAPICallCall{Call: call}
}

// MockDeployerAPIAPICallCall wrap *gomock.Call
type MockDeployerAPIAPICallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIAPICallCall) Return(arg0 error) *MockDeployerAPIAPICallCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIAPICallCall) Do(f func(context.Context, string, int, string, string, any, any) error) *MockDeployerAPIAPICallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIAPICallCall) DoAndReturn(f func(context.Context, string, int, string, string, any, any) error) *MockDeployerAPIAPICallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddCharm mocks base method.
func (m *MockDeployerAPI) AddCharm(arg0 context.Context, arg1 *charm0.URL, arg2 charm.Origin, arg3 bool) (charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCharm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(charm.Origin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCharm indicates an expected call of AddCharm.
func (mr *MockDeployerAPIMockRecorder) AddCharm(arg0, arg1, arg2, arg3 any) *MockDeployerAPIAddCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCharm", reflect.TypeOf((*MockDeployerAPI)(nil).AddCharm), arg0, arg1, arg2, arg3)
	return &MockDeployerAPIAddCharmCall{Call: call}
}

// MockDeployerAPIAddCharmCall wrap *gomock.Call
type MockDeployerAPIAddCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIAddCharmCall) Return(arg0 charm.Origin, arg1 error) *MockDeployerAPIAddCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIAddCharmCall) Do(f func(context.Context, *charm0.URL, charm.Origin, bool) (charm.Origin, error)) *MockDeployerAPIAddCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIAddCharmCall) DoAndReturn(f func(context.Context, *charm0.URL, charm.Origin, bool) (charm.Origin, error)) *MockDeployerAPIAddCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddLocalCharm mocks base method.
func (m *MockDeployerAPI) AddLocalCharm(arg0 context.Context, arg1 *charm0.URL, arg2 charm0.Charm, arg3 bool) (*charm0.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalCharm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*charm0.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocalCharm indicates an expected call of AddLocalCharm.
func (mr *MockDeployerAPIMockRecorder) AddLocalCharm(arg0, arg1, arg2, arg3 any) *MockDeployerAPIAddLocalCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalCharm", reflect.TypeOf((*MockDeployerAPI)(nil).AddLocalCharm), arg0, arg1, arg2, arg3)
	return &MockDeployerAPIAddLocalCharmCall{Call: call}
}

// MockDeployerAPIAddLocalCharmCall wrap *gomock.Call
type MockDeployerAPIAddLocalCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIAddLocalCharmCall) Return(arg0 *charm0.URL, arg1 error) *MockDeployerAPIAddLocalCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIAddLocalCharmCall) Do(f func(context.Context, *charm0.URL, charm0.Charm, bool) (*charm0.URL, error)) *MockDeployerAPIAddLocalCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIAddLocalCharmCall) DoAndReturn(f func(context.Context, *charm0.URL, charm0.Charm, bool) (*charm0.URL, error)) *MockDeployerAPIAddLocalCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddMachines mocks base method.
func (m *MockDeployerAPI) AddMachines(arg0 context.Context, arg1 []params.AddMachineParams) ([]params.AddMachinesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachines", arg0, arg1)
	ret0, _ := ret[0].([]params.AddMachinesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMachines indicates an expected call of AddMachines.
func (mr *MockDeployerAPIMockRecorder) AddMachines(arg0, arg1 any) *MockDeployerAPIAddMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachines", reflect.TypeOf((*MockDeployerAPI)(nil).AddMachines), arg0, arg1)
	return &MockDeployerAPIAddMachinesCall{Call: call}
}

// MockDeployerAPIAddMachinesCall wrap *gomock.Call
type MockDeployerAPIAddMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIAddMachinesCall) Return(arg0 []params.AddMachinesResult, arg1 error) *MockDeployerAPIAddMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIAddMachinesCall) Do(f func(context.Context, []params.AddMachineParams) ([]params.AddMachinesResult, error)) *MockDeployerAPIAddMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIAddMachinesCall) DoAndReturn(f func(context.Context, []params.AddMachineParams) ([]params.AddMachinesResult, error)) *MockDeployerAPIAddMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRelation mocks base method.
func (m *MockDeployerAPI) AddRelation(arg0 context.Context, arg1, arg2 []string) (*params.AddRelationResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*params.AddRelationResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockDeployerAPIMockRecorder) AddRelation(arg0, arg1, arg2 any) *MockDeployerAPIAddRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockDeployerAPI)(nil).AddRelation), arg0, arg1, arg2)
	return &MockDeployerAPIAddRelationCall{Call: call}
}

// MockDeployerAPIAddRelationCall wrap *gomock.Call
type MockDeployerAPIAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIAddRelationCall) Return(arg0 *params.AddRelationResults, arg1 error) *MockDeployerAPIAddRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIAddRelationCall) Do(f func(context.Context, []string, []string) (*params.AddRelationResults, error)) *MockDeployerAPIAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIAddRelationCall) DoAndReturn(f func(context.Context, []string, []string) (*params.AddRelationResults, error)) *MockDeployerAPIAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUnits mocks base method.
func (m *MockDeployerAPI) AddUnits(arg0 context.Context, arg1 application.AddUnitsParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUnits", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUnits indicates an expected call of AddUnits.
func (mr *MockDeployerAPIMockRecorder) AddUnits(arg0, arg1 any) *MockDeployerAPIAddUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnits", reflect.TypeOf((*MockDeployerAPI)(nil).AddUnits), arg0, arg1)
	return &MockDeployerAPIAddUnitsCall{Call: call}
}

// MockDeployerAPIAddUnitsCall wrap *gomock.Call
type MockDeployerAPIAddUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIAddUnitsCall) Return(arg0 []string, arg1 error) *MockDeployerAPIAddUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIAddUnitsCall) Do(f func(context.Context, application.AddUnitsParams) ([]string, error)) *MockDeployerAPIAddUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIAddUnitsCall) DoAndReturn(f func(context.Context, application.AddUnitsParams) ([]string, error)) *MockDeployerAPIAddUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationsInfo mocks base method.
func (m *MockDeployerAPI) ApplicationsInfo(arg0 context.Context, arg1 []names.ApplicationTag) ([]params.ApplicationInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationsInfo", arg0, arg1)
	ret0, _ := ret[0].([]params.ApplicationInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationsInfo indicates an expected call of ApplicationsInfo.
func (mr *MockDeployerAPIMockRecorder) ApplicationsInfo(arg0, arg1 any) *MockDeployerAPIApplicationsInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationsInfo", reflect.TypeOf((*MockDeployerAPI)(nil).ApplicationsInfo), arg0, arg1)
	return &MockDeployerAPIApplicationsInfoCall{Call: call}
}

// MockDeployerAPIApplicationsInfoCall wrap *gomock.Call
type MockDeployerAPIApplicationsInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIApplicationsInfoCall) Return(arg0 []params.ApplicationInfoResult, arg1 error) *MockDeployerAPIApplicationsInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIApplicationsInfoCall) Do(f func(context.Context, []names.ApplicationTag) ([]params.ApplicationInfoResult, error)) *MockDeployerAPIApplicationsInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIApplicationsInfoCall) DoAndReturn(f func(context.Context, []names.ApplicationTag) ([]params.ApplicationInfoResult, error)) *MockDeployerAPIApplicationsInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BakeryClient mocks base method.
func (m *MockDeployerAPI) BakeryClient() base.MacaroonDischarger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BakeryClient")
	ret0, _ := ret[0].(base.MacaroonDischarger)
	return ret0
}

// BakeryClient indicates an expected call of BakeryClient.
func (mr *MockDeployerAPIMockRecorder) BakeryClient() *MockDeployerAPIBakeryClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BakeryClient", reflect.TypeOf((*MockDeployerAPI)(nil).BakeryClient))
	return &MockDeployerAPIBakeryClientCall{Call: call}
}

// MockDeployerAPIBakeryClientCall wrap *gomock.Call
type MockDeployerAPIBakeryClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIBakeryClientCall) Return(arg0 base.MacaroonDischarger) *MockDeployerAPIBakeryClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIBakeryClientCall) Do(f func() base.MacaroonDischarger) *MockDeployerAPIBakeryClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIBakeryClientCall) DoAndReturn(f func() base.MacaroonDischarger) *MockDeployerAPIBakeryClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BestFacadeVersion mocks base method.
func (m *MockDeployerAPI) BestFacadeVersion(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestFacadeVersion", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// BestFacadeVersion indicates an expected call of BestFacadeVersion.
func (mr *MockDeployerAPIMockRecorder) BestFacadeVersion(arg0 any) *MockDeployerAPIBestFacadeVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestFacadeVersion", reflect.TypeOf((*MockDeployerAPI)(nil).BestFacadeVersion), arg0)
	return &MockDeployerAPIBestFacadeVersionCall{Call: call}
}

// MockDeployerAPIBestFacadeVersionCall wrap *gomock.Call
type MockDeployerAPIBestFacadeVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIBestFacadeVersionCall) Return(arg0 int) *MockDeployerAPIBestFacadeVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIBestFacadeVersionCall) Do(f func(string) int) *MockDeployerAPIBestFacadeVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIBestFacadeVersionCall) DoAndReturn(f func(string) int) *MockDeployerAPIBestFacadeVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmInfo mocks base method.
func (m *MockDeployerAPI) CharmInfo(arg0 context.Context, arg1 string) (*charms.CharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmInfo", arg0, arg1)
	ret0, _ := ret[0].(*charms.CharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmInfo indicates an expected call of CharmInfo.
func (mr *MockDeployerAPIMockRecorder) CharmInfo(arg0, arg1 any) *MockDeployerAPICharmInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmInfo", reflect.TypeOf((*MockDeployerAPI)(nil).CharmInfo), arg0, arg1)
	return &MockDeployerAPICharmInfoCall{Call: call}
}

// MockDeployerAPICharmInfoCall wrap *gomock.Call
type MockDeployerAPICharmInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPICharmInfoCall) Return(arg0 *charms.CharmInfo, arg1 error) *MockDeployerAPICharmInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPICharmInfoCall) Do(f func(context.Context, string) (*charms.CharmInfo, error)) *MockDeployerAPICharmInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPICharmInfoCall) DoAndReturn(f func(context.Context, string) (*charms.CharmInfo, error)) *MockDeployerAPICharmInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckCharmPlacement mocks base method.
func (m *MockDeployerAPI) CheckCharmPlacement(arg0 context.Context, arg1 string, arg2 *charm0.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCharmPlacement", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCharmPlacement indicates an expected call of CheckCharmPlacement.
func (mr *MockDeployerAPIMockRecorder) CheckCharmPlacement(arg0, arg1, arg2 any) *MockDeployerAPICheckCharmPlacementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCharmPlacement", reflect.TypeOf((*MockDeployerAPI)(nil).CheckCharmPlacement), arg0, arg1, arg2)
	return &MockDeployerAPICheckCharmPlacementCall{Call: call}
}

// MockDeployerAPICheckCharmPlacementCall wrap *gomock.Call
type MockDeployerAPICheckCharmPlacementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPICheckCharmPlacementCall) Return(arg0 error) *MockDeployerAPICheckCharmPlacementCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPICheckCharmPlacementCall) Do(f func(context.Context, string, *charm0.URL) error) *MockDeployerAPICheckCharmPlacementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPICheckCharmPlacementCall) DoAndReturn(f func(context.Context, string, *charm0.URL) error) *MockDeployerAPICheckCharmPlacementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockDeployerAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDeployerAPIMockRecorder) Close() *MockDeployerAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDeployerAPI)(nil).Close))
	return &MockDeployerAPICloseCall{Call: call}
}

// MockDeployerAPICloseCall wrap *gomock.Call
type MockDeployerAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPICloseCall) Return(arg0 error) *MockDeployerAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPICloseCall) Do(f func() error) *MockDeployerAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPICloseCall) DoAndReturn(f func() error) *MockDeployerAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConnectControllerStream mocks base method.
func (m *MockDeployerAPI) ConnectControllerStream(arg0 context.Context, arg1 string, arg2 url.Values, arg3 http.Header) (base.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectControllerStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(base.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectControllerStream indicates an expected call of ConnectControllerStream.
func (mr *MockDeployerAPIMockRecorder) ConnectControllerStream(arg0, arg1, arg2, arg3 any) *MockDeployerAPIConnectControllerStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectControllerStream", reflect.TypeOf((*MockDeployerAPI)(nil).ConnectControllerStream), arg0, arg1, arg2, arg3)
	return &MockDeployerAPIConnectControllerStreamCall{Call: call}
}

// MockDeployerAPIConnectControllerStreamCall wrap *gomock.Call
type MockDeployerAPIConnectControllerStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIConnectControllerStreamCall) Return(arg0 base.Stream, arg1 error) *MockDeployerAPIConnectControllerStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIConnectControllerStreamCall) Do(f func(context.Context, string, url.Values, http.Header) (base.Stream, error)) *MockDeployerAPIConnectControllerStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIConnectControllerStreamCall) DoAndReturn(f func(context.Context, string, url.Values, http.Header) (base.Stream, error)) *MockDeployerAPIConnectControllerStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConnectStream mocks base method.
func (m *MockDeployerAPI) ConnectStream(arg0 context.Context, arg1 string, arg2 url.Values) (base.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(base.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectStream indicates an expected call of ConnectStream.
func (mr *MockDeployerAPIMockRecorder) ConnectStream(arg0, arg1, arg2 any) *MockDeployerAPIConnectStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectStream", reflect.TypeOf((*MockDeployerAPI)(nil).ConnectStream), arg0, arg1, arg2)
	return &MockDeployerAPIConnectStreamCall{Call: call}
}

// MockDeployerAPIConnectStreamCall wrap *gomock.Call
type MockDeployerAPIConnectStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIConnectStreamCall) Return(arg0 base.Stream, arg1 error) *MockDeployerAPIConnectStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIConnectStreamCall) Do(f func(context.Context, string, url.Values) (base.Stream, error)) *MockDeployerAPIConnectStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIConnectStreamCall) DoAndReturn(f func(context.Context, string, url.Values) (base.Stream, error)) *MockDeployerAPIConnectStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Consume mocks base method.
func (m *MockDeployerAPI) Consume(arg0 context.Context, arg1 crossmodel.ConsumeApplicationArgs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockDeployerAPIMockRecorder) Consume(arg0, arg1 any) *MockDeployerAPIConsumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockDeployerAPI)(nil).Consume), arg0, arg1)
	return &MockDeployerAPIConsumeCall{Call: call}
}

// MockDeployerAPIConsumeCall wrap *gomock.Call
type MockDeployerAPIConsumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIConsumeCall) Return(arg0 string, arg1 error) *MockDeployerAPIConsumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIConsumeCall) Do(f func(context.Context, crossmodel.ConsumeApplicationArgs) (string, error)) *MockDeployerAPIConsumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIConsumeCall) DoAndReturn(f func(context.Context, crossmodel.ConsumeApplicationArgs) (string, error)) *MockDeployerAPIConsumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Deploy mocks base method.
func (m *MockDeployerAPI) Deploy(arg0 context.Context, arg1 application.DeployArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockDeployerAPIMockRecorder) Deploy(arg0, arg1 any) *MockDeployerAPIDeployCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockDeployerAPI)(nil).Deploy), arg0, arg1)
	return &MockDeployerAPIDeployCall{Call: call}
}

// MockDeployerAPIDeployCall wrap *gomock.Call
type MockDeployerAPIDeployCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIDeployCall) Return(arg0 error) *MockDeployerAPIDeployCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIDeployCall) Do(f func(context.Context, application.DeployArgs) error) *MockDeployerAPIDeployCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIDeployCall) DoAndReturn(f func(context.Context, application.DeployArgs) error) *MockDeployerAPIDeployCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeployFromRepository mocks base method.
func (m *MockDeployerAPI) DeployFromRepository(arg0 context.Context, arg1 application.DeployFromRepositoryArg) (application.DeployInfo, []application.PendingResourceUpload, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployFromRepository", arg0, arg1)
	ret0, _ := ret[0].(application.DeployInfo)
	ret1, _ := ret[1].([]application.PendingResourceUpload)
	ret2, _ := ret[2].([]error)
	return ret0, ret1, ret2
}

// DeployFromRepository indicates an expected call of DeployFromRepository.
func (mr *MockDeployerAPIMockRecorder) DeployFromRepository(arg0, arg1 any) *MockDeployerAPIDeployFromRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployFromRepository", reflect.TypeOf((*MockDeployerAPI)(nil).DeployFromRepository), arg0, arg1)
	return &MockDeployerAPIDeployFromRepositoryCall{Call: call}
}

// MockDeployerAPIDeployFromRepositoryCall wrap *gomock.Call
type MockDeployerAPIDeployFromRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIDeployFromRepositoryCall) Return(arg0 application.DeployInfo, arg1 []application.PendingResourceUpload, arg2 []error) *MockDeployerAPIDeployFromRepositoryCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIDeployFromRepositoryCall) Do(f func(context.Context, application.DeployFromRepositoryArg) (application.DeployInfo, []application.PendingResourceUpload, []error)) *MockDeployerAPIDeployFromRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIDeployFromRepositoryCall) DoAndReturn(f func(context.Context, application.DeployFromRepositoryArg) (application.DeployInfo, []application.PendingResourceUpload, []error)) *MockDeployerAPIDeployFromRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Expose mocks base method.
func (m *MockDeployerAPI) Expose(arg0 context.Context, arg1 string, arg2 map[string]params.ExposedEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expose", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expose indicates an expected call of Expose.
func (mr *MockDeployerAPIMockRecorder) Expose(arg0, arg1, arg2 any) *MockDeployerAPIExposeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expose", reflect.TypeOf((*MockDeployerAPI)(nil).Expose), arg0, arg1, arg2)
	return &MockDeployerAPIExposeCall{Call: call}
}

// MockDeployerAPIExposeCall wrap *gomock.Call
type MockDeployerAPIExposeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIExposeCall) Return(arg0 error) *MockDeployerAPIExposeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIExposeCall) Do(f func(context.Context, string, map[string]params.ExposedEndpoint) error) *MockDeployerAPIExposeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIExposeCall) DoAndReturn(f func(context.Context, string, map[string]params.ExposedEndpoint) error) *MockDeployerAPIExposeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAnnotations mocks base method.
func (m *MockDeployerAPI) GetAnnotations(arg0 context.Context, arg1 []string) ([]params.AnnotationsGetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotations", arg0, arg1)
	ret0, _ := ret[0].([]params.AnnotationsGetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotations indicates an expected call of GetAnnotations.
func (mr *MockDeployerAPIMockRecorder) GetAnnotations(arg0, arg1 any) *MockDeployerAPIGetAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotations", reflect.TypeOf((*MockDeployerAPI)(nil).GetAnnotations), arg0, arg1)
	return &MockDeployerAPIGetAnnotationsCall{Call: call}
}

// MockDeployerAPIGetAnnotationsCall wrap *gomock.Call
type MockDeployerAPIGetAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIGetAnnotationsCall) Return(arg0 []params.AnnotationsGetResult, arg1 error) *MockDeployerAPIGetAnnotationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIGetAnnotationsCall) Do(f func(context.Context, []string) ([]params.AnnotationsGetResult, error)) *MockDeployerAPIGetAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIGetAnnotationsCall) DoAndReturn(f func(context.Context, []string) ([]params.AnnotationsGetResult, error)) *MockDeployerAPIGetAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmURLOrigin mocks base method.
func (m *MockDeployerAPI) GetCharmURLOrigin(arg0 context.Context, arg1 string) (*charm0.URL, charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmURLOrigin", arg0, arg1)
	ret0, _ := ret[0].(*charm0.URL)
	ret1, _ := ret[1].(charm.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmURLOrigin indicates an expected call of GetCharmURLOrigin.
func (mr *MockDeployerAPIMockRecorder) GetCharmURLOrigin(arg0, arg1 any) *MockDeployerAPIGetCharmURLOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmURLOrigin", reflect.TypeOf((*MockDeployerAPI)(nil).GetCharmURLOrigin), arg0, arg1)
	return &MockDeployerAPIGetCharmURLOriginCall{Call: call}
}

// MockDeployerAPIGetCharmURLOriginCall wrap *gomock.Call
type MockDeployerAPIGetCharmURLOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIGetCharmURLOriginCall) Return(arg0 *charm0.URL, arg1 charm.Origin, arg2 error) *MockDeployerAPIGetCharmURLOriginCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIGetCharmURLOriginCall) Do(f func(context.Context, string) (*charm0.URL, charm.Origin, error)) *MockDeployerAPIGetCharmURLOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIGetCharmURLOriginCall) DoAndReturn(f func(context.Context, string) (*charm0.URL, charm.Origin, error)) *MockDeployerAPIGetCharmURLOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConfig mocks base method.
func (m *MockDeployerAPI) GetConfig(arg0 context.Context, arg1 ...string) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockDeployerAPIMockRecorder) GetConfig(arg0 any, arg1 ...any) *MockDeployerAPIGetConfigCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockDeployerAPI)(nil).GetConfig), varargs...)
	return &MockDeployerAPIGetConfigCall{Call: call}
}

// MockDeployerAPIGetConfigCall wrap *gomock.Call
type MockDeployerAPIGetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIGetConfigCall) Return(arg0 []map[string]any, arg1 error) *MockDeployerAPIGetConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIGetConfigCall) Do(f func(context.Context, ...string) ([]map[string]any, error)) *MockDeployerAPIGetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIGetConfigCall) DoAndReturn(f func(context.Context, ...string) ([]map[string]any, error)) *MockDeployerAPIGetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConstraints mocks base method.
func (m *MockDeployerAPI) GetConstraints(arg0 context.Context, arg1 ...string) ([]constraints.Value, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConstraints", varargs...)
	ret0, _ := ret[0].([]constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConstraints indicates an expected call of GetConstraints.
func (mr *MockDeployerAPIMockRecorder) GetConstraints(arg0 any, arg1 ...any) *MockDeployerAPIGetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConstraints", reflect.TypeOf((*MockDeployerAPI)(nil).GetConstraints), varargs...)
	return &MockDeployerAPIGetConstraintsCall{Call: call}
}

// MockDeployerAPIGetConstraintsCall wrap *gomock.Call
type MockDeployerAPIGetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIGetConstraintsCall) Return(arg0 []constraints.Value, arg1 error) *MockDeployerAPIGetConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIGetConstraintsCall) Do(f func(context.Context, ...string) ([]constraints.Value, error)) *MockDeployerAPIGetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIGetConstraintsCall) DoAndReturn(f func(context.Context, ...string) ([]constraints.Value, error)) *MockDeployerAPIGetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelConstraints mocks base method.
func (m *MockDeployerAPI) GetModelConstraints(arg0 context.Context) (constraints.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelConstraints", arg0)
	ret0, _ := ret[0].(constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelConstraints indicates an expected call of GetModelConstraints.
func (mr *MockDeployerAPIMockRecorder) GetModelConstraints(arg0 any) *MockDeployerAPIGetModelConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelConstraints", reflect.TypeOf((*MockDeployerAPI)(nil).GetModelConstraints), arg0)
	return &MockDeployerAPIGetModelConstraintsCall{Call: call}
}

// MockDeployerAPIGetModelConstraintsCall wrap *gomock.Call
type MockDeployerAPIGetModelConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIGetModelConstraintsCall) Return(arg0 constraints.Value, arg1 error) *MockDeployerAPIGetModelConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIGetModelConstraintsCall) Do(f func(context.Context) (constraints.Value, error)) *MockDeployerAPIGetModelConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIGetModelConstraintsCall) DoAndReturn(f func(context.Context) (constraints.Value, error)) *MockDeployerAPIGetModelConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GrantOffer mocks base method.
func (m *MockDeployerAPI) GrantOffer(arg0 context.Context, arg1, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantOffer", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantOffer indicates an expected call of GrantOffer.
func (mr *MockDeployerAPIMockRecorder) GrantOffer(arg0, arg1, arg2 any, arg3 ...any) *MockDeployerAPIGrantOfferCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantOffer", reflect.TypeOf((*MockDeployerAPI)(nil).GrantOffer), varargs...)
	return &MockDeployerAPIGrantOfferCall{Call: call}
}

// MockDeployerAPIGrantOfferCall wrap *gomock.Call
type MockDeployerAPIGrantOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIGrantOfferCall) Return(arg0 error) *MockDeployerAPIGrantOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIGrantOfferCall) Do(f func(context.Context, string, string, ...string) error) *MockDeployerAPIGrantOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIGrantOfferCall) DoAndReturn(f func(context.Context, string, string, ...string) error) *MockDeployerAPIGrantOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HTTPClient mocks base method.
func (m *MockDeployerAPI) HTTPClient() (*httprequest.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*httprequest.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockDeployerAPIMockRecorder) HTTPClient() *MockDeployerAPIHTTPClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockDeployerAPI)(nil).HTTPClient))
	return &MockDeployerAPIHTTPClientCall{Call: call}
}

// MockDeployerAPIHTTPClientCall wrap *gomock.Call
type MockDeployerAPIHTTPClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIHTTPClientCall) Return(arg0 *httprequest.Client, arg1 error) *MockDeployerAPIHTTPClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIHTTPClientCall) Do(f func() (*httprequest.Client, error)) *MockDeployerAPIHTTPClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIHTTPClientCall) DoAndReturn(f func() (*httprequest.Client, error)) *MockDeployerAPIHTTPClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCharmResources mocks base method.
func (m *MockDeployerAPI) ListCharmResources(arg0 context.Context, arg1 string, arg2 charm.Origin) ([]resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharmResources", arg0, arg1, arg2)
	ret0, _ := ret[0].([]resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharmResources indicates an expected call of ListCharmResources.
func (mr *MockDeployerAPIMockRecorder) ListCharmResources(arg0, arg1, arg2 any) *MockDeployerAPIListCharmResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmResources", reflect.TypeOf((*MockDeployerAPI)(nil).ListCharmResources), arg0, arg1, arg2)
	return &MockDeployerAPIListCharmResourcesCall{Call: call}
}

// MockDeployerAPIListCharmResourcesCall wrap *gomock.Call
type MockDeployerAPIListCharmResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIListCharmResourcesCall) Return(arg0 []resource.Resource, arg1 error) *MockDeployerAPIListCharmResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIListCharmResourcesCall) Do(f func(context.Context, string, charm.Origin) ([]resource.Resource, error)) *MockDeployerAPIListCharmResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIListCharmResourcesCall) DoAndReturn(f func(context.Context, string, charm.Origin) ([]resource.Resource, error)) *MockDeployerAPIListCharmResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSpaces mocks base method.
func (m *MockDeployerAPI) ListSpaces(arg0 context.Context) ([]params.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpaces", arg0)
	ret0, _ := ret[0].([]params.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpaces indicates an expected call of ListSpaces.
func (mr *MockDeployerAPIMockRecorder) ListSpaces(arg0 any) *MockDeployerAPIListSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpaces", reflect.TypeOf((*MockDeployerAPI)(nil).ListSpaces), arg0)
	return &MockDeployerAPIListSpacesCall{Call: call}
}

// MockDeployerAPIListSpacesCall wrap *gomock.Call
type MockDeployerAPIListSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIListSpacesCall) Return(arg0 []params.Space, arg1 error) *MockDeployerAPIListSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIListSpacesCall) Do(f func(context.Context) ([]params.Space, error)) *MockDeployerAPIListSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIListSpacesCall) DoAndReturn(f func(context.Context) ([]params.Space, error)) *MockDeployerAPIListSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelGet mocks base method.
func (m *MockDeployerAPI) ModelGet(arg0 context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelGet", arg0)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelGet indicates an expected call of ModelGet.
func (mr *MockDeployerAPIMockRecorder) ModelGet(arg0 any) *MockDeployerAPIModelGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelGet", reflect.TypeOf((*MockDeployerAPI)(nil).ModelGet), arg0)
	return &MockDeployerAPIModelGetCall{Call: call}
}

// MockDeployerAPIModelGetCall wrap *gomock.Call
type MockDeployerAPIModelGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIModelGetCall) Return(arg0 map[string]any, arg1 error) *MockDeployerAPIModelGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIModelGetCall) Do(f func(context.Context) (map[string]any, error)) *MockDeployerAPIModelGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIModelGetCall) DoAndReturn(f func(context.Context) (map[string]any, error)) *MockDeployerAPIModelGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelTag mocks base method.
func (m *MockDeployerAPI) ModelTag() (names.ModelTag, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ModelTag indicates an expected call of ModelTag.
func (mr *MockDeployerAPIMockRecorder) ModelTag() *MockDeployerAPIModelTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTag", reflect.TypeOf((*MockDeployerAPI)(nil).ModelTag))
	return &MockDeployerAPIModelTagCall{Call: call}
}

// MockDeployerAPIModelTagCall wrap *gomock.Call
type MockDeployerAPIModelTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIModelTagCall) Return(arg0 names.ModelTag, arg1 bool) *MockDeployerAPIModelTagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIModelTagCall) Do(f func() (names.ModelTag, bool)) *MockDeployerAPIModelTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIModelTagCall) DoAndReturn(f func() (names.ModelTag, bool)) *MockDeployerAPIModelTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockDeployerAPI) ModelUUID() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockDeployerAPIMockRecorder) ModelUUID() *MockDeployerAPIModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockDeployerAPI)(nil).ModelUUID))
	return &MockDeployerAPIModelUUIDCall{Call: call}
}

// MockDeployerAPIModelUUIDCall wrap *gomock.Call
type MockDeployerAPIModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIModelUUIDCall) Return(arg0 string, arg1 bool) *MockDeployerAPIModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIModelUUIDCall) Do(f func() (string, bool)) *MockDeployerAPIModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIModelUUIDCall) DoAndReturn(f func() (string, bool)) *MockDeployerAPIModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Offer mocks base method.
func (m *MockDeployerAPI) Offer(arg0 context.Context, arg1, arg2 string, arg3 []string, arg4, arg5, arg6 string) ([]params.ErrorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offer", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]params.ErrorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Offer indicates an expected call of Offer.
func (mr *MockDeployerAPIMockRecorder) Offer(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockDeployerAPIOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offer", reflect.TypeOf((*MockDeployerAPI)(nil).Offer), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockDeployerAPIOfferCall{Call: call}
}

// MockDeployerAPIOfferCall wrap *gomock.Call
type MockDeployerAPIOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIOfferCall) Return(arg0 []params.ErrorResult, arg1 error) *MockDeployerAPIOfferCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIOfferCall) Do(f func(context.Context, string, string, []string, string, string, string) ([]params.ErrorResult, error)) *MockDeployerAPIOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIOfferCall) DoAndReturn(f func(context.Context, string, string, []string, string, string, string) ([]params.ErrorResult, error)) *MockDeployerAPIOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RootHTTPClient mocks base method.
func (m *MockDeployerAPI) RootHTTPClient() (*httprequest.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootHTTPClient")
	ret0, _ := ret[0].(*httprequest.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RootHTTPClient indicates an expected call of RootHTTPClient.
func (mr *MockDeployerAPIMockRecorder) RootHTTPClient() *MockDeployerAPIRootHTTPClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootHTTPClient", reflect.TypeOf((*MockDeployerAPI)(nil).RootHTTPClient))
	return &MockDeployerAPIRootHTTPClientCall{Call: call}
}

// MockDeployerAPIRootHTTPClientCall wrap *gomock.Call
type MockDeployerAPIRootHTTPClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIRootHTTPClientCall) Return(arg0 *httprequest.Client, arg1 error) *MockDeployerAPIRootHTTPClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIRootHTTPClientCall) Do(f func() (*httprequest.Client, error)) *MockDeployerAPIRootHTTPClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIRootHTTPClientCall) DoAndReturn(f func() (*httprequest.Client, error)) *MockDeployerAPIRootHTTPClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScaleApplication mocks base method.
func (m *MockDeployerAPI) ScaleApplication(arg0 context.Context, arg1 application.ScaleApplicationParams) (params.ScaleApplicationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleApplication", arg0, arg1)
	ret0, _ := ret[0].(params.ScaleApplicationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleApplication indicates an expected call of ScaleApplication.
func (mr *MockDeployerAPIMockRecorder) ScaleApplication(arg0, arg1 any) *MockDeployerAPIScaleApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleApplication", reflect.TypeOf((*MockDeployerAPI)(nil).ScaleApplication), arg0, arg1)
	return &MockDeployerAPIScaleApplicationCall{Call: call}
}

// MockDeployerAPIScaleApplicationCall wrap *gomock.Call
type MockDeployerAPIScaleApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIScaleApplicationCall) Return(arg0 params.ScaleApplicationResult, arg1 error) *MockDeployerAPIScaleApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIScaleApplicationCall) Do(f func(context.Context, application.ScaleApplicationParams) (params.ScaleApplicationResult, error)) *MockDeployerAPIScaleApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIScaleApplicationCall) DoAndReturn(f func(context.Context, application.ScaleApplicationParams) (params.ScaleApplicationResult, error)) *MockDeployerAPIScaleApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sequences mocks base method.
func (m *MockDeployerAPI) Sequences(arg0 context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sequences", arg0)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sequences indicates an expected call of Sequences.
func (mr *MockDeployerAPIMockRecorder) Sequences(arg0 any) *MockDeployerAPISequencesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sequences", reflect.TypeOf((*MockDeployerAPI)(nil).Sequences), arg0)
	return &MockDeployerAPISequencesCall{Call: call}
}

// MockDeployerAPISequencesCall wrap *gomock.Call
type MockDeployerAPISequencesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPISequencesCall) Return(arg0 map[string]int, arg1 error) *MockDeployerAPISequencesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPISequencesCall) Do(f func(context.Context) (map[string]int, error)) *MockDeployerAPISequencesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPISequencesCall) DoAndReturn(f func(context.Context) (map[string]int, error)) *MockDeployerAPISequencesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAnnotation mocks base method.
func (m *MockDeployerAPI) SetAnnotation(arg0 context.Context, arg1 map[string]map[string]string) ([]params.ErrorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAnnotation", arg0, arg1)
	ret0, _ := ret[0].([]params.ErrorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAnnotation indicates an expected call of SetAnnotation.
func (mr *MockDeployerAPIMockRecorder) SetAnnotation(arg0, arg1 any) *MockDeployerAPISetAnnotationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotation", reflect.TypeOf((*MockDeployerAPI)(nil).SetAnnotation), arg0, arg1)
	return &MockDeployerAPISetAnnotationCall{Call: call}
}

// MockDeployerAPISetAnnotationCall wrap *gomock.Call
type MockDeployerAPISetAnnotationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPISetAnnotationCall) Return(arg0 []params.ErrorResult, arg1 error) *MockDeployerAPISetAnnotationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPISetAnnotationCall) Do(f func(context.Context, map[string]map[string]string) ([]params.ErrorResult, error)) *MockDeployerAPISetAnnotationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPISetAnnotationCall) DoAndReturn(f func(context.Context, map[string]map[string]string) ([]params.ErrorResult, error)) *MockDeployerAPISetAnnotationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharm mocks base method.
func (m *MockDeployerAPI) SetCharm(arg0 context.Context, arg1 application.SetCharmConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharm indicates an expected call of SetCharm.
func (mr *MockDeployerAPIMockRecorder) SetCharm(arg0, arg1 any) *MockDeployerAPISetCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharm", reflect.TypeOf((*MockDeployerAPI)(nil).SetCharm), arg0, arg1)
	return &MockDeployerAPISetCharmCall{Call: call}
}

// MockDeployerAPISetCharmCall wrap *gomock.Call
type MockDeployerAPISetCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPISetCharmCall) Return(arg0 error) *MockDeployerAPISetCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPISetCharmCall) Do(f func(context.Context, application.SetCharmConfig) error) *MockDeployerAPISetCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPISetCharmCall) DoAndReturn(f func(context.Context, application.SetCharmConfig) error) *MockDeployerAPISetCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockDeployerAPI) SetConfig(arg0 context.Context, arg1, arg2 string, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockDeployerAPIMockRecorder) SetConfig(arg0, arg1, arg2, arg3 any) *MockDeployerAPISetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockDeployerAPI)(nil).SetConfig), arg0, arg1, arg2, arg3)
	return &MockDeployerAPISetConfigCall{Call: call}
}

// MockDeployerAPISetConfigCall wrap *gomock.Call
type MockDeployerAPISetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPISetConfigCall) Return(arg0 error) *MockDeployerAPISetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPISetConfigCall) Do(f func(context.Context, string, string, map[string]string) error) *MockDeployerAPISetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPISetConfigCall) DoAndReturn(f func(context.Context, string, string, map[string]string) error) *MockDeployerAPISetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConstraints mocks base method.
func (m *MockDeployerAPI) SetConstraints(arg0 context.Context, arg1 string, arg2 constraints.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConstraints", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockDeployerAPIMockRecorder) SetConstraints(arg0, arg1, arg2 any) *MockDeployerAPISetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockDeployerAPI)(nil).SetConstraints), arg0, arg1, arg2)
	return &MockDeployerAPISetConstraintsCall{Call: call}
}

// MockDeployerAPISetConstraintsCall wrap *gomock.Call
type MockDeployerAPISetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPISetConstraintsCall) Return(arg0 error) *MockDeployerAPISetConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPISetConstraintsCall) Do(f func(context.Context, string, constraints.Value) error) *MockDeployerAPISetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPISetConstraintsCall) DoAndReturn(f func(context.Context, string, constraints.Value) error) *MockDeployerAPISetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockDeployerAPI) Status(arg0 context.Context, arg1 *client.StatusArgs) (*params.FullStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*params.FullStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockDeployerAPIMockRecorder) Status(arg0, arg1 any) *MockDeployerAPIStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDeployerAPI)(nil).Status), arg0, arg1)
	return &MockDeployerAPIStatusCall{Call: call}
}

// MockDeployerAPIStatusCall wrap *gomock.Call
type MockDeployerAPIStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployerAPIStatusCall) Return(arg0 *params.FullStatus, arg1 error) *MockDeployerAPIStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployerAPIStatusCall) Do(f func(context.Context, *client.StatusArgs) (*params.FullStatus, error)) *MockDeployerAPIStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployerAPIStatusCall) DoAndReturn(f func(context.Context, *client.StatusArgs) (*params.FullStatus, error)) *MockDeployerAPIStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmReader is a mock of CharmReader interface.
type MockCharmReader struct {
	ctrl     *gomock.Controller
	recorder *MockCharmReaderMockRecorder
}

// MockCharmReaderMockRecorder is the mock recorder for MockCharmReader.
type MockCharmReaderMockRecorder struct {
	mock *MockCharmReader
}

// NewMockCharmReader creates a new mock instance.
func NewMockCharmReader(ctrl *gomock.Controller) *MockCharmReader {
	mock := &MockCharmReader{ctrl: ctrl}
	mock.recorder = &MockCharmReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmReader) EXPECT() *MockCharmReaderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmReader) ISGOMOCK() struct{} {
	return struct{}{}
}

// NewCharmAtPath mocks base method.
func (m *MockCharmReader) NewCharmAtPath(arg0 string) (charm0.Charm, *charm0.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCharmAtPath", arg0)
	ret0, _ := ret[0].(charm0.Charm)
	ret1, _ := ret[1].(*charm0.URL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewCharmAtPath indicates an expected call of NewCharmAtPath.
func (mr *MockCharmReaderMockRecorder) NewCharmAtPath(arg0 any) *MockCharmReaderNewCharmAtPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCharmAtPath", reflect.TypeOf((*MockCharmReader)(nil).NewCharmAtPath), arg0)
	return &MockCharmReaderNewCharmAtPathCall{Call: call}
}

// MockCharmReaderNewCharmAtPathCall wrap *gomock.Call
type MockCharmReaderNewCharmAtPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmReaderNewCharmAtPathCall) Return(arg0 charm0.Charm, arg1 *charm0.URL, arg2 error) *MockCharmReaderNewCharmAtPathCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmReaderNewCharmAtPathCall) Do(f func(string) (charm0.Charm, *charm0.URL, error)) *MockCharmReaderNewCharmAtPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmReaderNewCharmAtPathCall) DoAndReturn(f func(string) (charm0.Charm, *charm0.URL, error)) *MockCharmReaderNewCharmAtPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDeployConfigFlag is a mock of DeployConfigFlag interface.
type MockDeployConfigFlag struct {
	ctrl     *gomock.Controller
	recorder *MockDeployConfigFlagMockRecorder
}

// MockDeployConfigFlagMockRecorder is the mock recorder for MockDeployConfigFlag.
type MockDeployConfigFlagMockRecorder struct {
	mock *MockDeployConfigFlag
}

// NewMockDeployConfigFlag creates a new mock instance.
func NewMockDeployConfigFlag(ctrl *gomock.Controller) *MockDeployConfigFlag {
	mock := &MockDeployConfigFlag{ctrl: ctrl}
	mock.recorder = &MockDeployConfigFlagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployConfigFlag) EXPECT() *MockDeployConfigFlagMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDeployConfigFlag) ISGOMOCK() struct{} {
	return struct{}{}
}

// AbsoluteFileNames mocks base method.
func (m *MockDeployConfigFlag) AbsoluteFileNames(arg0 *cmd.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbsoluteFileNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbsoluteFileNames indicates an expected call of AbsoluteFileNames.
func (mr *MockDeployConfigFlagMockRecorder) AbsoluteFileNames(arg0 any) *MockDeployConfigFlagAbsoluteFileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbsoluteFileNames", reflect.TypeOf((*MockDeployConfigFlag)(nil).AbsoluteFileNames), arg0)
	return &MockDeployConfigFlagAbsoluteFileNamesCall{Call: call}
}

// MockDeployConfigFlagAbsoluteFileNamesCall wrap *gomock.Call
type MockDeployConfigFlagAbsoluteFileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployConfigFlagAbsoluteFileNamesCall) Return(arg0 []string, arg1 error) *MockDeployConfigFlagAbsoluteFileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployConfigFlagAbsoluteFileNamesCall) Do(f func(*cmd.Context) ([]string, error)) *MockDeployConfigFlagAbsoluteFileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployConfigFlagAbsoluteFileNamesCall) DoAndReturn(f func(*cmd.Context) ([]string, error)) *MockDeployConfigFlagAbsoluteFileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadConfigPairs mocks base method.
func (m *MockDeployConfigFlag) ReadConfigPairs(arg0 *cmd.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfigPairs", arg0)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfigPairs indicates an expected call of ReadConfigPairs.
func (mr *MockDeployConfigFlagMockRecorder) ReadConfigPairs(arg0 any) *MockDeployConfigFlagReadConfigPairsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfigPairs", reflect.TypeOf((*MockDeployConfigFlag)(nil).ReadConfigPairs), arg0)
	return &MockDeployConfigFlagReadConfigPairsCall{Call: call}
}

// MockDeployConfigFlagReadConfigPairsCall wrap *gomock.Call
type MockDeployConfigFlagReadConfigPairsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployConfigFlagReadConfigPairsCall) Return(arg0 map[string]any, arg1 error) *MockDeployConfigFlagReadConfigPairsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployConfigFlagReadConfigPairsCall) Do(f func(*cmd.Context) (map[string]any, error)) *MockDeployConfigFlagReadConfigPairsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployConfigFlagReadConfigPairsCall) DoAndReturn(f func(*cmd.Context) (map[string]any, error)) *MockDeployConfigFlagReadConfigPairsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
