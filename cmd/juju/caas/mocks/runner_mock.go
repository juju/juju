// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/caas (interfaces: CommandRunner)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/runner_mock.go github.com/juju/juju/cmd/juju/caas CommandRunner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	exec "github.com/juju/utils/v4/exec"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandRunner is a mock of CommandRunner interface.
type MockCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRunnerMockRecorder
}

// MockCommandRunnerMockRecorder is the mock recorder for MockCommandRunner.
type MockCommandRunnerMockRecorder struct {
	mock *MockCommandRunner
}

// NewMockCommandRunner creates a new mock instance.
func NewMockCommandRunner(ctrl *gomock.Controller) *MockCommandRunner {
	mock := &MockCommandRunner{ctrl: ctrl}
	mock.recorder = &MockCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRunner) EXPECT() *MockCommandRunnerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCommandRunner) ISGOMOCK() struct{} {
	return struct{}{}
}

// RunCommands mocks base method.
func (m *MockCommandRunner) RunCommands(arg0 exec.RunParams) (*exec.ExecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommands", arg0)
	ret0, _ := ret[0].(*exec.ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommands indicates an expected call of RunCommands.
func (mr *MockCommandRunnerMockRecorder) RunCommands(arg0 any) *MockCommandRunnerRunCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommands", reflect.TypeOf((*MockCommandRunner)(nil).RunCommands), arg0)
	return &MockCommandRunnerRunCommandsCall{Call: call}
}

// MockCommandRunnerRunCommandsCall wrap *gomock.Call
type MockCommandRunnerRunCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandRunnerRunCommandsCall) Return(arg0 *exec.ExecResponse, arg1 error) *MockCommandRunnerRunCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandRunnerRunCommandsCall) Do(f func(exec.RunParams) (*exec.ExecResponse, error)) *MockCommandRunnerRunCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandRunnerRunCommandsCall) DoAndReturn(f func(exec.RunParams) (*exec.ExecResponse, error)) *MockCommandRunnerRunCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
