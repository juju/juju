// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/ssh (interfaces: Context)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// GetStderr mocks base method.
func (m *MockContext) GetStderr() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStderr")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// GetStderr indicates an expected call of GetStderr.
func (mr *MockContextMockRecorder) GetStderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStderr", reflect.TypeOf((*MockContext)(nil).GetStderr))
}

// GetStdin mocks base method.
func (m *MockContext) GetStdin() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStdin")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// GetStdin indicates an expected call of GetStdin.
func (mr *MockContextMockRecorder) GetStdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStdin", reflect.TypeOf((*MockContext)(nil).GetStdin))
}

// GetStdout mocks base method.
func (m *MockContext) GetStdout() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStdout")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// GetStdout indicates an expected call of GetStdout.
func (mr *MockContextMockRecorder) GetStdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStdout", reflect.TypeOf((*MockContext)(nil).GetStdout))
}

// InterruptNotify mocks base method.
func (m *MockContext) InterruptNotify(arg0 chan<- os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InterruptNotify", arg0)
}

// InterruptNotify indicates an expected call of InterruptNotify.
func (mr *MockContextMockRecorder) InterruptNotify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterruptNotify", reflect.TypeOf((*MockContext)(nil).InterruptNotify), arg0)
}

// StopInterruptNotify mocks base method.
func (m *MockContext) StopInterruptNotify(arg0 chan<- os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopInterruptNotify", arg0)
}

// StopInterruptNotify indicates an expected call of StopInterruptNotify.
func (mr *MockContextMockRecorder) StopInterruptNotify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInterruptNotify", reflect.TypeOf((*MockContext)(nil).StopInterruptNotify), arg0)
}
