// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/ssh (interfaces: Context,LeaderAPI,SSHClientAPI,SSHControllerAPI,StatusClientAPI,CloudCredentialAPI,ApplicationAPI,CharmAPI,ModelCommand)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/package_mock.go github.com/juju/juju/cmd/juju/ssh Context,LeaderAPI,SSHClientAPI,SSHControllerAPI,StatusClientAPI,CloudCredentialAPI,ApplicationAPI,CharmAPI,ModelCommand
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	os "os"
	reflect "reflect"
	time "time"

	api "github.com/juju/juju/api"
	application "github.com/juju/juju/api/client/application"
	client "github.com/juju/juju/api/client/client"
	charm "github.com/juju/juju/api/common/charm"
	charms "github.com/juju/juju/api/common/charms"
	cloud "github.com/juju/juju/cloud"
	controller "github.com/juju/juju/controller"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	charm0 "github.com/juju/juju/internal/charm"
	jujuclient "github.com/juju/juju/jujuclient"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// Deadline mocks base method.
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextMockRecorder) Deadline() *MockContextDeadlineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
	return &MockContextDeadlineCall{Call: call}
}

// MockContextDeadlineCall wrap *gomock.Call
type MockContextDeadlineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDeadlineCall) Return(arg0 time.Time, arg1 bool) *MockContextDeadlineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDeadlineCall) Do(f func() (time.Time, bool)) *MockContextDeadlineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDeadlineCall) DoAndReturn(f func() (time.Time, bool)) *MockContextDeadlineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextMockRecorder) Done() *MockContextDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
	return &MockContextDoneCall{Call: call}
}

// MockContextDoneCall wrap *gomock.Call
type MockContextDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDoneCall) Return(arg0 <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDoneCall) Do(f func() <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDoneCall) DoAndReturn(f func() <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Err mocks base method.
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err() *MockContextErrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
	return &MockContextErrCall{Call: call}
}

// MockContextErrCall wrap *gomock.Call
type MockContextErrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextErrCall) Return(arg0 error) *MockContextErrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextErrCall) Do(f func() error) *MockContextErrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextErrCall) DoAndReturn(f func() error) *MockContextErrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStderr mocks base method.
func (m *MockContext) GetStderr() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStderr")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// GetStderr indicates an expected call of GetStderr.
func (mr *MockContextMockRecorder) GetStderr() *MockContextGetStderrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStderr", reflect.TypeOf((*MockContext)(nil).GetStderr))
	return &MockContextGetStderrCall{Call: call}
}

// MockContextGetStderrCall wrap *gomock.Call
type MockContextGetStderrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGetStderrCall) Return(arg0 io.Writer) *MockContextGetStderrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGetStderrCall) Do(f func() io.Writer) *MockContextGetStderrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGetStderrCall) DoAndReturn(f func() io.Writer) *MockContextGetStderrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStdin mocks base method.
func (m *MockContext) GetStdin() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStdin")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// GetStdin indicates an expected call of GetStdin.
func (mr *MockContextMockRecorder) GetStdin() *MockContextGetStdinCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStdin", reflect.TypeOf((*MockContext)(nil).GetStdin))
	return &MockContextGetStdinCall{Call: call}
}

// MockContextGetStdinCall wrap *gomock.Call
type MockContextGetStdinCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGetStdinCall) Return(arg0 io.Reader) *MockContextGetStdinCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGetStdinCall) Do(f func() io.Reader) *MockContextGetStdinCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGetStdinCall) DoAndReturn(f func() io.Reader) *MockContextGetStdinCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStdout mocks base method.
func (m *MockContext) GetStdout() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStdout")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// GetStdout indicates an expected call of GetStdout.
func (mr *MockContextMockRecorder) GetStdout() *MockContextGetStdoutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStdout", reflect.TypeOf((*MockContext)(nil).GetStdout))
	return &MockContextGetStdoutCall{Call: call}
}

// MockContextGetStdoutCall wrap *gomock.Call
type MockContextGetStdoutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGetStdoutCall) Return(arg0 io.Writer) *MockContextGetStdoutCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGetStdoutCall) Do(f func() io.Writer) *MockContextGetStdoutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGetStdoutCall) DoAndReturn(f func() io.Writer) *MockContextGetStdoutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InterruptNotify mocks base method.
func (m *MockContext) InterruptNotify(arg0 chan<- os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InterruptNotify", arg0)
}

// InterruptNotify indicates an expected call of InterruptNotify.
func (mr *MockContextMockRecorder) InterruptNotify(arg0 any) *MockContextInterruptNotifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterruptNotify", reflect.TypeOf((*MockContext)(nil).InterruptNotify), arg0)
	return &MockContextInterruptNotifyCall{Call: call}
}

// MockContextInterruptNotifyCall wrap *gomock.Call
type MockContextInterruptNotifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextInterruptNotifyCall) Return() *MockContextInterruptNotifyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextInterruptNotifyCall) Do(f func(chan<- os.Signal)) *MockContextInterruptNotifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextInterruptNotifyCall) DoAndReturn(f func(chan<- os.Signal)) *MockContextInterruptNotifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopInterruptNotify mocks base method.
func (m *MockContext) StopInterruptNotify(arg0 chan<- os.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopInterruptNotify", arg0)
}

// StopInterruptNotify indicates an expected call of StopInterruptNotify.
func (mr *MockContextMockRecorder) StopInterruptNotify(arg0 any) *MockContextStopInterruptNotifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInterruptNotify", reflect.TypeOf((*MockContext)(nil).StopInterruptNotify), arg0)
	return &MockContextStopInterruptNotifyCall{Call: call}
}

// MockContextStopInterruptNotifyCall wrap *gomock.Call
type MockContextStopInterruptNotifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextStopInterruptNotifyCall) Return() *MockContextStopInterruptNotifyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextStopInterruptNotifyCall) Do(f func(chan<- os.Signal)) *MockContextStopInterruptNotifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextStopInterruptNotifyCall) DoAndReturn(f func(chan<- os.Signal)) *MockContextStopInterruptNotifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockContext) Value(arg0 any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextMockRecorder) Value(arg0 any) *MockContextValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), arg0)
	return &MockContextValueCall{Call: call}
}

// MockContextValueCall wrap *gomock.Call
type MockContextValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextValueCall) Return(arg0 any) *MockContextValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextValueCall) Do(f func(any) any) *MockContextValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextValueCall) DoAndReturn(f func(any) any) *MockContextValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeaderAPI is a mock of LeaderAPI interface.
type MockLeaderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderAPIMockRecorder
}

// MockLeaderAPIMockRecorder is the mock recorder for MockLeaderAPI.
type MockLeaderAPIMockRecorder struct {
	mock *MockLeaderAPI
}

// NewMockLeaderAPI creates a new mock instance.
func NewMockLeaderAPI(ctrl *gomock.Controller) *MockLeaderAPI {
	mock := &MockLeaderAPI{ctrl: ctrl}
	mock.recorder = &MockLeaderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderAPI) EXPECT() *MockLeaderAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLeaderAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockLeaderAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLeaderAPIMockRecorder) Close() *MockLeaderAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLeaderAPI)(nil).Close))
	return &MockLeaderAPICloseCall{Call: call}
}

// MockLeaderAPICloseCall wrap *gomock.Call
type MockLeaderAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaderAPICloseCall) Return(arg0 error) *MockLeaderAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaderAPICloseCall) Do(f func() error) *MockLeaderAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaderAPICloseCall) DoAndReturn(f func() error) *MockLeaderAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Leader mocks base method.
func (m *MockLeaderAPI) Leader(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leader", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leader indicates an expected call of Leader.
func (mr *MockLeaderAPIMockRecorder) Leader(arg0, arg1 any) *MockLeaderAPILeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockLeaderAPI)(nil).Leader), arg0, arg1)
	return &MockLeaderAPILeaderCall{Call: call}
}

// MockLeaderAPILeaderCall wrap *gomock.Call
type MockLeaderAPILeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaderAPILeaderCall) Return(arg0 string, arg1 error) *MockLeaderAPILeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaderAPILeaderCall) Do(f func(context.Context, string) (string, error)) *MockLeaderAPILeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaderAPILeaderCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockLeaderAPILeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSSHClientAPI is a mock of SSHClientAPI interface.
type MockSSHClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSHClientAPIMockRecorder
}

// MockSSHClientAPIMockRecorder is the mock recorder for MockSSHClientAPI.
type MockSSHClientAPIMockRecorder struct {
	mock *MockSSHClientAPI
}

// NewMockSSHClientAPI creates a new mock instance.
func NewMockSSHClientAPI(ctrl *gomock.Controller) *MockSSHClientAPI {
	mock := &MockSSHClientAPI{ctrl: ctrl}
	mock.recorder = &MockSSHClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHClientAPI) EXPECT() *MockSSHClientAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSSHClientAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// AllAddresses mocks base method.
func (m *MockSSHClientAPI) AllAddresses(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllAddresses", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllAddresses indicates an expected call of AllAddresses.
func (mr *MockSSHClientAPIMockRecorder) AllAddresses(arg0, arg1 any) *MockSSHClientAPIAllAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllAddresses", reflect.TypeOf((*MockSSHClientAPI)(nil).AllAddresses), arg0, arg1)
	return &MockSSHClientAPIAllAddressesCall{Call: call}
}

// MockSSHClientAPIAllAddressesCall wrap *gomock.Call
type MockSSHClientAPIAllAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHClientAPIAllAddressesCall) Return(arg0 []string, arg1 error) *MockSSHClientAPIAllAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHClientAPIAllAddressesCall) Do(f func(context.Context, string) ([]string, error)) *MockSSHClientAPIAllAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHClientAPIAllAddressesCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockSSHClientAPIAllAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockSSHClientAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSSHClientAPIMockRecorder) Close() *MockSSHClientAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSSHClientAPI)(nil).Close))
	return &MockSSHClientAPICloseCall{Call: call}
}

// MockSSHClientAPICloseCall wrap *gomock.Call
type MockSSHClientAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHClientAPICloseCall) Return(arg0 error) *MockSSHClientAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHClientAPICloseCall) Do(f func() error) *MockSSHClientAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHClientAPICloseCall) DoAndReturn(f func() error) *MockSSHClientAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelCredentialForSSH mocks base method.
func (m *MockSSHClientAPI) ModelCredentialForSSH(arg0 context.Context) (cloudspec.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelCredentialForSSH", arg0)
	ret0, _ := ret[0].(cloudspec.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelCredentialForSSH indicates an expected call of ModelCredentialForSSH.
func (mr *MockSSHClientAPIMockRecorder) ModelCredentialForSSH(arg0 any) *MockSSHClientAPIModelCredentialForSSHCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelCredentialForSSH", reflect.TypeOf((*MockSSHClientAPI)(nil).ModelCredentialForSSH), arg0)
	return &MockSSHClientAPIModelCredentialForSSHCall{Call: call}
}

// MockSSHClientAPIModelCredentialForSSHCall wrap *gomock.Call
type MockSSHClientAPIModelCredentialForSSHCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHClientAPIModelCredentialForSSHCall) Return(arg0 cloudspec.CloudSpec, arg1 error) *MockSSHClientAPIModelCredentialForSSHCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHClientAPIModelCredentialForSSHCall) Do(f func(context.Context) (cloudspec.CloudSpec, error)) *MockSSHClientAPIModelCredentialForSSHCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHClientAPIModelCredentialForSSHCall) DoAndReturn(f func(context.Context) (cloudspec.CloudSpec, error)) *MockSSHClientAPIModelCredentialForSSHCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrivateAddress mocks base method.
func (m *MockSSHClientAPI) PrivateAddress(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateAddress", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateAddress indicates an expected call of PrivateAddress.
func (mr *MockSSHClientAPIMockRecorder) PrivateAddress(arg0, arg1 any) *MockSSHClientAPIPrivateAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateAddress", reflect.TypeOf((*MockSSHClientAPI)(nil).PrivateAddress), arg0, arg1)
	return &MockSSHClientAPIPrivateAddressCall{Call: call}
}

// MockSSHClientAPIPrivateAddressCall wrap *gomock.Call
type MockSSHClientAPIPrivateAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHClientAPIPrivateAddressCall) Return(arg0 string, arg1 error) *MockSSHClientAPIPrivateAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHClientAPIPrivateAddressCall) Do(f func(context.Context, string) (string, error)) *MockSSHClientAPIPrivateAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHClientAPIPrivateAddressCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockSSHClientAPIPrivateAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Proxy mocks base method.
func (m *MockSSHClientAPI) Proxy(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proxy", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proxy indicates an expected call of Proxy.
func (mr *MockSSHClientAPIMockRecorder) Proxy(arg0 any) *MockSSHClientAPIProxyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockSSHClientAPI)(nil).Proxy), arg0)
	return &MockSSHClientAPIProxyCall{Call: call}
}

// MockSSHClientAPIProxyCall wrap *gomock.Call
type MockSSHClientAPIProxyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHClientAPIProxyCall) Return(arg0 bool, arg1 error) *MockSSHClientAPIProxyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHClientAPIProxyCall) Do(f func(context.Context) (bool, error)) *MockSSHClientAPIProxyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHClientAPIProxyCall) DoAndReturn(f func(context.Context) (bool, error)) *MockSSHClientAPIProxyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicAddress mocks base method.
func (m *MockSSHClientAPI) PublicAddress(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockSSHClientAPIMockRecorder) PublicAddress(arg0, arg1 any) *MockSSHClientAPIPublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockSSHClientAPI)(nil).PublicAddress), arg0, arg1)
	return &MockSSHClientAPIPublicAddressCall{Call: call}
}

// MockSSHClientAPIPublicAddressCall wrap *gomock.Call
type MockSSHClientAPIPublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHClientAPIPublicAddressCall) Return(arg0 string, arg1 error) *MockSSHClientAPIPublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHClientAPIPublicAddressCall) Do(f func(context.Context, string) (string, error)) *MockSSHClientAPIPublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHClientAPIPublicAddressCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockSSHClientAPIPublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicKeys mocks base method.
func (m *MockSSHClientAPI) PublicKeys(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKeys indicates an expected call of PublicKeys.
func (mr *MockSSHClientAPIMockRecorder) PublicKeys(arg0, arg1 any) *MockSSHClientAPIPublicKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeys", reflect.TypeOf((*MockSSHClientAPI)(nil).PublicKeys), arg0, arg1)
	return &MockSSHClientAPIPublicKeysCall{Call: call}
}

// MockSSHClientAPIPublicKeysCall wrap *gomock.Call
type MockSSHClientAPIPublicKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHClientAPIPublicKeysCall) Return(arg0 []string, arg1 error) *MockSSHClientAPIPublicKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHClientAPIPublicKeysCall) Do(f func(context.Context, string) ([]string, error)) *MockSSHClientAPIPublicKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHClientAPIPublicKeysCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockSSHClientAPIPublicKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSSHControllerAPI is a mock of SSHControllerAPI interface.
type MockSSHControllerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSHControllerAPIMockRecorder
}

// MockSSHControllerAPIMockRecorder is the mock recorder for MockSSHControllerAPI.
type MockSSHControllerAPIMockRecorder struct {
	mock *MockSSHControllerAPI
}

// NewMockSSHControllerAPI creates a new mock instance.
func NewMockSSHControllerAPI(ctrl *gomock.Controller) *MockSSHControllerAPI {
	mock := &MockSSHControllerAPI{ctrl: ctrl}
	mock.recorder = &MockSSHControllerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHControllerAPI) EXPECT() *MockSSHControllerAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSSHControllerAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// ControllerConfig mocks base method.
func (m *MockSSHControllerAPI) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockSSHControllerAPIMockRecorder) ControllerConfig(arg0 any) *MockSSHControllerAPIControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockSSHControllerAPI)(nil).ControllerConfig), arg0)
	return &MockSSHControllerAPIControllerConfigCall{Call: call}
}

// MockSSHControllerAPIControllerConfigCall wrap *gomock.Call
type MockSSHControllerAPIControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHControllerAPIControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockSSHControllerAPIControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHControllerAPIControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockSSHControllerAPIControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHControllerAPIControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockSSHControllerAPIControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusClientAPI is a mock of StatusClientAPI interface.
type MockStatusClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStatusClientAPIMockRecorder
}

// MockStatusClientAPIMockRecorder is the mock recorder for MockStatusClientAPI.
type MockStatusClientAPIMockRecorder struct {
	mock *MockStatusClientAPI
}

// NewMockStatusClientAPI creates a new mock instance.
func NewMockStatusClientAPI(ctrl *gomock.Controller) *MockStatusClientAPI {
	mock := &MockStatusClientAPI{ctrl: ctrl}
	mock.recorder = &MockStatusClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusClientAPI) EXPECT() *MockStatusClientAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStatusClientAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockStatusClientAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStatusClientAPIMockRecorder) Close() *MockStatusClientAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStatusClientAPI)(nil).Close))
	return &MockStatusClientAPICloseCall{Call: call}
}

// MockStatusClientAPICloseCall wrap *gomock.Call
type MockStatusClientAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusClientAPICloseCall) Return(arg0 error) *MockStatusClientAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusClientAPICloseCall) Do(f func() error) *MockStatusClientAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusClientAPICloseCall) DoAndReturn(f func() error) *MockStatusClientAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockStatusClientAPI) Status(arg0 context.Context, arg1 *client.StatusArgs) (*params.FullStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*params.FullStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockStatusClientAPIMockRecorder) Status(arg0, arg1 any) *MockStatusClientAPIStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockStatusClientAPI)(nil).Status), arg0, arg1)
	return &MockStatusClientAPIStatusCall{Call: call}
}

// MockStatusClientAPIStatusCall wrap *gomock.Call
type MockStatusClientAPIStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusClientAPIStatusCall) Return(arg0 *params.FullStatus, arg1 error) *MockStatusClientAPIStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusClientAPIStatusCall) Do(f func(context.Context, *client.StatusArgs) (*params.FullStatus, error)) *MockStatusClientAPIStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusClientAPIStatusCall) DoAndReturn(f func(context.Context, *client.StatusArgs) (*params.FullStatus, error)) *MockStatusClientAPIStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudCredentialAPI is a mock of CloudCredentialAPI interface.
type MockCloudCredentialAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudCredentialAPIMockRecorder
}

// MockCloudCredentialAPIMockRecorder is the mock recorder for MockCloudCredentialAPI.
type MockCloudCredentialAPIMockRecorder struct {
	mock *MockCloudCredentialAPI
}

// NewMockCloudCredentialAPI creates a new mock instance.
func NewMockCloudCredentialAPI(ctrl *gomock.Controller) *MockCloudCredentialAPI {
	mock := &MockCloudCredentialAPI{ctrl: ctrl}
	mock.recorder = &MockCloudCredentialAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudCredentialAPI) EXPECT() *MockCloudCredentialAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudCredentialAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// BestAPIVersion mocks base method.
func (m *MockCloudCredentialAPI) BestAPIVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestAPIVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// BestAPIVersion indicates an expected call of BestAPIVersion.
func (mr *MockCloudCredentialAPIMockRecorder) BestAPIVersion() *MockCloudCredentialAPIBestAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestAPIVersion", reflect.TypeOf((*MockCloudCredentialAPI)(nil).BestAPIVersion))
	return &MockCloudCredentialAPIBestAPIVersionCall{Call: call}
}

// MockCloudCredentialAPIBestAPIVersionCall wrap *gomock.Call
type MockCloudCredentialAPIBestAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudCredentialAPIBestAPIVersionCall) Return(arg0 int) *MockCloudCredentialAPIBestAPIVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudCredentialAPIBestAPIVersionCall) Do(f func() int) *MockCloudCredentialAPIBestAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudCredentialAPIBestAPIVersionCall) DoAndReturn(f func() int) *MockCloudCredentialAPIBestAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockCloudCredentialAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloudCredentialAPIMockRecorder) Close() *MockCloudCredentialAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloudCredentialAPI)(nil).Close))
	return &MockCloudCredentialAPICloseCall{Call: call}
}

// MockCloudCredentialAPICloseCall wrap *gomock.Call
type MockCloudCredentialAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudCredentialAPICloseCall) Return(arg0 error) *MockCloudCredentialAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudCredentialAPICloseCall) Do(f func() error) *MockCloudCredentialAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudCredentialAPICloseCall) DoAndReturn(f func() error) *MockCloudCredentialAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cloud mocks base method.
func (m *MockCloudCredentialAPI) Cloud(arg0 names.CloudTag) (cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", arg0)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud.
func (mr *MockCloudCredentialAPIMockRecorder) Cloud(arg0 any) *MockCloudCredentialAPICloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockCloudCredentialAPI)(nil).Cloud), arg0)
	return &MockCloudCredentialAPICloudCall{Call: call}
}

// MockCloudCredentialAPICloudCall wrap *gomock.Call
type MockCloudCredentialAPICloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudCredentialAPICloudCall) Return(arg0 cloud.Cloud, arg1 error) *MockCloudCredentialAPICloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudCredentialAPICloudCall) Do(f func(names.CloudTag) (cloud.Cloud, error)) *MockCloudCredentialAPICloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudCredentialAPICloudCall) DoAndReturn(f func(names.CloudTag) (cloud.Cloud, error)) *MockCloudCredentialAPICloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CredentialContents mocks base method.
func (m *MockCloudCredentialAPI) CredentialContents(arg0, arg1 string, arg2 bool) ([]params.CredentialContentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialContents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]params.CredentialContentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialContents indicates an expected call of CredentialContents.
func (mr *MockCloudCredentialAPIMockRecorder) CredentialContents(arg0, arg1, arg2 any) *MockCloudCredentialAPICredentialContentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialContents", reflect.TypeOf((*MockCloudCredentialAPI)(nil).CredentialContents), arg0, arg1, arg2)
	return &MockCloudCredentialAPICredentialContentsCall{Call: call}
}

// MockCloudCredentialAPICredentialContentsCall wrap *gomock.Call
type MockCloudCredentialAPICredentialContentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudCredentialAPICredentialContentsCall) Return(arg0 []params.CredentialContentResult, arg1 error) *MockCloudCredentialAPICredentialContentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudCredentialAPICredentialContentsCall) Do(f func(string, string, bool) ([]params.CredentialContentResult, error)) *MockCloudCredentialAPICredentialContentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudCredentialAPICredentialContentsCall) DoAndReturn(f func(string, string, bool) ([]params.CredentialContentResult, error)) *MockCloudCredentialAPICredentialContentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationAPI is a mock of ApplicationAPI interface.
type MockApplicationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationAPIMockRecorder
}

// MockApplicationAPIMockRecorder is the mock recorder for MockApplicationAPI.
type MockApplicationAPIMockRecorder struct {
	mock *MockApplicationAPI
}

// NewMockApplicationAPI creates a new mock instance.
func NewMockApplicationAPI(ctrl *gomock.Controller) *MockApplicationAPI {
	mock := &MockApplicationAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationAPI) EXPECT() *MockApplicationAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplicationAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockApplicationAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockApplicationAPIMockRecorder) Close() *MockApplicationAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockApplicationAPI)(nil).Close))
	return &MockApplicationAPICloseCall{Call: call}
}

// MockApplicationAPICloseCall wrap *gomock.Call
type MockApplicationAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPICloseCall) Return(arg0 error) *MockApplicationAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPICloseCall) Do(f func() error) *MockApplicationAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPICloseCall) DoAndReturn(f func() error) *MockApplicationAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmURLOrigin mocks base method.
func (m *MockApplicationAPI) GetCharmURLOrigin(arg0 context.Context, arg1 string) (*charm0.URL, charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmURLOrigin", arg0, arg1)
	ret0, _ := ret[0].(*charm0.URL)
	ret1, _ := ret[1].(charm.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmURLOrigin indicates an expected call of GetCharmURLOrigin.
func (mr *MockApplicationAPIMockRecorder) GetCharmURLOrigin(arg0, arg1 any) *MockApplicationAPIGetCharmURLOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmURLOrigin", reflect.TypeOf((*MockApplicationAPI)(nil).GetCharmURLOrigin), arg0, arg1)
	return &MockApplicationAPIGetCharmURLOriginCall{Call: call}
}

// MockApplicationAPIGetCharmURLOriginCall wrap *gomock.Call
type MockApplicationAPIGetCharmURLOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIGetCharmURLOriginCall) Return(arg0 *charm0.URL, arg1 charm.Origin, arg2 error) *MockApplicationAPIGetCharmURLOriginCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIGetCharmURLOriginCall) Do(f func(context.Context, string) (*charm0.URL, charm.Origin, error)) *MockApplicationAPIGetCharmURLOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIGetCharmURLOriginCall) DoAndReturn(f func(context.Context, string) (*charm0.URL, charm.Origin, error)) *MockApplicationAPIGetCharmURLOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Leader mocks base method.
func (m *MockApplicationAPI) Leader(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leader", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leader indicates an expected call of Leader.
func (mr *MockApplicationAPIMockRecorder) Leader(arg0, arg1 any) *MockApplicationAPILeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockApplicationAPI)(nil).Leader), arg0, arg1)
	return &MockApplicationAPILeaderCall{Call: call}
}

// MockApplicationAPILeaderCall wrap *gomock.Call
type MockApplicationAPILeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPILeaderCall) Return(arg0 string, arg1 error) *MockApplicationAPILeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPILeaderCall) Do(f func(context.Context, string) (string, error)) *MockApplicationAPILeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPILeaderCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockApplicationAPILeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitsInfo mocks base method.
func (m *MockApplicationAPI) UnitsInfo(arg0 context.Context, arg1 []names.UnitTag) ([]application.UnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitsInfo", arg0, arg1)
	ret0, _ := ret[0].([]application.UnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitsInfo indicates an expected call of UnitsInfo.
func (mr *MockApplicationAPIMockRecorder) UnitsInfo(arg0, arg1 any) *MockApplicationAPIUnitsInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitsInfo", reflect.TypeOf((*MockApplicationAPI)(nil).UnitsInfo), arg0, arg1)
	return &MockApplicationAPIUnitsInfoCall{Call: call}
}

// MockApplicationAPIUnitsInfoCall wrap *gomock.Call
type MockApplicationAPIUnitsInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationAPIUnitsInfoCall) Return(arg0 []application.UnitInfo, arg1 error) *MockApplicationAPIUnitsInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationAPIUnitsInfoCall) Do(f func(context.Context, []names.UnitTag) ([]application.UnitInfo, error)) *MockApplicationAPIUnitsInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationAPIUnitsInfoCall) DoAndReturn(f func(context.Context, []names.UnitTag) ([]application.UnitInfo, error)) *MockApplicationAPIUnitsInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmAPI is a mock of CharmAPI interface.
type MockCharmAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCharmAPIMockRecorder
}

// MockCharmAPIMockRecorder is the mock recorder for MockCharmAPI.
type MockCharmAPIMockRecorder struct {
	mock *MockCharmAPI
}

// NewMockCharmAPI creates a new mock instance.
func NewMockCharmAPI(ctrl *gomock.Controller) *MockCharmAPI {
	mock := &MockCharmAPI{ctrl: ctrl}
	mock.recorder = &MockCharmAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmAPI) EXPECT() *MockCharmAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// CharmInfo mocks base method.
func (m *MockCharmAPI) CharmInfo(arg0 context.Context, arg1 string) (*charms.CharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmInfo", arg0, arg1)
	ret0, _ := ret[0].(*charms.CharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmInfo indicates an expected call of CharmInfo.
func (mr *MockCharmAPIMockRecorder) CharmInfo(arg0, arg1 any) *MockCharmAPICharmInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmInfo", reflect.TypeOf((*MockCharmAPI)(nil).CharmInfo), arg0, arg1)
	return &MockCharmAPICharmInfoCall{Call: call}
}

// MockCharmAPICharmInfoCall wrap *gomock.Call
type MockCharmAPICharmInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAPICharmInfoCall) Return(arg0 *charms.CharmInfo, arg1 error) *MockCharmAPICharmInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAPICharmInfoCall) Do(f func(context.Context, string) (*charms.CharmInfo, error)) *MockCharmAPICharmInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAPICharmInfoCall) DoAndReturn(f func(context.Context, string) (*charms.CharmInfo, error)) *MockCharmAPICharmInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockCharmAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCharmAPIMockRecorder) Close() *MockCharmAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCharmAPI)(nil).Close))
	return &MockCharmAPICloseCall{Call: call}
}

// MockCharmAPICloseCall wrap *gomock.Call
type MockCharmAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAPICloseCall) Return(arg0 error) *MockCharmAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAPICloseCall) Do(f func() error) *MockCharmAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAPICloseCall) DoAndReturn(f func() error) *MockCharmAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelCommand is a mock of ModelCommand interface.
type MockModelCommand struct {
	ctrl     *gomock.Controller
	recorder *MockModelCommandMockRecorder
}

// MockModelCommandMockRecorder is the mock recorder for MockModelCommand.
type MockModelCommandMockRecorder struct {
	mock *MockModelCommand
}

// NewMockModelCommand creates a new mock instance.
func NewMockModelCommand(ctrl *gomock.Controller) *MockModelCommand {
	mock := &MockModelCommand{ctrl: ctrl}
	mock.recorder = &MockModelCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelCommand) EXPECT() *MockModelCommandMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelCommand) ISGOMOCK() struct{} {
	return struct{}{}
}

// ModelDetails mocks base method.
func (m *MockModelCommand) ModelDetails(arg0 context.Context) (string, *jujuclient.ModelDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelDetails", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*jujuclient.ModelDetails)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ModelDetails indicates an expected call of ModelDetails.
func (mr *MockModelCommandMockRecorder) ModelDetails(arg0 any) *MockModelCommandModelDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelDetails", reflect.TypeOf((*MockModelCommand)(nil).ModelDetails), arg0)
	return &MockModelCommandModelDetailsCall{Call: call}
}

// MockModelCommandModelDetailsCall wrap *gomock.Call
type MockModelCommandModelDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCommandModelDetailsCall) Return(arg0 string, arg1 *jujuclient.ModelDetails, arg2 error) *MockModelCommandModelDetailsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCommandModelDetailsCall) Do(f func(context.Context) (string, *jujuclient.ModelDetails, error)) *MockModelCommandModelDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCommandModelDetailsCall) DoAndReturn(f func(context.Context) (string, *jujuclient.ModelDetails, error)) *MockModelCommandModelDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelIdentifier mocks base method.
func (m *MockModelCommand) ModelIdentifier() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelIdentifier")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelIdentifier indicates an expected call of ModelIdentifier.
func (mr *MockModelCommandMockRecorder) ModelIdentifier() *MockModelCommandModelIdentifierCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelIdentifier", reflect.TypeOf((*MockModelCommand)(nil).ModelIdentifier))
	return &MockModelCommandModelIdentifierCall{Call: call}
}

// MockModelCommandModelIdentifierCall wrap *gomock.Call
type MockModelCommandModelIdentifierCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCommandModelIdentifierCall) Return(arg0 string, arg1 error) *MockModelCommandModelIdentifierCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCommandModelIdentifierCall) Do(f func() (string, error)) *MockModelCommandModelIdentifierCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCommandModelIdentifierCall) DoAndReturn(f func() (string, error)) *MockModelCommandModelIdentifierCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewAPIClient mocks base method.
func (m *MockModelCommand) NewAPIClient(arg0 context.Context) (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAPIClient", arg0)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAPIClient indicates an expected call of NewAPIClient.
func (mr *MockModelCommandMockRecorder) NewAPIClient(arg0 any) *MockModelCommandNewAPIClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAPIClient", reflect.TypeOf((*MockModelCommand)(nil).NewAPIClient), arg0)
	return &MockModelCommandNewAPIClientCall{Call: call}
}

// MockModelCommandNewAPIClientCall wrap *gomock.Call
type MockModelCommandNewAPIClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCommandNewAPIClientCall) Return(arg0 *client.Client, arg1 error) *MockModelCommandNewAPIClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCommandNewAPIClientCall) Do(f func(context.Context) (*client.Client, error)) *MockModelCommandNewAPIClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCommandNewAPIClientCall) DoAndReturn(f func(context.Context) (*client.Client, error)) *MockModelCommandNewAPIClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewAPIRoot mocks base method.
func (m *MockModelCommand) NewAPIRoot(arg0 context.Context) (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAPIRoot", arg0)
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAPIRoot indicates an expected call of NewAPIRoot.
func (mr *MockModelCommandMockRecorder) NewAPIRoot(arg0 any) *MockModelCommandNewAPIRootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAPIRoot", reflect.TypeOf((*MockModelCommand)(nil).NewAPIRoot), arg0)
	return &MockModelCommandNewAPIRootCall{Call: call}
}

// MockModelCommandNewAPIRootCall wrap *gomock.Call
type MockModelCommandNewAPIRootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCommandNewAPIRootCall) Return(arg0 api.Connection, arg1 error) *MockModelCommandNewAPIRootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCommandNewAPIRootCall) Do(f func(context.Context) (api.Connection, error)) *MockModelCommandNewAPIRootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCommandNewAPIRootCall) DoAndReturn(f func(context.Context) (api.Connection, error)) *MockModelCommandNewAPIRootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewControllerAPIRoot mocks base method.
func (m *MockModelCommand) NewControllerAPIRoot(arg0 context.Context) (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewControllerAPIRoot", arg0)
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewControllerAPIRoot indicates an expected call of NewControllerAPIRoot.
func (mr *MockModelCommandMockRecorder) NewControllerAPIRoot(arg0 any) *MockModelCommandNewControllerAPIRootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewControllerAPIRoot", reflect.TypeOf((*MockModelCommand)(nil).NewControllerAPIRoot), arg0)
	return &MockModelCommandNewControllerAPIRootCall{Call: call}
}

// MockModelCommandNewControllerAPIRootCall wrap *gomock.Call
type MockModelCommandNewControllerAPIRootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCommandNewControllerAPIRootCall) Return(arg0 api.Connection, arg1 error) *MockModelCommandNewControllerAPIRootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCommandNewControllerAPIRootCall) Do(f func(context.Context) (api.Connection, error)) *MockModelCommandNewControllerAPIRootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCommandNewControllerAPIRootCall) DoAndReturn(f func(context.Context) (api.Connection, error)) *MockModelCommandNewControllerAPIRootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
