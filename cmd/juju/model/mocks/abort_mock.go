// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/model (interfaces: AbortCommandAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAbortCommandAPI is a mock of AbortCommandAPI interface
type MockAbortCommandAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAbortCommandAPIMockRecorder
}

// MockAbortCommandAPIMockRecorder is the mock recorder for MockAbortCommandAPI
type MockAbortCommandAPIMockRecorder struct {
	mock *MockAbortCommandAPI
}

// NewMockAbortCommandAPI creates a new mock instance
func NewMockAbortCommandAPI(ctrl *gomock.Controller) *MockAbortCommandAPI {
	mock := &MockAbortCommandAPI{ctrl: ctrl}
	mock.recorder = &MockAbortCommandAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAbortCommandAPI) EXPECT() *MockAbortCommandAPIMockRecorder {
	return m.recorder
}

// AbortBranch mocks base method
func (m *MockAbortCommandAPI) AbortBranch(arg0 string) error {
	ret := m.ctrl.Call(m, "AbortBranch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortBranch indicates an expected call of AbortBranch
func (mr *MockAbortCommandAPIMockRecorder) AbortBranch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortBranch", reflect.TypeOf((*MockAbortCommandAPI)(nil).AbortBranch), arg0)
}

// Close mocks base method
func (m *MockAbortCommandAPI) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAbortCommandAPIMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAbortCommandAPI)(nil).Close))
}

// HasActiveBranch mocks base method
func (m *MockAbortCommandAPI) HasActiveBranch(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "HasActiveBranch", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasActiveBranch indicates an expected call of HasActiveBranch
func (mr *MockAbortCommandAPIMockRecorder) HasActiveBranch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveBranch", reflect.TypeOf((*MockAbortCommandAPI)(nil).HasActiveBranch), arg0)
}
