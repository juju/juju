// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/annotations (interfaces: GetAnnotationsAPI,SetAnnotationsAPI)
//
// Generated by this command:
//
//	mockgen -package annotations_test -destination mocks_test.go github.com/juju/juju/cmd/juju/annotations GetAnnotationsAPI,SetAnnotationsAPI
//

// Package annotations_test is a generated GoMock package.
package annotations_test

import (
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockGetAnnotationsAPI is a mock of GetAnnotationsAPI interface.
type MockGetAnnotationsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGetAnnotationsAPIMockRecorder
}

// MockGetAnnotationsAPIMockRecorder is the mock recorder for MockGetAnnotationsAPI.
type MockGetAnnotationsAPIMockRecorder struct {
	mock *MockGetAnnotationsAPI
}

// NewMockGetAnnotationsAPI creates a new mock instance.
func NewMockGetAnnotationsAPI(ctrl *gomock.Controller) *MockGetAnnotationsAPI {
	mock := &MockGetAnnotationsAPI{ctrl: ctrl}
	mock.recorder = &MockGetAnnotationsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAnnotationsAPI) EXPECT() *MockGetAnnotationsAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGetAnnotationsAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGetAnnotationsAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGetAnnotationsAPI)(nil).Close))
}

// Get mocks base method.
func (m *MockGetAnnotationsAPI) Get(arg0 []string) ([]params.AnnotationsGetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]params.AnnotationsGetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetAnnotationsAPIMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetAnnotationsAPI)(nil).Get), arg0)
}

// MockSetAnnotationsAPI is a mock of SetAnnotationsAPI interface.
type MockSetAnnotationsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSetAnnotationsAPIMockRecorder
}

// MockSetAnnotationsAPIMockRecorder is the mock recorder for MockSetAnnotationsAPI.
type MockSetAnnotationsAPIMockRecorder struct {
	mock *MockSetAnnotationsAPI
}

// NewMockSetAnnotationsAPI creates a new mock instance.
func NewMockSetAnnotationsAPI(ctrl *gomock.Controller) *MockSetAnnotationsAPI {
	mock := &MockSetAnnotationsAPI{ctrl: ctrl}
	mock.recorder = &MockSetAnnotationsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetAnnotationsAPI) EXPECT() *MockSetAnnotationsAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSetAnnotationsAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSetAnnotationsAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSetAnnotationsAPI)(nil).Close))
}

// Set mocks base method.
func (m *MockSetAnnotationsAPI) Set(arg0 map[string]map[string]string) ([]params.ErrorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].([]params.ErrorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockSetAnnotationsAPIMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetAnnotationsAPI)(nil).Set), arg0)
}
