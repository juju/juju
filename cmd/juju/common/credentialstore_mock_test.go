// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/jujuclient (interfaces: CredentialStore)
//
// Generated by this command:
//
//	mockgen -typed -package common -destination credentialstore_mock_test.go github.com/juju/juju/jujuclient CredentialStore
//

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"

	cloud "github.com/juju/juju/cloud"
	gomock "go.uber.org/mock/gomock"
)

// MockCredentialStore is a mock of CredentialStore interface.
type MockCredentialStore struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialStoreMockRecorder
}

// MockCredentialStoreMockRecorder is the mock recorder for MockCredentialStore.
type MockCredentialStoreMockRecorder struct {
	mock *MockCredentialStore
}

// NewMockCredentialStore creates a new mock instance.
func NewMockCredentialStore(ctrl *gomock.Controller) *MockCredentialStore {
	mock := &MockCredentialStore{ctrl: ctrl}
	mock.recorder = &MockCredentialStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialStore) EXPECT() *MockCredentialStoreMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCredentialStore) ISGOMOCK() struct{} {
	return struct{}{}
}

// AllCredentials mocks base method.
func (m *MockCredentialStore) AllCredentials() (map[string]cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCredentials")
	ret0, _ := ret[0].(map[string]cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCredentials indicates an expected call of AllCredentials.
func (mr *MockCredentialStoreMockRecorder) AllCredentials() *MockCredentialStoreAllCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCredentials", reflect.TypeOf((*MockCredentialStore)(nil).AllCredentials))
	return &MockCredentialStoreAllCredentialsCall{Call: call}
}

// MockCredentialStoreAllCredentialsCall wrap *gomock.Call
type MockCredentialStoreAllCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialStoreAllCredentialsCall) Return(arg0 map[string]cloud.CloudCredential, arg1 error) *MockCredentialStoreAllCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialStoreAllCredentialsCall) Do(f func() (map[string]cloud.CloudCredential, error)) *MockCredentialStoreAllCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialStoreAllCredentialsCall) DoAndReturn(f func() (map[string]cloud.CloudCredential, error)) *MockCredentialStoreAllCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CredentialForCloud mocks base method.
func (m *MockCredentialStore) CredentialForCloud(arg0 string) (*cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialForCloud", arg0)
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialForCloud indicates an expected call of CredentialForCloud.
func (mr *MockCredentialStoreMockRecorder) CredentialForCloud(arg0 any) *MockCredentialStoreCredentialForCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialForCloud", reflect.TypeOf((*MockCredentialStore)(nil).CredentialForCloud), arg0)
	return &MockCredentialStoreCredentialForCloudCall{Call: call}
}

// MockCredentialStoreCredentialForCloudCall wrap *gomock.Call
type MockCredentialStoreCredentialForCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialStoreCredentialForCloudCall) Return(arg0 *cloud.CloudCredential, arg1 error) *MockCredentialStoreCredentialForCloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialStoreCredentialForCloudCall) Do(f func(string) (*cloud.CloudCredential, error)) *MockCredentialStoreCredentialForCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialStoreCredentialForCloudCall) DoAndReturn(f func(string) (*cloud.CloudCredential, error)) *MockCredentialStoreCredentialForCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCredential mocks base method.
func (m *MockCredentialStore) UpdateCredential(arg0 string, arg1 cloud.CloudCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockCredentialStoreMockRecorder) UpdateCredential(arg0, arg1 any) *MockCredentialStoreUpdateCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockCredentialStore)(nil).UpdateCredential), arg0, arg1)
	return &MockCredentialStoreUpdateCredentialCall{Call: call}
}

// MockCredentialStoreUpdateCredentialCall wrap *gomock.Call
type MockCredentialStoreUpdateCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialStoreUpdateCredentialCall) Return(arg0 error) *MockCredentialStoreUpdateCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialStoreUpdateCredentialCall) Do(f func(string, cloud.CloudCredential) error) *MockCredentialStoreUpdateCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialStoreUpdateCredentialCall) DoAndReturn(f func(string, cloud.CloudCredential) error) *MockCredentialStoreUpdateCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
