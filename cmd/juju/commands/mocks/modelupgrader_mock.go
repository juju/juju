// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/commands (interfaces: ModelUpgraderAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/modelupgrader_mock.go github.com/juju/juju/cmd/juju/commands ModelUpgraderAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	tools "github.com/juju/juju/internal/tools"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockModelUpgraderAPI is a mock of ModelUpgraderAPI interface.
type MockModelUpgraderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockModelUpgraderAPIMockRecorder
}

// MockModelUpgraderAPIMockRecorder is the mock recorder for MockModelUpgraderAPI.
type MockModelUpgraderAPIMockRecorder struct {
	mock *MockModelUpgraderAPI
}

// NewMockModelUpgraderAPI creates a new mock instance.
func NewMockModelUpgraderAPI(ctrl *gomock.Controller) *MockModelUpgraderAPI {
	mock := &MockModelUpgraderAPI{ctrl: ctrl}
	mock.recorder = &MockModelUpgraderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelUpgraderAPI) EXPECT() *MockModelUpgraderAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelUpgraderAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockModelUpgraderAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModelUpgraderAPIMockRecorder) Close() *MockModelUpgraderAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelUpgraderAPI)(nil).Close))
	return &MockModelUpgraderAPICloseCall{Call: call}
}

// MockModelUpgraderAPICloseCall wrap *gomock.Call
type MockModelUpgraderAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelUpgraderAPICloseCall) Return(arg0 error) *MockModelUpgraderAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelUpgraderAPICloseCall) Do(f func() error) *MockModelUpgraderAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelUpgraderAPICloseCall) DoAndReturn(f func() error) *MockModelUpgraderAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeModel mocks base method.
func (m *MockModelUpgraderAPI) UpgradeModel(arg0 context.Context, arg1 string, arg2 version.Number, arg3 string, arg4, arg5 bool) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeModel", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeModel indicates an expected call of UpgradeModel.
func (mr *MockModelUpgraderAPIMockRecorder) UpgradeModel(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockModelUpgraderAPIUpgradeModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeModel", reflect.TypeOf((*MockModelUpgraderAPI)(nil).UpgradeModel), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockModelUpgraderAPIUpgradeModelCall{Call: call}
}

// MockModelUpgraderAPIUpgradeModelCall wrap *gomock.Call
type MockModelUpgraderAPIUpgradeModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelUpgraderAPIUpgradeModelCall) Return(arg0 version.Number, arg1 error) *MockModelUpgraderAPIUpgradeModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelUpgraderAPIUpgradeModelCall) Do(f func(context.Context, string, version.Number, string, bool, bool) (version.Number, error)) *MockModelUpgraderAPIUpgradeModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelUpgraderAPIUpgradeModelCall) DoAndReturn(f func(context.Context, string, version.Number, string, bool, bool) (version.Number, error)) *MockModelUpgraderAPIUpgradeModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UploadTools mocks base method.
func (m *MockModelUpgraderAPI) UploadTools(arg0 context.Context, arg1 io.Reader, arg2 version.Binary) (tools.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTools", arg0, arg1, arg2)
	ret0, _ := ret[0].(tools.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTools indicates an expected call of UploadTools.
func (mr *MockModelUpgraderAPIMockRecorder) UploadTools(arg0, arg1, arg2 any) *MockModelUpgraderAPIUploadToolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTools", reflect.TypeOf((*MockModelUpgraderAPI)(nil).UploadTools), arg0, arg1, arg2)
	return &MockModelUpgraderAPIUploadToolsCall{Call: call}
}

// MockModelUpgraderAPIUploadToolsCall wrap *gomock.Call
type MockModelUpgraderAPIUploadToolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelUpgraderAPIUploadToolsCall) Return(arg0 tools.List, arg1 error) *MockModelUpgraderAPIUploadToolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelUpgraderAPIUploadToolsCall) Do(f func(context.Context, io.Reader, version.Binary) (tools.List, error)) *MockModelUpgraderAPIUploadToolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelUpgraderAPIUploadToolsCall) DoAndReturn(f func(context.Context, io.Reader, version.Binary) (tools.List, error)) *MockModelUpgraderAPIUploadToolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
