// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/commands (interfaces: SyncToolAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/synctool_mock.go github.com/juju/juju/cmd/juju/commands SyncToolAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	tools "github.com/juju/juju/internal/tools"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockSyncToolAPI is a mock of SyncToolAPI interface.
type MockSyncToolAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSyncToolAPIMockRecorder
}

// MockSyncToolAPIMockRecorder is the mock recorder for MockSyncToolAPI.
type MockSyncToolAPIMockRecorder struct {
	mock *MockSyncToolAPI
}

// NewMockSyncToolAPI creates a new mock instance.
func NewMockSyncToolAPI(ctrl *gomock.Controller) *MockSyncToolAPI {
	mock := &MockSyncToolAPI{ctrl: ctrl}
	mock.recorder = &MockSyncToolAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncToolAPI) EXPECT() *MockSyncToolAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSyncToolAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockSyncToolAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSyncToolAPIMockRecorder) Close() *MockSyncToolAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSyncToolAPI)(nil).Close))
	return &MockSyncToolAPICloseCall{Call: call}
}

// MockSyncToolAPICloseCall wrap *gomock.Call
type MockSyncToolAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncToolAPICloseCall) Return(arg0 error) *MockSyncToolAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncToolAPICloseCall) Do(f func() error) *MockSyncToolAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncToolAPICloseCall) DoAndReturn(f func() error) *MockSyncToolAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UploadTools mocks base method.
func (m *MockSyncToolAPI) UploadTools(arg0 context.Context, arg1 io.Reader, arg2 version.Binary) (tools.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTools", arg0, arg1, arg2)
	ret0, _ := ret[0].(tools.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTools indicates an expected call of UploadTools.
func (mr *MockSyncToolAPIMockRecorder) UploadTools(arg0, arg1, arg2 any) *MockSyncToolAPIUploadToolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTools", reflect.TypeOf((*MockSyncToolAPI)(nil).UploadTools), arg0, arg1, arg2)
	return &MockSyncToolAPIUploadToolsCall{Call: call}
}

// MockSyncToolAPIUploadToolsCall wrap *gomock.Call
type MockSyncToolAPIUploadToolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncToolAPIUploadToolsCall) Return(arg0 tools.List, arg1 error) *MockSyncToolAPIUploadToolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncToolAPIUploadToolsCall) Do(f func(context.Context, io.Reader, version.Binary) (tools.List, error)) *MockSyncToolAPIUploadToolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncToolAPIUploadToolsCall) DoAndReturn(f func(context.Context, io.Reader, version.Binary) (tools.List, error)) *MockSyncToolAPIUploadToolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
