// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/backups (interfaces: ArchiveReader,APIClient)

// Package backups_test is a generated GoMock package.
package backups_test

import (
	gomock "github.com/golang/mock/gomock"
	backups "github.com/juju/juju/api/backups"
	params "github.com/juju/juju/apiserver/params"
	io "io"
	reflect "reflect"
)

// MockArchiveReader is a mock of ArchiveReader interface
type MockArchiveReader struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveReaderMockRecorder
}

// MockArchiveReaderMockRecorder is the mock recorder for MockArchiveReader
type MockArchiveReaderMockRecorder struct {
	mock *MockArchiveReader
}

// NewMockArchiveReader creates a new mock instance
func NewMockArchiveReader(ctrl *gomock.Controller) *MockArchiveReader {
	mock := &MockArchiveReader{ctrl: ctrl}
	mock.recorder = &MockArchiveReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArchiveReader) EXPECT() *MockArchiveReaderMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockArchiveReader) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockArchiveReaderMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockArchiveReader)(nil).Close))
}

// Read mocks base method
func (m *MockArchiveReader) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockArchiveReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockArchiveReader)(nil).Read), arg0)
}

// Seek mocks base method
func (m *MockArchiveReader) Seek(arg0 int64, arg1 int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockArchiveReaderMockRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockArchiveReader)(nil).Seek), arg0, arg1)
}

// MockAPIClient is a mock of APIClient interface
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockAPIClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAPIClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAPIClient)(nil).Close))
}

// Create mocks base method
func (m *MockAPIClient) Create(arg0 string, arg1, arg2 bool) (*params.BackupsMetadataResult, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*params.BackupsMetadataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAPIClientMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPIClient)(nil).Create), arg0, arg1, arg2)
}

// Download mocks base method
func (m *MockAPIClient) Download(arg0 string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Download", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockAPIClientMockRecorder) Download(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockAPIClient)(nil).Download), arg0)
}

// Info mocks base method
func (m *MockAPIClient) Info(arg0 string) (*params.BackupsMetadataResult, error) {
	ret := m.ctrl.Call(m, "Info", arg0)
	ret0, _ := ret[0].(*params.BackupsMetadataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockAPIClientMockRecorder) Info(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAPIClient)(nil).Info), arg0)
}

// List mocks base method
func (m *MockAPIClient) List() (*params.BackupsListResult, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(*params.BackupsListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAPIClientMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAPIClient)(nil).List))
}

// Remove mocks base method
func (m *MockAPIClient) Remove(arg0 ...string) ([]params.ErrorResult, error) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].([]params.ErrorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove
func (mr *MockAPIClientMockRecorder) Remove(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockAPIClient)(nil).Remove), arg0...)
}

// Restore mocks base method
func (m *MockAPIClient) Restore(arg0 string, arg1 backups.ClientConnection) error {
	ret := m.ctrl.Call(m, "Restore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore
func (mr *MockAPIClientMockRecorder) Restore(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockAPIClient)(nil).Restore), arg0, arg1)
}

// RestoreReader mocks base method
func (m *MockAPIClient) RestoreReader(arg0 io.ReadSeeker, arg1 *params.BackupsMetadataResult, arg2 backups.ClientConnection) error {
	ret := m.ctrl.Call(m, "RestoreReader", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreReader indicates an expected call of RestoreReader
func (mr *MockAPIClientMockRecorder) RestoreReader(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreReader", reflect.TypeOf((*MockAPIClient)(nil).RestoreReader), arg0, arg1, arg2)
}

// Upload mocks base method
func (m *MockAPIClient) Upload(arg0 io.ReadSeeker, arg1 params.BackupsMetadataResult) (string, error) {
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockAPIClientMockRecorder) Upload(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockAPIClient)(nil).Upload), arg0, arg1)
}
