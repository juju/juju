// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/cloud (interfaces: RemoveCloudAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/remove_mocks.go github.com/juju/juju/cmd/juju/cloud RemoveCloudAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRemoveCloudAPI is a mock of RemoveCloudAPI interface.
type MockRemoveCloudAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRemoveCloudAPIMockRecorder
}

// MockRemoveCloudAPIMockRecorder is the mock recorder for MockRemoveCloudAPI.
type MockRemoveCloudAPIMockRecorder struct {
	mock *MockRemoveCloudAPI
}

// NewMockRemoveCloudAPI creates a new mock instance.
func NewMockRemoveCloudAPI(ctrl *gomock.Controller) *MockRemoveCloudAPI {
	mock := &MockRemoveCloudAPI{ctrl: ctrl}
	mock.recorder = &MockRemoveCloudAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoveCloudAPI) EXPECT() *MockRemoveCloudAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRemoveCloudAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockRemoveCloudAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRemoveCloudAPIMockRecorder) Close() *MockRemoveCloudAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRemoveCloudAPI)(nil).Close))
	return &MockRemoveCloudAPICloseCall{Call: call}
}

// MockRemoveCloudAPICloseCall wrap *gomock.Call
type MockRemoveCloudAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveCloudAPICloseCall) Return(arg0 error) *MockRemoveCloudAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveCloudAPICloseCall) Do(f func() error) *MockRemoveCloudAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveCloudAPICloseCall) DoAndReturn(f func() error) *MockRemoveCloudAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveCloud mocks base method.
func (m *MockRemoveCloudAPI) RemoveCloud(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloud", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloud indicates an expected call of RemoveCloud.
func (mr *MockRemoveCloudAPIMockRecorder) RemoveCloud(arg0, arg1 any) *MockRemoveCloudAPIRemoveCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloud", reflect.TypeOf((*MockRemoveCloudAPI)(nil).RemoveCloud), arg0, arg1)
	return &MockRemoveCloudAPIRemoveCloudCall{Call: call}
}

// MockRemoveCloudAPIRemoveCloudCall wrap *gomock.Call
type MockRemoveCloudAPIRemoveCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoveCloudAPIRemoveCloudCall) Return(arg0 error) *MockRemoveCloudAPIRemoveCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoveCloudAPIRemoveCloudCall) Do(f func(context.Context, string) error) *MockRemoveCloudAPIRemoveCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoveCloudAPIRemoveCloudCall) DoAndReturn(f func(context.Context, string) error) *MockRemoveCloudAPIRemoveCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
