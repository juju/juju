// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/jujuclient (interfaces: ClientStore)
//
// Generated by this command:
//
//	mockgen -typed -package user_test -destination utils_clientstore_mock_test.go github.com/juju/juju/jujuclient ClientStore
//

// Package user_test is a generated GoMock package.
package user_test

import (
	reflect "reflect"

	cloud "github.com/juju/juju/cloud"
	jujuclient "github.com/juju/juju/jujuclient"
	gomock "go.uber.org/mock/gomock"
)

// MockClientStore is a mock of ClientStore interface.
type MockClientStore struct {
	ctrl     *gomock.Controller
	recorder *MockClientStoreMockRecorder
}

// MockClientStoreMockRecorder is the mock recorder for MockClientStore.
type MockClientStoreMockRecorder struct {
	mock *MockClientStore
}

// NewMockClientStore creates a new mock instance.
func NewMockClientStore(ctrl *gomock.Controller) *MockClientStore {
	mock := &MockClientStore{ctrl: ctrl}
	mock.recorder = &MockClientStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientStore) EXPECT() *MockClientStoreMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClientStore) ISGOMOCK() struct{} {
	return struct{}{}
}

// AccountDetails mocks base method.
func (m *MockClientStore) AccountDetails(arg0 string) (*jujuclient.AccountDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountDetails", arg0)
	ret0, _ := ret[0].(*jujuclient.AccountDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountDetails indicates an expected call of AccountDetails.
func (mr *MockClientStoreMockRecorder) AccountDetails(arg0 any) *MockClientStoreAccountDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountDetails", reflect.TypeOf((*MockClientStore)(nil).AccountDetails), arg0)
	return &MockClientStoreAccountDetailsCall{Call: call}
}

// MockClientStoreAccountDetailsCall wrap *gomock.Call
type MockClientStoreAccountDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreAccountDetailsCall) Return(arg0 *jujuclient.AccountDetails, arg1 error) *MockClientStoreAccountDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreAccountDetailsCall) Do(f func(string) (*jujuclient.AccountDetails, error)) *MockClientStoreAccountDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreAccountDetailsCall) DoAndReturn(f func(string) (*jujuclient.AccountDetails, error)) *MockClientStoreAccountDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddController mocks base method.
func (m *MockClientStore) AddController(arg0 string, arg1 jujuclient.ControllerDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddController indicates an expected call of AddController.
func (mr *MockClientStoreMockRecorder) AddController(arg0, arg1 any) *MockClientStoreAddControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddController", reflect.TypeOf((*MockClientStore)(nil).AddController), arg0, arg1)
	return &MockClientStoreAddControllerCall{Call: call}
}

// MockClientStoreAddControllerCall wrap *gomock.Call
type MockClientStoreAddControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreAddControllerCall) Return(arg0 error) *MockClientStoreAddControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreAddControllerCall) Do(f func(string, jujuclient.ControllerDetails) error) *MockClientStoreAddControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreAddControllerCall) DoAndReturn(f func(string, jujuclient.ControllerDetails) error) *MockClientStoreAddControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllControllers mocks base method.
func (m *MockClientStore) AllControllers() (map[string]jujuclient.ControllerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllControllers")
	ret0, _ := ret[0].(map[string]jujuclient.ControllerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllControllers indicates an expected call of AllControllers.
func (mr *MockClientStoreMockRecorder) AllControllers() *MockClientStoreAllControllersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllControllers", reflect.TypeOf((*MockClientStore)(nil).AllControllers))
	return &MockClientStoreAllControllersCall{Call: call}
}

// MockClientStoreAllControllersCall wrap *gomock.Call
type MockClientStoreAllControllersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreAllControllersCall) Return(arg0 map[string]jujuclient.ControllerDetails, arg1 error) *MockClientStoreAllControllersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreAllControllersCall) Do(f func() (map[string]jujuclient.ControllerDetails, error)) *MockClientStoreAllControllersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreAllControllersCall) DoAndReturn(f func() (map[string]jujuclient.ControllerDetails, error)) *MockClientStoreAllControllersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllCredentials mocks base method.
func (m *MockClientStore) AllCredentials() (map[string]cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCredentials")
	ret0, _ := ret[0].(map[string]cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCredentials indicates an expected call of AllCredentials.
func (mr *MockClientStoreMockRecorder) AllCredentials() *MockClientStoreAllCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCredentials", reflect.TypeOf((*MockClientStore)(nil).AllCredentials))
	return &MockClientStoreAllCredentialsCall{Call: call}
}

// MockClientStoreAllCredentialsCall wrap *gomock.Call
type MockClientStoreAllCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreAllCredentialsCall) Return(arg0 map[string]cloud.CloudCredential, arg1 error) *MockClientStoreAllCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreAllCredentialsCall) Do(f func() (map[string]cloud.CloudCredential, error)) *MockClientStoreAllCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreAllCredentialsCall) DoAndReturn(f func() (map[string]cloud.CloudCredential, error)) *MockClientStoreAllCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllModels mocks base method.
func (m *MockClientStore) AllModels(arg0 string) (map[string]jujuclient.ModelDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModels", arg0)
	ret0, _ := ret[0].(map[string]jujuclient.ModelDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModels indicates an expected call of AllModels.
func (mr *MockClientStoreMockRecorder) AllModels(arg0 any) *MockClientStoreAllModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModels", reflect.TypeOf((*MockClientStore)(nil).AllModels), arg0)
	return &MockClientStoreAllModelsCall{Call: call}
}

// MockClientStoreAllModelsCall wrap *gomock.Call
type MockClientStoreAllModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreAllModelsCall) Return(arg0 map[string]jujuclient.ModelDetails, arg1 error) *MockClientStoreAllModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreAllModelsCall) Do(f func(string) (map[string]jujuclient.ModelDetails, error)) *MockClientStoreAllModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreAllModelsCall) DoAndReturn(f func(string) (map[string]jujuclient.ModelDetails, error)) *MockClientStoreAllModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BootstrapConfigForController mocks base method.
func (m *MockClientStore) BootstrapConfigForController(arg0 string) (*jujuclient.BootstrapConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootstrapConfigForController", arg0)
	ret0, _ := ret[0].(*jujuclient.BootstrapConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BootstrapConfigForController indicates an expected call of BootstrapConfigForController.
func (mr *MockClientStoreMockRecorder) BootstrapConfigForController(arg0 any) *MockClientStoreBootstrapConfigForControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootstrapConfigForController", reflect.TypeOf((*MockClientStore)(nil).BootstrapConfigForController), arg0)
	return &MockClientStoreBootstrapConfigForControllerCall{Call: call}
}

// MockClientStoreBootstrapConfigForControllerCall wrap *gomock.Call
type MockClientStoreBootstrapConfigForControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreBootstrapConfigForControllerCall) Return(arg0 *jujuclient.BootstrapConfig, arg1 error) *MockClientStoreBootstrapConfigForControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreBootstrapConfigForControllerCall) Do(f func(string) (*jujuclient.BootstrapConfig, error)) *MockClientStoreBootstrapConfigForControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreBootstrapConfigForControllerCall) DoAndReturn(f func(string) (*jujuclient.BootstrapConfig, error)) *MockClientStoreBootstrapConfigForControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerByAPIEndpoints mocks base method.
func (m *MockClientStore) ControllerByAPIEndpoints(arg0 ...string) (*jujuclient.ControllerDetails, string, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ControllerByAPIEndpoints", varargs...)
	ret0, _ := ret[0].(*jujuclient.ControllerDetails)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ControllerByAPIEndpoints indicates an expected call of ControllerByAPIEndpoints.
func (mr *MockClientStoreMockRecorder) ControllerByAPIEndpoints(arg0 ...any) *MockClientStoreControllerByAPIEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerByAPIEndpoints", reflect.TypeOf((*MockClientStore)(nil).ControllerByAPIEndpoints), arg0...)
	return &MockClientStoreControllerByAPIEndpointsCall{Call: call}
}

// MockClientStoreControllerByAPIEndpointsCall wrap *gomock.Call
type MockClientStoreControllerByAPIEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreControllerByAPIEndpointsCall) Return(arg0 *jujuclient.ControllerDetails, arg1 string, arg2 error) *MockClientStoreControllerByAPIEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreControllerByAPIEndpointsCall) Do(f func(...string) (*jujuclient.ControllerDetails, string, error)) *MockClientStoreControllerByAPIEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreControllerByAPIEndpointsCall) DoAndReturn(f func(...string) (*jujuclient.ControllerDetails, string, error)) *MockClientStoreControllerByAPIEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerByName mocks base method.
func (m *MockClientStore) ControllerByName(arg0 string) (*jujuclient.ControllerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerByName", arg0)
	ret0, _ := ret[0].(*jujuclient.ControllerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerByName indicates an expected call of ControllerByName.
func (mr *MockClientStoreMockRecorder) ControllerByName(arg0 any) *MockClientStoreControllerByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerByName", reflect.TypeOf((*MockClientStore)(nil).ControllerByName), arg0)
	return &MockClientStoreControllerByNameCall{Call: call}
}

// MockClientStoreControllerByNameCall wrap *gomock.Call
type MockClientStoreControllerByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreControllerByNameCall) Return(arg0 *jujuclient.ControllerDetails, arg1 error) *MockClientStoreControllerByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreControllerByNameCall) Do(f func(string) (*jujuclient.ControllerDetails, error)) *MockClientStoreControllerByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreControllerByNameCall) DoAndReturn(f func(string) (*jujuclient.ControllerDetails, error)) *MockClientStoreControllerByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CookieJar mocks base method.
func (m *MockClientStore) CookieJar(arg0 string) (jujuclient.CookieJar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CookieJar", arg0)
	ret0, _ := ret[0].(jujuclient.CookieJar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CookieJar indicates an expected call of CookieJar.
func (mr *MockClientStoreMockRecorder) CookieJar(arg0 any) *MockClientStoreCookieJarCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CookieJar", reflect.TypeOf((*MockClientStore)(nil).CookieJar), arg0)
	return &MockClientStoreCookieJarCall{Call: call}
}

// MockClientStoreCookieJarCall wrap *gomock.Call
type MockClientStoreCookieJarCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreCookieJarCall) Return(arg0 jujuclient.CookieJar, arg1 error) *MockClientStoreCookieJarCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreCookieJarCall) Do(f func(string) (jujuclient.CookieJar, error)) *MockClientStoreCookieJarCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreCookieJarCall) DoAndReturn(f func(string) (jujuclient.CookieJar, error)) *MockClientStoreCookieJarCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CredentialForCloud mocks base method.
func (m *MockClientStore) CredentialForCloud(arg0 string) (*cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialForCloud", arg0)
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialForCloud indicates an expected call of CredentialForCloud.
func (mr *MockClientStoreMockRecorder) CredentialForCloud(arg0 any) *MockClientStoreCredentialForCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialForCloud", reflect.TypeOf((*MockClientStore)(nil).CredentialForCloud), arg0)
	return &MockClientStoreCredentialForCloudCall{Call: call}
}

// MockClientStoreCredentialForCloudCall wrap *gomock.Call
type MockClientStoreCredentialForCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreCredentialForCloudCall) Return(arg0 *cloud.CloudCredential, arg1 error) *MockClientStoreCredentialForCloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreCredentialForCloudCall) Do(f func(string) (*cloud.CloudCredential, error)) *MockClientStoreCredentialForCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreCredentialForCloudCall) DoAndReturn(f func(string) (*cloud.CloudCredential, error)) *MockClientStoreCredentialForCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentController mocks base method.
func (m *MockClientStore) CurrentController() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentController")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentController indicates an expected call of CurrentController.
func (mr *MockClientStoreMockRecorder) CurrentController() *MockClientStoreCurrentControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentController", reflect.TypeOf((*MockClientStore)(nil).CurrentController))
	return &MockClientStoreCurrentControllerCall{Call: call}
}

// MockClientStoreCurrentControllerCall wrap *gomock.Call
type MockClientStoreCurrentControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreCurrentControllerCall) Return(arg0 string, arg1 error) *MockClientStoreCurrentControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreCurrentControllerCall) Do(f func() (string, error)) *MockClientStoreCurrentControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreCurrentControllerCall) DoAndReturn(f func() (string, error)) *MockClientStoreCurrentControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentModel mocks base method.
func (m *MockClientStore) CurrentModel(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentModel", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentModel indicates an expected call of CurrentModel.
func (mr *MockClientStoreMockRecorder) CurrentModel(arg0 any) *MockClientStoreCurrentModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentModel", reflect.TypeOf((*MockClientStore)(nil).CurrentModel), arg0)
	return &MockClientStoreCurrentModelCall{Call: call}
}

// MockClientStoreCurrentModelCall wrap *gomock.Call
type MockClientStoreCurrentModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreCurrentModelCall) Return(arg0 string, arg1 error) *MockClientStoreCurrentModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreCurrentModelCall) Do(f func(string) (string, error)) *MockClientStoreCurrentModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreCurrentModelCall) DoAndReturn(f func(string) (string, error)) *MockClientStoreCurrentModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelByName mocks base method.
func (m *MockClientStore) ModelByName(arg0, arg1 string) (*jujuclient.ModelDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelByName", arg0, arg1)
	ret0, _ := ret[0].(*jujuclient.ModelDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelByName indicates an expected call of ModelByName.
func (mr *MockClientStoreMockRecorder) ModelByName(arg0, arg1 any) *MockClientStoreModelByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelByName", reflect.TypeOf((*MockClientStore)(nil).ModelByName), arg0, arg1)
	return &MockClientStoreModelByNameCall{Call: call}
}

// MockClientStoreModelByNameCall wrap *gomock.Call
type MockClientStoreModelByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreModelByNameCall) Return(arg0 *jujuclient.ModelDetails, arg1 error) *MockClientStoreModelByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreModelByNameCall) Do(f func(string, string) (*jujuclient.ModelDetails, error)) *MockClientStoreModelByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreModelByNameCall) DoAndReturn(f func(string, string) (*jujuclient.ModelDetails, error)) *MockClientStoreModelByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreviousController mocks base method.
func (m *MockClientStore) PreviousController() (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviousController")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PreviousController indicates an expected call of PreviousController.
func (mr *MockClientStoreMockRecorder) PreviousController() *MockClientStorePreviousControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviousController", reflect.TypeOf((*MockClientStore)(nil).PreviousController))
	return &MockClientStorePreviousControllerCall{Call: call}
}

// MockClientStorePreviousControllerCall wrap *gomock.Call
type MockClientStorePreviousControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStorePreviousControllerCall) Return(arg0 string, arg1 bool, arg2 error) *MockClientStorePreviousControllerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStorePreviousControllerCall) Do(f func() (string, bool, error)) *MockClientStorePreviousControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStorePreviousControllerCall) DoAndReturn(f func() (string, bool, error)) *MockClientStorePreviousControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreviousModel mocks base method.
func (m *MockClientStore) PreviousModel(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviousModel", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviousModel indicates an expected call of PreviousModel.
func (mr *MockClientStoreMockRecorder) PreviousModel(arg0 any) *MockClientStorePreviousModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviousModel", reflect.TypeOf((*MockClientStore)(nil).PreviousModel), arg0)
	return &MockClientStorePreviousModelCall{Call: call}
}

// MockClientStorePreviousModelCall wrap *gomock.Call
type MockClientStorePreviousModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStorePreviousModelCall) Return(arg0 string, arg1 error) *MockClientStorePreviousModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStorePreviousModelCall) Do(f func(string) (string, error)) *MockClientStorePreviousModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStorePreviousModelCall) DoAndReturn(f func(string) (string, error)) *MockClientStorePreviousModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAccount mocks base method.
func (m *MockClientStore) RemoveAccount(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccount indicates an expected call of RemoveAccount.
func (mr *MockClientStoreMockRecorder) RemoveAccount(arg0 any) *MockClientStoreRemoveAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccount", reflect.TypeOf((*MockClientStore)(nil).RemoveAccount), arg0)
	return &MockClientStoreRemoveAccountCall{Call: call}
}

// MockClientStoreRemoveAccountCall wrap *gomock.Call
type MockClientStoreRemoveAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreRemoveAccountCall) Return(arg0 error) *MockClientStoreRemoveAccountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreRemoveAccountCall) Do(f func(string) error) *MockClientStoreRemoveAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreRemoveAccountCall) DoAndReturn(f func(string) error) *MockClientStoreRemoveAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveController mocks base method.
func (m *MockClientStore) RemoveController(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveController", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveController indicates an expected call of RemoveController.
func (mr *MockClientStoreMockRecorder) RemoveController(arg0 any) *MockClientStoreRemoveControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveController", reflect.TypeOf((*MockClientStore)(nil).RemoveController), arg0)
	return &MockClientStoreRemoveControllerCall{Call: call}
}

// MockClientStoreRemoveControllerCall wrap *gomock.Call
type MockClientStoreRemoveControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreRemoveControllerCall) Return(arg0 error) *MockClientStoreRemoveControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreRemoveControllerCall) Do(f func(string) error) *MockClientStoreRemoveControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreRemoveControllerCall) DoAndReturn(f func(string) error) *MockClientStoreRemoveControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveModel mocks base method.
func (m *MockClientStore) RemoveModel(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveModel indicates an expected call of RemoveModel.
func (mr *MockClientStoreMockRecorder) RemoveModel(arg0, arg1 any) *MockClientStoreRemoveModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveModel", reflect.TypeOf((*MockClientStore)(nil).RemoveModel), arg0, arg1)
	return &MockClientStoreRemoveModelCall{Call: call}
}

// MockClientStoreRemoveModelCall wrap *gomock.Call
type MockClientStoreRemoveModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreRemoveModelCall) Return(arg0 error) *MockClientStoreRemoveModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreRemoveModelCall) Do(f func(string, string) error) *MockClientStoreRemoveModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreRemoveModelCall) DoAndReturn(f func(string, string) error) *MockClientStoreRemoveModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCurrentController mocks base method.
func (m *MockClientStore) SetCurrentController(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentController", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentController indicates an expected call of SetCurrentController.
func (mr *MockClientStoreMockRecorder) SetCurrentController(arg0 any) *MockClientStoreSetCurrentControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentController", reflect.TypeOf((*MockClientStore)(nil).SetCurrentController), arg0)
	return &MockClientStoreSetCurrentControllerCall{Call: call}
}

// MockClientStoreSetCurrentControllerCall wrap *gomock.Call
type MockClientStoreSetCurrentControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreSetCurrentControllerCall) Return(arg0 error) *MockClientStoreSetCurrentControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreSetCurrentControllerCall) Do(f func(string) error) *MockClientStoreSetCurrentControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreSetCurrentControllerCall) DoAndReturn(f func(string) error) *MockClientStoreSetCurrentControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCurrentModel mocks base method.
func (m *MockClientStore) SetCurrentModel(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentModel indicates an expected call of SetCurrentModel.
func (mr *MockClientStoreMockRecorder) SetCurrentModel(arg0, arg1 any) *MockClientStoreSetCurrentModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentModel", reflect.TypeOf((*MockClientStore)(nil).SetCurrentModel), arg0, arg1)
	return &MockClientStoreSetCurrentModelCall{Call: call}
}

// MockClientStoreSetCurrentModelCall wrap *gomock.Call
type MockClientStoreSetCurrentModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreSetCurrentModelCall) Return(arg0 error) *MockClientStoreSetCurrentModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreSetCurrentModelCall) Do(f func(string, string) error) *MockClientStoreSetCurrentModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreSetCurrentModelCall) DoAndReturn(f func(string, string) error) *MockClientStoreSetCurrentModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModels mocks base method.
func (m *MockClientStore) SetModels(arg0 string, arg1 map[string]jujuclient.ModelDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModels indicates an expected call of SetModels.
func (mr *MockClientStoreMockRecorder) SetModels(arg0, arg1 any) *MockClientStoreSetModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModels", reflect.TypeOf((*MockClientStore)(nil).SetModels), arg0, arg1)
	return &MockClientStoreSetModelsCall{Call: call}
}

// MockClientStoreSetModelsCall wrap *gomock.Call
type MockClientStoreSetModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreSetModelsCall) Return(arg0 error) *MockClientStoreSetModelsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreSetModelsCall) Do(f func(string, map[string]jujuclient.ModelDetails) error) *MockClientStoreSetModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreSetModelsCall) DoAndReturn(f func(string, map[string]jujuclient.ModelDetails) error) *MockClientStoreSetModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAccount mocks base method.
func (m *MockClientStore) UpdateAccount(arg0 string, arg1 jujuclient.AccountDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockClientStoreMockRecorder) UpdateAccount(arg0, arg1 any) *MockClientStoreUpdateAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockClientStore)(nil).UpdateAccount), arg0, arg1)
	return &MockClientStoreUpdateAccountCall{Call: call}
}

// MockClientStoreUpdateAccountCall wrap *gomock.Call
type MockClientStoreUpdateAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreUpdateAccountCall) Return(arg0 error) *MockClientStoreUpdateAccountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreUpdateAccountCall) Do(f func(string, jujuclient.AccountDetails) error) *MockClientStoreUpdateAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreUpdateAccountCall) DoAndReturn(f func(string, jujuclient.AccountDetails) error) *MockClientStoreUpdateAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateBootstrapConfig mocks base method.
func (m *MockClientStore) UpdateBootstrapConfig(arg0 string, arg1 jujuclient.BootstrapConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBootstrapConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBootstrapConfig indicates an expected call of UpdateBootstrapConfig.
func (mr *MockClientStoreMockRecorder) UpdateBootstrapConfig(arg0, arg1 any) *MockClientStoreUpdateBootstrapConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBootstrapConfig", reflect.TypeOf((*MockClientStore)(nil).UpdateBootstrapConfig), arg0, arg1)
	return &MockClientStoreUpdateBootstrapConfigCall{Call: call}
}

// MockClientStoreUpdateBootstrapConfigCall wrap *gomock.Call
type MockClientStoreUpdateBootstrapConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreUpdateBootstrapConfigCall) Return(arg0 error) *MockClientStoreUpdateBootstrapConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreUpdateBootstrapConfigCall) Do(f func(string, jujuclient.BootstrapConfig) error) *MockClientStoreUpdateBootstrapConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreUpdateBootstrapConfigCall) DoAndReturn(f func(string, jujuclient.BootstrapConfig) error) *MockClientStoreUpdateBootstrapConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateController mocks base method.
func (m *MockClientStore) UpdateController(arg0 string, arg1 jujuclient.ControllerDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateController indicates an expected call of UpdateController.
func (mr *MockClientStoreMockRecorder) UpdateController(arg0, arg1 any) *MockClientStoreUpdateControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateController", reflect.TypeOf((*MockClientStore)(nil).UpdateController), arg0, arg1)
	return &MockClientStoreUpdateControllerCall{Call: call}
}

// MockClientStoreUpdateControllerCall wrap *gomock.Call
type MockClientStoreUpdateControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreUpdateControllerCall) Return(arg0 error) *MockClientStoreUpdateControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreUpdateControllerCall) Do(f func(string, jujuclient.ControllerDetails) error) *MockClientStoreUpdateControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreUpdateControllerCall) DoAndReturn(f func(string, jujuclient.ControllerDetails) error) *MockClientStoreUpdateControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCredential mocks base method.
func (m *MockClientStore) UpdateCredential(arg0 string, arg1 cloud.CloudCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockClientStoreMockRecorder) UpdateCredential(arg0, arg1 any) *MockClientStoreUpdateCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockClientStore)(nil).UpdateCredential), arg0, arg1)
	return &MockClientStoreUpdateCredentialCall{Call: call}
}

// MockClientStoreUpdateCredentialCall wrap *gomock.Call
type MockClientStoreUpdateCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreUpdateCredentialCall) Return(arg0 error) *MockClientStoreUpdateCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreUpdateCredentialCall) Do(f func(string, cloud.CloudCredential) error) *MockClientStoreUpdateCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreUpdateCredentialCall) DoAndReturn(f func(string, cloud.CloudCredential) error) *MockClientStoreUpdateCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateModel mocks base method.
func (m *MockClientStore) UpdateModel(arg0, arg1 string, arg2 jujuclient.ModelDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModel indicates an expected call of UpdateModel.
func (mr *MockClientStoreMockRecorder) UpdateModel(arg0, arg1, arg2 any) *MockClientStoreUpdateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockClientStore)(nil).UpdateModel), arg0, arg1, arg2)
	return &MockClientStoreUpdateModelCall{Call: call}
}

// MockClientStoreUpdateModelCall wrap *gomock.Call
type MockClientStoreUpdateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStoreUpdateModelCall) Return(arg0 error) *MockClientStoreUpdateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStoreUpdateModelCall) Do(f func(string, string, jujuclient.ModelDetails) error) *MockClientStoreUpdateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStoreUpdateModelCall) DoAndReturn(f func(string, string, jujuclient.ModelDetails) error) *MockClientStoreUpdateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
