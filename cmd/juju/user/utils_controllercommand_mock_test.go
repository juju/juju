// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/user (interfaces: ControllerCommand)
//
// Generated by this command:
//
//	mockgen -typed -package user_test -destination utils_controllercommand_mock_test.go github.com/juju/juju/cmd/juju/user ControllerCommand
//

// Package user_test is a generated GoMock package.
package user_test

import (
	reflect "reflect"

	jujuclient "github.com/juju/juju/jujuclient"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerCommand is a mock of ControllerCommand interface.
type MockControllerCommand struct {
	ctrl     *gomock.Controller
	recorder *MockControllerCommandMockRecorder
}

// MockControllerCommandMockRecorder is the mock recorder for MockControllerCommand.
type MockControllerCommandMockRecorder struct {
	mock *MockControllerCommand
}

// NewMockControllerCommand creates a new mock instance.
func NewMockControllerCommand(ctrl *gomock.Controller) *MockControllerCommand {
	mock := &MockControllerCommand{ctrl: ctrl}
	mock.recorder = &MockControllerCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerCommand) EXPECT() *MockControllerCommandMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockControllerCommand) ISGOMOCK() struct{} {
	return struct{}{}
}

// ClientStore mocks base method.
func (m *MockControllerCommand) ClientStore() jujuclient.ClientStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientStore")
	ret0, _ := ret[0].(jujuclient.ClientStore)
	return ret0
}

// ClientStore indicates an expected call of ClientStore.
func (mr *MockControllerCommandMockRecorder) ClientStore() *MockControllerCommandClientStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientStore", reflect.TypeOf((*MockControllerCommand)(nil).ClientStore))
	return &MockControllerCommandClientStoreCall{Call: call}
}

// MockControllerCommandClientStoreCall wrap *gomock.Call
type MockControllerCommandClientStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCommandClientStoreCall) Return(arg0 jujuclient.ClientStore) *MockControllerCommandClientStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCommandClientStoreCall) Do(f func() jujuclient.ClientStore) *MockControllerCommandClientStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCommandClientStoreCall) DoAndReturn(f func() jujuclient.ClientStore) *MockControllerCommandClientStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerName mocks base method.
func (m *MockControllerCommand) ControllerName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerName indicates an expected call of ControllerName.
func (mr *MockControllerCommandMockRecorder) ControllerName() *MockControllerCommandControllerNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerName", reflect.TypeOf((*MockControllerCommand)(nil).ControllerName))
	return &MockControllerCommandControllerNameCall{Call: call}
}

// MockControllerCommandControllerNameCall wrap *gomock.Call
type MockControllerCommandControllerNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCommandControllerNameCall) Return(arg0 string, arg1 error) *MockControllerCommandControllerNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCommandControllerNameCall) Do(f func() (string, error)) *MockControllerCommandControllerNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCommandControllerNameCall) DoAndReturn(f func() (string, error)) *MockControllerCommandControllerNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
