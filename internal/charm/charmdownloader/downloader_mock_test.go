// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/charm/charmdownloader (interfaces: CharmRepository,CharmhubClient)
//
// Generated by this command:
//
//	mockgen -typed -package charmdownloader -destination downloader_mock_test.go github.com/juju/juju/internal/charm/charmdownloader CharmRepository,CharmhubClient
//

// Package charmdownloader is a generated GoMock package.
package charmdownloader

import (
	context "context"
	url "net/url"
	reflect "reflect"

	charm "github.com/juju/juju/core/charm"
	charmhub "github.com/juju/juju/internal/charmhub"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmRepository is a mock of CharmRepository interface.
type MockCharmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCharmRepositoryMockRecorder
}

// MockCharmRepositoryMockRecorder is the mock recorder for MockCharmRepository.
type MockCharmRepositoryMockRecorder struct {
	mock *MockCharmRepository
}

// NewMockCharmRepository creates a new mock instance.
func NewMockCharmRepository(ctrl *gomock.Controller) *MockCharmRepository {
	mock := &MockCharmRepository{ctrl: ctrl}
	mock.recorder = &MockCharmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmRepository) EXPECT() *MockCharmRepositoryMockRecorder {
	return m.recorder
}

// GetDownloadURL mocks base method.
func (m *MockCharmRepository) GetDownloadURL(arg0 context.Context, arg1 string, arg2 charm.Origin) (*url.URL, charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(charm.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDownloadURL indicates an expected call of GetDownloadURL.
func (mr *MockCharmRepositoryMockRecorder) GetDownloadURL(arg0, arg1, arg2 any) *MockCharmRepositoryGetDownloadURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadURL", reflect.TypeOf((*MockCharmRepository)(nil).GetDownloadURL), arg0, arg1, arg2)
	return &MockCharmRepositoryGetDownloadURLCall{Call: call}
}

// MockCharmRepositoryGetDownloadURLCall wrap *gomock.Call
type MockCharmRepositoryGetDownloadURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmRepositoryGetDownloadURLCall) Return(arg0 *url.URL, arg1 charm.Origin, arg2 error) *MockCharmRepositoryGetDownloadURLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmRepositoryGetDownloadURLCall) Do(f func(context.Context, string, charm.Origin) (*url.URL, charm.Origin, error)) *MockCharmRepositoryGetDownloadURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmRepositoryGetDownloadURLCall) DoAndReturn(f func(context.Context, string, charm.Origin) (*url.URL, charm.Origin, error)) *MockCharmRepositoryGetDownloadURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmhubClient is a mock of CharmhubClient interface.
type MockCharmhubClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharmhubClientMockRecorder
}

// MockCharmhubClientMockRecorder is the mock recorder for MockCharmhubClient.
type MockCharmhubClientMockRecorder struct {
	mock *MockCharmhubClient
}

// NewMockCharmhubClient creates a new mock instance.
func NewMockCharmhubClient(ctrl *gomock.Controller) *MockCharmhubClient {
	mock := &MockCharmhubClient{ctrl: ctrl}
	mock.recorder = &MockCharmhubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmhubClient) EXPECT() *MockCharmhubClientMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockCharmhubClient) Download(arg0 context.Context, arg1 *url.URL, arg2 string, arg3 ...charmhub.DownloadOption) (*charmhub.Digest, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Download", varargs...)
	ret0, _ := ret[0].(*charmhub.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockCharmhubClientMockRecorder) Download(arg0, arg1, arg2 any, arg3 ...any) *MockCharmhubClientDownloadCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockCharmhubClient)(nil).Download), varargs...)
	return &MockCharmhubClientDownloadCall{Call: call}
}

// MockCharmhubClientDownloadCall wrap *gomock.Call
type MockCharmhubClientDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmhubClientDownloadCall) Return(arg0 *charmhub.Digest, arg1 error) *MockCharmhubClientDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmhubClientDownloadCall) Do(f func(context.Context, *url.URL, string, ...charmhub.DownloadOption) (*charmhub.Digest, error)) *MockCharmhubClientDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmhubClientDownloadCall) DoAndReturn(f func(context.Context, *url.URL, string, ...charmhub.DownloadOption) (*charmhub.Digest, error)) *MockCharmhubClientDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
