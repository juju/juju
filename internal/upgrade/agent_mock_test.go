// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/agent (interfaces: Agent,Config)
//
// Generated by this command:
//
//	mockgen -typed -package upgrade -destination agent_mock_test.go github.com/juju/juju/agent Agent,Config
//

// Package upgrade is a generated GoMock package.
package upgrade

import (
	reflect "reflect"
	time "time"

	agent "github.com/juju/juju/agent"
	api "github.com/juju/juju/api"
	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	objectstore "github.com/juju/juju/core/objectstore"
	mongo "github.com/juju/juju/internal/mongo"
	names "github.com/juju/names/v6"
	shell "github.com/juju/utils/v4/shell"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAgent) ISGOMOCK() struct{} {
	return struct{}{}
}

// ChangeConfig mocks base method.
func (m *MockAgent) ChangeConfig(arg0 agent.ConfigMutator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeConfig indicates an expected call of ChangeConfig.
func (mr *MockAgentMockRecorder) ChangeConfig(arg0 any) *MockAgentChangeConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeConfig", reflect.TypeOf((*MockAgent)(nil).ChangeConfig), arg0)
	return &MockAgentChangeConfigCall{Call: call}
}

// MockAgentChangeConfigCall wrap *gomock.Call
type MockAgentChangeConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentChangeConfigCall) Return(arg0 error) *MockAgentChangeConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentChangeConfigCall) Do(f func(agent.ConfigMutator) error) *MockAgentChangeConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentChangeConfigCall) DoAndReturn(f func(agent.ConfigMutator) error) *MockAgentChangeConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentConfig mocks base method.
func (m *MockAgent) CurrentConfig() agent.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentConfig")
	ret0, _ := ret[0].(agent.Config)
	return ret0
}

// CurrentConfig indicates an expected call of CurrentConfig.
func (mr *MockAgentMockRecorder) CurrentConfig() *MockAgentCurrentConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentConfig", reflect.TypeOf((*MockAgent)(nil).CurrentConfig))
	return &MockAgentCurrentConfigCall{Call: call}
}

// MockAgentCurrentConfigCall wrap *gomock.Call
type MockAgentCurrentConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentCurrentConfigCall) Return(arg0 agent.Config) *MockAgentCurrentConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentCurrentConfigCall) Do(f func() agent.Config) *MockAgentCurrentConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentCurrentConfigCall) DoAndReturn(f func() agent.Config) *MockAgentCurrentConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockConfig) ISGOMOCK() struct{} {
	return struct{}{}
}

// APIAddresses mocks base method.
func (m *MockConfig) APIAddresses() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIAddresses")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIAddresses indicates an expected call of APIAddresses.
func (mr *MockConfigMockRecorder) APIAddresses() *MockConfigAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIAddresses", reflect.TypeOf((*MockConfig)(nil).APIAddresses))
	return &MockConfigAPIAddressesCall{Call: call}
}

// MockConfigAPIAddressesCall wrap *gomock.Call
type MockConfigAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAPIAddressesCall) Return(arg0 []string, arg1 error) *MockConfigAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAPIAddressesCall) Do(f func() ([]string, error)) *MockConfigAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAPIAddressesCall) DoAndReturn(f func() ([]string, error)) *MockConfigAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// APIInfo mocks base method.
func (m *MockConfig) APIInfo() (*api.Info, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIInfo")
	ret0, _ := ret[0].(*api.Info)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// APIInfo indicates an expected call of APIInfo.
func (mr *MockConfigMockRecorder) APIInfo() *MockConfigAPIInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIInfo", reflect.TypeOf((*MockConfig)(nil).APIInfo))
	return &MockConfigAPIInfoCall{Call: call}
}

// MockConfigAPIInfoCall wrap *gomock.Call
type MockConfigAPIInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAPIInfoCall) Return(arg0 *api.Info, arg1 bool) *MockConfigAPIInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAPIInfoCall) Do(f func() (*api.Info, bool)) *MockConfigAPIInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAPIInfoCall) DoAndReturn(f func() (*api.Info, bool)) *MockConfigAPIInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentLogfileMaxBackups mocks base method.
func (m *MockConfig) AgentLogfileMaxBackups() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogfileMaxBackups")
	ret0, _ := ret[0].(int)
	return ret0
}

// AgentLogfileMaxBackups indicates an expected call of AgentLogfileMaxBackups.
func (mr *MockConfigMockRecorder) AgentLogfileMaxBackups() *MockConfigAgentLogfileMaxBackupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogfileMaxBackups", reflect.TypeOf((*MockConfig)(nil).AgentLogfileMaxBackups))
	return &MockConfigAgentLogfileMaxBackupsCall{Call: call}
}

// MockConfigAgentLogfileMaxBackupsCall wrap *gomock.Call
type MockConfigAgentLogfileMaxBackupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAgentLogfileMaxBackupsCall) Return(arg0 int) *MockConfigAgentLogfileMaxBackupsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAgentLogfileMaxBackupsCall) Do(f func() int) *MockConfigAgentLogfileMaxBackupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAgentLogfileMaxBackupsCall) DoAndReturn(f func() int) *MockConfigAgentLogfileMaxBackupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentLogfileMaxSizeMB mocks base method.
func (m *MockConfig) AgentLogfileMaxSizeMB() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogfileMaxSizeMB")
	ret0, _ := ret[0].(int)
	return ret0
}

// AgentLogfileMaxSizeMB indicates an expected call of AgentLogfileMaxSizeMB.
func (mr *MockConfigMockRecorder) AgentLogfileMaxSizeMB() *MockConfigAgentLogfileMaxSizeMBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogfileMaxSizeMB", reflect.TypeOf((*MockConfig)(nil).AgentLogfileMaxSizeMB))
	return &MockConfigAgentLogfileMaxSizeMBCall{Call: call}
}

// MockConfigAgentLogfileMaxSizeMBCall wrap *gomock.Call
type MockConfigAgentLogfileMaxSizeMBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAgentLogfileMaxSizeMBCall) Return(arg0 int) *MockConfigAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAgentLogfileMaxSizeMBCall) Do(f func() int) *MockConfigAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAgentLogfileMaxSizeMBCall) DoAndReturn(f func() int) *MockConfigAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CACert mocks base method.
func (m *MockConfig) CACert() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CACert")
	ret0, _ := ret[0].(string)
	return ret0
}

// CACert indicates an expected call of CACert.
func (mr *MockConfigMockRecorder) CACert() *MockConfigCACertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CACert", reflect.TypeOf((*MockConfig)(nil).CACert))
	return &MockConfigCACertCall{Call: call}
}

// MockConfigCACertCall wrap *gomock.Call
type MockConfigCACertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigCACertCall) Return(arg0 string) *MockConfigCACertCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigCACertCall) Do(f func() string) *MockConfigCACertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigCACertCall) DoAndReturn(f func() string) *MockConfigCACertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Controller mocks base method.
func (m *MockConfig) Controller() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// Controller indicates an expected call of Controller.
func (mr *MockConfigMockRecorder) Controller() *MockConfigControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockConfig)(nil).Controller))
	return &MockConfigControllerCall{Call: call}
}

// MockConfigControllerCall wrap *gomock.Call
type MockConfigControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigControllerCall) Return(arg0 names.ControllerTag) *MockConfigControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigControllerCall) Do(f func() names.ControllerTag) *MockConfigControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigControllerCall) DoAndReturn(f func() names.ControllerTag) *MockConfigControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DataDir mocks base method.
func (m *MockConfig) DataDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DataDir indicates an expected call of DataDir.
func (mr *MockConfigMockRecorder) DataDir() *MockConfigDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataDir", reflect.TypeOf((*MockConfig)(nil).DataDir))
	return &MockConfigDataDirCall{Call: call}
}

// MockConfigDataDirCall wrap *gomock.Call
type MockConfigDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDataDirCall) Return(arg0 string) *MockConfigDataDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDataDirCall) Do(f func() string) *MockConfigDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDataDirCall) DoAndReturn(f func() string) *MockConfigDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Dir mocks base method.
func (m *MockConfig) Dir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockConfigMockRecorder) Dir() *MockConfigDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockConfig)(nil).Dir))
	return &MockConfigDirCall{Call: call}
}

// MockConfigDirCall wrap *gomock.Call
type MockConfigDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDirCall) Return(arg0 string) *MockConfigDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDirCall) Do(f func() string) *MockConfigDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDirCall) DoAndReturn(f func() string) *MockConfigDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DqlitePort mocks base method.
func (m *MockConfig) DqlitePort() (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DqlitePort")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DqlitePort indicates an expected call of DqlitePort.
func (mr *MockConfigMockRecorder) DqlitePort() *MockConfigDqlitePortCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DqlitePort", reflect.TypeOf((*MockConfig)(nil).DqlitePort))
	return &MockConfigDqlitePortCall{Call: call}
}

// MockConfigDqlitePortCall wrap *gomock.Call
type MockConfigDqlitePortCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDqlitePortCall) Return(arg0 int, arg1 bool) *MockConfigDqlitePortCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDqlitePortCall) Do(f func() (int, bool)) *MockConfigDqlitePortCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDqlitePortCall) DoAndReturn(f func() (int, bool)) *MockConfigDqlitePortCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Jobs mocks base method.
func (m *MockConfig) Jobs() []model.MachineJob {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]model.MachineJob)
	return ret0
}

// Jobs indicates an expected call of Jobs.
func (mr *MockConfigMockRecorder) Jobs() *MockConfigJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockConfig)(nil).Jobs))
	return &MockConfigJobsCall{Call: call}
}

// MockConfigJobsCall wrap *gomock.Call
type MockConfigJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigJobsCall) Return(arg0 []model.MachineJob) *MockConfigJobsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigJobsCall) Do(f func() []model.MachineJob) *MockConfigJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigJobsCall) DoAndReturn(f func() []model.MachineJob) *MockConfigJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JujuDBSnapChannel mocks base method.
func (m *MockConfig) JujuDBSnapChannel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JujuDBSnapChannel")
	ret0, _ := ret[0].(string)
	return ret0
}

// JujuDBSnapChannel indicates an expected call of JujuDBSnapChannel.
func (mr *MockConfigMockRecorder) JujuDBSnapChannel() *MockConfigJujuDBSnapChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JujuDBSnapChannel", reflect.TypeOf((*MockConfig)(nil).JujuDBSnapChannel))
	return &MockConfigJujuDBSnapChannelCall{Call: call}
}

// MockConfigJujuDBSnapChannelCall wrap *gomock.Call
type MockConfigJujuDBSnapChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigJujuDBSnapChannelCall) Return(arg0 string) *MockConfigJujuDBSnapChannelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigJujuDBSnapChannelCall) Do(f func() string) *MockConfigJujuDBSnapChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigJujuDBSnapChannelCall) DoAndReturn(f func() string) *MockConfigJujuDBSnapChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LogDir mocks base method.
func (m *MockConfig) LogDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// LogDir indicates an expected call of LogDir.
func (mr *MockConfigMockRecorder) LogDir() *MockConfigLogDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDir", reflect.TypeOf((*MockConfig)(nil).LogDir))
	return &MockConfigLogDirCall{Call: call}
}

// MockConfigLogDirCall wrap *gomock.Call
type MockConfigLogDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigLogDirCall) Return(arg0 string) *MockConfigLogDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigLogDirCall) Do(f func() string) *MockConfigLogDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigLogDirCall) DoAndReturn(f func() string) *MockConfigLogDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoggingConfig mocks base method.
func (m *MockConfig) LoggingConfig() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggingConfig")
	ret0, _ := ret[0].(string)
	return ret0
}

// LoggingConfig indicates an expected call of LoggingConfig.
func (mr *MockConfigMockRecorder) LoggingConfig() *MockConfigLoggingConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggingConfig", reflect.TypeOf((*MockConfig)(nil).LoggingConfig))
	return &MockConfigLoggingConfigCall{Call: call}
}

// MockConfigLoggingConfigCall wrap *gomock.Call
type MockConfigLoggingConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigLoggingConfigCall) Return(arg0 string) *MockConfigLoggingConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigLoggingConfigCall) Do(f func() string) *MockConfigLoggingConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigLoggingConfigCall) DoAndReturn(f func() string) *MockConfigLoggingConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MetricsSpoolDir mocks base method.
func (m *MockConfig) MetricsSpoolDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsSpoolDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// MetricsSpoolDir indicates an expected call of MetricsSpoolDir.
func (mr *MockConfigMockRecorder) MetricsSpoolDir() *MockConfigMetricsSpoolDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsSpoolDir", reflect.TypeOf((*MockConfig)(nil).MetricsSpoolDir))
	return &MockConfigMetricsSpoolDirCall{Call: call}
}

// MockConfigMetricsSpoolDirCall wrap *gomock.Call
type MockConfigMetricsSpoolDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMetricsSpoolDirCall) Return(arg0 string) *MockConfigMetricsSpoolDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMetricsSpoolDirCall) Do(f func() string) *MockConfigMetricsSpoolDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMetricsSpoolDirCall) DoAndReturn(f func() string) *MockConfigMetricsSpoolDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockConfig) Model() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockConfigMockRecorder) Model() *MockConfigModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockConfig)(nil).Model))
	return &MockConfigModelCall{Call: call}
}

// MockConfigModelCall wrap *gomock.Call
type MockConfigModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigModelCall) Return(arg0 names.ModelTag) *MockConfigModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigModelCall) Do(f func() names.ModelTag) *MockConfigModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigModelCall) DoAndReturn(f func() names.ModelTag) *MockConfigModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MongoInfo mocks base method.
func (m *MockConfig) MongoInfo() (*mongo.MongoInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoInfo")
	ret0, _ := ret[0].(*mongo.MongoInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// MongoInfo indicates an expected call of MongoInfo.
func (mr *MockConfigMockRecorder) MongoInfo() *MockConfigMongoInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoInfo", reflect.TypeOf((*MockConfig)(nil).MongoInfo))
	return &MockConfigMongoInfoCall{Call: call}
}

// MockConfigMongoInfoCall wrap *gomock.Call
type MockConfigMongoInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMongoInfoCall) Return(arg0 *mongo.MongoInfo, arg1 bool) *MockConfigMongoInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMongoInfoCall) Do(f func() (*mongo.MongoInfo, bool)) *MockConfigMongoInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMongoInfoCall) DoAndReturn(f func() (*mongo.MongoInfo, bool)) *MockConfigMongoInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MongoMemoryProfile mocks base method.
func (m *MockConfig) MongoMemoryProfile() mongo.MemoryProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoMemoryProfile")
	ret0, _ := ret[0].(mongo.MemoryProfile)
	return ret0
}

// MongoMemoryProfile indicates an expected call of MongoMemoryProfile.
func (mr *MockConfigMockRecorder) MongoMemoryProfile() *MockConfigMongoMemoryProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoMemoryProfile", reflect.TypeOf((*MockConfig)(nil).MongoMemoryProfile))
	return &MockConfigMongoMemoryProfileCall{Call: call}
}

// MockConfigMongoMemoryProfileCall wrap *gomock.Call
type MockConfigMongoMemoryProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMongoMemoryProfileCall) Return(arg0 mongo.MemoryProfile) *MockConfigMongoMemoryProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMongoMemoryProfileCall) Do(f func() mongo.MemoryProfile) *MockConfigMongoMemoryProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMongoMemoryProfileCall) DoAndReturn(f func() mongo.MemoryProfile) *MockConfigMongoMemoryProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Nonce mocks base method.
func (m *MockConfig) Nonce() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(string)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockConfigMockRecorder) Nonce() *MockConfigNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockConfig)(nil).Nonce))
	return &MockConfigNonceCall{Call: call}
}

// MockConfigNonceCall wrap *gomock.Call
type MockConfigNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigNonceCall) Return(arg0 string) *MockConfigNonceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigNonceCall) Do(f func() string) *MockConfigNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigNonceCall) DoAndReturn(f func() string) *MockConfigNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ObjectStoreType mocks base method.
func (m *MockConfig) ObjectStoreType() objectstore.BackendType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStoreType")
	ret0, _ := ret[0].(objectstore.BackendType)
	return ret0
}

// ObjectStoreType indicates an expected call of ObjectStoreType.
func (mr *MockConfigMockRecorder) ObjectStoreType() *MockConfigObjectStoreTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStoreType", reflect.TypeOf((*MockConfig)(nil).ObjectStoreType))
	return &MockConfigObjectStoreTypeCall{Call: call}
}

// MockConfigObjectStoreTypeCall wrap *gomock.Call
type MockConfigObjectStoreTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigObjectStoreTypeCall) Return(arg0 objectstore.BackendType) *MockConfigObjectStoreTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigObjectStoreTypeCall) Do(f func() objectstore.BackendType) *MockConfigObjectStoreTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigObjectStoreTypeCall) DoAndReturn(f func() objectstore.BackendType) *MockConfigObjectStoreTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OldPassword mocks base method.
func (m *MockConfig) OldPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// OldPassword indicates an expected call of OldPassword.
func (mr *MockConfigMockRecorder) OldPassword() *MockConfigOldPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldPassword", reflect.TypeOf((*MockConfig)(nil).OldPassword))
	return &MockConfigOldPasswordCall{Call: call}
}

// MockConfigOldPasswordCall wrap *gomock.Call
type MockConfigOldPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOldPasswordCall) Return(arg0 string) *MockConfigOldPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOldPasswordCall) Do(f func() string) *MockConfigOldPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOldPasswordCall) DoAndReturn(f func() string) *MockConfigOldPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryEnabled mocks base method.
func (m *MockConfig) OpenTelemetryEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryEnabled indicates an expected call of OpenTelemetryEnabled.
func (mr *MockConfigMockRecorder) OpenTelemetryEnabled() *MockConfigOpenTelemetryEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryEnabled", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryEnabled))
	return &MockConfigOpenTelemetryEnabledCall{Call: call}
}

// MockConfigOpenTelemetryEnabledCall wrap *gomock.Call
type MockConfigOpenTelemetryEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryEnabledCall) Return(arg0 bool) *MockConfigOpenTelemetryEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryEnabledCall) Do(f func() bool) *MockConfigOpenTelemetryEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryEnabledCall) DoAndReturn(f func() bool) *MockConfigOpenTelemetryEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryEndpoint mocks base method.
func (m *MockConfig) OpenTelemetryEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// OpenTelemetryEndpoint indicates an expected call of OpenTelemetryEndpoint.
func (mr *MockConfigMockRecorder) OpenTelemetryEndpoint() *MockConfigOpenTelemetryEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryEndpoint", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryEndpoint))
	return &MockConfigOpenTelemetryEndpointCall{Call: call}
}

// MockConfigOpenTelemetryEndpointCall wrap *gomock.Call
type MockConfigOpenTelemetryEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryEndpointCall) Return(arg0 string) *MockConfigOpenTelemetryEndpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryEndpointCall) Do(f func() string) *MockConfigOpenTelemetryEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryEndpointCall) DoAndReturn(f func() string) *MockConfigOpenTelemetryEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryInsecure mocks base method.
func (m *MockConfig) OpenTelemetryInsecure() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryInsecure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryInsecure indicates an expected call of OpenTelemetryInsecure.
func (mr *MockConfigMockRecorder) OpenTelemetryInsecure() *MockConfigOpenTelemetryInsecureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryInsecure", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryInsecure))
	return &MockConfigOpenTelemetryInsecureCall{Call: call}
}

// MockConfigOpenTelemetryInsecureCall wrap *gomock.Call
type MockConfigOpenTelemetryInsecureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryInsecureCall) Return(arg0 bool) *MockConfigOpenTelemetryInsecureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryInsecureCall) Do(f func() bool) *MockConfigOpenTelemetryInsecureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryInsecureCall) DoAndReturn(f func() bool) *MockConfigOpenTelemetryInsecureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetrySampleRatio mocks base method.
func (m *MockConfig) OpenTelemetrySampleRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetrySampleRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// OpenTelemetrySampleRatio indicates an expected call of OpenTelemetrySampleRatio.
func (mr *MockConfigMockRecorder) OpenTelemetrySampleRatio() *MockConfigOpenTelemetrySampleRatioCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetrySampleRatio", reflect.TypeOf((*MockConfig)(nil).OpenTelemetrySampleRatio))
	return &MockConfigOpenTelemetrySampleRatioCall{Call: call}
}

// MockConfigOpenTelemetrySampleRatioCall wrap *gomock.Call
type MockConfigOpenTelemetrySampleRatioCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetrySampleRatioCall) Return(arg0 float64) *MockConfigOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetrySampleRatioCall) Do(f func() float64) *MockConfigOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetrySampleRatioCall) DoAndReturn(f func() float64) *MockConfigOpenTelemetrySampleRatioCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryStackTraces mocks base method.
func (m *MockConfig) OpenTelemetryStackTraces() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryStackTraces")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryStackTraces indicates an expected call of OpenTelemetryStackTraces.
func (mr *MockConfigMockRecorder) OpenTelemetryStackTraces() *MockConfigOpenTelemetryStackTracesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryStackTraces", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryStackTraces))
	return &MockConfigOpenTelemetryStackTracesCall{Call: call}
}

// MockConfigOpenTelemetryStackTracesCall wrap *gomock.Call
type MockConfigOpenTelemetryStackTracesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryStackTracesCall) Return(arg0 bool) *MockConfigOpenTelemetryStackTracesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryStackTracesCall) Do(f func() bool) *MockConfigOpenTelemetryStackTracesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryStackTracesCall) DoAndReturn(f func() bool) *MockConfigOpenTelemetryStackTracesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryTailSamplingThreshold mocks base method.
func (m *MockConfig) OpenTelemetryTailSamplingThreshold() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryTailSamplingThreshold")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// OpenTelemetryTailSamplingThreshold indicates an expected call of OpenTelemetryTailSamplingThreshold.
func (mr *MockConfigMockRecorder) OpenTelemetryTailSamplingThreshold() *MockConfigOpenTelemetryTailSamplingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryTailSamplingThreshold", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryTailSamplingThreshold))
	return &MockConfigOpenTelemetryTailSamplingThresholdCall{Call: call}
}

// MockConfigOpenTelemetryTailSamplingThresholdCall wrap *gomock.Call
type MockConfigOpenTelemetryTailSamplingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryTailSamplingThresholdCall) Return(arg0 time.Duration) *MockConfigOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryTailSamplingThresholdCall) Do(f func() time.Duration) *MockConfigOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryTailSamplingThresholdCall) DoAndReturn(f func() time.Duration) *MockConfigOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTracingEnabled mocks base method.
func (m *MockConfig) QueryTracingEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTracingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// QueryTracingEnabled indicates an expected call of QueryTracingEnabled.
func (mr *MockConfigMockRecorder) QueryTracingEnabled() *MockConfigQueryTracingEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTracingEnabled", reflect.TypeOf((*MockConfig)(nil).QueryTracingEnabled))
	return &MockConfigQueryTracingEnabledCall{Call: call}
}

// MockConfigQueryTracingEnabledCall wrap *gomock.Call
type MockConfigQueryTracingEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigQueryTracingEnabledCall) Return(arg0 bool) *MockConfigQueryTracingEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigQueryTracingEnabledCall) Do(f func() bool) *MockConfigQueryTracingEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigQueryTracingEnabledCall) DoAndReturn(f func() bool) *MockConfigQueryTracingEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTracingThreshold mocks base method.
func (m *MockConfig) QueryTracingThreshold() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTracingThreshold")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// QueryTracingThreshold indicates an expected call of QueryTracingThreshold.
func (mr *MockConfigMockRecorder) QueryTracingThreshold() *MockConfigQueryTracingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTracingThreshold", reflect.TypeOf((*MockConfig)(nil).QueryTracingThreshold))
	return &MockConfigQueryTracingThresholdCall{Call: call}
}

// MockConfigQueryTracingThresholdCall wrap *gomock.Call
type MockConfigQueryTracingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigQueryTracingThresholdCall) Return(arg0 time.Duration) *MockConfigQueryTracingThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigQueryTracingThresholdCall) Do(f func() time.Duration) *MockConfigQueryTracingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigQueryTracingThresholdCall) DoAndReturn(f func() time.Duration) *MockConfigQueryTracingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateServingInfo mocks base method.
func (m *MockConfig) StateServingInfo() (controller.StateServingInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateServingInfo")
	ret0, _ := ret[0].(controller.StateServingInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// StateServingInfo indicates an expected call of StateServingInfo.
func (mr *MockConfigMockRecorder) StateServingInfo() *MockConfigStateServingInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateServingInfo", reflect.TypeOf((*MockConfig)(nil).StateServingInfo))
	return &MockConfigStateServingInfoCall{Call: call}
}

// MockConfigStateServingInfoCall wrap *gomock.Call
type MockConfigStateServingInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigStateServingInfoCall) Return(arg0 controller.StateServingInfo, arg1 bool) *MockConfigStateServingInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigStateServingInfoCall) Do(f func() (controller.StateServingInfo, bool)) *MockConfigStateServingInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigStateServingInfoCall) DoAndReturn(f func() (controller.StateServingInfo, bool)) *MockConfigStateServingInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SystemIdentityPath mocks base method.
func (m *MockConfig) SystemIdentityPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemIdentityPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// SystemIdentityPath indicates an expected call of SystemIdentityPath.
func (mr *MockConfigMockRecorder) SystemIdentityPath() *MockConfigSystemIdentityPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemIdentityPath", reflect.TypeOf((*MockConfig)(nil).SystemIdentityPath))
	return &MockConfigSystemIdentityPathCall{Call: call}
}

// MockConfigSystemIdentityPathCall wrap *gomock.Call
type MockConfigSystemIdentityPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSystemIdentityPathCall) Return(arg0 string) *MockConfigSystemIdentityPathCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSystemIdentityPathCall) Do(f func() string) *MockConfigSystemIdentityPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSystemIdentityPathCall) DoAndReturn(f func() string) *MockConfigSystemIdentityPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockConfig) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockConfigMockRecorder) Tag() *MockConfigTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockConfig)(nil).Tag))
	return &MockConfigTagCall{Call: call}
}

// MockConfigTagCall wrap *gomock.Call
type MockConfigTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigTagCall) Return(arg0 names.Tag) *MockConfigTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigTagCall) Do(f func() names.Tag) *MockConfigTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigTagCall) DoAndReturn(f func() names.Tag) *MockConfigTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TransientDataDir mocks base method.
func (m *MockConfig) TransientDataDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransientDataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// TransientDataDir indicates an expected call of TransientDataDir.
func (mr *MockConfigMockRecorder) TransientDataDir() *MockConfigTransientDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransientDataDir", reflect.TypeOf((*MockConfig)(nil).TransientDataDir))
	return &MockConfigTransientDataDirCall{Call: call}
}

// MockConfigTransientDataDirCall wrap *gomock.Call
type MockConfigTransientDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigTransientDataDirCall) Return(arg0 string) *MockConfigTransientDataDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigTransientDataDirCall) Do(f func() string) *MockConfigTransientDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigTransientDataDirCall) DoAndReturn(f func() string) *MockConfigTransientDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradedToVersion mocks base method.
func (m *MockConfig) UpgradedToVersion() version.Number {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradedToVersion")
	ret0, _ := ret[0].(version.Number)
	return ret0
}

// UpgradedToVersion indicates an expected call of UpgradedToVersion.
func (mr *MockConfigMockRecorder) UpgradedToVersion() *MockConfigUpgradedToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradedToVersion", reflect.TypeOf((*MockConfig)(nil).UpgradedToVersion))
	return &MockConfigUpgradedToVersionCall{Call: call}
}

// MockConfigUpgradedToVersionCall wrap *gomock.Call
type MockConfigUpgradedToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigUpgradedToVersionCall) Return(arg0 version.Number) *MockConfigUpgradedToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigUpgradedToVersionCall) Do(f func() version.Number) *MockConfigUpgradedToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigUpgradedToVersionCall) DoAndReturn(f func() version.Number) *MockConfigUpgradedToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockConfig) Value(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockConfigMockRecorder) Value(arg0 any) *MockConfigValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockConfig)(nil).Value), arg0)
	return &MockConfigValueCall{Call: call}
}

// MockConfigValueCall wrap *gomock.Call
type MockConfigValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigValueCall) Return(arg0 string) *MockConfigValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigValueCall) Do(f func(string) string) *MockConfigValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigValueCall) DoAndReturn(f func(string) string) *MockConfigValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteCommands mocks base method.
func (m *MockConfig) WriteCommands(arg0 shell.Renderer) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCommands", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteCommands indicates an expected call of WriteCommands.
func (mr *MockConfigMockRecorder) WriteCommands(arg0 any) *MockConfigWriteCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCommands", reflect.TypeOf((*MockConfig)(nil).WriteCommands), arg0)
	return &MockConfigWriteCommandsCall{Call: call}
}

// MockConfigWriteCommandsCall wrap *gomock.Call
type MockConfigWriteCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigWriteCommandsCall) Return(arg0 []string, arg1 error) *MockConfigWriteCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigWriteCommandsCall) Do(f func(shell.Renderer) ([]string, error)) *MockConfigWriteCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigWriteCommandsCall) DoAndReturn(f func(shell.Renderer) ([]string, error)) *MockConfigWriteCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
