// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/objectstore (interfaces: Claimer,ClaimExtender,TrackedObjectStore,RemoteRetriever)
//
// Generated by this command:
//
//	mockgen -typed -package objectstore -destination state_mock_test.go github.com/juju/juju/internal/objectstore Claimer,ClaimExtender,TrackedObjectStore,RemoteRetriever
//

// Package objectstore is a generated GoMock package.
package objectstore

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	objectstore "github.com/juju/juju/core/objectstore"
	gomock "go.uber.org/mock/gomock"
)

// MockClaimer is a mock of Claimer interface.
type MockClaimer struct {
	ctrl     *gomock.Controller
	recorder *MockClaimerMockRecorder
}

// MockClaimerMockRecorder is the mock recorder for MockClaimer.
type MockClaimerMockRecorder struct {
	mock *MockClaimer
}

// NewMockClaimer creates a new mock instance.
func NewMockClaimer(ctrl *gomock.Controller) *MockClaimer {
	mock := &MockClaimer{ctrl: ctrl}
	mock.recorder = &MockClaimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimer) EXPECT() *MockClaimerMockRecorder {
	return m.recorder
}

// Claim mocks base method.
func (m *MockClaimer) Claim(arg0 context.Context, arg1 string) (ClaimExtender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claim", arg0, arg1)
	ret0, _ := ret[0].(ClaimExtender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claim indicates an expected call of Claim.
func (mr *MockClaimerMockRecorder) Claim(arg0, arg1 any) *MockClaimerClaimCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockClaimer)(nil).Claim), arg0, arg1)
	return &MockClaimerClaimCall{Call: call}
}

// MockClaimerClaimCall wrap *gomock.Call
type MockClaimerClaimCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClaimerClaimCall) Return(arg0 ClaimExtender, arg1 error) *MockClaimerClaimCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClaimerClaimCall) Do(f func(context.Context, string) (ClaimExtender, error)) *MockClaimerClaimCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClaimerClaimCall) DoAndReturn(f func(context.Context, string) (ClaimExtender, error)) *MockClaimerClaimCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Release mocks base method.
func (m *MockClaimer) Release(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockClaimerMockRecorder) Release(arg0, arg1 any) *MockClaimerReleaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockClaimer)(nil).Release), arg0, arg1)
	return &MockClaimerReleaseCall{Call: call}
}

// MockClaimerReleaseCall wrap *gomock.Call
type MockClaimerReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClaimerReleaseCall) Return(arg0 error) *MockClaimerReleaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClaimerReleaseCall) Do(f func(context.Context, string) error) *MockClaimerReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClaimerReleaseCall) DoAndReturn(f func(context.Context, string) error) *MockClaimerReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClaimExtender is a mock of ClaimExtender interface.
type MockClaimExtender struct {
	ctrl     *gomock.Controller
	recorder *MockClaimExtenderMockRecorder
}

// MockClaimExtenderMockRecorder is the mock recorder for MockClaimExtender.
type MockClaimExtenderMockRecorder struct {
	mock *MockClaimExtender
}

// NewMockClaimExtender creates a new mock instance.
func NewMockClaimExtender(ctrl *gomock.Controller) *MockClaimExtender {
	mock := &MockClaimExtender{ctrl: ctrl}
	mock.recorder = &MockClaimExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimExtender) EXPECT() *MockClaimExtenderMockRecorder {
	return m.recorder
}

// Duration mocks base method.
func (m *MockClaimExtender) Duration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Duration indicates an expected call of Duration.
func (mr *MockClaimExtenderMockRecorder) Duration() *MockClaimExtenderDurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockClaimExtender)(nil).Duration))
	return &MockClaimExtenderDurationCall{Call: call}
}

// MockClaimExtenderDurationCall wrap *gomock.Call
type MockClaimExtenderDurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClaimExtenderDurationCall) Return(arg0 time.Duration) *MockClaimExtenderDurationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClaimExtenderDurationCall) Do(f func() time.Duration) *MockClaimExtenderDurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClaimExtenderDurationCall) DoAndReturn(f func() time.Duration) *MockClaimExtenderDurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Extend mocks base method.
func (m *MockClaimExtender) Extend(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extend", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Extend indicates an expected call of Extend.
func (mr *MockClaimExtenderMockRecorder) Extend(arg0 any) *MockClaimExtenderExtendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extend", reflect.TypeOf((*MockClaimExtender)(nil).Extend), arg0)
	return &MockClaimExtenderExtendCall{Call: call}
}

// MockClaimExtenderExtendCall wrap *gomock.Call
type MockClaimExtenderExtendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClaimExtenderExtendCall) Return(arg0 error) *MockClaimExtenderExtendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClaimExtenderExtendCall) Do(f func(context.Context) error) *MockClaimExtenderExtendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClaimExtenderExtendCall) DoAndReturn(f func(context.Context) error) *MockClaimExtenderExtendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTrackedObjectStore is a mock of TrackedObjectStore interface.
type MockTrackedObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockTrackedObjectStoreMockRecorder
}

// MockTrackedObjectStoreMockRecorder is the mock recorder for MockTrackedObjectStore.
type MockTrackedObjectStoreMockRecorder struct {
	mock *MockTrackedObjectStore
}

// NewMockTrackedObjectStore creates a new mock instance.
func NewMockTrackedObjectStore(ctrl *gomock.Controller) *MockTrackedObjectStore {
	mock := &MockTrackedObjectStore{ctrl: ctrl}
	mock.recorder = &MockTrackedObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackedObjectStore) EXPECT() *MockTrackedObjectStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTrackedObjectStore) Get(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockTrackedObjectStoreMockRecorder) Get(arg0, arg1 any) *MockTrackedObjectStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTrackedObjectStore)(nil).Get), arg0, arg1)
	return &MockTrackedObjectStoreGetCall{Call: call}
}

// MockTrackedObjectStoreGetCall wrap *gomock.Call
type MockTrackedObjectStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreGetCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockTrackedObjectStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreGetCall) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockTrackedObjectStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreGetCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockTrackedObjectStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBySHA256 mocks base method.
func (m *MockTrackedObjectStore) GetBySHA256(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySHA256", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBySHA256 indicates an expected call of GetBySHA256.
func (mr *MockTrackedObjectStoreMockRecorder) GetBySHA256(arg0, arg1 any) *MockTrackedObjectStoreGetBySHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySHA256", reflect.TypeOf((*MockTrackedObjectStore)(nil).GetBySHA256), arg0, arg1)
	return &MockTrackedObjectStoreGetBySHA256Call{Call: call}
}

// MockTrackedObjectStoreGetBySHA256Call wrap *gomock.Call
type MockTrackedObjectStoreGetBySHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreGetBySHA256Call) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockTrackedObjectStoreGetBySHA256Call {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreGetBySHA256Call) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockTrackedObjectStoreGetBySHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreGetBySHA256Call) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockTrackedObjectStoreGetBySHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBySHA256Prefix mocks base method.
func (m *MockTrackedObjectStore) GetBySHA256Prefix(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySHA256Prefix", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBySHA256Prefix indicates an expected call of GetBySHA256Prefix.
func (mr *MockTrackedObjectStoreMockRecorder) GetBySHA256Prefix(arg0, arg1 any) *MockTrackedObjectStoreGetBySHA256PrefixCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySHA256Prefix", reflect.TypeOf((*MockTrackedObjectStore)(nil).GetBySHA256Prefix), arg0, arg1)
	return &MockTrackedObjectStoreGetBySHA256PrefixCall{Call: call}
}

// MockTrackedObjectStoreGetBySHA256PrefixCall wrap *gomock.Call
type MockTrackedObjectStoreGetBySHA256PrefixCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreGetBySHA256PrefixCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockTrackedObjectStoreGetBySHA256PrefixCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreGetBySHA256PrefixCall) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockTrackedObjectStoreGetBySHA256PrefixCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreGetBySHA256PrefixCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockTrackedObjectStoreGetBySHA256PrefixCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockTrackedObjectStore) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockTrackedObjectStoreMockRecorder) Kill() *MockTrackedObjectStoreKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTrackedObjectStore)(nil).Kill))
	return &MockTrackedObjectStoreKillCall{Call: call}
}

// MockTrackedObjectStoreKillCall wrap *gomock.Call
type MockTrackedObjectStoreKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreKillCall) Return() *MockTrackedObjectStoreKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreKillCall) Do(f func()) *MockTrackedObjectStoreKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreKillCall) DoAndReturn(f func()) *MockTrackedObjectStoreKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFiles mocks base method.
func (m *MockTrackedObjectStore) ListFiles(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockTrackedObjectStoreMockRecorder) ListFiles(arg0 any) *MockTrackedObjectStoreListFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockTrackedObjectStore)(nil).ListFiles), arg0)
	return &MockTrackedObjectStoreListFilesCall{Call: call}
}

// MockTrackedObjectStoreListFilesCall wrap *gomock.Call
type MockTrackedObjectStoreListFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreListFilesCall) Return(arg0 []string, arg1 error) *MockTrackedObjectStoreListFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreListFilesCall) Do(f func(context.Context) ([]string, error)) *MockTrackedObjectStoreListFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreListFilesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockTrackedObjectStoreListFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PruneFile mocks base method.
func (m *MockTrackedObjectStore) PruneFile(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneFile indicates an expected call of PruneFile.
func (mr *MockTrackedObjectStoreMockRecorder) PruneFile(arg0, arg1 any) *MockTrackedObjectStorePruneFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneFile", reflect.TypeOf((*MockTrackedObjectStore)(nil).PruneFile), arg0, arg1)
	return &MockTrackedObjectStorePruneFileCall{Call: call}
}

// MockTrackedObjectStorePruneFileCall wrap *gomock.Call
type MockTrackedObjectStorePruneFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStorePruneFileCall) Return(arg0 error) *MockTrackedObjectStorePruneFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStorePruneFileCall) Do(f func(context.Context, string) error) *MockTrackedObjectStorePruneFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStorePruneFileCall) DoAndReturn(f func(context.Context, string) error) *MockTrackedObjectStorePruneFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Put mocks base method.
func (m *MockTrackedObjectStore) Put(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockTrackedObjectStoreMockRecorder) Put(arg0, arg1, arg2, arg3 any) *MockTrackedObjectStorePutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTrackedObjectStore)(nil).Put), arg0, arg1, arg2, arg3)
	return &MockTrackedObjectStorePutCall{Call: call}
}

// MockTrackedObjectStorePutCall wrap *gomock.Call
type MockTrackedObjectStorePutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStorePutCall) Return(arg0 objectstore.UUID, arg1 error) *MockTrackedObjectStorePutCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStorePutCall) Do(f func(context.Context, string, io.Reader, int64) (objectstore.UUID, error)) *MockTrackedObjectStorePutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStorePutCall) DoAndReturn(f func(context.Context, string, io.Reader, int64) (objectstore.UUID, error)) *MockTrackedObjectStorePutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutAndCheckHash mocks base method.
func (m *MockTrackedObjectStore) PutAndCheckHash(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 string) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAndCheckHash", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAndCheckHash indicates an expected call of PutAndCheckHash.
func (mr *MockTrackedObjectStoreMockRecorder) PutAndCheckHash(arg0, arg1, arg2, arg3, arg4 any) *MockTrackedObjectStorePutAndCheckHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAndCheckHash", reflect.TypeOf((*MockTrackedObjectStore)(nil).PutAndCheckHash), arg0, arg1, arg2, arg3, arg4)
	return &MockTrackedObjectStorePutAndCheckHashCall{Call: call}
}

// MockTrackedObjectStorePutAndCheckHashCall wrap *gomock.Call
type MockTrackedObjectStorePutAndCheckHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStorePutAndCheckHashCall) Return(arg0 objectstore.UUID, arg1 error) *MockTrackedObjectStorePutAndCheckHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStorePutAndCheckHashCall) Do(f func(context.Context, string, io.Reader, int64, string) (objectstore.UUID, error)) *MockTrackedObjectStorePutAndCheckHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStorePutAndCheckHashCall) DoAndReturn(f func(context.Context, string, io.Reader, int64, string) (objectstore.UUID, error)) *MockTrackedObjectStorePutAndCheckHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockTrackedObjectStore) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTrackedObjectStoreMockRecorder) Remove(arg0, arg1 any) *MockTrackedObjectStoreRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTrackedObjectStore)(nil).Remove), arg0, arg1)
	return &MockTrackedObjectStoreRemoveCall{Call: call}
}

// MockTrackedObjectStoreRemoveCall wrap *gomock.Call
type MockTrackedObjectStoreRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreRemoveCall) Return(arg0 error) *MockTrackedObjectStoreRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreRemoveCall) Do(f func(context.Context, string) error) *MockTrackedObjectStoreRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreRemoveCall) DoAndReturn(f func(context.Context, string) error) *MockTrackedObjectStoreRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAll mocks base method.
func (m *MockTrackedObjectStore) RemoveAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockTrackedObjectStoreMockRecorder) RemoveAll(arg0 any) *MockTrackedObjectStoreRemoveAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockTrackedObjectStore)(nil).RemoveAll), arg0)
	return &MockTrackedObjectStoreRemoveAllCall{Call: call}
}

// MockTrackedObjectStoreRemoveAllCall wrap *gomock.Call
type MockTrackedObjectStoreRemoveAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreRemoveAllCall) Return(arg0 error) *MockTrackedObjectStoreRemoveAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreRemoveAllCall) Do(f func(context.Context) error) *MockTrackedObjectStoreRemoveAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreRemoveAllCall) DoAndReturn(f func(context.Context) error) *MockTrackedObjectStoreRemoveAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockTrackedObjectStore) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockTrackedObjectStoreMockRecorder) Report() *MockTrackedObjectStoreReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockTrackedObjectStore)(nil).Report))
	return &MockTrackedObjectStoreReportCall{Call: call}
}

// MockTrackedObjectStoreReportCall wrap *gomock.Call
type MockTrackedObjectStoreReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreReportCall) Return(arg0 map[string]any) *MockTrackedObjectStoreReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreReportCall) Do(f func() map[string]any) *MockTrackedObjectStoreReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreReportCall) DoAndReturn(f func() map[string]any) *MockTrackedObjectStoreReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockTrackedObjectStore) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTrackedObjectStoreMockRecorder) Wait() *MockTrackedObjectStoreWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrackedObjectStore)(nil).Wait))
	return &MockTrackedObjectStoreWaitCall{Call: call}
}

// MockTrackedObjectStoreWaitCall wrap *gomock.Call
type MockTrackedObjectStoreWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedObjectStoreWaitCall) Return(arg0 error) *MockTrackedObjectStoreWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedObjectStoreWaitCall) Do(f func() error) *MockTrackedObjectStoreWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedObjectStoreWaitCall) DoAndReturn(f func() error) *MockTrackedObjectStoreWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteRetriever is a mock of RemoteRetriever interface.
type MockRemoteRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteRetrieverMockRecorder
}

// MockRemoteRetrieverMockRecorder is the mock recorder for MockRemoteRetriever.
type MockRemoteRetrieverMockRecorder struct {
	mock *MockRemoteRetriever
}

// NewMockRemoteRetriever creates a new mock instance.
func NewMockRemoteRetriever(ctrl *gomock.Controller) *MockRemoteRetriever {
	mock := &MockRemoteRetriever{ctrl: ctrl}
	mock.recorder = &MockRemoteRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteRetriever) EXPECT() *MockRemoteRetrieverMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockRemoteRetriever) Retrieve(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockRemoteRetrieverMockRecorder) Retrieve(arg0, arg1 any) *MockRemoteRetrieverRetrieveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRemoteRetriever)(nil).Retrieve), arg0, arg1)
	return &MockRemoteRetrieverRetrieveCall{Call: call}
}

// MockRemoteRetrieverRetrieveCall wrap *gomock.Call
type MockRemoteRetrieverRetrieveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteRetrieverRetrieveCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockRemoteRetrieverRetrieveCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteRetrieverRetrieveCall) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockRemoteRetrieverRetrieveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteRetrieverRetrieveCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockRemoteRetrieverRetrieveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
