// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/upgrades (interfaces: Context)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/context_mock.go github.com/juju/juju/internal/upgrades Context
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	agent "github.com/juju/juju/agent"
	base "github.com/juju/juju/api/base"
	upgrades "github.com/juju/juju/internal/upgrades"
	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// APIContext mocks base method.
func (m *MockContext) APIContext() upgrades.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIContext")
	ret0, _ := ret[0].(upgrades.Context)
	return ret0
}

// APIContext indicates an expected call of APIContext.
func (mr *MockContextMockRecorder) APIContext() *MockContextAPIContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIContext", reflect.TypeOf((*MockContext)(nil).APIContext))
	return &MockContextAPIContextCall{Call: call}
}

// MockContextAPIContextCall wrap *gomock.Call
type MockContextAPIContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextAPIContextCall) Return(arg0 upgrades.Context) *MockContextAPIContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextAPIContextCall) Do(f func() upgrades.Context) *MockContextAPIContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextAPIContextCall) DoAndReturn(f func() upgrades.Context) *MockContextAPIContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// APIState mocks base method.
func (m *MockContext) APIState() base.APICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIState")
	ret0, _ := ret[0].(base.APICaller)
	return ret0
}

// APIState indicates an expected call of APIState.
func (mr *MockContextMockRecorder) APIState() *MockContextAPIStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIState", reflect.TypeOf((*MockContext)(nil).APIState))
	return &MockContextAPIStateCall{Call: call}
}

// MockContextAPIStateCall wrap *gomock.Call
type MockContextAPIStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextAPIStateCall) Return(arg0 base.APICaller) *MockContextAPIStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextAPIStateCall) Do(f func() base.APICaller) *MockContextAPIStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextAPIStateCall) DoAndReturn(f func() base.APICaller) *MockContextAPIStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentConfig mocks base method.
func (m *MockContext) AgentConfig() agent.ConfigSetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentConfig")
	ret0, _ := ret[0].(agent.ConfigSetter)
	return ret0
}

// AgentConfig indicates an expected call of AgentConfig.
func (mr *MockContextMockRecorder) AgentConfig() *MockContextAgentConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentConfig", reflect.TypeOf((*MockContext)(nil).AgentConfig))
	return &MockContextAgentConfigCall{Call: call}
}

// MockContextAgentConfigCall wrap *gomock.Call
type MockContextAgentConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextAgentConfigCall) Return(arg0 agent.ConfigSetter) *MockContextAgentConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextAgentConfigCall) Do(f func() agent.ConfigSetter) *MockContextAgentConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextAgentConfigCall) DoAndReturn(f func() agent.ConfigSetter) *MockContextAgentConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
