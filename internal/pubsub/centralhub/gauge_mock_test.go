// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/pubsub/centralhub (interfaces: GaugeVec)
//
// Generated by this command:
//
//	mockgen -typed -package centralhub -destination gauge_mock_test.go github.com/juju/juju/internal/pubsub/centralhub GaugeVec
//

// Package centralhub is a generated GoMock package.
package centralhub

import (
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
)

// MockGaugeVec is a mock of GaugeVec interface.
type MockGaugeVec struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeVecMockRecorder
}

// MockGaugeVecMockRecorder is the mock recorder for MockGaugeVec.
type MockGaugeVecMockRecorder struct {
	mock *MockGaugeVec
}

// NewMockGaugeVec creates a new mock instance.
func NewMockGaugeVec(ctrl *gomock.Controller) *MockGaugeVec {
	mock := &MockGaugeVec{ctrl: ctrl}
	mock.recorder = &MockGaugeVecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeVec) EXPECT() *MockGaugeVecMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockGaugeVec) ISGOMOCK() struct{} {
	return struct{}{}
}

// Collect mocks base method.
func (m *MockGaugeVec) Collect(arg0 chan<- prometheus.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect", arg0)
}

// Collect indicates an expected call of Collect.
func (mr *MockGaugeVecMockRecorder) Collect(arg0 any) *MockGaugeVecCollectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockGaugeVec)(nil).Collect), arg0)
	return &MockGaugeVecCollectCall{Call: call}
}

// MockGaugeVecCollectCall wrap *gomock.Call
type MockGaugeVecCollectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGaugeVecCollectCall) Return() *MockGaugeVecCollectCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGaugeVecCollectCall) Do(f func(chan<- prometheus.Metric)) *MockGaugeVecCollectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGaugeVecCollectCall) DoAndReturn(f func(chan<- prometheus.Metric)) *MockGaugeVecCollectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Describe mocks base method.
func (m *MockGaugeVec) Describe(arg0 chan<- *prometheus.Desc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe.
func (mr *MockGaugeVecMockRecorder) Describe(arg0 any) *MockGaugeVecDescribeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockGaugeVec)(nil).Describe), arg0)
	return &MockGaugeVecDescribeCall{Call: call}
}

// MockGaugeVecDescribeCall wrap *gomock.Call
type MockGaugeVecDescribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGaugeVecDescribeCall) Return() *MockGaugeVecDescribeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGaugeVecDescribeCall) Do(f func(chan<- *prometheus.Desc)) *MockGaugeVecDescribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGaugeVecDescribeCall) DoAndReturn(f func(chan<- *prometheus.Desc)) *MockGaugeVecDescribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// With mocks base method.
func (m *MockGaugeVec) With(arg0 prometheus.Labels) prometheus.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", arg0)
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockGaugeVecMockRecorder) With(arg0 any) *MockGaugeVecWithCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockGaugeVec)(nil).With), arg0)
	return &MockGaugeVecWithCall{Call: call}
}

// MockGaugeVecWithCall wrap *gomock.Call
type MockGaugeVecWithCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGaugeVecWithCall) Return(arg0 prometheus.Gauge) *MockGaugeVecWithCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGaugeVecWithCall) Do(f func(prometheus.Labels) prometheus.Gauge) *MockGaugeVecWithCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGaugeVecWithCall) DoAndReturn(f func(prometheus.Labels) prometheus.Gauge) *MockGaugeVecWithCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
