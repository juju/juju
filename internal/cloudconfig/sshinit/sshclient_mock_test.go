// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/utils/v4/ssh (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -package sshinit_test -destination sshclient_mock_test.go github.com/juju/utils/v4/ssh Client
//

// Package sshinit_test is a generated GoMock package.
package sshinit_test

import (
	reflect "reflect"

	ssh "github.com/juju/utils/v4/ssh"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Command mocks base method.
func (m *MockClient) Command(arg0 string, arg1 []string, arg2 *ssh.Options) *ssh.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ssh.Cmd)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockClientMockRecorder) Command(arg0, arg1, arg2 any) *MockClientCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockClient)(nil).Command), arg0, arg1, arg2)
	return &MockClientCommandCall{Call: call}
}

// MockClientCommandCall wrap *gomock.Call
type MockClientCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCommandCall) Return(arg0 *ssh.Cmd) *MockClientCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCommandCall) Do(f func(string, []string, *ssh.Options) *ssh.Cmd) *MockClientCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCommandCall) DoAndReturn(f func(string, []string, *ssh.Options) *ssh.Cmd) *MockClientCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Copy mocks base method.
func (m *MockClient) Copy(arg0 []string, arg1 *ssh.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockClientMockRecorder) Copy(arg0, arg1 any) *MockClientCopyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockClient)(nil).Copy), arg0, arg1)
	return &MockClientCopyCall{Call: call}
}

// MockClientCopyCall wrap *gomock.Call
type MockClientCopyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCopyCall) Return(arg0 error) *MockClientCopyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCopyCall) Do(f func([]string, *ssh.Options) error) *MockClientCopyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCopyCall) DoAndReturn(f func([]string, *ssh.Options) error) *MockClientCopyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
