// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/bootstrap (interfaces: AgentBinaryStorage,AgentBinaryStore,ControllerCharmDeployer,HTTPClient,Machine,MachineGetter,ApplicationService,IAASApplicationService,CAASApplicationService,ModelConfigService,Downloader,AgentPasswordService,ServiceManager)
//
// Generated by this command:
//
//	mockgen -typed -package bootstrap -destination bootstrap_mock_test.go github.com/juju/juju/internal/bootstrap AgentBinaryStorage,AgentBinaryStore,ControllerCharmDeployer,HTTPClient,Machine,MachineGetter,ApplicationService,IAASApplicationService,CAASApplicationService,ModelConfigService,Downloader,AgentPasswordService,ServiceManager
//

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	context "context"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	agentbinary "github.com/juju/juju/core/agentbinary"
	application "github.com/juju/juju/core/application"
	base "github.com/juju/juju/core/base"
	charm "github.com/juju/juju/core/charm"
	network "github.com/juju/juju/core/network"
	unit "github.com/juju/juju/core/unit"
	application0 "github.com/juju/juju/domain/application"
	service "github.com/juju/juju/domain/application/service"
	config "github.com/juju/juju/environs/config"
	charm0 "github.com/juju/juju/internal/charm"
	charmdownloader "github.com/juju/juju/internal/charm/charmdownloader"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryStorage is a mock of AgentBinaryStorage interface.
type MockAgentBinaryStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryStorageMockRecorder
}

// MockAgentBinaryStorageMockRecorder is the mock recorder for MockAgentBinaryStorage.
type MockAgentBinaryStorageMockRecorder struct {
	mock *MockAgentBinaryStorage
}

// NewMockAgentBinaryStorage creates a new mock instance.
func NewMockAgentBinaryStorage(ctrl *gomock.Controller) *MockAgentBinaryStorage {
	mock := &MockAgentBinaryStorage{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryStorage) EXPECT() *MockAgentBinaryStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAgentBinaryStorage) Add(arg0 context.Context, arg1 io.Reader, arg2 binarystorage.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAgentBinaryStorageMockRecorder) Add(arg0, arg1, arg2 any) *MockAgentBinaryStorageAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAgentBinaryStorage)(nil).Add), arg0, arg1, arg2)
	return &MockAgentBinaryStorageAddCall{Call: call}
}

// MockAgentBinaryStorageAddCall wrap *gomock.Call
type MockAgentBinaryStorageAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStorageAddCall) Return(arg0 error) *MockAgentBinaryStorageAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStorageAddCall) Do(f func(context.Context, io.Reader, binarystorage.Metadata) error) *MockAgentBinaryStorageAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStorageAddCall) DoAndReturn(f func(context.Context, io.Reader, binarystorage.Metadata) error) *MockAgentBinaryStorageAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentBinaryStore is a mock of AgentBinaryStore interface.
type MockAgentBinaryStore struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryStoreMockRecorder
}

// MockAgentBinaryStoreMockRecorder is the mock recorder for MockAgentBinaryStore.
type MockAgentBinaryStoreMockRecorder struct {
	mock *MockAgentBinaryStore
}

// NewMockAgentBinaryStore creates a new mock instance.
func NewMockAgentBinaryStore(ctrl *gomock.Controller) *MockAgentBinaryStore {
	mock := &MockAgentBinaryStore{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryStore) EXPECT() *MockAgentBinaryStoreMockRecorder {
	return m.recorder
}

// AddAgentBinaryWithSHA256 mocks base method.
func (m *MockAgentBinaryStore) AddAgentBinaryWithSHA256(arg0 context.Context, arg1 io.Reader, arg2 agentbinary.Version, arg3 int64, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAgentBinaryWithSHA256", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAgentBinaryWithSHA256 indicates an expected call of AddAgentBinaryWithSHA256.
func (mr *MockAgentBinaryStoreMockRecorder) AddAgentBinaryWithSHA256(arg0, arg1, arg2, arg3, arg4 any) *MockAgentBinaryStoreAddAgentBinaryWithSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAgentBinaryWithSHA256", reflect.TypeOf((*MockAgentBinaryStore)(nil).AddAgentBinaryWithSHA256), arg0, arg1, arg2, arg3, arg4)
	return &MockAgentBinaryStoreAddAgentBinaryWithSHA256Call{Call: call}
}

// MockAgentBinaryStoreAddAgentBinaryWithSHA256Call wrap *gomock.Call
type MockAgentBinaryStoreAddAgentBinaryWithSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStoreAddAgentBinaryWithSHA256Call) Return(arg0 error) *MockAgentBinaryStoreAddAgentBinaryWithSHA256Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStoreAddAgentBinaryWithSHA256Call) Do(f func(context.Context, io.Reader, agentbinary.Version, int64, string) error) *MockAgentBinaryStoreAddAgentBinaryWithSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStoreAddAgentBinaryWithSHA256Call) DoAndReturn(f func(context.Context, io.Reader, agentbinary.Version, int64, string) error) *MockAgentBinaryStoreAddAgentBinaryWithSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerCharmDeployer is a mock of ControllerCharmDeployer interface.
type MockControllerCharmDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockControllerCharmDeployerMockRecorder
}

// MockControllerCharmDeployerMockRecorder is the mock recorder for MockControllerCharmDeployer.
type MockControllerCharmDeployerMockRecorder struct {
	mock *MockControllerCharmDeployer
}

// NewMockControllerCharmDeployer creates a new mock instance.
func NewMockControllerCharmDeployer(ctrl *gomock.Controller) *MockControllerCharmDeployer {
	mock := &MockControllerCharmDeployer{ctrl: ctrl}
	mock.recorder = &MockControllerCharmDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerCharmDeployer) EXPECT() *MockControllerCharmDeployerMockRecorder {
	return m.recorder
}

// AddCAASControllerApplication mocks base method.
func (m *MockControllerCharmDeployer) AddCAASControllerApplication(arg0 context.Context, arg1 DeployCharmInfo, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCAASControllerApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCAASControllerApplication indicates an expected call of AddCAASControllerApplication.
func (mr *MockControllerCharmDeployerMockRecorder) AddCAASControllerApplication(arg0, arg1, arg2 any) *MockControllerCharmDeployerAddCAASControllerApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCAASControllerApplication", reflect.TypeOf((*MockControllerCharmDeployer)(nil).AddCAASControllerApplication), arg0, arg1, arg2)
	return &MockControllerCharmDeployerAddCAASControllerApplicationCall{Call: call}
}

// MockControllerCharmDeployerAddCAASControllerApplicationCall wrap *gomock.Call
type MockControllerCharmDeployerAddCAASControllerApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerAddCAASControllerApplicationCall) Return(arg0 error) *MockControllerCharmDeployerAddCAASControllerApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerAddCAASControllerApplicationCall) Do(f func(context.Context, DeployCharmInfo, string) error) *MockControllerCharmDeployerAddCAASControllerApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerAddCAASControllerApplicationCall) DoAndReturn(f func(context.Context, DeployCharmInfo, string) error) *MockControllerCharmDeployerAddCAASControllerApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddIAASControllerApplication mocks base method.
func (m *MockControllerCharmDeployer) AddIAASControllerApplication(arg0 context.Context, arg1 DeployCharmInfo, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIAASControllerApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIAASControllerApplication indicates an expected call of AddIAASControllerApplication.
func (mr *MockControllerCharmDeployerMockRecorder) AddIAASControllerApplication(arg0, arg1, arg2 any) *MockControllerCharmDeployerAddIAASControllerApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIAASControllerApplication", reflect.TypeOf((*MockControllerCharmDeployer)(nil).AddIAASControllerApplication), arg0, arg1, arg2)
	return &MockControllerCharmDeployerAddIAASControllerApplicationCall{Call: call}
}

// MockControllerCharmDeployerAddIAASControllerApplicationCall wrap *gomock.Call
type MockControllerCharmDeployerAddIAASControllerApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerAddIAASControllerApplicationCall) Return(arg0 error) *MockControllerCharmDeployerAddIAASControllerApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerAddIAASControllerApplicationCall) Do(f func(context.Context, DeployCharmInfo, string) error) *MockControllerCharmDeployerAddIAASControllerApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerAddIAASControllerApplicationCall) DoAndReturn(f func(context.Context, DeployCharmInfo, string) error) *MockControllerCharmDeployerAddIAASControllerApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CompleteCAASProcess mocks base method.
func (m *MockControllerCharmDeployer) CompleteCAASProcess(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteCAASProcess", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteCAASProcess indicates an expected call of CompleteCAASProcess.
func (mr *MockControllerCharmDeployerMockRecorder) CompleteCAASProcess(arg0 any) *MockControllerCharmDeployerCompleteCAASProcessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteCAASProcess", reflect.TypeOf((*MockControllerCharmDeployer)(nil).CompleteCAASProcess), arg0)
	return &MockControllerCharmDeployerCompleteCAASProcessCall{Call: call}
}

// MockControllerCharmDeployerCompleteCAASProcessCall wrap *gomock.Call
type MockControllerCharmDeployerCompleteCAASProcessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerCompleteCAASProcessCall) Return(arg0 error) *MockControllerCharmDeployerCompleteCAASProcessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerCompleteCAASProcessCall) Do(f func(context.Context) error) *MockControllerCharmDeployerCompleteCAASProcessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerCompleteCAASProcessCall) DoAndReturn(f func(context.Context) error) *MockControllerCharmDeployerCompleteCAASProcessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerAddress mocks base method.
func (m *MockControllerCharmDeployer) ControllerAddress(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerAddress indicates an expected call of ControllerAddress.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerAddress(arg0 any) *MockControllerCharmDeployerControllerAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAddress", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerAddress), arg0)
	return &MockControllerCharmDeployerControllerAddressCall{Call: call}
}

// MockControllerCharmDeployerControllerAddressCall wrap *gomock.Call
type MockControllerCharmDeployerControllerAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerControllerAddressCall) Return(arg0 string, arg1 error) *MockControllerCharmDeployerControllerAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerControllerAddressCall) Do(f func(context.Context) (string, error)) *MockControllerCharmDeployerControllerAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerControllerAddressCall) DoAndReturn(f func(context.Context) (string, error)) *MockControllerCharmDeployerControllerAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerCharmArch mocks base method.
func (m *MockControllerCharmDeployer) ControllerCharmArch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerCharmArch")
	ret0, _ := ret[0].(string)
	return ret0
}

// ControllerCharmArch indicates an expected call of ControllerCharmArch.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerCharmArch() *MockControllerCharmDeployerControllerCharmArchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerCharmArch", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerCharmArch))
	return &MockControllerCharmDeployerControllerCharmArchCall{Call: call}
}

// MockControllerCharmDeployerControllerCharmArchCall wrap *gomock.Call
type MockControllerCharmDeployerControllerCharmArchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerControllerCharmArchCall) Return(arg0 string) *MockControllerCharmDeployerControllerCharmArchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerControllerCharmArchCall) Do(f func() string) *MockControllerCharmDeployerControllerCharmArchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerControllerCharmArchCall) DoAndReturn(f func() string) *MockControllerCharmDeployerControllerCharmArchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerCharmBase mocks base method.
func (m *MockControllerCharmDeployer) ControllerCharmBase() (base.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerCharmBase")
	ret0, _ := ret[0].(base.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerCharmBase indicates an expected call of ControllerCharmBase.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerCharmBase() *MockControllerCharmDeployerControllerCharmBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerCharmBase", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerCharmBase))
	return &MockControllerCharmDeployerControllerCharmBaseCall{Call: call}
}

// MockControllerCharmDeployerControllerCharmBaseCall wrap *gomock.Call
type MockControllerCharmDeployerControllerCharmBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerControllerCharmBaseCall) Return(arg0 base.Base, arg1 error) *MockControllerCharmDeployerControllerCharmBaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerControllerCharmBaseCall) Do(f func() (base.Base, error)) *MockControllerCharmDeployerControllerCharmBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerControllerCharmBaseCall) DoAndReturn(f func() (base.Base, error)) *MockControllerCharmDeployerControllerCharmBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeployCharmhubCharm mocks base method.
func (m *MockControllerCharmDeployer) DeployCharmhubCharm(arg0 context.Context, arg1 string, arg2 base.Base) (DeployCharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployCharmhubCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(DeployCharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployCharmhubCharm indicates an expected call of DeployCharmhubCharm.
func (mr *MockControllerCharmDeployerMockRecorder) DeployCharmhubCharm(arg0, arg1, arg2 any) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployCharmhubCharm", reflect.TypeOf((*MockControllerCharmDeployer)(nil).DeployCharmhubCharm), arg0, arg1, arg2)
	return &MockControllerCharmDeployerDeployCharmhubCharmCall{Call: call}
}

// MockControllerCharmDeployerDeployCharmhubCharmCall wrap *gomock.Call
type MockControllerCharmDeployerDeployCharmhubCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerDeployCharmhubCharmCall) Return(arg0 DeployCharmInfo, arg1 error) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerDeployCharmhubCharmCall) Do(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerDeployCharmhubCharmCall) DoAndReturn(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeployLocalCharm mocks base method.
func (m *MockControllerCharmDeployer) DeployLocalCharm(arg0 context.Context, arg1 string, arg2 base.Base) (DeployCharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployLocalCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(DeployCharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployLocalCharm indicates an expected call of DeployLocalCharm.
func (mr *MockControllerCharmDeployerMockRecorder) DeployLocalCharm(arg0, arg1, arg2 any) *MockControllerCharmDeployerDeployLocalCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployLocalCharm", reflect.TypeOf((*MockControllerCharmDeployer)(nil).DeployLocalCharm), arg0, arg1, arg2)
	return &MockControllerCharmDeployerDeployLocalCharmCall{Call: call}
}

// MockControllerCharmDeployerDeployLocalCharmCall wrap *gomock.Call
type MockControllerCharmDeployerDeployLocalCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerDeployLocalCharmCall) Return(arg0 DeployCharmInfo, arg1 error) *MockControllerCharmDeployerDeployLocalCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerDeployLocalCharmCall) Do(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployLocalCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerDeployLocalCharmCall) DoAndReturn(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployLocalCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 any) *MockHTTPClientDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
	return &MockHTTPClientDoCall{Call: call}
}

// MockHTTPClientDoCall wrap *gomock.Call
type MockHTTPClientDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientDoCall) Return(arg0 *http.Response, arg1 error) *MockHTTPClientDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// Base mocks base method.
func (m *MockMachine) Base() state.Base {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base")
	ret0, _ := ret[0].(state.Base)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockMachineMockRecorder) Base() *MockMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockMachine)(nil).Base))
	return &MockMachineBaseCall{Call: call}
}

// MockMachineBaseCall wrap *gomock.Call
type MockMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineBaseCall) Return(arg0 state.Base) *MockMachineBaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineBaseCall) Do(f func() state.Base) *MockMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineBaseCall) DoAndReturn(f func() state.Base) *MockMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicAddress mocks base method.
func (m *MockMachine) PublicAddress() (network.SpaceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress")
	ret0, _ := ret[0].(network.SpaceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockMachineMockRecorder) PublicAddress() *MockMachinePublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockMachine)(nil).PublicAddress))
	return &MockMachinePublicAddressCall{Call: call}
}

// MockMachinePublicAddressCall wrap *gomock.Call
type MockMachinePublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinePublicAddressCall) Return(arg0 network.SpaceAddress, arg1 error) *MockMachinePublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinePublicAddressCall) Do(f func() (network.SpaceAddress, error)) *MockMachinePublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinePublicAddressCall) DoAndReturn(f func() (network.SpaceAddress, error)) *MockMachinePublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineGetter is a mock of MachineGetter interface.
type MockMachineGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMachineGetterMockRecorder
}

// MockMachineGetterMockRecorder is the mock recorder for MockMachineGetter.
type MockMachineGetterMockRecorder struct {
	mock *MockMachineGetter
}

// NewMockMachineGetter creates a new mock instance.
func NewMockMachineGetter(ctrl *gomock.Controller) *MockMachineGetter {
	mock := &MockMachineGetter{ctrl: ctrl}
	mock.recorder = &MockMachineGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineGetter) EXPECT() *MockMachineGetterMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockMachineGetter) Machine(arg0 string) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockMachineGetterMockRecorder) Machine(arg0 any) *MockMachineGetterMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockMachineGetter)(nil).Machine), arg0)
	return &MockMachineGetterMachineCall{Call: call}
}

// MockMachineGetterMachineCall wrap *gomock.Call
type MockMachineGetterMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineGetterMachineCall) Return(arg0 Machine, arg1 error) *MockMachineGetterMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineGetterMachineCall) Do(f func(string) (Machine, error)) *MockMachineGetterMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineGetterMachineCall) DoAndReturn(f func(string) (Machine, error)) *MockMachineGetterMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// ResolveControllerCharmDownload mocks base method.
func (m *MockApplicationService) ResolveControllerCharmDownload(arg0 context.Context, arg1 application0.ResolveControllerCharmDownload) (application0.ResolvedControllerCharmDownload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveControllerCharmDownload", arg0, arg1)
	ret0, _ := ret[0].(application0.ResolvedControllerCharmDownload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveControllerCharmDownload indicates an expected call of ResolveControllerCharmDownload.
func (mr *MockApplicationServiceMockRecorder) ResolveControllerCharmDownload(arg0, arg1 any) *MockApplicationServiceResolveControllerCharmDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveControllerCharmDownload", reflect.TypeOf((*MockApplicationService)(nil).ResolveControllerCharmDownload), arg0, arg1)
	return &MockApplicationServiceResolveControllerCharmDownloadCall{Call: call}
}

// MockApplicationServiceResolveControllerCharmDownloadCall wrap *gomock.Call
type MockApplicationServiceResolveControllerCharmDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceResolveControllerCharmDownloadCall) Return(arg0 application0.ResolvedControllerCharmDownload, arg1 error) *MockApplicationServiceResolveControllerCharmDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceResolveControllerCharmDownloadCall) Do(f func(context.Context, application0.ResolveControllerCharmDownload) (application0.ResolvedControllerCharmDownload, error)) *MockApplicationServiceResolveControllerCharmDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceResolveControllerCharmDownloadCall) DoAndReturn(f func(context.Context, application0.ResolveControllerCharmDownload) (application0.ResolvedControllerCharmDownload, error)) *MockApplicationServiceResolveControllerCharmDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloudService mocks base method.
func (m *MockApplicationService) UpdateCloudService(arg0 context.Context, arg1, arg2 string, arg3 network.ProviderAddresses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudService indicates an expected call of UpdateCloudService.
func (mr *MockApplicationServiceMockRecorder) UpdateCloudService(arg0, arg1, arg2, arg3 any) *MockApplicationServiceUpdateCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudService", reflect.TypeOf((*MockApplicationService)(nil).UpdateCloudService), arg0, arg1, arg2, arg3)
	return &MockApplicationServiceUpdateCloudServiceCall{Call: call}
}

// MockApplicationServiceUpdateCloudServiceCall wrap *gomock.Call
type MockApplicationServiceUpdateCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceUpdateCloudServiceCall) Return(arg0 error) *MockApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceUpdateCloudServiceCall) Do(f func(context.Context, string, string, network.ProviderAddresses) error) *MockApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceUpdateCloudServiceCall) DoAndReturn(f func(context.Context, string, string, network.ProviderAddresses) error) *MockApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockIAASApplicationService is a mock of IAASApplicationService interface.
type MockIAASApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAASApplicationServiceMockRecorder
}

// MockIAASApplicationServiceMockRecorder is the mock recorder for MockIAASApplicationService.
type MockIAASApplicationServiceMockRecorder struct {
	mock *MockIAASApplicationService
}

// NewMockIAASApplicationService creates a new mock instance.
func NewMockIAASApplicationService(ctrl *gomock.Controller) *MockIAASApplicationService {
	mock := &MockIAASApplicationService{ctrl: ctrl}
	mock.recorder = &MockIAASApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAASApplicationService) EXPECT() *MockIAASApplicationServiceMockRecorder {
	return m.recorder
}

// CreateIAASApplication mocks base method.
func (m *MockIAASApplicationService) CreateIAASApplication(arg0 context.Context, arg1 string, arg2 charm0.Charm, arg3 charm.Origin, arg4 service.AddApplicationArgs, arg5 ...service.AddIAASUnitArg) (application.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIAASApplication", varargs...)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIAASApplication indicates an expected call of CreateIAASApplication.
func (mr *MockIAASApplicationServiceMockRecorder) CreateIAASApplication(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockIAASApplicationServiceCreateIAASApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIAASApplication", reflect.TypeOf((*MockIAASApplicationService)(nil).CreateIAASApplication), varargs...)
	return &MockIAASApplicationServiceCreateIAASApplicationCall{Call: call}
}

// MockIAASApplicationServiceCreateIAASApplicationCall wrap *gomock.Call
type MockIAASApplicationServiceCreateIAASApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAASApplicationServiceCreateIAASApplicationCall) Return(arg0 application.ID, arg1 error) *MockIAASApplicationServiceCreateIAASApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAASApplicationServiceCreateIAASApplicationCall) Do(f func(context.Context, string, charm0.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddIAASUnitArg) (application.ID, error)) *MockIAASApplicationServiceCreateIAASApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAASApplicationServiceCreateIAASApplicationCall) DoAndReturn(f func(context.Context, string, charm0.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddIAASUnitArg) (application.ID, error)) *MockIAASApplicationServiceCreateIAASApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCAASApplicationService is a mock of CAASApplicationService interface.
type MockCAASApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockCAASApplicationServiceMockRecorder
}

// MockCAASApplicationServiceMockRecorder is the mock recorder for MockCAASApplicationService.
type MockCAASApplicationServiceMockRecorder struct {
	mock *MockCAASApplicationService
}

// NewMockCAASApplicationService creates a new mock instance.
func NewMockCAASApplicationService(ctrl *gomock.Controller) *MockCAASApplicationService {
	mock := &MockCAASApplicationService{ctrl: ctrl}
	mock.recorder = &MockCAASApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAASApplicationService) EXPECT() *MockCAASApplicationServiceMockRecorder {
	return m.recorder
}

// CreateCAASApplication mocks base method.
func (m *MockCAASApplicationService) CreateCAASApplication(arg0 context.Context, arg1 string, arg2 charm0.Charm, arg3 charm.Origin, arg4 service.AddApplicationArgs, arg5 ...service.AddUnitArg) (application.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCAASApplication", varargs...)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCAASApplication indicates an expected call of CreateCAASApplication.
func (mr *MockCAASApplicationServiceMockRecorder) CreateCAASApplication(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockCAASApplicationServiceCreateCAASApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCAASApplication", reflect.TypeOf((*MockCAASApplicationService)(nil).CreateCAASApplication), varargs...)
	return &MockCAASApplicationServiceCreateCAASApplicationCall{Call: call}
}

// MockCAASApplicationServiceCreateCAASApplicationCall wrap *gomock.Call
type MockCAASApplicationServiceCreateCAASApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASApplicationServiceCreateCAASApplicationCall) Return(arg0 application.ID, arg1 error) *MockCAASApplicationServiceCreateCAASApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASApplicationServiceCreateCAASApplicationCall) Do(f func(context.Context, string, charm0.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddUnitArg) (application.ID, error)) *MockCAASApplicationServiceCreateCAASApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASApplicationServiceCreateCAASApplicationCall) DoAndReturn(f func(context.Context, string, charm0.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddUnitArg) (application.ID, error)) *MockCAASApplicationServiceCreateCAASApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCAASUnit mocks base method.
func (m *MockCAASApplicationService) UpdateCAASUnit(arg0 context.Context, arg1 unit.Name, arg2 service.UpdateCAASUnitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCAASUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCAASUnit indicates an expected call of UpdateCAASUnit.
func (mr *MockCAASApplicationServiceMockRecorder) UpdateCAASUnit(arg0, arg1, arg2 any) *MockCAASApplicationServiceUpdateCAASUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCAASUnit", reflect.TypeOf((*MockCAASApplicationService)(nil).UpdateCAASUnit), arg0, arg1, arg2)
	return &MockCAASApplicationServiceUpdateCAASUnitCall{Call: call}
}

// MockCAASApplicationServiceUpdateCAASUnitCall wrap *gomock.Call
type MockCAASApplicationServiceUpdateCAASUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASApplicationServiceUpdateCAASUnitCall) Return(arg0 error) *MockCAASApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASApplicationServiceUpdateCAASUnitCall) Do(f func(context.Context, unit.Name, service.UpdateCAASUnitParams) error) *MockCAASApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASApplicationServiceUpdateCAASUnitCall) DoAndReturn(f func(context.Context, unit.Name, service.UpdateCAASUnitParams) error) *MockCAASApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloudService mocks base method.
func (m *MockCAASApplicationService) UpdateCloudService(arg0 context.Context, arg1, arg2 string, arg3 network.ProviderAddresses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudService indicates an expected call of UpdateCloudService.
func (mr *MockCAASApplicationServiceMockRecorder) UpdateCloudService(arg0, arg1, arg2, arg3 any) *MockCAASApplicationServiceUpdateCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudService", reflect.TypeOf((*MockCAASApplicationService)(nil).UpdateCloudService), arg0, arg1, arg2, arg3)
	return &MockCAASApplicationServiceUpdateCloudServiceCall{Call: call}
}

// MockCAASApplicationServiceUpdateCloudServiceCall wrap *gomock.Call
type MockCAASApplicationServiceUpdateCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASApplicationServiceUpdateCloudServiceCall) Return(arg0 error) *MockCAASApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASApplicationServiceUpdateCloudServiceCall) Do(f func(context.Context, string, string, network.ProviderAddresses) error) *MockCAASApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASApplicationServiceUpdateCloudServiceCall) DoAndReturn(f func(context.Context, string, string, network.ProviderAddresses) error) *MockCAASApplicationServiceUpdateCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockDownloader) Download(arg0 context.Context, arg1 *url.URL, arg2 string) (*charmdownloader.DownloadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1, arg2)
	ret0, _ := ret[0].(*charmdownloader.DownloadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockDownloaderMockRecorder) Download(arg0, arg1, arg2 any) *MockDownloaderDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloader)(nil).Download), arg0, arg1, arg2)
	return &MockDownloaderDownloadCall{Call: call}
}

// MockDownloaderDownloadCall wrap *gomock.Call
type MockDownloaderDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderDownloadCall) Return(arg0 *charmdownloader.DownloadResult, arg1 error) *MockDownloaderDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderDownloadCall) Do(f func(context.Context, *url.URL, string) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderDownloadCall) DoAndReturn(f func(context.Context, *url.URL, string) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentPasswordService is a mock of AgentPasswordService interface.
type MockAgentPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentPasswordServiceMockRecorder
}

// MockAgentPasswordServiceMockRecorder is the mock recorder for MockAgentPasswordService.
type MockAgentPasswordServiceMockRecorder struct {
	mock *MockAgentPasswordService
}

// NewMockAgentPasswordService creates a new mock instance.
func NewMockAgentPasswordService(ctrl *gomock.Controller) *MockAgentPasswordService {
	mock := &MockAgentPasswordService{ctrl: ctrl}
	mock.recorder = &MockAgentPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentPasswordService) EXPECT() *MockAgentPasswordServiceMockRecorder {
	return m.recorder
}

// SetUnitPassword mocks base method.
func (m *MockAgentPasswordService) SetUnitPassword(arg0 context.Context, arg1 unit.Name, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPassword indicates an expected call of SetUnitPassword.
func (mr *MockAgentPasswordServiceMockRecorder) SetUnitPassword(arg0, arg1, arg2 any) *MockAgentPasswordServiceSetUnitPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPassword", reflect.TypeOf((*MockAgentPasswordService)(nil).SetUnitPassword), arg0, arg1, arg2)
	return &MockAgentPasswordServiceSetUnitPasswordCall{Call: call}
}

// MockAgentPasswordServiceSetUnitPasswordCall wrap *gomock.Call
type MockAgentPasswordServiceSetUnitPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceSetUnitPasswordCall) Return(arg0 error) *MockAgentPasswordServiceSetUnitPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceSetUnitPasswordCall) Do(f func(context.Context, unit.Name, string) error) *MockAgentPasswordServiceSetUnitPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceSetUnitPasswordCall) DoAndReturn(f func(context.Context, unit.Name, string) error) *MockAgentPasswordServiceSetUnitPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServiceManager is a mock of ServiceManager interface.
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager.
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance.
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// GetService mocks base method.
func (m *MockServiceManager) GetService(arg0 context.Context, arg1 string, arg2 bool) (*caas.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1, arg2)
	ret0, _ := ret[0].(*caas.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceManagerMockRecorder) GetService(arg0, arg1, arg2 any) *MockServiceManagerGetServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceManager)(nil).GetService), arg0, arg1, arg2)
	return &MockServiceManagerGetServiceCall{Call: call}
}

// MockServiceManagerGetServiceCall wrap *gomock.Call
type MockServiceManagerGetServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceManagerGetServiceCall) Return(arg0 *caas.Service, arg1 error) *MockServiceManagerGetServiceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceManagerGetServiceCall) Do(f func(context.Context, string, bool) (*caas.Service, error)) *MockServiceManagerGetServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceManagerGetServiceCall) DoAndReturn(f func(context.Context, string, bool) (*caas.Service, error)) *MockServiceManagerGetServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
