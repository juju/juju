// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/bootstrap (interfaces: AgentBinaryStorage,ControllerCharmDeployer,HTTPClient,CloudService,CloudServiceGetter,OperationApplier,Machine,MachineGetter,StateBackend,Application,Unit,CharmUploader,ApplicationService,ModelConfigService,Downloader)
//
// Generated by this command:
//
//	mockgen -typed -package bootstrap -destination bootstrap_mock_test.go github.com/juju/juju/internal/bootstrap AgentBinaryStorage,ControllerCharmDeployer,HTTPClient,CloudService,CloudServiceGetter,OperationApplier,Machine,MachineGetter,StateBackend,Application,Unit,CharmUploader,ApplicationService,ModelConfigService,Downloader
//

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	context "context"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	base "github.com/juju/juju/core/base"
	charm "github.com/juju/juju/core/charm"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	objectstore "github.com/juju/juju/core/objectstore"
	unit "github.com/juju/juju/core/unit"
	application0 "github.com/juju/juju/domain/application"
	service "github.com/juju/juju/domain/application/service"
	config "github.com/juju/juju/environs/config"
	charm0 "github.com/juju/juju/internal/charm"
	charmdownloader "github.com/juju/juju/internal/charm/charmdownloader"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryStorage is a mock of AgentBinaryStorage interface.
type MockAgentBinaryStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryStorageMockRecorder
}

// MockAgentBinaryStorageMockRecorder is the mock recorder for MockAgentBinaryStorage.
type MockAgentBinaryStorageMockRecorder struct {
	mock *MockAgentBinaryStorage
}

// NewMockAgentBinaryStorage creates a new mock instance.
func NewMockAgentBinaryStorage(ctrl *gomock.Controller) *MockAgentBinaryStorage {
	mock := &MockAgentBinaryStorage{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryStorage) EXPECT() *MockAgentBinaryStorageMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAgentBinaryStorage) ISGOMOCK() struct{} {
	return struct{}{}
}

// Add mocks base method.
func (m *MockAgentBinaryStorage) Add(arg0 context.Context, arg1 io.Reader, arg2 binarystorage.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAgentBinaryStorageMockRecorder) Add(arg0, arg1, arg2 any) *MockAgentBinaryStorageAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAgentBinaryStorage)(nil).Add), arg0, arg1, arg2)
	return &MockAgentBinaryStorageAddCall{Call: call}
}

// MockAgentBinaryStorageAddCall wrap *gomock.Call
type MockAgentBinaryStorageAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStorageAddCall) Return(arg0 error) *MockAgentBinaryStorageAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStorageAddCall) Do(f func(context.Context, io.Reader, binarystorage.Metadata) error) *MockAgentBinaryStorageAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStorageAddCall) DoAndReturn(f func(context.Context, io.Reader, binarystorage.Metadata) error) *MockAgentBinaryStorageAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerCharmDeployer is a mock of ControllerCharmDeployer interface.
type MockControllerCharmDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockControllerCharmDeployerMockRecorder
}

// MockControllerCharmDeployerMockRecorder is the mock recorder for MockControllerCharmDeployer.
type MockControllerCharmDeployerMockRecorder struct {
	mock *MockControllerCharmDeployer
}

// NewMockControllerCharmDeployer creates a new mock instance.
func NewMockControllerCharmDeployer(ctrl *gomock.Controller) *MockControllerCharmDeployer {
	mock := &MockControllerCharmDeployer{ctrl: ctrl}
	mock.recorder = &MockControllerCharmDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerCharmDeployer) EXPECT() *MockControllerCharmDeployerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockControllerCharmDeployer) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddControllerApplication mocks base method.
func (m *MockControllerCharmDeployer) AddControllerApplication(arg0 context.Context, arg1 DeployCharmInfo, arg2 string) (Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControllerApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddControllerApplication indicates an expected call of AddControllerApplication.
func (mr *MockControllerCharmDeployerMockRecorder) AddControllerApplication(arg0, arg1, arg2 any) *MockControllerCharmDeployerAddControllerApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControllerApplication", reflect.TypeOf((*MockControllerCharmDeployer)(nil).AddControllerApplication), arg0, arg1, arg2)
	return &MockControllerCharmDeployerAddControllerApplicationCall{Call: call}
}

// MockControllerCharmDeployerAddControllerApplicationCall wrap *gomock.Call
type MockControllerCharmDeployerAddControllerApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerAddControllerApplicationCall) Return(arg0 Unit, arg1 error) *MockControllerCharmDeployerAddControllerApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerAddControllerApplicationCall) Do(f func(context.Context, DeployCharmInfo, string) (Unit, error)) *MockControllerCharmDeployerAddControllerApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerAddControllerApplicationCall) DoAndReturn(f func(context.Context, DeployCharmInfo, string) (Unit, error)) *MockControllerCharmDeployerAddControllerApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CompleteProcess mocks base method.
func (m *MockControllerCharmDeployer) CompleteProcess(arg0 context.Context, arg1 Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteProcess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteProcess indicates an expected call of CompleteProcess.
func (mr *MockControllerCharmDeployerMockRecorder) CompleteProcess(arg0, arg1 any) *MockControllerCharmDeployerCompleteProcessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteProcess", reflect.TypeOf((*MockControllerCharmDeployer)(nil).CompleteProcess), arg0, arg1)
	return &MockControllerCharmDeployerCompleteProcessCall{Call: call}
}

// MockControllerCharmDeployerCompleteProcessCall wrap *gomock.Call
type MockControllerCharmDeployerCompleteProcessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerCompleteProcessCall) Return(arg0 error) *MockControllerCharmDeployerCompleteProcessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerCompleteProcessCall) Do(f func(context.Context, Unit) error) *MockControllerCharmDeployerCompleteProcessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerCompleteProcessCall) DoAndReturn(f func(context.Context, Unit) error) *MockControllerCharmDeployerCompleteProcessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerAddress mocks base method.
func (m *MockControllerCharmDeployer) ControllerAddress(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerAddress indicates an expected call of ControllerAddress.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerAddress(arg0 any) *MockControllerCharmDeployerControllerAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAddress", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerAddress), arg0)
	return &MockControllerCharmDeployerControllerAddressCall{Call: call}
}

// MockControllerCharmDeployerControllerAddressCall wrap *gomock.Call
type MockControllerCharmDeployerControllerAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerControllerAddressCall) Return(arg0 string, arg1 error) *MockControllerCharmDeployerControllerAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerControllerAddressCall) Do(f func(context.Context) (string, error)) *MockControllerCharmDeployerControllerAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerControllerAddressCall) DoAndReturn(f func(context.Context) (string, error)) *MockControllerCharmDeployerControllerAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerCharmArch mocks base method.
func (m *MockControllerCharmDeployer) ControllerCharmArch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerCharmArch")
	ret0, _ := ret[0].(string)
	return ret0
}

// ControllerCharmArch indicates an expected call of ControllerCharmArch.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerCharmArch() *MockControllerCharmDeployerControllerCharmArchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerCharmArch", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerCharmArch))
	return &MockControllerCharmDeployerControllerCharmArchCall{Call: call}
}

// MockControllerCharmDeployerControllerCharmArchCall wrap *gomock.Call
type MockControllerCharmDeployerControllerCharmArchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerControllerCharmArchCall) Return(arg0 string) *MockControllerCharmDeployerControllerCharmArchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerControllerCharmArchCall) Do(f func() string) *MockControllerCharmDeployerControllerCharmArchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerControllerCharmArchCall) DoAndReturn(f func() string) *MockControllerCharmDeployerControllerCharmArchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerCharmBase mocks base method.
func (m *MockControllerCharmDeployer) ControllerCharmBase() (base.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerCharmBase")
	ret0, _ := ret[0].(base.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerCharmBase indicates an expected call of ControllerCharmBase.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerCharmBase() *MockControllerCharmDeployerControllerCharmBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerCharmBase", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerCharmBase))
	return &MockControllerCharmDeployerControllerCharmBaseCall{Call: call}
}

// MockControllerCharmDeployerControllerCharmBaseCall wrap *gomock.Call
type MockControllerCharmDeployerControllerCharmBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerControllerCharmBaseCall) Return(arg0 base.Base, arg1 error) *MockControllerCharmDeployerControllerCharmBaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerControllerCharmBaseCall) Do(f func() (base.Base, error)) *MockControllerCharmDeployerControllerCharmBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerControllerCharmBaseCall) DoAndReturn(f func() (base.Base, error)) *MockControllerCharmDeployerControllerCharmBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeployCharmhubCharm mocks base method.
func (m *MockControllerCharmDeployer) DeployCharmhubCharm(arg0 context.Context, arg1 string, arg2 base.Base) (DeployCharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployCharmhubCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(DeployCharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployCharmhubCharm indicates an expected call of DeployCharmhubCharm.
func (mr *MockControllerCharmDeployerMockRecorder) DeployCharmhubCharm(arg0, arg1, arg2 any) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployCharmhubCharm", reflect.TypeOf((*MockControllerCharmDeployer)(nil).DeployCharmhubCharm), arg0, arg1, arg2)
	return &MockControllerCharmDeployerDeployCharmhubCharmCall{Call: call}
}

// MockControllerCharmDeployerDeployCharmhubCharmCall wrap *gomock.Call
type MockControllerCharmDeployerDeployCharmhubCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerDeployCharmhubCharmCall) Return(arg0 DeployCharmInfo, arg1 error) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerDeployCharmhubCharmCall) Do(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerDeployCharmhubCharmCall) DoAndReturn(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployCharmhubCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeployLocalCharm mocks base method.
func (m *MockControllerCharmDeployer) DeployLocalCharm(arg0 context.Context, arg1 string, arg2 base.Base) (DeployCharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployLocalCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(DeployCharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployLocalCharm indicates an expected call of DeployLocalCharm.
func (mr *MockControllerCharmDeployerMockRecorder) DeployLocalCharm(arg0, arg1, arg2 any) *MockControllerCharmDeployerDeployLocalCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployLocalCharm", reflect.TypeOf((*MockControllerCharmDeployer)(nil).DeployLocalCharm), arg0, arg1, arg2)
	return &MockControllerCharmDeployerDeployLocalCharmCall{Call: call}
}

// MockControllerCharmDeployerDeployLocalCharmCall wrap *gomock.Call
type MockControllerCharmDeployerDeployLocalCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerCharmDeployerDeployLocalCharmCall) Return(arg0 DeployCharmInfo, arg1 error) *MockControllerCharmDeployerDeployLocalCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerCharmDeployerDeployLocalCharmCall) Do(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployLocalCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerCharmDeployerDeployLocalCharmCall) DoAndReturn(f func(context.Context, string, base.Base) (DeployCharmInfo, error)) *MockControllerCharmDeployerDeployLocalCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockHTTPClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 any) *MockHTTPClientDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
	return &MockHTTPClientDoCall{Call: call}
}

// MockHTTPClientDoCall wrap *gomock.Call
type MockHTTPClientDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientDoCall) Return(arg0 *http.Response, arg1 error) *MockHTTPClientDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudService is a mock of CloudService interface.
type MockCloudService struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceMockRecorder
}

// MockCloudServiceMockRecorder is the mock recorder for MockCloudService.
type MockCloudServiceMockRecorder struct {
	mock *MockCloudService
}

// NewMockCloudService creates a new mock instance.
func NewMockCloudService(ctrl *gomock.Controller) *MockCloudService {
	mock := &MockCloudService{ctrl: ctrl}
	mock.recorder = &MockCloudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudService) EXPECT() *MockCloudServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Addresses mocks base method.
func (m *MockCloudService) Addresses() network.SpaceAddresses {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses")
	ret0, _ := ret[0].(network.SpaceAddresses)
	return ret0
}

// Addresses indicates an expected call of Addresses.
func (mr *MockCloudServiceMockRecorder) Addresses() *MockCloudServiceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockCloudService)(nil).Addresses))
	return &MockCloudServiceAddressesCall{Call: call}
}

// MockCloudServiceAddressesCall wrap *gomock.Call
type MockCloudServiceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudServiceAddressesCall) Return(arg0 network.SpaceAddresses) *MockCloudServiceAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudServiceAddressesCall) Do(f func() network.SpaceAddresses) *MockCloudServiceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudServiceAddressesCall) DoAndReturn(f func() network.SpaceAddresses) *MockCloudServiceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudServiceGetter is a mock of CloudServiceGetter interface.
type MockCloudServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceGetterMockRecorder
}

// MockCloudServiceGetterMockRecorder is the mock recorder for MockCloudServiceGetter.
type MockCloudServiceGetterMockRecorder struct {
	mock *MockCloudServiceGetter
}

// NewMockCloudServiceGetter creates a new mock instance.
func NewMockCloudServiceGetter(ctrl *gomock.Controller) *MockCloudServiceGetter {
	mock := &MockCloudServiceGetter{ctrl: ctrl}
	mock.recorder = &MockCloudServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServiceGetter) EXPECT() *MockCloudServiceGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudServiceGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// CloudService mocks base method.
func (m *MockCloudServiceGetter) CloudService(arg0 string) (CloudService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudService", arg0)
	ret0, _ := ret[0].(CloudService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudService indicates an expected call of CloudService.
func (mr *MockCloudServiceGetterMockRecorder) CloudService(arg0 any) *MockCloudServiceGetterCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudService", reflect.TypeOf((*MockCloudServiceGetter)(nil).CloudService), arg0)
	return &MockCloudServiceGetterCloudServiceCall{Call: call}
}

// MockCloudServiceGetterCloudServiceCall wrap *gomock.Call
type MockCloudServiceGetterCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudServiceGetterCloudServiceCall) Return(arg0 CloudService, arg1 error) *MockCloudServiceGetterCloudServiceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudServiceGetterCloudServiceCall) Do(f func(string) (CloudService, error)) *MockCloudServiceGetterCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudServiceGetterCloudServiceCall) DoAndReturn(f func(string) (CloudService, error)) *MockCloudServiceGetterCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOperationApplier is a mock of OperationApplier interface.
type MockOperationApplier struct {
	ctrl     *gomock.Controller
	recorder *MockOperationApplierMockRecorder
}

// MockOperationApplierMockRecorder is the mock recorder for MockOperationApplier.
type MockOperationApplierMockRecorder struct {
	mock *MockOperationApplier
}

// NewMockOperationApplier creates a new mock instance.
func NewMockOperationApplier(ctrl *gomock.Controller) *MockOperationApplier {
	mock := &MockOperationApplier{ctrl: ctrl}
	mock.recorder = &MockOperationApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationApplier) EXPECT() *MockOperationApplierMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOperationApplier) ISGOMOCK() struct{} {
	return struct{}{}
}

// ApplyOperation mocks base method.
func (m *MockOperationApplier) ApplyOperation(arg0 *state.UpdateUnitOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockOperationApplierMockRecorder) ApplyOperation(arg0 any) *MockOperationApplierApplyOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockOperationApplier)(nil).ApplyOperation), arg0)
	return &MockOperationApplierApplyOperationCall{Call: call}
}

// MockOperationApplierApplyOperationCall wrap *gomock.Call
type MockOperationApplierApplyOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationApplierApplyOperationCall) Return(arg0 error) *MockOperationApplierApplyOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationApplierApplyOperationCall) Do(f func(*state.UpdateUnitOperation) error) *MockOperationApplierApplyOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationApplierApplyOperationCall) DoAndReturn(f func(*state.UpdateUnitOperation) error) *MockOperationApplierApplyOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockMachine) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddPrincipal mocks base method.
func (m *MockMachine) AddPrincipal(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPrincipal", arg0)
}

// AddPrincipal indicates an expected call of AddPrincipal.
func (mr *MockMachineMockRecorder) AddPrincipal(arg0 any) *MockMachineAddPrincipalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrincipal", reflect.TypeOf((*MockMachine)(nil).AddPrincipal), arg0)
	return &MockMachineAddPrincipalCall{Call: call}
}

// MockMachineAddPrincipalCall wrap *gomock.Call
type MockMachineAddPrincipalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineAddPrincipalCall) Return() *MockMachineAddPrincipalCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineAddPrincipalCall) Do(f func(string)) *MockMachineAddPrincipalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineAddPrincipalCall) DoAndReturn(f func(string)) *MockMachineAddPrincipalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Base mocks base method.
func (m *MockMachine) Base() state.Base {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base")
	ret0, _ := ret[0].(state.Base)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockMachineMockRecorder) Base() *MockMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockMachine)(nil).Base))
	return &MockMachineBaseCall{Call: call}
}

// MockMachineBaseCall wrap *gomock.Call
type MockMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineBaseCall) Return(arg0 state.Base) *MockMachineBaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineBaseCall) Do(f func() state.Base) *MockMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineBaseCall) DoAndReturn(f func() state.Base) *MockMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Clean mocks base method.
func (m *MockMachine) Clean() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockMachineMockRecorder) Clean() *MockMachineCleanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockMachine)(nil).Clean))
	return &MockMachineCleanCall{Call: call}
}

// MockMachineCleanCall wrap *gomock.Call
type MockMachineCleanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineCleanCall) Return(arg0 bool) *MockMachineCleanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineCleanCall) Do(f func() bool) *MockMachineCleanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineCleanCall) DoAndReturn(f func() bool) *MockMachineCleanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerType mocks base method.
func (m *MockMachine) ContainerType() instance.ContainerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(instance.ContainerType)
	return ret0
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockMachineMockRecorder) ContainerType() *MockMachineContainerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockMachine)(nil).ContainerType))
	return &MockMachineContainerTypeCall{Call: call}
}

// MockMachineContainerTypeCall wrap *gomock.Call
type MockMachineContainerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineContainerTypeCall) Return(arg0 instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineContainerTypeCall) Do(f func() instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineContainerTypeCall) DoAndReturn(f func() instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DocID mocks base method.
func (m *MockMachine) DocID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocID")
	ret0, _ := ret[0].(string)
	return ret0
}

// DocID indicates an expected call of DocID.
func (mr *MockMachineMockRecorder) DocID() *MockMachineDocIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocID", reflect.TypeOf((*MockMachine)(nil).DocID))
	return &MockMachineDocIDCall{Call: call}
}

// MockMachineDocIDCall wrap *gomock.Call
type MockMachineDocIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineDocIDCall) Return(arg0 string) *MockMachineDocIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineDocIDCall) Do(f func() string) *MockMachineDocIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineDocIDCall) DoAndReturn(f func() string) *MockMachineDocIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FileSystems mocks base method.
func (m *MockMachine) FileSystems() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileSystems")
	ret0, _ := ret[0].([]string)
	return ret0
}

// FileSystems indicates an expected call of FileSystems.
func (mr *MockMachineMockRecorder) FileSystems() *MockMachineFileSystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileSystems", reflect.TypeOf((*MockMachine)(nil).FileSystems))
	return &MockMachineFileSystemsCall{Call: call}
}

// MockMachineFileSystemsCall wrap *gomock.Call
type MockMachineFileSystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineFileSystemsCall) Return(arg0 []string) *MockMachineFileSystemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineFileSystemsCall) Do(f func() []string) *MockMachineFileSystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineFileSystemsCall) DoAndReturn(f func() []string) *MockMachineFileSystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockMachine) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockMachineMockRecorder) Id() *MockMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMachine)(nil).Id))
	return &MockMachineIdCall{Call: call}
}

// MockMachineIdCall wrap *gomock.Call
type MockMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineIdCall) Return(arg0 string) *MockMachineIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineIdCall) Do(f func() string) *MockMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineIdCall) DoAndReturn(f func() string) *MockMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Jobs mocks base method.
func (m *MockMachine) Jobs() []state.MachineJob {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]state.MachineJob)
	return ret0
}

// Jobs indicates an expected call of Jobs.
func (mr *MockMachineMockRecorder) Jobs() *MockMachineJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockMachine)(nil).Jobs))
	return &MockMachineJobsCall{Call: call}
}

// MockMachineJobsCall wrap *gomock.Call
type MockMachineJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineJobsCall) Return(arg0 []state.MachineJob) *MockMachineJobsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineJobsCall) Do(f func() []state.MachineJob) *MockMachineJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineJobsCall) DoAndReturn(f func() []state.MachineJob) *MockMachineJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockMachine) Life() state.Life {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(state.Life)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockMachineMockRecorder) Life() *MockMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockMachine)(nil).Life))
	return &MockMachineLifeCall{Call: call}
}

// MockMachineLifeCall wrap *gomock.Call
type MockMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineLifeCall) Return(arg0 state.Life) *MockMachineLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineLifeCall) Do(f func() state.Life) *MockMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineLifeCall) DoAndReturn(f func() state.Life) *MockMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineTag mocks base method.
func (m *MockMachine) MachineTag() names.MachineTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineTag")
	ret0, _ := ret[0].(names.MachineTag)
	return ret0
}

// MachineTag indicates an expected call of MachineTag.
func (mr *MockMachineMockRecorder) MachineTag() *MockMachineMachineTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineTag", reflect.TypeOf((*MockMachine)(nil).MachineTag))
	return &MockMachineMachineTagCall{Call: call}
}

// MockMachineMachineTagCall wrap *gomock.Call
type MockMachineMachineTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineMachineTagCall) Return(arg0 names.MachineTag) *MockMachineMachineTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineMachineTagCall) Do(f func() names.MachineTag) *MockMachineMachineTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineMachineTagCall) DoAndReturn(f func() names.MachineTag) *MockMachineMachineTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicAddress mocks base method.
func (m *MockMachine) PublicAddress() (network.SpaceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress")
	ret0, _ := ret[0].(network.SpaceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockMachineMockRecorder) PublicAddress() *MockMachinePublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockMachine)(nil).PublicAddress))
	return &MockMachinePublicAddressCall{Call: call}
}

// MockMachinePublicAddressCall wrap *gomock.Call
type MockMachinePublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinePublicAddressCall) Return(arg0 network.SpaceAddress, arg1 error) *MockMachinePublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinePublicAddressCall) Do(f func() (network.SpaceAddress, error)) *MockMachinePublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinePublicAddressCall) DoAndReturn(f func() (network.SpaceAddress, error)) *MockMachinePublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineGetter is a mock of MachineGetter interface.
type MockMachineGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMachineGetterMockRecorder
}

// MockMachineGetterMockRecorder is the mock recorder for MockMachineGetter.
type MockMachineGetterMockRecorder struct {
	mock *MockMachineGetter
}

// NewMockMachineGetter creates a new mock instance.
func NewMockMachineGetter(ctrl *gomock.Controller) *MockMachineGetter {
	mock := &MockMachineGetter{ctrl: ctrl}
	mock.recorder = &MockMachineGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineGetter) EXPECT() *MockMachineGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockMachineGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// Machine mocks base method.
func (m *MockMachineGetter) Machine(arg0 string) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockMachineGetterMockRecorder) Machine(arg0 any) *MockMachineGetterMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockMachineGetter)(nil).Machine), arg0)
	return &MockMachineGetterMachineCall{Call: call}
}

// MockMachineGetterMachineCall wrap *gomock.Call
type MockMachineGetterMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineGetterMachineCall) Return(arg0 Machine, arg1 error) *MockMachineGetterMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineGetterMachineCall) Do(f func(string) (Machine, error)) *MockMachineGetterMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineGetterMachineCall) DoAndReturn(f func(string) (Machine, error)) *MockMachineGetterMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStateBackend is a mock of StateBackend interface.
type MockStateBackend struct {
	ctrl     *gomock.Controller
	recorder *MockStateBackendMockRecorder
}

// MockStateBackendMockRecorder is the mock recorder for MockStateBackend.
type MockStateBackendMockRecorder struct {
	mock *MockStateBackend
}

// NewMockStateBackend creates a new mock instance.
func NewMockStateBackend(ctrl *gomock.Controller) *MockStateBackend {
	mock := &MockStateBackend{ctrl: ctrl}
	mock.recorder = &MockStateBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateBackend) EXPECT() *MockStateBackendMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStateBackend) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddApplication mocks base method.
func (m *MockStateBackend) AddApplication(arg0 state.AddApplicationArgs, arg1 objectstore.ObjectStore) (Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplication", arg0, arg1)
	ret0, _ := ret[0].(Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplication indicates an expected call of AddApplication.
func (mr *MockStateBackendMockRecorder) AddApplication(arg0, arg1 any) *MockStateBackendAddApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplication", reflect.TypeOf((*MockStateBackend)(nil).AddApplication), arg0, arg1)
	return &MockStateBackendAddApplicationCall{Call: call}
}

// MockStateBackendAddApplicationCall wrap *gomock.Call
type MockStateBackendAddApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateBackendAddApplicationCall) Return(arg0 Application, arg1 error) *MockStateBackendAddApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateBackendAddApplicationCall) Do(f func(state.AddApplicationArgs, objectstore.ObjectStore) (Application, error)) *MockStateBackendAddApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateBackendAddApplicationCall) DoAndReturn(f func(state.AddApplicationArgs, objectstore.ObjectStore) (Application, error)) *MockStateBackendAddApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockStateBackend) Unit(arg0 string) (Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockStateBackendMockRecorder) Unit(arg0 any) *MockStateBackendUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockStateBackend)(nil).Unit), arg0)
	return &MockStateBackendUnitCall{Call: call}
}

// MockStateBackendUnitCall wrap *gomock.Call
type MockStateBackendUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateBackendUnitCall) Return(arg0 Unit, arg1 error) *MockStateBackendUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateBackendUnitCall) Do(f func(string) (Unit, error)) *MockStateBackendUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateBackendUnitCall) DoAndReturn(f func(string) (Unit, error)) *MockStateBackendUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplication) ISGOMOCK() struct{} {
	return struct{}{}
}

// Name mocks base method.
func (m *MockApplication) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockApplicationMockRecorder) Name() *MockApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockApplication)(nil).Name))
	return &MockApplicationNameCall{Call: call}
}

// MockApplicationNameCall wrap *gomock.Call
type MockApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationNameCall) Return(arg0 string) *MockApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationNameCall) Do(f func() string) *MockApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationNameCall) DoAndReturn(f func() string) *MockApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnit is a mock of Unit interface.
type MockUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMockRecorder
}

// MockUnitMockRecorder is the mock recorder for MockUnit.
type MockUnitMockRecorder struct {
	mock *MockUnit
}

// NewMockUnit creates a new mock instance.
func NewMockUnit(ctrl *gomock.Controller) *MockUnit {
	mock := &MockUnit{ctrl: ctrl}
	mock.recorder = &MockUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnit) EXPECT() *MockUnitMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUnit) ISGOMOCK() struct{} {
	return struct{}{}
}

// AssignToMachineRef mocks base method.
func (m *MockUnit) AssignToMachineRef(arg0 state.MachineRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToMachineRef", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToMachineRef indicates an expected call of AssignToMachineRef.
func (mr *MockUnitMockRecorder) AssignToMachineRef(arg0 any) *MockUnitAssignToMachineRefCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToMachineRef", reflect.TypeOf((*MockUnit)(nil).AssignToMachineRef), arg0)
	return &MockUnitAssignToMachineRefCall{Call: call}
}

// MockUnitAssignToMachineRefCall wrap *gomock.Call
type MockUnitAssignToMachineRefCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitAssignToMachineRefCall) Return(arg0 error) *MockUnitAssignToMachineRefCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitAssignToMachineRefCall) Do(f func(state.MachineRef) error) *MockUnitAssignToMachineRefCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitAssignToMachineRefCall) DoAndReturn(f func(state.MachineRef) error) *MockUnitAssignToMachineRefCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPassword mocks base method.
func (m *MockUnit) SetPassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockUnitMockRecorder) SetPassword(arg0 any) *MockUnitSetPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockUnit)(nil).SetPassword), arg0)
	return &MockUnitSetPasswordCall{Call: call}
}

// MockUnitSetPasswordCall wrap *gomock.Call
type MockUnitSetPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitSetPasswordCall) Return(arg0 error) *MockUnitSetPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitSetPasswordCall) Do(f func(string) error) *MockUnitSetPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitSetPasswordCall) DoAndReturn(f func(string) error) *MockUnitSetPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitTag mocks base method.
func (m *MockUnit) UnitTag() names.UnitTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitTag")
	ret0, _ := ret[0].(names.UnitTag)
	return ret0
}

// UnitTag indicates an expected call of UnitTag.
func (mr *MockUnitMockRecorder) UnitTag() *MockUnitUnitTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitTag", reflect.TypeOf((*MockUnit)(nil).UnitTag))
	return &MockUnitUnitTagCall{Call: call}
}

// MockUnitUnitTagCall wrap *gomock.Call
type MockUnitUnitTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitUnitTagCall) Return(arg0 names.UnitTag) *MockUnitUnitTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitUnitTagCall) Do(f func() names.UnitTag) *MockUnitUnitTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitUnitTagCall) DoAndReturn(f func() names.UnitTag) *MockUnitUnitTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOperation mocks base method.
func (m *MockUnit) UpdateOperation(arg0 state.UnitUpdateProperties) *state.UpdateUnitOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperation", arg0)
	ret0, _ := ret[0].(*state.UpdateUnitOperation)
	return ret0
}

// UpdateOperation indicates an expected call of UpdateOperation.
func (mr *MockUnitMockRecorder) UpdateOperation(arg0 any) *MockUnitUpdateOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperation", reflect.TypeOf((*MockUnit)(nil).UpdateOperation), arg0)
	return &MockUnitUpdateOperationCall{Call: call}
}

// MockUnitUpdateOperationCall wrap *gomock.Call
type MockUnitUpdateOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitUpdateOperationCall) Return(arg0 *state.UpdateUnitOperation) *MockUnitUpdateOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitUpdateOperationCall) Do(f func(state.UnitUpdateProperties) *state.UpdateUnitOperation) *MockUnitUpdateOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitUpdateOperationCall) DoAndReturn(f func(state.UnitUpdateProperties) *state.UpdateUnitOperation) *MockUnitUpdateOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmUploader is a mock of CharmUploader interface.
type MockCharmUploader struct {
	ctrl     *gomock.Controller
	recorder *MockCharmUploaderMockRecorder
}

// MockCharmUploaderMockRecorder is the mock recorder for MockCharmUploader.
type MockCharmUploaderMockRecorder struct {
	mock *MockCharmUploader
}

// NewMockCharmUploader creates a new mock instance.
func NewMockCharmUploader(ctrl *gomock.Controller) *MockCharmUploader {
	mock := &MockCharmUploader{ctrl: ctrl}
	mock.recorder = &MockCharmUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmUploader) EXPECT() *MockCharmUploaderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmUploader) ISGOMOCK() struct{} {
	return struct{}{}
}

// ModelUUID mocks base method.
func (m *MockCharmUploader) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockCharmUploaderMockRecorder) ModelUUID() *MockCharmUploaderModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockCharmUploader)(nil).ModelUUID))
	return &MockCharmUploaderModelUUIDCall{Call: call}
}

// MockCharmUploaderModelUUIDCall wrap *gomock.Call
type MockCharmUploaderModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmUploaderModelUUIDCall) Return(arg0 string) *MockCharmUploaderModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmUploaderModelUUIDCall) Do(f func() string) *MockCharmUploaderModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmUploaderModelUUIDCall) DoAndReturn(f func() string) *MockCharmUploaderModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplicationService) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateApplication mocks base method.
func (m *MockApplicationService) CreateApplication(arg0 context.Context, arg1 string, arg2 charm0.Charm, arg3 charm.Origin, arg4 service.AddApplicationArgs, arg5 ...service.AddUnitArg) (application.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplication", varargs...)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockApplicationServiceMockRecorder) CreateApplication(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockApplicationServiceCreateApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationService)(nil).CreateApplication), varargs...)
	return &MockApplicationServiceCreateApplicationCall{Call: call}
}

// MockApplicationServiceCreateApplicationCall wrap *gomock.Call
type MockApplicationServiceCreateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceCreateApplicationCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceCreateApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceCreateApplicationCall) Do(f func(context.Context, string, charm0.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddUnitArg) (application.ID, error)) *MockApplicationServiceCreateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceCreateApplicationCall) DoAndReturn(f func(context.Context, string, charm0.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddUnitArg) (application.ID, error)) *MockApplicationServiceCreateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveControllerCharmDownload mocks base method.
func (m *MockApplicationService) ResolveControllerCharmDownload(arg0 context.Context, arg1 application0.ResolveControllerCharmDownload) (application0.ResolvedControllerCharmDownload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveControllerCharmDownload", arg0, arg1)
	ret0, _ := ret[0].(application0.ResolvedControllerCharmDownload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveControllerCharmDownload indicates an expected call of ResolveControllerCharmDownload.
func (mr *MockApplicationServiceMockRecorder) ResolveControllerCharmDownload(arg0, arg1 any) *MockApplicationServiceResolveControllerCharmDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveControllerCharmDownload", reflect.TypeOf((*MockApplicationService)(nil).ResolveControllerCharmDownload), arg0, arg1)
	return &MockApplicationServiceResolveControllerCharmDownloadCall{Call: call}
}

// MockApplicationServiceResolveControllerCharmDownloadCall wrap *gomock.Call
type MockApplicationServiceResolveControllerCharmDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceResolveControllerCharmDownloadCall) Return(arg0 application0.ResolvedControllerCharmDownload, arg1 error) *MockApplicationServiceResolveControllerCharmDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceResolveControllerCharmDownloadCall) Do(f func(context.Context, application0.ResolveControllerCharmDownload) (application0.ResolvedControllerCharmDownload, error)) *MockApplicationServiceResolveControllerCharmDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceResolveControllerCharmDownloadCall) DoAndReturn(f func(context.Context, application0.ResolveControllerCharmDownload) (application0.ResolvedControllerCharmDownload, error)) *MockApplicationServiceResolveControllerCharmDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPassword mocks base method.
func (m *MockApplicationService) SetUnitPassword(arg0 context.Context, arg1 unit.Name, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPassword indicates an expected call of SetUnitPassword.
func (mr *MockApplicationServiceMockRecorder) SetUnitPassword(arg0, arg1, arg2 any) *MockApplicationServiceSetUnitPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPassword", reflect.TypeOf((*MockApplicationService)(nil).SetUnitPassword), arg0, arg1, arg2)
	return &MockApplicationServiceSetUnitPasswordCall{Call: call}
}

// MockApplicationServiceSetUnitPasswordCall wrap *gomock.Call
type MockApplicationServiceSetUnitPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetUnitPasswordCall) Return(arg0 error) *MockApplicationServiceSetUnitPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetUnitPasswordCall) Do(f func(context.Context, unit.Name, string) error) *MockApplicationServiceSetUnitPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetUnitPasswordCall) DoAndReturn(f func(context.Context, unit.Name, string) error) *MockApplicationServiceSetUnitPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCAASUnit mocks base method.
func (m *MockApplicationService) UpdateCAASUnit(arg0 context.Context, arg1 unit.Name, arg2 application0.UpdateCAASUnitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCAASUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCAASUnit indicates an expected call of UpdateCAASUnit.
func (mr *MockApplicationServiceMockRecorder) UpdateCAASUnit(arg0, arg1, arg2 any) *MockApplicationServiceUpdateCAASUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCAASUnit", reflect.TypeOf((*MockApplicationService)(nil).UpdateCAASUnit), arg0, arg1, arg2)
	return &MockApplicationServiceUpdateCAASUnitCall{Call: call}
}

// MockApplicationServiceUpdateCAASUnitCall wrap *gomock.Call
type MockApplicationServiceUpdateCAASUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceUpdateCAASUnitCall) Return(arg0 error) *MockApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceUpdateCAASUnitCall) Do(f func(context.Context, unit.Name, application0.UpdateCAASUnitParams) error) *MockApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceUpdateCAASUnitCall) DoAndReturn(f func(context.Context, unit.Name, application0.UpdateCAASUnitParams) error) *MockApplicationServiceUpdateCAASUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelConfigService) ISGOMOCK() struct{} {
	return struct{}{}
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDownloader) ISGOMOCK() struct{} {
	return struct{}{}
}

// Download mocks base method.
func (m *MockDownloader) Download(arg0 context.Context, arg1 *url.URL, arg2 string) (*charmdownloader.DownloadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1, arg2)
	ret0, _ := ret[0].(*charmdownloader.DownloadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockDownloaderMockRecorder) Download(arg0, arg1, arg2 any) *MockDownloaderDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloader)(nil).Download), arg0, arg1, arg2)
	return &MockDownloaderDownloadCall{Call: call}
}

// MockDownloaderDownloadCall wrap *gomock.Call
type MockDownloaderDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderDownloadCall) Return(arg0 *charmdownloader.DownloadResult, arg1 error) *MockDownloaderDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderDownloadCall) Do(f func(context.Context, *url.URL, string) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderDownloadCall) DoAndReturn(f func(context.Context, *url.URL, string) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
