// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/bootstrap (interfaces: AgentBinaryStorage,ControllerCharmDeployer,ControllerUnit,HTTPClient,LoggerFactory,CloudServiceGetter,OperationApplier,MachineGetter)

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	services "github.com/juju/juju/apiserver/facades/client/charms/services"
	base "github.com/juju/juju/core/base"
	charm "github.com/juju/juju/core/charm"
	charmhub "github.com/juju/juju/internal/charmhub"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	names "github.com/juju/names/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryStorage is a mock of AgentBinaryStorage interface.
type MockAgentBinaryStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryStorageMockRecorder
}

// MockAgentBinaryStorageMockRecorder is the mock recorder for MockAgentBinaryStorage.
type MockAgentBinaryStorageMockRecorder struct {
	mock *MockAgentBinaryStorage
}

// NewMockAgentBinaryStorage creates a new mock instance.
func NewMockAgentBinaryStorage(ctrl *gomock.Controller) *MockAgentBinaryStorage {
	mock := &MockAgentBinaryStorage{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryStorage) EXPECT() *MockAgentBinaryStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAgentBinaryStorage) Add(arg0 context.Context, arg1 io.Reader, arg2 binarystorage.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAgentBinaryStorageMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAgentBinaryStorage)(nil).Add), arg0, arg1, arg2)
}

// MockControllerCharmDeployer is a mock of ControllerCharmDeployer interface.
type MockControllerCharmDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockControllerCharmDeployerMockRecorder
}

// MockControllerCharmDeployerMockRecorder is the mock recorder for MockControllerCharmDeployer.
type MockControllerCharmDeployerMockRecorder struct {
	mock *MockControllerCharmDeployer
}

// NewMockControllerCharmDeployer creates a new mock instance.
func NewMockControllerCharmDeployer(ctrl *gomock.Controller) *MockControllerCharmDeployer {
	mock := &MockControllerCharmDeployer{ctrl: ctrl}
	mock.recorder = &MockControllerCharmDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerCharmDeployer) EXPECT() *MockControllerCharmDeployerMockRecorder {
	return m.recorder
}

// AddControllerApplication mocks base method.
func (m *MockControllerCharmDeployer) AddControllerApplication(arg0 context.Context, arg1 string, arg2 *charm.Origin, arg3 string) (ControllerUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControllerApplication", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(ControllerUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddControllerApplication indicates an expected call of AddControllerApplication.
func (mr *MockControllerCharmDeployerMockRecorder) AddControllerApplication(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControllerApplication", reflect.TypeOf((*MockControllerCharmDeployer)(nil).AddControllerApplication), arg0, arg1, arg2, arg3)
}

// CompleteProcess mocks base method.
func (m *MockControllerCharmDeployer) CompleteProcess(arg0 context.Context, arg1 ControllerUnit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteProcess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteProcess indicates an expected call of CompleteProcess.
func (mr *MockControllerCharmDeployerMockRecorder) CompleteProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteProcess", reflect.TypeOf((*MockControllerCharmDeployer)(nil).CompleteProcess), arg0, arg1)
}

// ControllerAddress mocks base method.
func (m *MockControllerCharmDeployer) ControllerAddress(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerAddress indicates an expected call of ControllerAddress.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAddress", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerAddress), arg0)
}

// ControllerCharmArch mocks base method.
func (m *MockControllerCharmDeployer) ControllerCharmArch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerCharmArch")
	ret0, _ := ret[0].(string)
	return ret0
}

// ControllerCharmArch indicates an expected call of ControllerCharmArch.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerCharmArch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerCharmArch", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerCharmArch))
}

// ControllerCharmBase mocks base method.
func (m *MockControllerCharmDeployer) ControllerCharmBase() (base.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerCharmBase")
	ret0, _ := ret[0].(base.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerCharmBase indicates an expected call of ControllerCharmBase.
func (mr *MockControllerCharmDeployerMockRecorder) ControllerCharmBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerCharmBase", reflect.TypeOf((*MockControllerCharmDeployer)(nil).ControllerCharmBase))
}

// DeployCharmhubCharm mocks base method.
func (m *MockControllerCharmDeployer) DeployCharmhubCharm(arg0 context.Context, arg1 string, arg2 base.Base) (string, *charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployCharmhubCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*charm.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeployCharmhubCharm indicates an expected call of DeployCharmhubCharm.
func (mr *MockControllerCharmDeployerMockRecorder) DeployCharmhubCharm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployCharmhubCharm", reflect.TypeOf((*MockControllerCharmDeployer)(nil).DeployCharmhubCharm), arg0, arg1, arg2)
}

// DeployLocalCharm mocks base method.
func (m *MockControllerCharmDeployer) DeployLocalCharm(arg0 context.Context, arg1 string, arg2 base.Base) (string, *charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployLocalCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*charm.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeployLocalCharm indicates an expected call of DeployLocalCharm.
func (mr *MockControllerCharmDeployerMockRecorder) DeployLocalCharm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployLocalCharm", reflect.TypeOf((*MockControllerCharmDeployer)(nil).DeployLocalCharm), arg0, arg1, arg2)
}

// MockControllerUnit is a mock of ControllerUnit interface.
type MockControllerUnit struct {
	ctrl     *gomock.Controller
	recorder *MockControllerUnitMockRecorder
}

// MockControllerUnitMockRecorder is the mock recorder for MockControllerUnit.
type MockControllerUnitMockRecorder struct {
	mock *MockControllerUnit
}

// NewMockControllerUnit creates a new mock instance.
func NewMockControllerUnit(ctrl *gomock.Controller) *MockControllerUnit {
	mock := &MockControllerUnit{ctrl: ctrl}
	mock.recorder = &MockControllerUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerUnit) EXPECT() *MockControllerUnitMockRecorder {
	return m.recorder
}

// AssignToMachine mocks base method.
func (m *MockControllerUnit) AssignToMachine(arg0 *state.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToMachine indicates an expected call of AssignToMachine.
func (mr *MockControllerUnitMockRecorder) AssignToMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToMachine", reflect.TypeOf((*MockControllerUnit)(nil).AssignToMachine), arg0)
}

// SetPassword mocks base method.
func (m *MockControllerUnit) SetPassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockControllerUnitMockRecorder) SetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockControllerUnit)(nil).SetPassword), arg0)
}

// UnitTag mocks base method.
func (m *MockControllerUnit) UnitTag() names.UnitTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitTag")
	ret0, _ := ret[0].(names.UnitTag)
	return ret0
}

// UnitTag indicates an expected call of UnitTag.
func (mr *MockControllerUnitMockRecorder) UnitTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitTag", reflect.TypeOf((*MockControllerUnit)(nil).UnitTag))
}

// UpdateOperation mocks base method.
func (m *MockControllerUnit) UpdateOperation(arg0 state.UnitUpdateProperties) *state.UpdateUnitOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperation", arg0)
	ret0, _ := ret[0].(*state.UpdateUnitOperation)
	return ret0
}

// UpdateOperation indicates an expected call of UpdateOperation.
func (mr *MockControllerUnitMockRecorder) UpdateOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperation", reflect.TypeOf((*MockControllerUnit)(nil).UpdateOperation), arg0)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
}

// MockLoggerFactory is a mock of LoggerFactory interface.
type MockLoggerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerFactoryMockRecorder
}

// MockLoggerFactoryMockRecorder is the mock recorder for MockLoggerFactory.
type MockLoggerFactoryMockRecorder struct {
	mock *MockLoggerFactory
}

// NewMockLoggerFactory creates a new mock instance.
func NewMockLoggerFactory(ctrl *gomock.Controller) *MockLoggerFactory {
	mock := &MockLoggerFactory{ctrl: ctrl}
	mock.recorder = &MockLoggerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerFactory) EXPECT() *MockLoggerFactoryMockRecorder {
	return m.recorder
}

// Child mocks base method.
func (m *MockLoggerFactory) Child(arg0 string) charmhub.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Child", arg0)
	ret0, _ := ret[0].(charmhub.Logger)
	return ret0
}

// Child indicates an expected call of Child.
func (mr *MockLoggerFactoryMockRecorder) Child(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Child", reflect.TypeOf((*MockLoggerFactory)(nil).Child), arg0)
}

// ChildWithLabels mocks base method.
func (m *MockLoggerFactory) ChildWithLabels(arg0 string, arg1 ...string) charmhub.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChildWithLabels", varargs...)
	ret0, _ := ret[0].(charmhub.Logger)
	return ret0
}

// ChildWithLabels indicates an expected call of ChildWithLabels.
func (mr *MockLoggerFactoryMockRecorder) ChildWithLabels(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildWithLabels", reflect.TypeOf((*MockLoggerFactory)(nil).ChildWithLabels), varargs...)
}

// Namespace mocks base method.
func (m *MockLoggerFactory) Namespace(arg0 string) services.LoggerFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", arg0)
	ret0, _ := ret[0].(services.LoggerFactory)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockLoggerFactoryMockRecorder) Namespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockLoggerFactory)(nil).Namespace), arg0)
}

// MockCloudServiceGetter is a mock of CloudServiceGetter interface.
type MockCloudServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceGetterMockRecorder
}

// MockCloudServiceGetterMockRecorder is the mock recorder for MockCloudServiceGetter.
type MockCloudServiceGetterMockRecorder struct {
	mock *MockCloudServiceGetter
}

// NewMockCloudServiceGetter creates a new mock instance.
func NewMockCloudServiceGetter(ctrl *gomock.Controller) *MockCloudServiceGetter {
	mock := &MockCloudServiceGetter{ctrl: ctrl}
	mock.recorder = &MockCloudServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServiceGetter) EXPECT() *MockCloudServiceGetterMockRecorder {
	return m.recorder
}

// CloudService mocks base method.
func (m *MockCloudServiceGetter) CloudService(arg0 string) (CloudService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudService", arg0)
	ret0, _ := ret[0].(CloudService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudService indicates an expected call of CloudService.
func (mr *MockCloudServiceGetterMockRecorder) CloudService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudService", reflect.TypeOf((*MockCloudServiceGetter)(nil).CloudService), arg0)
}

// MockOperationApplier is a mock of OperationApplier interface.
type MockOperationApplier struct {
	ctrl     *gomock.Controller
	recorder *MockOperationApplierMockRecorder
}

// MockOperationApplierMockRecorder is the mock recorder for MockOperationApplier.
type MockOperationApplierMockRecorder struct {
	mock *MockOperationApplier
}

// NewMockOperationApplier creates a new mock instance.
func NewMockOperationApplier(ctrl *gomock.Controller) *MockOperationApplier {
	mock := &MockOperationApplier{ctrl: ctrl}
	mock.recorder = &MockOperationApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationApplier) EXPECT() *MockOperationApplierMockRecorder {
	return m.recorder
}

// ApplyOperation mocks base method.
func (m *MockOperationApplier) ApplyOperation(arg0 *state.UpdateUnitOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockOperationApplierMockRecorder) ApplyOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockOperationApplier)(nil).ApplyOperation), arg0)
}

// MockMachineGetter is a mock of MachineGetter interface.
type MockMachineGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMachineGetterMockRecorder
}

// MockMachineGetterMockRecorder is the mock recorder for MockMachineGetter.
type MockMachineGetterMockRecorder struct {
	mock *MockMachineGetter
}

// NewMockMachineGetter creates a new mock instance.
func NewMockMachineGetter(ctrl *gomock.Controller) *MockMachineGetter {
	mock := &MockMachineGetter{ctrl: ctrl}
	mock.recorder = &MockMachineGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineGetter) EXPECT() *MockMachineGetterMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockMachineGetter) Machine(arg0 string) (*state.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(*state.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockMachineGetterMockRecorder) Machine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockMachineGetter)(nil).Machine), arg0)
}
