// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/logger (interfaces: ModelLogger,LoggerCloser)
//
// Generated by this command:
//
//	mockgen -package statushistory -destination logsink_mock_test.go github.com/juju/juju/core/logger ModelLogger,LoggerCloser
//

// Package statushistory is a generated GoMock package.
package statushistory

import (
	reflect "reflect"

	logger "github.com/juju/juju/core/logger"
	gomock "go.uber.org/mock/gomock"
)

// MockModelLogger is a mock of ModelLogger interface.
type MockModelLogger struct {
	ctrl     *gomock.Controller
	recorder *MockModelLoggerMockRecorder
}

// MockModelLoggerMockRecorder is the mock recorder for MockModelLogger.
type MockModelLoggerMockRecorder struct {
	mock *MockModelLogger
}

// NewMockModelLogger creates a new mock instance.
func NewMockModelLogger(ctrl *gomock.Controller) *MockModelLogger {
	mock := &MockModelLogger{ctrl: ctrl}
	mock.recorder = &MockModelLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelLogger) EXPECT() *MockModelLoggerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockModelLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModelLoggerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelLogger)(nil).Close))
}

// GetLogger mocks base method.
func (m *MockModelLogger) GetLogger(arg0 string) logger.LoggerCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger", arg0)
	ret0, _ := ret[0].(logger.LoggerCloser)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockModelLoggerMockRecorder) GetLogger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockModelLogger)(nil).GetLogger), arg0)
}

// InitLogger mocks base method.
func (m *MockModelLogger) InitLogger(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitLogger", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitLogger indicates an expected call of InitLogger.
func (mr *MockModelLoggerMockRecorder) InitLogger(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLogger", reflect.TypeOf((*MockModelLogger)(nil).InitLogger), arg0, arg1, arg2)
}

// RemoveLogger mocks base method.
func (m *MockModelLogger) RemoveLogger(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLogger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLogger indicates an expected call of RemoveLogger.
func (mr *MockModelLoggerMockRecorder) RemoveLogger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLogger", reflect.TypeOf((*MockModelLogger)(nil).RemoveLogger), arg0)
}

// MockLoggerCloser is a mock of LoggerCloser interface.
type MockLoggerCloser struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerCloserMockRecorder
}

// MockLoggerCloserMockRecorder is the mock recorder for MockLoggerCloser.
type MockLoggerCloserMockRecorder struct {
	mock *MockLoggerCloser
}

// NewMockLoggerCloser creates a new mock instance.
func NewMockLoggerCloser(ctrl *gomock.Controller) *MockLoggerCloser {
	mock := &MockLoggerCloser{ctrl: ctrl}
	mock.recorder = &MockLoggerCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerCloser) EXPECT() *MockLoggerCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLoggerCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLoggerCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLoggerCloser)(nil).Close))
}

// Log mocks base method.
func (m *MockLoggerCloser) Log(arg0 []logger.LogRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockLoggerCloserMockRecorder) Log(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLoggerCloser)(nil).Log), arg0)
}
