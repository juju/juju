// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/containerprovisioner (interfaces: ContainerMachine,ContainerMachineGetter,ContainerProvisionerAPI,ControllerAPI,MachinesAPI)
//
// Generated by this command:
//
//	mockgen -typed -package containerprovisioner_test -destination package_mock_test.go github.com/juju/juju/internal/worker/containerprovisioner ContainerMachine,ContainerMachineGetter,ContainerProvisionerAPI,ControllerAPI,MachinesAPI
//

// Package containerprovisioner_test is a generated GoMock package.
package containerprovisioner_test

import (
	context "context"
	reflect "reflect"

	provisioner "github.com/juju/juju/api/agent/provisioner"
	controller "github.com/juju/juju/controller"
	instance "github.com/juju/juju/core/instance"
	life "github.com/juju/juju/core/life"
	network "github.com/juju/juju/core/network"
	watcher "github.com/juju/juju/core/watcher"
	network0 "github.com/juju/juju/domain/network"
	config "github.com/juju/juju/environs/config"
	containerprovisioner "github.com/juju/juju/internal/worker/containerprovisioner"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerMachine is a mock of ContainerMachine interface.
type MockContainerMachine struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMachineMockRecorder
}

// MockContainerMachineMockRecorder is the mock recorder for MockContainerMachine.
type MockContainerMachineMockRecorder struct {
	mock *MockContainerMachine
}

// NewMockContainerMachine creates a new mock instance.
func NewMockContainerMachine(ctrl *gomock.Controller) *MockContainerMachine {
	mock := &MockContainerMachine{ctrl: ctrl}
	mock.recorder = &MockContainerMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerMachine) EXPECT() *MockContainerMachineMockRecorder {
	return m.recorder
}

// AvailabilityZone mocks base method.
func (m *MockContainerMachine) AvailabilityZone(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZone", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZone indicates an expected call of AvailabilityZone.
func (mr *MockContainerMachineMockRecorder) AvailabilityZone(arg0 any) *MockContainerMachineAvailabilityZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZone", reflect.TypeOf((*MockContainerMachine)(nil).AvailabilityZone), arg0)
	return &MockContainerMachineAvailabilityZoneCall{Call: call}
}

// MockContainerMachineAvailabilityZoneCall wrap *gomock.Call
type MockContainerMachineAvailabilityZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerMachineAvailabilityZoneCall) Return(arg0 string, arg1 error) *MockContainerMachineAvailabilityZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerMachineAvailabilityZoneCall) Do(f func(context.Context) (string, error)) *MockContainerMachineAvailabilityZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerMachineAvailabilityZoneCall) DoAndReturn(f func(context.Context) (string, error)) *MockContainerMachineAvailabilityZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockContainerMachine) Life() life.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(life.Value)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockContainerMachineMockRecorder) Life() *MockContainerMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockContainerMachine)(nil).Life))
	return &MockContainerMachineLifeCall{Call: call}
}

// MockContainerMachineLifeCall wrap *gomock.Call
type MockContainerMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerMachineLifeCall) Return(arg0 life.Value) *MockContainerMachineLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerMachineLifeCall) Do(f func() life.Value) *MockContainerMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerMachineLifeCall) DoAndReturn(f func() life.Value) *MockContainerMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportedContainers mocks base method.
func (m *MockContainerMachine) SupportedContainers(arg0 context.Context) ([]instance.ContainerType, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedContainers", arg0)
	ret0, _ := ret[0].([]instance.ContainerType)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SupportedContainers indicates an expected call of SupportedContainers.
func (mr *MockContainerMachineMockRecorder) SupportedContainers(arg0 any) *MockContainerMachineSupportedContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedContainers", reflect.TypeOf((*MockContainerMachine)(nil).SupportedContainers), arg0)
	return &MockContainerMachineSupportedContainersCall{Call: call}
}

// MockContainerMachineSupportedContainersCall wrap *gomock.Call
type MockContainerMachineSupportedContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerMachineSupportedContainersCall) Return(arg0 []instance.ContainerType, arg1 bool, arg2 error) *MockContainerMachineSupportedContainersCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerMachineSupportedContainersCall) Do(f func(context.Context) ([]instance.ContainerType, bool, error)) *MockContainerMachineSupportedContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerMachineSupportedContainersCall) DoAndReturn(f func(context.Context) ([]instance.ContainerType, bool, error)) *MockContainerMachineSupportedContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchContainers mocks base method.
func (m *MockContainerMachine) WatchContainers(arg0 context.Context, arg1 instance.ContainerType) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchContainers", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchContainers indicates an expected call of WatchContainers.
func (mr *MockContainerMachineMockRecorder) WatchContainers(arg0, arg1 any) *MockContainerMachineWatchContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchContainers", reflect.TypeOf((*MockContainerMachine)(nil).WatchContainers), arg0, arg1)
	return &MockContainerMachineWatchContainersCall{Call: call}
}

// MockContainerMachineWatchContainersCall wrap *gomock.Call
type MockContainerMachineWatchContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerMachineWatchContainersCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockContainerMachineWatchContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerMachineWatchContainersCall) Do(f func(context.Context, instance.ContainerType) (watcher.Watcher[[]string], error)) *MockContainerMachineWatchContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerMachineWatchContainersCall) DoAndReturn(f func(context.Context, instance.ContainerType) (watcher.Watcher[[]string], error)) *MockContainerMachineWatchContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockContainerMachineGetter is a mock of ContainerMachineGetter interface.
type MockContainerMachineGetter struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMachineGetterMockRecorder
}

// MockContainerMachineGetterMockRecorder is the mock recorder for MockContainerMachineGetter.
type MockContainerMachineGetterMockRecorder struct {
	mock *MockContainerMachineGetter
}

// NewMockContainerMachineGetter creates a new mock instance.
func NewMockContainerMachineGetter(ctrl *gomock.Controller) *MockContainerMachineGetter {
	mock := &MockContainerMachineGetter{ctrl: ctrl}
	mock.recorder = &MockContainerMachineGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerMachineGetter) EXPECT() *MockContainerMachineGetterMockRecorder {
	return m.recorder
}

// Machines mocks base method.
func (m *MockContainerMachineGetter) Machines(arg0 context.Context, arg1 ...names.MachineTag) ([]containerprovisioner.ContainerMachineResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Machines", varargs...)
	ret0, _ := ret[0].([]containerprovisioner.ContainerMachineResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machines indicates an expected call of Machines.
func (mr *MockContainerMachineGetterMockRecorder) Machines(arg0 any, arg1 ...any) *MockContainerMachineGetterMachinesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machines", reflect.TypeOf((*MockContainerMachineGetter)(nil).Machines), varargs...)
	return &MockContainerMachineGetterMachinesCall{Call: call}
}

// MockContainerMachineGetterMachinesCall wrap *gomock.Call
type MockContainerMachineGetterMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerMachineGetterMachinesCall) Return(arg0 []containerprovisioner.ContainerMachineResult, arg1 error) *MockContainerMachineGetterMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerMachineGetterMachinesCall) Do(f func(context.Context, ...names.MachineTag) ([]containerprovisioner.ContainerMachineResult, error)) *MockContainerMachineGetterMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerMachineGetterMachinesCall) DoAndReturn(f func(context.Context, ...names.MachineTag) ([]containerprovisioner.ContainerMachineResult, error)) *MockContainerMachineGetterMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockContainerProvisionerAPI is a mock of ContainerProvisionerAPI interface.
type MockContainerProvisionerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockContainerProvisionerAPIMockRecorder
}

// MockContainerProvisionerAPIMockRecorder is the mock recorder for MockContainerProvisionerAPI.
type MockContainerProvisionerAPIMockRecorder struct {
	mock *MockContainerProvisionerAPI
}

// NewMockContainerProvisionerAPI creates a new mock instance.
func NewMockContainerProvisionerAPI(ctrl *gomock.Controller) *MockContainerProvisionerAPI {
	mock := &MockContainerProvisionerAPI{ctrl: ctrl}
	mock.recorder = &MockContainerProvisionerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerProvisionerAPI) EXPECT() *MockContainerProvisionerAPIMockRecorder {
	return m.recorder
}

// ContainerConfig mocks base method.
func (m *MockContainerProvisionerAPI) ContainerConfig(arg0 context.Context) (params.ContainerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerConfig", arg0)
	ret0, _ := ret[0].(params.ContainerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerConfig indicates an expected call of ContainerConfig.
func (mr *MockContainerProvisionerAPIMockRecorder) ContainerConfig(arg0 any) *MockContainerProvisionerAPIContainerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerConfig", reflect.TypeOf((*MockContainerProvisionerAPI)(nil).ContainerConfig), arg0)
	return &MockContainerProvisionerAPIContainerConfigCall{Call: call}
}

// MockContainerProvisionerAPIContainerConfigCall wrap *gomock.Call
type MockContainerProvisionerAPIContainerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerProvisionerAPIContainerConfigCall) Return(arg0 params.ContainerConfig, arg1 error) *MockContainerProvisionerAPIContainerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerProvisionerAPIContainerConfigCall) Do(f func(context.Context) (params.ContainerConfig, error)) *MockContainerProvisionerAPIContainerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerProvisionerAPIContainerConfigCall) DoAndReturn(f func(context.Context) (params.ContainerConfig, error)) *MockContainerProvisionerAPIContainerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerManagerConfig mocks base method.
func (m *MockContainerProvisionerAPI) ContainerManagerConfig(arg0 context.Context, arg1 params.ContainerManagerConfigParams) (params.ContainerManagerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerManagerConfig", arg0, arg1)
	ret0, _ := ret[0].(params.ContainerManagerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerManagerConfig indicates an expected call of ContainerManagerConfig.
func (mr *MockContainerProvisionerAPIMockRecorder) ContainerManagerConfig(arg0, arg1 any) *MockContainerProvisionerAPIContainerManagerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerManagerConfig", reflect.TypeOf((*MockContainerProvisionerAPI)(nil).ContainerManagerConfig), arg0, arg1)
	return &MockContainerProvisionerAPIContainerManagerConfigCall{Call: call}
}

// MockContainerProvisionerAPIContainerManagerConfigCall wrap *gomock.Call
type MockContainerProvisionerAPIContainerManagerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerProvisionerAPIContainerManagerConfigCall) Return(arg0 params.ContainerManagerConfig, arg1 error) *MockContainerProvisionerAPIContainerManagerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerProvisionerAPIContainerManagerConfigCall) Do(f func(context.Context, params.ContainerManagerConfigParams) (params.ContainerManagerConfig, error)) *MockContainerProvisionerAPIContainerManagerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerProvisionerAPIContainerManagerConfigCall) DoAndReturn(f func(context.Context, params.ContainerManagerConfigParams) (params.ContainerManagerConfig, error)) *MockContainerProvisionerAPIContainerManagerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerProfileInfo mocks base method.
func (m *MockContainerProvisionerAPI) GetContainerProfileInfo(arg0 context.Context, arg1 names.MachineTag) ([]*provisioner.LXDProfileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerProfileInfo", arg0, arg1)
	ret0, _ := ret[0].([]*provisioner.LXDProfileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerProfileInfo indicates an expected call of GetContainerProfileInfo.
func (mr *MockContainerProvisionerAPIMockRecorder) GetContainerProfileInfo(arg0, arg1 any) *MockContainerProvisionerAPIGetContainerProfileInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerProfileInfo", reflect.TypeOf((*MockContainerProvisionerAPI)(nil).GetContainerProfileInfo), arg0, arg1)
	return &MockContainerProvisionerAPIGetContainerProfileInfoCall{Call: call}
}

// MockContainerProvisionerAPIGetContainerProfileInfoCall wrap *gomock.Call
type MockContainerProvisionerAPIGetContainerProfileInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerProvisionerAPIGetContainerProfileInfoCall) Return(arg0 []*provisioner.LXDProfileResult, arg1 error) *MockContainerProvisionerAPIGetContainerProfileInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerProvisionerAPIGetContainerProfileInfoCall) Do(f func(context.Context, names.MachineTag) ([]*provisioner.LXDProfileResult, error)) *MockContainerProvisionerAPIGetContainerProfileInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerProvisionerAPIGetContainerProfileInfoCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]*provisioner.LXDProfileResult, error)) *MockContainerProvisionerAPIGetContainerProfileInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HostChangesForContainer mocks base method.
func (m *MockContainerProvisionerAPI) HostChangesForContainer(arg0 context.Context, arg1 names.MachineTag) ([]network0.DeviceToBridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostChangesForContainer", arg0, arg1)
	ret0, _ := ret[0].([]network0.DeviceToBridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostChangesForContainer indicates an expected call of HostChangesForContainer.
func (mr *MockContainerProvisionerAPIMockRecorder) HostChangesForContainer(arg0, arg1 any) *MockContainerProvisionerAPIHostChangesForContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostChangesForContainer", reflect.TypeOf((*MockContainerProvisionerAPI)(nil).HostChangesForContainer), arg0, arg1)
	return &MockContainerProvisionerAPIHostChangesForContainerCall{Call: call}
}

// MockContainerProvisionerAPIHostChangesForContainerCall wrap *gomock.Call
type MockContainerProvisionerAPIHostChangesForContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerProvisionerAPIHostChangesForContainerCall) Return(arg0 []network0.DeviceToBridge, arg1 error) *MockContainerProvisionerAPIHostChangesForContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerProvisionerAPIHostChangesForContainerCall) Do(f func(context.Context, names.MachineTag) ([]network0.DeviceToBridge, error)) *MockContainerProvisionerAPIHostChangesForContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerProvisionerAPIHostChangesForContainerCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]network0.DeviceToBridge, error)) *MockContainerProvisionerAPIHostChangesForContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareContainerInterfaceInfo mocks base method.
func (m *MockContainerProvisionerAPI) PrepareContainerInterfaceInfo(arg0 context.Context, arg1 names.MachineTag) (network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContainerInterfaceInfo", arg0, arg1)
	ret0, _ := ret[0].(network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContainerInterfaceInfo indicates an expected call of PrepareContainerInterfaceInfo.
func (mr *MockContainerProvisionerAPIMockRecorder) PrepareContainerInterfaceInfo(arg0, arg1 any) *MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContainerInterfaceInfo", reflect.TypeOf((*MockContainerProvisionerAPI)(nil).PrepareContainerInterfaceInfo), arg0, arg1)
	return &MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall{Call: call}
}

// MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall wrap *gomock.Call
type MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall) Return(arg0 network.InterfaceInfos, arg1 error) *MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall) Do(f func(context.Context, names.MachineTag) (network.InterfaceInfos, error)) *MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall) DoAndReturn(f func(context.Context, names.MachineTag) (network.InterfaceInfos, error)) *MockContainerProvisionerAPIPrepareContainerInterfaceInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseContainerAddresses mocks base method.
func (m *MockContainerProvisionerAPI) ReleaseContainerAddresses(arg0 context.Context, arg1 names.MachineTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerAddresses indicates an expected call of ReleaseContainerAddresses.
func (mr *MockContainerProvisionerAPIMockRecorder) ReleaseContainerAddresses(arg0, arg1 any) *MockContainerProvisionerAPIReleaseContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerAddresses", reflect.TypeOf((*MockContainerProvisionerAPI)(nil).ReleaseContainerAddresses), arg0, arg1)
	return &MockContainerProvisionerAPIReleaseContainerAddressesCall{Call: call}
}

// MockContainerProvisionerAPIReleaseContainerAddressesCall wrap *gomock.Call
type MockContainerProvisionerAPIReleaseContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerProvisionerAPIReleaseContainerAddressesCall) Return(arg0 error) *MockContainerProvisionerAPIReleaseContainerAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerProvisionerAPIReleaseContainerAddressesCall) Do(f func(context.Context, names.MachineTag) error) *MockContainerProvisionerAPIReleaseContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerProvisionerAPIReleaseContainerAddressesCall) DoAndReturn(f func(context.Context, names.MachineTag) error) *MockContainerProvisionerAPIReleaseContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHostMachineNetworkConfig mocks base method.
func (m *MockContainerProvisionerAPI) SetHostMachineNetworkConfig(arg0 context.Context, arg1 names.MachineTag, arg2 []params.NetworkConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHostMachineNetworkConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHostMachineNetworkConfig indicates an expected call of SetHostMachineNetworkConfig.
func (mr *MockContainerProvisionerAPIMockRecorder) SetHostMachineNetworkConfig(arg0, arg1, arg2 any) *MockContainerProvisionerAPISetHostMachineNetworkConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHostMachineNetworkConfig", reflect.TypeOf((*MockContainerProvisionerAPI)(nil).SetHostMachineNetworkConfig), arg0, arg1, arg2)
	return &MockContainerProvisionerAPISetHostMachineNetworkConfigCall{Call: call}
}

// MockContainerProvisionerAPISetHostMachineNetworkConfigCall wrap *gomock.Call
type MockContainerProvisionerAPISetHostMachineNetworkConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerProvisionerAPISetHostMachineNetworkConfigCall) Return(arg0 error) *MockContainerProvisionerAPISetHostMachineNetworkConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerProvisionerAPISetHostMachineNetworkConfigCall) Do(f func(context.Context, names.MachineTag, []params.NetworkConfig) error) *MockContainerProvisionerAPISetHostMachineNetworkConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerProvisionerAPISetHostMachineNetworkConfigCall) DoAndReturn(f func(context.Context, names.MachineTag, []params.NetworkConfig) error) *MockContainerProvisionerAPISetHostMachineNetworkConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerAPI is a mock of ControllerAPI interface.
type MockControllerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockControllerAPIMockRecorder
}

// MockControllerAPIMockRecorder is the mock recorder for MockControllerAPI.
type MockControllerAPIMockRecorder struct {
	mock *MockControllerAPI
}

// NewMockControllerAPI creates a new mock instance.
func NewMockControllerAPI(ctrl *gomock.Controller) *MockControllerAPI {
	mock := &MockControllerAPI{ctrl: ctrl}
	mock.recorder = &MockControllerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerAPI) EXPECT() *MockControllerAPIMockRecorder {
	return m.recorder
}

// APIAddresses mocks base method.
func (m *MockControllerAPI) APIAddresses(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIAddresses indicates an expected call of APIAddresses.
func (mr *MockControllerAPIMockRecorder) APIAddresses(arg0 any) *MockControllerAPIAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIAddresses", reflect.TypeOf((*MockControllerAPI)(nil).APIAddresses), arg0)
	return &MockControllerAPIAPIAddressesCall{Call: call}
}

// MockControllerAPIAPIAddressesCall wrap *gomock.Call
type MockControllerAPIAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAPIAPIAddressesCall) Return(arg0 []string, arg1 error) *MockControllerAPIAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAPIAPIAddressesCall) Do(f func(context.Context) ([]string, error)) *MockControllerAPIAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAPIAPIAddressesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerAPIAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CACert mocks base method.
func (m *MockControllerAPI) CACert(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CACert", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CACert indicates an expected call of CACert.
func (mr *MockControllerAPIMockRecorder) CACert(arg0 any) *MockControllerAPICACertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CACert", reflect.TypeOf((*MockControllerAPI)(nil).CACert), arg0)
	return &MockControllerAPICACertCall{Call: call}
}

// MockControllerAPICACertCall wrap *gomock.Call
type MockControllerAPICACertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAPICACertCall) Return(arg0 string, arg1 error) *MockControllerAPICACertCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAPICACertCall) Do(f func(context.Context) (string, error)) *MockControllerAPICACertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAPICACertCall) DoAndReturn(f func(context.Context) (string, error)) *MockControllerAPICACertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerConfig mocks base method.
func (m *MockControllerAPI) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerAPIMockRecorder) ControllerConfig(arg0 any) *MockControllerAPIControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerAPI)(nil).ControllerConfig), arg0)
	return &MockControllerAPIControllerConfigCall{Call: call}
}

// MockControllerAPIControllerConfigCall wrap *gomock.Call
type MockControllerAPIControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAPIControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerAPIControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAPIControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerAPIControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAPIControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerAPIControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelConfig mocks base method.
func (m *MockControllerAPI) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockControllerAPIMockRecorder) ModelConfig(arg0 any) *MockControllerAPIModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockControllerAPI)(nil).ModelConfig), arg0)
	return &MockControllerAPIModelConfigCall{Call: call}
}

// MockControllerAPIModelConfigCall wrap *gomock.Call
type MockControllerAPIModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAPIModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockControllerAPIModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAPIModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockControllerAPIModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAPIModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockControllerAPIModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockControllerAPI) ModelUUID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockControllerAPIMockRecorder) ModelUUID(arg0 any) *MockControllerAPIModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockControllerAPI)(nil).ModelUUID), arg0)
	return &MockControllerAPIModelUUIDCall{Call: call}
}

// MockControllerAPIModelUUIDCall wrap *gomock.Call
type MockControllerAPIModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAPIModelUUIDCall) Return(arg0 string, arg1 error) *MockControllerAPIModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAPIModelUUIDCall) Do(f func(context.Context) (string, error)) *MockControllerAPIModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAPIModelUUIDCall) DoAndReturn(f func(context.Context) (string, error)) *MockControllerAPIModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchForModelConfigChanges mocks base method.
func (m *MockControllerAPI) WatchForModelConfigChanges(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForModelConfigChanges", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchForModelConfigChanges indicates an expected call of WatchForModelConfigChanges.
func (mr *MockControllerAPIMockRecorder) WatchForModelConfigChanges(arg0 any) *MockControllerAPIWatchForModelConfigChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForModelConfigChanges", reflect.TypeOf((*MockControllerAPI)(nil).WatchForModelConfigChanges), arg0)
	return &MockControllerAPIWatchForModelConfigChangesCall{Call: call}
}

// MockControllerAPIWatchForModelConfigChangesCall wrap *gomock.Call
type MockControllerAPIWatchForModelConfigChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAPIWatchForModelConfigChangesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockControllerAPIWatchForModelConfigChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAPIWatchForModelConfigChangesCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerAPIWatchForModelConfigChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAPIWatchForModelConfigChangesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerAPIWatchForModelConfigChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachinesAPI is a mock of MachinesAPI interface.
type MockMachinesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMachinesAPIMockRecorder
}

// MockMachinesAPIMockRecorder is the mock recorder for MockMachinesAPI.
type MockMachinesAPIMockRecorder struct {
	mock *MockMachinesAPI
}

// NewMockMachinesAPI creates a new mock instance.
func NewMockMachinesAPI(ctrl *gomock.Controller) *MockMachinesAPI {
	mock := &MockMachinesAPI{ctrl: ctrl}
	mock.recorder = &MockMachinesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachinesAPI) EXPECT() *MockMachinesAPIMockRecorder {
	return m.recorder
}

// Machines mocks base method.
func (m *MockMachinesAPI) Machines(arg0 context.Context, arg1 ...names.MachineTag) ([]provisioner.MachineResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Machines", varargs...)
	ret0, _ := ret[0].([]provisioner.MachineResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machines indicates an expected call of Machines.
func (mr *MockMachinesAPIMockRecorder) Machines(arg0 any, arg1 ...any) *MockMachinesAPIMachinesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machines", reflect.TypeOf((*MockMachinesAPI)(nil).Machines), varargs...)
	return &MockMachinesAPIMachinesCall{Call: call}
}

// MockMachinesAPIMachinesCall wrap *gomock.Call
type MockMachinesAPIMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinesAPIMachinesCall) Return(arg0 []provisioner.MachineResult, arg1 error) *MockMachinesAPIMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinesAPIMachinesCall) Do(f func(context.Context, ...names.MachineTag) ([]provisioner.MachineResult, error)) *MockMachinesAPIMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinesAPIMachinesCall) DoAndReturn(f func(context.Context, ...names.MachineTag) ([]provisioner.MachineResult, error)) *MockMachinesAPIMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachinesWithTransientErrors mocks base method.
func (m *MockMachinesAPI) MachinesWithTransientErrors(arg0 context.Context) ([]provisioner.MachineStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachinesWithTransientErrors", arg0)
	ret0, _ := ret[0].([]provisioner.MachineStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachinesWithTransientErrors indicates an expected call of MachinesWithTransientErrors.
func (mr *MockMachinesAPIMockRecorder) MachinesWithTransientErrors(arg0 any) *MockMachinesAPIMachinesWithTransientErrorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachinesWithTransientErrors", reflect.TypeOf((*MockMachinesAPI)(nil).MachinesWithTransientErrors), arg0)
	return &MockMachinesAPIMachinesWithTransientErrorsCall{Call: call}
}

// MockMachinesAPIMachinesWithTransientErrorsCall wrap *gomock.Call
type MockMachinesAPIMachinesWithTransientErrorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinesAPIMachinesWithTransientErrorsCall) Return(arg0 []provisioner.MachineStatusResult, arg1 error) *MockMachinesAPIMachinesWithTransientErrorsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinesAPIMachinesWithTransientErrorsCall) Do(f func(context.Context) ([]provisioner.MachineStatusResult, error)) *MockMachinesAPIMachinesWithTransientErrorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinesAPIMachinesWithTransientErrorsCall) DoAndReturn(f func(context.Context) ([]provisioner.MachineStatusResult, error)) *MockMachinesAPIMachinesWithTransientErrorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProvisioningInfo mocks base method.
func (m *MockMachinesAPI) ProvisioningInfo(arg0 context.Context, arg1 []names.MachineTag) (params.ProvisioningInfoResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisioningInfo", arg0, arg1)
	ret0, _ := ret[0].(params.ProvisioningInfoResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisioningInfo indicates an expected call of ProvisioningInfo.
func (mr *MockMachinesAPIMockRecorder) ProvisioningInfo(arg0, arg1 any) *MockMachinesAPIProvisioningInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisioningInfo", reflect.TypeOf((*MockMachinesAPI)(nil).ProvisioningInfo), arg0, arg1)
	return &MockMachinesAPIProvisioningInfoCall{Call: call}
}

// MockMachinesAPIProvisioningInfoCall wrap *gomock.Call
type MockMachinesAPIProvisioningInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinesAPIProvisioningInfoCall) Return(arg0 params.ProvisioningInfoResults, arg1 error) *MockMachinesAPIProvisioningInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinesAPIProvisioningInfoCall) Do(f func(context.Context, []names.MachineTag) (params.ProvisioningInfoResults, error)) *MockMachinesAPIProvisioningInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinesAPIProvisioningInfoCall) DoAndReturn(f func(context.Context, []names.MachineTag) (params.ProvisioningInfoResults, error)) *MockMachinesAPIProvisioningInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineErrorRetry mocks base method.
func (m *MockMachinesAPI) WatchMachineErrorRetry(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineErrorRetry", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineErrorRetry indicates an expected call of WatchMachineErrorRetry.
func (mr *MockMachinesAPIMockRecorder) WatchMachineErrorRetry(arg0 any) *MockMachinesAPIWatchMachineErrorRetryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineErrorRetry", reflect.TypeOf((*MockMachinesAPI)(nil).WatchMachineErrorRetry), arg0)
	return &MockMachinesAPIWatchMachineErrorRetryCall{Call: call}
}

// MockMachinesAPIWatchMachineErrorRetryCall wrap *gomock.Call
type MockMachinesAPIWatchMachineErrorRetryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinesAPIWatchMachineErrorRetryCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockMachinesAPIWatchMachineErrorRetryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinesAPIWatchMachineErrorRetryCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMachinesAPIWatchMachineErrorRetryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinesAPIWatchMachineErrorRetryCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMachinesAPIWatchMachineErrorRetryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelMachines mocks base method.
func (m *MockMachinesAPI) WatchModelMachines(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelMachines", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelMachines indicates an expected call of WatchModelMachines.
func (mr *MockMachinesAPIMockRecorder) WatchModelMachines(arg0 any) *MockMachinesAPIWatchModelMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelMachines", reflect.TypeOf((*MockMachinesAPI)(nil).WatchModelMachines), arg0)
	return &MockMachinesAPIWatchModelMachinesCall{Call: call}
}

// MockMachinesAPIWatchModelMachinesCall wrap *gomock.Call
type MockMachinesAPIWatchModelMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinesAPIWatchModelMachinesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockMachinesAPIWatchModelMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinesAPIWatchModelMachinesCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMachinesAPIWatchModelMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinesAPIWatchModelMachinesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMachinesAPIWatchModelMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
