// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/modellife (interfaces: ModelService)
//
// Generated by this command:
//
//	mockgen -typed -package modellife -destination services_mock_test.go github.com/juju/juju/internal/worker/modellife ModelService
//

// Package modellife is a generated GoMock package.
package modellife

import (
	context "context"
	reflect "reflect"

	life "github.com/juju/juju/core/life"
	model "github.com/juju/juju/core/model"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// GetModelLife mocks base method.
func (m *MockModelService) GetModelLife(arg0 context.Context, arg1 model.UUID) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelLife indicates an expected call of GetModelLife.
func (mr *MockModelServiceMockRecorder) GetModelLife(arg0, arg1 any) *MockModelServiceGetModelLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelLife", reflect.TypeOf((*MockModelService)(nil).GetModelLife), arg0, arg1)
	return &MockModelServiceGetModelLifeCall{Call: call}
}

// MockModelServiceGetModelLifeCall wrap *gomock.Call
type MockModelServiceGetModelLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelLifeCall) Return(arg0 life.Value, arg1 error) *MockModelServiceGetModelLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelLifeCall) Do(f func(context.Context, model.UUID) (life.Value, error)) *MockModelServiceGetModelLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelLifeCall) DoAndReturn(f func(context.Context, model.UUID) (life.Value, error)) *MockModelServiceGetModelLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModel mocks base method.
func (m *MockModelService) WatchModel(arg0 context.Context, arg1 model.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModel", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModel indicates an expected call of WatchModel.
func (mr *MockModelServiceMockRecorder) WatchModel(arg0, arg1 any) *MockModelServiceWatchModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModel", reflect.TypeOf((*MockModelService)(nil).WatchModel), arg0, arg1)
	return &MockModelServiceWatchModelCall{Call: call}
}

// MockModelServiceWatchModelCall wrap *gomock.Call
type MockModelServiceWatchModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceWatchModelCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelServiceWatchModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceWatchModelCall) Do(f func(context.Context, model.UUID) (watcher.Watcher[struct{}], error)) *MockModelServiceWatchModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceWatchModelCall) DoAndReturn(f func(context.Context, model.UUID) (watcher.Watcher[struct{}], error)) *MockModelServiceWatchModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
