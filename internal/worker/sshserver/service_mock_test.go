// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshserver (interfaces: FacadeClient,JWTParser,SessionHandler)
//
// Generated by this command:
//
//	mockgen -package sshserver -destination service_mock_test.go github.com/juju/juju/internal/worker/sshserver FacadeClient,JWTParser,SessionHandler
//

// Package sshserver is a generated GoMock package.
package sshserver

import (
	context "context"
	reflect "reflect"

	ssh "github.com/gliderlabs/ssh"
	controller "github.com/juju/juju/controller"
	virtualhostname "github.com/juju/juju/core/virtualhostname"
	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	jwt "github.com/lestrrat-go/jwx/v2/jwt"
	gomock "go.uber.org/mock/gomock"
	ssh0 "golang.org/x/crypto/ssh"
)

// MockFacadeClient is a mock of FacadeClient interface.
type MockFacadeClient struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeClientMockRecorder
}

// MockFacadeClientMockRecorder is the mock recorder for MockFacadeClient.
type MockFacadeClientMockRecorder struct {
	mock *MockFacadeClient
}

// NewMockFacadeClient creates a new mock instance.
func NewMockFacadeClient(ctrl *gomock.Controller) *MockFacadeClient {
	mock := &MockFacadeClient{ctrl: ctrl}
	mock.recorder = &MockFacadeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeClient) EXPECT() *MockFacadeClientMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockFacadeClient) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockFacadeClientMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockFacadeClient)(nil).ControllerConfig))
}

// ListPublicKeysForModel mocks base method.
func (m *MockFacadeClient) ListPublicKeysForModel(arg0 params.ListAuthorizedKeysArgs) ([]ssh0.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeysForModel", arg0)
	ret0, _ := ret[0].([]ssh0.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeysForModel indicates an expected call of ListPublicKeysForModel.
func (mr *MockFacadeClientMockRecorder) ListPublicKeysForModel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeysForModel", reflect.TypeOf((*MockFacadeClient)(nil).ListPublicKeysForModel), arg0)
}

// SSHServerHostKey mocks base method.
func (m *MockFacadeClient) SSHServerHostKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHServerHostKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHServerHostKey indicates an expected call of SSHServerHostKey.
func (mr *MockFacadeClientMockRecorder) SSHServerHostKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHServerHostKey", reflect.TypeOf((*MockFacadeClient)(nil).SSHServerHostKey))
}

// VirtualHostKey mocks base method.
func (m *MockFacadeClient) VirtualHostKey(arg0 params.SSHVirtualHostKeyRequestArg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualHostKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualHostKey indicates an expected call of VirtualHostKey.
func (mr *MockFacadeClientMockRecorder) VirtualHostKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualHostKey", reflect.TypeOf((*MockFacadeClient)(nil).VirtualHostKey), arg0)
}

// WatchControllerConfig mocks base method.
func (m *MockFacadeClient) WatchControllerConfig() (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerConfig")
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerConfig indicates an expected call of WatchControllerConfig.
func (mr *MockFacadeClientMockRecorder) WatchControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerConfig", reflect.TypeOf((*MockFacadeClient)(nil).WatchControllerConfig))
}

// MockJWTParser is a mock of JWTParser interface.
type MockJWTParser struct {
	ctrl     *gomock.Controller
	recorder *MockJWTParserMockRecorder
}

// MockJWTParserMockRecorder is the mock recorder for MockJWTParser.
type MockJWTParserMockRecorder struct {
	mock *MockJWTParser
}

// NewMockJWTParser creates a new mock instance.
func NewMockJWTParser(ctrl *gomock.Controller) *MockJWTParser {
	mock := &MockJWTParser{ctrl: ctrl}
	mock.recorder = &MockJWTParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTParser) EXPECT() *MockJWTParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockJWTParser) Parse(arg0 context.Context, arg1 string) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockJWTParserMockRecorder) Parse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockJWTParser)(nil).Parse), arg0, arg1)
}

// MockSessionHandler is a mock of SessionHandler interface.
type MockSessionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSessionHandlerMockRecorder
}

// MockSessionHandlerMockRecorder is the mock recorder for MockSessionHandler.
type MockSessionHandlerMockRecorder struct {
	mock *MockSessionHandler
}

// NewMockSessionHandler creates a new mock instance.
func NewMockSessionHandler(ctrl *gomock.Controller) *MockSessionHandler {
	mock := &MockSessionHandler{ctrl: ctrl}
	mock.recorder = &MockSessionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionHandler) EXPECT() *MockSessionHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockSessionHandler) Handle(arg0 ssh.Session, arg1 virtualhostname.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", arg0, arg1)
}

// Handle indicates an expected call of Handle.
func (mr *MockSessionHandlerMockRecorder) Handle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSessionHandler)(nil).Handle), arg0, arg1)
}
