// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshserver (interfaces: FacadeClient,JWTParser,ProxyHandlers,SSHConnector,TunnelAuthenticator)
//
// Generated by this command:
//
//	mockgen -typed -package sshserver -destination service_mock_test.go github.com/juju/juju/internal/worker/sshserver FacadeClient,JWTParser,ProxyHandlers,SSHConnector,TunnelAuthenticator
//

// Package sshserver is a generated GoMock package.
package sshserver

import (
	context "context"
	reflect "reflect"

	ssh "github.com/gliderlabs/ssh"
	controller "github.com/juju/juju/controller"
	virtualhostname "github.com/juju/juju/core/virtualhostname"
	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	jwt "github.com/lestrrat-go/jwx/v2/jwt"
	gomock "go.uber.org/mock/gomock"
	ssh0 "golang.org/x/crypto/ssh"
)

// MockFacadeClient is a mock of FacadeClient interface.
type MockFacadeClient struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeClientMockRecorder
}

// MockFacadeClientMockRecorder is the mock recorder for MockFacadeClient.
type MockFacadeClientMockRecorder struct {
	mock *MockFacadeClient
}

// NewMockFacadeClient creates a new mock instance.
func NewMockFacadeClient(ctrl *gomock.Controller) *MockFacadeClient {
	mock := &MockFacadeClient{ctrl: ctrl}
	mock.recorder = &MockFacadeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeClient) EXPECT() *MockFacadeClientMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockFacadeClient) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockFacadeClientMockRecorder) ControllerConfig() *MockFacadeClientControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockFacadeClient)(nil).ControllerConfig))
	return &MockFacadeClientControllerConfigCall{Call: call}
}

// MockFacadeClientControllerConfigCall wrap *gomock.Call
type MockFacadeClientControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeClientControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockFacadeClientControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeClientControllerConfigCall) Do(f func() (controller.Config, error)) *MockFacadeClientControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeClientControllerConfigCall) DoAndReturn(f func() (controller.Config, error)) *MockFacadeClientControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPublicKeysForModel mocks base method.
func (m *MockFacadeClient) ListPublicKeysForModel(arg0 params.ListAuthorizedKeysArgs) ([]ssh0.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeysForModel", arg0)
	ret0, _ := ret[0].([]ssh0.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeysForModel indicates an expected call of ListPublicKeysForModel.
func (mr *MockFacadeClientMockRecorder) ListPublicKeysForModel(arg0 any) *MockFacadeClientListPublicKeysForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeysForModel", reflect.TypeOf((*MockFacadeClient)(nil).ListPublicKeysForModel), arg0)
	return &MockFacadeClientListPublicKeysForModelCall{Call: call}
}

// MockFacadeClientListPublicKeysForModelCall wrap *gomock.Call
type MockFacadeClientListPublicKeysForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeClientListPublicKeysForModelCall) Return(arg0 []ssh0.PublicKey, arg1 error) *MockFacadeClientListPublicKeysForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeClientListPublicKeysForModelCall) Do(f func(params.ListAuthorizedKeysArgs) ([]ssh0.PublicKey, error)) *MockFacadeClientListPublicKeysForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeClientListPublicKeysForModelCall) DoAndReturn(f func(params.ListAuthorizedKeysArgs) ([]ssh0.PublicKey, error)) *MockFacadeClientListPublicKeysForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SSHServerHostKey mocks base method.
func (m *MockFacadeClient) SSHServerHostKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHServerHostKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHServerHostKey indicates an expected call of SSHServerHostKey.
func (mr *MockFacadeClientMockRecorder) SSHServerHostKey() *MockFacadeClientSSHServerHostKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHServerHostKey", reflect.TypeOf((*MockFacadeClient)(nil).SSHServerHostKey))
	return &MockFacadeClientSSHServerHostKeyCall{Call: call}
}

// MockFacadeClientSSHServerHostKeyCall wrap *gomock.Call
type MockFacadeClientSSHServerHostKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeClientSSHServerHostKeyCall) Return(arg0 string, arg1 error) *MockFacadeClientSSHServerHostKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeClientSSHServerHostKeyCall) Do(f func() (string, error)) *MockFacadeClientSSHServerHostKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeClientSSHServerHostKeyCall) DoAndReturn(f func() (string, error)) *MockFacadeClientSSHServerHostKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VirtualHostKey mocks base method.
func (m *MockFacadeClient) VirtualHostKey(arg0 params.SSHVirtualHostKeyRequestArg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualHostKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualHostKey indicates an expected call of VirtualHostKey.
func (mr *MockFacadeClientMockRecorder) VirtualHostKey(arg0 any) *MockFacadeClientVirtualHostKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualHostKey", reflect.TypeOf((*MockFacadeClient)(nil).VirtualHostKey), arg0)
	return &MockFacadeClientVirtualHostKeyCall{Call: call}
}

// MockFacadeClientVirtualHostKeyCall wrap *gomock.Call
type MockFacadeClientVirtualHostKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeClientVirtualHostKeyCall) Return(arg0 []byte, arg1 error) *MockFacadeClientVirtualHostKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeClientVirtualHostKeyCall) Do(f func(params.SSHVirtualHostKeyRequestArg) ([]byte, error)) *MockFacadeClientVirtualHostKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeClientVirtualHostKeyCall) DoAndReturn(f func(params.SSHVirtualHostKeyRequestArg) ([]byte, error)) *MockFacadeClientVirtualHostKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerConfig mocks base method.
func (m *MockFacadeClient) WatchControllerConfig() (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerConfig")
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerConfig indicates an expected call of WatchControllerConfig.
func (mr *MockFacadeClientMockRecorder) WatchControllerConfig() *MockFacadeClientWatchControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerConfig", reflect.TypeOf((*MockFacadeClient)(nil).WatchControllerConfig))
	return &MockFacadeClientWatchControllerConfigCall{Call: call}
}

// MockFacadeClientWatchControllerConfigCall wrap *gomock.Call
type MockFacadeClientWatchControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeClientWatchControllerConfigCall) Return(arg0 watcher.NotifyWatcher, arg1 error) *MockFacadeClientWatchControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeClientWatchControllerConfigCall) Do(f func() (watcher.NotifyWatcher, error)) *MockFacadeClientWatchControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeClientWatchControllerConfigCall) DoAndReturn(f func() (watcher.NotifyWatcher, error)) *MockFacadeClientWatchControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockJWTParser is a mock of JWTParser interface.
type MockJWTParser struct {
	ctrl     *gomock.Controller
	recorder *MockJWTParserMockRecorder
}

// MockJWTParserMockRecorder is the mock recorder for MockJWTParser.
type MockJWTParserMockRecorder struct {
	mock *MockJWTParser
}

// NewMockJWTParser creates a new mock instance.
func NewMockJWTParser(ctrl *gomock.Controller) *MockJWTParser {
	mock := &MockJWTParser{ctrl: ctrl}
	mock.recorder = &MockJWTParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTParser) EXPECT() *MockJWTParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockJWTParser) Parse(arg0 context.Context, arg1 string) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockJWTParserMockRecorder) Parse(arg0, arg1 any) *MockJWTParserParseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockJWTParser)(nil).Parse), arg0, arg1)
	return &MockJWTParserParseCall{Call: call}
}

// MockJWTParserParseCall wrap *gomock.Call
type MockJWTParserParseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJWTParserParseCall) Return(arg0 jwt.Token, arg1 error) *MockJWTParserParseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJWTParserParseCall) Do(f func(context.Context, string) (jwt.Token, error)) *MockJWTParserParseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJWTParserParseCall) DoAndReturn(f func(context.Context, string) (jwt.Token, error)) *MockJWTParserParseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProxyHandlers is a mock of ProxyHandlers interface.
type MockProxyHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockProxyHandlersMockRecorder
}

// MockProxyHandlersMockRecorder is the mock recorder for MockProxyHandlers.
type MockProxyHandlersMockRecorder struct {
	mock *MockProxyHandlers
}

// NewMockProxyHandlers creates a new mock instance.
func NewMockProxyHandlers(ctrl *gomock.Controller) *MockProxyHandlers {
	mock := &MockProxyHandlers{ctrl: ctrl}
	mock.recorder = &MockProxyHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyHandlers) EXPECT() *MockProxyHandlersMockRecorder {
	return m.recorder
}

// DirectTCPIPHandler mocks base method.
func (m *MockProxyHandlers) DirectTCPIPHandler(arg0 connectionDetails) ssh.ChannelHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectTCPIPHandler", arg0)
	ret0, _ := ret[0].(ssh.ChannelHandler)
	return ret0
}

// DirectTCPIPHandler indicates an expected call of DirectTCPIPHandler.
func (mr *MockProxyHandlersMockRecorder) DirectTCPIPHandler(arg0 any) *MockProxyHandlersDirectTCPIPHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectTCPIPHandler", reflect.TypeOf((*MockProxyHandlers)(nil).DirectTCPIPHandler), arg0)
	return &MockProxyHandlersDirectTCPIPHandlerCall{Call: call}
}

// MockProxyHandlersDirectTCPIPHandlerCall wrap *gomock.Call
type MockProxyHandlersDirectTCPIPHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyHandlersDirectTCPIPHandlerCall) Return(arg0 ssh.ChannelHandler) *MockProxyHandlersDirectTCPIPHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyHandlersDirectTCPIPHandlerCall) Do(f func(connectionDetails) ssh.ChannelHandler) *MockProxyHandlersDirectTCPIPHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyHandlersDirectTCPIPHandlerCall) DoAndReturn(f func(connectionDetails) ssh.ChannelHandler) *MockProxyHandlersDirectTCPIPHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SessionHandler mocks base method.
func (m *MockProxyHandlers) SessionHandler(arg0 ssh.Session, arg1 connectionDetails) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SessionHandler", arg0, arg1)
}

// SessionHandler indicates an expected call of SessionHandler.
func (mr *MockProxyHandlersMockRecorder) SessionHandler(arg0, arg1 any) *MockProxyHandlersSessionHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionHandler", reflect.TypeOf((*MockProxyHandlers)(nil).SessionHandler), arg0, arg1)
	return &MockProxyHandlersSessionHandlerCall{Call: call}
}

// MockProxyHandlersSessionHandlerCall wrap *gomock.Call
type MockProxyHandlersSessionHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyHandlersSessionHandlerCall) Return() *MockProxyHandlersSessionHandlerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyHandlersSessionHandlerCall) Do(f func(ssh.Session, connectionDetails)) *MockProxyHandlersSessionHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyHandlersSessionHandlerCall) DoAndReturn(f func(ssh.Session, connectionDetails)) *MockProxyHandlersSessionHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSSHConnector is a mock of SSHConnector interface.
type MockSSHConnector struct {
	ctrl     *gomock.Controller
	recorder *MockSSHConnectorMockRecorder
}

// MockSSHConnectorMockRecorder is the mock recorder for MockSSHConnector.
type MockSSHConnectorMockRecorder struct {
	mock *MockSSHConnector
}

// NewMockSSHConnector creates a new mock instance.
func NewMockSSHConnector(ctrl *gomock.Controller) *MockSSHConnector {
	mock := &MockSSHConnector{ctrl: ctrl}
	mock.recorder = &MockSSHConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHConnector) EXPECT() *MockSSHConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockSSHConnector) Connect(arg0 virtualhostname.Info) (*ssh0.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(*ssh0.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockSSHConnectorMockRecorder) Connect(arg0 any) *MockSSHConnectorConnectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSSHConnector)(nil).Connect), arg0)
	return &MockSSHConnectorConnectCall{Call: call}
}

// MockSSHConnectorConnectCall wrap *gomock.Call
type MockSSHConnectorConnectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHConnectorConnectCall) Return(arg0 *ssh0.Client, arg1 error) *MockSSHConnectorConnectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHConnectorConnectCall) Do(f func(virtualhostname.Info) (*ssh0.Client, error)) *MockSSHConnectorConnectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHConnectorConnectCall) DoAndReturn(f func(virtualhostname.Info) (*ssh0.Client, error)) *MockSSHConnectorConnectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTunnelAuthenticator is a mock of TunnelAuthenticator interface.
type MockTunnelAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelAuthenticatorMockRecorder
}

// MockTunnelAuthenticatorMockRecorder is the mock recorder for MockTunnelAuthenticator.
type MockTunnelAuthenticatorMockRecorder struct {
	mock *MockTunnelAuthenticator
}

// NewMockTunnelAuthenticator creates a new mock instance.
func NewMockTunnelAuthenticator(ctrl *gomock.Controller) *MockTunnelAuthenticator {
	mock := &MockTunnelAuthenticator{ctrl: ctrl}
	mock.recorder = &MockTunnelAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelAuthenticator) EXPECT() *MockTunnelAuthenticatorMockRecorder {
	return m.recorder
}

// AuthenticateTunnel mocks base method.
func (m *MockTunnelAuthenticator) AuthenticateTunnel(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateTunnel", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateTunnel indicates an expected call of AuthenticateTunnel.
func (mr *MockTunnelAuthenticatorMockRecorder) AuthenticateTunnel(arg0, arg1 any) *MockTunnelAuthenticatorAuthenticateTunnelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateTunnel", reflect.TypeOf((*MockTunnelAuthenticator)(nil).AuthenticateTunnel), arg0, arg1)
	return &MockTunnelAuthenticatorAuthenticateTunnelCall{Call: call}
}

// MockTunnelAuthenticatorAuthenticateTunnelCall wrap *gomock.Call
type MockTunnelAuthenticatorAuthenticateTunnelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTunnelAuthenticatorAuthenticateTunnelCall) Return(arg0 string, arg1 error) *MockTunnelAuthenticatorAuthenticateTunnelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTunnelAuthenticatorAuthenticateTunnelCall) Do(f func(string, string) (string, error)) *MockTunnelAuthenticatorAuthenticateTunnelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTunnelAuthenticatorAuthenticateTunnelCall) DoAndReturn(f func(string, string) (string, error)) *MockTunnelAuthenticatorAuthenticateTunnelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
