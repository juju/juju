// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshserver (interfaces: SSHConnector)
//
// Generated by this command:
//
//	mockgen -typed -package sshserver -destination session_mock_test.go github.com/juju/juju/internal/worker/sshserver SSHConnector
//

// Package sshserver is a generated GoMock package.
package sshserver

import (
	reflect "reflect"

	virtualhostname "github.com/juju/juju/core/virtualhostname"
	gomock "go.uber.org/mock/gomock"
	ssh "golang.org/x/crypto/ssh"
)

// MockSSHConnector is a mock of SSHConnector interface.
type MockSSHConnector struct {
	ctrl     *gomock.Controller
	recorder *MockSSHConnectorMockRecorder
}

// MockSSHConnectorMockRecorder is the mock recorder for MockSSHConnector.
type MockSSHConnectorMockRecorder struct {
	mock *MockSSHConnector
}

// NewMockSSHConnector creates a new mock instance.
func NewMockSSHConnector(ctrl *gomock.Controller) *MockSSHConnector {
	mock := &MockSSHConnector{ctrl: ctrl}
	mock.recorder = &MockSSHConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHConnector) EXPECT() *MockSSHConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockSSHConnector) Connect(arg0 virtualhostname.Info) (*ssh.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(*ssh.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockSSHConnectorMockRecorder) Connect(arg0 any) *MockSSHConnectorConnectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSSHConnector)(nil).Connect), arg0)
	return &MockSSHConnectorConnectCall{Call: call}
}

// MockSSHConnectorConnectCall wrap *gomock.Call
type MockSSHConnectorConnectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHConnectorConnectCall) Return(arg0 *ssh.Client, arg1 error) *MockSSHConnectorConnectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHConnectorConnectCall) Do(f func(virtualhostname.Info) (*ssh.Client, error)) *MockSSHConnectorConnectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHConnectorConnectCall) DoAndReturn(f func(virtualhostname.Info) (*ssh.Client, error)) *MockSSHConnectorConnectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
