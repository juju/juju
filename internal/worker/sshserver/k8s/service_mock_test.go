// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshserver/k8s (interfaces: Resolver)
//
// Generated by this command:
//
//	mockgen -typed -package k8s -destination service_mock_test.go github.com/juju/juju/internal/worker/sshserver/k8s Resolver
//

// Package k8s is a generated GoMock package.
package k8s

import (
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// ResolveK8sExecInfo mocks base method.
func (m *MockResolver) ResolveK8sExecInfo(arg0 params.SSHK8sExecArg) (params.SSHK8sExecResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveK8sExecInfo", arg0)
	ret0, _ := ret[0].(params.SSHK8sExecResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveK8sExecInfo indicates an expected call of ResolveK8sExecInfo.
func (mr *MockResolverMockRecorder) ResolveK8sExecInfo(arg0 any) *MockResolverResolveK8sExecInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveK8sExecInfo", reflect.TypeOf((*MockResolver)(nil).ResolveK8sExecInfo), arg0)
	return &MockResolverResolveK8sExecInfoCall{Call: call}
}

// MockResolverResolveK8sExecInfoCall wrap *gomock.Call
type MockResolverResolveK8sExecInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolverResolveK8sExecInfoCall) Return(arg0 params.SSHK8sExecResult, arg1 error) *MockResolverResolveK8sExecInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolverResolveK8sExecInfoCall) Do(f func(params.SSHK8sExecArg) (params.SSHK8sExecResult, error)) *MockResolverResolveK8sExecInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolverResolveK8sExecInfoCall) DoAndReturn(f func(params.SSHK8sExecArg) (params.SSHK8sExecResult, error)) *MockResolverResolveK8sExecInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
