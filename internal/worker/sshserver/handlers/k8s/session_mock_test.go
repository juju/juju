// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gliderlabs/ssh (interfaces: Session,Context)
//
// Generated by this command:
//
//	mockgen -typed -package k8s -destination session_mock_test.go github.com/gliderlabs/ssh Session,Context
//

// Package k8s is a generated GoMock package.
package k8s

import (
	io "io"
	net "net"
	reflect "reflect"
	time "time"

	ssh "github.com/gliderlabs/ssh"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Break mocks base method.
func (m *MockSession) Break(arg0 chan<- bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Break", arg0)
}

// Break indicates an expected call of Break.
func (mr *MockSessionMockRecorder) Break(arg0 any) *MockSessionBreakCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Break", reflect.TypeOf((*MockSession)(nil).Break), arg0)
	return &MockSessionBreakCall{Call: call}
}

// MockSessionBreakCall wrap *gomock.Call
type MockSessionBreakCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionBreakCall) Return() *MockSessionBreakCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionBreakCall) Do(f func(chan<- bool)) *MockSessionBreakCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionBreakCall) DoAndReturn(f func(chan<- bool)) *MockSessionBreakCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *MockSessionCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
	return &MockSessionCloseCall{Call: call}
}

// MockSessionCloseCall wrap *gomock.Call
type MockSessionCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionCloseCall) Return(arg0 error) *MockSessionCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionCloseCall) Do(f func() error) *MockSessionCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionCloseCall) DoAndReturn(f func() error) *MockSessionCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloseWrite mocks base method.
func (m *MockSession) CloseWrite() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWrite")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWrite indicates an expected call of CloseWrite.
func (mr *MockSessionMockRecorder) CloseWrite() *MockSessionCloseWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWrite", reflect.TypeOf((*MockSession)(nil).CloseWrite))
	return &MockSessionCloseWriteCall{Call: call}
}

// MockSessionCloseWriteCall wrap *gomock.Call
type MockSessionCloseWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionCloseWriteCall) Return(arg0 error) *MockSessionCloseWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionCloseWriteCall) Do(f func() error) *MockSessionCloseWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionCloseWriteCall) DoAndReturn(f func() error) *MockSessionCloseWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Command mocks base method.
func (m *MockSession) Command() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockSessionMockRecorder) Command() *MockSessionCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockSession)(nil).Command))
	return &MockSessionCommandCall{Call: call}
}

// MockSessionCommandCall wrap *gomock.Call
type MockSessionCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionCommandCall) Return(arg0 []string) *MockSessionCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionCommandCall) Do(f func() []string) *MockSessionCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionCommandCall) DoAndReturn(f func() []string) *MockSessionCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Context mocks base method.
func (m *MockSession) Context() ssh.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(ssh.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSessionMockRecorder) Context() *MockSessionContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSession)(nil).Context))
	return &MockSessionContextCall{Call: call}
}

// MockSessionContextCall wrap *gomock.Call
type MockSessionContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionContextCall) Return(arg0 ssh.Context) *MockSessionContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionContextCall) Do(f func() ssh.Context) *MockSessionContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionContextCall) DoAndReturn(f func() ssh.Context) *MockSessionContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Environ mocks base method.
func (m *MockSession) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockSessionMockRecorder) Environ() *MockSessionEnvironCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockSession)(nil).Environ))
	return &MockSessionEnvironCall{Call: call}
}

// MockSessionEnvironCall wrap *gomock.Call
type MockSessionEnvironCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionEnvironCall) Return(arg0 []string) *MockSessionEnvironCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionEnvironCall) Do(f func() []string) *MockSessionEnvironCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionEnvironCall) DoAndReturn(f func() []string) *MockSessionEnvironCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exit mocks base method.
func (m *MockSession) Exit(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exit indicates an expected call of Exit.
func (mr *MockSessionMockRecorder) Exit(arg0 any) *MockSessionExitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockSession)(nil).Exit), arg0)
	return &MockSessionExitCall{Call: call}
}

// MockSessionExitCall wrap *gomock.Call
type MockSessionExitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionExitCall) Return(arg0 error) *MockSessionExitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionExitCall) Do(f func(int) error) *MockSessionExitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionExitCall) DoAndReturn(f func(int) error) *MockSessionExitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocalAddr mocks base method.
func (m *MockSession) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockSessionMockRecorder) LocalAddr() *MockSessionLocalAddrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockSession)(nil).LocalAddr))
	return &MockSessionLocalAddrCall{Call: call}
}

// MockSessionLocalAddrCall wrap *gomock.Call
type MockSessionLocalAddrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionLocalAddrCall) Return(arg0 net.Addr) *MockSessionLocalAddrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionLocalAddrCall) Do(f func() net.Addr) *MockSessionLocalAddrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionLocalAddrCall) DoAndReturn(f func() net.Addr) *MockSessionLocalAddrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Permissions mocks base method.
func (m *MockSession) Permissions() ssh.Permissions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Permissions")
	ret0, _ := ret[0].(ssh.Permissions)
	return ret0
}

// Permissions indicates an expected call of Permissions.
func (mr *MockSessionMockRecorder) Permissions() *MockSessionPermissionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockSession)(nil).Permissions))
	return &MockSessionPermissionsCall{Call: call}
}

// MockSessionPermissionsCall wrap *gomock.Call
type MockSessionPermissionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionPermissionsCall) Return(arg0 ssh.Permissions) *MockSessionPermissionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionPermissionsCall) Do(f func() ssh.Permissions) *MockSessionPermissionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionPermissionsCall) DoAndReturn(f func() ssh.Permissions) *MockSessionPermissionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pty mocks base method.
func (m *MockSession) Pty() (ssh.Pty, <-chan ssh.Window, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pty")
	ret0, _ := ret[0].(ssh.Pty)
	ret1, _ := ret[1].(<-chan ssh.Window)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Pty indicates an expected call of Pty.
func (mr *MockSessionMockRecorder) Pty() *MockSessionPtyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pty", reflect.TypeOf((*MockSession)(nil).Pty))
	return &MockSessionPtyCall{Call: call}
}

// MockSessionPtyCall wrap *gomock.Call
type MockSessionPtyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionPtyCall) Return(arg0 ssh.Pty, arg1 <-chan ssh.Window, arg2 bool) *MockSessionPtyCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionPtyCall) Do(f func() (ssh.Pty, <-chan ssh.Window, bool)) *MockSessionPtyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionPtyCall) DoAndReturn(f func() (ssh.Pty, <-chan ssh.Window, bool)) *MockSessionPtyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicKey mocks base method.
func (m *MockSession) PublicKey() ssh.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(ssh.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockSessionMockRecorder) PublicKey() *MockSessionPublicKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockSession)(nil).PublicKey))
	return &MockSessionPublicKeyCall{Call: call}
}

// MockSessionPublicKeyCall wrap *gomock.Call
type MockSessionPublicKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionPublicKeyCall) Return(arg0 ssh.PublicKey) *MockSessionPublicKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionPublicKeyCall) Do(f func() ssh.PublicKey) *MockSessionPublicKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionPublicKeyCall) DoAndReturn(f func() ssh.PublicKey) *MockSessionPublicKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RawCommand mocks base method.
func (m *MockSession) RawCommand() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawCommand")
	ret0, _ := ret[0].(string)
	return ret0
}

// RawCommand indicates an expected call of RawCommand.
func (mr *MockSessionMockRecorder) RawCommand() *MockSessionRawCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawCommand", reflect.TypeOf((*MockSession)(nil).RawCommand))
	return &MockSessionRawCommandCall{Call: call}
}

// MockSessionRawCommandCall wrap *gomock.Call
type MockSessionRawCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionRawCommandCall) Return(arg0 string) *MockSessionRawCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionRawCommandCall) Do(f func() string) *MockSessionRawCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionRawCommandCall) DoAndReturn(f func() string) *MockSessionRawCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockSession) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSessionMockRecorder) Read(arg0 any) *MockSessionReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSession)(nil).Read), arg0)
	return &MockSessionReadCall{Call: call}
}

// MockSessionReadCall wrap *gomock.Call
type MockSessionReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionReadCall) Return(arg0 int, arg1 error) *MockSessionReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionReadCall) Do(f func([]byte) (int, error)) *MockSessionReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionReadCall) DoAndReturn(f func([]byte) (int, error)) *MockSessionReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteAddr mocks base method.
func (m *MockSession) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockSessionMockRecorder) RemoteAddr() *MockSessionRemoteAddrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockSession)(nil).RemoteAddr))
	return &MockSessionRemoteAddrCall{Call: call}
}

// MockSessionRemoteAddrCall wrap *gomock.Call
type MockSessionRemoteAddrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionRemoteAddrCall) Return(arg0 net.Addr) *MockSessionRemoteAddrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionRemoteAddrCall) Do(f func() net.Addr) *MockSessionRemoteAddrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionRemoteAddrCall) DoAndReturn(f func() net.Addr) *MockSessionRemoteAddrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendRequest mocks base method.
func (m *MockSession) SendRequest(arg0 string, arg1 bool, arg2 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockSessionMockRecorder) SendRequest(arg0, arg1, arg2 any) *MockSessionSendRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockSession)(nil).SendRequest), arg0, arg1, arg2)
	return &MockSessionSendRequestCall{Call: call}
}

// MockSessionSendRequestCall wrap *gomock.Call
type MockSessionSendRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionSendRequestCall) Return(arg0 bool, arg1 error) *MockSessionSendRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionSendRequestCall) Do(f func(string, bool, []byte) (bool, error)) *MockSessionSendRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionSendRequestCall) DoAndReturn(f func(string, bool, []byte) (bool, error)) *MockSessionSendRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Signals mocks base method.
func (m *MockSession) Signals(arg0 chan<- ssh.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signals", arg0)
}

// Signals indicates an expected call of Signals.
func (mr *MockSessionMockRecorder) Signals(arg0 any) *MockSessionSignalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signals", reflect.TypeOf((*MockSession)(nil).Signals), arg0)
	return &MockSessionSignalsCall{Call: call}
}

// MockSessionSignalsCall wrap *gomock.Call
type MockSessionSignalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionSignalsCall) Return() *MockSessionSignalsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionSignalsCall) Do(f func(chan<- ssh.Signal)) *MockSessionSignalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionSignalsCall) DoAndReturn(f func(chan<- ssh.Signal)) *MockSessionSignalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stderr mocks base method.
func (m *MockSession) Stderr() io.ReadWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.ReadWriter)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockSessionMockRecorder) Stderr() *MockSessionStderrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockSession)(nil).Stderr))
	return &MockSessionStderrCall{Call: call}
}

// MockSessionStderrCall wrap *gomock.Call
type MockSessionStderrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionStderrCall) Return(arg0 io.ReadWriter) *MockSessionStderrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionStderrCall) Do(f func() io.ReadWriter) *MockSessionStderrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionStderrCall) DoAndReturn(f func() io.ReadWriter) *MockSessionStderrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subsystem mocks base method.
func (m *MockSession) Subsystem() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subsystem")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subsystem indicates an expected call of Subsystem.
func (mr *MockSessionMockRecorder) Subsystem() *MockSessionSubsystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subsystem", reflect.TypeOf((*MockSession)(nil).Subsystem))
	return &MockSessionSubsystemCall{Call: call}
}

// MockSessionSubsystemCall wrap *gomock.Call
type MockSessionSubsystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionSubsystemCall) Return(arg0 string) *MockSessionSubsystemCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionSubsystemCall) Do(f func() string) *MockSessionSubsystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionSubsystemCall) DoAndReturn(f func() string) *MockSessionSubsystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// User mocks base method.
func (m *MockSession) User() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(string)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockSessionMockRecorder) User() *MockSessionUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockSession)(nil).User))
	return &MockSessionUserCall{Call: call}
}

// MockSessionUserCall wrap *gomock.Call
type MockSessionUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionUserCall) Return(arg0 string) *MockSessionUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionUserCall) Do(f func() string) *MockSessionUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionUserCall) DoAndReturn(f func() string) *MockSessionUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockSession) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSessionMockRecorder) Write(arg0 any) *MockSessionWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSession)(nil).Write), arg0)
	return &MockSessionWriteCall{Call: call}
}

// MockSessionWriteCall wrap *gomock.Call
type MockSessionWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionWriteCall) Return(arg0 int, arg1 error) *MockSessionWriteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionWriteCall) Do(f func([]byte) (int, error)) *MockSessionWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockSessionWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// ClientVersion mocks base method.
func (m *MockContext) ClientVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientVersion indicates an expected call of ClientVersion.
func (mr *MockContextMockRecorder) ClientVersion() *MockContextClientVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientVersion", reflect.TypeOf((*MockContext)(nil).ClientVersion))
	return &MockContextClientVersionCall{Call: call}
}

// MockContextClientVersionCall wrap *gomock.Call
type MockContextClientVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextClientVersionCall) Return(arg0 string) *MockContextClientVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextClientVersionCall) Do(f func() string) *MockContextClientVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextClientVersionCall) DoAndReturn(f func() string) *MockContextClientVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Deadline mocks base method.
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextMockRecorder) Deadline() *MockContextDeadlineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
	return &MockContextDeadlineCall{Call: call}
}

// MockContextDeadlineCall wrap *gomock.Call
type MockContextDeadlineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDeadlineCall) Return(arg0 time.Time, arg1 bool) *MockContextDeadlineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDeadlineCall) Do(f func() (time.Time, bool)) *MockContextDeadlineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDeadlineCall) DoAndReturn(f func() (time.Time, bool)) *MockContextDeadlineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextMockRecorder) Done() *MockContextDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
	return &MockContextDoneCall{Call: call}
}

// MockContextDoneCall wrap *gomock.Call
type MockContextDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDoneCall) Return(arg0 <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDoneCall) Do(f func() <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDoneCall) DoAndReturn(f func() <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Err mocks base method.
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err() *MockContextErrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
	return &MockContextErrCall{Call: call}
}

// MockContextErrCall wrap *gomock.Call
type MockContextErrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextErrCall) Return(arg0 error) *MockContextErrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextErrCall) Do(f func() error) *MockContextErrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextErrCall) DoAndReturn(f func() error) *MockContextErrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocalAddr mocks base method.
func (m *MockContext) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockContextMockRecorder) LocalAddr() *MockContextLocalAddrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockContext)(nil).LocalAddr))
	return &MockContextLocalAddrCall{Call: call}
}

// MockContextLocalAddrCall wrap *gomock.Call
type MockContextLocalAddrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextLocalAddrCall) Return(arg0 net.Addr) *MockContextLocalAddrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextLocalAddrCall) Do(f func() net.Addr) *MockContextLocalAddrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextLocalAddrCall) DoAndReturn(f func() net.Addr) *MockContextLocalAddrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Lock mocks base method.
func (m *MockContext) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockContextMockRecorder) Lock() *MockContextLockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockContext)(nil).Lock))
	return &MockContextLockCall{Call: call}
}

// MockContextLockCall wrap *gomock.Call
type MockContextLockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextLockCall) Return() *MockContextLockCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextLockCall) Do(f func()) *MockContextLockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextLockCall) DoAndReturn(f func()) *MockContextLockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Permissions mocks base method.
func (m *MockContext) Permissions() *ssh.Permissions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Permissions")
	ret0, _ := ret[0].(*ssh.Permissions)
	return ret0
}

// Permissions indicates an expected call of Permissions.
func (mr *MockContextMockRecorder) Permissions() *MockContextPermissionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockContext)(nil).Permissions))
	return &MockContextPermissionsCall{Call: call}
}

// MockContextPermissionsCall wrap *gomock.Call
type MockContextPermissionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextPermissionsCall) Return(arg0 *ssh.Permissions) *MockContextPermissionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextPermissionsCall) Do(f func() *ssh.Permissions) *MockContextPermissionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextPermissionsCall) DoAndReturn(f func() *ssh.Permissions) *MockContextPermissionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteAddr mocks base method.
func (m *MockContext) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockContextMockRecorder) RemoteAddr() *MockContextRemoteAddrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockContext)(nil).RemoteAddr))
	return &MockContextRemoteAddrCall{Call: call}
}

// MockContextRemoteAddrCall wrap *gomock.Call
type MockContextRemoteAddrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRemoteAddrCall) Return(arg0 net.Addr) *MockContextRemoteAddrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRemoteAddrCall) Do(f func() net.Addr) *MockContextRemoteAddrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRemoteAddrCall) DoAndReturn(f func() net.Addr) *MockContextRemoteAddrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerVersion mocks base method.
func (m *MockContext) ServerVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockContextMockRecorder) ServerVersion() *MockContextServerVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockContext)(nil).ServerVersion))
	return &MockContextServerVersionCall{Call: call}
}

// MockContextServerVersionCall wrap *gomock.Call
type MockContextServerVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextServerVersionCall) Return(arg0 string) *MockContextServerVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextServerVersionCall) Do(f func() string) *MockContextServerVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextServerVersionCall) DoAndReturn(f func() string) *MockContextServerVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SessionID mocks base method.
func (m *MockContext) SessionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SessionID indicates an expected call of SessionID.
func (mr *MockContextMockRecorder) SessionID() *MockContextSessionIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionID", reflect.TypeOf((*MockContext)(nil).SessionID))
	return &MockContextSessionIDCall{Call: call}
}

// MockContextSessionIDCall wrap *gomock.Call
type MockContextSessionIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSessionIDCall) Return(arg0 string) *MockContextSessionIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSessionIDCall) Do(f func() string) *MockContextSessionIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSessionIDCall) DoAndReturn(f func() string) *MockContextSessionIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValue mocks base method.
func (m *MockContext) SetValue(arg0, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", arg0, arg1)
}

// SetValue indicates an expected call of SetValue.
func (mr *MockContextMockRecorder) SetValue(arg0, arg1 any) *MockContextSetValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockContext)(nil).SetValue), arg0, arg1)
	return &MockContextSetValueCall{Call: call}
}

// MockContextSetValueCall wrap *gomock.Call
type MockContextSetValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSetValueCall) Return() *MockContextSetValueCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSetValueCall) Do(f func(any, any)) *MockContextSetValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSetValueCall) DoAndReturn(f func(any, any)) *MockContextSetValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unlock mocks base method.
func (m *MockContext) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockContextMockRecorder) Unlock() *MockContextUnlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockContext)(nil).Unlock))
	return &MockContextUnlockCall{Call: call}
}

// MockContextUnlockCall wrap *gomock.Call
type MockContextUnlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextUnlockCall) Return() *MockContextUnlockCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextUnlockCall) Do(f func()) *MockContextUnlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextUnlockCall) DoAndReturn(f func()) *MockContextUnlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// User mocks base method.
func (m *MockContext) User() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(string)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockContextMockRecorder) User() *MockContextUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockContext)(nil).User))
	return &MockContextUserCall{Call: call}
}

// MockContextUserCall wrap *gomock.Call
type MockContextUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextUserCall) Return(arg0 string) *MockContextUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextUserCall) Do(f func() string) *MockContextUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextUserCall) DoAndReturn(f func() string) *MockContextUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockContext) Value(arg0 any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextMockRecorder) Value(arg0 any) *MockContextValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), arg0)
	return &MockContextValueCall{Call: call}
}

// MockContextValueCall wrap *gomock.Call
type MockContextValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextValueCall) Return(arg0 any) *MockContextValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextValueCall) Do(f func(any) any) *MockContextValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextValueCall) DoAndReturn(f func(any) any) *MockContextValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
