// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/changestream (interfaces: DBGetter,WatchableDBWorker,FileNotifyWatcher)
//
// Generated by this command:
//
//	mockgen -typed -package changestream -destination stream_mock_test.go github.com/juju/juju/internal/worker/changestream DBGetter,WatchableDBWorker,FileNotifyWatcher
//

// Package changestream is a generated GoMock package.
package changestream

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sqlair "github.com/canonical/sqlair"
	changestream "github.com/juju/juju/core/changestream"
	database "github.com/juju/juju/core/database"
	gomock "go.uber.org/mock/gomock"
)

// MockDBGetter is a mock of DBGetter interface.
type MockDBGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDBGetterMockRecorder
}

// MockDBGetterMockRecorder is the mock recorder for MockDBGetter.
type MockDBGetterMockRecorder struct {
	mock *MockDBGetter
}

// NewMockDBGetter creates a new mock instance.
func NewMockDBGetter(ctrl *gomock.Controller) *MockDBGetter {
	mock := &MockDBGetter{ctrl: ctrl}
	mock.recorder = &MockDBGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBGetter) EXPECT() *MockDBGetterMockRecorder {
	return m.recorder
}

// GetDB mocks base method.
func (m *MockDBGetter) GetDB(arg0 context.Context, arg1 string) (database.TxnRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", arg0, arg1)
	ret0, _ := ret[0].(database.TxnRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDBGetterMockRecorder) GetDB(arg0, arg1 any) *MockDBGetterGetDBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDBGetter)(nil).GetDB), arg0, arg1)
	return &MockDBGetterGetDBCall{Call: call}
}

// MockDBGetterGetDBCall wrap *gomock.Call
type MockDBGetterGetDBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBGetterGetDBCall) Return(arg0 database.TxnRunner, arg1 error) *MockDBGetterGetDBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBGetterGetDBCall) Do(f func(context.Context, string) (database.TxnRunner, error)) *MockDBGetterGetDBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBGetterGetDBCall) DoAndReturn(f func(context.Context, string) (database.TxnRunner, error)) *MockDBGetterGetDBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatchableDBWorker is a mock of WatchableDBWorker interface.
type MockWatchableDBWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWatchableDBWorkerMockRecorder
}

// MockWatchableDBWorkerMockRecorder is the mock recorder for MockWatchableDBWorker.
type MockWatchableDBWorkerMockRecorder struct {
	mock *MockWatchableDBWorker
}

// NewMockWatchableDBWorker creates a new mock instance.
func NewMockWatchableDBWorker(ctrl *gomock.Controller) *MockWatchableDBWorker {
	mock := &MockWatchableDBWorker{ctrl: ctrl}
	mock.recorder = &MockWatchableDBWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchableDBWorker) EXPECT() *MockWatchableDBWorkerMockRecorder {
	return m.recorder
}

// Dying mocks base method.
func (m *MockWatchableDBWorker) Dying() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dying")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Dying indicates an expected call of Dying.
func (mr *MockWatchableDBWorkerMockRecorder) Dying() *MockWatchableDBWorkerDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dying", reflect.TypeOf((*MockWatchableDBWorker)(nil).Dying))
	return &MockWatchableDBWorkerDyingCall{Call: call}
}

// MockWatchableDBWorkerDyingCall wrap *gomock.Call
type MockWatchableDBWorkerDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableDBWorkerDyingCall) Return(arg0 <-chan struct{}) *MockWatchableDBWorkerDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableDBWorkerDyingCall) Do(f func() <-chan struct{}) *MockWatchableDBWorkerDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableDBWorkerDyingCall) DoAndReturn(f func() <-chan struct{}) *MockWatchableDBWorkerDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockWatchableDBWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockWatchableDBWorkerMockRecorder) Kill() *MockWatchableDBWorkerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockWatchableDBWorker)(nil).Kill))
	return &MockWatchableDBWorkerKillCall{Call: call}
}

// MockWatchableDBWorkerKillCall wrap *gomock.Call
type MockWatchableDBWorkerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableDBWorkerKillCall) Return() *MockWatchableDBWorkerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableDBWorkerKillCall) Do(f func()) *MockWatchableDBWorkerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableDBWorkerKillCall) DoAndReturn(f func()) *MockWatchableDBWorkerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StdTxn mocks base method.
func (m *MockWatchableDBWorker) StdTxn(arg0 context.Context, arg1 func(context.Context, *sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdTxn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StdTxn indicates an expected call of StdTxn.
func (mr *MockWatchableDBWorkerMockRecorder) StdTxn(arg0, arg1 any) *MockWatchableDBWorkerStdTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdTxn", reflect.TypeOf((*MockWatchableDBWorker)(nil).StdTxn), arg0, arg1)
	return &MockWatchableDBWorkerStdTxnCall{Call: call}
}

// MockWatchableDBWorkerStdTxnCall wrap *gomock.Call
type MockWatchableDBWorkerStdTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableDBWorkerStdTxnCall) Return(arg0 error) *MockWatchableDBWorkerStdTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableDBWorkerStdTxnCall) Do(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockWatchableDBWorkerStdTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableDBWorkerStdTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockWatchableDBWorkerStdTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subscribe mocks base method.
func (m *MockWatchableDBWorker) Subscribe(arg0 ...changestream.SubscriptionOption) (changestream.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(changestream.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWatchableDBWorkerMockRecorder) Subscribe(arg0 ...any) *MockWatchableDBWorkerSubscribeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWatchableDBWorker)(nil).Subscribe), arg0...)
	return &MockWatchableDBWorkerSubscribeCall{Call: call}
}

// MockWatchableDBWorkerSubscribeCall wrap *gomock.Call
type MockWatchableDBWorkerSubscribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableDBWorkerSubscribeCall) Return(arg0 changestream.Subscription, arg1 error) *MockWatchableDBWorkerSubscribeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableDBWorkerSubscribeCall) Do(f func(...changestream.SubscriptionOption) (changestream.Subscription, error)) *MockWatchableDBWorkerSubscribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableDBWorkerSubscribeCall) DoAndReturn(f func(...changestream.SubscriptionOption) (changestream.Subscription, error)) *MockWatchableDBWorkerSubscribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Txn mocks base method.
func (m *MockWatchableDBWorker) Txn(arg0 context.Context, arg1 func(context.Context, *sqlair.TX) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockWatchableDBWorkerMockRecorder) Txn(arg0, arg1 any) *MockWatchableDBWorkerTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockWatchableDBWorker)(nil).Txn), arg0, arg1)
	return &MockWatchableDBWorkerTxnCall{Call: call}
}

// MockWatchableDBWorkerTxnCall wrap *gomock.Call
type MockWatchableDBWorkerTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableDBWorkerTxnCall) Return(arg0 error) *MockWatchableDBWorkerTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableDBWorkerTxnCall) Do(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockWatchableDBWorkerTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableDBWorkerTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockWatchableDBWorkerTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockWatchableDBWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockWatchableDBWorkerMockRecorder) Wait() *MockWatchableDBWorkerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockWatchableDBWorker)(nil).Wait))
	return &MockWatchableDBWorkerWaitCall{Call: call}
}

// MockWatchableDBWorkerWaitCall wrap *gomock.Call
type MockWatchableDBWorkerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableDBWorkerWaitCall) Return(arg0 error) *MockWatchableDBWorkerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableDBWorkerWaitCall) Do(f func() error) *MockWatchableDBWorkerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableDBWorkerWaitCall) DoAndReturn(f func() error) *MockWatchableDBWorkerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFileNotifyWatcher is a mock of FileNotifyWatcher interface.
type MockFileNotifyWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFileNotifyWatcherMockRecorder
}

// MockFileNotifyWatcherMockRecorder is the mock recorder for MockFileNotifyWatcher.
type MockFileNotifyWatcherMockRecorder struct {
	mock *MockFileNotifyWatcher
}

// NewMockFileNotifyWatcher creates a new mock instance.
func NewMockFileNotifyWatcher(ctrl *gomock.Controller) *MockFileNotifyWatcher {
	mock := &MockFileNotifyWatcher{ctrl: ctrl}
	mock.recorder = &MockFileNotifyWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileNotifyWatcher) EXPECT() *MockFileNotifyWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockFileNotifyWatcher) Changes(arg0 string) (<-chan bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes", arg0)
	ret0, _ := ret[0].(<-chan bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Changes indicates an expected call of Changes.
func (mr *MockFileNotifyWatcherMockRecorder) Changes(arg0 any) *MockFileNotifyWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockFileNotifyWatcher)(nil).Changes), arg0)
	return &MockFileNotifyWatcherChangesCall{Call: call}
}

// MockFileNotifyWatcherChangesCall wrap *gomock.Call
type MockFileNotifyWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileNotifyWatcherChangesCall) Return(arg0 <-chan bool, arg1 error) *MockFileNotifyWatcherChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileNotifyWatcherChangesCall) Do(f func(string) (<-chan bool, error)) *MockFileNotifyWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileNotifyWatcherChangesCall) DoAndReturn(f func(string) (<-chan bool, error)) *MockFileNotifyWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
