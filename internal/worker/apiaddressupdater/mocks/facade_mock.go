// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/apiaddressupdater (interfaces: APIAddresser)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/facade_mock.go github.com/juju/juju/internal/worker/apiaddressupdater APIAddresser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIAddresser is a mock of APIAddresser interface.
type MockAPIAddresser struct {
	ctrl     *gomock.Controller
	recorder *MockAPIAddresserMockRecorder
}

// MockAPIAddresserMockRecorder is the mock recorder for MockAPIAddresser.
type MockAPIAddresserMockRecorder struct {
	mock *MockAPIAddresser
}

// NewMockAPIAddresser creates a new mock instance.
func NewMockAPIAddresser(ctrl *gomock.Controller) *MockAPIAddresser {
	mock := &MockAPIAddresser{ctrl: ctrl}
	mock.recorder = &MockAPIAddresserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIAddresser) EXPECT() *MockAPIAddresserMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAPIAddresser) ISGOMOCK() struct{} {
	return struct{}{}
}

// APIHostPorts mocks base method.
func (m *MockAPIAddresser) APIHostPorts(arg0 context.Context) ([]network.ProviderHostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIHostPorts", arg0)
	ret0, _ := ret[0].([]network.ProviderHostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIHostPorts indicates an expected call of APIHostPorts.
func (mr *MockAPIAddresserMockRecorder) APIHostPorts(arg0 any) *MockAPIAddresserAPIHostPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIHostPorts", reflect.TypeOf((*MockAPIAddresser)(nil).APIHostPorts), arg0)
	return &MockAPIAddresserAPIHostPortsCall{Call: call}
}

// MockAPIAddresserAPIHostPortsCall wrap *gomock.Call
type MockAPIAddresserAPIHostPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddresserAPIHostPortsCall) Return(arg0 []network.ProviderHostPorts, arg1 error) *MockAPIAddresserAPIHostPortsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddresserAPIHostPortsCall) Do(f func(context.Context) ([]network.ProviderHostPorts, error)) *MockAPIAddresserAPIHostPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddresserAPIHostPortsCall) DoAndReturn(f func(context.Context) ([]network.ProviderHostPorts, error)) *MockAPIAddresserAPIHostPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchAPIHostPorts mocks base method.
func (m *MockAPIAddresser) WatchAPIHostPorts(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAPIHostPorts", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAPIHostPorts indicates an expected call of WatchAPIHostPorts.
func (mr *MockAPIAddresserMockRecorder) WatchAPIHostPorts(arg0 any) *MockAPIAddresserWatchAPIHostPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAPIHostPorts", reflect.TypeOf((*MockAPIAddresser)(nil).WatchAPIHostPorts), arg0)
	return &MockAPIAddresserWatchAPIHostPortsCall{Call: call}
}

// MockAPIAddresserWatchAPIHostPortsCall wrap *gomock.Call
type MockAPIAddresserWatchAPIHostPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddresserWatchAPIHostPortsCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockAPIAddresserWatchAPIHostPortsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddresserWatchAPIHostPortsCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockAPIAddresserWatchAPIHostPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddresserWatchAPIHostPortsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockAPIAddresserWatchAPIHostPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
