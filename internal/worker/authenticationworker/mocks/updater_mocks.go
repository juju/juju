// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/authenticationworker (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/updater_mocks.go github.com/juju/juju/internal/worker/authenticationworker Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// AuthorisedKeys mocks base method.
func (m *MockClient) AuthorisedKeys(arg0 context.Context, arg1 names.MachineTag) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorisedKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorisedKeys indicates an expected call of AuthorisedKeys.
func (mr *MockClientMockRecorder) AuthorisedKeys(arg0, arg1 any) *MockClientAuthorisedKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorisedKeys", reflect.TypeOf((*MockClient)(nil).AuthorisedKeys), arg0, arg1)
	return &MockClientAuthorisedKeysCall{Call: call}
}

// MockClientAuthorisedKeysCall wrap *gomock.Call
type MockClientAuthorisedKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientAuthorisedKeysCall) Return(arg0 []string, arg1 error) *MockClientAuthorisedKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientAuthorisedKeysCall) Do(f func(context.Context, names.MachineTag) ([]string, error)) *MockClientAuthorisedKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientAuthorisedKeysCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]string, error)) *MockClientAuthorisedKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchAuthorisedKeys mocks base method.
func (m *MockClient) WatchAuthorisedKeys(arg0 context.Context, arg1 names.MachineTag) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAuthorisedKeys", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAuthorisedKeys indicates an expected call of WatchAuthorisedKeys.
func (mr *MockClientMockRecorder) WatchAuthorisedKeys(arg0, arg1 any) *MockClientWatchAuthorisedKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAuthorisedKeys", reflect.TypeOf((*MockClient)(nil).WatchAuthorisedKeys), arg0, arg1)
	return &MockClientWatchAuthorisedKeysCall{Call: call}
}

// MockClientWatchAuthorisedKeysCall wrap *gomock.Call
type MockClientWatchAuthorisedKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientWatchAuthorisedKeysCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockClientWatchAuthorisedKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientWatchAuthorisedKeysCall) Do(f func(context.Context, names.MachineTag) (watcher.Watcher[struct{}], error)) *MockClientWatchAuthorisedKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientWatchAuthorisedKeysCall) DoAndReturn(f func(context.Context, names.MachineTag) (watcher.Watcher[struct{}], error)) *MockClientWatchAuthorisedKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
