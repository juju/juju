// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/httpclient (interfaces: HTTPClientWorker)
//
// Generated by this command:
//
//	mockgen -typed -package httpclient -destination httpclient_mock_test.go github.com/juju/juju/internal/worker/httpclient HTTPClientWorker
//

// Package httpclient is a generated GoMock package.
package httpclient

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClientWorker is a mock of HTTPClientWorker interface.
type MockHTTPClientWorker struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientWorkerMockRecorder
}

// MockHTTPClientWorkerMockRecorder is the mock recorder for MockHTTPClientWorker.
type MockHTTPClientWorkerMockRecorder struct {
	mock *MockHTTPClientWorker
}

// NewMockHTTPClientWorker creates a new mock instance.
func NewMockHTTPClientWorker(ctrl *gomock.Controller) *MockHTTPClientWorker {
	mock := &MockHTTPClientWorker{ctrl: ctrl}
	mock.recorder = &MockHTTPClientWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientWorker) EXPECT() *MockHTTPClientWorkerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockHTTPClientWorker) ISGOMOCK() struct{} {
	return struct{}{}
}

// Do mocks base method.
func (m *MockHTTPClientWorker) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientWorkerMockRecorder) Do(arg0 any) *MockHTTPClientWorkerDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClientWorker)(nil).Do), arg0)
	return &MockHTTPClientWorkerDoCall{Call: call}
}

// MockHTTPClientWorkerDoCall wrap *gomock.Call
type MockHTTPClientWorkerDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientWorkerDoCall) Return(arg0 *http.Response, arg1 error) *MockHTTPClientWorkerDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientWorkerDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockHTTPClientWorkerDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientWorkerDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockHTTPClientWorkerDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockHTTPClientWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockHTTPClientWorkerMockRecorder) Kill() *MockHTTPClientWorkerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockHTTPClientWorker)(nil).Kill))
	return &MockHTTPClientWorkerKillCall{Call: call}
}

// MockHTTPClientWorkerKillCall wrap *gomock.Call
type MockHTTPClientWorkerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientWorkerKillCall) Return() *MockHTTPClientWorkerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientWorkerKillCall) Do(f func()) *MockHTTPClientWorkerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientWorkerKillCall) DoAndReturn(f func()) *MockHTTPClientWorkerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockHTTPClientWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockHTTPClientWorkerMockRecorder) Wait() *MockHTTPClientWorkerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockHTTPClientWorker)(nil).Wait))
	return &MockHTTPClientWorkerWaitCall{Call: call}
}

// MockHTTPClientWorkerWaitCall wrap *gomock.Call
type MockHTTPClientWorkerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientWorkerWaitCall) Return(arg0 error) *MockHTTPClientWorkerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientWorkerWaitCall) Do(f func() error) *MockHTTPClientWorkerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientWorkerWaitCall) DoAndReturn(f func() error) *MockHTTPClientWorkerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
