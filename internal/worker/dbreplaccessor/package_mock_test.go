// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/dbreplaccessor (interfaces: DBApp,NodeManager,TrackedDB)
//
// Generated by this command:
//
//	mockgen -typed -package dbreplaccessor -destination package_mock_test.go github.com/juju/juju/internal/worker/dbreplaccessor DBApp,NodeManager,TrackedDB
//

// Package dbreplaccessor is a generated GoMock package.
package dbreplaccessor

import (
	context "context"
	sql "database/sql"
	driver "database/sql/driver"
	reflect "reflect"

	sqlair "github.com/canonical/sqlair"
	client "github.com/juju/juju/internal/database/client"
	gomock "go.uber.org/mock/gomock"
)

// MockDBApp is a mock of DBApp interface.
type MockDBApp struct {
	ctrl     *gomock.Controller
	recorder *MockDBAppMockRecorder
}

// MockDBAppMockRecorder is the mock recorder for MockDBApp.
type MockDBAppMockRecorder struct {
	mock *MockDBApp
}

// NewMockDBApp creates a new mock instance.
func NewMockDBApp(ctrl *gomock.Controller) *MockDBApp {
	mock := &MockDBApp{ctrl: ctrl}
	mock.recorder = &MockDBAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBApp) EXPECT() *MockDBAppMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockDBApp) Open(arg0 context.Context, arg1 string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDBAppMockRecorder) Open(arg0, arg1 any) *MockDBAppOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDBApp)(nil).Open), arg0, arg1)
	return &MockDBAppOpenCall{Call: call}
}

// MockDBAppOpenCall wrap *gomock.Call
type MockDBAppOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppOpenCall) Return(arg0 *sql.DB, arg1 error) *MockDBAppOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppOpenCall) Do(f func(context.Context, string) (*sql.DB, error)) *MockDBAppOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppOpenCall) DoAndReturn(f func(context.Context, string) (*sql.DB, error)) *MockDBAppOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNodeManager is a mock of NodeManager interface.
type MockNodeManager struct {
	ctrl     *gomock.Controller
	recorder *MockNodeManagerMockRecorder
}

// MockNodeManagerMockRecorder is the mock recorder for MockNodeManager.
type MockNodeManagerMockRecorder struct {
	mock *MockNodeManager
}

// NewMockNodeManager creates a new mock instance.
func NewMockNodeManager(ctrl *gomock.Controller) *MockNodeManager {
	mock := &MockNodeManager{ctrl: ctrl}
	mock.recorder = &MockNodeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeManager) EXPECT() *MockNodeManagerMockRecorder {
	return m.recorder
}

// DqliteSQLDriver mocks base method.
func (m *MockNodeManager) DqliteSQLDriver(arg0 context.Context) (driver.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DqliteSQLDriver", arg0)
	ret0, _ := ret[0].(driver.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DqliteSQLDriver indicates an expected call of DqliteSQLDriver.
func (mr *MockNodeManagerMockRecorder) DqliteSQLDriver(arg0 any) *MockNodeManagerDqliteSQLDriverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DqliteSQLDriver", reflect.TypeOf((*MockNodeManager)(nil).DqliteSQLDriver), arg0)
	return &MockNodeManagerDqliteSQLDriverCall{Call: call}
}

// MockNodeManagerDqliteSQLDriverCall wrap *gomock.Call
type MockNodeManagerDqliteSQLDriverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerDqliteSQLDriverCall) Return(arg0 driver.Driver, arg1 error) *MockNodeManagerDqliteSQLDriverCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerDqliteSQLDriverCall) Do(f func(context.Context) (driver.Driver, error)) *MockNodeManagerDqliteSQLDriverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerDqliteSQLDriverCall) DoAndReturn(f func(context.Context) (driver.Driver, error)) *MockNodeManagerDqliteSQLDriverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureDataDir mocks base method.
func (m *MockNodeManager) EnsureDataDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDataDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureDataDir indicates an expected call of EnsureDataDir.
func (mr *MockNodeManagerMockRecorder) EnsureDataDir() *MockNodeManagerEnsureDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDataDir", reflect.TypeOf((*MockNodeManager)(nil).EnsureDataDir))
	return &MockNodeManagerEnsureDataDirCall{Call: call}
}

// MockNodeManagerEnsureDataDirCall wrap *gomock.Call
type MockNodeManagerEnsureDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerEnsureDataDirCall) Return(arg0 string, arg1 error) *MockNodeManagerEnsureDataDirCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerEnsureDataDirCall) Do(f func() (string, error)) *MockNodeManagerEnsureDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerEnsureDataDirCall) DoAndReturn(f func() (string, error)) *MockNodeManagerEnsureDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeaderClient mocks base method.
func (m *MockNodeManager) LeaderClient(arg0 context.Context) (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderClient", arg0)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaderClient indicates an expected call of LeaderClient.
func (mr *MockNodeManagerMockRecorder) LeaderClient(arg0 any) *MockNodeManagerLeaderClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderClient", reflect.TypeOf((*MockNodeManager)(nil).LeaderClient), arg0)
	return &MockNodeManagerLeaderClientCall{Call: call}
}

// MockNodeManagerLeaderClientCall wrap *gomock.Call
type MockNodeManagerLeaderClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerLeaderClientCall) Return(arg0 *client.Client, arg1 error) *MockNodeManagerLeaderClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerLeaderClientCall) Do(f func(context.Context) (*client.Client, error)) *MockNodeManagerLeaderClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerLeaderClientCall) DoAndReturn(f func(context.Context) (*client.Client, error)) *MockNodeManagerLeaderClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTrackedDB is a mock of TrackedDB interface.
type MockTrackedDB struct {
	ctrl     *gomock.Controller
	recorder *MockTrackedDBMockRecorder
}

// MockTrackedDBMockRecorder is the mock recorder for MockTrackedDB.
type MockTrackedDBMockRecorder struct {
	mock *MockTrackedDB
}

// NewMockTrackedDB creates a new mock instance.
func NewMockTrackedDB(ctrl *gomock.Controller) *MockTrackedDB {
	mock := &MockTrackedDB{ctrl: ctrl}
	mock.recorder = &MockTrackedDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackedDB) EXPECT() *MockTrackedDBMockRecorder {
	return m.recorder
}

// Dying mocks base method.
func (m *MockTrackedDB) Dying() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dying")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Dying indicates an expected call of Dying.
func (mr *MockTrackedDBMockRecorder) Dying() *MockTrackedDBDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dying", reflect.TypeOf((*MockTrackedDB)(nil).Dying))
	return &MockTrackedDBDyingCall{Call: call}
}

// MockTrackedDBDyingCall wrap *gomock.Call
type MockTrackedDBDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBDyingCall) Return(arg0 <-chan struct{}) *MockTrackedDBDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBDyingCall) Do(f func() <-chan struct{}) *MockTrackedDBDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBDyingCall) DoAndReturn(f func() <-chan struct{}) *MockTrackedDBDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockTrackedDB) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockTrackedDBMockRecorder) Kill() *MockTrackedDBKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTrackedDB)(nil).Kill))
	return &MockTrackedDBKillCall{Call: call}
}

// MockTrackedDBKillCall wrap *gomock.Call
type MockTrackedDBKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBKillCall) Return() *MockTrackedDBKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBKillCall) Do(f func()) *MockTrackedDBKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBKillCall) DoAndReturn(f func()) *MockTrackedDBKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StdTxn mocks base method.
func (m *MockTrackedDB) StdTxn(arg0 context.Context, arg1 func(context.Context, *sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdTxn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StdTxn indicates an expected call of StdTxn.
func (mr *MockTrackedDBMockRecorder) StdTxn(arg0, arg1 any) *MockTrackedDBStdTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdTxn", reflect.TypeOf((*MockTrackedDB)(nil).StdTxn), arg0, arg1)
	return &MockTrackedDBStdTxnCall{Call: call}
}

// MockTrackedDBStdTxnCall wrap *gomock.Call
type MockTrackedDBStdTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBStdTxnCall) Return(arg0 error) *MockTrackedDBStdTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBStdTxnCall) Do(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockTrackedDBStdTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBStdTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockTrackedDBStdTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Txn mocks base method.
func (m *MockTrackedDB) Txn(arg0 context.Context, arg1 func(context.Context, *sqlair.TX) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockTrackedDBMockRecorder) Txn(arg0, arg1 any) *MockTrackedDBTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockTrackedDB)(nil).Txn), arg0, arg1)
	return &MockTrackedDBTxnCall{Call: call}
}

// MockTrackedDBTxnCall wrap *gomock.Call
type MockTrackedDBTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBTxnCall) Return(arg0 error) *MockTrackedDBTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBTxnCall) Do(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockTrackedDBTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockTrackedDBTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockTrackedDB) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTrackedDBMockRecorder) Wait() *MockTrackedDBWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrackedDB)(nil).Wait))
	return &MockTrackedDBWaitCall{Call: call}
}

// MockTrackedDBWaitCall wrap *gomock.Call
type MockTrackedDBWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBWaitCall) Return(arg0 error) *MockTrackedDBWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBWaitCall) Do(f func() error) *MockTrackedDBWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBWaitCall) DoAndReturn(f func() error) *MockTrackedDBWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
