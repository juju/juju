// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/objectstore (interfaces: Claimer)
//
// Generated by this command:
//
//	mockgen -typed -package objectstore -destination claimer_mock_test.go github.com/juju/juju/internal/objectstore Claimer
//

// Package objectstore is a generated GoMock package.
package objectstore

import (
	context "context"
	reflect "reflect"

	objectstore "github.com/juju/juju/internal/objectstore"
	gomock "go.uber.org/mock/gomock"
)

// MockClaimer is a mock of Claimer interface.
type MockClaimer struct {
	ctrl     *gomock.Controller
	recorder *MockClaimerMockRecorder
}

// MockClaimerMockRecorder is the mock recorder for MockClaimer.
type MockClaimerMockRecorder struct {
	mock *MockClaimer
}

// NewMockClaimer creates a new mock instance.
func NewMockClaimer(ctrl *gomock.Controller) *MockClaimer {
	mock := &MockClaimer{ctrl: ctrl}
	mock.recorder = &MockClaimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimer) EXPECT() *MockClaimerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClaimer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Claim mocks base method.
func (m *MockClaimer) Claim(arg0 context.Context, arg1 string) (objectstore.ClaimExtender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claim", arg0, arg1)
	ret0, _ := ret[0].(objectstore.ClaimExtender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claim indicates an expected call of Claim.
func (mr *MockClaimerMockRecorder) Claim(arg0, arg1 any) *MockClaimerClaimCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockClaimer)(nil).Claim), arg0, arg1)
	return &MockClaimerClaimCall{Call: call}
}

// MockClaimerClaimCall wrap *gomock.Call
type MockClaimerClaimCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClaimerClaimCall) Return(arg0 objectstore.ClaimExtender, arg1 error) *MockClaimerClaimCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClaimerClaimCall) Do(f func(context.Context, string) (objectstore.ClaimExtender, error)) *MockClaimerClaimCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClaimerClaimCall) DoAndReturn(f func(context.Context, string) (objectstore.ClaimExtender, error)) *MockClaimerClaimCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Release mocks base method.
func (m *MockClaimer) Release(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockClaimerMockRecorder) Release(arg0, arg1 any) *MockClaimerReleaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockClaimer)(nil).Release), arg0, arg1)
	return &MockClaimerReleaseCall{Call: call}
}

// MockClaimerReleaseCall wrap *gomock.Call
type MockClaimerReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClaimerReleaseCall) Return(arg0 error) *MockClaimerReleaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClaimerReleaseCall) Do(f func(context.Context, string) error) *MockClaimerReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClaimerReleaseCall) DoAndReturn(f func(context.Context, string) error) *MockClaimerReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
