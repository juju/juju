// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/objectstore (interfaces: Client,Session)
//
// Generated by this command:
//
//	mockgen -typed -package objectstore -destination client_mock_test.go github.com/juju/juju/core/objectstore Client,Session
//

// Package objectstore is a generated GoMock package.
package objectstore

import (
	context "context"
	io "io"
	reflect "reflect"

	objectstore "github.com/juju/juju/core/objectstore"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Session mocks base method.
func (m *MockClient) Session(arg0 context.Context, arg1 func(context.Context, objectstore.Session) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockClientMockRecorder) Session(arg0, arg1 any) *MockClientSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockClient)(nil).Session), arg0, arg1)
	return &MockClientSessionCall{Call: call}
}

// MockClientSessionCall wrap *gomock.Call
type MockClientSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSessionCall) Return(arg0 error) *MockClientSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSessionCall) Do(f func(context.Context, func(context.Context, objectstore.Session) error) error) *MockClientSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSessionCall) DoAndReturn(f func(context.Context, func(context.Context, objectstore.Session) error) error) *MockClientSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSession) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateBucket mocks base method.
func (m *MockSession) CreateBucket(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockSessionMockRecorder) CreateBucket(arg0, arg1 any) *MockSessionCreateBucketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockSession)(nil).CreateBucket), arg0, arg1)
	return &MockSessionCreateBucketCall{Call: call}
}

// MockSessionCreateBucketCall wrap *gomock.Call
type MockSessionCreateBucketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionCreateBucketCall) Return(arg0 error) *MockSessionCreateBucketCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionCreateBucketCall) Do(f func(context.Context, string) error) *MockSessionCreateBucketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionCreateBucketCall) DoAndReturn(f func(context.Context, string) error) *MockSessionCreateBucketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteObject mocks base method.
func (m *MockSession) DeleteObject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockSessionMockRecorder) DeleteObject(arg0, arg1, arg2 any) *MockSessionDeleteObjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockSession)(nil).DeleteObject), arg0, arg1, arg2)
	return &MockSessionDeleteObjectCall{Call: call}
}

// MockSessionDeleteObjectCall wrap *gomock.Call
type MockSessionDeleteObjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionDeleteObjectCall) Return(arg0 error) *MockSessionDeleteObjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionDeleteObjectCall) Do(f func(context.Context, string, string) error) *MockSessionDeleteObjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionDeleteObjectCall) DoAndReturn(f func(context.Context, string, string) error) *MockSessionDeleteObjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetObject mocks base method.
func (m *MockSession) GetObject(arg0 context.Context, arg1, arg2 string) (io.ReadCloser, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetObject indicates an expected call of GetObject.
func (mr *MockSessionMockRecorder) GetObject(arg0, arg1, arg2 any) *MockSessionGetObjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockSession)(nil).GetObject), arg0, arg1, arg2)
	return &MockSessionGetObjectCall{Call: call}
}

// MockSessionGetObjectCall wrap *gomock.Call
type MockSessionGetObjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionGetObjectCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 string, arg3 error) *MockSessionGetObjectCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionGetObjectCall) Do(f func(context.Context, string, string) (io.ReadCloser, int64, string, error)) *MockSessionGetObjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionGetObjectCall) DoAndReturn(f func(context.Context, string, string) (io.ReadCloser, int64, string, error)) *MockSessionGetObjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListObjects mocks base method.
func (m *MockSession) ListObjects(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockSessionMockRecorder) ListObjects(arg0, arg1 any) *MockSessionListObjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockSession)(nil).ListObjects), arg0, arg1)
	return &MockSessionListObjectsCall{Call: call}
}

// MockSessionListObjectsCall wrap *gomock.Call
type MockSessionListObjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionListObjectsCall) Return(arg0 []string, arg1 error) *MockSessionListObjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionListObjectsCall) Do(f func(context.Context, string) ([]string, error)) *MockSessionListObjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionListObjectsCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockSessionListObjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ObjectExists mocks base method.
func (m *MockSession) ObjectExists(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObjectExists indicates an expected call of ObjectExists.
func (mr *MockSessionMockRecorder) ObjectExists(arg0, arg1, arg2 any) *MockSessionObjectExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectExists", reflect.TypeOf((*MockSession)(nil).ObjectExists), arg0, arg1, arg2)
	return &MockSessionObjectExistsCall{Call: call}
}

// MockSessionObjectExistsCall wrap *gomock.Call
type MockSessionObjectExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionObjectExistsCall) Return(arg0 error) *MockSessionObjectExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionObjectExistsCall) Do(f func(context.Context, string, string) error) *MockSessionObjectExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionObjectExistsCall) DoAndReturn(f func(context.Context, string, string) error) *MockSessionObjectExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutObject mocks base method.
func (m *MockSession) PutObject(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockSessionMockRecorder) PutObject(arg0, arg1, arg2, arg3, arg4 any) *MockSessionPutObjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockSession)(nil).PutObject), arg0, arg1, arg2, arg3, arg4)
	return &MockSessionPutObjectCall{Call: call}
}

// MockSessionPutObjectCall wrap *gomock.Call
type MockSessionPutObjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionPutObjectCall) Return(arg0 error) *MockSessionPutObjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionPutObjectCall) Do(f func(context.Context, string, string, io.Reader, string) error) *MockSessionPutObjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionPutObjectCall) DoAndReturn(f func(context.Context, string, string, io.Reader, string) error) *MockSessionPutObjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
