// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/services (interfaces: ProviderServices,ProviderServicesGetter)
//
// Generated by this command:
//
//	mockgen -typed -package providerservices -destination servicefactory_mock_test.go github.com/juju/juju/internal/services ProviderServices,ProviderServicesGetter
//

// Package providerservices is a generated GoMock package.
package providerservices

import (
	reflect "reflect"

	service "github.com/juju/juju/domain/cloud/service"
	service0 "github.com/juju/juju/domain/credential/service"
	service1 "github.com/juju/juju/domain/model/service"
	service2 "github.com/juju/juju/domain/modelconfig/service"
	services "github.com/juju/juju/internal/services"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderServices is a mock of ProviderServices interface.
type MockProviderServices struct {
	ctrl     *gomock.Controller
	recorder *MockProviderServicesMockRecorder
}

// MockProviderServicesMockRecorder is the mock recorder for MockProviderServices.
type MockProviderServicesMockRecorder struct {
	mock *MockProviderServices
}

// NewMockProviderServices creates a new mock instance.
func NewMockProviderServices(ctrl *gomock.Controller) *MockProviderServices {
	mock := &MockProviderServices{ctrl: ctrl}
	mock.recorder = &MockProviderServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderServices) EXPECT() *MockProviderServicesMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProviderServices) ISGOMOCK() struct{} {
	return struct{}{}
}

// Cloud mocks base method.
func (m *MockProviderServices) Cloud() *service.WatchableProviderService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(*service.WatchableProviderService)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockProviderServicesMockRecorder) Cloud() *MockProviderServicesCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockProviderServices)(nil).Cloud))
	return &MockProviderServicesCloudCall{Call: call}
}

// MockProviderServicesCloudCall wrap *gomock.Call
type MockProviderServicesCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServicesCloudCall) Return(arg0 *service.WatchableProviderService) *MockProviderServicesCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServicesCloudCall) Do(f func() *service.WatchableProviderService) *MockProviderServicesCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServicesCloudCall) DoAndReturn(f func() *service.WatchableProviderService) *MockProviderServicesCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockProviderServices) Config() *service2.WatchableProviderService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*service2.WatchableProviderService)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockProviderServicesMockRecorder) Config() *MockProviderServicesConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockProviderServices)(nil).Config))
	return &MockProviderServicesConfigCall{Call: call}
}

// MockProviderServicesConfigCall wrap *gomock.Call
type MockProviderServicesConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServicesConfigCall) Return(arg0 *service2.WatchableProviderService) *MockProviderServicesConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServicesConfigCall) Do(f func() *service2.WatchableProviderService) *MockProviderServicesConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServicesConfigCall) DoAndReturn(f func() *service2.WatchableProviderService) *MockProviderServicesConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Credential mocks base method.
func (m *MockProviderServices) Credential() *service0.WatchableProviderService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credential")
	ret0, _ := ret[0].(*service0.WatchableProviderService)
	return ret0
}

// Credential indicates an expected call of Credential.
func (mr *MockProviderServicesMockRecorder) Credential() *MockProviderServicesCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credential", reflect.TypeOf((*MockProviderServices)(nil).Credential))
	return &MockProviderServicesCredentialCall{Call: call}
}

// MockProviderServicesCredentialCall wrap *gomock.Call
type MockProviderServicesCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServicesCredentialCall) Return(arg0 *service0.WatchableProviderService) *MockProviderServicesCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServicesCredentialCall) Do(f func() *service0.WatchableProviderService) *MockProviderServicesCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServicesCredentialCall) DoAndReturn(f func() *service0.WatchableProviderService) *MockProviderServicesCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockProviderServices) Model() *service1.ProviderService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(*service1.ProviderService)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockProviderServicesMockRecorder) Model() *MockProviderServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockProviderServices)(nil).Model))
	return &MockProviderServicesModelCall{Call: call}
}

// MockProviderServicesModelCall wrap *gomock.Call
type MockProviderServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServicesModelCall) Return(arg0 *service1.ProviderService) *MockProviderServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServicesModelCall) Do(f func() *service1.ProviderService) *MockProviderServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServicesModelCall) DoAndReturn(f func() *service1.ProviderService) *MockProviderServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderServicesGetter is a mock of ProviderServicesGetter interface.
type MockProviderServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProviderServicesGetterMockRecorder
}

// MockProviderServicesGetterMockRecorder is the mock recorder for MockProviderServicesGetter.
type MockProviderServicesGetterMockRecorder struct {
	mock *MockProviderServicesGetter
}

// NewMockProviderServicesGetter creates a new mock instance.
func NewMockProviderServicesGetter(ctrl *gomock.Controller) *MockProviderServicesGetter {
	mock := &MockProviderServicesGetter{ctrl: ctrl}
	mock.recorder = &MockProviderServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderServicesGetter) EXPECT() *MockProviderServicesGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProviderServicesGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// ServicesForModel mocks base method.
func (m *MockProviderServicesGetter) ServicesForModel(arg0 string) services.ProviderServices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0)
	ret0, _ := ret[0].(services.ProviderServices)
	return ret0
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockProviderServicesGetterMockRecorder) ServicesForModel(arg0 any) *MockProviderServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockProviderServicesGetter)(nil).ServicesForModel), arg0)
	return &MockProviderServicesGetterServicesForModelCall{Call: call}
}

// MockProviderServicesGetterServicesForModelCall wrap *gomock.Call
type MockProviderServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderServicesGetterServicesForModelCall) Return(arg0 services.ProviderServices) *MockProviderServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderServicesGetterServicesForModelCall) Do(f func(string) services.ProviderServices) *MockProviderServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderServicesGetterServicesForModelCall) DoAndReturn(f func(string) services.ProviderServices) *MockProviderServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
