// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/charmdownloader (interfaces: ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package charmdownloader -destination service_mocks_test.go github.com/juju/juju/internal/worker/charmdownloader ApplicationService
//

// Package charmdownloader is a generated GoMock package.
package charmdownloader

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// DownloadApplicationCharms mocks base method.
func (m *MockApplicationService) DownloadApplicationCharms(arg0 context.Context, arg1 []names.ApplicationTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadApplicationCharms", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadApplicationCharms indicates an expected call of DownloadApplicationCharms.
func (mr *MockApplicationServiceMockRecorder) DownloadApplicationCharms(arg0, arg1 any) *MockApplicationServiceDownloadApplicationCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadApplicationCharms", reflect.TypeOf((*MockApplicationService)(nil).DownloadApplicationCharms), arg0, arg1)
	return &MockApplicationServiceDownloadApplicationCharmsCall{Call: call}
}

// MockApplicationServiceDownloadApplicationCharmsCall wrap *gomock.Call
type MockApplicationServiceDownloadApplicationCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDownloadApplicationCharmsCall) Return(arg0 error) *MockApplicationServiceDownloadApplicationCharmsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDownloadApplicationCharmsCall) Do(f func(context.Context, []names.ApplicationTag) error) *MockApplicationServiceDownloadApplicationCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDownloadApplicationCharmsCall) DoAndReturn(f func(context.Context, []names.ApplicationTag) error) *MockApplicationServiceDownloadApplicationCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationsWithPendingCharms mocks base method.
func (m *MockApplicationService) WatchApplicationsWithPendingCharms(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationsWithPendingCharms", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationsWithPendingCharms indicates an expected call of WatchApplicationsWithPendingCharms.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationsWithPendingCharms(arg0 any) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationsWithPendingCharms", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationsWithPendingCharms), arg0)
	return &MockApplicationServiceWatchApplicationsWithPendingCharmsCall{Call: call}
}

// MockApplicationServiceWatchApplicationsWithPendingCharmsCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationsWithPendingCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
