// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/logger (interfaces: Logger,LogWriterCloser,LoggerContextGetter,ModelLogger)
//
// Generated by this command:
//
//	mockgen -typed -package logsink -destination logger_mock_test.go github.com/juju/juju/core/logger Logger,LogWriterCloser,LoggerContextGetter,ModelLogger
//

// Package logsink is a generated GoMock package.
package logsink

import (
	context "context"
	reflect "reflect"

	logger "github.com/juju/juju/core/logger"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Child mocks base method.
func (m *MockLogger) Child(arg0 string, arg1 ...string) logger.Logger {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Child", varargs...)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// Child indicates an expected call of Child.
func (mr *MockLoggerMockRecorder) Child(arg0 any, arg1 ...any) *MockLoggerChildCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Child", reflect.TypeOf((*MockLogger)(nil).Child), varargs...)
	return &MockLoggerChildCall{Call: call}
}

// MockLoggerChildCall wrap *gomock.Call
type MockLoggerChildCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerChildCall) Return(arg0 logger.Logger) *MockLoggerChildCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerChildCall) Do(f func(string, ...string) logger.Logger) *MockLoggerChildCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerChildCall) DoAndReturn(f func(string, ...string) logger.Logger) *MockLoggerChildCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Criticalf mocks base method.
func (m *MockLogger) Criticalf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Criticalf", varargs...)
}

// Criticalf indicates an expected call of Criticalf.
func (mr *MockLoggerMockRecorder) Criticalf(arg0, arg1 any, arg2 ...any) *MockLoggerCriticalfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Criticalf", reflect.TypeOf((*MockLogger)(nil).Criticalf), varargs...)
	return &MockLoggerCriticalfCall{Call: call}
}

// MockLoggerCriticalfCall wrap *gomock.Call
type MockLoggerCriticalfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerCriticalfCall) Return() *MockLoggerCriticalfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerCriticalfCall) Do(f func(context.Context, string, ...any)) *MockLoggerCriticalfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerCriticalfCall) DoAndReturn(f func(context.Context, string, ...any)) *MockLoggerCriticalfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0, arg1 any, arg2 ...any) *MockLoggerDebugfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
	return &MockLoggerDebugfCall{Call: call}
}

// MockLoggerDebugfCall wrap *gomock.Call
type MockLoggerDebugfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugfCall) Return() *MockLoggerDebugfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugfCall) Do(f func(context.Context, string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugfCall) DoAndReturn(f func(context.Context, string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(arg0, arg1 any, arg2 ...any) *MockLoggerErrorfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
	return &MockLoggerErrorfCall{Call: call}
}

// MockLoggerErrorfCall wrap *gomock.Call
type MockLoggerErrorfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorfCall) Return() *MockLoggerErrorfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorfCall) Do(f func(context.Context, string, ...any)) *MockLoggerErrorfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorfCall) DoAndReturn(f func(context.Context, string, ...any)) *MockLoggerErrorfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetChildByName mocks base method.
func (m *MockLogger) GetChildByName(arg0 string) logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildByName", arg0)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// GetChildByName indicates an expected call of GetChildByName.
func (mr *MockLoggerMockRecorder) GetChildByName(arg0 any) *MockLoggerGetChildByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildByName", reflect.TypeOf((*MockLogger)(nil).GetChildByName), arg0)
	return &MockLoggerGetChildByNameCall{Call: call}
}

// MockLoggerGetChildByNameCall wrap *gomock.Call
type MockLoggerGetChildByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerGetChildByNameCall) Return(arg0 logger.Logger) *MockLoggerGetChildByNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerGetChildByNameCall) Do(f func(string) logger.Logger) *MockLoggerGetChildByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerGetChildByNameCall) DoAndReturn(f func(string) logger.Logger) *MockLoggerGetChildByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Infof mocks base method.
func (m *MockLogger) Infof(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(arg0, arg1 any, arg2 ...any) *MockLoggerInfofCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
	return &MockLoggerInfofCall{Call: call}
}

// MockLoggerInfofCall wrap *gomock.Call
type MockLoggerInfofCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfofCall) Return() *MockLoggerInfofCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfofCall) Do(f func(context.Context, string, ...any)) *MockLoggerInfofCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfofCall) DoAndReturn(f func(context.Context, string, ...any)) *MockLoggerInfofCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsLevelEnabled mocks base method.
func (m *MockLogger) IsLevelEnabled(arg0 logger.Level) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLevelEnabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLevelEnabled indicates an expected call of IsLevelEnabled.
func (mr *MockLoggerMockRecorder) IsLevelEnabled(arg0 any) *MockLoggerIsLevelEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLevelEnabled", reflect.TypeOf((*MockLogger)(nil).IsLevelEnabled), arg0)
	return &MockLoggerIsLevelEnabledCall{Call: call}
}

// MockLoggerIsLevelEnabledCall wrap *gomock.Call
type MockLoggerIsLevelEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerIsLevelEnabledCall) Return(arg0 bool) *MockLoggerIsLevelEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerIsLevelEnabledCall) Do(f func(logger.Level) bool) *MockLoggerIsLevelEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerIsLevelEnabledCall) DoAndReturn(f func(logger.Level) bool) *MockLoggerIsLevelEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Logf mocks base method.
func (m *MockLogger) Logf(arg0 context.Context, arg1 logger.Level, arg2 string, arg3 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf.
func (mr *MockLoggerMockRecorder) Logf(arg0, arg1, arg2 any, arg3 ...any) *MockLoggerLogfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockLogger)(nil).Logf), varargs...)
	return &MockLoggerLogfCall{Call: call}
}

// MockLoggerLogfCall wrap *gomock.Call
type MockLoggerLogfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerLogfCall) Return() *MockLoggerLogfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerLogfCall) Do(f func(context.Context, logger.Level, string, ...any)) *MockLoggerLogfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerLogfCall) DoAndReturn(f func(context.Context, logger.Level, string, ...any)) *MockLoggerLogfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tracef mocks base method.
func (m *MockLogger) Tracef(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Tracef", varargs...)
}

// Tracef indicates an expected call of Tracef.
func (mr *MockLoggerMockRecorder) Tracef(arg0, arg1 any, arg2 ...any) *MockLoggerTracefCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracef", reflect.TypeOf((*MockLogger)(nil).Tracef), varargs...)
	return &MockLoggerTracefCall{Call: call}
}

// MockLoggerTracefCall wrap *gomock.Call
type MockLoggerTracefCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerTracefCall) Return() *MockLoggerTracefCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerTracefCall) Do(f func(context.Context, string, ...any)) *MockLoggerTracefCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerTracefCall) DoAndReturn(f func(context.Context, string, ...any)) *MockLoggerTracefCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warningf mocks base method.
func (m *MockLogger) Warningf(arg0 context.Context, arg1 string, arg2 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf.
func (mr *MockLoggerMockRecorder) Warningf(arg0, arg1 any, arg2 ...any) *MockLoggerWarningfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockLogger)(nil).Warningf), varargs...)
	return &MockLoggerWarningfCall{Call: call}
}

// MockLoggerWarningfCall wrap *gomock.Call
type MockLoggerWarningfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarningfCall) Return() *MockLoggerWarningfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarningfCall) Do(f func(context.Context, string, ...any)) *MockLoggerWarningfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarningfCall) DoAndReturn(f func(context.Context, string, ...any)) *MockLoggerWarningfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLogWriterCloser is a mock of LogWriterCloser interface.
type MockLogWriterCloser struct {
	ctrl     *gomock.Controller
	recorder *MockLogWriterCloserMockRecorder
}

// MockLogWriterCloserMockRecorder is the mock recorder for MockLogWriterCloser.
type MockLogWriterCloserMockRecorder struct {
	mock *MockLogWriterCloser
}

// NewMockLogWriterCloser creates a new mock instance.
func NewMockLogWriterCloser(ctrl *gomock.Controller) *MockLogWriterCloser {
	mock := &MockLogWriterCloser{ctrl: ctrl}
	mock.recorder = &MockLogWriterCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogWriterCloser) EXPECT() *MockLogWriterCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLogWriterCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLogWriterCloserMockRecorder) Close() *MockLogWriterCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogWriterCloser)(nil).Close))
	return &MockLogWriterCloserCloseCall{Call: call}
}

// MockLogWriterCloserCloseCall wrap *gomock.Call
type MockLogWriterCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLogWriterCloserCloseCall) Return(arg0 error) *MockLogWriterCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLogWriterCloserCloseCall) Do(f func() error) *MockLogWriterCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLogWriterCloserCloseCall) DoAndReturn(f func() error) *MockLogWriterCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Log mocks base method.
func (m *MockLogWriterCloser) Log(arg0 []logger.LogRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockLogWriterCloserMockRecorder) Log(arg0 any) *MockLogWriterCloserLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogWriterCloser)(nil).Log), arg0)
	return &MockLogWriterCloserLogCall{Call: call}
}

// MockLogWriterCloserLogCall wrap *gomock.Call
type MockLogWriterCloserLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLogWriterCloserLogCall) Return(arg0 error) *MockLogWriterCloserLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLogWriterCloserLogCall) Do(f func([]logger.LogRecord) error) *MockLogWriterCloserLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLogWriterCloserLogCall) DoAndReturn(f func([]logger.LogRecord) error) *MockLogWriterCloserLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLoggerContextGetter is a mock of LoggerContextGetter interface.
type MockLoggerContextGetter struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerContextGetterMockRecorder
}

// MockLoggerContextGetterMockRecorder is the mock recorder for MockLoggerContextGetter.
type MockLoggerContextGetterMockRecorder struct {
	mock *MockLoggerContextGetter
}

// NewMockLoggerContextGetter creates a new mock instance.
func NewMockLoggerContextGetter(ctrl *gomock.Controller) *MockLoggerContextGetter {
	mock := &MockLoggerContextGetter{ctrl: ctrl}
	mock.recorder = &MockLoggerContextGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerContextGetter) EXPECT() *MockLoggerContextGetterMockRecorder {
	return m.recorder
}

// GetLoggerContext mocks base method.
func (m *MockLoggerContextGetter) GetLoggerContext(arg0 context.Context, arg1 string) (logger.LoggerContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerContext", arg0, arg1)
	ret0, _ := ret[0].(logger.LoggerContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggerContext indicates an expected call of GetLoggerContext.
func (mr *MockLoggerContextGetterMockRecorder) GetLoggerContext(arg0, arg1 any) *MockLoggerContextGetterGetLoggerContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerContext", reflect.TypeOf((*MockLoggerContextGetter)(nil).GetLoggerContext), arg0, arg1)
	return &MockLoggerContextGetterGetLoggerContextCall{Call: call}
}

// MockLoggerContextGetterGetLoggerContextCall wrap *gomock.Call
type MockLoggerContextGetterGetLoggerContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerContextGetterGetLoggerContextCall) Return(arg0 logger.LoggerContext, arg1 error) *MockLoggerContextGetterGetLoggerContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerContextGetterGetLoggerContextCall) Do(f func(context.Context, string) (logger.LoggerContext, error)) *MockLoggerContextGetterGetLoggerContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerContextGetterGetLoggerContextCall) DoAndReturn(f func(context.Context, string) (logger.LoggerContext, error)) *MockLoggerContextGetterGetLoggerContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelLogger is a mock of ModelLogger interface.
type MockModelLogger struct {
	ctrl     *gomock.Controller
	recorder *MockModelLoggerMockRecorder
}

// MockModelLoggerMockRecorder is the mock recorder for MockModelLogger.
type MockModelLoggerMockRecorder struct {
	mock *MockModelLogger
}

// NewMockModelLogger creates a new mock instance.
func NewMockModelLogger(ctrl *gomock.Controller) *MockModelLogger {
	mock := &MockModelLogger{ctrl: ctrl}
	mock.recorder = &MockModelLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelLogger) EXPECT() *MockModelLoggerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockModelLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModelLoggerMockRecorder) Close() *MockModelLoggerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelLogger)(nil).Close))
	return &MockModelLoggerCloseCall{Call: call}
}

// MockModelLoggerCloseCall wrap *gomock.Call
type MockModelLoggerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelLoggerCloseCall) Return(arg0 error) *MockModelLoggerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelLoggerCloseCall) Do(f func() error) *MockModelLoggerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelLoggerCloseCall) DoAndReturn(f func() error) *MockModelLoggerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLogWriter mocks base method.
func (m *MockModelLogger) GetLogWriter(arg0 context.Context, arg1 string) (logger.LogWriterCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogWriter", arg0, arg1)
	ret0, _ := ret[0].(logger.LogWriterCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogWriter indicates an expected call of GetLogWriter.
func (mr *MockModelLoggerMockRecorder) GetLogWriter(arg0, arg1 any) *MockModelLoggerGetLogWriterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogWriter", reflect.TypeOf((*MockModelLogger)(nil).GetLogWriter), arg0, arg1)
	return &MockModelLoggerGetLogWriterCall{Call: call}
}

// MockModelLoggerGetLogWriterCall wrap *gomock.Call
type MockModelLoggerGetLogWriterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelLoggerGetLogWriterCall) Return(arg0 logger.LogWriterCloser, arg1 error) *MockModelLoggerGetLogWriterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelLoggerGetLogWriterCall) Do(f func(context.Context, string) (logger.LogWriterCloser, error)) *MockModelLoggerGetLogWriterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelLoggerGetLogWriterCall) DoAndReturn(f func(context.Context, string) (logger.LogWriterCloser, error)) *MockModelLoggerGetLogWriterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveLogWriter mocks base method.
func (m *MockModelLogger) RemoveLogWriter(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLogWriter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLogWriter indicates an expected call of RemoveLogWriter.
func (mr *MockModelLoggerMockRecorder) RemoveLogWriter(arg0 any) *MockModelLoggerRemoveLogWriterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLogWriter", reflect.TypeOf((*MockModelLogger)(nil).RemoveLogWriter), arg0)
	return &MockModelLoggerRemoveLogWriterCall{Call: call}
}

// MockModelLoggerRemoveLogWriterCall wrap *gomock.Call
type MockModelLoggerRemoveLogWriterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelLoggerRemoveLogWriterCall) Return(arg0 error) *MockModelLoggerRemoveLogWriterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelLoggerRemoveLogWriterCall) Do(f func(string) error) *MockModelLoggerRemoveLogWriterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelLoggerRemoveLogWriterCall) DoAndReturn(f func(string) error) *MockModelLoggerRemoveLogWriterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
