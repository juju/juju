// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/externalcontrollerupdater (interfaces: ExternalControllerWatcherClientCloser,ExternalControllerUpdaterClient)
//
// Generated by this command:
//
//	mockgen -package externalcontrollerupdater_test -destination package_mock_test.go github.com/juju/juju/internal/worker/externalcontrollerupdater ExternalControllerWatcherClientCloser,ExternalControllerUpdaterClient
//

// Package externalcontrollerupdater_test is a generated GoMock package.
package externalcontrollerupdater_test

import (
	reflect "reflect"

	crosscontroller "github.com/juju/juju/api/controller/crosscontroller"
	crossmodel "github.com/juju/juju/core/crossmodel"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalControllerWatcherClientCloser is a mock of ExternalControllerWatcherClientCloser interface.
type MockExternalControllerWatcherClientCloser struct {
	ctrl     *gomock.Controller
	recorder *MockExternalControllerWatcherClientCloserMockRecorder
}

// MockExternalControllerWatcherClientCloserMockRecorder is the mock recorder for MockExternalControllerWatcherClientCloser.
type MockExternalControllerWatcherClientCloserMockRecorder struct {
	mock *MockExternalControllerWatcherClientCloser
}

// NewMockExternalControllerWatcherClientCloser creates a new mock instance.
func NewMockExternalControllerWatcherClientCloser(ctrl *gomock.Controller) *MockExternalControllerWatcherClientCloser {
	mock := &MockExternalControllerWatcherClientCloser{ctrl: ctrl}
	mock.recorder = &MockExternalControllerWatcherClientCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalControllerWatcherClientCloser) EXPECT() *MockExternalControllerWatcherClientCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockExternalControllerWatcherClientCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockExternalControllerWatcherClientCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExternalControllerWatcherClientCloser)(nil).Close))
}

// ControllerInfo mocks base method.
func (m *MockExternalControllerWatcherClientCloser) ControllerInfo() (*crosscontroller.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerInfo")
	ret0, _ := ret[0].(*crosscontroller.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerInfo indicates an expected call of ControllerInfo.
func (mr *MockExternalControllerWatcherClientCloserMockRecorder) ControllerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerInfo", reflect.TypeOf((*MockExternalControllerWatcherClientCloser)(nil).ControllerInfo))
}

// WatchControllerInfo mocks base method.
func (m *MockExternalControllerWatcherClientCloser) WatchControllerInfo() (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerInfo")
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerInfo indicates an expected call of WatchControllerInfo.
func (mr *MockExternalControllerWatcherClientCloserMockRecorder) WatchControllerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerInfo", reflect.TypeOf((*MockExternalControllerWatcherClientCloser)(nil).WatchControllerInfo))
}

// MockExternalControllerUpdaterClient is a mock of ExternalControllerUpdaterClient interface.
type MockExternalControllerUpdaterClient struct {
	ctrl     *gomock.Controller
	recorder *MockExternalControllerUpdaterClientMockRecorder
}

// MockExternalControllerUpdaterClientMockRecorder is the mock recorder for MockExternalControllerUpdaterClient.
type MockExternalControllerUpdaterClientMockRecorder struct {
	mock *MockExternalControllerUpdaterClient
}

// NewMockExternalControllerUpdaterClient creates a new mock instance.
func NewMockExternalControllerUpdaterClient(ctrl *gomock.Controller) *MockExternalControllerUpdaterClient {
	mock := &MockExternalControllerUpdaterClient{ctrl: ctrl}
	mock.recorder = &MockExternalControllerUpdaterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalControllerUpdaterClient) EXPECT() *MockExternalControllerUpdaterClientMockRecorder {
	return m.recorder
}

// ExternalControllerInfo mocks base method.
func (m *MockExternalControllerUpdaterClient) ExternalControllerInfo(arg0 string) (*crossmodel.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalControllerInfo", arg0)
	ret0, _ := ret[0].(*crossmodel.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalControllerInfo indicates an expected call of ExternalControllerInfo.
func (mr *MockExternalControllerUpdaterClientMockRecorder) ExternalControllerInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalControllerInfo", reflect.TypeOf((*MockExternalControllerUpdaterClient)(nil).ExternalControllerInfo), arg0)
}

// SetExternalControllerInfo mocks base method.
func (m *MockExternalControllerUpdaterClient) SetExternalControllerInfo(arg0 crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExternalControllerInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExternalControllerInfo indicates an expected call of SetExternalControllerInfo.
func (mr *MockExternalControllerUpdaterClientMockRecorder) SetExternalControllerInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExternalControllerInfo", reflect.TypeOf((*MockExternalControllerUpdaterClient)(nil).SetExternalControllerInfo), arg0)
}

// WatchExternalControllers mocks base method.
func (m *MockExternalControllerUpdaterClient) WatchExternalControllers() (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchExternalControllers")
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchExternalControllers indicates an expected call of WatchExternalControllers.
func (mr *MockExternalControllerUpdaterClientMockRecorder) WatchExternalControllers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchExternalControllers", reflect.TypeOf((*MockExternalControllerUpdaterClient)(nil).WatchExternalControllers))
}
