// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/caasfirewaller (interfaces: CAASBroker,PortMutator,ServiceUpdater)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/broker_mock.go github.com/juju/juju/internal/worker/caasfirewaller CAASBroker,PortMutator,ServiceUpdater
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	k8s "github.com/juju/juju/core/k8s"
	gomock "go.uber.org/mock/gomock"
)

// MockCAASBroker is a mock of CAASBroker interface.
type MockCAASBroker struct {
	ctrl     *gomock.Controller
	recorder *MockCAASBrokerMockRecorder
}

// MockCAASBrokerMockRecorder is the mock recorder for MockCAASBroker.
type MockCAASBrokerMockRecorder struct {
	mock *MockCAASBroker
}

// NewMockCAASBroker creates a new mock instance.
func NewMockCAASBroker(ctrl *gomock.Controller) *MockCAASBroker {
	mock := &MockCAASBroker{ctrl: ctrl}
	mock.recorder = &MockCAASBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAASBroker) EXPECT() *MockCAASBrokerMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockCAASBroker) Application(arg0 string, arg1 k8s.K8sDeploymentType) caas.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0, arg1)
	ret0, _ := ret[0].(caas.Application)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockCAASBrokerMockRecorder) Application(arg0, arg1 any) *MockCAASBrokerApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockCAASBroker)(nil).Application), arg0, arg1)
	return &MockCAASBrokerApplicationCall{Call: call}
}

// MockCAASBrokerApplicationCall wrap *gomock.Call
type MockCAASBrokerApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASBrokerApplicationCall) Return(arg0 caas.Application) *MockCAASBrokerApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASBrokerApplicationCall) Do(f func(string, k8s.K8sDeploymentType) caas.Application) *MockCAASBrokerApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASBrokerApplicationCall) DoAndReturn(f func(string, k8s.K8sDeploymentType) caas.Application) *MockCAASBrokerApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPortMutator is a mock of PortMutator interface.
type MockPortMutator struct {
	ctrl     *gomock.Controller
	recorder *MockPortMutatorMockRecorder
}

// MockPortMutatorMockRecorder is the mock recorder for MockPortMutator.
type MockPortMutatorMockRecorder struct {
	mock *MockPortMutator
}

// NewMockPortMutator creates a new mock instance.
func NewMockPortMutator(ctrl *gomock.Controller) *MockPortMutator {
	mock := &MockPortMutator{ctrl: ctrl}
	mock.recorder = &MockPortMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortMutator) EXPECT() *MockPortMutatorMockRecorder {
	return m.recorder
}

// UpdatePorts mocks base method.
func (m *MockPortMutator) UpdatePorts(arg0 []caas.ServicePort, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePorts indicates an expected call of UpdatePorts.
func (mr *MockPortMutatorMockRecorder) UpdatePorts(arg0, arg1 any) *MockPortMutatorUpdatePortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePorts", reflect.TypeOf((*MockPortMutator)(nil).UpdatePorts), arg0, arg1)
	return &MockPortMutatorUpdatePortsCall{Call: call}
}

// MockPortMutatorUpdatePortsCall wrap *gomock.Call
type MockPortMutatorUpdatePortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortMutatorUpdatePortsCall) Return(arg0 error) *MockPortMutatorUpdatePortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortMutatorUpdatePortsCall) Do(f func([]caas.ServicePort, bool) error) *MockPortMutatorUpdatePortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortMutatorUpdatePortsCall) DoAndReturn(f func([]caas.ServicePort, bool) error) *MockPortMutatorUpdatePortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServiceUpdater is a mock of ServiceUpdater interface.
type MockServiceUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUpdaterMockRecorder
}

// MockServiceUpdaterMockRecorder is the mock recorder for MockServiceUpdater.
type MockServiceUpdaterMockRecorder struct {
	mock *MockServiceUpdater
}

// NewMockServiceUpdater creates a new mock instance.
func NewMockServiceUpdater(ctrl *gomock.Controller) *MockServiceUpdater {
	mock := &MockServiceUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUpdater) EXPECT() *MockServiceUpdaterMockRecorder {
	return m.recorder
}

// UpdateService mocks base method.
func (m *MockServiceUpdater) UpdateService(arg0 caas.ServiceParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockServiceUpdaterMockRecorder) UpdateService(arg0 any) *MockServiceUpdaterUpdateServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockServiceUpdater)(nil).UpdateService), arg0)
	return &MockServiceUpdaterUpdateServiceCall{Call: call}
}

// MockServiceUpdaterUpdateServiceCall wrap *gomock.Call
type MockServiceUpdaterUpdateServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdaterUpdateServiceCall) Return(arg0 error) *MockServiceUpdaterUpdateServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdaterUpdateServiceCall) Do(f func(caas.ServiceParam) error) *MockServiceUpdaterUpdateServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdaterUpdateServiceCall) DoAndReturn(f func(caas.ServiceParam) error) *MockServiceUpdaterUpdateServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
