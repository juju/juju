// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/agent (interfaces: Agent,Config,ConfigSetter)
//
// Generated by this command:
//
//	mockgen -typed -package upgradedatabase -destination agent_mock_test.go github.com/juju/juju/agent Agent,Config,ConfigSetter
//

// Package upgradedatabase is a generated GoMock package.
package upgradedatabase

import (
	reflect "reflect"
	time "time"

	agent "github.com/juju/juju/agent"
	api "github.com/juju/juju/api"
	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	network "github.com/juju/juju/core/network"
	objectstore "github.com/juju/juju/core/objectstore"
	semversion "github.com/juju/juju/core/semversion"
	mongo "github.com/juju/juju/internal/mongo"
	names "github.com/juju/names/v6"
	shell "github.com/juju/utils/v4/shell"
	gomock "go.uber.org/mock/gomock"
)

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// ChangeConfig mocks base method.
func (m *MockAgent) ChangeConfig(arg0 agent.ConfigMutator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeConfig indicates an expected call of ChangeConfig.
func (mr *MockAgentMockRecorder) ChangeConfig(arg0 any) *MockAgentChangeConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeConfig", reflect.TypeOf((*MockAgent)(nil).ChangeConfig), arg0)
	return &MockAgentChangeConfigCall{Call: call}
}

// MockAgentChangeConfigCall wrap *gomock.Call
type MockAgentChangeConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentChangeConfigCall) Return(arg0 error) *MockAgentChangeConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentChangeConfigCall) Do(f func(agent.ConfigMutator) error) *MockAgentChangeConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentChangeConfigCall) DoAndReturn(f func(agent.ConfigMutator) error) *MockAgentChangeConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentConfig mocks base method.
func (m *MockAgent) CurrentConfig() agent.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentConfig")
	ret0, _ := ret[0].(agent.Config)
	return ret0
}

// CurrentConfig indicates an expected call of CurrentConfig.
func (mr *MockAgentMockRecorder) CurrentConfig() *MockAgentCurrentConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentConfig", reflect.TypeOf((*MockAgent)(nil).CurrentConfig))
	return &MockAgentCurrentConfigCall{Call: call}
}

// MockAgentCurrentConfigCall wrap *gomock.Call
type MockAgentCurrentConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentCurrentConfigCall) Return(arg0 agent.Config) *MockAgentCurrentConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentCurrentConfigCall) Do(f func() agent.Config) *MockAgentCurrentConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentCurrentConfigCall) DoAndReturn(f func() agent.Config) *MockAgentCurrentConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// APIAddresses mocks base method.
func (m *MockConfig) APIAddresses() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIAddresses")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIAddresses indicates an expected call of APIAddresses.
func (mr *MockConfigMockRecorder) APIAddresses() *MockConfigAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIAddresses", reflect.TypeOf((*MockConfig)(nil).APIAddresses))
	return &MockConfigAPIAddressesCall{Call: call}
}

// MockConfigAPIAddressesCall wrap *gomock.Call
type MockConfigAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAPIAddressesCall) Return(arg0 []string, arg1 error) *MockConfigAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAPIAddressesCall) Do(f func() ([]string, error)) *MockConfigAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAPIAddressesCall) DoAndReturn(f func() ([]string, error)) *MockConfigAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// APIInfo mocks base method.
func (m *MockConfig) APIInfo() (*api.Info, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIInfo")
	ret0, _ := ret[0].(*api.Info)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// APIInfo indicates an expected call of APIInfo.
func (mr *MockConfigMockRecorder) APIInfo() *MockConfigAPIInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIInfo", reflect.TypeOf((*MockConfig)(nil).APIInfo))
	return &MockConfigAPIInfoCall{Call: call}
}

// MockConfigAPIInfoCall wrap *gomock.Call
type MockConfigAPIInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAPIInfoCall) Return(arg0 *api.Info, arg1 bool) *MockConfigAPIInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAPIInfoCall) Do(f func() (*api.Info, bool)) *MockConfigAPIInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAPIInfoCall) DoAndReturn(f func() (*api.Info, bool)) *MockConfigAPIInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentLogfileMaxBackups mocks base method.
func (m *MockConfig) AgentLogfileMaxBackups() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogfileMaxBackups")
	ret0, _ := ret[0].(int)
	return ret0
}

// AgentLogfileMaxBackups indicates an expected call of AgentLogfileMaxBackups.
func (mr *MockConfigMockRecorder) AgentLogfileMaxBackups() *MockConfigAgentLogfileMaxBackupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogfileMaxBackups", reflect.TypeOf((*MockConfig)(nil).AgentLogfileMaxBackups))
	return &MockConfigAgentLogfileMaxBackupsCall{Call: call}
}

// MockConfigAgentLogfileMaxBackupsCall wrap *gomock.Call
type MockConfigAgentLogfileMaxBackupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAgentLogfileMaxBackupsCall) Return(arg0 int) *MockConfigAgentLogfileMaxBackupsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAgentLogfileMaxBackupsCall) Do(f func() int) *MockConfigAgentLogfileMaxBackupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAgentLogfileMaxBackupsCall) DoAndReturn(f func() int) *MockConfigAgentLogfileMaxBackupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentLogfileMaxSizeMB mocks base method.
func (m *MockConfig) AgentLogfileMaxSizeMB() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogfileMaxSizeMB")
	ret0, _ := ret[0].(int)
	return ret0
}

// AgentLogfileMaxSizeMB indicates an expected call of AgentLogfileMaxSizeMB.
func (mr *MockConfigMockRecorder) AgentLogfileMaxSizeMB() *MockConfigAgentLogfileMaxSizeMBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogfileMaxSizeMB", reflect.TypeOf((*MockConfig)(nil).AgentLogfileMaxSizeMB))
	return &MockConfigAgentLogfileMaxSizeMBCall{Call: call}
}

// MockConfigAgentLogfileMaxSizeMBCall wrap *gomock.Call
type MockConfigAgentLogfileMaxSizeMBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigAgentLogfileMaxSizeMBCall) Return(arg0 int) *MockConfigAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigAgentLogfileMaxSizeMBCall) Do(f func() int) *MockConfigAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigAgentLogfileMaxSizeMBCall) DoAndReturn(f func() int) *MockConfigAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CACert mocks base method.
func (m *MockConfig) CACert() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CACert")
	ret0, _ := ret[0].(string)
	return ret0
}

// CACert indicates an expected call of CACert.
func (mr *MockConfigMockRecorder) CACert() *MockConfigCACertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CACert", reflect.TypeOf((*MockConfig)(nil).CACert))
	return &MockConfigCACertCall{Call: call}
}

// MockConfigCACertCall wrap *gomock.Call
type MockConfigCACertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigCACertCall) Return(arg0 string) *MockConfigCACertCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigCACertCall) Do(f func() string) *MockConfigCACertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigCACertCall) DoAndReturn(f func() string) *MockConfigCACertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Controller mocks base method.
func (m *MockConfig) Controller() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// Controller indicates an expected call of Controller.
func (mr *MockConfigMockRecorder) Controller() *MockConfigControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockConfig)(nil).Controller))
	return &MockConfigControllerCall{Call: call}
}

// MockConfigControllerCall wrap *gomock.Call
type MockConfigControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigControllerCall) Return(arg0 names.ControllerTag) *MockConfigControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigControllerCall) Do(f func() names.ControllerTag) *MockConfigControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigControllerCall) DoAndReturn(f func() names.ControllerTag) *MockConfigControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DataDir mocks base method.
func (m *MockConfig) DataDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DataDir indicates an expected call of DataDir.
func (mr *MockConfigMockRecorder) DataDir() *MockConfigDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataDir", reflect.TypeOf((*MockConfig)(nil).DataDir))
	return &MockConfigDataDirCall{Call: call}
}

// MockConfigDataDirCall wrap *gomock.Call
type MockConfigDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDataDirCall) Return(arg0 string) *MockConfigDataDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDataDirCall) Do(f func() string) *MockConfigDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDataDirCall) DoAndReturn(f func() string) *MockConfigDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Dir mocks base method.
func (m *MockConfig) Dir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockConfigMockRecorder) Dir() *MockConfigDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockConfig)(nil).Dir))
	return &MockConfigDirCall{Call: call}
}

// MockConfigDirCall wrap *gomock.Call
type MockConfigDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDirCall) Return(arg0 string) *MockConfigDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDirCall) Do(f func() string) *MockConfigDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDirCall) DoAndReturn(f func() string) *MockConfigDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DqlitePort mocks base method.
func (m *MockConfig) DqlitePort() (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DqlitePort")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DqlitePort indicates an expected call of DqlitePort.
func (mr *MockConfigMockRecorder) DqlitePort() *MockConfigDqlitePortCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DqlitePort", reflect.TypeOf((*MockConfig)(nil).DqlitePort))
	return &MockConfigDqlitePortCall{Call: call}
}

// MockConfigDqlitePortCall wrap *gomock.Call
type MockConfigDqlitePortCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDqlitePortCall) Return(arg0 int, arg1 bool) *MockConfigDqlitePortCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDqlitePortCall) Do(f func() (int, bool)) *MockConfigDqlitePortCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDqlitePortCall) DoAndReturn(f func() (int, bool)) *MockConfigDqlitePortCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Jobs mocks base method.
func (m *MockConfig) Jobs() []model.MachineJob {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]model.MachineJob)
	return ret0
}

// Jobs indicates an expected call of Jobs.
func (mr *MockConfigMockRecorder) Jobs() *MockConfigJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockConfig)(nil).Jobs))
	return &MockConfigJobsCall{Call: call}
}

// MockConfigJobsCall wrap *gomock.Call
type MockConfigJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigJobsCall) Return(arg0 []model.MachineJob) *MockConfigJobsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigJobsCall) Do(f func() []model.MachineJob) *MockConfigJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigJobsCall) DoAndReturn(f func() []model.MachineJob) *MockConfigJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JujuDBSnapChannel mocks base method.
func (m *MockConfig) JujuDBSnapChannel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JujuDBSnapChannel")
	ret0, _ := ret[0].(string)
	return ret0
}

// JujuDBSnapChannel indicates an expected call of JujuDBSnapChannel.
func (mr *MockConfigMockRecorder) JujuDBSnapChannel() *MockConfigJujuDBSnapChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JujuDBSnapChannel", reflect.TypeOf((*MockConfig)(nil).JujuDBSnapChannel))
	return &MockConfigJujuDBSnapChannelCall{Call: call}
}

// MockConfigJujuDBSnapChannelCall wrap *gomock.Call
type MockConfigJujuDBSnapChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigJujuDBSnapChannelCall) Return(arg0 string) *MockConfigJujuDBSnapChannelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigJujuDBSnapChannelCall) Do(f func() string) *MockConfigJujuDBSnapChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigJujuDBSnapChannelCall) DoAndReturn(f func() string) *MockConfigJujuDBSnapChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LogDir mocks base method.
func (m *MockConfig) LogDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// LogDir indicates an expected call of LogDir.
func (mr *MockConfigMockRecorder) LogDir() *MockConfigLogDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDir", reflect.TypeOf((*MockConfig)(nil).LogDir))
	return &MockConfigLogDirCall{Call: call}
}

// MockConfigLogDirCall wrap *gomock.Call
type MockConfigLogDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigLogDirCall) Return(arg0 string) *MockConfigLogDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigLogDirCall) Do(f func() string) *MockConfigLogDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigLogDirCall) DoAndReturn(f func() string) *MockConfigLogDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoggingConfig mocks base method.
func (m *MockConfig) LoggingConfig() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggingConfig")
	ret0, _ := ret[0].(string)
	return ret0
}

// LoggingConfig indicates an expected call of LoggingConfig.
func (mr *MockConfigMockRecorder) LoggingConfig() *MockConfigLoggingConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggingConfig", reflect.TypeOf((*MockConfig)(nil).LoggingConfig))
	return &MockConfigLoggingConfigCall{Call: call}
}

// MockConfigLoggingConfigCall wrap *gomock.Call
type MockConfigLoggingConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigLoggingConfigCall) Return(arg0 string) *MockConfigLoggingConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigLoggingConfigCall) Do(f func() string) *MockConfigLoggingConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigLoggingConfigCall) DoAndReturn(f func() string) *MockConfigLoggingConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MetricsSpoolDir mocks base method.
func (m *MockConfig) MetricsSpoolDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsSpoolDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// MetricsSpoolDir indicates an expected call of MetricsSpoolDir.
func (mr *MockConfigMockRecorder) MetricsSpoolDir() *MockConfigMetricsSpoolDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsSpoolDir", reflect.TypeOf((*MockConfig)(nil).MetricsSpoolDir))
	return &MockConfigMetricsSpoolDirCall{Call: call}
}

// MockConfigMetricsSpoolDirCall wrap *gomock.Call
type MockConfigMetricsSpoolDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMetricsSpoolDirCall) Return(arg0 string) *MockConfigMetricsSpoolDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMetricsSpoolDirCall) Do(f func() string) *MockConfigMetricsSpoolDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMetricsSpoolDirCall) DoAndReturn(f func() string) *MockConfigMetricsSpoolDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockConfig) Model() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockConfigMockRecorder) Model() *MockConfigModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockConfig)(nil).Model))
	return &MockConfigModelCall{Call: call}
}

// MockConfigModelCall wrap *gomock.Call
type MockConfigModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigModelCall) Return(arg0 names.ModelTag) *MockConfigModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigModelCall) Do(f func() names.ModelTag) *MockConfigModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigModelCall) DoAndReturn(f func() names.ModelTag) *MockConfigModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MongoInfo mocks base method.
func (m *MockConfig) MongoInfo() (*mongo.MongoInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoInfo")
	ret0, _ := ret[0].(*mongo.MongoInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// MongoInfo indicates an expected call of MongoInfo.
func (mr *MockConfigMockRecorder) MongoInfo() *MockConfigMongoInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoInfo", reflect.TypeOf((*MockConfig)(nil).MongoInfo))
	return &MockConfigMongoInfoCall{Call: call}
}

// MockConfigMongoInfoCall wrap *gomock.Call
type MockConfigMongoInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMongoInfoCall) Return(arg0 *mongo.MongoInfo, arg1 bool) *MockConfigMongoInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMongoInfoCall) Do(f func() (*mongo.MongoInfo, bool)) *MockConfigMongoInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMongoInfoCall) DoAndReturn(f func() (*mongo.MongoInfo, bool)) *MockConfigMongoInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Nonce mocks base method.
func (m *MockConfig) Nonce() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(string)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockConfigMockRecorder) Nonce() *MockConfigNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockConfig)(nil).Nonce))
	return &MockConfigNonceCall{Call: call}
}

// MockConfigNonceCall wrap *gomock.Call
type MockConfigNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigNonceCall) Return(arg0 string) *MockConfigNonceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigNonceCall) Do(f func() string) *MockConfigNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigNonceCall) DoAndReturn(f func() string) *MockConfigNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ObjectStoreType mocks base method.
func (m *MockConfig) ObjectStoreType() objectstore.BackendType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStoreType")
	ret0, _ := ret[0].(objectstore.BackendType)
	return ret0
}

// ObjectStoreType indicates an expected call of ObjectStoreType.
func (mr *MockConfigMockRecorder) ObjectStoreType() *MockConfigObjectStoreTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStoreType", reflect.TypeOf((*MockConfig)(nil).ObjectStoreType))
	return &MockConfigObjectStoreTypeCall{Call: call}
}

// MockConfigObjectStoreTypeCall wrap *gomock.Call
type MockConfigObjectStoreTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigObjectStoreTypeCall) Return(arg0 objectstore.BackendType) *MockConfigObjectStoreTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigObjectStoreTypeCall) Do(f func() objectstore.BackendType) *MockConfigObjectStoreTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigObjectStoreTypeCall) DoAndReturn(f func() objectstore.BackendType) *MockConfigObjectStoreTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OldPassword mocks base method.
func (m *MockConfig) OldPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// OldPassword indicates an expected call of OldPassword.
func (mr *MockConfigMockRecorder) OldPassword() *MockConfigOldPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldPassword", reflect.TypeOf((*MockConfig)(nil).OldPassword))
	return &MockConfigOldPasswordCall{Call: call}
}

// MockConfigOldPasswordCall wrap *gomock.Call
type MockConfigOldPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOldPasswordCall) Return(arg0 string) *MockConfigOldPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOldPasswordCall) Do(f func() string) *MockConfigOldPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOldPasswordCall) DoAndReturn(f func() string) *MockConfigOldPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryEnabled mocks base method.
func (m *MockConfig) OpenTelemetryEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryEnabled indicates an expected call of OpenTelemetryEnabled.
func (mr *MockConfigMockRecorder) OpenTelemetryEnabled() *MockConfigOpenTelemetryEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryEnabled", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryEnabled))
	return &MockConfigOpenTelemetryEnabledCall{Call: call}
}

// MockConfigOpenTelemetryEnabledCall wrap *gomock.Call
type MockConfigOpenTelemetryEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryEnabledCall) Return(arg0 bool) *MockConfigOpenTelemetryEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryEnabledCall) Do(f func() bool) *MockConfigOpenTelemetryEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryEnabledCall) DoAndReturn(f func() bool) *MockConfigOpenTelemetryEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryEndpoint mocks base method.
func (m *MockConfig) OpenTelemetryEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// OpenTelemetryEndpoint indicates an expected call of OpenTelemetryEndpoint.
func (mr *MockConfigMockRecorder) OpenTelemetryEndpoint() *MockConfigOpenTelemetryEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryEndpoint", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryEndpoint))
	return &MockConfigOpenTelemetryEndpointCall{Call: call}
}

// MockConfigOpenTelemetryEndpointCall wrap *gomock.Call
type MockConfigOpenTelemetryEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryEndpointCall) Return(arg0 string) *MockConfigOpenTelemetryEndpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryEndpointCall) Do(f func() string) *MockConfigOpenTelemetryEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryEndpointCall) DoAndReturn(f func() string) *MockConfigOpenTelemetryEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryInsecure mocks base method.
func (m *MockConfig) OpenTelemetryInsecure() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryInsecure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryInsecure indicates an expected call of OpenTelemetryInsecure.
func (mr *MockConfigMockRecorder) OpenTelemetryInsecure() *MockConfigOpenTelemetryInsecureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryInsecure", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryInsecure))
	return &MockConfigOpenTelemetryInsecureCall{Call: call}
}

// MockConfigOpenTelemetryInsecureCall wrap *gomock.Call
type MockConfigOpenTelemetryInsecureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryInsecureCall) Return(arg0 bool) *MockConfigOpenTelemetryInsecureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryInsecureCall) Do(f func() bool) *MockConfigOpenTelemetryInsecureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryInsecureCall) DoAndReturn(f func() bool) *MockConfigOpenTelemetryInsecureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetrySampleRatio mocks base method.
func (m *MockConfig) OpenTelemetrySampleRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetrySampleRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// OpenTelemetrySampleRatio indicates an expected call of OpenTelemetrySampleRatio.
func (mr *MockConfigMockRecorder) OpenTelemetrySampleRatio() *MockConfigOpenTelemetrySampleRatioCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetrySampleRatio", reflect.TypeOf((*MockConfig)(nil).OpenTelemetrySampleRatio))
	return &MockConfigOpenTelemetrySampleRatioCall{Call: call}
}

// MockConfigOpenTelemetrySampleRatioCall wrap *gomock.Call
type MockConfigOpenTelemetrySampleRatioCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetrySampleRatioCall) Return(arg0 float64) *MockConfigOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetrySampleRatioCall) Do(f func() float64) *MockConfigOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetrySampleRatioCall) DoAndReturn(f func() float64) *MockConfigOpenTelemetrySampleRatioCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryStackTraces mocks base method.
func (m *MockConfig) OpenTelemetryStackTraces() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryStackTraces")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryStackTraces indicates an expected call of OpenTelemetryStackTraces.
func (mr *MockConfigMockRecorder) OpenTelemetryStackTraces() *MockConfigOpenTelemetryStackTracesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryStackTraces", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryStackTraces))
	return &MockConfigOpenTelemetryStackTracesCall{Call: call}
}

// MockConfigOpenTelemetryStackTracesCall wrap *gomock.Call
type MockConfigOpenTelemetryStackTracesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryStackTracesCall) Return(arg0 bool) *MockConfigOpenTelemetryStackTracesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryStackTracesCall) Do(f func() bool) *MockConfigOpenTelemetryStackTracesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryStackTracesCall) DoAndReturn(f func() bool) *MockConfigOpenTelemetryStackTracesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryTailSamplingThreshold mocks base method.
func (m *MockConfig) OpenTelemetryTailSamplingThreshold() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryTailSamplingThreshold")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// OpenTelemetryTailSamplingThreshold indicates an expected call of OpenTelemetryTailSamplingThreshold.
func (mr *MockConfigMockRecorder) OpenTelemetryTailSamplingThreshold() *MockConfigOpenTelemetryTailSamplingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryTailSamplingThreshold", reflect.TypeOf((*MockConfig)(nil).OpenTelemetryTailSamplingThreshold))
	return &MockConfigOpenTelemetryTailSamplingThresholdCall{Call: call}
}

// MockConfigOpenTelemetryTailSamplingThresholdCall wrap *gomock.Call
type MockConfigOpenTelemetryTailSamplingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigOpenTelemetryTailSamplingThresholdCall) Return(arg0 time.Duration) *MockConfigOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigOpenTelemetryTailSamplingThresholdCall) Do(f func() time.Duration) *MockConfigOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigOpenTelemetryTailSamplingThresholdCall) DoAndReturn(f func() time.Duration) *MockConfigOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTracingEnabled mocks base method.
func (m *MockConfig) QueryTracingEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTracingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// QueryTracingEnabled indicates an expected call of QueryTracingEnabled.
func (mr *MockConfigMockRecorder) QueryTracingEnabled() *MockConfigQueryTracingEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTracingEnabled", reflect.TypeOf((*MockConfig)(nil).QueryTracingEnabled))
	return &MockConfigQueryTracingEnabledCall{Call: call}
}

// MockConfigQueryTracingEnabledCall wrap *gomock.Call
type MockConfigQueryTracingEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigQueryTracingEnabledCall) Return(arg0 bool) *MockConfigQueryTracingEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigQueryTracingEnabledCall) Do(f func() bool) *MockConfigQueryTracingEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigQueryTracingEnabledCall) DoAndReturn(f func() bool) *MockConfigQueryTracingEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTracingThreshold mocks base method.
func (m *MockConfig) QueryTracingThreshold() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTracingThreshold")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// QueryTracingThreshold indicates an expected call of QueryTracingThreshold.
func (mr *MockConfigMockRecorder) QueryTracingThreshold() *MockConfigQueryTracingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTracingThreshold", reflect.TypeOf((*MockConfig)(nil).QueryTracingThreshold))
	return &MockConfigQueryTracingThresholdCall{Call: call}
}

// MockConfigQueryTracingThresholdCall wrap *gomock.Call
type MockConfigQueryTracingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigQueryTracingThresholdCall) Return(arg0 time.Duration) *MockConfigQueryTracingThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigQueryTracingThresholdCall) Do(f func() time.Duration) *MockConfigQueryTracingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigQueryTracingThresholdCall) DoAndReturn(f func() time.Duration) *MockConfigQueryTracingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateServingInfo mocks base method.
func (m *MockConfig) StateServingInfo() (controller.StateServingInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateServingInfo")
	ret0, _ := ret[0].(controller.StateServingInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// StateServingInfo indicates an expected call of StateServingInfo.
func (mr *MockConfigMockRecorder) StateServingInfo() *MockConfigStateServingInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateServingInfo", reflect.TypeOf((*MockConfig)(nil).StateServingInfo))
	return &MockConfigStateServingInfoCall{Call: call}
}

// MockConfigStateServingInfoCall wrap *gomock.Call
type MockConfigStateServingInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigStateServingInfoCall) Return(arg0 controller.StateServingInfo, arg1 bool) *MockConfigStateServingInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigStateServingInfoCall) Do(f func() (controller.StateServingInfo, bool)) *MockConfigStateServingInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigStateServingInfoCall) DoAndReturn(f func() (controller.StateServingInfo, bool)) *MockConfigStateServingInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SystemIdentityPath mocks base method.
func (m *MockConfig) SystemIdentityPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemIdentityPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// SystemIdentityPath indicates an expected call of SystemIdentityPath.
func (mr *MockConfigMockRecorder) SystemIdentityPath() *MockConfigSystemIdentityPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemIdentityPath", reflect.TypeOf((*MockConfig)(nil).SystemIdentityPath))
	return &MockConfigSystemIdentityPathCall{Call: call}
}

// MockConfigSystemIdentityPathCall wrap *gomock.Call
type MockConfigSystemIdentityPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSystemIdentityPathCall) Return(arg0 string) *MockConfigSystemIdentityPathCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSystemIdentityPathCall) Do(f func() string) *MockConfigSystemIdentityPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSystemIdentityPathCall) DoAndReturn(f func() string) *MockConfigSystemIdentityPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockConfig) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockConfigMockRecorder) Tag() *MockConfigTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockConfig)(nil).Tag))
	return &MockConfigTagCall{Call: call}
}

// MockConfigTagCall wrap *gomock.Call
type MockConfigTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigTagCall) Return(arg0 names.Tag) *MockConfigTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigTagCall) Do(f func() names.Tag) *MockConfigTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigTagCall) DoAndReturn(f func() names.Tag) *MockConfigTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TransientDataDir mocks base method.
func (m *MockConfig) TransientDataDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransientDataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// TransientDataDir indicates an expected call of TransientDataDir.
func (mr *MockConfigMockRecorder) TransientDataDir() *MockConfigTransientDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransientDataDir", reflect.TypeOf((*MockConfig)(nil).TransientDataDir))
	return &MockConfigTransientDataDirCall{Call: call}
}

// MockConfigTransientDataDirCall wrap *gomock.Call
type MockConfigTransientDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigTransientDataDirCall) Return(arg0 string) *MockConfigTransientDataDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigTransientDataDirCall) Do(f func() string) *MockConfigTransientDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigTransientDataDirCall) DoAndReturn(f func() string) *MockConfigTransientDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradedToVersion mocks base method.
func (m *MockConfig) UpgradedToVersion() semversion.Number {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradedToVersion")
	ret0, _ := ret[0].(semversion.Number)
	return ret0
}

// UpgradedToVersion indicates an expected call of UpgradedToVersion.
func (mr *MockConfigMockRecorder) UpgradedToVersion() *MockConfigUpgradedToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradedToVersion", reflect.TypeOf((*MockConfig)(nil).UpgradedToVersion))
	return &MockConfigUpgradedToVersionCall{Call: call}
}

// MockConfigUpgradedToVersionCall wrap *gomock.Call
type MockConfigUpgradedToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigUpgradedToVersionCall) Return(arg0 semversion.Number) *MockConfigUpgradedToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigUpgradedToVersionCall) Do(f func() semversion.Number) *MockConfigUpgradedToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigUpgradedToVersionCall) DoAndReturn(f func() semversion.Number) *MockConfigUpgradedToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockConfig) Value(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockConfigMockRecorder) Value(arg0 any) *MockConfigValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockConfig)(nil).Value), arg0)
	return &MockConfigValueCall{Call: call}
}

// MockConfigValueCall wrap *gomock.Call
type MockConfigValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigValueCall) Return(arg0 string) *MockConfigValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigValueCall) Do(f func(string) string) *MockConfigValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigValueCall) DoAndReturn(f func(string) string) *MockConfigValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteCommands mocks base method.
func (m *MockConfig) WriteCommands(arg0 shell.Renderer) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCommands", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteCommands indicates an expected call of WriteCommands.
func (mr *MockConfigMockRecorder) WriteCommands(arg0 any) *MockConfigWriteCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCommands", reflect.TypeOf((*MockConfig)(nil).WriteCommands), arg0)
	return &MockConfigWriteCommandsCall{Call: call}
}

// MockConfigWriteCommandsCall wrap *gomock.Call
type MockConfigWriteCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigWriteCommandsCall) Return(arg0 []string, arg1 error) *MockConfigWriteCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigWriteCommandsCall) Do(f func(shell.Renderer) ([]string, error)) *MockConfigWriteCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigWriteCommandsCall) DoAndReturn(f func(shell.Renderer) ([]string, error)) *MockConfigWriteCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConfigSetter is a mock of ConfigSetter interface.
type MockConfigSetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSetterMockRecorder
}

// MockConfigSetterMockRecorder is the mock recorder for MockConfigSetter.
type MockConfigSetterMockRecorder struct {
	mock *MockConfigSetter
}

// NewMockConfigSetter creates a new mock instance.
func NewMockConfigSetter(ctrl *gomock.Controller) *MockConfigSetter {
	mock := &MockConfigSetter{ctrl: ctrl}
	mock.recorder = &MockConfigSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigSetter) EXPECT() *MockConfigSetterMockRecorder {
	return m.recorder
}

// APIAddresses mocks base method.
func (m *MockConfigSetter) APIAddresses() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIAddresses")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIAddresses indicates an expected call of APIAddresses.
func (mr *MockConfigSetterMockRecorder) APIAddresses() *MockConfigSetterAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIAddresses", reflect.TypeOf((*MockConfigSetter)(nil).APIAddresses))
	return &MockConfigSetterAPIAddressesCall{Call: call}
}

// MockConfigSetterAPIAddressesCall wrap *gomock.Call
type MockConfigSetterAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterAPIAddressesCall) Return(arg0 []string, arg1 error) *MockConfigSetterAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterAPIAddressesCall) Do(f func() ([]string, error)) *MockConfigSetterAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterAPIAddressesCall) DoAndReturn(f func() ([]string, error)) *MockConfigSetterAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// APIInfo mocks base method.
func (m *MockConfigSetter) APIInfo() (*api.Info, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIInfo")
	ret0, _ := ret[0].(*api.Info)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// APIInfo indicates an expected call of APIInfo.
func (mr *MockConfigSetterMockRecorder) APIInfo() *MockConfigSetterAPIInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIInfo", reflect.TypeOf((*MockConfigSetter)(nil).APIInfo))
	return &MockConfigSetterAPIInfoCall{Call: call}
}

// MockConfigSetterAPIInfoCall wrap *gomock.Call
type MockConfigSetterAPIInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterAPIInfoCall) Return(arg0 *api.Info, arg1 bool) *MockConfigSetterAPIInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterAPIInfoCall) Do(f func() (*api.Info, bool)) *MockConfigSetterAPIInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterAPIInfoCall) DoAndReturn(f func() (*api.Info, bool)) *MockConfigSetterAPIInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentLogfileMaxBackups mocks base method.
func (m *MockConfigSetter) AgentLogfileMaxBackups() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogfileMaxBackups")
	ret0, _ := ret[0].(int)
	return ret0
}

// AgentLogfileMaxBackups indicates an expected call of AgentLogfileMaxBackups.
func (mr *MockConfigSetterMockRecorder) AgentLogfileMaxBackups() *MockConfigSetterAgentLogfileMaxBackupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogfileMaxBackups", reflect.TypeOf((*MockConfigSetter)(nil).AgentLogfileMaxBackups))
	return &MockConfigSetterAgentLogfileMaxBackupsCall{Call: call}
}

// MockConfigSetterAgentLogfileMaxBackupsCall wrap *gomock.Call
type MockConfigSetterAgentLogfileMaxBackupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterAgentLogfileMaxBackupsCall) Return(arg0 int) *MockConfigSetterAgentLogfileMaxBackupsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterAgentLogfileMaxBackupsCall) Do(f func() int) *MockConfigSetterAgentLogfileMaxBackupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterAgentLogfileMaxBackupsCall) DoAndReturn(f func() int) *MockConfigSetterAgentLogfileMaxBackupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentLogfileMaxSizeMB mocks base method.
func (m *MockConfigSetter) AgentLogfileMaxSizeMB() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentLogfileMaxSizeMB")
	ret0, _ := ret[0].(int)
	return ret0
}

// AgentLogfileMaxSizeMB indicates an expected call of AgentLogfileMaxSizeMB.
func (mr *MockConfigSetterMockRecorder) AgentLogfileMaxSizeMB() *MockConfigSetterAgentLogfileMaxSizeMBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentLogfileMaxSizeMB", reflect.TypeOf((*MockConfigSetter)(nil).AgentLogfileMaxSizeMB))
	return &MockConfigSetterAgentLogfileMaxSizeMBCall{Call: call}
}

// MockConfigSetterAgentLogfileMaxSizeMBCall wrap *gomock.Call
type MockConfigSetterAgentLogfileMaxSizeMBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterAgentLogfileMaxSizeMBCall) Return(arg0 int) *MockConfigSetterAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterAgentLogfileMaxSizeMBCall) Do(f func() int) *MockConfigSetterAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterAgentLogfileMaxSizeMBCall) DoAndReturn(f func() int) *MockConfigSetterAgentLogfileMaxSizeMBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CACert mocks base method.
func (m *MockConfigSetter) CACert() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CACert")
	ret0, _ := ret[0].(string)
	return ret0
}

// CACert indicates an expected call of CACert.
func (mr *MockConfigSetterMockRecorder) CACert() *MockConfigSetterCACertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CACert", reflect.TypeOf((*MockConfigSetter)(nil).CACert))
	return &MockConfigSetterCACertCall{Call: call}
}

// MockConfigSetterCACertCall wrap *gomock.Call
type MockConfigSetterCACertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterCACertCall) Return(arg0 string) *MockConfigSetterCACertCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterCACertCall) Do(f func() string) *MockConfigSetterCACertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterCACertCall) DoAndReturn(f func() string) *MockConfigSetterCACertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Clone mocks base method.
func (m *MockConfigSetter) Clone() agent.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(agent.Config)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockConfigSetterMockRecorder) Clone() *MockConfigSetterCloneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockConfigSetter)(nil).Clone))
	return &MockConfigSetterCloneCall{Call: call}
}

// MockConfigSetterCloneCall wrap *gomock.Call
type MockConfigSetterCloneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterCloneCall) Return(arg0 agent.Config) *MockConfigSetterCloneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterCloneCall) Do(f func() agent.Config) *MockConfigSetterCloneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterCloneCall) DoAndReturn(f func() agent.Config) *MockConfigSetterCloneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Controller mocks base method.
func (m *MockConfigSetter) Controller() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// Controller indicates an expected call of Controller.
func (mr *MockConfigSetterMockRecorder) Controller() *MockConfigSetterControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockConfigSetter)(nil).Controller))
	return &MockConfigSetterControllerCall{Call: call}
}

// MockConfigSetterControllerCall wrap *gomock.Call
type MockConfigSetterControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterControllerCall) Return(arg0 names.ControllerTag) *MockConfigSetterControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterControllerCall) Do(f func() names.ControllerTag) *MockConfigSetterControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterControllerCall) DoAndReturn(f func() names.ControllerTag) *MockConfigSetterControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DataDir mocks base method.
func (m *MockConfigSetter) DataDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DataDir indicates an expected call of DataDir.
func (mr *MockConfigSetterMockRecorder) DataDir() *MockConfigSetterDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataDir", reflect.TypeOf((*MockConfigSetter)(nil).DataDir))
	return &MockConfigSetterDataDirCall{Call: call}
}

// MockConfigSetterDataDirCall wrap *gomock.Call
type MockConfigSetterDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterDataDirCall) Return(arg0 string) *MockConfigSetterDataDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterDataDirCall) Do(f func() string) *MockConfigSetterDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterDataDirCall) DoAndReturn(f func() string) *MockConfigSetterDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Dir mocks base method.
func (m *MockConfigSetter) Dir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockConfigSetterMockRecorder) Dir() *MockConfigSetterDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockConfigSetter)(nil).Dir))
	return &MockConfigSetterDirCall{Call: call}
}

// MockConfigSetterDirCall wrap *gomock.Call
type MockConfigSetterDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterDirCall) Return(arg0 string) *MockConfigSetterDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterDirCall) Do(f func() string) *MockConfigSetterDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterDirCall) DoAndReturn(f func() string) *MockConfigSetterDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DqlitePort mocks base method.
func (m *MockConfigSetter) DqlitePort() (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DqlitePort")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DqlitePort indicates an expected call of DqlitePort.
func (mr *MockConfigSetterMockRecorder) DqlitePort() *MockConfigSetterDqlitePortCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DqlitePort", reflect.TypeOf((*MockConfigSetter)(nil).DqlitePort))
	return &MockConfigSetterDqlitePortCall{Call: call}
}

// MockConfigSetterDqlitePortCall wrap *gomock.Call
type MockConfigSetterDqlitePortCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterDqlitePortCall) Return(arg0 int, arg1 bool) *MockConfigSetterDqlitePortCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterDqlitePortCall) Do(f func() (int, bool)) *MockConfigSetterDqlitePortCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterDqlitePortCall) DoAndReturn(f func() (int, bool)) *MockConfigSetterDqlitePortCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Jobs mocks base method.
func (m *MockConfigSetter) Jobs() []model.MachineJob {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]model.MachineJob)
	return ret0
}

// Jobs indicates an expected call of Jobs.
func (mr *MockConfigSetterMockRecorder) Jobs() *MockConfigSetterJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockConfigSetter)(nil).Jobs))
	return &MockConfigSetterJobsCall{Call: call}
}

// MockConfigSetterJobsCall wrap *gomock.Call
type MockConfigSetterJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterJobsCall) Return(arg0 []model.MachineJob) *MockConfigSetterJobsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterJobsCall) Do(f func() []model.MachineJob) *MockConfigSetterJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterJobsCall) DoAndReturn(f func() []model.MachineJob) *MockConfigSetterJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// JujuDBSnapChannel mocks base method.
func (m *MockConfigSetter) JujuDBSnapChannel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JujuDBSnapChannel")
	ret0, _ := ret[0].(string)
	return ret0
}

// JujuDBSnapChannel indicates an expected call of JujuDBSnapChannel.
func (mr *MockConfigSetterMockRecorder) JujuDBSnapChannel() *MockConfigSetterJujuDBSnapChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JujuDBSnapChannel", reflect.TypeOf((*MockConfigSetter)(nil).JujuDBSnapChannel))
	return &MockConfigSetterJujuDBSnapChannelCall{Call: call}
}

// MockConfigSetterJujuDBSnapChannelCall wrap *gomock.Call
type MockConfigSetterJujuDBSnapChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterJujuDBSnapChannelCall) Return(arg0 string) *MockConfigSetterJujuDBSnapChannelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterJujuDBSnapChannelCall) Do(f func() string) *MockConfigSetterJujuDBSnapChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterJujuDBSnapChannelCall) DoAndReturn(f func() string) *MockConfigSetterJujuDBSnapChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LogDir mocks base method.
func (m *MockConfigSetter) LogDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// LogDir indicates an expected call of LogDir.
func (mr *MockConfigSetterMockRecorder) LogDir() *MockConfigSetterLogDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDir", reflect.TypeOf((*MockConfigSetter)(nil).LogDir))
	return &MockConfigSetterLogDirCall{Call: call}
}

// MockConfigSetterLogDirCall wrap *gomock.Call
type MockConfigSetterLogDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterLogDirCall) Return(arg0 string) *MockConfigSetterLogDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterLogDirCall) Do(f func() string) *MockConfigSetterLogDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterLogDirCall) DoAndReturn(f func() string) *MockConfigSetterLogDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoggingConfig mocks base method.
func (m *MockConfigSetter) LoggingConfig() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggingConfig")
	ret0, _ := ret[0].(string)
	return ret0
}

// LoggingConfig indicates an expected call of LoggingConfig.
func (mr *MockConfigSetterMockRecorder) LoggingConfig() *MockConfigSetterLoggingConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggingConfig", reflect.TypeOf((*MockConfigSetter)(nil).LoggingConfig))
	return &MockConfigSetterLoggingConfigCall{Call: call}
}

// MockConfigSetterLoggingConfigCall wrap *gomock.Call
type MockConfigSetterLoggingConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterLoggingConfigCall) Return(arg0 string) *MockConfigSetterLoggingConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterLoggingConfigCall) Do(f func() string) *MockConfigSetterLoggingConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterLoggingConfigCall) DoAndReturn(f func() string) *MockConfigSetterLoggingConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MetricsSpoolDir mocks base method.
func (m *MockConfigSetter) MetricsSpoolDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsSpoolDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// MetricsSpoolDir indicates an expected call of MetricsSpoolDir.
func (mr *MockConfigSetterMockRecorder) MetricsSpoolDir() *MockConfigSetterMetricsSpoolDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsSpoolDir", reflect.TypeOf((*MockConfigSetter)(nil).MetricsSpoolDir))
	return &MockConfigSetterMetricsSpoolDirCall{Call: call}
}

// MockConfigSetterMetricsSpoolDirCall wrap *gomock.Call
type MockConfigSetterMetricsSpoolDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterMetricsSpoolDirCall) Return(arg0 string) *MockConfigSetterMetricsSpoolDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterMetricsSpoolDirCall) Do(f func() string) *MockConfigSetterMetricsSpoolDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterMetricsSpoolDirCall) DoAndReturn(f func() string) *MockConfigSetterMetricsSpoolDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockConfigSetter) Model() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockConfigSetterMockRecorder) Model() *MockConfigSetterModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockConfigSetter)(nil).Model))
	return &MockConfigSetterModelCall{Call: call}
}

// MockConfigSetterModelCall wrap *gomock.Call
type MockConfigSetterModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterModelCall) Return(arg0 names.ModelTag) *MockConfigSetterModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterModelCall) Do(f func() names.ModelTag) *MockConfigSetterModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterModelCall) DoAndReturn(f func() names.ModelTag) *MockConfigSetterModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MongoInfo mocks base method.
func (m *MockConfigSetter) MongoInfo() (*mongo.MongoInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoInfo")
	ret0, _ := ret[0].(*mongo.MongoInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// MongoInfo indicates an expected call of MongoInfo.
func (mr *MockConfigSetterMockRecorder) MongoInfo() *MockConfigSetterMongoInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoInfo", reflect.TypeOf((*MockConfigSetter)(nil).MongoInfo))
	return &MockConfigSetterMongoInfoCall{Call: call}
}

// MockConfigSetterMongoInfoCall wrap *gomock.Call
type MockConfigSetterMongoInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterMongoInfoCall) Return(arg0 *mongo.MongoInfo, arg1 bool) *MockConfigSetterMongoInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterMongoInfoCall) Do(f func() (*mongo.MongoInfo, bool)) *MockConfigSetterMongoInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterMongoInfoCall) DoAndReturn(f func() (*mongo.MongoInfo, bool)) *MockConfigSetterMongoInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Nonce mocks base method.
func (m *MockConfigSetter) Nonce() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(string)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockConfigSetterMockRecorder) Nonce() *MockConfigSetterNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockConfigSetter)(nil).Nonce))
	return &MockConfigSetterNonceCall{Call: call}
}

// MockConfigSetterNonceCall wrap *gomock.Call
type MockConfigSetterNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterNonceCall) Return(arg0 string) *MockConfigSetterNonceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterNonceCall) Do(f func() string) *MockConfigSetterNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterNonceCall) DoAndReturn(f func() string) *MockConfigSetterNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ObjectStoreType mocks base method.
func (m *MockConfigSetter) ObjectStoreType() objectstore.BackendType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStoreType")
	ret0, _ := ret[0].(objectstore.BackendType)
	return ret0
}

// ObjectStoreType indicates an expected call of ObjectStoreType.
func (mr *MockConfigSetterMockRecorder) ObjectStoreType() *MockConfigSetterObjectStoreTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStoreType", reflect.TypeOf((*MockConfigSetter)(nil).ObjectStoreType))
	return &MockConfigSetterObjectStoreTypeCall{Call: call}
}

// MockConfigSetterObjectStoreTypeCall wrap *gomock.Call
type MockConfigSetterObjectStoreTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterObjectStoreTypeCall) Return(arg0 objectstore.BackendType) *MockConfigSetterObjectStoreTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterObjectStoreTypeCall) Do(f func() objectstore.BackendType) *MockConfigSetterObjectStoreTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterObjectStoreTypeCall) DoAndReturn(f func() objectstore.BackendType) *MockConfigSetterObjectStoreTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OldPassword mocks base method.
func (m *MockConfigSetter) OldPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// OldPassword indicates an expected call of OldPassword.
func (mr *MockConfigSetterMockRecorder) OldPassword() *MockConfigSetterOldPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldPassword", reflect.TypeOf((*MockConfigSetter)(nil).OldPassword))
	return &MockConfigSetterOldPasswordCall{Call: call}
}

// MockConfigSetterOldPasswordCall wrap *gomock.Call
type MockConfigSetterOldPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterOldPasswordCall) Return(arg0 string) *MockConfigSetterOldPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterOldPasswordCall) Do(f func() string) *MockConfigSetterOldPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterOldPasswordCall) DoAndReturn(f func() string) *MockConfigSetterOldPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryEnabled mocks base method.
func (m *MockConfigSetter) OpenTelemetryEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryEnabled indicates an expected call of OpenTelemetryEnabled.
func (mr *MockConfigSetterMockRecorder) OpenTelemetryEnabled() *MockConfigSetterOpenTelemetryEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryEnabled", reflect.TypeOf((*MockConfigSetter)(nil).OpenTelemetryEnabled))
	return &MockConfigSetterOpenTelemetryEnabledCall{Call: call}
}

// MockConfigSetterOpenTelemetryEnabledCall wrap *gomock.Call
type MockConfigSetterOpenTelemetryEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterOpenTelemetryEnabledCall) Return(arg0 bool) *MockConfigSetterOpenTelemetryEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterOpenTelemetryEnabledCall) Do(f func() bool) *MockConfigSetterOpenTelemetryEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterOpenTelemetryEnabledCall) DoAndReturn(f func() bool) *MockConfigSetterOpenTelemetryEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryEndpoint mocks base method.
func (m *MockConfigSetter) OpenTelemetryEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// OpenTelemetryEndpoint indicates an expected call of OpenTelemetryEndpoint.
func (mr *MockConfigSetterMockRecorder) OpenTelemetryEndpoint() *MockConfigSetterOpenTelemetryEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryEndpoint", reflect.TypeOf((*MockConfigSetter)(nil).OpenTelemetryEndpoint))
	return &MockConfigSetterOpenTelemetryEndpointCall{Call: call}
}

// MockConfigSetterOpenTelemetryEndpointCall wrap *gomock.Call
type MockConfigSetterOpenTelemetryEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterOpenTelemetryEndpointCall) Return(arg0 string) *MockConfigSetterOpenTelemetryEndpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterOpenTelemetryEndpointCall) Do(f func() string) *MockConfigSetterOpenTelemetryEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterOpenTelemetryEndpointCall) DoAndReturn(f func() string) *MockConfigSetterOpenTelemetryEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryInsecure mocks base method.
func (m *MockConfigSetter) OpenTelemetryInsecure() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryInsecure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryInsecure indicates an expected call of OpenTelemetryInsecure.
func (mr *MockConfigSetterMockRecorder) OpenTelemetryInsecure() *MockConfigSetterOpenTelemetryInsecureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryInsecure", reflect.TypeOf((*MockConfigSetter)(nil).OpenTelemetryInsecure))
	return &MockConfigSetterOpenTelemetryInsecureCall{Call: call}
}

// MockConfigSetterOpenTelemetryInsecureCall wrap *gomock.Call
type MockConfigSetterOpenTelemetryInsecureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterOpenTelemetryInsecureCall) Return(arg0 bool) *MockConfigSetterOpenTelemetryInsecureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterOpenTelemetryInsecureCall) Do(f func() bool) *MockConfigSetterOpenTelemetryInsecureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterOpenTelemetryInsecureCall) DoAndReturn(f func() bool) *MockConfigSetterOpenTelemetryInsecureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetrySampleRatio mocks base method.
func (m *MockConfigSetter) OpenTelemetrySampleRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetrySampleRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// OpenTelemetrySampleRatio indicates an expected call of OpenTelemetrySampleRatio.
func (mr *MockConfigSetterMockRecorder) OpenTelemetrySampleRatio() *MockConfigSetterOpenTelemetrySampleRatioCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetrySampleRatio", reflect.TypeOf((*MockConfigSetter)(nil).OpenTelemetrySampleRatio))
	return &MockConfigSetterOpenTelemetrySampleRatioCall{Call: call}
}

// MockConfigSetterOpenTelemetrySampleRatioCall wrap *gomock.Call
type MockConfigSetterOpenTelemetrySampleRatioCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterOpenTelemetrySampleRatioCall) Return(arg0 float64) *MockConfigSetterOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterOpenTelemetrySampleRatioCall) Do(f func() float64) *MockConfigSetterOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterOpenTelemetrySampleRatioCall) DoAndReturn(f func() float64) *MockConfigSetterOpenTelemetrySampleRatioCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryStackTraces mocks base method.
func (m *MockConfigSetter) OpenTelemetryStackTraces() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryStackTraces")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OpenTelemetryStackTraces indicates an expected call of OpenTelemetryStackTraces.
func (mr *MockConfigSetterMockRecorder) OpenTelemetryStackTraces() *MockConfigSetterOpenTelemetryStackTracesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryStackTraces", reflect.TypeOf((*MockConfigSetter)(nil).OpenTelemetryStackTraces))
	return &MockConfigSetterOpenTelemetryStackTracesCall{Call: call}
}

// MockConfigSetterOpenTelemetryStackTracesCall wrap *gomock.Call
type MockConfigSetterOpenTelemetryStackTracesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterOpenTelemetryStackTracesCall) Return(arg0 bool) *MockConfigSetterOpenTelemetryStackTracesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterOpenTelemetryStackTracesCall) Do(f func() bool) *MockConfigSetterOpenTelemetryStackTracesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterOpenTelemetryStackTracesCall) DoAndReturn(f func() bool) *MockConfigSetterOpenTelemetryStackTracesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenTelemetryTailSamplingThreshold mocks base method.
func (m *MockConfigSetter) OpenTelemetryTailSamplingThreshold() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTelemetryTailSamplingThreshold")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// OpenTelemetryTailSamplingThreshold indicates an expected call of OpenTelemetryTailSamplingThreshold.
func (mr *MockConfigSetterMockRecorder) OpenTelemetryTailSamplingThreshold() *MockConfigSetterOpenTelemetryTailSamplingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTelemetryTailSamplingThreshold", reflect.TypeOf((*MockConfigSetter)(nil).OpenTelemetryTailSamplingThreshold))
	return &MockConfigSetterOpenTelemetryTailSamplingThresholdCall{Call: call}
}

// MockConfigSetterOpenTelemetryTailSamplingThresholdCall wrap *gomock.Call
type MockConfigSetterOpenTelemetryTailSamplingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterOpenTelemetryTailSamplingThresholdCall) Return(arg0 time.Duration) *MockConfigSetterOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterOpenTelemetryTailSamplingThresholdCall) Do(f func() time.Duration) *MockConfigSetterOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterOpenTelemetryTailSamplingThresholdCall) DoAndReturn(f func() time.Duration) *MockConfigSetterOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTracingEnabled mocks base method.
func (m *MockConfigSetter) QueryTracingEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTracingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// QueryTracingEnabled indicates an expected call of QueryTracingEnabled.
func (mr *MockConfigSetterMockRecorder) QueryTracingEnabled() *MockConfigSetterQueryTracingEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTracingEnabled", reflect.TypeOf((*MockConfigSetter)(nil).QueryTracingEnabled))
	return &MockConfigSetterQueryTracingEnabledCall{Call: call}
}

// MockConfigSetterQueryTracingEnabledCall wrap *gomock.Call
type MockConfigSetterQueryTracingEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterQueryTracingEnabledCall) Return(arg0 bool) *MockConfigSetterQueryTracingEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterQueryTracingEnabledCall) Do(f func() bool) *MockConfigSetterQueryTracingEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterQueryTracingEnabledCall) DoAndReturn(f func() bool) *MockConfigSetterQueryTracingEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryTracingThreshold mocks base method.
func (m *MockConfigSetter) QueryTracingThreshold() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTracingThreshold")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// QueryTracingThreshold indicates an expected call of QueryTracingThreshold.
func (mr *MockConfigSetterMockRecorder) QueryTracingThreshold() *MockConfigSetterQueryTracingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTracingThreshold", reflect.TypeOf((*MockConfigSetter)(nil).QueryTracingThreshold))
	return &MockConfigSetterQueryTracingThresholdCall{Call: call}
}

// MockConfigSetterQueryTracingThresholdCall wrap *gomock.Call
type MockConfigSetterQueryTracingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterQueryTracingThresholdCall) Return(arg0 time.Duration) *MockConfigSetterQueryTracingThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterQueryTracingThresholdCall) Do(f func() time.Duration) *MockConfigSetterQueryTracingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterQueryTracingThresholdCall) DoAndReturn(f func() time.Duration) *MockConfigSetterQueryTracingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAPIHostPorts mocks base method.
func (m *MockConfigSetter) SetAPIHostPorts(arg0 []network.HostPorts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIHostPorts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPIHostPorts indicates an expected call of SetAPIHostPorts.
func (mr *MockConfigSetterMockRecorder) SetAPIHostPorts(arg0 any) *MockConfigSetterSetAPIHostPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIHostPorts", reflect.TypeOf((*MockConfigSetter)(nil).SetAPIHostPorts), arg0)
	return &MockConfigSetterSetAPIHostPortsCall{Call: call}
}

// MockConfigSetterSetAPIHostPortsCall wrap *gomock.Call
type MockConfigSetterSetAPIHostPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetAPIHostPortsCall) Return(arg0 error) *MockConfigSetterSetAPIHostPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetAPIHostPortsCall) Do(f func([]network.HostPorts) error) *MockConfigSetterSetAPIHostPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetAPIHostPortsCall) DoAndReturn(f func([]network.HostPorts) error) *MockConfigSetterSetAPIHostPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCACert mocks base method.
func (m *MockConfigSetter) SetCACert(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCACert", arg0)
}

// SetCACert indicates an expected call of SetCACert.
func (mr *MockConfigSetterMockRecorder) SetCACert(arg0 any) *MockConfigSetterSetCACertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCACert", reflect.TypeOf((*MockConfigSetter)(nil).SetCACert), arg0)
	return &MockConfigSetterSetCACertCall{Call: call}
}

// MockConfigSetterSetCACertCall wrap *gomock.Call
type MockConfigSetterSetCACertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetCACertCall) Return() *MockConfigSetterSetCACertCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetCACertCall) Do(f func(string)) *MockConfigSetterSetCACertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetCACertCall) DoAndReturn(f func(string)) *MockConfigSetterSetCACertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetJujuDBSnapChannel mocks base method.
func (m *MockConfigSetter) SetJujuDBSnapChannel(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJujuDBSnapChannel", arg0)
}

// SetJujuDBSnapChannel indicates an expected call of SetJujuDBSnapChannel.
func (mr *MockConfigSetterMockRecorder) SetJujuDBSnapChannel(arg0 any) *MockConfigSetterSetJujuDBSnapChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJujuDBSnapChannel", reflect.TypeOf((*MockConfigSetter)(nil).SetJujuDBSnapChannel), arg0)
	return &MockConfigSetterSetJujuDBSnapChannelCall{Call: call}
}

// MockConfigSetterSetJujuDBSnapChannelCall wrap *gomock.Call
type MockConfigSetterSetJujuDBSnapChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetJujuDBSnapChannelCall) Return() *MockConfigSetterSetJujuDBSnapChannelCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetJujuDBSnapChannelCall) Do(f func(string)) *MockConfigSetterSetJujuDBSnapChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetJujuDBSnapChannelCall) DoAndReturn(f func(string)) *MockConfigSetterSetJujuDBSnapChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLoggingConfig mocks base method.
func (m *MockConfigSetter) SetLoggingConfig(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLoggingConfig", arg0)
}

// SetLoggingConfig indicates an expected call of SetLoggingConfig.
func (mr *MockConfigSetterMockRecorder) SetLoggingConfig(arg0 any) *MockConfigSetterSetLoggingConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoggingConfig", reflect.TypeOf((*MockConfigSetter)(nil).SetLoggingConfig), arg0)
	return &MockConfigSetterSetLoggingConfigCall{Call: call}
}

// MockConfigSetterSetLoggingConfigCall wrap *gomock.Call
type MockConfigSetterSetLoggingConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetLoggingConfigCall) Return() *MockConfigSetterSetLoggingConfigCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetLoggingConfigCall) Do(f func(string)) *MockConfigSetterSetLoggingConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetLoggingConfigCall) DoAndReturn(f func(string)) *MockConfigSetterSetLoggingConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetObjectStoreType mocks base method.
func (m *MockConfigSetter) SetObjectStoreType(arg0 objectstore.BackendType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetObjectStoreType", arg0)
}

// SetObjectStoreType indicates an expected call of SetObjectStoreType.
func (mr *MockConfigSetterMockRecorder) SetObjectStoreType(arg0 any) *MockConfigSetterSetObjectStoreTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectStoreType", reflect.TypeOf((*MockConfigSetter)(nil).SetObjectStoreType), arg0)
	return &MockConfigSetterSetObjectStoreTypeCall{Call: call}
}

// MockConfigSetterSetObjectStoreTypeCall wrap *gomock.Call
type MockConfigSetterSetObjectStoreTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetObjectStoreTypeCall) Return() *MockConfigSetterSetObjectStoreTypeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetObjectStoreTypeCall) Do(f func(objectstore.BackendType)) *MockConfigSetterSetObjectStoreTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetObjectStoreTypeCall) DoAndReturn(f func(objectstore.BackendType)) *MockConfigSetterSetObjectStoreTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOldPassword mocks base method.
func (m *MockConfigSetter) SetOldPassword(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOldPassword", arg0)
}

// SetOldPassword indicates an expected call of SetOldPassword.
func (mr *MockConfigSetterMockRecorder) SetOldPassword(arg0 any) *MockConfigSetterSetOldPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOldPassword", reflect.TypeOf((*MockConfigSetter)(nil).SetOldPassword), arg0)
	return &MockConfigSetterSetOldPasswordCall{Call: call}
}

// MockConfigSetterSetOldPasswordCall wrap *gomock.Call
type MockConfigSetterSetOldPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetOldPasswordCall) Return() *MockConfigSetterSetOldPasswordCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetOldPasswordCall) Do(f func(string)) *MockConfigSetterSetOldPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetOldPasswordCall) DoAndReturn(f func(string)) *MockConfigSetterSetOldPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOpenTelemetryEnabled mocks base method.
func (m *MockConfigSetter) SetOpenTelemetryEnabled(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpenTelemetryEnabled", arg0)
}

// SetOpenTelemetryEnabled indicates an expected call of SetOpenTelemetryEnabled.
func (mr *MockConfigSetterMockRecorder) SetOpenTelemetryEnabled(arg0 any) *MockConfigSetterSetOpenTelemetryEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenTelemetryEnabled", reflect.TypeOf((*MockConfigSetter)(nil).SetOpenTelemetryEnabled), arg0)
	return &MockConfigSetterSetOpenTelemetryEnabledCall{Call: call}
}

// MockConfigSetterSetOpenTelemetryEnabledCall wrap *gomock.Call
type MockConfigSetterSetOpenTelemetryEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetOpenTelemetryEnabledCall) Return() *MockConfigSetterSetOpenTelemetryEnabledCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetOpenTelemetryEnabledCall) Do(f func(bool)) *MockConfigSetterSetOpenTelemetryEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetOpenTelemetryEnabledCall) DoAndReturn(f func(bool)) *MockConfigSetterSetOpenTelemetryEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOpenTelemetryEndpoint mocks base method.
func (m *MockConfigSetter) SetOpenTelemetryEndpoint(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpenTelemetryEndpoint", arg0)
}

// SetOpenTelemetryEndpoint indicates an expected call of SetOpenTelemetryEndpoint.
func (mr *MockConfigSetterMockRecorder) SetOpenTelemetryEndpoint(arg0 any) *MockConfigSetterSetOpenTelemetryEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenTelemetryEndpoint", reflect.TypeOf((*MockConfigSetter)(nil).SetOpenTelemetryEndpoint), arg0)
	return &MockConfigSetterSetOpenTelemetryEndpointCall{Call: call}
}

// MockConfigSetterSetOpenTelemetryEndpointCall wrap *gomock.Call
type MockConfigSetterSetOpenTelemetryEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetOpenTelemetryEndpointCall) Return() *MockConfigSetterSetOpenTelemetryEndpointCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetOpenTelemetryEndpointCall) Do(f func(string)) *MockConfigSetterSetOpenTelemetryEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetOpenTelemetryEndpointCall) DoAndReturn(f func(string)) *MockConfigSetterSetOpenTelemetryEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOpenTelemetryInsecure mocks base method.
func (m *MockConfigSetter) SetOpenTelemetryInsecure(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpenTelemetryInsecure", arg0)
}

// SetOpenTelemetryInsecure indicates an expected call of SetOpenTelemetryInsecure.
func (mr *MockConfigSetterMockRecorder) SetOpenTelemetryInsecure(arg0 any) *MockConfigSetterSetOpenTelemetryInsecureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenTelemetryInsecure", reflect.TypeOf((*MockConfigSetter)(nil).SetOpenTelemetryInsecure), arg0)
	return &MockConfigSetterSetOpenTelemetryInsecureCall{Call: call}
}

// MockConfigSetterSetOpenTelemetryInsecureCall wrap *gomock.Call
type MockConfigSetterSetOpenTelemetryInsecureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetOpenTelemetryInsecureCall) Return() *MockConfigSetterSetOpenTelemetryInsecureCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetOpenTelemetryInsecureCall) Do(f func(bool)) *MockConfigSetterSetOpenTelemetryInsecureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetOpenTelemetryInsecureCall) DoAndReturn(f func(bool)) *MockConfigSetterSetOpenTelemetryInsecureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOpenTelemetrySampleRatio mocks base method.
func (m *MockConfigSetter) SetOpenTelemetrySampleRatio(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpenTelemetrySampleRatio", arg0)
}

// SetOpenTelemetrySampleRatio indicates an expected call of SetOpenTelemetrySampleRatio.
func (mr *MockConfigSetterMockRecorder) SetOpenTelemetrySampleRatio(arg0 any) *MockConfigSetterSetOpenTelemetrySampleRatioCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenTelemetrySampleRatio", reflect.TypeOf((*MockConfigSetter)(nil).SetOpenTelemetrySampleRatio), arg0)
	return &MockConfigSetterSetOpenTelemetrySampleRatioCall{Call: call}
}

// MockConfigSetterSetOpenTelemetrySampleRatioCall wrap *gomock.Call
type MockConfigSetterSetOpenTelemetrySampleRatioCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetOpenTelemetrySampleRatioCall) Return() *MockConfigSetterSetOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetOpenTelemetrySampleRatioCall) Do(f func(float64)) *MockConfigSetterSetOpenTelemetrySampleRatioCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetOpenTelemetrySampleRatioCall) DoAndReturn(f func(float64)) *MockConfigSetterSetOpenTelemetrySampleRatioCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOpenTelemetryStackTraces mocks base method.
func (m *MockConfigSetter) SetOpenTelemetryStackTraces(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpenTelemetryStackTraces", arg0)
}

// SetOpenTelemetryStackTraces indicates an expected call of SetOpenTelemetryStackTraces.
func (mr *MockConfigSetterMockRecorder) SetOpenTelemetryStackTraces(arg0 any) *MockConfigSetterSetOpenTelemetryStackTracesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenTelemetryStackTraces", reflect.TypeOf((*MockConfigSetter)(nil).SetOpenTelemetryStackTraces), arg0)
	return &MockConfigSetterSetOpenTelemetryStackTracesCall{Call: call}
}

// MockConfigSetterSetOpenTelemetryStackTracesCall wrap *gomock.Call
type MockConfigSetterSetOpenTelemetryStackTracesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetOpenTelemetryStackTracesCall) Return() *MockConfigSetterSetOpenTelemetryStackTracesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetOpenTelemetryStackTracesCall) Do(f func(bool)) *MockConfigSetterSetOpenTelemetryStackTracesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetOpenTelemetryStackTracesCall) DoAndReturn(f func(bool)) *MockConfigSetterSetOpenTelemetryStackTracesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOpenTelemetryTailSamplingThreshold mocks base method.
func (m *MockConfigSetter) SetOpenTelemetryTailSamplingThreshold(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpenTelemetryTailSamplingThreshold", arg0)
}

// SetOpenTelemetryTailSamplingThreshold indicates an expected call of SetOpenTelemetryTailSamplingThreshold.
func (mr *MockConfigSetterMockRecorder) SetOpenTelemetryTailSamplingThreshold(arg0 any) *MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenTelemetryTailSamplingThreshold", reflect.TypeOf((*MockConfigSetter)(nil).SetOpenTelemetryTailSamplingThreshold), arg0)
	return &MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall{Call: call}
}

// MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall wrap *gomock.Call
type MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall) Return() *MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall) Do(f func(time.Duration)) *MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall) DoAndReturn(f func(time.Duration)) *MockConfigSetterSetOpenTelemetryTailSamplingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPassword mocks base method.
func (m *MockConfigSetter) SetPassword(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPassword", arg0)
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockConfigSetterMockRecorder) SetPassword(arg0 any) *MockConfigSetterSetPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockConfigSetter)(nil).SetPassword), arg0)
	return &MockConfigSetterSetPasswordCall{Call: call}
}

// MockConfigSetterSetPasswordCall wrap *gomock.Call
type MockConfigSetterSetPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetPasswordCall) Return() *MockConfigSetterSetPasswordCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetPasswordCall) Do(f func(string)) *MockConfigSetterSetPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetPasswordCall) DoAndReturn(f func(string)) *MockConfigSetterSetPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetQueryTracingEnabled mocks base method.
func (m *MockConfigSetter) SetQueryTracingEnabled(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQueryTracingEnabled", arg0)
}

// SetQueryTracingEnabled indicates an expected call of SetQueryTracingEnabled.
func (mr *MockConfigSetterMockRecorder) SetQueryTracingEnabled(arg0 any) *MockConfigSetterSetQueryTracingEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueryTracingEnabled", reflect.TypeOf((*MockConfigSetter)(nil).SetQueryTracingEnabled), arg0)
	return &MockConfigSetterSetQueryTracingEnabledCall{Call: call}
}

// MockConfigSetterSetQueryTracingEnabledCall wrap *gomock.Call
type MockConfigSetterSetQueryTracingEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetQueryTracingEnabledCall) Return() *MockConfigSetterSetQueryTracingEnabledCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetQueryTracingEnabledCall) Do(f func(bool)) *MockConfigSetterSetQueryTracingEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetQueryTracingEnabledCall) DoAndReturn(f func(bool)) *MockConfigSetterSetQueryTracingEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetQueryTracingThreshold mocks base method.
func (m *MockConfigSetter) SetQueryTracingThreshold(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQueryTracingThreshold", arg0)
}

// SetQueryTracingThreshold indicates an expected call of SetQueryTracingThreshold.
func (mr *MockConfigSetterMockRecorder) SetQueryTracingThreshold(arg0 any) *MockConfigSetterSetQueryTracingThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueryTracingThreshold", reflect.TypeOf((*MockConfigSetter)(nil).SetQueryTracingThreshold), arg0)
	return &MockConfigSetterSetQueryTracingThresholdCall{Call: call}
}

// MockConfigSetterSetQueryTracingThresholdCall wrap *gomock.Call
type MockConfigSetterSetQueryTracingThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetQueryTracingThresholdCall) Return() *MockConfigSetterSetQueryTracingThresholdCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetQueryTracingThresholdCall) Do(f func(time.Duration)) *MockConfigSetterSetQueryTracingThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetQueryTracingThresholdCall) DoAndReturn(f func(time.Duration)) *MockConfigSetterSetQueryTracingThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStateServingInfo mocks base method.
func (m *MockConfigSetter) SetStateServingInfo(arg0 controller.StateServingInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateServingInfo", arg0)
}

// SetStateServingInfo indicates an expected call of SetStateServingInfo.
func (mr *MockConfigSetterMockRecorder) SetStateServingInfo(arg0 any) *MockConfigSetterSetStateServingInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateServingInfo", reflect.TypeOf((*MockConfigSetter)(nil).SetStateServingInfo), arg0)
	return &MockConfigSetterSetStateServingInfoCall{Call: call}
}

// MockConfigSetterSetStateServingInfoCall wrap *gomock.Call
type MockConfigSetterSetStateServingInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetStateServingInfoCall) Return() *MockConfigSetterSetStateServingInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetStateServingInfoCall) Do(f func(controller.StateServingInfo)) *MockConfigSetterSetStateServingInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetStateServingInfoCall) DoAndReturn(f func(controller.StateServingInfo)) *MockConfigSetterSetStateServingInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUpgradedToVersion mocks base method.
func (m *MockConfigSetter) SetUpgradedToVersion(arg0 semversion.Number) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpgradedToVersion", arg0)
}

// SetUpgradedToVersion indicates an expected call of SetUpgradedToVersion.
func (mr *MockConfigSetterMockRecorder) SetUpgradedToVersion(arg0 any) *MockConfigSetterSetUpgradedToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpgradedToVersion", reflect.TypeOf((*MockConfigSetter)(nil).SetUpgradedToVersion), arg0)
	return &MockConfigSetterSetUpgradedToVersionCall{Call: call}
}

// MockConfigSetterSetUpgradedToVersionCall wrap *gomock.Call
type MockConfigSetterSetUpgradedToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetUpgradedToVersionCall) Return() *MockConfigSetterSetUpgradedToVersionCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetUpgradedToVersionCall) Do(f func(semversion.Number)) *MockConfigSetterSetUpgradedToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetUpgradedToVersionCall) DoAndReturn(f func(semversion.Number)) *MockConfigSetterSetUpgradedToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValue mocks base method.
func (m *MockConfigSetter) SetValue(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", arg0, arg1)
}

// SetValue indicates an expected call of SetValue.
func (mr *MockConfigSetterMockRecorder) SetValue(arg0, arg1 any) *MockConfigSetterSetValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockConfigSetter)(nil).SetValue), arg0, arg1)
	return &MockConfigSetterSetValueCall{Call: call}
}

// MockConfigSetterSetValueCall wrap *gomock.Call
type MockConfigSetterSetValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSetValueCall) Return() *MockConfigSetterSetValueCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSetValueCall) Do(f func(string, string)) *MockConfigSetterSetValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSetValueCall) DoAndReturn(f func(string, string)) *MockConfigSetterSetValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateServingInfo mocks base method.
func (m *MockConfigSetter) StateServingInfo() (controller.StateServingInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateServingInfo")
	ret0, _ := ret[0].(controller.StateServingInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// StateServingInfo indicates an expected call of StateServingInfo.
func (mr *MockConfigSetterMockRecorder) StateServingInfo() *MockConfigSetterStateServingInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateServingInfo", reflect.TypeOf((*MockConfigSetter)(nil).StateServingInfo))
	return &MockConfigSetterStateServingInfoCall{Call: call}
}

// MockConfigSetterStateServingInfoCall wrap *gomock.Call
type MockConfigSetterStateServingInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterStateServingInfoCall) Return(arg0 controller.StateServingInfo, arg1 bool) *MockConfigSetterStateServingInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterStateServingInfoCall) Do(f func() (controller.StateServingInfo, bool)) *MockConfigSetterStateServingInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterStateServingInfoCall) DoAndReturn(f func() (controller.StateServingInfo, bool)) *MockConfigSetterStateServingInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SystemIdentityPath mocks base method.
func (m *MockConfigSetter) SystemIdentityPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemIdentityPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// SystemIdentityPath indicates an expected call of SystemIdentityPath.
func (mr *MockConfigSetterMockRecorder) SystemIdentityPath() *MockConfigSetterSystemIdentityPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemIdentityPath", reflect.TypeOf((*MockConfigSetter)(nil).SystemIdentityPath))
	return &MockConfigSetterSystemIdentityPathCall{Call: call}
}

// MockConfigSetterSystemIdentityPathCall wrap *gomock.Call
type MockConfigSetterSystemIdentityPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterSystemIdentityPathCall) Return(arg0 string) *MockConfigSetterSystemIdentityPathCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterSystemIdentityPathCall) Do(f func() string) *MockConfigSetterSystemIdentityPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterSystemIdentityPathCall) DoAndReturn(f func() string) *MockConfigSetterSystemIdentityPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockConfigSetter) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockConfigSetterMockRecorder) Tag() *MockConfigSetterTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockConfigSetter)(nil).Tag))
	return &MockConfigSetterTagCall{Call: call}
}

// MockConfigSetterTagCall wrap *gomock.Call
type MockConfigSetterTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterTagCall) Return(arg0 names.Tag) *MockConfigSetterTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterTagCall) Do(f func() names.Tag) *MockConfigSetterTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterTagCall) DoAndReturn(f func() names.Tag) *MockConfigSetterTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TransientDataDir mocks base method.
func (m *MockConfigSetter) TransientDataDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransientDataDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// TransientDataDir indicates an expected call of TransientDataDir.
func (mr *MockConfigSetterMockRecorder) TransientDataDir() *MockConfigSetterTransientDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransientDataDir", reflect.TypeOf((*MockConfigSetter)(nil).TransientDataDir))
	return &MockConfigSetterTransientDataDirCall{Call: call}
}

// MockConfigSetterTransientDataDirCall wrap *gomock.Call
type MockConfigSetterTransientDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterTransientDataDirCall) Return(arg0 string) *MockConfigSetterTransientDataDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterTransientDataDirCall) Do(f func() string) *MockConfigSetterTransientDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterTransientDataDirCall) DoAndReturn(f func() string) *MockConfigSetterTransientDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradedToVersion mocks base method.
func (m *MockConfigSetter) UpgradedToVersion() semversion.Number {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradedToVersion")
	ret0, _ := ret[0].(semversion.Number)
	return ret0
}

// UpgradedToVersion indicates an expected call of UpgradedToVersion.
func (mr *MockConfigSetterMockRecorder) UpgradedToVersion() *MockConfigSetterUpgradedToVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradedToVersion", reflect.TypeOf((*MockConfigSetter)(nil).UpgradedToVersion))
	return &MockConfigSetterUpgradedToVersionCall{Call: call}
}

// MockConfigSetterUpgradedToVersionCall wrap *gomock.Call
type MockConfigSetterUpgradedToVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterUpgradedToVersionCall) Return(arg0 semversion.Number) *MockConfigSetterUpgradedToVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterUpgradedToVersionCall) Do(f func() semversion.Number) *MockConfigSetterUpgradedToVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterUpgradedToVersionCall) DoAndReturn(f func() semversion.Number) *MockConfigSetterUpgradedToVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockConfigSetter) Value(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockConfigSetterMockRecorder) Value(arg0 any) *MockConfigSetterValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockConfigSetter)(nil).Value), arg0)
	return &MockConfigSetterValueCall{Call: call}
}

// MockConfigSetterValueCall wrap *gomock.Call
type MockConfigSetterValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterValueCall) Return(arg0 string) *MockConfigSetterValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterValueCall) Do(f func(string) string) *MockConfigSetterValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterValueCall) DoAndReturn(f func(string) string) *MockConfigSetterValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteCommands mocks base method.
func (m *MockConfigSetter) WriteCommands(arg0 shell.Renderer) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCommands", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteCommands indicates an expected call of WriteCommands.
func (mr *MockConfigSetterMockRecorder) WriteCommands(arg0 any) *MockConfigSetterWriteCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCommands", reflect.TypeOf((*MockConfigSetter)(nil).WriteCommands), arg0)
	return &MockConfigSetterWriteCommandsCall{Call: call}
}

// MockConfigSetterWriteCommandsCall wrap *gomock.Call
type MockConfigSetterWriteCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigSetterWriteCommandsCall) Return(arg0 []string, arg1 error) *MockConfigSetterWriteCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigSetterWriteCommandsCall) Do(f func(shell.Renderer) ([]string, error)) *MockConfigSetterWriteCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigSetterWriteCommandsCall) DoAndReturn(f func(shell.Renderer) ([]string, error)) *MockConfigSetterWriteCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
