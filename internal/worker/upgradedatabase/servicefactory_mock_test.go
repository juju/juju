// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/services (interfaces: UpgradeServices,UpgradeServicesGetter)
//
// Generated by this command:
//
//	mockgen -typed -package upgradedatabase -destination servicefactory_mock_test.go github.com/juju/juju/internal/services UpgradeServices,UpgradeServicesGetter
//

// Package upgradedatabase is a generated GoMock package.
package upgradedatabase

import (
	reflect "reflect"

	service "github.com/juju/juju/domain/upgrade/service"
	services "github.com/juju/juju/internal/services"
	gomock "go.uber.org/mock/gomock"
)

// MockUpgradeServices is a mock of UpgradeServices interface.
type MockUpgradeServices struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeServicesMockRecorder
}

// MockUpgradeServicesMockRecorder is the mock recorder for MockUpgradeServices.
type MockUpgradeServicesMockRecorder struct {
	mock *MockUpgradeServices
}

// NewMockUpgradeServices creates a new mock instance.
func NewMockUpgradeServices(ctrl *gomock.Controller) *MockUpgradeServices {
	mock := &MockUpgradeServices{ctrl: ctrl}
	mock.recorder = &MockUpgradeServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeServices) EXPECT() *MockUpgradeServicesMockRecorder {
	return m.recorder
}

// Upgrade mocks base method.
func (m *MockUpgradeServices) Upgrade() *service.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade")
	ret0, _ := ret[0].(*service.WatchableService)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockUpgradeServicesMockRecorder) Upgrade() *MockUpgradeServicesUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockUpgradeServices)(nil).Upgrade))
	return &MockUpgradeServicesUpgradeCall{Call: call}
}

// MockUpgradeServicesUpgradeCall wrap *gomock.Call
type MockUpgradeServicesUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeServicesUpgradeCall) Return(arg0 *service.WatchableService) *MockUpgradeServicesUpgradeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeServicesUpgradeCall) Do(f func() *service.WatchableService) *MockUpgradeServicesUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeServicesUpgradeCall) DoAndReturn(f func() *service.WatchableService) *MockUpgradeServicesUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgradeServicesGetter is a mock of UpgradeServicesGetter interface.
type MockUpgradeServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeServicesGetterMockRecorder
}

// MockUpgradeServicesGetterMockRecorder is the mock recorder for MockUpgradeServicesGetter.
type MockUpgradeServicesGetterMockRecorder struct {
	mock *MockUpgradeServicesGetter
}

// NewMockUpgradeServicesGetter creates a new mock instance.
func NewMockUpgradeServicesGetter(ctrl *gomock.Controller) *MockUpgradeServicesGetter {
	mock := &MockUpgradeServicesGetter{ctrl: ctrl}
	mock.recorder = &MockUpgradeServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeServicesGetter) EXPECT() *MockUpgradeServicesGetterMockRecorder {
	return m.recorder
}

// ServicesForController mocks base method.
func (m *MockUpgradeServicesGetter) ServicesForController() services.UpgradeServices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForController")
	ret0, _ := ret[0].(services.UpgradeServices)
	return ret0
}

// ServicesForController indicates an expected call of ServicesForController.
func (mr *MockUpgradeServicesGetterMockRecorder) ServicesForController() *MockUpgradeServicesGetterServicesForControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForController", reflect.TypeOf((*MockUpgradeServicesGetter)(nil).ServicesForController))
	return &MockUpgradeServicesGetterServicesForControllerCall{Call: call}
}

// MockUpgradeServicesGetterServicesForControllerCall wrap *gomock.Call
type MockUpgradeServicesGetterServicesForControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeServicesGetterServicesForControllerCall) Return(arg0 services.UpgradeServices) *MockUpgradeServicesGetterServicesForControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeServicesGetterServicesForControllerCall) Do(f func() services.UpgradeServices) *MockUpgradeServicesGetterServicesForControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeServicesGetterServicesForControllerCall) DoAndReturn(f func() services.UpgradeServices) *MockUpgradeServicesGetterServicesForControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
