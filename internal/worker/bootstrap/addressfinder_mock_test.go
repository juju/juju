// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs (interfaces: InstanceLister)
//
// Generated by this command:
//
//	mockgen -typed -package bootstrap -destination addressfinder_mock_test.go github.com/juju/juju/environs InstanceLister
//

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	reflect "reflect"

	instance "github.com/juju/juju/core/instance"
	envcontext "github.com/juju/juju/environs/envcontext"
	instances "github.com/juju/juju/environs/instances"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceLister is a mock of InstanceLister interface.
type MockInstanceLister struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceListerMockRecorder
}

// MockInstanceListerMockRecorder is the mock recorder for MockInstanceLister.
type MockInstanceListerMockRecorder struct {
	mock *MockInstanceLister
}

// NewMockInstanceLister creates a new mock instance.
func NewMockInstanceLister(ctrl *gomock.Controller) *MockInstanceLister {
	mock := &MockInstanceLister{ctrl: ctrl}
	mock.recorder = &MockInstanceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceLister) EXPECT() *MockInstanceListerMockRecorder {
	return m.recorder
}

// Instances mocks base method.
func (m *MockInstanceLister) Instances(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances", arg0, arg1)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockInstanceListerMockRecorder) Instances(arg0, arg1 any) *MockInstanceListerInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockInstanceLister)(nil).Instances), arg0, arg1)
	return &MockInstanceListerInstancesCall{Call: call}
}

// MockInstanceListerInstancesCall wrap *gomock.Call
type MockInstanceListerInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceListerInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockInstanceListerInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceListerInstancesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockInstanceListerInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceListerInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockInstanceListerInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
