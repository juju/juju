// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/state (interfaces: StateTracker)
//
// Generated by this command:
//
//	mockgen -typed -package bootstrap -destination state_mock_test.go github.com/juju/juju/internal/worker/state StateTracker
//

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	reflect "reflect"

	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockStateTracker is a mock of StateTracker interface.
type MockStateTracker struct {
	ctrl     *gomock.Controller
	recorder *MockStateTrackerMockRecorder
}

// MockStateTrackerMockRecorder is the mock recorder for MockStateTracker.
type MockStateTrackerMockRecorder struct {
	mock *MockStateTracker
}

// NewMockStateTracker creates a new mock instance.
func NewMockStateTracker(ctrl *gomock.Controller) *MockStateTracker {
	mock := &MockStateTracker{ctrl: ctrl}
	mock.recorder = &MockStateTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateTracker) EXPECT() *MockStateTrackerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStateTracker) ISGOMOCK() struct{} {
	return struct{}{}
}

// Done mocks base method.
func (m *MockStateTracker) Done() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockStateTrackerMockRecorder) Done() *MockStateTrackerDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockStateTracker)(nil).Done))
	return &MockStateTrackerDoneCall{Call: call}
}

// MockStateTrackerDoneCall wrap *gomock.Call
type MockStateTrackerDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateTrackerDoneCall) Return(arg0 error) *MockStateTrackerDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateTrackerDoneCall) Do(f func() error) *MockStateTrackerDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateTrackerDoneCall) DoAndReturn(f func() error) *MockStateTrackerDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockStateTracker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockStateTrackerMockRecorder) Report() *MockStateTrackerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockStateTracker)(nil).Report))
	return &MockStateTrackerReportCall{Call: call}
}

// MockStateTrackerReportCall wrap *gomock.Call
type MockStateTrackerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateTrackerReportCall) Return(arg0 map[string]any) *MockStateTrackerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateTrackerReportCall) Do(f func() map[string]any) *MockStateTrackerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateTrackerReportCall) DoAndReturn(f func() map[string]any) *MockStateTrackerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Use mocks base method.
func (m *MockStateTracker) Use() (*state.StatePool, *state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use")
	ret0, _ := ret[0].(*state.StatePool)
	ret1, _ := ret[1].(*state.State)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Use indicates an expected call of Use.
func (mr *MockStateTrackerMockRecorder) Use() *MockStateTrackerUseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockStateTracker)(nil).Use))
	return &MockStateTrackerUseCall{Call: call}
}

// MockStateTrackerUseCall wrap *gomock.Call
type MockStateTrackerUseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateTrackerUseCall) Return(arg0 *state.StatePool, arg1 *state.State, arg2 error) *MockStateTrackerUseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateTrackerUseCall) Do(f func() (*state.StatePool, *state.State, error)) *MockStateTrackerUseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateTrackerUseCall) DoAndReturn(f func() (*state.StatePool, *state.State, error)) *MockStateTrackerUseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
