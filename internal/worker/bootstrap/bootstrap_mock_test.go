// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/bootstrap (interfaces: ControllerConfigService,FlagService,ObjectStoreGetter,SystemState,HTTPClient,CredentialService,CloudService,StorageService,ApplicationService,ModelConfigService,NetworkService,UserService,BakeryConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package bootstrap -destination bootstrap_mock_test.go github.com/juju/juju/internal/worker/bootstrap ControllerConfigService,FlagService,ObjectStoreGetter,SystemState,HTTPClient,CredentialService,CloudService,StorageService,ApplicationService,ModelConfigService,NetworkService,UserService,BakeryConfigService
//

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	context "context"
	http "net/http"
	reflect "reflect"

	cloud "github.com/juju/juju/cloud"
	controller "github.com/juju/juju/controller"
	credential "github.com/juju/juju/core/credential"
	network "github.com/juju/juju/core/network"
	objectstore "github.com/juju/juju/core/objectstore"
	user "github.com/juju/juju/core/user"
	service "github.com/juju/juju/domain/access/service"
	service0 "github.com/juju/juju/domain/application/service"
	service1 "github.com/juju/juju/domain/storage/service"
	config "github.com/juju/juju/environs/config"
	bootstrap "github.com/juju/juju/internal/bootstrap"
	charm "github.com/juju/juju/internal/charm"
	services "github.com/juju/juju/internal/charm/services"
	storage "github.com/juju/juju/internal/storage"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFlagService is a mock of FlagService interface.
type MockFlagService struct {
	ctrl     *gomock.Controller
	recorder *MockFlagServiceMockRecorder
}

// MockFlagServiceMockRecorder is the mock recorder for MockFlagService.
type MockFlagServiceMockRecorder struct {
	mock *MockFlagService
}

// NewMockFlagService creates a new mock instance.
func NewMockFlagService(ctrl *gomock.Controller) *MockFlagService {
	mock := &MockFlagService{ctrl: ctrl}
	mock.recorder = &MockFlagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagService) EXPECT() *MockFlagServiceMockRecorder {
	return m.recorder
}

// GetFlag mocks base method.
func (m *MockFlagService) GetFlag(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlag", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlag indicates an expected call of GetFlag.
func (mr *MockFlagServiceMockRecorder) GetFlag(arg0, arg1 any) *MockFlagServiceGetFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlag", reflect.TypeOf((*MockFlagService)(nil).GetFlag), arg0, arg1)
	return &MockFlagServiceGetFlagCall{Call: call}
}

// MockFlagServiceGetFlagCall wrap *gomock.Call
type MockFlagServiceGetFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFlagServiceGetFlagCall) Return(arg0 bool, arg1 error) *MockFlagServiceGetFlagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFlagServiceGetFlagCall) Do(f func(context.Context, string) (bool, error)) *MockFlagServiceGetFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFlagServiceGetFlagCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockFlagServiceGetFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFlag mocks base method.
func (m *MockFlagService) SetFlag(arg0 context.Context, arg1 string, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFlag indicates an expected call of SetFlag.
func (mr *MockFlagServiceMockRecorder) SetFlag(arg0, arg1, arg2, arg3 any) *MockFlagServiceSetFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlag", reflect.TypeOf((*MockFlagService)(nil).SetFlag), arg0, arg1, arg2, arg3)
	return &MockFlagServiceSetFlagCall{Call: call}
}

// MockFlagServiceSetFlagCall wrap *gomock.Call
type MockFlagServiceSetFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFlagServiceSetFlagCall) Return(arg0 error) *MockFlagServiceSetFlagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFlagServiceSetFlagCall) Do(f func(context.Context, string, bool, string) error) *MockFlagServiceSetFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFlagServiceSetFlagCall) DoAndReturn(f func(context.Context, string, bool, string) error) *MockFlagServiceSetFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockObjectStoreGetter is a mock of ObjectStoreGetter interface.
type MockObjectStoreGetter struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreGetterMockRecorder
}

// MockObjectStoreGetterMockRecorder is the mock recorder for MockObjectStoreGetter.
type MockObjectStoreGetterMockRecorder struct {
	mock *MockObjectStoreGetter
}

// NewMockObjectStoreGetter creates a new mock instance.
func NewMockObjectStoreGetter(ctrl *gomock.Controller) *MockObjectStoreGetter {
	mock := &MockObjectStoreGetter{ctrl: ctrl}
	mock.recorder = &MockObjectStoreGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreGetter) EXPECT() *MockObjectStoreGetterMockRecorder {
	return m.recorder
}

// GetObjectStore mocks base method.
func (m *MockObjectStoreGetter) GetObjectStore(arg0 context.Context, arg1 string) (objectstore.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectStore", arg0, arg1)
	ret0, _ := ret[0].(objectstore.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectStore indicates an expected call of GetObjectStore.
func (mr *MockObjectStoreGetterMockRecorder) GetObjectStore(arg0, arg1 any) *MockObjectStoreGetterGetObjectStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectStore", reflect.TypeOf((*MockObjectStoreGetter)(nil).GetObjectStore), arg0, arg1)
	return &MockObjectStoreGetterGetObjectStoreCall{Call: call}
}

// MockObjectStoreGetterGetObjectStoreCall wrap *gomock.Call
type MockObjectStoreGetterGetObjectStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreGetterGetObjectStoreCall) Return(arg0 objectstore.ObjectStore, arg1 error) *MockObjectStoreGetterGetObjectStoreCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreGetterGetObjectStoreCall) Do(f func(context.Context, string) (objectstore.ObjectStore, error)) *MockObjectStoreGetterGetObjectStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreGetterGetObjectStoreCall) DoAndReturn(f func(context.Context, string) (objectstore.ObjectStore, error)) *MockObjectStoreGetterGetObjectStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSystemState is a mock of SystemState interface.
type MockSystemState struct {
	ctrl     *gomock.Controller
	recorder *MockSystemStateMockRecorder
}

// MockSystemStateMockRecorder is the mock recorder for MockSystemState.
type MockSystemStateMockRecorder struct {
	mock *MockSystemState
}

// NewMockSystemState creates a new mock instance.
func NewMockSystemState(ctrl *gomock.Controller) *MockSystemState {
	mock := &MockSystemState{ctrl: ctrl}
	mock.recorder = &MockSystemStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemState) EXPECT() *MockSystemStateMockRecorder {
	return m.recorder
}

// AddApplication mocks base method.
func (m *MockSystemState) AddApplication(arg0 state.AddApplicationArgs, arg1 objectstore.ObjectStore) (bootstrap.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplication", arg0, arg1)
	ret0, _ := ret[0].(bootstrap.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplication indicates an expected call of AddApplication.
func (mr *MockSystemStateMockRecorder) AddApplication(arg0, arg1 any) *MockSystemStateAddApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplication", reflect.TypeOf((*MockSystemState)(nil).AddApplication), arg0, arg1)
	return &MockSystemStateAddApplicationCall{Call: call}
}

// MockSystemStateAddApplicationCall wrap *gomock.Call
type MockSystemStateAddApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateAddApplicationCall) Return(arg0 bootstrap.Application, arg1 error) *MockSystemStateAddApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateAddApplicationCall) Do(f func(state.AddApplicationArgs, objectstore.ObjectStore) (bootstrap.Application, error)) *MockSystemStateAddApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateAddApplicationCall) DoAndReturn(f func(state.AddApplicationArgs, objectstore.ObjectStore) (bootstrap.Application, error)) *MockSystemStateAddApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyOperation mocks base method.
func (m *MockSystemState) ApplyOperation(arg0 *state.UpdateUnitOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockSystemStateMockRecorder) ApplyOperation(arg0 any) *MockSystemStateApplyOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockSystemState)(nil).ApplyOperation), arg0)
	return &MockSystemStateApplyOperationCall{Call: call}
}

// MockSystemStateApplyOperationCall wrap *gomock.Call
type MockSystemStateApplyOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateApplyOperationCall) Return(arg0 error) *MockSystemStateApplyOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateApplyOperationCall) Do(f func(*state.UpdateUnitOperation) error) *MockSystemStateApplyOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateApplyOperationCall) DoAndReturn(f func(*state.UpdateUnitOperation) error) *MockSystemStateApplyOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Charm mocks base method.
func (m *MockSystemState) Charm(arg0 string) (bootstrap.Charm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Charm", arg0)
	ret0, _ := ret[0].(bootstrap.Charm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Charm indicates an expected call of Charm.
func (mr *MockSystemStateMockRecorder) Charm(arg0 any) *MockSystemStateCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charm", reflect.TypeOf((*MockSystemState)(nil).Charm), arg0)
	return &MockSystemStateCharmCall{Call: call}
}

// MockSystemStateCharmCall wrap *gomock.Call
type MockSystemStateCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateCharmCall) Return(arg0 bootstrap.Charm, arg1 error) *MockSystemStateCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateCharmCall) Do(f func(string) (bootstrap.Charm, error)) *MockSystemStateCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateCharmCall) DoAndReturn(f func(string) (bootstrap.Charm, error)) *MockSystemStateCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudService mocks base method.
func (m *MockSystemState) CloudService(arg0 string) (bootstrap.CloudService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudService", arg0)
	ret0, _ := ret[0].(bootstrap.CloudService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudService indicates an expected call of CloudService.
func (mr *MockSystemStateMockRecorder) CloudService(arg0 any) *MockSystemStateCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudService", reflect.TypeOf((*MockSystemState)(nil).CloudService), arg0)
	return &MockSystemStateCloudServiceCall{Call: call}
}

// MockSystemStateCloudServiceCall wrap *gomock.Call
type MockSystemStateCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateCloudServiceCall) Return(arg0 bootstrap.CloudService, arg1 error) *MockSystemStateCloudServiceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateCloudServiceCall) Do(f func(string) (bootstrap.CloudService, error)) *MockSystemStateCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateCloudServiceCall) DoAndReturn(f func(string) (bootstrap.CloudService, error)) *MockSystemStateCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerModelUUID mocks base method.
func (m *MockSystemState) ControllerModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ControllerModelUUID indicates an expected call of ControllerModelUUID.
func (mr *MockSystemStateMockRecorder) ControllerModelUUID() *MockSystemStateControllerModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModelUUID", reflect.TypeOf((*MockSystemState)(nil).ControllerModelUUID))
	return &MockSystemStateControllerModelUUIDCall{Call: call}
}

// MockSystemStateControllerModelUUIDCall wrap *gomock.Call
type MockSystemStateControllerModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateControllerModelUUIDCall) Return(arg0 string) *MockSystemStateControllerModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateControllerModelUUIDCall) Do(f func() string) *MockSystemStateControllerModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateControllerModelUUIDCall) DoAndReturn(f func() string) *MockSystemStateControllerModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockSystemState) Machine(arg0 string) (bootstrap.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(bootstrap.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockSystemStateMockRecorder) Machine(arg0 any) *MockSystemStateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockSystemState)(nil).Machine), arg0)
	return &MockSystemStateMachineCall{Call: call}
}

// MockSystemStateMachineCall wrap *gomock.Call
type MockSystemStateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateMachineCall) Return(arg0 bootstrap.Machine, arg1 error) *MockSystemStateMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateMachineCall) Do(f func(string) (bootstrap.Machine, error)) *MockSystemStateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateMachineCall) DoAndReturn(f func(string) (bootstrap.Machine, error)) *MockSystemStateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockSystemState) Model() (bootstrap.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(bootstrap.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockSystemStateMockRecorder) Model() *MockSystemStateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockSystemState)(nil).Model))
	return &MockSystemStateModelCall{Call: call}
}

// MockSystemStateModelCall wrap *gomock.Call
type MockSystemStateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateModelCall) Return(arg0 bootstrap.Model, arg1 error) *MockSystemStateModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateModelCall) Do(f func() (bootstrap.Model, error)) *MockSystemStateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateModelCall) DoAndReturn(f func() (bootstrap.Model, error)) *MockSystemStateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockSystemState) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockSystemStateMockRecorder) ModelUUID() *MockSystemStateModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockSystemState)(nil).ModelUUID))
	return &MockSystemStateModelUUIDCall{Call: call}
}

// MockSystemStateModelUUIDCall wrap *gomock.Call
type MockSystemStateModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateModelUUIDCall) Return(arg0 string) *MockSystemStateModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateModelUUIDCall) Do(f func() string) *MockSystemStateModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateModelUUIDCall) DoAndReturn(f func() string) *MockSystemStateModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareCharmUpload mocks base method.
func (m *MockSystemState) PrepareCharmUpload(arg0 string) (services.UploadedCharm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareCharmUpload", arg0)
	ret0, _ := ret[0].(services.UploadedCharm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareCharmUpload indicates an expected call of PrepareCharmUpload.
func (mr *MockSystemStateMockRecorder) PrepareCharmUpload(arg0 any) *MockSystemStatePrepareCharmUploadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareCharmUpload", reflect.TypeOf((*MockSystemState)(nil).PrepareCharmUpload), arg0)
	return &MockSystemStatePrepareCharmUploadCall{Call: call}
}

// MockSystemStatePrepareCharmUploadCall wrap *gomock.Call
type MockSystemStatePrepareCharmUploadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStatePrepareCharmUploadCall) Return(arg0 services.UploadedCharm, arg1 error) *MockSystemStatePrepareCharmUploadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStatePrepareCharmUploadCall) Do(f func(string) (services.UploadedCharm, error)) *MockSystemStatePrepareCharmUploadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStatePrepareCharmUploadCall) DoAndReturn(f func(string) (services.UploadedCharm, error)) *MockSystemStatePrepareCharmUploadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareLocalCharmUpload mocks base method.
func (m *MockSystemState) PrepareLocalCharmUpload(arg0 string) (*charm.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareLocalCharmUpload", arg0)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareLocalCharmUpload indicates an expected call of PrepareLocalCharmUpload.
func (mr *MockSystemStateMockRecorder) PrepareLocalCharmUpload(arg0 any) *MockSystemStatePrepareLocalCharmUploadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareLocalCharmUpload", reflect.TypeOf((*MockSystemState)(nil).PrepareLocalCharmUpload), arg0)
	return &MockSystemStatePrepareLocalCharmUploadCall{Call: call}
}

// MockSystemStatePrepareLocalCharmUploadCall wrap *gomock.Call
type MockSystemStatePrepareLocalCharmUploadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStatePrepareLocalCharmUploadCall) Return(arg0 *charm.URL, arg1 error) *MockSystemStatePrepareLocalCharmUploadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStatePrepareLocalCharmUploadCall) Do(f func(string) (*charm.URL, error)) *MockSystemStatePrepareLocalCharmUploadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStatePrepareLocalCharmUploadCall) DoAndReturn(f func(string) (*charm.URL, error)) *MockSystemStatePrepareLocalCharmUploadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveCloudService mocks base method.
func (m *MockSystemState) SaveCloudService(arg0 state.SaveCloudServiceArgs) (*state.CloudService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCloudService", arg0)
	ret0, _ := ret[0].(*state.CloudService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCloudService indicates an expected call of SaveCloudService.
func (mr *MockSystemStateMockRecorder) SaveCloudService(arg0 any) *MockSystemStateSaveCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCloudService", reflect.TypeOf((*MockSystemState)(nil).SaveCloudService), arg0)
	return &MockSystemStateSaveCloudServiceCall{Call: call}
}

// MockSystemStateSaveCloudServiceCall wrap *gomock.Call
type MockSystemStateSaveCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateSaveCloudServiceCall) Return(arg0 *state.CloudService, arg1 error) *MockSystemStateSaveCloudServiceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateSaveCloudServiceCall) Do(f func(state.SaveCloudServiceArgs) (*state.CloudService, error)) *MockSystemStateSaveCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateSaveCloudServiceCall) DoAndReturn(f func(state.SaveCloudServiceArgs) (*state.CloudService, error)) *MockSystemStateSaveCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAPIHostPorts mocks base method.
func (m *MockSystemState) SetAPIHostPorts(arg0 controller.Config, arg1, arg2 []network.SpaceHostPorts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIHostPorts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPIHostPorts indicates an expected call of SetAPIHostPorts.
func (mr *MockSystemStateMockRecorder) SetAPIHostPorts(arg0, arg1, arg2 any) *MockSystemStateSetAPIHostPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIHostPorts", reflect.TypeOf((*MockSystemState)(nil).SetAPIHostPorts), arg0, arg1, arg2)
	return &MockSystemStateSetAPIHostPortsCall{Call: call}
}

// MockSystemStateSetAPIHostPortsCall wrap *gomock.Call
type MockSystemStateSetAPIHostPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateSetAPIHostPortsCall) Return(arg0 error) *MockSystemStateSetAPIHostPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateSetAPIHostPortsCall) Do(f func(controller.Config, []network.SpaceHostPorts, []network.SpaceHostPorts) error) *MockSystemStateSetAPIHostPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateSetAPIHostPortsCall) DoAndReturn(f func(controller.Config, []network.SpaceHostPorts, []network.SpaceHostPorts) error) *MockSystemStateSetAPIHostPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ToolsStorage mocks base method.
func (m *MockSystemState) ToolsStorage(arg0 objectstore.ObjectStore) (binarystorage.StorageCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsStorage", arg0)
	ret0, _ := ret[0].(binarystorage.StorageCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsStorage indicates an expected call of ToolsStorage.
func (mr *MockSystemStateMockRecorder) ToolsStorage(arg0 any) *MockSystemStateToolsStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsStorage", reflect.TypeOf((*MockSystemState)(nil).ToolsStorage), arg0)
	return &MockSystemStateToolsStorageCall{Call: call}
}

// MockSystemStateToolsStorageCall wrap *gomock.Call
type MockSystemStateToolsStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateToolsStorageCall) Return(arg0 binarystorage.StorageCloser, arg1 error) *MockSystemStateToolsStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateToolsStorageCall) Do(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockSystemStateToolsStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateToolsStorageCall) DoAndReturn(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockSystemStateToolsStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockSystemState) Unit(arg0 string) (bootstrap.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(bootstrap.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockSystemStateMockRecorder) Unit(arg0 any) *MockSystemStateUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockSystemState)(nil).Unit), arg0)
	return &MockSystemStateUnitCall{Call: call}
}

// MockSystemStateUnitCall wrap *gomock.Call
type MockSystemStateUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateUnitCall) Return(arg0 bootstrap.Unit, arg1 error) *MockSystemStateUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateUnitCall) Do(f func(string) (bootstrap.Unit, error)) *MockSystemStateUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateUnitCall) DoAndReturn(f func(string) (bootstrap.Unit, error)) *MockSystemStateUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUploadedCharm mocks base method.
func (m *MockSystemState) UpdateUploadedCharm(arg0 state.CharmInfo) (services.UploadedCharm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUploadedCharm", arg0)
	ret0, _ := ret[0].(services.UploadedCharm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUploadedCharm indicates an expected call of UpdateUploadedCharm.
func (mr *MockSystemStateMockRecorder) UpdateUploadedCharm(arg0 any) *MockSystemStateUpdateUploadedCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadedCharm", reflect.TypeOf((*MockSystemState)(nil).UpdateUploadedCharm), arg0)
	return &MockSystemStateUpdateUploadedCharmCall{Call: call}
}

// MockSystemStateUpdateUploadedCharmCall wrap *gomock.Call
type MockSystemStateUpdateUploadedCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSystemStateUpdateUploadedCharmCall) Return(arg0 services.UploadedCharm, arg1 error) *MockSystemStateUpdateUploadedCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSystemStateUpdateUploadedCharmCall) Do(f func(state.CharmInfo) (services.UploadedCharm, error)) *MockSystemStateUpdateUploadedCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSystemStateUpdateUploadedCharmCall) DoAndReturn(f func(state.CharmInfo) (services.UploadedCharm, error)) *MockSystemStateUpdateUploadedCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 any) *MockHTTPClientDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
	return &MockHTTPClientDoCall{Call: call}
}

// MockHTTPClientDoCall wrap *gomock.Call
type MockHTTPClientDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientDoCall) Return(arg0 *http.Response, arg1 error) *MockHTTPClientDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCredentialService is a mock of CredentialService interface.
type MockCredentialService struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialServiceMockRecorder
}

// MockCredentialServiceMockRecorder is the mock recorder for MockCredentialService.
type MockCredentialServiceMockRecorder struct {
	mock *MockCredentialService
}

// NewMockCredentialService creates a new mock instance.
func NewMockCredentialService(ctrl *gomock.Controller) *MockCredentialService {
	mock := &MockCredentialService{ctrl: ctrl}
	mock.recorder = &MockCredentialServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialService) EXPECT() *MockCredentialServiceMockRecorder {
	return m.recorder
}

// CloudCredential mocks base method.
func (m *MockCredentialService) CloudCredential(arg0 context.Context, arg1 credential.Key) (cloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredential", arg0, arg1)
	ret0, _ := ret[0].(cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredential indicates an expected call of CloudCredential.
func (mr *MockCredentialServiceMockRecorder) CloudCredential(arg0, arg1 any) *MockCredentialServiceCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredential", reflect.TypeOf((*MockCredentialService)(nil).CloudCredential), arg0, arg1)
	return &MockCredentialServiceCloudCredentialCall{Call: call}
}

// MockCredentialServiceCloudCredentialCall wrap *gomock.Call
type MockCredentialServiceCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialServiceCloudCredentialCall) Return(arg0 cloud.Credential, arg1 error) *MockCredentialServiceCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialServiceCloudCredentialCall) Do(f func(context.Context, credential.Key) (cloud.Credential, error)) *MockCredentialServiceCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialServiceCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) (cloud.Credential, error)) *MockCredentialServiceCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudService is a mock of CloudService interface.
type MockCloudService struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceMockRecorder
}

// MockCloudServiceMockRecorder is the mock recorder for MockCloudService.
type MockCloudServiceMockRecorder struct {
	mock *MockCloudService
}

// NewMockCloudService creates a new mock instance.
func NewMockCloudService(ctrl *gomock.Controller) *MockCloudService {
	mock := &MockCloudService{ctrl: ctrl}
	mock.recorder = &MockCloudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudService) EXPECT() *MockCloudServiceMockRecorder {
	return m.recorder
}

// Cloud mocks base method.
func (m *MockCloudService) Cloud(arg0 context.Context, arg1 string) (*cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud.
func (mr *MockCloudServiceMockRecorder) Cloud(arg0, arg1 any) *MockCloudServiceCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockCloudService)(nil).Cloud), arg0, arg1)
	return &MockCloudServiceCloudCall{Call: call}
}

// MockCloudServiceCloudCall wrap *gomock.Call
type MockCloudServiceCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudServiceCloudCall) Return(arg0 *cloud.Cloud, arg1 error) *MockCloudServiceCloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudServiceCloudCall) Do(f func(context.Context, string) (*cloud.Cloud, error)) *MockCloudServiceCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudServiceCloudCall) DoAndReturn(f func(context.Context, string) (*cloud.Cloud, error)) *MockCloudServiceCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// CreateStoragePool mocks base method.
func (m *MockStorageService) CreateStoragePool(arg0 context.Context, arg1 string, arg2 storage.ProviderType, arg3 service1.PoolAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockStorageServiceMockRecorder) CreateStoragePool(arg0, arg1, arg2, arg3 any) *MockStorageServiceCreateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockStorageService)(nil).CreateStoragePool), arg0, arg1, arg2, arg3)
	return &MockStorageServiceCreateStoragePoolCall{Call: call}
}

// MockStorageServiceCreateStoragePoolCall wrap *gomock.Call
type MockStorageServiceCreateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceCreateStoragePoolCall) Return(arg0 error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceCreateStoragePoolCall) Do(f func(context.Context, string, storage.ProviderType, service1.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceCreateStoragePoolCall) DoAndReturn(f func(context.Context, string, storage.ProviderType, service1.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockApplicationService) CreateApplication(arg0 context.Context, arg1 string, arg2 service0.AddApplicationParams, arg3 ...service0.AddUnitParams) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplication", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockApplicationServiceMockRecorder) CreateApplication(arg0, arg1, arg2 any, arg3 ...any) *MockApplicationServiceCreateApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationService)(nil).CreateApplication), varargs...)
	return &MockApplicationServiceCreateApplicationCall{Call: call}
}

// MockApplicationServiceCreateApplicationCall wrap *gomock.Call
type MockApplicationServiceCreateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceCreateApplicationCall) Return(arg0 error) *MockApplicationServiceCreateApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceCreateApplicationCall) Do(f func(context.Context, string, service0.AddApplicationParams, ...service0.AddUnitParams) error) *MockApplicationServiceCreateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceCreateApplicationCall) DoAndReturn(f func(context.Context, string, service0.AddApplicationParams, ...service0.AddUnitParams) error) *MockApplicationServiceCreateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockNetworkService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockNetworkServiceMockRecorder) GetAllSpaces(arg0 any) *MockNetworkServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockNetworkService)(nil).GetAllSpaces), arg0)
	return &MockNetworkServiceGetAllSpacesCall{Call: call}
}

// MockNetworkServiceGetAllSpacesCall wrap *gomock.Call
type MockNetworkServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReloadSpaces mocks base method.
func (m *MockNetworkService) ReloadSpaces(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockNetworkServiceMockRecorder) ReloadSpaces(arg0 any) *MockNetworkServiceReloadSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockNetworkService)(nil).ReloadSpaces), arg0)
	return &MockNetworkServiceReloadSpacesCall{Call: call}
}

// MockNetworkServiceReloadSpacesCall wrap *gomock.Call
type MockNetworkServiceReloadSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceReloadSpacesCall) Return(arg0 error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceReloadSpacesCall) Do(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceReloadSpacesCall) DoAndReturn(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Space mocks base method.
func (m *MockNetworkService) Space(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Space", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Space indicates an expected call of Space.
func (mr *MockNetworkServiceMockRecorder) Space(arg0, arg1 any) *MockNetworkServiceSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Space", reflect.TypeOf((*MockNetworkService)(nil).Space), arg0, arg1)
	return &MockNetworkServiceSpaceCall{Call: call}
}

// MockNetworkServiceSpaceCall wrap *gomock.Call
type MockNetworkServiceSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSpaceCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockNetworkServiceSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSpaceCall) Do(f func(context.Context, string) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSpaceCall) DoAndReturn(f func(context.Context, string) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SpaceByName mocks base method.
func (m *MockNetworkService) SpaceByName(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByName indicates an expected call of SpaceByName.
func (mr *MockNetworkServiceMockRecorder) SpaceByName(arg0, arg1 any) *MockNetworkServiceSpaceByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByName", reflect.TypeOf((*MockNetworkService)(nil).SpaceByName), arg0, arg1)
	return &MockNetworkServiceSpaceByNameCall{Call: call}
}

// MockNetworkServiceSpaceByNameCall wrap *gomock.Call
type MockNetworkServiceSpaceByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSpaceByNameCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSpaceByNameCall) Do(f func(context.Context, string) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSpaceByNameCall) DoAndReturn(f func(context.Context, string) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserService) AddUser(arg0 context.Context, arg1 service.AddUserArg) (user.UUID, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(user.UUID)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserServiceMockRecorder) AddUser(arg0, arg1 any) *MockUserServiceAddUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserService)(nil).AddUser), arg0, arg1)
	return &MockUserServiceAddUserCall{Call: call}
}

// MockUserServiceAddUserCall wrap *gomock.Call
type MockUserServiceAddUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceAddUserCall) Return(arg0 user.UUID, arg1 []byte, arg2 error) *MockUserServiceAddUserCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceAddUserCall) Do(f func(context.Context, service.AddUserArg) (user.UUID, []byte, error)) *MockUserServiceAddUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceAddUserCall) DoAndReturn(f func(context.Context, service.AddUserArg) (user.UUID, []byte, error)) *MockUserServiceAddUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByName mocks base method.
func (m *MockUserService) GetUserByName(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserServiceMockRecorder) GetUserByName(arg0, arg1 any) *MockUserServiceGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserService)(nil).GetUserByName), arg0, arg1)
	return &MockUserServiceGetUserByNameCall{Call: call}
}

// MockUserServiceGetUserByNameCall wrap *gomock.Call
type MockUserServiceGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByNameCall) Do(f func(context.Context, string) (user.User, error)) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByNameCall) DoAndReturn(f func(context.Context, string) (user.User, error)) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBakeryConfigService is a mock of BakeryConfigService interface.
type MockBakeryConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockBakeryConfigServiceMockRecorder
}

// MockBakeryConfigServiceMockRecorder is the mock recorder for MockBakeryConfigService.
type MockBakeryConfigServiceMockRecorder struct {
	mock *MockBakeryConfigService
}

// NewMockBakeryConfigService creates a new mock instance.
func NewMockBakeryConfigService(ctrl *gomock.Controller) *MockBakeryConfigService {
	mock := &MockBakeryConfigService{ctrl: ctrl}
	mock.recorder = &MockBakeryConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBakeryConfigService) EXPECT() *MockBakeryConfigServiceMockRecorder {
	return m.recorder
}

// InitialiseBakeryConfig mocks base method.
func (m *MockBakeryConfigService) InitialiseBakeryConfig(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialiseBakeryConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitialiseBakeryConfig indicates an expected call of InitialiseBakeryConfig.
func (mr *MockBakeryConfigServiceMockRecorder) InitialiseBakeryConfig(arg0 any) *MockBakeryConfigServiceInitialiseBakeryConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialiseBakeryConfig", reflect.TypeOf((*MockBakeryConfigService)(nil).InitialiseBakeryConfig), arg0)
	return &MockBakeryConfigServiceInitialiseBakeryConfigCall{Call: call}
}

// MockBakeryConfigServiceInitialiseBakeryConfigCall wrap *gomock.Call
type MockBakeryConfigServiceInitialiseBakeryConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigServiceInitialiseBakeryConfigCall) Return(arg0 error) *MockBakeryConfigServiceInitialiseBakeryConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigServiceInitialiseBakeryConfigCall) Do(f func(context.Context) error) *MockBakeryConfigServiceInitialiseBakeryConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigServiceInitialiseBakeryConfigCall) DoAndReturn(f func(context.Context) error) *MockBakeryConfigServiceInitialiseBakeryConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
