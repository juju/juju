// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/caasapplicationprovisioner (interfaces: CAASBroker)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/broker_mock.go github.com/juju/juju/internal/worker/caasapplicationprovisioner CAASBroker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockCAASBroker is a mock of CAASBroker interface.
type MockCAASBroker struct {
	ctrl     *gomock.Controller
	recorder *MockCAASBrokerMockRecorder
}

// MockCAASBrokerMockRecorder is the mock recorder for MockCAASBroker.
type MockCAASBrokerMockRecorder struct {
	mock *MockCAASBroker
}

// NewMockCAASBroker creates a new mock instance.
func NewMockCAASBroker(ctrl *gomock.Controller) *MockCAASBroker {
	mock := &MockCAASBroker{ctrl: ctrl}
	mock.recorder = &MockCAASBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAASBroker) EXPECT() *MockCAASBrokerMockRecorder {
	return m.recorder
}

// AnnotateUnit mocks base method.
func (m *MockCAASBroker) AnnotateUnit(arg0 string, arg1 caas.DeploymentMode, arg2 string, arg3 names.UnitTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnotateUnit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnotateUnit indicates an expected call of AnnotateUnit.
func (mr *MockCAASBrokerMockRecorder) AnnotateUnit(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnotateUnit", reflect.TypeOf((*MockCAASBroker)(nil).AnnotateUnit), arg0, arg1, arg2, arg3)
}

// Application mocks base method.
func (m *MockCAASBroker) Application(arg0 string, arg1 caas.DeploymentType) caas.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0, arg1)
	ret0, _ := ret[0].(caas.Application)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockCAASBrokerMockRecorder) Application(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockCAASBroker)(nil).Application), arg0, arg1)
}

// DeleteCustomResourceDefinitionsForApps mocks base method.
func (m *MockCAASBroker) DeleteCustomResourceDefinitionsForApps(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomResourceDefinitionsForApps", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResourceDefinitionsForApps indicates an expected call of DeleteCustomResourceDefinitionsForApps.
func (mr *MockCAASBrokerMockRecorder) DeleteCustomResourceDefinitionsForApps(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResourceDefinitionsForApps", reflect.TypeOf((*MockCAASBroker)(nil).DeleteCustomResourceDefinitionsForApps), arg0)
}

// DeleteOperator mocks base method.
func (m *MockCAASBroker) DeleteOperator(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperator", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperator indicates an expected call of DeleteOperator.
func (mr *MockCAASBrokerMockRecorder) DeleteOperator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperator", reflect.TypeOf((*MockCAASBroker)(nil).DeleteOperator), arg0)
}

// DeleteService mocks base method.
func (m *MockCAASBroker) DeleteService(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockCAASBrokerMockRecorder) DeleteService(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockCAASBroker)(nil).DeleteService), arg0)
}

// OperatorExists mocks base method.
func (m *MockCAASBroker) OperatorExists(arg0 string) (caas.DeploymentState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorExists", arg0)
	ret0, _ := ret[0].(caas.DeploymentState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatorExists indicates an expected call of OperatorExists.
func (mr *MockCAASBrokerMockRecorder) OperatorExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorExists", reflect.TypeOf((*MockCAASBroker)(nil).OperatorExists), arg0)
}

// Units mocks base method.
func (m *MockCAASBroker) Units(arg0 string, arg1 caas.DeploymentMode) ([]caas.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Units", arg0, arg1)
	ret0, _ := ret[0].([]caas.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Units indicates an expected call of Units.
func (mr *MockCAASBrokerMockRecorder) Units(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Units", reflect.TypeOf((*MockCAASBroker)(nil).Units), arg0, arg1)
}
