// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/caasapplicationprovisioner (interfaces: CAASBroker)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/broker_mock.go github.com/juju/juju/internal/worker/caasapplicationprovisioner CAASBroker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockCAASBroker is a mock of CAASBroker interface.
type MockCAASBroker struct {
	ctrl     *gomock.Controller
	recorder *MockCAASBrokerMockRecorder
}

// MockCAASBrokerMockRecorder is the mock recorder for MockCAASBroker.
type MockCAASBrokerMockRecorder struct {
	mock *MockCAASBroker
}

// NewMockCAASBroker creates a new mock instance.
func NewMockCAASBroker(ctrl *gomock.Controller) *MockCAASBroker {
	mock := &MockCAASBroker{ctrl: ctrl}
	mock.recorder = &MockCAASBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAASBroker) EXPECT() *MockCAASBrokerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCAASBroker) ISGOMOCK() struct{} {
	return struct{}{}
}

// AnnotateUnit mocks base method.
func (m *MockCAASBroker) AnnotateUnit(arg0 context.Context, arg1, arg2 string, arg3 names.UnitTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnotateUnit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnotateUnit indicates an expected call of AnnotateUnit.
func (mr *MockCAASBrokerMockRecorder) AnnotateUnit(arg0, arg1, arg2, arg3 any) *MockCAASBrokerAnnotateUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnotateUnit", reflect.TypeOf((*MockCAASBroker)(nil).AnnotateUnit), arg0, arg1, arg2, arg3)
	return &MockCAASBrokerAnnotateUnitCall{Call: call}
}

// MockCAASBrokerAnnotateUnitCall wrap *gomock.Call
type MockCAASBrokerAnnotateUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASBrokerAnnotateUnitCall) Return(arg0 error) *MockCAASBrokerAnnotateUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASBrokerAnnotateUnitCall) Do(f func(context.Context, string, string, names.UnitTag) error) *MockCAASBrokerAnnotateUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASBrokerAnnotateUnitCall) DoAndReturn(f func(context.Context, string, string, names.UnitTag) error) *MockCAASBrokerAnnotateUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Application mocks base method.
func (m *MockCAASBroker) Application(arg0 string, arg1 caas.DeploymentType) caas.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0, arg1)
	ret0, _ := ret[0].(caas.Application)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockCAASBrokerMockRecorder) Application(arg0, arg1 any) *MockCAASBrokerApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockCAASBroker)(nil).Application), arg0, arg1)
	return &MockCAASBrokerApplicationCall{Call: call}
}

// MockCAASBrokerApplicationCall wrap *gomock.Call
type MockCAASBrokerApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASBrokerApplicationCall) Return(arg0 caas.Application) *MockCAASBrokerApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASBrokerApplicationCall) Do(f func(string, caas.DeploymentType) caas.Application) *MockCAASBrokerApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASBrokerApplicationCall) DoAndReturn(f func(string, caas.DeploymentType) caas.Application) *MockCAASBrokerApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Units mocks base method.
func (m *MockCAASBroker) Units(arg0 context.Context, arg1 string) ([]caas.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Units", arg0, arg1)
	ret0, _ := ret[0].([]caas.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Units indicates an expected call of Units.
func (mr *MockCAASBrokerMockRecorder) Units(arg0, arg1 any) *MockCAASBrokerUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Units", reflect.TypeOf((*MockCAASBroker)(nil).Units), arg0, arg1)
	return &MockCAASBrokerUnitsCall{Call: call}
}

// MockCAASBrokerUnitsCall wrap *gomock.Call
type MockCAASBrokerUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASBrokerUnitsCall) Return(arg0 []caas.Unit, arg1 error) *MockCAASBrokerUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASBrokerUnitsCall) Do(f func(context.Context, string) ([]caas.Unit, error)) *MockCAASBrokerUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASBrokerUnitsCall) DoAndReturn(f func(context.Context, string) ([]caas.Unit, error)) *MockCAASBrokerUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
