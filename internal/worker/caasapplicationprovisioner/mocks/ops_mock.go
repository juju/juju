// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/caasapplicationprovisioner (interfaces: ApplicationOps)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/ops_mock.go github.com/juju/juju/internal/worker/caasapplicationprovisioner ApplicationOps
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	clock "github.com/juju/clock"
	caas "github.com/juju/juju/caas"
	life "github.com/juju/juju/core/life"
	status "github.com/juju/juju/core/status"
	caasapplicationprovisioner "github.com/juju/juju/internal/worker/caasapplicationprovisioner"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationOps is a mock of ApplicationOps interface.
type MockApplicationOps struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationOpsMockRecorder
}

// MockApplicationOpsMockRecorder is the mock recorder for MockApplicationOps.
type MockApplicationOpsMockRecorder struct {
	mock *MockApplicationOps
}

// NewMockApplicationOps creates a new mock instance.
func NewMockApplicationOps(ctrl *gomock.Controller) *MockApplicationOps {
	mock := &MockApplicationOps{ctrl: ctrl}
	mock.recorder = &MockApplicationOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationOps) EXPECT() *MockApplicationOpsMockRecorder {
	return m.recorder
}

// AppAlive mocks base method.
func (m *MockApplicationOps) AppAlive(arg0 string, arg1 caas.Application, arg2 string, arg3 *caas.ApplicationConfig, arg4 caasapplicationprovisioner.CAASProvisionerFacade, arg5 clock.Clock, arg6 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppAlive", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppAlive indicates an expected call of AppAlive.
func (mr *MockApplicationOpsMockRecorder) AppAlive(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppAlive", reflect.TypeOf((*MockApplicationOps)(nil).AppAlive), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AppDead mocks base method.
func (m *MockApplicationOps) AppDead(arg0 string, arg1 caas.Application, arg2 caasapplicationprovisioner.CAASBroker, arg3 caasapplicationprovisioner.CAASProvisionerFacade, arg4 caasapplicationprovisioner.CAASUnitProvisionerFacade, arg5 clock.Clock, arg6 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppDead", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppDead indicates an expected call of AppDead.
func (mr *MockApplicationOpsMockRecorder) AppDead(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppDead", reflect.TypeOf((*MockApplicationOps)(nil).AppDead), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// AppDying mocks base method.
func (m *MockApplicationOps) AppDying(arg0 string, arg1 caas.Application, arg2 life.Value, arg3 caasapplicationprovisioner.CAASProvisionerFacade, arg4 caasapplicationprovisioner.CAASUnitProvisionerFacade, arg5 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppDying", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppDying indicates an expected call of AppDying.
func (mr *MockApplicationOpsMockRecorder) AppDying(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppDying", reflect.TypeOf((*MockApplicationOps)(nil).AppDying), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EnsureScale mocks base method.
func (m *MockApplicationOps) EnsureScale(arg0 string, arg1 caas.Application, arg2 life.Value, arg3 caasapplicationprovisioner.CAASProvisionerFacade, arg4 caasapplicationprovisioner.CAASUnitProvisionerFacade, arg5 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureScale", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureScale indicates an expected call of EnsureScale.
func (mr *MockApplicationOpsMockRecorder) EnsureScale(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureScale", reflect.TypeOf((*MockApplicationOps)(nil).EnsureScale), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EnsureTrust mocks base method.
func (m *MockApplicationOps) EnsureTrust(arg0 string, arg1 caas.Application, arg2 caasapplicationprovisioner.CAASUnitProvisionerFacade, arg3 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTrust", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureTrust indicates an expected call of EnsureTrust.
func (mr *MockApplicationOpsMockRecorder) EnsureTrust(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTrust", reflect.TypeOf((*MockApplicationOps)(nil).EnsureTrust), arg0, arg1, arg2, arg3)
}

// ReconcileApplicationStorage mocks base method.
func (m *MockApplicationOps) ReconcileApplicationStorage(arg0 string, arg1 caas.Application, arg2 caasapplicationprovisioner.CAASProvisionerFacade, arg3 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileApplicationStorage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileApplicationStorage indicates an expected call of ReconcileApplicationStorage.
func (mr *MockApplicationOpsMockRecorder) ReconcileApplicationStorage(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileApplicationStorage", reflect.TypeOf((*MockApplicationOps)(nil).ReconcileApplicationStorage), arg0, arg1, arg2, arg3)
}

// ReconcileDeadUnitScale mocks base method.
func (m *MockApplicationOps) ReconcileDeadUnitScale(arg0 string, arg1 caas.Application, arg2 caasapplicationprovisioner.CAASProvisionerFacade, arg3 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDeadUnitScale", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDeadUnitScale indicates an expected call of ReconcileDeadUnitScale.
func (mr *MockApplicationOpsMockRecorder) ReconcileDeadUnitScale(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDeadUnitScale", reflect.TypeOf((*MockApplicationOps)(nil).ReconcileDeadUnitScale), arg0, arg1, arg2, arg3)
}

// RefreshApplicationStatus mocks base method.
func (m *MockApplicationOps) RefreshApplicationStatus(arg0 string, arg1 caas.Application, arg2 life.Value, arg3 caasapplicationprovisioner.CAASProvisionerFacade, arg4 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshApplicationStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshApplicationStatus indicates an expected call of RefreshApplicationStatus.
func (mr *MockApplicationOpsMockRecorder) RefreshApplicationStatus(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshApplicationStatus", reflect.TypeOf((*MockApplicationOps)(nil).RefreshApplicationStatus), arg0, arg1, arg2, arg3, arg4)
}

// UpdateState mocks base method.
func (m *MockApplicationOps) UpdateState(arg0 string, arg1 caas.Application, arg2 map[string]status.StatusInfo, arg3 caasapplicationprovisioner.CAASBroker, arg4 caasapplicationprovisioner.CAASProvisionerFacade, arg5 caasapplicationprovisioner.CAASUnitProvisionerFacade, arg6 caasapplicationprovisioner.Logger) (map[string]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(map[string]status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockApplicationOpsMockRecorder) UpdateState(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockApplicationOps)(nil).UpdateState), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpgradePodSpec mocks base method.
func (m *MockApplicationOps) UpgradePodSpec(arg0 string, arg1 caasapplicationprovisioner.CAASBroker, arg2 clock.Clock, arg3 caasapplicationprovisioner.Tomb, arg4 caasapplicationprovisioner.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradePodSpec", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradePodSpec indicates an expected call of UpgradePodSpec.
func (mr *MockApplicationOpsMockRecorder) UpgradePodSpec(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePodSpec", reflect.TypeOf((*MockApplicationOps)(nil).UpgradePodSpec), arg0, arg1, arg2, arg3, arg4)
}

// VerifyCharmUpgraded mocks base method.
func (m *MockApplicationOps) VerifyCharmUpgraded(arg0 string, arg1 caasapplicationprovisioner.CAASProvisionerFacade, arg2 caasapplicationprovisioner.Tomb, arg3 caasapplicationprovisioner.Logger) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCharmUpgraded", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCharmUpgraded indicates an expected call of VerifyCharmUpgraded.
func (mr *MockApplicationOpsMockRecorder) VerifyCharmUpgraded(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCharmUpgraded", reflect.TypeOf((*MockApplicationOps)(nil).VerifyCharmUpgraded), arg0, arg1, arg2, arg3)
}

// WaitForTerminated mocks base method.
func (m *MockApplicationOps) WaitForTerminated(arg0 string, arg1 caas.Application, arg2 clock.Clock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForTerminated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForTerminated indicates an expected call of WaitForTerminated.
func (mr *MockApplicationOpsMockRecorder) WaitForTerminated(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTerminated", reflect.TypeOf((*MockApplicationOps)(nil).WaitForTerminated), arg0, arg1, arg2)
}
