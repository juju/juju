// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/caasapplicationprovisioner (interfaces: Runner)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/runner_mock.go github.com/juju/juju/internal/worker/caasapplicationprovisioner Runner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	worker "github.com/juju/worker/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockRunner) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockRunnerMockRecorder) Kill() *MockRunnerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockRunner)(nil).Kill))
	return &MockRunnerKillCall{Call: call}
}

// MockRunnerKillCall wrap *gomock.Call
type MockRunnerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRunnerKillCall) Return() *MockRunnerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRunnerKillCall) Do(f func()) *MockRunnerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRunnerKillCall) DoAndReturn(f func()) *MockRunnerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockRunner) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockRunnerMockRecorder) Report() *MockRunnerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockRunner)(nil).Report))
	return &MockRunnerReportCall{Call: call}
}

// MockRunnerReportCall wrap *gomock.Call
type MockRunnerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRunnerReportCall) Return(arg0 map[string]any) *MockRunnerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRunnerReportCall) Do(f func() map[string]any) *MockRunnerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRunnerReportCall) DoAndReturn(f func() map[string]any) *MockRunnerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartWorker mocks base method.
func (m *MockRunner) StartWorker(arg0 context.Context, arg1 string, arg2 func(context.Context) (worker.Worker, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorker", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWorker indicates an expected call of StartWorker.
func (mr *MockRunnerMockRecorder) StartWorker(arg0, arg1, arg2 any) *MockRunnerStartWorkerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorker", reflect.TypeOf((*MockRunner)(nil).StartWorker), arg0, arg1, arg2)
	return &MockRunnerStartWorkerCall{Call: call}
}

// MockRunnerStartWorkerCall wrap *gomock.Call
type MockRunnerStartWorkerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRunnerStartWorkerCall) Return(arg0 error) *MockRunnerStartWorkerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRunnerStartWorkerCall) Do(f func(context.Context, string, func(context.Context) (worker.Worker, error)) error) *MockRunnerStartWorkerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRunnerStartWorkerCall) DoAndReturn(f func(context.Context, string, func(context.Context) (worker.Worker, error)) error) *MockRunnerStartWorkerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopAndRemoveWorker mocks base method.
func (m *MockRunner) StopAndRemoveWorker(arg0 string, arg1 <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAndRemoveWorker", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAndRemoveWorker indicates an expected call of StopAndRemoveWorker.
func (mr *MockRunnerMockRecorder) StopAndRemoveWorker(arg0, arg1 any) *MockRunnerStopAndRemoveWorkerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAndRemoveWorker", reflect.TypeOf((*MockRunner)(nil).StopAndRemoveWorker), arg0, arg1)
	return &MockRunnerStopAndRemoveWorkerCall{Call: call}
}

// MockRunnerStopAndRemoveWorkerCall wrap *gomock.Call
type MockRunnerStopAndRemoveWorkerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRunnerStopAndRemoveWorkerCall) Return(arg0 error) *MockRunnerStopAndRemoveWorkerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRunnerStopAndRemoveWorkerCall) Do(f func(string, <-chan struct{}) error) *MockRunnerStopAndRemoveWorkerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRunnerStopAndRemoveWorkerCall) DoAndReturn(f func(string, <-chan struct{}) error) *MockRunnerStopAndRemoveWorkerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockRunner) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRunnerMockRecorder) Wait() *MockRunnerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRunner)(nil).Wait))
	return &MockRunnerWaitCall{Call: call}
}

// MockRunnerWaitCall wrap *gomock.Call
type MockRunnerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRunnerWaitCall) Return(arg0 error) *MockRunnerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRunnerWaitCall) Do(f func() error) *MockRunnerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRunnerWaitCall) DoAndReturn(f func() error) *MockRunnerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Worker mocks base method.
func (m *MockRunner) Worker(arg0 string, arg1 <-chan struct{}) (worker.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Worker", arg0, arg1)
	ret0, _ := ret[0].(worker.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Worker indicates an expected call of Worker.
func (mr *MockRunnerMockRecorder) Worker(arg0, arg1 any) *MockRunnerWorkerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worker", reflect.TypeOf((*MockRunner)(nil).Worker), arg0, arg1)
	return &MockRunnerWorkerCall{Call: call}
}

// MockRunnerWorkerCall wrap *gomock.Call
type MockRunnerWorkerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRunnerWorkerCall) Return(arg0 worker.Worker, arg1 error) *MockRunnerWorkerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRunnerWorkerCall) Do(f func(string, <-chan struct{}) (worker.Worker, error)) *MockRunnerWorkerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRunnerWorkerCall) DoAndReturn(f func(string, <-chan struct{}) (worker.Worker, error)) *MockRunnerWorkerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
