// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/leadership (interfaces: TrackerWorker)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/leadership_mock.go github.com/juju/juju/core/leadership TrackerWorker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	leadership "github.com/juju/juju/core/leadership"
	gomock "go.uber.org/mock/gomock"
)

// MockTrackerWorker is a mock of TrackerWorker interface.
type MockTrackerWorker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerWorkerMockRecorder
}

// MockTrackerWorkerMockRecorder is the mock recorder for MockTrackerWorker.
type MockTrackerWorkerMockRecorder struct {
	mock *MockTrackerWorker
}

// NewMockTrackerWorker creates a new mock instance.
func NewMockTrackerWorker(ctrl *gomock.Controller) *MockTrackerWorker {
	mock := &MockTrackerWorker{ctrl: ctrl}
	mock.recorder = &MockTrackerWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackerWorker) EXPECT() *MockTrackerWorkerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockTrackerWorker) ISGOMOCK() struct{} {
	return struct{}{}
}

// ApplicationName mocks base method.
func (m *MockTrackerWorker) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockTrackerWorkerMockRecorder) ApplicationName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockTrackerWorker)(nil).ApplicationName))
}

// ClaimDuration mocks base method.
func (m *MockTrackerWorker) ClaimDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ClaimDuration indicates an expected call of ClaimDuration.
func (mr *MockTrackerWorkerMockRecorder) ClaimDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimDuration", reflect.TypeOf((*MockTrackerWorker)(nil).ClaimDuration))
}

// ClaimLeader mocks base method.
func (m *MockTrackerWorker) ClaimLeader() leadership.Ticket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimLeader")
	ret0, _ := ret[0].(leadership.Ticket)
	return ret0
}

// ClaimLeader indicates an expected call of ClaimLeader.
func (mr *MockTrackerWorkerMockRecorder) ClaimLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimLeader", reflect.TypeOf((*MockTrackerWorker)(nil).ClaimLeader))
}

// Kill mocks base method.
func (m *MockTrackerWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockTrackerWorkerMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTrackerWorker)(nil).Kill))
}

// Wait mocks base method.
func (m *MockTrackerWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTrackerWorkerMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrackerWorker)(nil).Wait))
}

// WaitLeader mocks base method.
func (m *MockTrackerWorker) WaitLeader() leadership.Ticket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitLeader")
	ret0, _ := ret[0].(leadership.Ticket)
	return ret0
}

// WaitLeader indicates an expected call of WaitLeader.
func (mr *MockTrackerWorkerMockRecorder) WaitLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitLeader", reflect.TypeOf((*MockTrackerWorker)(nil).WaitLeader))
}

// WaitMinion mocks base method.
func (m *MockTrackerWorker) WaitMinion() leadership.Ticket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitMinion")
	ret0, _ := ret[0].(leadership.Ticket)
	return ret0
}

// WaitMinion indicates an expected call of WaitMinion.
func (mr *MockTrackerWorkerMockRecorder) WaitMinion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitMinion", reflect.TypeOf((*MockTrackerWorker)(nil).WaitMinion))
}

// WithStableLeadership mocks base method.
func (m *MockTrackerWorker) WithStableLeadership(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStableLeadership", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithStableLeadership indicates an expected call of WithStableLeadership.
func (mr *MockTrackerWorkerMockRecorder) WithStableLeadership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStableLeadership", reflect.TypeOf((*MockTrackerWorker)(nil).WithStableLeadership), arg0, arg1)
}
