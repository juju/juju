// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/secrets (interfaces: SecretStateTracker)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/tracker_mock.go github.com/juju/juju/internal/worker/uniter/secrets SecretStateTracker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	hook "github.com/juju/juju/internal/worker/uniter/hook"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretStateTracker is a mock of SecretStateTracker interface.
type MockSecretStateTracker struct {
	ctrl     *gomock.Controller
	recorder *MockSecretStateTrackerMockRecorder
}

// MockSecretStateTrackerMockRecorder is the mock recorder for MockSecretStateTracker.
type MockSecretStateTrackerMockRecorder struct {
	mock *MockSecretStateTracker
}

// NewMockSecretStateTracker creates a new mock instance.
func NewMockSecretStateTracker(ctrl *gomock.Controller) *MockSecretStateTracker {
	mock := &MockSecretStateTracker{ctrl: ctrl}
	mock.recorder = &MockSecretStateTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretStateTracker) EXPECT() *MockSecretStateTrackerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretStateTracker) ISGOMOCK() struct{} {
	return struct{}{}
}

// CommitHook mocks base method.
func (m *MockSecretStateTracker) CommitHook(arg0 context.Context, arg1 hook.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitHook indicates an expected call of CommitHook.
func (mr *MockSecretStateTrackerMockRecorder) CommitHook(arg0, arg1 any) *MockSecretStateTrackerCommitHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitHook", reflect.TypeOf((*MockSecretStateTracker)(nil).CommitHook), arg0, arg1)
	return &MockSecretStateTrackerCommitHookCall{Call: call}
}

// MockSecretStateTrackerCommitHookCall wrap *gomock.Call
type MockSecretStateTrackerCommitHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretStateTrackerCommitHookCall) Return(arg0 error) *MockSecretStateTrackerCommitHookCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretStateTrackerCommitHookCall) Do(f func(context.Context, hook.Info) error) *MockSecretStateTrackerCommitHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretStateTrackerCommitHookCall) DoAndReturn(f func(context.Context, hook.Info) error) *MockSecretStateTrackerCommitHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsumedSecretRevision mocks base method.
func (m *MockSecretStateTracker) ConsumedSecretRevision(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedSecretRevision", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// ConsumedSecretRevision indicates an expected call of ConsumedSecretRevision.
func (mr *MockSecretStateTrackerMockRecorder) ConsumedSecretRevision(arg0 any) *MockSecretStateTrackerConsumedSecretRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedSecretRevision", reflect.TypeOf((*MockSecretStateTracker)(nil).ConsumedSecretRevision), arg0)
	return &MockSecretStateTrackerConsumedSecretRevisionCall{Call: call}
}

// MockSecretStateTrackerConsumedSecretRevisionCall wrap *gomock.Call
type MockSecretStateTrackerConsumedSecretRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretStateTrackerConsumedSecretRevisionCall) Return(arg0 int) *MockSecretStateTrackerConsumedSecretRevisionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretStateTrackerConsumedSecretRevisionCall) Do(f func(string) int) *MockSecretStateTrackerConsumedSecretRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretStateTrackerConsumedSecretRevisionCall) DoAndReturn(f func(string) int) *MockSecretStateTrackerConsumedSecretRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareHook mocks base method.
func (m *MockSecretStateTracker) PrepareHook(arg0 context.Context, arg1 hook.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareHook indicates an expected call of PrepareHook.
func (mr *MockSecretStateTrackerMockRecorder) PrepareHook(arg0, arg1 any) *MockSecretStateTrackerPrepareHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHook", reflect.TypeOf((*MockSecretStateTracker)(nil).PrepareHook), arg0, arg1)
	return &MockSecretStateTrackerPrepareHookCall{Call: call}
}

// MockSecretStateTrackerPrepareHookCall wrap *gomock.Call
type MockSecretStateTrackerPrepareHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretStateTrackerPrepareHookCall) Return(arg0 error) *MockSecretStateTrackerPrepareHookCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretStateTrackerPrepareHookCall) Do(f func(context.Context, hook.Info) error) *MockSecretStateTrackerPrepareHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretStateTrackerPrepareHookCall) DoAndReturn(f func(context.Context, hook.Info) error) *MockSecretStateTrackerPrepareHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockSecretStateTracker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockSecretStateTrackerMockRecorder) Report() *MockSecretStateTrackerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockSecretStateTracker)(nil).Report))
	return &MockSecretStateTrackerReportCall{Call: call}
}

// MockSecretStateTrackerReportCall wrap *gomock.Call
type MockSecretStateTrackerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretStateTrackerReportCall) Return(arg0 map[string]any) *MockSecretStateTrackerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretStateTrackerReportCall) Do(f func() map[string]any) *MockSecretStateTrackerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretStateTrackerReportCall) DoAndReturn(f func() map[string]any) *MockSecretStateTrackerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretObsoleteRevisions mocks base method.
func (m *MockSecretStateTracker) SecretObsoleteRevisions(arg0 string) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretObsoleteRevisions", arg0)
	ret0, _ := ret[0].([]int)
	return ret0
}

// SecretObsoleteRevisions indicates an expected call of SecretObsoleteRevisions.
func (mr *MockSecretStateTrackerMockRecorder) SecretObsoleteRevisions(arg0 any) *MockSecretStateTrackerSecretObsoleteRevisionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretObsoleteRevisions", reflect.TypeOf((*MockSecretStateTracker)(nil).SecretObsoleteRevisions), arg0)
	return &MockSecretStateTrackerSecretObsoleteRevisionsCall{Call: call}
}

// MockSecretStateTrackerSecretObsoleteRevisionsCall wrap *gomock.Call
type MockSecretStateTrackerSecretObsoleteRevisionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretStateTrackerSecretObsoleteRevisionsCall) Return(arg0 []int) *MockSecretStateTrackerSecretObsoleteRevisionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretStateTrackerSecretObsoleteRevisionsCall) Do(f func(string) []int) *MockSecretStateTrackerSecretObsoleteRevisionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretStateTrackerSecretObsoleteRevisionsCall) DoAndReturn(f func(string) []int) *MockSecretStateTrackerSecretObsoleteRevisionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretsRemoved mocks base method.
func (m *MockSecretStateTracker) SecretsRemoved(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretsRemoved", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretsRemoved indicates an expected call of SecretsRemoved.
func (mr *MockSecretStateTrackerMockRecorder) SecretsRemoved(arg0, arg1 any) *MockSecretStateTrackerSecretsRemovedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretsRemoved", reflect.TypeOf((*MockSecretStateTracker)(nil).SecretsRemoved), arg0, arg1)
	return &MockSecretStateTrackerSecretsRemovedCall{Call: call}
}

// MockSecretStateTrackerSecretsRemovedCall wrap *gomock.Call
type MockSecretStateTrackerSecretsRemovedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretStateTrackerSecretsRemovedCall) Return(arg0 error) *MockSecretStateTrackerSecretsRemovedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretStateTrackerSecretsRemovedCall) Do(f func(context.Context, []string) error) *MockSecretStateTrackerSecretsRemovedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretStateTrackerSecretsRemovedCall) DoAndReturn(f func(context.Context, []string) error) *MockSecretStateTrackerSecretsRemovedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
