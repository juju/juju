// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/charm (interfaces: BundleReader,BundleInfo,Bundle)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/mocks.go github.com/juju/juju/internal/worker/uniter/charm BundleReader,BundleInfo,Bundle
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	set "github.com/juju/collections/set"
	charm "github.com/juju/juju/internal/worker/uniter/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockBundleReader is a mock of BundleReader interface.
type MockBundleReader struct {
	ctrl     *gomock.Controller
	recorder *MockBundleReaderMockRecorder
}

// MockBundleReaderMockRecorder is the mock recorder for MockBundleReader.
type MockBundleReaderMockRecorder struct {
	mock *MockBundleReader
}

// NewMockBundleReader creates a new mock instance.
func NewMockBundleReader(ctrl *gomock.Controller) *MockBundleReader {
	mock := &MockBundleReader{ctrl: ctrl}
	mock.recorder = &MockBundleReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundleReader) EXPECT() *MockBundleReaderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBundleReader) ISGOMOCK() struct{} {
	return struct{}{}
}

// Read mocks base method.
func (m *MockBundleReader) Read(arg0 context.Context, arg1 charm.BundleInfo, arg2 <-chan struct{}) (charm.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(charm.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBundleReaderMockRecorder) Read(arg0, arg1, arg2 any) *MockBundleReaderReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBundleReader)(nil).Read), arg0, arg1, arg2)
	return &MockBundleReaderReadCall{Call: call}
}

// MockBundleReaderReadCall wrap *gomock.Call
type MockBundleReaderReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleReaderReadCall) Return(arg0 charm.Bundle, arg1 error) *MockBundleReaderReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleReaderReadCall) Do(f func(context.Context, charm.BundleInfo, <-chan struct{}) (charm.Bundle, error)) *MockBundleReaderReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleReaderReadCall) DoAndReturn(f func(context.Context, charm.BundleInfo, <-chan struct{}) (charm.Bundle, error)) *MockBundleReaderReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBundleInfo is a mock of BundleInfo interface.
type MockBundleInfo struct {
	ctrl     *gomock.Controller
	recorder *MockBundleInfoMockRecorder
}

// MockBundleInfoMockRecorder is the mock recorder for MockBundleInfo.
type MockBundleInfoMockRecorder struct {
	mock *MockBundleInfo
}

// NewMockBundleInfo creates a new mock instance.
func NewMockBundleInfo(ctrl *gomock.Controller) *MockBundleInfo {
	mock := &MockBundleInfo{ctrl: ctrl}
	mock.recorder = &MockBundleInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundleInfo) EXPECT() *MockBundleInfoMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBundleInfo) ISGOMOCK() struct{} {
	return struct{}{}
}

// ArchiveSha256 mocks base method.
func (m *MockBundleInfo) ArchiveSha256(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveSha256", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveSha256 indicates an expected call of ArchiveSha256.
func (mr *MockBundleInfoMockRecorder) ArchiveSha256(arg0 any) *MockBundleInfoArchiveSha256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveSha256", reflect.TypeOf((*MockBundleInfo)(nil).ArchiveSha256), arg0)
	return &MockBundleInfoArchiveSha256Call{Call: call}
}

// MockBundleInfoArchiveSha256Call wrap *gomock.Call
type MockBundleInfoArchiveSha256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleInfoArchiveSha256Call) Return(arg0 string, arg1 error) *MockBundleInfoArchiveSha256Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleInfoArchiveSha256Call) Do(f func(context.Context) (string, error)) *MockBundleInfoArchiveSha256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleInfoArchiveSha256Call) DoAndReturn(f func(context.Context) (string, error)) *MockBundleInfoArchiveSha256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// URL mocks base method.
func (m *MockBundleInfo) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockBundleInfoMockRecorder) URL() *MockBundleInfoURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockBundleInfo)(nil).URL))
	return &MockBundleInfoURLCall{Call: call}
}

// MockBundleInfoURLCall wrap *gomock.Call
type MockBundleInfoURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleInfoURLCall) Return(arg0 string) *MockBundleInfoURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleInfoURLCall) Do(f func() string) *MockBundleInfoURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleInfoURLCall) DoAndReturn(f func() string) *MockBundleInfoURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBundle is a mock of Bundle interface.
type MockBundle struct {
	ctrl     *gomock.Controller
	recorder *MockBundleMockRecorder
}

// MockBundleMockRecorder is the mock recorder for MockBundle.
type MockBundleMockRecorder struct {
	mock *MockBundle
}

// NewMockBundle creates a new mock instance.
func NewMockBundle(ctrl *gomock.Controller) *MockBundle {
	mock := &MockBundle{ctrl: ctrl}
	mock.recorder = &MockBundleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundle) EXPECT() *MockBundleMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBundle) ISGOMOCK() struct{} {
	return struct{}{}
}

// ArchiveMembers mocks base method.
func (m *MockBundle) ArchiveMembers() (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveMembers")
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveMembers indicates an expected call of ArchiveMembers.
func (mr *MockBundleMockRecorder) ArchiveMembers() *MockBundleArchiveMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveMembers", reflect.TypeOf((*MockBundle)(nil).ArchiveMembers))
	return &MockBundleArchiveMembersCall{Call: call}
}

// MockBundleArchiveMembersCall wrap *gomock.Call
type MockBundleArchiveMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleArchiveMembersCall) Return(arg0 set.Strings, arg1 error) *MockBundleArchiveMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleArchiveMembersCall) Do(f func() (set.Strings, error)) *MockBundleArchiveMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleArchiveMembersCall) DoAndReturn(f func() (set.Strings, error)) *MockBundleArchiveMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExpandTo mocks base method.
func (m *MockBundle) ExpandTo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpandTo indicates an expected call of ExpandTo.
func (mr *MockBundleMockRecorder) ExpandTo(arg0 any) *MockBundleExpandToCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandTo", reflect.TypeOf((*MockBundle)(nil).ExpandTo), arg0)
	return &MockBundleExpandToCall{Call: call}
}

// MockBundleExpandToCall wrap *gomock.Call
type MockBundleExpandToCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleExpandToCall) Return(arg0 error) *MockBundleExpandToCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleExpandToCall) Do(f func(string) error) *MockBundleExpandToCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleExpandToCall) DoAndReturn(f func(string) error) *MockBundleExpandToCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
