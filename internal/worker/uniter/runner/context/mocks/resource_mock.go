// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/runner/context/resources (interfaces: OpenedResourceClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ../mocks/resource_mock.go github.com/juju/juju/internal/worker/uniter/runner/context/resources OpenedResourceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	resource "github.com/juju/juju/core/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenedResourceClient is a mock of OpenedResourceClient interface.
type MockOpenedResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenedResourceClientMockRecorder
}

// MockOpenedResourceClientMockRecorder is the mock recorder for MockOpenedResourceClient.
type MockOpenedResourceClientMockRecorder struct {
	mock *MockOpenedResourceClient
}

// NewMockOpenedResourceClient creates a new mock instance.
func NewMockOpenedResourceClient(ctrl *gomock.Controller) *MockOpenedResourceClient {
	mock := &MockOpenedResourceClient{ctrl: ctrl}
	mock.recorder = &MockOpenedResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenedResourceClient) EXPECT() *MockOpenedResourceClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOpenedResourceClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetResource mocks base method.
func (m *MockOpenedResourceClient) GetResource(arg0 context.Context, arg1 string) (resource.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResource indicates an expected call of GetResource.
func (mr *MockOpenedResourceClientMockRecorder) GetResource(arg0, arg1 any) *MockOpenedResourceClientGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockOpenedResourceClient)(nil).GetResource), arg0, arg1)
	return &MockOpenedResourceClientGetResourceCall{Call: call}
}

// MockOpenedResourceClientGetResourceCall wrap *gomock.Call
type MockOpenedResourceClientGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOpenedResourceClientGetResourceCall) Return(arg0 resource.Resource, arg1 io.ReadCloser, arg2 error) *MockOpenedResourceClientGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOpenedResourceClientGetResourceCall) Do(f func(context.Context, string) (resource.Resource, io.ReadCloser, error)) *MockOpenedResourceClientGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOpenedResourceClientGetResourceCall) DoAndReturn(f func(context.Context, string) (resource.Resource, io.ReadCloser, error)) *MockOpenedResourceClientGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
