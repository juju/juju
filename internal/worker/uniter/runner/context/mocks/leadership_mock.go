// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/runner/context (interfaces: LeadershipContext)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/leadership_mock.go github.com/juju/juju/internal/worker/uniter/runner/context LeadershipContext
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLeadershipContext is a mock of LeadershipContext interface.
type MockLeadershipContext struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipContextMockRecorder
}

// MockLeadershipContextMockRecorder is the mock recorder for MockLeadershipContext.
type MockLeadershipContextMockRecorder struct {
	mock *MockLeadershipContext
}

// NewMockLeadershipContext creates a new mock instance.
func NewMockLeadershipContext(ctrl *gomock.Controller) *MockLeadershipContext {
	mock := &MockLeadershipContext{ctrl: ctrl}
	mock.recorder = &MockLeadershipContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadershipContext) EXPECT() *MockLeadershipContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLeadershipContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// IsLeader mocks base method.
func (m *MockLeadershipContext) IsLeader() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeader")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeader indicates an expected call of IsLeader.
func (mr *MockLeadershipContextMockRecorder) IsLeader() *MockLeadershipContextIsLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeader", reflect.TypeOf((*MockLeadershipContext)(nil).IsLeader))
	return &MockLeadershipContextIsLeaderCall{Call: call}
}

// MockLeadershipContextIsLeaderCall wrap *gomock.Call
type MockLeadershipContextIsLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipContextIsLeaderCall) Return(arg0 bool, arg1 error) *MockLeadershipContextIsLeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipContextIsLeaderCall) Do(f func() (bool, error)) *MockLeadershipContextIsLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipContextIsLeaderCall) DoAndReturn(f func() (bool, error)) *MockLeadershipContextIsLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
