// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/runner/jujuc (interfaces: JujuLogContext)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/juju-log_mock.go github.com/juju/juju/internal/worker/uniter/runner/jujuc JujuLogContext
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	logger "github.com/juju/juju/core/logger"
	jujuc "github.com/juju/juju/internal/worker/uniter/runner/jujuc"
	gomock "go.uber.org/mock/gomock"
)

// MockJujuLogContext is a mock of JujuLogContext interface.
type MockJujuLogContext struct {
	ctrl     *gomock.Controller
	recorder *MockJujuLogContextMockRecorder
}

// MockJujuLogContextMockRecorder is the mock recorder for MockJujuLogContext.
type MockJujuLogContextMockRecorder struct {
	mock *MockJujuLogContext
}

// NewMockJujuLogContext creates a new mock instance.
func NewMockJujuLogContext(ctrl *gomock.Controller) *MockJujuLogContext {
	mock := &MockJujuLogContext{ctrl: ctrl}
	mock.recorder = &MockJujuLogContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJujuLogContext) EXPECT() *MockJujuLogContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockJujuLogContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetLoggerByName mocks base method.
func (m *MockJujuLogContext) GetLoggerByName(arg0 string) logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerByName", arg0)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// GetLoggerByName indicates an expected call of GetLoggerByName.
func (mr *MockJujuLogContextMockRecorder) GetLoggerByName(arg0 any) *MockJujuLogContextGetLoggerByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerByName", reflect.TypeOf((*MockJujuLogContext)(nil).GetLoggerByName), arg0)
	return &MockJujuLogContextGetLoggerByNameCall{Call: call}
}

// MockJujuLogContextGetLoggerByNameCall wrap *gomock.Call
type MockJujuLogContextGetLoggerByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJujuLogContextGetLoggerByNameCall) Return(arg0 logger.Logger) *MockJujuLogContextGetLoggerByNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJujuLogContextGetLoggerByNameCall) Do(f func(string) logger.Logger) *MockJujuLogContextGetLoggerByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJujuLogContextGetLoggerByNameCall) DoAndReturn(f func(string) logger.Logger) *MockJujuLogContextGetLoggerByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HookRelation mocks base method.
func (m *MockJujuLogContext) HookRelation() (jujuc.ContextRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HookRelation")
	ret0, _ := ret[0].(jujuc.ContextRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HookRelation indicates an expected call of HookRelation.
func (mr *MockJujuLogContextMockRecorder) HookRelation() *MockJujuLogContextHookRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookRelation", reflect.TypeOf((*MockJujuLogContext)(nil).HookRelation))
	return &MockJujuLogContextHookRelationCall{Call: call}
}

// MockJujuLogContextHookRelationCall wrap *gomock.Call
type MockJujuLogContextHookRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJujuLogContextHookRelationCall) Return(arg0 jujuc.ContextRelation, arg1 error) *MockJujuLogContextHookRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJujuLogContextHookRelationCall) Do(f func() (jujuc.ContextRelation, error)) *MockJujuLogContextHookRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJujuLogContextHookRelationCall) DoAndReturn(f func() (jujuc.ContextRelation, error)) *MockJujuLogContextHookRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitName mocks base method.
func (m *MockJujuLogContext) UnitName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UnitName indicates an expected call of UnitName.
func (mr *MockJujuLogContextMockRecorder) UnitName() *MockJujuLogContextUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitName", reflect.TypeOf((*MockJujuLogContext)(nil).UnitName))
	return &MockJujuLogContextUnitNameCall{Call: call}
}

// MockJujuLogContextUnitNameCall wrap *gomock.Call
type MockJujuLogContextUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJujuLogContextUnitNameCall) Return(arg0 string) *MockJujuLogContextUnitNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJujuLogContextUnitNameCall) Do(f func() string) *MockJujuLogContextUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJujuLogContextUnitNameCall) DoAndReturn(f func() string) *MockJujuLogContextUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
