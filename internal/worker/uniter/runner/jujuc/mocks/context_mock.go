// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/runner/jujuc (interfaces: Context)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/context_mock.go github.com/juju/juju/internal/worker/uniter/runner/jujuc Context
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	logger "github.com/juju/juju/core/logger"
	network "github.com/juju/juju/core/network"
	secrets "github.com/juju/juju/core/secrets"
	charm "github.com/juju/juju/internal/charm"
	jujuc "github.com/juju/juju/internal/worker/uniter/runner/jujuc"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// ActionParams mocks base method.
func (m *MockContext) ActionParams() (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionParams")
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionParams indicates an expected call of ActionParams.
func (mr *MockContextMockRecorder) ActionParams() *MockContextActionParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionParams", reflect.TypeOf((*MockContext)(nil).ActionParams))
	return &MockContextActionParamsCall{Call: call}
}

// MockContextActionParamsCall wrap *gomock.Call
type MockContextActionParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextActionParamsCall) Return(arg0 map[string]any, arg1 error) *MockContextActionParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextActionParamsCall) Do(f func() (map[string]any, error)) *MockContextActionParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextActionParamsCall) DoAndReturn(f func() (map[string]any, error)) *MockContextActionParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUnitStorage mocks base method.
func (m *MockContext) AddUnitStorage(arg0 map[string]params.StorageDirectives) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUnitStorage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUnitStorage indicates an expected call of AddUnitStorage.
func (mr *MockContextMockRecorder) AddUnitStorage(arg0 any) *MockContextAddUnitStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnitStorage", reflect.TypeOf((*MockContext)(nil).AddUnitStorage), arg0)
	return &MockContextAddUnitStorageCall{Call: call}
}

// MockContextAddUnitStorageCall wrap *gomock.Call
type MockContextAddUnitStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextAddUnitStorageCall) Return(arg0 error) *MockContextAddUnitStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextAddUnitStorageCall) Do(f func(map[string]params.StorageDirectives) error) *MockContextAddUnitStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextAddUnitStorageCall) DoAndReturn(f func(map[string]params.StorageDirectives) error) *MockContextAddUnitStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationStatus mocks base method.
func (m *MockContext) ApplicationStatus(arg0 context.Context) (jujuc.ApplicationStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationStatus", arg0)
	ret0, _ := ret[0].(jujuc.ApplicationStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationStatus indicates an expected call of ApplicationStatus.
func (mr *MockContextMockRecorder) ApplicationStatus(arg0 any) *MockContextApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationStatus", reflect.TypeOf((*MockContext)(nil).ApplicationStatus), arg0)
	return &MockContextApplicationStatusCall{Call: call}
}

// MockContextApplicationStatusCall wrap *gomock.Call
type MockContextApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextApplicationStatusCall) Return(arg0 jujuc.ApplicationStatusInfo, arg1 error) *MockContextApplicationStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextApplicationStatusCall) Do(f func(context.Context) (jujuc.ApplicationStatusInfo, error)) *MockContextApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextApplicationStatusCall) DoAndReturn(f func(context.Context) (jujuc.ApplicationStatusInfo, error)) *MockContextApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AvailabilityZone mocks base method.
func (m *MockContext) AvailabilityZone() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZone")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZone indicates an expected call of AvailabilityZone.
func (mr *MockContextMockRecorder) AvailabilityZone() *MockContextAvailabilityZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZone", reflect.TypeOf((*MockContext)(nil).AvailabilityZone))
	return &MockContextAvailabilityZoneCall{Call: call}
}

// MockContextAvailabilityZoneCall wrap *gomock.Call
type MockContextAvailabilityZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextAvailabilityZoneCall) Return(arg0 string, arg1 error) *MockContextAvailabilityZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextAvailabilityZoneCall) Do(f func() (string, error)) *MockContextAvailabilityZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextAvailabilityZoneCall) DoAndReturn(f func() (string, error)) *MockContextAvailabilityZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClosePortRange mocks base method.
func (m *MockContext) ClosePortRange(arg0 string, arg1 network.PortRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePortRange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePortRange indicates an expected call of ClosePortRange.
func (mr *MockContextMockRecorder) ClosePortRange(arg0, arg1 any) *MockContextClosePortRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePortRange", reflect.TypeOf((*MockContext)(nil).ClosePortRange), arg0, arg1)
	return &MockContextClosePortRangeCall{Call: call}
}

// MockContextClosePortRangeCall wrap *gomock.Call
type MockContextClosePortRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextClosePortRangeCall) Return(arg0 error) *MockContextClosePortRangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextClosePortRangeCall) Do(f func(string, network.PortRange) error) *MockContextClosePortRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextClosePortRangeCall) DoAndReturn(f func(string, network.PortRange) error) *MockContextClosePortRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudSpec mocks base method.
func (m *MockContext) CloudSpec(arg0 context.Context) (*params.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSpec", arg0)
	ret0, _ := ret[0].(*params.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSpec indicates an expected call of CloudSpec.
func (mr *MockContextMockRecorder) CloudSpec(arg0 any) *MockContextCloudSpecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSpec", reflect.TypeOf((*MockContext)(nil).CloudSpec), arg0)
	return &MockContextCloudSpecCall{Call: call}
}

// MockContextCloudSpecCall wrap *gomock.Call
type MockContextCloudSpecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextCloudSpecCall) Return(arg0 *params.CloudSpec, arg1 error) *MockContextCloudSpecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextCloudSpecCall) Do(f func(context.Context) (*params.CloudSpec, error)) *MockContextCloudSpecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextCloudSpecCall) DoAndReturn(f func(context.Context) (*params.CloudSpec, error)) *MockContextCloudSpecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfigSettings mocks base method.
func (m *MockContext) ConfigSettings(arg0 context.Context) (charm.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSettings", arg0)
	ret0, _ := ret[0].(charm.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigSettings indicates an expected call of ConfigSettings.
func (mr *MockContextMockRecorder) ConfigSettings(arg0 any) *MockContextConfigSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSettings", reflect.TypeOf((*MockContext)(nil).ConfigSettings), arg0)
	return &MockContextConfigSettingsCall{Call: call}
}

// MockContextConfigSettingsCall wrap *gomock.Call
type MockContextConfigSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextConfigSettingsCall) Return(arg0 charm.Settings, arg1 error) *MockContextConfigSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextConfigSettingsCall) Do(f func(context.Context) (charm.Settings, error)) *MockContextConfigSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextConfigSettingsCall) DoAndReturn(f func(context.Context) (charm.Settings, error)) *MockContextConfigSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSecret mocks base method.
func (m *MockContext) CreateSecret(arg0 context.Context, arg1 *jujuc.SecretCreateArgs) (*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockContextMockRecorder) CreateSecret(arg0, arg1 any) *MockContextCreateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockContext)(nil).CreateSecret), arg0, arg1)
	return &MockContextCreateSecretCall{Call: call}
}

// MockContextCreateSecretCall wrap *gomock.Call
type MockContextCreateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextCreateSecretCall) Return(arg0 *secrets.URI, arg1 error) *MockContextCreateSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextCreateSecretCall) Do(f func(context.Context, *jujuc.SecretCreateArgs) (*secrets.URI, error)) *MockContextCreateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextCreateSecretCall) DoAndReturn(f func(context.Context, *jujuc.SecretCreateArgs) (*secrets.URI, error)) *MockContextCreateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCharmStateValue mocks base method.
func (m *MockContext) DeleteCharmStateValue(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharmStateValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCharmStateValue indicates an expected call of DeleteCharmStateValue.
func (mr *MockContextMockRecorder) DeleteCharmStateValue(arg0, arg1 any) *MockContextDeleteCharmStateValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharmStateValue", reflect.TypeOf((*MockContext)(nil).DeleteCharmStateValue), arg0, arg1)
	return &MockContextDeleteCharmStateValueCall{Call: call}
}

// MockContextDeleteCharmStateValueCall wrap *gomock.Call
type MockContextDeleteCharmStateValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDeleteCharmStateValueCall) Return(arg0 error) *MockContextDeleteCharmStateValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDeleteCharmStateValueCall) Do(f func(context.Context, string) error) *MockContextDeleteCharmStateValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDeleteCharmStateValueCall) DoAndReturn(f func(context.Context, string) error) *MockContextDeleteCharmStateValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DownloadResource mocks base method.
func (m *MockContext) DownloadResource(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadResource", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadResource indicates an expected call of DownloadResource.
func (mr *MockContextMockRecorder) DownloadResource(arg0, arg1 any) *MockContextDownloadResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadResource", reflect.TypeOf((*MockContext)(nil).DownloadResource), arg0, arg1)
	return &MockContextDownloadResourceCall{Call: call}
}

// MockContextDownloadResourceCall wrap *gomock.Call
type MockContextDownloadResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDownloadResourceCall) Return(arg0 string, arg1 error) *MockContextDownloadResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDownloadResourceCall) Do(f func(context.Context, string) (string, error)) *MockContextDownloadResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDownloadResourceCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockContextDownloadResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmState mocks base method.
func (m *MockContext) GetCharmState(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmState", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmState indicates an expected call of GetCharmState.
func (mr *MockContextMockRecorder) GetCharmState(arg0 any) *MockContextGetCharmStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmState", reflect.TypeOf((*MockContext)(nil).GetCharmState), arg0)
	return &MockContextGetCharmStateCall{Call: call}
}

// MockContextGetCharmStateCall wrap *gomock.Call
type MockContextGetCharmStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGetCharmStateCall) Return(arg0 map[string]string, arg1 error) *MockContextGetCharmStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGetCharmStateCall) Do(f func(context.Context) (map[string]string, error)) *MockContextGetCharmStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGetCharmStateCall) DoAndReturn(f func(context.Context) (map[string]string, error)) *MockContextGetCharmStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmStateValue mocks base method.
func (m *MockContext) GetCharmStateValue(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmStateValue", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmStateValue indicates an expected call of GetCharmStateValue.
func (mr *MockContextMockRecorder) GetCharmStateValue(arg0, arg1 any) *MockContextGetCharmStateValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmStateValue", reflect.TypeOf((*MockContext)(nil).GetCharmStateValue), arg0, arg1)
	return &MockContextGetCharmStateValueCall{Call: call}
}

// MockContextGetCharmStateValueCall wrap *gomock.Call
type MockContextGetCharmStateValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGetCharmStateValueCall) Return(arg0 string, arg1 error) *MockContextGetCharmStateValueCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGetCharmStateValueCall) Do(f func(context.Context, string) (string, error)) *MockContextGetCharmStateValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGetCharmStateValueCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockContextGetCharmStateValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLoggerByName mocks base method.
func (m *MockContext) GetLoggerByName(arg0 string) logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerByName", arg0)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// GetLoggerByName indicates an expected call of GetLoggerByName.
func (mr *MockContextMockRecorder) GetLoggerByName(arg0 any) *MockContextGetLoggerByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerByName", reflect.TypeOf((*MockContext)(nil).GetLoggerByName), arg0)
	return &MockContextGetLoggerByNameCall{Call: call}
}

// MockContextGetLoggerByNameCall wrap *gomock.Call
type MockContextGetLoggerByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGetLoggerByNameCall) Return(arg0 logger.Logger) *MockContextGetLoggerByNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGetLoggerByNameCall) Do(f func(string) logger.Logger) *MockContextGetLoggerByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGetLoggerByNameCall) DoAndReturn(f func(string) logger.Logger) *MockContextGetLoggerByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecret mocks base method.
func (m *MockContext) GetSecret(arg0 context.Context, arg1 *secrets.URI, arg2 string, arg3, arg4 bool) (secrets.SecretValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(secrets.SecretValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockContextMockRecorder) GetSecret(arg0, arg1, arg2, arg3, arg4 any) *MockContextGetSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockContext)(nil).GetSecret), arg0, arg1, arg2, arg3, arg4)
	return &MockContextGetSecretCall{Call: call}
}

// MockContextGetSecretCall wrap *gomock.Call
type MockContextGetSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGetSecretCall) Return(arg0 secrets.SecretValue, arg1 error) *MockContextGetSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGetSecretCall) Do(f func(context.Context, *secrets.URI, string, bool, bool) (secrets.SecretValue, error)) *MockContextGetSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGetSecretCall) DoAndReturn(f func(context.Context, *secrets.URI, string, bool, bool) (secrets.SecretValue, error)) *MockContextGetSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GoalState mocks base method.
func (m *MockContext) GoalState(arg0 context.Context) (*application.GoalState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoalState", arg0)
	ret0, _ := ret[0].(*application.GoalState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoalState indicates an expected call of GoalState.
func (mr *MockContextMockRecorder) GoalState(arg0 any) *MockContextGoalStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoalState", reflect.TypeOf((*MockContext)(nil).GoalState), arg0)
	return &MockContextGoalStateCall{Call: call}
}

// MockContextGoalStateCall wrap *gomock.Call
type MockContextGoalStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGoalStateCall) Return(arg0 *application.GoalState, arg1 error) *MockContextGoalStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGoalStateCall) Do(f func(context.Context) (*application.GoalState, error)) *MockContextGoalStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGoalStateCall) DoAndReturn(f func(context.Context) (*application.GoalState, error)) *MockContextGoalStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GrantSecret mocks base method.
func (m *MockContext) GrantSecret(arg0 *secrets.URI, arg1 *jujuc.SecretGrantRevokeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantSecret indicates an expected call of GrantSecret.
func (mr *MockContextMockRecorder) GrantSecret(arg0, arg1 any) *MockContextGrantSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantSecret", reflect.TypeOf((*MockContext)(nil).GrantSecret), arg0, arg1)
	return &MockContextGrantSecretCall{Call: call}
}

// MockContextGrantSecretCall wrap *gomock.Call
type MockContextGrantSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextGrantSecretCall) Return(arg0 error) *MockContextGrantSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextGrantSecretCall) Do(f func(*secrets.URI, *jujuc.SecretGrantRevokeArgs) error) *MockContextGrantSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextGrantSecretCall) DoAndReturn(f func(*secrets.URI, *jujuc.SecretGrantRevokeArgs) error) *MockContextGrantSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HookRelation mocks base method.
func (m *MockContext) HookRelation() (jujuc.ContextRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HookRelation")
	ret0, _ := ret[0].(jujuc.ContextRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HookRelation indicates an expected call of HookRelation.
func (mr *MockContextMockRecorder) HookRelation() *MockContextHookRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookRelation", reflect.TypeOf((*MockContext)(nil).HookRelation))
	return &MockContextHookRelationCall{Call: call}
}

// MockContextHookRelationCall wrap *gomock.Call
type MockContextHookRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextHookRelationCall) Return(arg0 jujuc.ContextRelation, arg1 error) *MockContextHookRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextHookRelationCall) Do(f func() (jujuc.ContextRelation, error)) *MockContextHookRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextHookRelationCall) DoAndReturn(f func() (jujuc.ContextRelation, error)) *MockContextHookRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HookStorage mocks base method.
func (m *MockContext) HookStorage(arg0 context.Context) (jujuc.ContextStorageAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HookStorage", arg0)
	ret0, _ := ret[0].(jujuc.ContextStorageAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HookStorage indicates an expected call of HookStorage.
func (mr *MockContextMockRecorder) HookStorage(arg0 any) *MockContextHookStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookStorage", reflect.TypeOf((*MockContext)(nil).HookStorage), arg0)
	return &MockContextHookStorageCall{Call: call}
}

// MockContextHookStorageCall wrap *gomock.Call
type MockContextHookStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextHookStorageCall) Return(arg0 jujuc.ContextStorageAttachment, arg1 error) *MockContextHookStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextHookStorageCall) Do(f func(context.Context) (jujuc.ContextStorageAttachment, error)) *MockContextHookStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextHookStorageCall) DoAndReturn(f func(context.Context) (jujuc.ContextStorageAttachment, error)) *MockContextHookStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsLeader mocks base method.
func (m *MockContext) IsLeader() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeader")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeader indicates an expected call of IsLeader.
func (mr *MockContextMockRecorder) IsLeader() *MockContextIsLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeader", reflect.TypeOf((*MockContext)(nil).IsLeader))
	return &MockContextIsLeaderCall{Call: call}
}

// MockContextIsLeaderCall wrap *gomock.Call
type MockContextIsLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextIsLeaderCall) Return(arg0 bool, arg1 error) *MockContextIsLeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextIsLeaderCall) Do(f func() (bool, error)) *MockContextIsLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextIsLeaderCall) DoAndReturn(f func() (bool, error)) *MockContextIsLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LogActionMessage mocks base method.
func (m *MockContext) LogActionMessage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogActionMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogActionMessage indicates an expected call of LogActionMessage.
func (mr *MockContextMockRecorder) LogActionMessage(arg0, arg1 any) *MockContextLogActionMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogActionMessage", reflect.TypeOf((*MockContext)(nil).LogActionMessage), arg0, arg1)
	return &MockContextLogActionMessageCall{Call: call}
}

// MockContextLogActionMessageCall wrap *gomock.Call
type MockContextLogActionMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextLogActionMessageCall) Return(arg0 error) *MockContextLogActionMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextLogActionMessageCall) Do(f func(context.Context, string) error) *MockContextLogActionMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextLogActionMessageCall) DoAndReturn(f func(context.Context, string) error) *MockContextLogActionMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NetworkInfo mocks base method.
func (m *MockContext) NetworkInfo(arg0 context.Context, arg1 []string, arg2 int) (map[string]params.NetworkInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]params.NetworkInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInfo indicates an expected call of NetworkInfo.
func (mr *MockContextMockRecorder) NetworkInfo(arg0, arg1, arg2 any) *MockContextNetworkInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInfo", reflect.TypeOf((*MockContext)(nil).NetworkInfo), arg0, arg1, arg2)
	return &MockContextNetworkInfoCall{Call: call}
}

// MockContextNetworkInfoCall wrap *gomock.Call
type MockContextNetworkInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextNetworkInfoCall) Return(arg0 map[string]params.NetworkInfoResult, arg1 error) *MockContextNetworkInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextNetworkInfoCall) Do(f func(context.Context, []string, int) (map[string]params.NetworkInfoResult, error)) *MockContextNetworkInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextNetworkInfoCall) DoAndReturn(f func(context.Context, []string, int) (map[string]params.NetworkInfoResult, error)) *MockContextNetworkInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenPortRange mocks base method.
func (m *MockContext) OpenPortRange(arg0 string, arg1 network.PortRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPortRange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenPortRange indicates an expected call of OpenPortRange.
func (mr *MockContextMockRecorder) OpenPortRange(arg0, arg1 any) *MockContextOpenPortRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPortRange", reflect.TypeOf((*MockContext)(nil).OpenPortRange), arg0, arg1)
	return &MockContextOpenPortRangeCall{Call: call}
}

// MockContextOpenPortRangeCall wrap *gomock.Call
type MockContextOpenPortRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextOpenPortRangeCall) Return(arg0 error) *MockContextOpenPortRangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextOpenPortRangeCall) Do(f func(string, network.PortRange) error) *MockContextOpenPortRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextOpenPortRangeCall) DoAndReturn(f func(string, network.PortRange) error) *MockContextOpenPortRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenedPortRanges mocks base method.
func (m *MockContext) OpenedPortRanges() network.GroupedPortRanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenedPortRanges")
	ret0, _ := ret[0].(network.GroupedPortRanges)
	return ret0
}

// OpenedPortRanges indicates an expected call of OpenedPortRanges.
func (mr *MockContextMockRecorder) OpenedPortRanges() *MockContextOpenedPortRangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenedPortRanges", reflect.TypeOf((*MockContext)(nil).OpenedPortRanges))
	return &MockContextOpenedPortRangesCall{Call: call}
}

// MockContextOpenedPortRangesCall wrap *gomock.Call
type MockContextOpenedPortRangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextOpenedPortRangesCall) Return(arg0 network.GroupedPortRanges) *MockContextOpenedPortRangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextOpenedPortRangesCall) Do(f func() network.GroupedPortRanges) *MockContextOpenedPortRangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextOpenedPortRangesCall) DoAndReturn(f func() network.GroupedPortRanges) *MockContextOpenedPortRangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrivateAddress mocks base method.
func (m *MockContext) PrivateAddress() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateAddress indicates an expected call of PrivateAddress.
func (mr *MockContextMockRecorder) PrivateAddress() *MockContextPrivateAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateAddress", reflect.TypeOf((*MockContext)(nil).PrivateAddress))
	return &MockContextPrivateAddressCall{Call: call}
}

// MockContextPrivateAddressCall wrap *gomock.Call
type MockContextPrivateAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextPrivateAddressCall) Return(arg0 string, arg1 error) *MockContextPrivateAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextPrivateAddressCall) Do(f func() (string, error)) *MockContextPrivateAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextPrivateAddressCall) DoAndReturn(f func() (string, error)) *MockContextPrivateAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicAddress mocks base method.
func (m *MockContext) PublicAddress(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockContextMockRecorder) PublicAddress(arg0 any) *MockContextPublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockContext)(nil).PublicAddress), arg0)
	return &MockContextPublicAddressCall{Call: call}
}

// MockContextPublicAddressCall wrap *gomock.Call
type MockContextPublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextPublicAddressCall) Return(arg0 string, arg1 error) *MockContextPublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextPublicAddressCall) Do(f func(context.Context) (string, error)) *MockContextPublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextPublicAddressCall) DoAndReturn(f func(context.Context) (string, error)) *MockContextPublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Relation mocks base method.
func (m *MockContext) Relation(arg0 int) (jujuc.ContextRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relation", arg0)
	ret0, _ := ret[0].(jujuc.ContextRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relation indicates an expected call of Relation.
func (mr *MockContextMockRecorder) Relation(arg0 any) *MockContextRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockContext)(nil).Relation), arg0)
	return &MockContextRelationCall{Call: call}
}

// MockContextRelationCall wrap *gomock.Call
type MockContextRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationCall) Return(arg0 jujuc.ContextRelation, arg1 error) *MockContextRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationCall) Do(f func(int) (jujuc.ContextRelation, error)) *MockContextRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationCall) DoAndReturn(f func(int) (jujuc.ContextRelation, error)) *MockContextRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationIds mocks base method.
func (m *MockContext) RelationIds() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationIds")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationIds indicates an expected call of RelationIds.
func (mr *MockContextMockRecorder) RelationIds() *MockContextRelationIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationIds", reflect.TypeOf((*MockContext)(nil).RelationIds))
	return &MockContextRelationIdsCall{Call: call}
}

// MockContextRelationIdsCall wrap *gomock.Call
type MockContextRelationIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationIdsCall) Return(arg0 []int, arg1 error) *MockContextRelationIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationIdsCall) Do(f func() ([]int, error)) *MockContextRelationIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationIdsCall) DoAndReturn(f func() ([]int, error)) *MockContextRelationIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplicationName mocks base method.
func (m *MockContext) RemoteApplicationName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplicationName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteApplicationName indicates an expected call of RemoteApplicationName.
func (mr *MockContextMockRecorder) RemoteApplicationName() *MockContextRemoteApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplicationName", reflect.TypeOf((*MockContext)(nil).RemoteApplicationName))
	return &MockContextRemoteApplicationNameCall{Call: call}
}

// MockContextRemoteApplicationNameCall wrap *gomock.Call
type MockContextRemoteApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRemoteApplicationNameCall) Return(arg0 string, arg1 error) *MockContextRemoteApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRemoteApplicationNameCall) Do(f func() (string, error)) *MockContextRemoteApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRemoteApplicationNameCall) DoAndReturn(f func() (string, error)) *MockContextRemoteApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteUnitName mocks base method.
func (m *MockContext) RemoteUnitName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteUnitName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteUnitName indicates an expected call of RemoteUnitName.
func (mr *MockContextMockRecorder) RemoteUnitName() *MockContextRemoteUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteUnitName", reflect.TypeOf((*MockContext)(nil).RemoteUnitName))
	return &MockContextRemoteUnitNameCall{Call: call}
}

// MockContextRemoteUnitNameCall wrap *gomock.Call
type MockContextRemoteUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRemoteUnitNameCall) Return(arg0 string, arg1 error) *MockContextRemoteUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRemoteUnitNameCall) Do(f func() (string, error)) *MockContextRemoteUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRemoteUnitNameCall) DoAndReturn(f func() (string, error)) *MockContextRemoteUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSecret mocks base method.
func (m *MockContext) RemoveSecret(arg0 *secrets.URI, arg1 *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecret indicates an expected call of RemoveSecret.
func (mr *MockContextMockRecorder) RemoveSecret(arg0, arg1 any) *MockContextRemoveSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecret", reflect.TypeOf((*MockContext)(nil).RemoveSecret), arg0, arg1)
	return &MockContextRemoveSecretCall{Call: call}
}

// MockContextRemoveSecretCall wrap *gomock.Call
type MockContextRemoveSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRemoveSecretCall) Return(arg0 error) *MockContextRemoveSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRemoveSecretCall) Do(f func(*secrets.URI, *int) error) *MockContextRemoveSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRemoveSecretCall) DoAndReturn(f func(*secrets.URI, *int) error) *MockContextRemoveSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequestReboot mocks base method.
func (m *MockContext) RequestReboot(arg0 jujuc.RebootPriority) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReboot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestReboot indicates an expected call of RequestReboot.
func (mr *MockContextMockRecorder) RequestReboot(arg0 any) *MockContextRequestRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReboot", reflect.TypeOf((*MockContext)(nil).RequestReboot), arg0)
	return &MockContextRequestRebootCall{Call: call}
}

// MockContextRequestRebootCall wrap *gomock.Call
type MockContextRequestRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRequestRebootCall) Return(arg0 error) *MockContextRequestRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRequestRebootCall) Do(f func(jujuc.RebootPriority) error) *MockContextRequestRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRequestRebootCall) DoAndReturn(f func(jujuc.RebootPriority) error) *MockContextRequestRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokeSecret mocks base method.
func (m *MockContext) RevokeSecret(arg0 *secrets.URI, arg1 *jujuc.SecretGrantRevokeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSecret indicates an expected call of RevokeSecret.
func (mr *MockContextMockRecorder) RevokeSecret(arg0, arg1 any) *MockContextRevokeSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecret", reflect.TypeOf((*MockContext)(nil).RevokeSecret), arg0, arg1)
	return &MockContextRevokeSecretCall{Call: call}
}

// MockContextRevokeSecretCall wrap *gomock.Call
type MockContextRevokeSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRevokeSecretCall) Return(arg0 error) *MockContextRevokeSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRevokeSecretCall) Do(f func(*secrets.URI, *jujuc.SecretGrantRevokeArgs) error) *MockContextRevokeSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRevokeSecretCall) DoAndReturn(f func(*secrets.URI, *jujuc.SecretGrantRevokeArgs) error) *MockContextRevokeSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretMetadata mocks base method.
func (m *MockContext) SecretMetadata() (map[string]jujuc.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretMetadata")
	ret0, _ := ret[0].(map[string]jujuc.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretMetadata indicates an expected call of SecretMetadata.
func (mr *MockContextMockRecorder) SecretMetadata() *MockContextSecretMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretMetadata", reflect.TypeOf((*MockContext)(nil).SecretMetadata))
	return &MockContextSecretMetadataCall{Call: call}
}

// MockContextSecretMetadataCall wrap *gomock.Call
type MockContextSecretMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSecretMetadataCall) Return(arg0 map[string]jujuc.SecretMetadata, arg1 error) *MockContextSecretMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSecretMetadataCall) Do(f func() (map[string]jujuc.SecretMetadata, error)) *MockContextSecretMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSecretMetadataCall) DoAndReturn(f func() (map[string]jujuc.SecretMetadata, error)) *MockContextSecretMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetActionFailed mocks base method.
func (m *MockContext) SetActionFailed() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActionFailed")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActionFailed indicates an expected call of SetActionFailed.
func (mr *MockContextMockRecorder) SetActionFailed() *MockContextSetActionFailedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActionFailed", reflect.TypeOf((*MockContext)(nil).SetActionFailed))
	return &MockContextSetActionFailedCall{Call: call}
}

// MockContextSetActionFailedCall wrap *gomock.Call
type MockContextSetActionFailedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSetActionFailedCall) Return(arg0 error) *MockContextSetActionFailedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSetActionFailedCall) Do(f func() error) *MockContextSetActionFailedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSetActionFailedCall) DoAndReturn(f func() error) *MockContextSetActionFailedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetActionMessage mocks base method.
func (m *MockContext) SetActionMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActionMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActionMessage indicates an expected call of SetActionMessage.
func (mr *MockContextMockRecorder) SetActionMessage(arg0 any) *MockContextSetActionMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActionMessage", reflect.TypeOf((*MockContext)(nil).SetActionMessage), arg0)
	return &MockContextSetActionMessageCall{Call: call}
}

// MockContextSetActionMessageCall wrap *gomock.Call
type MockContextSetActionMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSetActionMessageCall) Return(arg0 error) *MockContextSetActionMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSetActionMessageCall) Do(f func(string) error) *MockContextSetActionMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSetActionMessageCall) DoAndReturn(f func(string) error) *MockContextSetActionMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationStatus mocks base method.
func (m *MockContext) SetApplicationStatus(arg0 context.Context, arg1 jujuc.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationStatus indicates an expected call of SetApplicationStatus.
func (mr *MockContextMockRecorder) SetApplicationStatus(arg0, arg1 any) *MockContextSetApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationStatus", reflect.TypeOf((*MockContext)(nil).SetApplicationStatus), arg0, arg1)
	return &MockContextSetApplicationStatusCall{Call: call}
}

// MockContextSetApplicationStatusCall wrap *gomock.Call
type MockContextSetApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSetApplicationStatusCall) Return(arg0 error) *MockContextSetApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSetApplicationStatusCall) Do(f func(context.Context, jujuc.StatusInfo) error) *MockContextSetApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSetApplicationStatusCall) DoAndReturn(f func(context.Context, jujuc.StatusInfo) error) *MockContextSetApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmStateValue mocks base method.
func (m *MockContext) SetCharmStateValue(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharmStateValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharmStateValue indicates an expected call of SetCharmStateValue.
func (mr *MockContextMockRecorder) SetCharmStateValue(arg0, arg1, arg2 any) *MockContextSetCharmStateValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmStateValue", reflect.TypeOf((*MockContext)(nil).SetCharmStateValue), arg0, arg1, arg2)
	return &MockContextSetCharmStateValueCall{Call: call}
}

// MockContextSetCharmStateValueCall wrap *gomock.Call
type MockContextSetCharmStateValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSetCharmStateValueCall) Return(arg0 error) *MockContextSetCharmStateValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSetCharmStateValueCall) Do(f func(context.Context, string, string) error) *MockContextSetCharmStateValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSetCharmStateValueCall) DoAndReturn(f func(context.Context, string, string) error) *MockContextSetCharmStateValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitStatus mocks base method.
func (m *MockContext) SetUnitStatus(arg0 context.Context, arg1 jujuc.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitStatus indicates an expected call of SetUnitStatus.
func (mr *MockContextMockRecorder) SetUnitStatus(arg0, arg1 any) *MockContextSetUnitStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitStatus", reflect.TypeOf((*MockContext)(nil).SetUnitStatus), arg0, arg1)
	return &MockContextSetUnitStatusCall{Call: call}
}

// MockContextSetUnitStatusCall wrap *gomock.Call
type MockContextSetUnitStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSetUnitStatusCall) Return(arg0 error) *MockContextSetUnitStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSetUnitStatusCall) Do(f func(context.Context, jujuc.StatusInfo) error) *MockContextSetUnitStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSetUnitStatusCall) DoAndReturn(f func(context.Context, jujuc.StatusInfo) error) *MockContextSetUnitStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadVersion mocks base method.
func (m *MockContext) SetUnitWorkloadVersion(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadVersion indicates an expected call of SetUnitWorkloadVersion.
func (mr *MockContextMockRecorder) SetUnitWorkloadVersion(arg0, arg1 any) *MockContextSetUnitWorkloadVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadVersion", reflect.TypeOf((*MockContext)(nil).SetUnitWorkloadVersion), arg0, arg1)
	return &MockContextSetUnitWorkloadVersionCall{Call: call}
}

// MockContextSetUnitWorkloadVersionCall wrap *gomock.Call
type MockContextSetUnitWorkloadVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextSetUnitWorkloadVersionCall) Return(arg0 error) *MockContextSetUnitWorkloadVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextSetUnitWorkloadVersionCall) Do(f func(context.Context, string) error) *MockContextSetUnitWorkloadVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextSetUnitWorkloadVersionCall) DoAndReturn(f func(context.Context, string) error) *MockContextSetUnitWorkloadVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storage mocks base method.
func (m *MockContext) Storage(arg0 context.Context, arg1 names.StorageTag) (jujuc.ContextStorageAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage", arg0, arg1)
	ret0, _ := ret[0].(jujuc.ContextStorageAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Storage indicates an expected call of Storage.
func (mr *MockContextMockRecorder) Storage(arg0, arg1 any) *MockContextStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockContext)(nil).Storage), arg0, arg1)
	return &MockContextStorageCall{Call: call}
}

// MockContextStorageCall wrap *gomock.Call
type MockContextStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextStorageCall) Return(arg0 jujuc.ContextStorageAttachment, arg1 error) *MockContextStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextStorageCall) Do(f func(context.Context, names.StorageTag) (jujuc.ContextStorageAttachment, error)) *MockContextStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextStorageCall) DoAndReturn(f func(context.Context, names.StorageTag) (jujuc.ContextStorageAttachment, error)) *MockContextStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageTags mocks base method.
func (m *MockContext) StorageTags(arg0 context.Context) ([]names.StorageTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageTags", arg0)
	ret0, _ := ret[0].([]names.StorageTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageTags indicates an expected call of StorageTags.
func (mr *MockContextMockRecorder) StorageTags(arg0 any) *MockContextStorageTagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageTags", reflect.TypeOf((*MockContext)(nil).StorageTags), arg0)
	return &MockContextStorageTagsCall{Call: call}
}

// MockContextStorageTagsCall wrap *gomock.Call
type MockContextStorageTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextStorageTagsCall) Return(arg0 []names.StorageTag, arg1 error) *MockContextStorageTagsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextStorageTagsCall) Do(f func(context.Context) ([]names.StorageTag, error)) *MockContextStorageTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextStorageTagsCall) DoAndReturn(f func(context.Context) ([]names.StorageTag, error)) *MockContextStorageTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitName mocks base method.
func (m *MockContext) UnitName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UnitName indicates an expected call of UnitName.
func (mr *MockContextMockRecorder) UnitName() *MockContextUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitName", reflect.TypeOf((*MockContext)(nil).UnitName))
	return &MockContextUnitNameCall{Call: call}
}

// MockContextUnitNameCall wrap *gomock.Call
type MockContextUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextUnitNameCall) Return(arg0 string) *MockContextUnitNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextUnitNameCall) Do(f func() string) *MockContextUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextUnitNameCall) DoAndReturn(f func() string) *MockContextUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitStatus mocks base method.
func (m *MockContext) UnitStatus(arg0 context.Context) (*jujuc.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitStatus", arg0)
	ret0, _ := ret[0].(*jujuc.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitStatus indicates an expected call of UnitStatus.
func (mr *MockContextMockRecorder) UnitStatus(arg0 any) *MockContextUnitStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitStatus", reflect.TypeOf((*MockContext)(nil).UnitStatus), arg0)
	return &MockContextUnitStatusCall{Call: call}
}

// MockContextUnitStatusCall wrap *gomock.Call
type MockContextUnitStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextUnitStatusCall) Return(arg0 *jujuc.StatusInfo, arg1 error) *MockContextUnitStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextUnitStatusCall) Do(f func(context.Context) (*jujuc.StatusInfo, error)) *MockContextUnitStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextUnitStatusCall) DoAndReturn(f func(context.Context) (*jujuc.StatusInfo, error)) *MockContextUnitStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitWorkloadVersion mocks base method.
func (m *MockContext) UnitWorkloadVersion(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitWorkloadVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitWorkloadVersion indicates an expected call of UnitWorkloadVersion.
func (mr *MockContextMockRecorder) UnitWorkloadVersion(arg0 any) *MockContextUnitWorkloadVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitWorkloadVersion", reflect.TypeOf((*MockContext)(nil).UnitWorkloadVersion), arg0)
	return &MockContextUnitWorkloadVersionCall{Call: call}
}

// MockContextUnitWorkloadVersionCall wrap *gomock.Call
type MockContextUnitWorkloadVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextUnitWorkloadVersionCall) Return(arg0 string, arg1 error) *MockContextUnitWorkloadVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextUnitWorkloadVersionCall) Do(f func(context.Context) (string, error)) *MockContextUnitWorkloadVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextUnitWorkloadVersionCall) DoAndReturn(f func(context.Context) (string, error)) *MockContextUnitWorkloadVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateActionResults mocks base method.
func (m *MockContext) UpdateActionResults(arg0 []string, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActionResults", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActionResults indicates an expected call of UpdateActionResults.
func (mr *MockContextMockRecorder) UpdateActionResults(arg0, arg1 any) *MockContextUpdateActionResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionResults", reflect.TypeOf((*MockContext)(nil).UpdateActionResults), arg0, arg1)
	return &MockContextUpdateActionResultsCall{Call: call}
}

// MockContextUpdateActionResultsCall wrap *gomock.Call
type MockContextUpdateActionResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextUpdateActionResultsCall) Return(arg0 error) *MockContextUpdateActionResultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextUpdateActionResultsCall) Do(f func([]string, any) error) *MockContextUpdateActionResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextUpdateActionResultsCall) DoAndReturn(f func([]string, any) error) *MockContextUpdateActionResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecret mocks base method.
func (m *MockContext) UpdateSecret(arg0 *secrets.URI, arg1 *jujuc.SecretUpdateArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockContextMockRecorder) UpdateSecret(arg0, arg1 any) *MockContextUpdateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockContext)(nil).UpdateSecret), arg0, arg1)
	return &MockContextUpdateSecretCall{Call: call}
}

// MockContextUpdateSecretCall wrap *gomock.Call
type MockContextUpdateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextUpdateSecretCall) Return(arg0 error) *MockContextUpdateSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextUpdateSecretCall) Do(f func(*secrets.URI, *jujuc.SecretUpdateArgs) error) *MockContextUpdateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextUpdateSecretCall) DoAndReturn(f func(*secrets.URI, *jujuc.SecretUpdateArgs) error) *MockContextUpdateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WorkloadName mocks base method.
func (m *MockContext) WorkloadName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadName indicates an expected call of WorkloadName.
func (mr *MockContextMockRecorder) WorkloadName() *MockContextWorkloadNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadName", reflect.TypeOf((*MockContext)(nil).WorkloadName))
	return &MockContextWorkloadNameCall{Call: call}
}

// MockContextWorkloadNameCall wrap *gomock.Call
type MockContextWorkloadNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextWorkloadNameCall) Return(arg0 string, arg1 error) *MockContextWorkloadNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextWorkloadNameCall) Do(f func() (string, error)) *MockContextWorkloadNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextWorkloadNameCall) DoAndReturn(f func() (string, error)) *MockContextWorkloadNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
