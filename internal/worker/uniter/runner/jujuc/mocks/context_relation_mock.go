// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/runner/jujuc (interfaces: ContextRelation)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/context_relation_mock.go github.com/juju/juju/internal/worker/uniter/runner/jujuc ContextRelation
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	life "github.com/juju/juju/core/life"
	relation "github.com/juju/juju/core/relation"
	jujuc "github.com/juju/juju/internal/worker/uniter/runner/jujuc"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockContextRelation is a mock of ContextRelation interface.
type MockContextRelation struct {
	ctrl     *gomock.Controller
	recorder *MockContextRelationMockRecorder
}

// MockContextRelationMockRecorder is the mock recorder for MockContextRelation.
type MockContextRelationMockRecorder struct {
	mock *MockContextRelation
}

// NewMockContextRelation creates a new mock instance.
func NewMockContextRelation(ctrl *gomock.Controller) *MockContextRelation {
	mock := &MockContextRelation{ctrl: ctrl}
	mock.recorder = &MockContextRelationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextRelation) EXPECT() *MockContextRelationMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContextRelation) ISGOMOCK() struct{} {
	return struct{}{}
}

// ApplicationSettings mocks base method.
func (m *MockContextRelation) ApplicationSettings(arg0 context.Context) (jujuc.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationSettings", arg0)
	ret0, _ := ret[0].(jujuc.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationSettings indicates an expected call of ApplicationSettings.
func (mr *MockContextRelationMockRecorder) ApplicationSettings(arg0 any) *MockContextRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationSettings", reflect.TypeOf((*MockContextRelation)(nil).ApplicationSettings), arg0)
	return &MockContextRelationApplicationSettingsCall{Call: call}
}

// MockContextRelationApplicationSettingsCall wrap *gomock.Call
type MockContextRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationApplicationSettingsCall) Return(arg0 jujuc.Settings, arg1 error) *MockContextRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationApplicationSettingsCall) Do(f func(context.Context) (jujuc.Settings, error)) *MockContextRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationApplicationSettingsCall) DoAndReturn(f func(context.Context) (jujuc.Settings, error)) *MockContextRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FakeId mocks base method.
func (m *MockContextRelation) FakeId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FakeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// FakeId indicates an expected call of FakeId.
func (mr *MockContextRelationMockRecorder) FakeId() *MockContextRelationFakeIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FakeId", reflect.TypeOf((*MockContextRelation)(nil).FakeId))
	return &MockContextRelationFakeIdCall{Call: call}
}

// MockContextRelationFakeIdCall wrap *gomock.Call
type MockContextRelationFakeIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationFakeIdCall) Return(arg0 string) *MockContextRelationFakeIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationFakeIdCall) Do(f func() string) *MockContextRelationFakeIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationFakeIdCall) DoAndReturn(f func() string) *MockContextRelationFakeIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockContextRelation) Id() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(int)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockContextRelationMockRecorder) Id() *MockContextRelationIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockContextRelation)(nil).Id))
	return &MockContextRelationIdCall{Call: call}
}

// MockContextRelationIdCall wrap *gomock.Call
type MockContextRelationIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationIdCall) Return(arg0 int) *MockContextRelationIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationIdCall) Do(f func() int) *MockContextRelationIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationIdCall) DoAndReturn(f func() int) *MockContextRelationIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockContextRelation) Life() life.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(life.Value)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockContextRelationMockRecorder) Life() *MockContextRelationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockContextRelation)(nil).Life))
	return &MockContextRelationLifeCall{Call: call}
}

// MockContextRelationLifeCall wrap *gomock.Call
type MockContextRelationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationLifeCall) Return(arg0 life.Value) *MockContextRelationLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationLifeCall) Do(f func() life.Value) *MockContextRelationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationLifeCall) DoAndReturn(f func() life.Value) *MockContextRelationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockContextRelation) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockContextRelationMockRecorder) Name() *MockContextRelationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockContextRelation)(nil).Name))
	return &MockContextRelationNameCall{Call: call}
}

// MockContextRelationNameCall wrap *gomock.Call
type MockContextRelationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationNameCall) Return(arg0 string) *MockContextRelationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationNameCall) Do(f func() string) *MockContextRelationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationNameCall) DoAndReturn(f func() string) *MockContextRelationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadApplicationSettings mocks base method.
func (m *MockContextRelation) ReadApplicationSettings(arg0 context.Context, arg1 string) (params.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadApplicationSettings", arg0, arg1)
	ret0, _ := ret[0].(params.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadApplicationSettings indicates an expected call of ReadApplicationSettings.
func (mr *MockContextRelationMockRecorder) ReadApplicationSettings(arg0, arg1 any) *MockContextRelationReadApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadApplicationSettings", reflect.TypeOf((*MockContextRelation)(nil).ReadApplicationSettings), arg0, arg1)
	return &MockContextRelationReadApplicationSettingsCall{Call: call}
}

// MockContextRelationReadApplicationSettingsCall wrap *gomock.Call
type MockContextRelationReadApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationReadApplicationSettingsCall) Return(arg0 params.Settings, arg1 error) *MockContextRelationReadApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationReadApplicationSettingsCall) Do(f func(context.Context, string) (params.Settings, error)) *MockContextRelationReadApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationReadApplicationSettingsCall) DoAndReturn(f func(context.Context, string) (params.Settings, error)) *MockContextRelationReadApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadSettings mocks base method.
func (m *MockContextRelation) ReadSettings(arg0 context.Context, arg1 string) (params.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSettings", arg0, arg1)
	ret0, _ := ret[0].(params.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSettings indicates an expected call of ReadSettings.
func (mr *MockContextRelationMockRecorder) ReadSettings(arg0, arg1 any) *MockContextRelationReadSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSettings", reflect.TypeOf((*MockContextRelation)(nil).ReadSettings), arg0, arg1)
	return &MockContextRelationReadSettingsCall{Call: call}
}

// MockContextRelationReadSettingsCall wrap *gomock.Call
type MockContextRelationReadSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationReadSettingsCall) Return(arg0 params.Settings, arg1 error) *MockContextRelationReadSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationReadSettingsCall) Do(f func(context.Context, string) (params.Settings, error)) *MockContextRelationReadSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationReadSettingsCall) DoAndReturn(f func(context.Context, string) (params.Settings, error)) *MockContextRelationReadSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationTag mocks base method.
func (m *MockContextRelation) RelationTag() names.RelationTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationTag")
	ret0, _ := ret[0].(names.RelationTag)
	return ret0
}

// RelationTag indicates an expected call of RelationTag.
func (mr *MockContextRelationMockRecorder) RelationTag() *MockContextRelationRelationTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationTag", reflect.TypeOf((*MockContextRelation)(nil).RelationTag))
	return &MockContextRelationRelationTagCall{Call: call}
}

// MockContextRelationRelationTagCall wrap *gomock.Call
type MockContextRelationRelationTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationRelationTagCall) Return(arg0 names.RelationTag) *MockContextRelationRelationTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationRelationTagCall) Do(f func() names.RelationTag) *MockContextRelationRelationTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationRelationTagCall) DoAndReturn(f func() names.RelationTag) *MockContextRelationRelationTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplicationName mocks base method.
func (m *MockContextRelation) RemoteApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteApplicationName indicates an expected call of RemoteApplicationName.
func (mr *MockContextRelationMockRecorder) RemoteApplicationName() *MockContextRelationRemoteApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplicationName", reflect.TypeOf((*MockContextRelation)(nil).RemoteApplicationName))
	return &MockContextRelationRemoteApplicationNameCall{Call: call}
}

// MockContextRelationRemoteApplicationNameCall wrap *gomock.Call
type MockContextRelationRemoteApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationRemoteApplicationNameCall) Return(arg0 string) *MockContextRelationRemoteApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationRemoteApplicationNameCall) Do(f func() string) *MockContextRelationRemoteApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationRemoteApplicationNameCall) DoAndReturn(f func() string) *MockContextRelationRemoteApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteModelUUID mocks base method.
func (m *MockContextRelation) RemoteModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteModelUUID indicates an expected call of RemoteModelUUID.
func (mr *MockContextRelationMockRecorder) RemoteModelUUID() *MockContextRelationRemoteModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteModelUUID", reflect.TypeOf((*MockContextRelation)(nil).RemoteModelUUID))
	return &MockContextRelationRemoteModelUUIDCall{Call: call}
}

// MockContextRelationRemoteModelUUIDCall wrap *gomock.Call
type MockContextRelationRemoteModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationRemoteModelUUIDCall) Return(arg0 string) *MockContextRelationRemoteModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationRemoteModelUUIDCall) Do(f func() string) *MockContextRelationRemoteModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationRemoteModelUUIDCall) DoAndReturn(f func() string) *MockContextRelationRemoteModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockContextRelation) SetStatus(arg0 context.Context, arg1 relation.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockContextRelationMockRecorder) SetStatus(arg0, arg1 any) *MockContextRelationSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockContextRelation)(nil).SetStatus), arg0, arg1)
	return &MockContextRelationSetStatusCall{Call: call}
}

// MockContextRelationSetStatusCall wrap *gomock.Call
type MockContextRelationSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationSetStatusCall) Return(arg0 error) *MockContextRelationSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationSetStatusCall) Do(f func(context.Context, relation.Status) error) *MockContextRelationSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationSetStatusCall) DoAndReturn(f func(context.Context, relation.Status) error) *MockContextRelationSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Settings mocks base method.
func (m *MockContextRelation) Settings(arg0 context.Context) (jujuc.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings", arg0)
	ret0, _ := ret[0].(jujuc.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Settings indicates an expected call of Settings.
func (mr *MockContextRelationMockRecorder) Settings(arg0 any) *MockContextRelationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockContextRelation)(nil).Settings), arg0)
	return &MockContextRelationSettingsCall{Call: call}
}

// MockContextRelationSettingsCall wrap *gomock.Call
type MockContextRelationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationSettingsCall) Return(arg0 jujuc.Settings, arg1 error) *MockContextRelationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationSettingsCall) Do(f func(context.Context) (jujuc.Settings, error)) *MockContextRelationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationSettingsCall) DoAndReturn(f func(context.Context) (jujuc.Settings, error)) *MockContextRelationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Suspended mocks base method.
func (m *MockContextRelation) Suspended() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspended")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suspended indicates an expected call of Suspended.
func (mr *MockContextRelationMockRecorder) Suspended() *MockContextRelationSuspendedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspended", reflect.TypeOf((*MockContextRelation)(nil).Suspended))
	return &MockContextRelationSuspendedCall{Call: call}
}

// MockContextRelationSuspendedCall wrap *gomock.Call
type MockContextRelationSuspendedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationSuspendedCall) Return(arg0 bool) *MockContextRelationSuspendedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationSuspendedCall) Do(f func() bool) *MockContextRelationSuspendedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationSuspendedCall) DoAndReturn(f func() bool) *MockContextRelationSuspendedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitNames mocks base method.
func (m *MockContextRelation) UnitNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// UnitNames indicates an expected call of UnitNames.
func (mr *MockContextRelationMockRecorder) UnitNames() *MockContextRelationUnitNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitNames", reflect.TypeOf((*MockContextRelation)(nil).UnitNames))
	return &MockContextRelationUnitNamesCall{Call: call}
}

// MockContextRelationUnitNamesCall wrap *gomock.Call
type MockContextRelationUnitNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextRelationUnitNamesCall) Return(arg0 []string) *MockContextRelationUnitNamesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextRelationUnitNamesCall) Do(f func() []string) *MockContextRelationUnitNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextRelationUnitNamesCall) DoAndReturn(f func() []string) *MockContextRelationUnitNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
