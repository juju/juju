// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/api (interfaces: Unit,Relation,RelationUnit,Application,Charm)
//
// Generated by this command:
//
//	mockgen -typed -package api -destination domain_mocks.go github.com/juju/juju/internal/worker/uniter/api Unit,Relation,RelationUnit,Application,Charm
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	uniter "github.com/juju/juju/api/agent/uniter"
	life "github.com/juju/juju/core/life"
	relation "github.com/juju/juju/core/relation"
	status "github.com/juju/juju/core/status"
	watcher "github.com/juju/juju/core/watcher"
	charm "github.com/juju/juju/internal/charm"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockUnit is a mock of Unit interface.
type MockUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMockRecorder
}

// MockUnitMockRecorder is the mock recorder for MockUnit.
type MockUnitMockRecorder struct {
	mock *MockUnit
}

// NewMockUnit creates a new mock instance.
func NewMockUnit(ctrl *gomock.Controller) *MockUnit {
	mock := &MockUnit{ctrl: ctrl}
	mock.recorder = &MockUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnit) EXPECT() *MockUnitMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUnit) ISGOMOCK() struct{} {
	return struct{}{}
}

// Application mocks base method.
func (m *MockUnit) Application(arg0 context.Context) (Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application.
func (mr *MockUnitMockRecorder) Application(arg0 any) *MockUnitApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockUnit)(nil).Application), arg0)
	return &MockUnitApplicationCall{Call: call}
}

// MockUnitApplicationCall wrap *gomock.Call
type MockUnitApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitApplicationCall) Return(arg0 Application, arg1 error) *MockUnitApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitApplicationCall) Do(f func(context.Context) (Application, error)) *MockUnitApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitApplicationCall) DoAndReturn(f func(context.Context) (Application, error)) *MockUnitApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationName mocks base method.
func (m *MockUnit) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockUnitMockRecorder) ApplicationName() *MockUnitApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockUnit)(nil).ApplicationName))
	return &MockUnitApplicationNameCall{Call: call}
}

// MockUnitApplicationNameCall wrap *gomock.Call
type MockUnitApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitApplicationNameCall) Return(arg0 string) *MockUnitApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitApplicationNameCall) Do(f func() string) *MockUnitApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitApplicationNameCall) DoAndReturn(f func() string) *MockUnitApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationTag mocks base method.
func (m *MockUnit) ApplicationTag() names.ApplicationTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationTag")
	ret0, _ := ret[0].(names.ApplicationTag)
	return ret0
}

// ApplicationTag indicates an expected call of ApplicationTag.
func (mr *MockUnitMockRecorder) ApplicationTag() *MockUnitApplicationTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationTag", reflect.TypeOf((*MockUnit)(nil).ApplicationTag))
	return &MockUnitApplicationTagCall{Call: call}
}

// MockUnitApplicationTagCall wrap *gomock.Call
type MockUnitApplicationTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitApplicationTagCall) Return(arg0 names.ApplicationTag) *MockUnitApplicationTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitApplicationTagCall) Do(f func() names.ApplicationTag) *MockUnitApplicationTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitApplicationTagCall) DoAndReturn(f func() names.ApplicationTag) *MockUnitApplicationTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AssignedMachine mocks base method.
func (m *MockUnit) AssignedMachine(arg0 context.Context) (names.MachineTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignedMachine", arg0)
	ret0, _ := ret[0].(names.MachineTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignedMachine indicates an expected call of AssignedMachine.
func (mr *MockUnitMockRecorder) AssignedMachine(arg0 any) *MockUnitAssignedMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignedMachine", reflect.TypeOf((*MockUnit)(nil).AssignedMachine), arg0)
	return &MockUnitAssignedMachineCall{Call: call}
}

// MockUnitAssignedMachineCall wrap *gomock.Call
type MockUnitAssignedMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitAssignedMachineCall) Return(arg0 names.MachineTag, arg1 error) *MockUnitAssignedMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitAssignedMachineCall) Do(f func(context.Context) (names.MachineTag, error)) *MockUnitAssignedMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitAssignedMachineCall) DoAndReturn(f func(context.Context) (names.MachineTag, error)) *MockUnitAssignedMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AvailabilityZone mocks base method.
func (m *MockUnit) AvailabilityZone(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZone", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZone indicates an expected call of AvailabilityZone.
func (mr *MockUnitMockRecorder) AvailabilityZone(arg0 any) *MockUnitAvailabilityZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZone", reflect.TypeOf((*MockUnit)(nil).AvailabilityZone), arg0)
	return &MockUnitAvailabilityZoneCall{Call: call}
}

// MockUnitAvailabilityZoneCall wrap *gomock.Call
type MockUnitAvailabilityZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitAvailabilityZoneCall) Return(arg0 string, arg1 error) *MockUnitAvailabilityZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitAvailabilityZoneCall) Do(f func(context.Context) (string, error)) *MockUnitAvailabilityZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitAvailabilityZoneCall) DoAndReturn(f func(context.Context) (string, error)) *MockUnitAvailabilityZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanApplyLXDProfile mocks base method.
func (m *MockUnit) CanApplyLXDProfile(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanApplyLXDProfile", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanApplyLXDProfile indicates an expected call of CanApplyLXDProfile.
func (mr *MockUnitMockRecorder) CanApplyLXDProfile(arg0 any) *MockUnitCanApplyLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanApplyLXDProfile", reflect.TypeOf((*MockUnit)(nil).CanApplyLXDProfile), arg0)
	return &MockUnitCanApplyLXDProfileCall{Call: call}
}

// MockUnitCanApplyLXDProfileCall wrap *gomock.Call
type MockUnitCanApplyLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitCanApplyLXDProfileCall) Return(arg0 bool, arg1 error) *MockUnitCanApplyLXDProfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitCanApplyLXDProfileCall) Do(f func(context.Context) (bool, error)) *MockUnitCanApplyLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitCanApplyLXDProfileCall) DoAndReturn(f func(context.Context) (bool, error)) *MockUnitCanApplyLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmURL mocks base method.
func (m *MockUnit) CharmURL(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmURL indicates an expected call of CharmURL.
func (mr *MockUnitMockRecorder) CharmURL(arg0 any) *MockUnitCharmURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmURL", reflect.TypeOf((*MockUnit)(nil).CharmURL), arg0)
	return &MockUnitCharmURLCall{Call: call}
}

// MockUnitCharmURLCall wrap *gomock.Call
type MockUnitCharmURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitCharmURLCall) Return(arg0 string, arg1 error) *MockUnitCharmURLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitCharmURLCall) Do(f func(context.Context) (string, error)) *MockUnitCharmURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitCharmURLCall) DoAndReturn(f func(context.Context) (string, error)) *MockUnitCharmURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClearResolved mocks base method.
func (m *MockUnit) ClearResolved(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearResolved", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearResolved indicates an expected call of ClearResolved.
func (mr *MockUnitMockRecorder) ClearResolved(arg0 any) *MockUnitClearResolvedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearResolved", reflect.TypeOf((*MockUnit)(nil).ClearResolved), arg0)
	return &MockUnitClearResolvedCall{Call: call}
}

// MockUnitClearResolvedCall wrap *gomock.Call
type MockUnitClearResolvedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitClearResolvedCall) Return(arg0 error) *MockUnitClearResolvedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitClearResolvedCall) Do(f func(context.Context) error) *MockUnitClearResolvedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitClearResolvedCall) DoAndReturn(f func(context.Context) error) *MockUnitClearResolvedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CommitHookChanges mocks base method.
func (m *MockUnit) CommitHookChanges(arg0 context.Context, arg1 params.CommitHookChangesArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitHookChanges", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitHookChanges indicates an expected call of CommitHookChanges.
func (mr *MockUnitMockRecorder) CommitHookChanges(arg0, arg1 any) *MockUnitCommitHookChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitHookChanges", reflect.TypeOf((*MockUnit)(nil).CommitHookChanges), arg0, arg1)
	return &MockUnitCommitHookChangesCall{Call: call}
}

// MockUnitCommitHookChangesCall wrap *gomock.Call
type MockUnitCommitHookChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitCommitHookChangesCall) Return(arg0 error) *MockUnitCommitHookChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitCommitHookChangesCall) Do(f func(context.Context, params.CommitHookChangesArgs) error) *MockUnitCommitHookChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitCommitHookChangesCall) DoAndReturn(f func(context.Context, params.CommitHookChangesArgs) error) *MockUnitCommitHookChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfigSettings mocks base method.
func (m *MockUnit) ConfigSettings(arg0 context.Context) (charm.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSettings", arg0)
	ret0, _ := ret[0].(charm.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigSettings indicates an expected call of ConfigSettings.
func (mr *MockUnitMockRecorder) ConfigSettings(arg0 any) *MockUnitConfigSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSettings", reflect.TypeOf((*MockUnit)(nil).ConfigSettings), arg0)
	return &MockUnitConfigSettingsCall{Call: call}
}

// MockUnitConfigSettingsCall wrap *gomock.Call
type MockUnitConfigSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitConfigSettingsCall) Return(arg0 charm.Settings, arg1 error) *MockUnitConfigSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitConfigSettingsCall) Do(f func(context.Context) (charm.Settings, error)) *MockUnitConfigSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitConfigSettingsCall) DoAndReturn(f func(context.Context) (charm.Settings, error)) *MockUnitConfigSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockUnit) Destroy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockUnitMockRecorder) Destroy(arg0 any) *MockUnitDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockUnit)(nil).Destroy), arg0)
	return &MockUnitDestroyCall{Call: call}
}

// MockUnitDestroyCall wrap *gomock.Call
type MockUnitDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitDestroyCall) Return(arg0 error) *MockUnitDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitDestroyCall) Do(f func(context.Context) error) *MockUnitDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitDestroyCall) DoAndReturn(f func(context.Context) error) *MockUnitDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyAllSubordinates mocks base method.
func (m *MockUnit) DestroyAllSubordinates(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyAllSubordinates", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyAllSubordinates indicates an expected call of DestroyAllSubordinates.
func (mr *MockUnitMockRecorder) DestroyAllSubordinates(arg0 any) *MockUnitDestroyAllSubordinatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyAllSubordinates", reflect.TypeOf((*MockUnit)(nil).DestroyAllSubordinates), arg0)
	return &MockUnitDestroyAllSubordinatesCall{Call: call}
}

// MockUnitDestroyAllSubordinatesCall wrap *gomock.Call
type MockUnitDestroyAllSubordinatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitDestroyAllSubordinatesCall) Return(arg0 error) *MockUnitDestroyAllSubordinatesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitDestroyAllSubordinatesCall) Do(f func(context.Context) error) *MockUnitDestroyAllSubordinatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitDestroyAllSubordinatesCall) DoAndReturn(f func(context.Context) error) *MockUnitDestroyAllSubordinatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureDead mocks base method.
func (m *MockUnit) EnsureDead(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDead indicates an expected call of EnsureDead.
func (mr *MockUnitMockRecorder) EnsureDead(arg0 any) *MockUnitEnsureDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDead", reflect.TypeOf((*MockUnit)(nil).EnsureDead), arg0)
	return &MockUnitEnsureDeadCall{Call: call}
}

// MockUnitEnsureDeadCall wrap *gomock.Call
type MockUnitEnsureDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitEnsureDeadCall) Return(arg0 error) *MockUnitEnsureDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitEnsureDeadCall) Do(f func(context.Context) error) *MockUnitEnsureDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitEnsureDeadCall) DoAndReturn(f func(context.Context) error) *MockUnitEnsureDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasSubordinates mocks base method.
func (m *MockUnit) HasSubordinates(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSubordinates", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSubordinates indicates an expected call of HasSubordinates.
func (mr *MockUnitMockRecorder) HasSubordinates(arg0 any) *MockUnitHasSubordinatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSubordinates", reflect.TypeOf((*MockUnit)(nil).HasSubordinates), arg0)
	return &MockUnitHasSubordinatesCall{Call: call}
}

// MockUnitHasSubordinatesCall wrap *gomock.Call
type MockUnitHasSubordinatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitHasSubordinatesCall) Return(arg0 bool, arg1 error) *MockUnitHasSubordinatesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitHasSubordinatesCall) Do(f func(context.Context) (bool, error)) *MockUnitHasSubordinatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitHasSubordinatesCall) DoAndReturn(f func(context.Context) (bool, error)) *MockUnitHasSubordinatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LXDProfileName mocks base method.
func (m *MockUnit) LXDProfileName(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfileName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LXDProfileName indicates an expected call of LXDProfileName.
func (mr *MockUnitMockRecorder) LXDProfileName(arg0 any) *MockUnitLXDProfileNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfileName", reflect.TypeOf((*MockUnit)(nil).LXDProfileName), arg0)
	return &MockUnitLXDProfileNameCall{Call: call}
}

// MockUnitLXDProfileNameCall wrap *gomock.Call
type MockUnitLXDProfileNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitLXDProfileNameCall) Return(arg0 string, arg1 error) *MockUnitLXDProfileNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitLXDProfileNameCall) Do(f func(context.Context) (string, error)) *MockUnitLXDProfileNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitLXDProfileNameCall) DoAndReturn(f func(context.Context) (string, error)) *MockUnitLXDProfileNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockUnit) Life() life.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(life.Value)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockUnitMockRecorder) Life() *MockUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockUnit)(nil).Life))
	return &MockUnitLifeCall{Call: call}
}

// MockUnitLifeCall wrap *gomock.Call
type MockUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitLifeCall) Return(arg0 life.Value) *MockUnitLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitLifeCall) Do(f func() life.Value) *MockUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitLifeCall) DoAndReturn(f func() life.Value) *MockUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LogActionMessage mocks base method.
func (m *MockUnit) LogActionMessage(arg0 context.Context, arg1 names.ActionTag, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogActionMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogActionMessage indicates an expected call of LogActionMessage.
func (mr *MockUnitMockRecorder) LogActionMessage(arg0, arg1, arg2 any) *MockUnitLogActionMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogActionMessage", reflect.TypeOf((*MockUnit)(nil).LogActionMessage), arg0, arg1, arg2)
	return &MockUnitLogActionMessageCall{Call: call}
}

// MockUnitLogActionMessageCall wrap *gomock.Call
type MockUnitLogActionMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitLogActionMessageCall) Return(arg0 error) *MockUnitLogActionMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitLogActionMessageCall) Do(f func(context.Context, names.ActionTag, string) error) *MockUnitLogActionMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitLogActionMessageCall) DoAndReturn(f func(context.Context, names.ActionTag, string) error) *MockUnitLogActionMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockUnit) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUnitMockRecorder) Name() *MockUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUnit)(nil).Name))
	return &MockUnitNameCall{Call: call}
}

// MockUnitNameCall wrap *gomock.Call
type MockUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitNameCall) Return(arg0 string) *MockUnitNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitNameCall) Do(f func() string) *MockUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitNameCall) DoAndReturn(f func() string) *MockUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NetworkInfo mocks base method.
func (m *MockUnit) NetworkInfo(arg0 context.Context, arg1 []string, arg2 *int) (map[string]params.NetworkInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]params.NetworkInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInfo indicates an expected call of NetworkInfo.
func (mr *MockUnitMockRecorder) NetworkInfo(arg0, arg1, arg2 any) *MockUnitNetworkInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInfo", reflect.TypeOf((*MockUnit)(nil).NetworkInfo), arg0, arg1, arg2)
	return &MockUnitNetworkInfoCall{Call: call}
}

// MockUnitNetworkInfoCall wrap *gomock.Call
type MockUnitNetworkInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitNetworkInfoCall) Return(arg0 map[string]params.NetworkInfoResult, arg1 error) *MockUnitNetworkInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitNetworkInfoCall) Do(f func(context.Context, []string, *int) (map[string]params.NetworkInfoResult, error)) *MockUnitNetworkInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitNetworkInfoCall) DoAndReturn(f func(context.Context, []string, *int) (map[string]params.NetworkInfoResult, error)) *MockUnitNetworkInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrincipalName mocks base method.
func (m *MockUnit) PrincipalName(arg0 context.Context) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrincipalName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PrincipalName indicates an expected call of PrincipalName.
func (mr *MockUnitMockRecorder) PrincipalName(arg0 any) *MockUnitPrincipalNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrincipalName", reflect.TypeOf((*MockUnit)(nil).PrincipalName), arg0)
	return &MockUnitPrincipalNameCall{Call: call}
}

// MockUnitPrincipalNameCall wrap *gomock.Call
type MockUnitPrincipalNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitPrincipalNameCall) Return(arg0 string, arg1 bool, arg2 error) *MockUnitPrincipalNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitPrincipalNameCall) Do(f func(context.Context) (string, bool, error)) *MockUnitPrincipalNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitPrincipalNameCall) DoAndReturn(f func(context.Context) (string, bool, error)) *MockUnitPrincipalNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrivateAddress mocks base method.
func (m *MockUnit) PrivateAddress(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateAddress indicates an expected call of PrivateAddress.
func (mr *MockUnitMockRecorder) PrivateAddress(arg0 any) *MockUnitPrivateAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateAddress", reflect.TypeOf((*MockUnit)(nil).PrivateAddress), arg0)
	return &MockUnitPrivateAddressCall{Call: call}
}

// MockUnitPrivateAddressCall wrap *gomock.Call
type MockUnitPrivateAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitPrivateAddressCall) Return(arg0 string, arg1 error) *MockUnitPrivateAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitPrivateAddressCall) Do(f func(context.Context) (string, error)) *MockUnitPrivateAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitPrivateAddressCall) DoAndReturn(f func(context.Context) (string, error)) *MockUnitPrivateAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderID mocks base method.
func (m *MockUnit) ProviderID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProviderID indicates an expected call of ProviderID.
func (mr *MockUnitMockRecorder) ProviderID() *MockUnitProviderIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderID", reflect.TypeOf((*MockUnit)(nil).ProviderID))
	return &MockUnitProviderIDCall{Call: call}
}

// MockUnitProviderIDCall wrap *gomock.Call
type MockUnitProviderIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitProviderIDCall) Return(arg0 string) *MockUnitProviderIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitProviderIDCall) Do(f func() string) *MockUnitProviderIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitProviderIDCall) DoAndReturn(f func() string) *MockUnitProviderIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicAddress mocks base method.
func (m *MockUnit) PublicAddress(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockUnitMockRecorder) PublicAddress(arg0 any) *MockUnitPublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockUnit)(nil).PublicAddress), arg0)
	return &MockUnitPublicAddressCall{Call: call}
}

// MockUnitPublicAddressCall wrap *gomock.Call
type MockUnitPublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitPublicAddressCall) Return(arg0 string, arg1 error) *MockUnitPublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitPublicAddressCall) Do(f func(context.Context) (string, error)) *MockUnitPublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitPublicAddressCall) DoAndReturn(f func(context.Context) (string, error)) *MockUnitPublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockUnit) Refresh(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockUnitMockRecorder) Refresh(arg0 any) *MockUnitRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockUnit)(nil).Refresh), arg0)
	return &MockUnitRefreshCall{Call: call}
}

// MockUnitRefreshCall wrap *gomock.Call
type MockUnitRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitRefreshCall) Return(arg0 error) *MockUnitRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitRefreshCall) Do(f func(context.Context) error) *MockUnitRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitRefreshCall) DoAndReturn(f func(context.Context) error) *MockUnitRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationsStatus mocks base method.
func (m *MockUnit) RelationsStatus(arg0 context.Context) ([]uniter.RelationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationsStatus", arg0)
	ret0, _ := ret[0].([]uniter.RelationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationsStatus indicates an expected call of RelationsStatus.
func (mr *MockUnitMockRecorder) RelationsStatus(arg0 any) *MockUnitRelationsStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationsStatus", reflect.TypeOf((*MockUnit)(nil).RelationsStatus), arg0)
	return &MockUnitRelationsStatusCall{Call: call}
}

// MockUnitRelationsStatusCall wrap *gomock.Call
type MockUnitRelationsStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitRelationsStatusCall) Return(arg0 []uniter.RelationStatus, arg1 error) *MockUnitRelationsStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitRelationsStatusCall) Do(f func(context.Context) ([]uniter.RelationStatus, error)) *MockUnitRelationsStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitRelationsStatusCall) DoAndReturn(f func(context.Context) ([]uniter.RelationStatus, error)) *MockUnitRelationsStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequestReboot mocks base method.
func (m *MockUnit) RequestReboot(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReboot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestReboot indicates an expected call of RequestReboot.
func (mr *MockUnitMockRecorder) RequestReboot(arg0 any) *MockUnitRequestRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReboot", reflect.TypeOf((*MockUnit)(nil).RequestReboot), arg0)
	return &MockUnitRequestRebootCall{Call: call}
}

// MockUnitRequestRebootCall wrap *gomock.Call
type MockUnitRequestRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitRequestRebootCall) Return(arg0 error) *MockUnitRequestRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitRequestRebootCall) Do(f func(context.Context) error) *MockUnitRequestRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitRequestRebootCall) DoAndReturn(f func(context.Context) error) *MockUnitRequestRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resolved mocks base method.
func (m *MockUnit) Resolved() params.ResolvedMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolved")
	ret0, _ := ret[0].(params.ResolvedMode)
	return ret0
}

// Resolved indicates an expected call of Resolved.
func (mr *MockUnitMockRecorder) Resolved() *MockUnitResolvedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolved", reflect.TypeOf((*MockUnit)(nil).Resolved))
	return &MockUnitResolvedCall{Call: call}
}

// MockUnitResolvedCall wrap *gomock.Call
type MockUnitResolvedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitResolvedCall) Return(arg0 params.ResolvedMode) *MockUnitResolvedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitResolvedCall) Do(f func() params.ResolvedMode) *MockUnitResolvedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitResolvedCall) DoAndReturn(f func() params.ResolvedMode) *MockUnitResolvedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAgentStatus mocks base method.
func (m *MockUnit) SetAgentStatus(arg0 context.Context, arg1 status.Status, arg2 string, arg3 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAgentStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAgentStatus indicates an expected call of SetAgentStatus.
func (mr *MockUnitMockRecorder) SetAgentStatus(arg0, arg1, arg2, arg3 any) *MockUnitSetAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAgentStatus", reflect.TypeOf((*MockUnit)(nil).SetAgentStatus), arg0, arg1, arg2, arg3)
	return &MockUnitSetAgentStatusCall{Call: call}
}

// MockUnitSetAgentStatusCall wrap *gomock.Call
type MockUnitSetAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitSetAgentStatusCall) Return(arg0 error) *MockUnitSetAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitSetAgentStatusCall) Do(f func(context.Context, status.Status, string, map[string]any) error) *MockUnitSetAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitSetAgentStatusCall) DoAndReturn(f func(context.Context, status.Status, string, map[string]any) error) *MockUnitSetAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmURL mocks base method.
func (m *MockUnit) SetCharmURL(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharmURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharmURL indicates an expected call of SetCharmURL.
func (mr *MockUnitMockRecorder) SetCharmURL(arg0, arg1 any) *MockUnitSetCharmURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmURL", reflect.TypeOf((*MockUnit)(nil).SetCharmURL), arg0, arg1)
	return &MockUnitSetCharmURLCall{Call: call}
}

// MockUnitSetCharmURLCall wrap *gomock.Call
type MockUnitSetCharmURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitSetCharmURLCall) Return(arg0 error) *MockUnitSetCharmURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitSetCharmURLCall) Do(f func(context.Context, string) error) *MockUnitSetCharmURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitSetCharmURLCall) DoAndReturn(f func(context.Context, string) error) *MockUnitSetCharmURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetState mocks base method.
func (m *MockUnit) SetState(arg0 context.Context, arg1 params.SetUnitStateArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockUnitMockRecorder) SetState(arg0, arg1 any) *MockUnitSetStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockUnit)(nil).SetState), arg0, arg1)
	return &MockUnitSetStateCall{Call: call}
}

// MockUnitSetStateCall wrap *gomock.Call
type MockUnitSetStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitSetStateCall) Return(arg0 error) *MockUnitSetStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitSetStateCall) Do(f func(context.Context, params.SetUnitStateArg) error) *MockUnitSetStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitSetStateCall) DoAndReturn(f func(context.Context, params.SetUnitStateArg) error) *MockUnitSetStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitStatus mocks base method.
func (m *MockUnit) SetUnitStatus(arg0 context.Context, arg1 status.Status, arg2 string, arg3 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitStatus indicates an expected call of SetUnitStatus.
func (mr *MockUnitMockRecorder) SetUnitStatus(arg0, arg1, arg2, arg3 any) *MockUnitSetUnitStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitStatus", reflect.TypeOf((*MockUnit)(nil).SetUnitStatus), arg0, arg1, arg2, arg3)
	return &MockUnitSetUnitStatusCall{Call: call}
}

// MockUnitSetUnitStatusCall wrap *gomock.Call
type MockUnitSetUnitStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitSetUnitStatusCall) Return(arg0 error) *MockUnitSetUnitStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitSetUnitStatusCall) Do(f func(context.Context, status.Status, string, map[string]any) error) *MockUnitSetUnitStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitSetUnitStatusCall) DoAndReturn(f func(context.Context, status.Status, string, map[string]any) error) *MockUnitSetUnitStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// State mocks base method.
func (m *MockUnit) State(arg0 context.Context) (params.UnitStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", arg0)
	ret0, _ := ret[0].(params.UnitStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockUnitMockRecorder) State(arg0 any) *MockUnitStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockUnit)(nil).State), arg0)
	return &MockUnitStateCall{Call: call}
}

// MockUnitStateCall wrap *gomock.Call
type MockUnitStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitStateCall) Return(arg0 params.UnitStateResult, arg1 error) *MockUnitStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitStateCall) Do(f func(context.Context) (params.UnitStateResult, error)) *MockUnitStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitStateCall) DoAndReturn(f func(context.Context) (params.UnitStateResult, error)) *MockUnitStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockUnit) Tag() names.UnitTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.UnitTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockUnitMockRecorder) Tag() *MockUnitTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockUnit)(nil).Tag))
	return &MockUnitTagCall{Call: call}
}

// MockUnitTagCall wrap *gomock.Call
type MockUnitTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitTagCall) Return(arg0 names.UnitTag) *MockUnitTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitTagCall) Do(f func() names.UnitTag) *MockUnitTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitTagCall) DoAndReturn(f func() names.UnitTag) *MockUnitTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitStatus mocks base method.
func (m *MockUnit) UnitStatus(arg0 context.Context) (params.StatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitStatus", arg0)
	ret0, _ := ret[0].(params.StatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitStatus indicates an expected call of UnitStatus.
func (mr *MockUnitMockRecorder) UnitStatus(arg0 any) *MockUnitUnitStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitStatus", reflect.TypeOf((*MockUnit)(nil).UnitStatus), arg0)
	return &MockUnitUnitStatusCall{Call: call}
}

// MockUnitUnitStatusCall wrap *gomock.Call
type MockUnitUnitStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitUnitStatusCall) Return(arg0 params.StatusResult, arg1 error) *MockUnitUnitStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitUnitStatusCall) Do(f func(context.Context) (params.StatusResult, error)) *MockUnitUnitStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitUnitStatusCall) DoAndReturn(f func(context.Context) (params.StatusResult, error)) *MockUnitUnitStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockUnit) Watch(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockUnitMockRecorder) Watch(arg0 any) *MockUnitWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockUnit)(nil).Watch), arg0)
	return &MockUnitWatchCall{Call: call}
}

// MockUnitWatchCall wrap *gomock.Call
type MockUnitWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockUnitWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockUnitWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockUnitWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchActionNotifications mocks base method.
func (m *MockUnit) WatchActionNotifications(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchActionNotifications", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchActionNotifications indicates an expected call of WatchActionNotifications.
func (mr *MockUnitMockRecorder) WatchActionNotifications(arg0 any) *MockUnitWatchActionNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchActionNotifications", reflect.TypeOf((*MockUnit)(nil).WatchActionNotifications), arg0)
	return &MockUnitWatchActionNotificationsCall{Call: call}
}

// MockUnitWatchActionNotificationsCall wrap *gomock.Call
type MockUnitWatchActionNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchActionNotificationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockUnitWatchActionNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchActionNotificationsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchActionNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchActionNotificationsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchActionNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchAddressesHash mocks base method.
func (m *MockUnit) WatchAddressesHash(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAddressesHash", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAddressesHash indicates an expected call of WatchAddressesHash.
func (mr *MockUnitMockRecorder) WatchAddressesHash(arg0 any) *MockUnitWatchAddressesHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAddressesHash", reflect.TypeOf((*MockUnit)(nil).WatchAddressesHash), arg0)
	return &MockUnitWatchAddressesHashCall{Call: call}
}

// MockUnitWatchAddressesHashCall wrap *gomock.Call
type MockUnitWatchAddressesHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchAddressesHashCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockUnitWatchAddressesHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchAddressesHashCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchAddressesHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchAddressesHashCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchAddressesHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchConfigSettingsHash mocks base method.
func (m *MockUnit) WatchConfigSettingsHash(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConfigSettingsHash", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConfigSettingsHash indicates an expected call of WatchConfigSettingsHash.
func (mr *MockUnitMockRecorder) WatchConfigSettingsHash(arg0 any) *MockUnitWatchConfigSettingsHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConfigSettingsHash", reflect.TypeOf((*MockUnit)(nil).WatchConfigSettingsHash), arg0)
	return &MockUnitWatchConfigSettingsHashCall{Call: call}
}

// MockUnitWatchConfigSettingsHashCall wrap *gomock.Call
type MockUnitWatchConfigSettingsHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchConfigSettingsHashCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockUnitWatchConfigSettingsHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchConfigSettingsHashCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchConfigSettingsHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchConfigSettingsHashCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchConfigSettingsHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchInstanceData mocks base method.
func (m *MockUnit) WatchInstanceData(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchInstanceData", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchInstanceData indicates an expected call of WatchInstanceData.
func (mr *MockUnitMockRecorder) WatchInstanceData(arg0 any) *MockUnitWatchInstanceDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchInstanceData", reflect.TypeOf((*MockUnit)(nil).WatchInstanceData), arg0)
	return &MockUnitWatchInstanceDataCall{Call: call}
}

// MockUnitWatchInstanceDataCall wrap *gomock.Call
type MockUnitWatchInstanceDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchInstanceDataCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockUnitWatchInstanceDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchInstanceDataCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockUnitWatchInstanceDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchInstanceDataCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockUnitWatchInstanceDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelations mocks base method.
func (m *MockUnit) WatchRelations(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelations", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelations indicates an expected call of WatchRelations.
func (mr *MockUnitMockRecorder) WatchRelations(arg0 any) *MockUnitWatchRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelations", reflect.TypeOf((*MockUnit)(nil).WatchRelations), arg0)
	return &MockUnitWatchRelationsCall{Call: call}
}

// MockUnitWatchRelationsCall wrap *gomock.Call
type MockUnitWatchRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchRelationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockUnitWatchRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchRelationsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchRelationsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchStorage mocks base method.
func (m *MockUnit) WatchStorage(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchStorage", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchStorage indicates an expected call of WatchStorage.
func (mr *MockUnitMockRecorder) WatchStorage(arg0 any) *MockUnitWatchStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchStorage", reflect.TypeOf((*MockUnit)(nil).WatchStorage), arg0)
	return &MockUnitWatchStorageCall{Call: call}
}

// MockUnitWatchStorageCall wrap *gomock.Call
type MockUnitWatchStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchStorageCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockUnitWatchStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchStorageCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchStorageCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchTrustConfigSettingsHash mocks base method.
func (m *MockUnit) WatchTrustConfigSettingsHash(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTrustConfigSettingsHash", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTrustConfigSettingsHash indicates an expected call of WatchTrustConfigSettingsHash.
func (mr *MockUnitMockRecorder) WatchTrustConfigSettingsHash(arg0 any) *MockUnitWatchTrustConfigSettingsHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTrustConfigSettingsHash", reflect.TypeOf((*MockUnit)(nil).WatchTrustConfigSettingsHash), arg0)
	return &MockUnitWatchTrustConfigSettingsHashCall{Call: call}
}

// MockUnitWatchTrustConfigSettingsHashCall wrap *gomock.Call
type MockUnitWatchTrustConfigSettingsHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitWatchTrustConfigSettingsHashCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockUnitWatchTrustConfigSettingsHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitWatchTrustConfigSettingsHashCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchTrustConfigSettingsHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitWatchTrustConfigSettingsHashCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockUnitWatchTrustConfigSettingsHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelation is a mock of Relation interface.
type MockRelation struct {
	ctrl     *gomock.Controller
	recorder *MockRelationMockRecorder
}

// MockRelationMockRecorder is the mock recorder for MockRelation.
type MockRelationMockRecorder struct {
	mock *MockRelation
}

// NewMockRelation creates a new mock instance.
func NewMockRelation(ctrl *gomock.Controller) *MockRelation {
	mock := &MockRelation{ctrl: ctrl}
	mock.recorder = &MockRelationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelation) EXPECT() *MockRelationMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRelation) ISGOMOCK() struct{} {
	return struct{}{}
}

// Endpoint mocks base method.
func (m *MockRelation) Endpoint(arg0 context.Context) (*uniter.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoint", arg0)
	ret0, _ := ret[0].(*uniter.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Endpoint indicates an expected call of Endpoint.
func (mr *MockRelationMockRecorder) Endpoint(arg0 any) *MockRelationEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoint", reflect.TypeOf((*MockRelation)(nil).Endpoint), arg0)
	return &MockRelationEndpointCall{Call: call}
}

// MockRelationEndpointCall wrap *gomock.Call
type MockRelationEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationEndpointCall) Return(arg0 *uniter.Endpoint, arg1 error) *MockRelationEndpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationEndpointCall) Do(f func(context.Context) (*uniter.Endpoint, error)) *MockRelationEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationEndpointCall) DoAndReturn(f func(context.Context) (*uniter.Endpoint, error)) *MockRelationEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockRelation) Id() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(int)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockRelationMockRecorder) Id() *MockRelationIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockRelation)(nil).Id))
	return &MockRelationIdCall{Call: call}
}

// MockRelationIdCall wrap *gomock.Call
type MockRelationIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationIdCall) Return(arg0 int) *MockRelationIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationIdCall) Do(f func() int) *MockRelationIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationIdCall) DoAndReturn(f func() int) *MockRelationIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockRelation) Life() life.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(life.Value)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockRelationMockRecorder) Life() *MockRelationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockRelation)(nil).Life))
	return &MockRelationLifeCall{Call: call}
}

// MockRelationLifeCall wrap *gomock.Call
type MockRelationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationLifeCall) Return(arg0 life.Value) *MockRelationLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationLifeCall) Do(f func() life.Value) *MockRelationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationLifeCall) DoAndReturn(f func() life.Value) *MockRelationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OtherApplication mocks base method.
func (m *MockRelation) OtherApplication() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtherApplication")
	ret0, _ := ret[0].(string)
	return ret0
}

// OtherApplication indicates an expected call of OtherApplication.
func (mr *MockRelationMockRecorder) OtherApplication() *MockRelationOtherApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtherApplication", reflect.TypeOf((*MockRelation)(nil).OtherApplication))
	return &MockRelationOtherApplicationCall{Call: call}
}

// MockRelationOtherApplicationCall wrap *gomock.Call
type MockRelationOtherApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationOtherApplicationCall) Return(arg0 string) *MockRelationOtherApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationOtherApplicationCall) Do(f func() string) *MockRelationOtherApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationOtherApplicationCall) DoAndReturn(f func() string) *MockRelationOtherApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OtherModelUUID mocks base method.
func (m *MockRelation) OtherModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtherModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OtherModelUUID indicates an expected call of OtherModelUUID.
func (mr *MockRelationMockRecorder) OtherModelUUID() *MockRelationOtherModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtherModelUUID", reflect.TypeOf((*MockRelation)(nil).OtherModelUUID))
	return &MockRelationOtherModelUUIDCall{Call: call}
}

// MockRelationOtherModelUUIDCall wrap *gomock.Call
type MockRelationOtherModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationOtherModelUUIDCall) Return(arg0 string) *MockRelationOtherModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationOtherModelUUIDCall) Do(f func() string) *MockRelationOtherModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationOtherModelUUIDCall) DoAndReturn(f func() string) *MockRelationOtherModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockRelation) Refresh(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockRelationMockRecorder) Refresh(arg0 any) *MockRelationRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockRelation)(nil).Refresh), arg0)
	return &MockRelationRefreshCall{Call: call}
}

// MockRelationRefreshCall wrap *gomock.Call
type MockRelationRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationRefreshCall) Return(arg0 error) *MockRelationRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationRefreshCall) Do(f func(context.Context) error) *MockRelationRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationRefreshCall) DoAndReturn(f func(context.Context) error) *MockRelationRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockRelation) SetStatus(arg0 context.Context, arg1 relation.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockRelationMockRecorder) SetStatus(arg0, arg1 any) *MockRelationSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockRelation)(nil).SetStatus), arg0, arg1)
	return &MockRelationSetStatusCall{Call: call}
}

// MockRelationSetStatusCall wrap *gomock.Call
type MockRelationSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationSetStatusCall) Return(arg0 error) *MockRelationSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationSetStatusCall) Do(f func(context.Context, relation.Status) error) *MockRelationSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationSetStatusCall) DoAndReturn(f func(context.Context, relation.Status) error) *MockRelationSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockRelation) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRelationMockRecorder) String() *MockRelationStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRelation)(nil).String))
	return &MockRelationStringCall{Call: call}
}

// MockRelationStringCall wrap *gomock.Call
type MockRelationStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStringCall) Return(arg0 string) *MockRelationStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStringCall) Do(f func() string) *MockRelationStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStringCall) DoAndReturn(f func() string) *MockRelationStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Suspended mocks base method.
func (m *MockRelation) Suspended() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspended")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suspended indicates an expected call of Suspended.
func (mr *MockRelationMockRecorder) Suspended() *MockRelationSuspendedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspended", reflect.TypeOf((*MockRelation)(nil).Suspended))
	return &MockRelationSuspendedCall{Call: call}
}

// MockRelationSuspendedCall wrap *gomock.Call
type MockRelationSuspendedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationSuspendedCall) Return(arg0 bool) *MockRelationSuspendedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationSuspendedCall) Do(f func() bool) *MockRelationSuspendedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationSuspendedCall) DoAndReturn(f func() bool) *MockRelationSuspendedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockRelation) Tag() names.RelationTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.RelationTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockRelationMockRecorder) Tag() *MockRelationTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockRelation)(nil).Tag))
	return &MockRelationTagCall{Call: call}
}

// MockRelationTagCall wrap *gomock.Call
type MockRelationTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationTagCall) Return(arg0 names.RelationTag) *MockRelationTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationTagCall) Do(f func() names.RelationTag) *MockRelationTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationTagCall) DoAndReturn(f func() names.RelationTag) *MockRelationTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockRelation) Unit(arg0 context.Context, arg1 names.UnitTag) (RelationUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0, arg1)
	ret0, _ := ret[0].(RelationUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockRelationMockRecorder) Unit(arg0, arg1 any) *MockRelationUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockRelation)(nil).Unit), arg0, arg1)
	return &MockRelationUnitCall{Call: call}
}

// MockRelationUnitCall wrap *gomock.Call
type MockRelationUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitCall) Return(arg0 RelationUnit, arg1 error) *MockRelationUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitCall) Do(f func(context.Context, names.UnitTag) (RelationUnit, error)) *MockRelationUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitCall) DoAndReturn(f func(context.Context, names.UnitTag) (RelationUnit, error)) *MockRelationUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSuspended mocks base method.
func (m *MockRelation) UpdateSuspended(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSuspended", arg0)
}

// UpdateSuspended indicates an expected call of UpdateSuspended.
func (mr *MockRelationMockRecorder) UpdateSuspended(arg0 any) *MockRelationUpdateSuspendedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuspended", reflect.TypeOf((*MockRelation)(nil).UpdateSuspended), arg0)
	return &MockRelationUpdateSuspendedCall{Call: call}
}

// MockRelationUpdateSuspendedCall wrap *gomock.Call
type MockRelationUpdateSuspendedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUpdateSuspendedCall) Return() *MockRelationUpdateSuspendedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUpdateSuspendedCall) Do(f func(bool)) *MockRelationUpdateSuspendedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUpdateSuspendedCall) DoAndReturn(f func(bool)) *MockRelationUpdateSuspendedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationUnit is a mock of RelationUnit interface.
type MockRelationUnit struct {
	ctrl     *gomock.Controller
	recorder *MockRelationUnitMockRecorder
}

// MockRelationUnitMockRecorder is the mock recorder for MockRelationUnit.
type MockRelationUnitMockRecorder struct {
	mock *MockRelationUnit
}

// NewMockRelationUnit creates a new mock instance.
func NewMockRelationUnit(ctrl *gomock.Controller) *MockRelationUnit {
	mock := &MockRelationUnit{ctrl: ctrl}
	mock.recorder = &MockRelationUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationUnit) EXPECT() *MockRelationUnitMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRelationUnit) ISGOMOCK() struct{} {
	return struct{}{}
}

// ApplicationSettings mocks base method.
func (m *MockRelationUnit) ApplicationSettings(arg0 context.Context) (*uniter.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationSettings", arg0)
	ret0, _ := ret[0].(*uniter.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationSettings indicates an expected call of ApplicationSettings.
func (mr *MockRelationUnitMockRecorder) ApplicationSettings(arg0 any) *MockRelationUnitApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationSettings", reflect.TypeOf((*MockRelationUnit)(nil).ApplicationSettings), arg0)
	return &MockRelationUnitApplicationSettingsCall{Call: call}
}

// MockRelationUnitApplicationSettingsCall wrap *gomock.Call
type MockRelationUnitApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitApplicationSettingsCall) Return(arg0 *uniter.Settings, arg1 error) *MockRelationUnitApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitApplicationSettingsCall) Do(f func(context.Context) (*uniter.Settings, error)) *MockRelationUnitApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitApplicationSettingsCall) DoAndReturn(f func(context.Context) (*uniter.Settings, error)) *MockRelationUnitApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Endpoint mocks base method.
func (m *MockRelationUnit) Endpoint() uniter.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoint")
	ret0, _ := ret[0].(uniter.Endpoint)
	return ret0
}

// Endpoint indicates an expected call of Endpoint.
func (mr *MockRelationUnitMockRecorder) Endpoint() *MockRelationUnitEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoint", reflect.TypeOf((*MockRelationUnit)(nil).Endpoint))
	return &MockRelationUnitEndpointCall{Call: call}
}

// MockRelationUnitEndpointCall wrap *gomock.Call
type MockRelationUnitEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitEndpointCall) Return(arg0 uniter.Endpoint) *MockRelationUnitEndpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitEndpointCall) Do(f func() uniter.Endpoint) *MockRelationUnitEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitEndpointCall) DoAndReturn(f func() uniter.Endpoint) *MockRelationUnitEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnterScope mocks base method.
func (m *MockRelationUnit) EnterScope(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterScope", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterScope indicates an expected call of EnterScope.
func (mr *MockRelationUnitMockRecorder) EnterScope(arg0 any) *MockRelationUnitEnterScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterScope", reflect.TypeOf((*MockRelationUnit)(nil).EnterScope), arg0)
	return &MockRelationUnitEnterScopeCall{Call: call}
}

// MockRelationUnitEnterScopeCall wrap *gomock.Call
type MockRelationUnitEnterScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitEnterScopeCall) Return(arg0 error) *MockRelationUnitEnterScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitEnterScopeCall) Do(f func(context.Context) error) *MockRelationUnitEnterScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitEnterScopeCall) DoAndReturn(f func(context.Context) error) *MockRelationUnitEnterScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeaveScope mocks base method.
func (m *MockRelationUnit) LeaveScope(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveScope", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveScope indicates an expected call of LeaveScope.
func (mr *MockRelationUnitMockRecorder) LeaveScope(arg0 any) *MockRelationUnitLeaveScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveScope", reflect.TypeOf((*MockRelationUnit)(nil).LeaveScope), arg0)
	return &MockRelationUnitLeaveScopeCall{Call: call}
}

// MockRelationUnitLeaveScopeCall wrap *gomock.Call
type MockRelationUnitLeaveScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitLeaveScopeCall) Return(arg0 error) *MockRelationUnitLeaveScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitLeaveScopeCall) Do(f func(context.Context) error) *MockRelationUnitLeaveScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitLeaveScopeCall) DoAndReturn(f func(context.Context) error) *MockRelationUnitLeaveScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadSettings mocks base method.
func (m *MockRelationUnit) ReadSettings(arg0 context.Context, arg1 string) (params.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSettings", arg0, arg1)
	ret0, _ := ret[0].(params.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSettings indicates an expected call of ReadSettings.
func (mr *MockRelationUnitMockRecorder) ReadSettings(arg0, arg1 any) *MockRelationUnitReadSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSettings", reflect.TypeOf((*MockRelationUnit)(nil).ReadSettings), arg0, arg1)
	return &MockRelationUnitReadSettingsCall{Call: call}
}

// MockRelationUnitReadSettingsCall wrap *gomock.Call
type MockRelationUnitReadSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitReadSettingsCall) Return(arg0 params.Settings, arg1 error) *MockRelationUnitReadSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitReadSettingsCall) Do(f func(context.Context, string) (params.Settings, error)) *MockRelationUnitReadSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitReadSettingsCall) DoAndReturn(f func(context.Context, string) (params.Settings, error)) *MockRelationUnitReadSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Relation mocks base method.
func (m *MockRelationUnit) Relation() Relation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relation")
	ret0, _ := ret[0].(Relation)
	return ret0
}

// Relation indicates an expected call of Relation.
func (mr *MockRelationUnitMockRecorder) Relation() *MockRelationUnitRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockRelationUnit)(nil).Relation))
	return &MockRelationUnitRelationCall{Call: call}
}

// MockRelationUnitRelationCall wrap *gomock.Call
type MockRelationUnitRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitRelationCall) Return(arg0 Relation) *MockRelationUnitRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitRelationCall) Do(f func() Relation) *MockRelationUnitRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitRelationCall) DoAndReturn(f func() Relation) *MockRelationUnitRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Settings mocks base method.
func (m *MockRelationUnit) Settings(arg0 context.Context) (*uniter.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings", arg0)
	ret0, _ := ret[0].(*uniter.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Settings indicates an expected call of Settings.
func (mr *MockRelationUnitMockRecorder) Settings(arg0 any) *MockRelationUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockRelationUnit)(nil).Settings), arg0)
	return &MockRelationUnitSettingsCall{Call: call}
}

// MockRelationUnitSettingsCall wrap *gomock.Call
type MockRelationUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitSettingsCall) Return(arg0 *uniter.Settings, arg1 error) *MockRelationUnitSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitSettingsCall) Do(f func(context.Context) (*uniter.Settings, error)) *MockRelationUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitSettingsCall) DoAndReturn(f func(context.Context) (*uniter.Settings, error)) *MockRelationUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplication) ISGOMOCK() struct{} {
	return struct{}{}
}

// CharmModifiedVersion mocks base method.
func (m *MockApplication) CharmModifiedVersion(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmModifiedVersion", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmModifiedVersion indicates an expected call of CharmModifiedVersion.
func (mr *MockApplicationMockRecorder) CharmModifiedVersion(arg0 any) *MockApplicationCharmModifiedVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmModifiedVersion", reflect.TypeOf((*MockApplication)(nil).CharmModifiedVersion), arg0)
	return &MockApplicationCharmModifiedVersionCall{Call: call}
}

// MockApplicationCharmModifiedVersionCall wrap *gomock.Call
type MockApplicationCharmModifiedVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmModifiedVersionCall) Return(arg0 int, arg1 error) *MockApplicationCharmModifiedVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmModifiedVersionCall) Do(f func(context.Context) (int, error)) *MockApplicationCharmModifiedVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmModifiedVersionCall) DoAndReturn(f func(context.Context) (int, error)) *MockApplicationCharmModifiedVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmURL mocks base method.
func (m *MockApplication) CharmURL(arg0 context.Context) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CharmURL indicates an expected call of CharmURL.
func (mr *MockApplicationMockRecorder) CharmURL(arg0 any) *MockApplicationCharmURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmURL", reflect.TypeOf((*MockApplication)(nil).CharmURL), arg0)
	return &MockApplicationCharmURLCall{Call: call}
}

// MockApplicationCharmURLCall wrap *gomock.Call
type MockApplicationCharmURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmURLCall) Return(arg0 string, arg1 bool, arg2 error) *MockApplicationCharmURLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmURLCall) Do(f func(context.Context) (string, bool, error)) *MockApplicationCharmURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmURLCall) DoAndReturn(f func(context.Context) (string, bool, error)) *MockApplicationCharmURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockApplication) Life() life.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(life.Value)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockApplicationMockRecorder) Life() *MockApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockApplication)(nil).Life))
	return &MockApplicationLifeCall{Call: call}
}

// MockApplicationLifeCall wrap *gomock.Call
type MockApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationLifeCall) Return(arg0 life.Value) *MockApplicationLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationLifeCall) Do(f func() life.Value) *MockApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationLifeCall) DoAndReturn(f func() life.Value) *MockApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockApplication) Refresh(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockApplicationMockRecorder) Refresh(arg0 any) *MockApplicationRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockApplication)(nil).Refresh), arg0)
	return &MockApplicationRefreshCall{Call: call}
}

// MockApplicationRefreshCall wrap *gomock.Call
type MockApplicationRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationRefreshCall) Return(arg0 error) *MockApplicationRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationRefreshCall) Do(f func(context.Context) error) *MockApplicationRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationRefreshCall) DoAndReturn(f func(context.Context) error) *MockApplicationRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockApplication) SetStatus(arg0 context.Context, arg1 string, arg2 status.Status, arg3 string, arg4 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockApplicationMockRecorder) SetStatus(arg0, arg1, arg2, arg3, arg4 any) *MockApplicationSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockApplication)(nil).SetStatus), arg0, arg1, arg2, arg3, arg4)
	return &MockApplicationSetStatusCall{Call: call}
}

// MockApplicationSetStatusCall wrap *gomock.Call
type MockApplicationSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetStatusCall) Return(arg0 error) *MockApplicationSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetStatusCall) Do(f func(context.Context, string, status.Status, string, map[string]any) error) *MockApplicationSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetStatusCall) DoAndReturn(f func(context.Context, string, status.Status, string, map[string]any) error) *MockApplicationSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockApplication) Status(arg0 context.Context, arg1 string) (params.ApplicationStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(params.ApplicationStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockApplicationMockRecorder) Status(arg0, arg1 any) *MockApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockApplication)(nil).Status), arg0, arg1)
	return &MockApplicationStatusCall{Call: call}
}

// MockApplicationStatusCall wrap *gomock.Call
type MockApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationStatusCall) Return(arg0 params.ApplicationStatusResult, arg1 error) *MockApplicationStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationStatusCall) Do(f func(context.Context, string) (params.ApplicationStatusResult, error)) *MockApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationStatusCall) DoAndReturn(f func(context.Context, string) (params.ApplicationStatusResult, error)) *MockApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockApplication) Tag() names.ApplicationTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.ApplicationTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockApplicationMockRecorder) Tag() *MockApplicationTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockApplication)(nil).Tag))
	return &MockApplicationTagCall{Call: call}
}

// MockApplicationTagCall wrap *gomock.Call
type MockApplicationTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationTagCall) Return(arg0 names.ApplicationTag) *MockApplicationTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationTagCall) Do(f func() names.ApplicationTag) *MockApplicationTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationTagCall) DoAndReturn(f func() names.ApplicationTag) *MockApplicationTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockApplication) Watch(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockApplicationMockRecorder) Watch(arg0 any) *MockApplicationWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockApplication)(nil).Watch), arg0)
	return &MockApplicationWatchCall{Call: call}
}

// MockApplicationWatchCall wrap *gomock.Call
type MockApplicationWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationWatchCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationWatchCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockApplicationWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationWatchCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockApplicationWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharm is a mock of Charm interface.
type MockCharm struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMockRecorder
}

// MockCharmMockRecorder is the mock recorder for MockCharm.
type MockCharmMockRecorder struct {
	mock *MockCharm
}

// NewMockCharm creates a new mock instance.
func NewMockCharm(ctrl *gomock.Controller) *MockCharm {
	mock := &MockCharm{ctrl: ctrl}
	mock.recorder = &MockCharmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharm) EXPECT() *MockCharmMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharm) ISGOMOCK() struct{} {
	return struct{}{}
}

// ArchiveSha256 mocks base method.
func (m *MockCharm) ArchiveSha256(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveSha256", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveSha256 indicates an expected call of ArchiveSha256.
func (mr *MockCharmMockRecorder) ArchiveSha256(arg0 any) *MockCharmArchiveSha256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveSha256", reflect.TypeOf((*MockCharm)(nil).ArchiveSha256), arg0)
	return &MockCharmArchiveSha256Call{Call: call}
}

// MockCharmArchiveSha256Call wrap *gomock.Call
type MockCharmArchiveSha256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveSha256Call) Return(arg0 string, arg1 error) *MockCharmArchiveSha256Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveSha256Call) Do(f func(context.Context) (string, error)) *MockCharmArchiveSha256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveSha256Call) DoAndReturn(f func(context.Context) (string, error)) *MockCharmArchiveSha256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LXDProfileRequired mocks base method.
func (m *MockCharm) LXDProfileRequired(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfileRequired", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LXDProfileRequired indicates an expected call of LXDProfileRequired.
func (mr *MockCharmMockRecorder) LXDProfileRequired(arg0 any) *MockCharmLXDProfileRequiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfileRequired", reflect.TypeOf((*MockCharm)(nil).LXDProfileRequired), arg0)
	return &MockCharmLXDProfileRequiredCall{Call: call}
}

// MockCharmLXDProfileRequiredCall wrap *gomock.Call
type MockCharmLXDProfileRequiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmLXDProfileRequiredCall) Return(arg0 bool, arg1 error) *MockCharmLXDProfileRequiredCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmLXDProfileRequiredCall) Do(f func(context.Context) (bool, error)) *MockCharmLXDProfileRequiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmLXDProfileRequiredCall) DoAndReturn(f func(context.Context) (bool, error)) *MockCharmLXDProfileRequiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// URL mocks base method.
func (m *MockCharm) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockCharmMockRecorder) URL() *MockCharmURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockCharm)(nil).URL))
	return &MockCharmURLCall{Call: call}
}

// MockCharmURLCall wrap *gomock.Call
type MockCharmURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmURLCall) Return(arg0 string) *MockCharmURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmURLCall) Do(f func() string) *MockCharmURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmURLCall) DoAndReturn(f func() string) *MockCharmURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
