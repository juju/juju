// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/operation (interfaces: UnitStateReadWriter)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/uniterstaterw_mock.go github.com/juju/juju/internal/worker/uniter/operation UnitStateReadWriter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockUnitStateReadWriter is a mock of UnitStateReadWriter interface.
type MockUnitStateReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUnitStateReadWriterMockRecorder
}

// MockUnitStateReadWriterMockRecorder is the mock recorder for MockUnitStateReadWriter.
type MockUnitStateReadWriterMockRecorder struct {
	mock *MockUnitStateReadWriter
}

// NewMockUnitStateReadWriter creates a new mock instance.
func NewMockUnitStateReadWriter(ctrl *gomock.Controller) *MockUnitStateReadWriter {
	mock := &MockUnitStateReadWriter{ctrl: ctrl}
	mock.recorder = &MockUnitStateReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitStateReadWriter) EXPECT() *MockUnitStateReadWriterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUnitStateReadWriter) ISGOMOCK() struct{} {
	return struct{}{}
}

// SetState mocks base method.
func (m *MockUnitStateReadWriter) SetState(arg0 context.Context, arg1 params.SetUnitStateArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockUnitStateReadWriterMockRecorder) SetState(arg0, arg1 any) *MockUnitStateReadWriterSetStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockUnitStateReadWriter)(nil).SetState), arg0, arg1)
	return &MockUnitStateReadWriterSetStateCall{Call: call}
}

// MockUnitStateReadWriterSetStateCall wrap *gomock.Call
type MockUnitStateReadWriterSetStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitStateReadWriterSetStateCall) Return(arg0 error) *MockUnitStateReadWriterSetStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitStateReadWriterSetStateCall) Do(f func(context.Context, params.SetUnitStateArg) error) *MockUnitStateReadWriterSetStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitStateReadWriterSetStateCall) DoAndReturn(f func(context.Context, params.SetUnitStateArg) error) *MockUnitStateReadWriterSetStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// State mocks base method.
func (m *MockUnitStateReadWriter) State(arg0 context.Context) (params.UnitStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", arg0)
	ret0, _ := ret[0].(params.UnitStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockUnitStateReadWriterMockRecorder) State(arg0 any) *MockUnitStateReadWriterStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockUnitStateReadWriter)(nil).State), arg0)
	return &MockUnitStateReadWriterStateCall{Call: call}
}

// MockUnitStateReadWriterStateCall wrap *gomock.Call
type MockUnitStateReadWriterStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitStateReadWriterStateCall) Return(arg0 params.UnitStateResult, arg1 error) *MockUnitStateReadWriterStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitStateReadWriterStateCall) Do(f func(context.Context) (params.UnitStateResult, error)) *MockUnitStateReadWriterStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitStateReadWriterStateCall) DoAndReturn(f func(context.Context) (params.UnitStateResult, error)) *MockUnitStateReadWriterStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
