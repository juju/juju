// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/operation (interfaces: Operation,Factory,Callbacks)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/interface_mock.go github.com/juju/juju/internal/worker/uniter/operation Operation,Factory,Callbacks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	charm "github.com/juju/juju/internal/worker/uniter/charm"
	hook "github.com/juju/juju/internal/worker/uniter/hook"
	operation "github.com/juju/juju/internal/worker/uniter/operation"
	remotestate "github.com/juju/juju/internal/worker/uniter/remotestate"
	context0 "github.com/juju/juju/internal/worker/uniter/runner/context"
	gomock "go.uber.org/mock/gomock"
)

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOperation) ISGOMOCK() struct{} {
	return struct{}{}
}

// Commit mocks base method.
func (m *MockOperation) Commit(arg0 context.Context, arg1 operation.State) (*operation.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(*operation.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockOperationMockRecorder) Commit(arg0, arg1 any) *MockOperationCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockOperation)(nil).Commit), arg0, arg1)
	return &MockOperationCommitCall{Call: call}
}

// MockOperationCommitCall wrap *gomock.Call
type MockOperationCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationCommitCall) Return(arg0 *operation.State, arg1 error) *MockOperationCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationCommitCall) Do(f func(context.Context, operation.State) (*operation.State, error)) *MockOperationCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationCommitCall) DoAndReturn(f func(context.Context, operation.State) (*operation.State, error)) *MockOperationCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockOperation) Execute(arg0 context.Context, arg1 operation.State) (*operation.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*operation.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockOperationMockRecorder) Execute(arg0, arg1 any) *MockOperationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockOperation)(nil).Execute), arg0, arg1)
	return &MockOperationExecuteCall{Call: call}
}

// MockOperationExecuteCall wrap *gomock.Call
type MockOperationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationExecuteCall) Return(arg0 *operation.State, arg1 error) *MockOperationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationExecuteCall) Do(f func(context.Context, operation.State) (*operation.State, error)) *MockOperationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationExecuteCall) DoAndReturn(f func(context.Context, operation.State) (*operation.State, error)) *MockOperationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecutionGroup mocks base method.
func (m *MockOperation) ExecutionGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExecutionGroup indicates an expected call of ExecutionGroup.
func (mr *MockOperationMockRecorder) ExecutionGroup() *MockOperationExecutionGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionGroup", reflect.TypeOf((*MockOperation)(nil).ExecutionGroup))
	return &MockOperationExecutionGroupCall{Call: call}
}

// MockOperationExecutionGroupCall wrap *gomock.Call
type MockOperationExecutionGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationExecutionGroupCall) Return(arg0 string) *MockOperationExecutionGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationExecutionGroupCall) Do(f func() string) *MockOperationExecutionGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationExecutionGroupCall) DoAndReturn(f func() string) *MockOperationExecutionGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NeedsGlobalMachineLock mocks base method.
func (m *MockOperation) NeedsGlobalMachineLock() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsGlobalMachineLock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsGlobalMachineLock indicates an expected call of NeedsGlobalMachineLock.
func (mr *MockOperationMockRecorder) NeedsGlobalMachineLock() *MockOperationNeedsGlobalMachineLockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsGlobalMachineLock", reflect.TypeOf((*MockOperation)(nil).NeedsGlobalMachineLock))
	return &MockOperationNeedsGlobalMachineLockCall{Call: call}
}

// MockOperationNeedsGlobalMachineLockCall wrap *gomock.Call
type MockOperationNeedsGlobalMachineLockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationNeedsGlobalMachineLockCall) Return(arg0 bool) *MockOperationNeedsGlobalMachineLockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationNeedsGlobalMachineLockCall) Do(f func() bool) *MockOperationNeedsGlobalMachineLockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationNeedsGlobalMachineLockCall) DoAndReturn(f func() bool) *MockOperationNeedsGlobalMachineLockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Prepare mocks base method.
func (m *MockOperation) Prepare(arg0 context.Context, arg1 operation.State) (*operation.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", arg0, arg1)
	ret0, _ := ret[0].(*operation.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockOperationMockRecorder) Prepare(arg0, arg1 any) *MockOperationPrepareCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockOperation)(nil).Prepare), arg0, arg1)
	return &MockOperationPrepareCall{Call: call}
}

// MockOperationPrepareCall wrap *gomock.Call
type MockOperationPrepareCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationPrepareCall) Return(arg0 *operation.State, arg1 error) *MockOperationPrepareCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationPrepareCall) Do(f func(context.Context, operation.State) (*operation.State, error)) *MockOperationPrepareCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationPrepareCall) DoAndReturn(f func(context.Context, operation.State) (*operation.State, error)) *MockOperationPrepareCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteStateChanged mocks base method.
func (m *MockOperation) RemoteStateChanged(arg0 remotestate.Snapshot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoteStateChanged", arg0)
}

// RemoteStateChanged indicates an expected call of RemoteStateChanged.
func (mr *MockOperationMockRecorder) RemoteStateChanged(arg0 any) *MockOperationRemoteStateChangedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteStateChanged", reflect.TypeOf((*MockOperation)(nil).RemoteStateChanged), arg0)
	return &MockOperationRemoteStateChangedCall{Call: call}
}

// MockOperationRemoteStateChangedCall wrap *gomock.Call
type MockOperationRemoteStateChangedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationRemoteStateChangedCall) Return() *MockOperationRemoteStateChangedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationRemoteStateChangedCall) Do(f func(remotestate.Snapshot)) *MockOperationRemoteStateChangedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationRemoteStateChangedCall) DoAndReturn(f func(remotestate.Snapshot)) *MockOperationRemoteStateChangedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockOperation) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockOperationMockRecorder) String() *MockOperationStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockOperation)(nil).String))
	return &MockOperationStringCall{Call: call}
}

// MockOperationStringCall wrap *gomock.Call
type MockOperationStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationStringCall) Return(arg0 string) *MockOperationStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationStringCall) Do(f func() string) *MockOperationStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationStringCall) DoAndReturn(f func() string) *MockOperationStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFactory) ISGOMOCK() struct{} {
	return struct{}{}
}

// NewAcceptLeadership mocks base method.
func (m *MockFactory) NewAcceptLeadership() (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAcceptLeadership")
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAcceptLeadership indicates an expected call of NewAcceptLeadership.
func (mr *MockFactoryMockRecorder) NewAcceptLeadership() *MockFactoryNewAcceptLeadershipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAcceptLeadership", reflect.TypeOf((*MockFactory)(nil).NewAcceptLeadership))
	return &MockFactoryNewAcceptLeadershipCall{Call: call}
}

// MockFactoryNewAcceptLeadershipCall wrap *gomock.Call
type MockFactoryNewAcceptLeadershipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewAcceptLeadershipCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewAcceptLeadershipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewAcceptLeadershipCall) Do(f func() (operation.Operation, error)) *MockFactoryNewAcceptLeadershipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewAcceptLeadershipCall) DoAndReturn(f func() (operation.Operation, error)) *MockFactoryNewAcceptLeadershipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewAction mocks base method.
func (m *MockFactory) NewAction(arg0 context.Context, arg1 string) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAction", arg0, arg1)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAction indicates an expected call of NewAction.
func (mr *MockFactoryMockRecorder) NewAction(arg0, arg1 any) *MockFactoryNewActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAction", reflect.TypeOf((*MockFactory)(nil).NewAction), arg0, arg1)
	return &MockFactoryNewActionCall{Call: call}
}

// MockFactoryNewActionCall wrap *gomock.Call
type MockFactoryNewActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewActionCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewActionCall) Do(f func(context.Context, string) (operation.Operation, error)) *MockFactoryNewActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewActionCall) DoAndReturn(f func(context.Context, string) (operation.Operation, error)) *MockFactoryNewActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewCommands mocks base method.
func (m *MockFactory) NewCommands(arg0 operation.CommandArgs, arg1 operation.CommandResponseFunc) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommands", arg0, arg1)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCommands indicates an expected call of NewCommands.
func (mr *MockFactoryMockRecorder) NewCommands(arg0, arg1 any) *MockFactoryNewCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommands", reflect.TypeOf((*MockFactory)(nil).NewCommands), arg0, arg1)
	return &MockFactoryNewCommandsCall{Call: call}
}

// MockFactoryNewCommandsCall wrap *gomock.Call
type MockFactoryNewCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewCommandsCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewCommandsCall) Do(f func(operation.CommandArgs, operation.CommandResponseFunc) (operation.Operation, error)) *MockFactoryNewCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewCommandsCall) DoAndReturn(f func(operation.CommandArgs, operation.CommandResponseFunc) (operation.Operation, error)) *MockFactoryNewCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewFailAction mocks base method.
func (m *MockFactory) NewFailAction(arg0 string) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFailAction", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFailAction indicates an expected call of NewFailAction.
func (mr *MockFactoryMockRecorder) NewFailAction(arg0 any) *MockFactoryNewFailActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFailAction", reflect.TypeOf((*MockFactory)(nil).NewFailAction), arg0)
	return &MockFactoryNewFailActionCall{Call: call}
}

// MockFactoryNewFailActionCall wrap *gomock.Call
type MockFactoryNewFailActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewFailActionCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewFailActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewFailActionCall) Do(f func(string) (operation.Operation, error)) *MockFactoryNewFailActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewFailActionCall) DoAndReturn(f func(string) (operation.Operation, error)) *MockFactoryNewFailActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewInstall mocks base method.
func (m *MockFactory) NewInstall(arg0 string) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInstall", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewInstall indicates an expected call of NewInstall.
func (mr *MockFactoryMockRecorder) NewInstall(arg0 any) *MockFactoryNewInstallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInstall", reflect.TypeOf((*MockFactory)(nil).NewInstall), arg0)
	return &MockFactoryNewInstallCall{Call: call}
}

// MockFactoryNewInstallCall wrap *gomock.Call
type MockFactoryNewInstallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewInstallCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewInstallCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewInstallCall) Do(f func(string) (operation.Operation, error)) *MockFactoryNewInstallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewInstallCall) DoAndReturn(f func(string) (operation.Operation, error)) *MockFactoryNewInstallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNoOpSecretsRemoved mocks base method.
func (m *MockFactory) NewNoOpSecretsRemoved(arg0 []string) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNoOpSecretsRemoved", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNoOpSecretsRemoved indicates an expected call of NewNoOpSecretsRemoved.
func (mr *MockFactoryMockRecorder) NewNoOpSecretsRemoved(arg0 any) *MockFactoryNewNoOpSecretsRemovedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNoOpSecretsRemoved", reflect.TypeOf((*MockFactory)(nil).NewNoOpSecretsRemoved), arg0)
	return &MockFactoryNewNoOpSecretsRemovedCall{Call: call}
}

// MockFactoryNewNoOpSecretsRemovedCall wrap *gomock.Call
type MockFactoryNewNoOpSecretsRemovedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewNoOpSecretsRemovedCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewNoOpSecretsRemovedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewNoOpSecretsRemovedCall) Do(f func([]string) (operation.Operation, error)) *MockFactoryNewNoOpSecretsRemovedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewNoOpSecretsRemovedCall) DoAndReturn(f func([]string) (operation.Operation, error)) *MockFactoryNewNoOpSecretsRemovedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewResignLeadership mocks base method.
func (m *MockFactory) NewResignLeadership() (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResignLeadership")
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewResignLeadership indicates an expected call of NewResignLeadership.
func (mr *MockFactoryMockRecorder) NewResignLeadership() *MockFactoryNewResignLeadershipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResignLeadership", reflect.TypeOf((*MockFactory)(nil).NewResignLeadership))
	return &MockFactoryNewResignLeadershipCall{Call: call}
}

// MockFactoryNewResignLeadershipCall wrap *gomock.Call
type MockFactoryNewResignLeadershipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewResignLeadershipCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewResignLeadershipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewResignLeadershipCall) Do(f func() (operation.Operation, error)) *MockFactoryNewResignLeadershipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewResignLeadershipCall) DoAndReturn(f func() (operation.Operation, error)) *MockFactoryNewResignLeadershipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewResolvedUpgrade mocks base method.
func (m *MockFactory) NewResolvedUpgrade(arg0 string) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResolvedUpgrade", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewResolvedUpgrade indicates an expected call of NewResolvedUpgrade.
func (mr *MockFactoryMockRecorder) NewResolvedUpgrade(arg0 any) *MockFactoryNewResolvedUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResolvedUpgrade", reflect.TypeOf((*MockFactory)(nil).NewResolvedUpgrade), arg0)
	return &MockFactoryNewResolvedUpgradeCall{Call: call}
}

// MockFactoryNewResolvedUpgradeCall wrap *gomock.Call
type MockFactoryNewResolvedUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewResolvedUpgradeCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewResolvedUpgradeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewResolvedUpgradeCall) Do(f func(string) (operation.Operation, error)) *MockFactoryNewResolvedUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewResolvedUpgradeCall) DoAndReturn(f func(string) (operation.Operation, error)) *MockFactoryNewResolvedUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewRevertUpgrade mocks base method.
func (m *MockFactory) NewRevertUpgrade(arg0 string) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRevertUpgrade", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRevertUpgrade indicates an expected call of NewRevertUpgrade.
func (mr *MockFactoryMockRecorder) NewRevertUpgrade(arg0 any) *MockFactoryNewRevertUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRevertUpgrade", reflect.TypeOf((*MockFactory)(nil).NewRevertUpgrade), arg0)
	return &MockFactoryNewRevertUpgradeCall{Call: call}
}

// MockFactoryNewRevertUpgradeCall wrap *gomock.Call
type MockFactoryNewRevertUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewRevertUpgradeCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewRevertUpgradeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewRevertUpgradeCall) Do(f func(string) (operation.Operation, error)) *MockFactoryNewRevertUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewRevertUpgradeCall) DoAndReturn(f func(string) (operation.Operation, error)) *MockFactoryNewRevertUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewRunHook mocks base method.
func (m *MockFactory) NewRunHook(arg0 hook.Info) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRunHook", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRunHook indicates an expected call of NewRunHook.
func (mr *MockFactoryMockRecorder) NewRunHook(arg0 any) *MockFactoryNewRunHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRunHook", reflect.TypeOf((*MockFactory)(nil).NewRunHook), arg0)
	return &MockFactoryNewRunHookCall{Call: call}
}

// MockFactoryNewRunHookCall wrap *gomock.Call
type MockFactoryNewRunHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewRunHookCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewRunHookCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewRunHookCall) Do(f func(hook.Info) (operation.Operation, error)) *MockFactoryNewRunHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewRunHookCall) DoAndReturn(f func(hook.Info) (operation.Operation, error)) *MockFactoryNewRunHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewSkipHook mocks base method.
func (m *MockFactory) NewSkipHook(arg0 hook.Info) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSkipHook", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSkipHook indicates an expected call of NewSkipHook.
func (mr *MockFactoryMockRecorder) NewSkipHook(arg0 any) *MockFactoryNewSkipHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSkipHook", reflect.TypeOf((*MockFactory)(nil).NewSkipHook), arg0)
	return &MockFactoryNewSkipHookCall{Call: call}
}

// MockFactoryNewSkipHookCall wrap *gomock.Call
type MockFactoryNewSkipHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewSkipHookCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewSkipHookCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewSkipHookCall) Do(f func(hook.Info) (operation.Operation, error)) *MockFactoryNewSkipHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewSkipHookCall) DoAndReturn(f func(hook.Info) (operation.Operation, error)) *MockFactoryNewSkipHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewUpgrade mocks base method.
func (m *MockFactory) NewUpgrade(arg0 string) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpgrade", arg0)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUpgrade indicates an expected call of NewUpgrade.
func (mr *MockFactoryMockRecorder) NewUpgrade(arg0 any) *MockFactoryNewUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpgrade", reflect.TypeOf((*MockFactory)(nil).NewUpgrade), arg0)
	return &MockFactoryNewUpgradeCall{Call: call}
}

// MockFactoryNewUpgradeCall wrap *gomock.Call
type MockFactoryNewUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryNewUpgradeCall) Return(arg0 operation.Operation, arg1 error) *MockFactoryNewUpgradeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryNewUpgradeCall) Do(f func(string) (operation.Operation, error)) *MockFactoryNewUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryNewUpgradeCall) DoAndReturn(f func(string) (operation.Operation, error)) *MockFactoryNewUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCallbacks is a mock of Callbacks interface.
type MockCallbacks struct {
	ctrl     *gomock.Controller
	recorder *MockCallbacksMockRecorder
}

// MockCallbacksMockRecorder is the mock recorder for MockCallbacks.
type MockCallbacksMockRecorder struct {
	mock *MockCallbacks
}

// NewMockCallbacks creates a new mock instance.
func NewMockCallbacks(ctrl *gomock.Controller) *MockCallbacks {
	mock := &MockCallbacks{ctrl: ctrl}
	mock.recorder = &MockCallbacksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallbacks) EXPECT() *MockCallbacksMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCallbacks) ISGOMOCK() struct{} {
	return struct{}{}
}

// ActionStatus mocks base method.
func (m *MockCallbacks) ActionStatus(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionStatus", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionStatus indicates an expected call of ActionStatus.
func (mr *MockCallbacksMockRecorder) ActionStatus(arg0, arg1 any) *MockCallbacksActionStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionStatus", reflect.TypeOf((*MockCallbacks)(nil).ActionStatus), arg0, arg1)
	return &MockCallbacksActionStatusCall{Call: call}
}

// MockCallbacksActionStatusCall wrap *gomock.Call
type MockCallbacksActionStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksActionStatusCall) Return(arg0 string, arg1 error) *MockCallbacksActionStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksActionStatusCall) Do(f func(context.Context, string) (string, error)) *MockCallbacksActionStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksActionStatusCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockCallbacksActionStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CommitHook mocks base method.
func (m *MockCallbacks) CommitHook(arg0 context.Context, arg1 hook.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitHook indicates an expected call of CommitHook.
func (mr *MockCallbacksMockRecorder) CommitHook(arg0, arg1 any) *MockCallbacksCommitHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitHook", reflect.TypeOf((*MockCallbacks)(nil).CommitHook), arg0, arg1)
	return &MockCallbacksCommitHookCall{Call: call}
}

// MockCallbacksCommitHookCall wrap *gomock.Call
type MockCallbacksCommitHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksCommitHookCall) Return(arg0 error) *MockCallbacksCommitHookCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksCommitHookCall) Do(f func(context.Context, hook.Info) error) *MockCallbacksCommitHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksCommitHookCall) DoAndReturn(f func(context.Context, hook.Info) error) *MockCallbacksCommitHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FailAction mocks base method.
func (m *MockCallbacks) FailAction(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailAction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailAction indicates an expected call of FailAction.
func (mr *MockCallbacksMockRecorder) FailAction(arg0, arg1, arg2 any) *MockCallbacksFailActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailAction", reflect.TypeOf((*MockCallbacks)(nil).FailAction), arg0, arg1, arg2)
	return &MockCallbacksFailActionCall{Call: call}
}

// MockCallbacksFailActionCall wrap *gomock.Call
type MockCallbacksFailActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksFailActionCall) Return(arg0 error) *MockCallbacksFailActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksFailActionCall) Do(f func(context.Context, string, string) error) *MockCallbacksFailActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksFailActionCall) DoAndReturn(f func(context.Context, string, string) error) *MockCallbacksFailActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetArchiveInfo mocks base method.
func (m *MockCallbacks) GetArchiveInfo(arg0 string) (charm.BundleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveInfo", arg0)
	ret0, _ := ret[0].(charm.BundleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveInfo indicates an expected call of GetArchiveInfo.
func (mr *MockCallbacksMockRecorder) GetArchiveInfo(arg0 any) *MockCallbacksGetArchiveInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveInfo", reflect.TypeOf((*MockCallbacks)(nil).GetArchiveInfo), arg0)
	return &MockCallbacksGetArchiveInfoCall{Call: call}
}

// MockCallbacksGetArchiveInfoCall wrap *gomock.Call
type MockCallbacksGetArchiveInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksGetArchiveInfoCall) Return(arg0 charm.BundleInfo, arg1 error) *MockCallbacksGetArchiveInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksGetArchiveInfoCall) Do(f func(string) (charm.BundleInfo, error)) *MockCallbacksGetArchiveInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksGetArchiveInfoCall) DoAndReturn(f func(string) (charm.BundleInfo, error)) *MockCallbacksGetArchiveInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NotifyHookCompleted mocks base method.
func (m *MockCallbacks) NotifyHookCompleted(arg0 string, arg1 context0.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyHookCompleted", arg0, arg1)
}

// NotifyHookCompleted indicates an expected call of NotifyHookCompleted.
func (mr *MockCallbacksMockRecorder) NotifyHookCompleted(arg0, arg1 any) *MockCallbacksNotifyHookCompletedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyHookCompleted", reflect.TypeOf((*MockCallbacks)(nil).NotifyHookCompleted), arg0, arg1)
	return &MockCallbacksNotifyHookCompletedCall{Call: call}
}

// MockCallbacksNotifyHookCompletedCall wrap *gomock.Call
type MockCallbacksNotifyHookCompletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksNotifyHookCompletedCall) Return() *MockCallbacksNotifyHookCompletedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksNotifyHookCompletedCall) Do(f func(string, context0.Context)) *MockCallbacksNotifyHookCompletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksNotifyHookCompletedCall) DoAndReturn(f func(string, context0.Context)) *MockCallbacksNotifyHookCompletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NotifyHookFailed mocks base method.
func (m *MockCallbacks) NotifyHookFailed(arg0 string, arg1 context0.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyHookFailed", arg0, arg1)
}

// NotifyHookFailed indicates an expected call of NotifyHookFailed.
func (mr *MockCallbacksMockRecorder) NotifyHookFailed(arg0, arg1 any) *MockCallbacksNotifyHookFailedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyHookFailed", reflect.TypeOf((*MockCallbacks)(nil).NotifyHookFailed), arg0, arg1)
	return &MockCallbacksNotifyHookFailedCall{Call: call}
}

// MockCallbacksNotifyHookFailedCall wrap *gomock.Call
type MockCallbacksNotifyHookFailedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksNotifyHookFailedCall) Return() *MockCallbacksNotifyHookFailedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksNotifyHookFailedCall) Do(f func(string, context0.Context)) *MockCallbacksNotifyHookFailedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksNotifyHookFailedCall) DoAndReturn(f func(string, context0.Context)) *MockCallbacksNotifyHookFailedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareHook mocks base method.
func (m *MockCallbacks) PrepareHook(arg0 context.Context, arg1 hook.Info) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHook", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareHook indicates an expected call of PrepareHook.
func (mr *MockCallbacksMockRecorder) PrepareHook(arg0, arg1 any) *MockCallbacksPrepareHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHook", reflect.TypeOf((*MockCallbacks)(nil).PrepareHook), arg0, arg1)
	return &MockCallbacksPrepareHookCall{Call: call}
}

// MockCallbacksPrepareHookCall wrap *gomock.Call
type MockCallbacksPrepareHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksPrepareHookCall) Return(arg0 string, arg1 error) *MockCallbacksPrepareHookCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksPrepareHookCall) Do(f func(context.Context, hook.Info) (string, error)) *MockCallbacksPrepareHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksPrepareHookCall) DoAndReturn(f func(context.Context, hook.Info) (string, error)) *MockCallbacksPrepareHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretsRemoved mocks base method.
func (m *MockCallbacks) SecretsRemoved(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretsRemoved", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretsRemoved indicates an expected call of SecretsRemoved.
func (mr *MockCallbacksMockRecorder) SecretsRemoved(arg0, arg1 any) *MockCallbacksSecretsRemovedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretsRemoved", reflect.TypeOf((*MockCallbacks)(nil).SecretsRemoved), arg0, arg1)
	return &MockCallbacksSecretsRemovedCall{Call: call}
}

// MockCallbacksSecretsRemovedCall wrap *gomock.Call
type MockCallbacksSecretsRemovedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksSecretsRemovedCall) Return(arg0 error) *MockCallbacksSecretsRemovedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksSecretsRemovedCall) Do(f func(context.Context, []string) error) *MockCallbacksSecretsRemovedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksSecretsRemovedCall) DoAndReturn(f func(context.Context, []string) error) *MockCallbacksSecretsRemovedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCurrentCharm mocks base method.
func (m *MockCallbacks) SetCurrentCharm(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentCharm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentCharm indicates an expected call of SetCurrentCharm.
func (mr *MockCallbacksMockRecorder) SetCurrentCharm(arg0, arg1 any) *MockCallbacksSetCurrentCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentCharm", reflect.TypeOf((*MockCallbacks)(nil).SetCurrentCharm), arg0, arg1)
	return &MockCallbacksSetCurrentCharmCall{Call: call}
}

// MockCallbacksSetCurrentCharmCall wrap *gomock.Call
type MockCallbacksSetCurrentCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksSetCurrentCharmCall) Return(arg0 error) *MockCallbacksSetCurrentCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksSetCurrentCharmCall) Do(f func(context.Context, string) error) *MockCallbacksSetCurrentCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksSetCurrentCharmCall) DoAndReturn(f func(context.Context, string) error) *MockCallbacksSetCurrentCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetExecutingStatus mocks base method.
func (m *MockCallbacks) SetExecutingStatus(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExecutingStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExecutingStatus indicates an expected call of SetExecutingStatus.
func (mr *MockCallbacksMockRecorder) SetExecutingStatus(arg0, arg1 any) *MockCallbacksSetExecutingStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExecutingStatus", reflect.TypeOf((*MockCallbacks)(nil).SetExecutingStatus), arg0, arg1)
	return &MockCallbacksSetExecutingStatusCall{Call: call}
}

// MockCallbacksSetExecutingStatusCall wrap *gomock.Call
type MockCallbacksSetExecutingStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksSetExecutingStatusCall) Return(arg0 error) *MockCallbacksSetExecutingStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksSetExecutingStatusCall) Do(f func(context.Context, string) error) *MockCallbacksSetExecutingStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksSetExecutingStatusCall) DoAndReturn(f func(context.Context, string) error) *MockCallbacksSetExecutingStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetSecretRotated mocks base method.
func (m *MockCallbacks) SetSecretRotated(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecretRotated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSecretRotated indicates an expected call of SetSecretRotated.
func (mr *MockCallbacksMockRecorder) SetSecretRotated(arg0, arg1, arg2 any) *MockCallbacksSetSecretRotatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecretRotated", reflect.TypeOf((*MockCallbacks)(nil).SetSecretRotated), arg0, arg1, arg2)
	return &MockCallbacksSetSecretRotatedCall{Call: call}
}

// MockCallbacksSetSecretRotatedCall wrap *gomock.Call
type MockCallbacksSetSecretRotatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallbacksSetSecretRotatedCall) Return(arg0 error) *MockCallbacksSetSecretRotatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallbacksSetSecretRotatedCall) Do(f func(context.Context, string, int) error) *MockCallbacksSetSecretRotatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallbacksSetSecretRotatedCall) DoAndReturn(f func(context.Context, string, int) error) *MockCallbacksSetSecretRotatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
