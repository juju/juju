// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/relation (interfaces: UnitGetter)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/mock_unit_getter.go github.com/juju/juju/internal/worker/uniter/relation UnitGetter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/internal/worker/uniter/api"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockUnitGetter is a mock of UnitGetter interface.
type MockUnitGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUnitGetterMockRecorder
}

// MockUnitGetterMockRecorder is the mock recorder for MockUnitGetter.
type MockUnitGetterMockRecorder struct {
	mock *MockUnitGetter
}

// NewMockUnitGetter creates a new mock instance.
func NewMockUnitGetter(ctrl *gomock.Controller) *MockUnitGetter {
	mock := &MockUnitGetter{ctrl: ctrl}
	mock.recorder = &MockUnitGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitGetter) EXPECT() *MockUnitGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUnitGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// Unit mocks base method.
func (m *MockUnitGetter) Unit(arg0 context.Context, arg1 names.UnitTag) (api.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0, arg1)
	ret0, _ := ret[0].(api.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockUnitGetterMockRecorder) Unit(arg0, arg1 any) *MockUnitGetterUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockUnitGetter)(nil).Unit), arg0, arg1)
	return &MockUnitGetterUnitCall{Call: call}
}

// MockUnitGetterUnitCall wrap *gomock.Call
type MockUnitGetterUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitGetterUnitCall) Return(arg0 api.Unit, arg1 error) *MockUnitGetterUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitGetterUnitCall) Do(f func(context.Context, names.UnitTag) (api.Unit, error)) *MockUnitGetterUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitGetterUnitCall) DoAndReturn(f func(context.Context, names.UnitTag) (api.Unit, error)) *MockUnitGetterUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
