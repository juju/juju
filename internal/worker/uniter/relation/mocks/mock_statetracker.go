// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/relation (interfaces: RelationStateTracker)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/mock_statetracker.go github.com/juju/juju/internal/worker/uniter/relation RelationStateTracker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	life "github.com/juju/juju/core/life"
	hook "github.com/juju/juju/internal/worker/uniter/hook"
	relation "github.com/juju/juju/internal/worker/uniter/relation"
	remotestate "github.com/juju/juju/internal/worker/uniter/remotestate"
	context0 "github.com/juju/juju/internal/worker/uniter/runner/context"
	gomock "go.uber.org/mock/gomock"
)

// MockRelationStateTracker is a mock of RelationStateTracker interface.
type MockRelationStateTracker struct {
	ctrl     *gomock.Controller
	recorder *MockRelationStateTrackerMockRecorder
}

// MockRelationStateTrackerMockRecorder is the mock recorder for MockRelationStateTracker.
type MockRelationStateTrackerMockRecorder struct {
	mock *MockRelationStateTracker
}

// NewMockRelationStateTracker creates a new mock instance.
func NewMockRelationStateTracker(ctrl *gomock.Controller) *MockRelationStateTracker {
	mock := &MockRelationStateTracker{ctrl: ctrl}
	mock.recorder = &MockRelationStateTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationStateTracker) EXPECT() *MockRelationStateTrackerMockRecorder {
	return m.recorder
}

// CommitHook mocks base method.
func (m *MockRelationStateTracker) CommitHook(arg0 context.Context, arg1 hook.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitHook indicates an expected call of CommitHook.
func (mr *MockRelationStateTrackerMockRecorder) CommitHook(arg0, arg1 any) *MockRelationStateTrackerCommitHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitHook", reflect.TypeOf((*MockRelationStateTracker)(nil).CommitHook), arg0, arg1)
	return &MockRelationStateTrackerCommitHookCall{Call: call}
}

// MockRelationStateTrackerCommitHookCall wrap *gomock.Call
type MockRelationStateTrackerCommitHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerCommitHookCall) Return(arg0 error) *MockRelationStateTrackerCommitHookCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerCommitHookCall) Do(f func(context.Context, hook.Info) error) *MockRelationStateTrackerCommitHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerCommitHookCall) DoAndReturn(f func(context.Context, hook.Info) error) *MockRelationStateTrackerCommitHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInfo mocks base method.
func (m *MockRelationStateTracker) GetInfo() map[int]*context0.RelationInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(map[int]*context0.RelationInfo)
	return ret0
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockRelationStateTrackerMockRecorder) GetInfo() *MockRelationStateTrackerGetInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockRelationStateTracker)(nil).GetInfo))
	return &MockRelationStateTrackerGetInfoCall{Call: call}
}

// MockRelationStateTrackerGetInfoCall wrap *gomock.Call
type MockRelationStateTrackerGetInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerGetInfoCall) Return(arg0 map[int]*context0.RelationInfo) *MockRelationStateTrackerGetInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerGetInfoCall) Do(f func() map[int]*context0.RelationInfo) *MockRelationStateTrackerGetInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerGetInfoCall) DoAndReturn(f func() map[int]*context0.RelationInfo) *MockRelationStateTrackerGetInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasContainerScope mocks base method.
func (m *MockRelationStateTracker) HasContainerScope(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasContainerScope", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasContainerScope indicates an expected call of HasContainerScope.
func (mr *MockRelationStateTrackerMockRecorder) HasContainerScope(arg0 any) *MockRelationStateTrackerHasContainerScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasContainerScope", reflect.TypeOf((*MockRelationStateTracker)(nil).HasContainerScope), arg0)
	return &MockRelationStateTrackerHasContainerScopeCall{Call: call}
}

// MockRelationStateTrackerHasContainerScopeCall wrap *gomock.Call
type MockRelationStateTrackerHasContainerScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerHasContainerScopeCall) Return(arg0 bool, arg1 error) *MockRelationStateTrackerHasContainerScopeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerHasContainerScopeCall) Do(f func(int) (bool, error)) *MockRelationStateTrackerHasContainerScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerHasContainerScopeCall) DoAndReturn(f func(int) (bool, error)) *MockRelationStateTrackerHasContainerScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsImplicit mocks base method.
func (m *MockRelationStateTracker) IsImplicit(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImplicit", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsImplicit indicates an expected call of IsImplicit.
func (mr *MockRelationStateTrackerMockRecorder) IsImplicit(arg0 any) *MockRelationStateTrackerIsImplicitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImplicit", reflect.TypeOf((*MockRelationStateTracker)(nil).IsImplicit), arg0)
	return &MockRelationStateTrackerIsImplicitCall{Call: call}
}

// MockRelationStateTrackerIsImplicitCall wrap *gomock.Call
type MockRelationStateTrackerIsImplicitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerIsImplicitCall) Return(arg0 bool, arg1 error) *MockRelationStateTrackerIsImplicitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerIsImplicitCall) Do(f func(int) (bool, error)) *MockRelationStateTrackerIsImplicitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerIsImplicitCall) DoAndReturn(f func(int) (bool, error)) *MockRelationStateTrackerIsImplicitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsKnown mocks base method.
func (m *MockRelationStateTracker) IsKnown(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKnown", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKnown indicates an expected call of IsKnown.
func (mr *MockRelationStateTrackerMockRecorder) IsKnown(arg0 any) *MockRelationStateTrackerIsKnownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKnown", reflect.TypeOf((*MockRelationStateTracker)(nil).IsKnown), arg0)
	return &MockRelationStateTrackerIsKnownCall{Call: call}
}

// MockRelationStateTrackerIsKnownCall wrap *gomock.Call
type MockRelationStateTrackerIsKnownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerIsKnownCall) Return(arg0 bool) *MockRelationStateTrackerIsKnownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerIsKnownCall) Do(f func(int) bool) *MockRelationStateTrackerIsKnownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerIsKnownCall) DoAndReturn(f func(int) bool) *MockRelationStateTrackerIsKnownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsPeerRelation mocks base method.
func (m *MockRelationStateTracker) IsPeerRelation(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPeerRelation", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPeerRelation indicates an expected call of IsPeerRelation.
func (mr *MockRelationStateTrackerMockRecorder) IsPeerRelation(arg0 any) *MockRelationStateTrackerIsPeerRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPeerRelation", reflect.TypeOf((*MockRelationStateTracker)(nil).IsPeerRelation), arg0)
	return &MockRelationStateTrackerIsPeerRelationCall{Call: call}
}

// MockRelationStateTrackerIsPeerRelationCall wrap *gomock.Call
type MockRelationStateTrackerIsPeerRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerIsPeerRelationCall) Return(arg0 bool, arg1 error) *MockRelationStateTrackerIsPeerRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerIsPeerRelationCall) Do(f func(int) (bool, error)) *MockRelationStateTrackerIsPeerRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerIsPeerRelationCall) DoAndReturn(f func(int) (bool, error)) *MockRelationStateTrackerIsPeerRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocalUnitAndApplicationLife mocks base method.
func (m *MockRelationStateTracker) LocalUnitAndApplicationLife(arg0 context.Context) (life.Value, life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalUnitAndApplicationLife", arg0)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(life.Value)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LocalUnitAndApplicationLife indicates an expected call of LocalUnitAndApplicationLife.
func (mr *MockRelationStateTrackerMockRecorder) LocalUnitAndApplicationLife(arg0 any) *MockRelationStateTrackerLocalUnitAndApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalUnitAndApplicationLife", reflect.TypeOf((*MockRelationStateTracker)(nil).LocalUnitAndApplicationLife), arg0)
	return &MockRelationStateTrackerLocalUnitAndApplicationLifeCall{Call: call}
}

// MockRelationStateTrackerLocalUnitAndApplicationLifeCall wrap *gomock.Call
type MockRelationStateTrackerLocalUnitAndApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerLocalUnitAndApplicationLifeCall) Return(arg0, arg1 life.Value, arg2 error) *MockRelationStateTrackerLocalUnitAndApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerLocalUnitAndApplicationLifeCall) Do(f func(context.Context) (life.Value, life.Value, error)) *MockRelationStateTrackerLocalUnitAndApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerLocalUnitAndApplicationLifeCall) DoAndReturn(f func(context.Context) (life.Value, life.Value, error)) *MockRelationStateTrackerLocalUnitAndApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocalUnitName mocks base method.
func (m *MockRelationStateTracker) LocalUnitName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalUnitName")
	ret0, _ := ret[0].(string)
	return ret0
}

// LocalUnitName indicates an expected call of LocalUnitName.
func (mr *MockRelationStateTrackerMockRecorder) LocalUnitName() *MockRelationStateTrackerLocalUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalUnitName", reflect.TypeOf((*MockRelationStateTracker)(nil).LocalUnitName))
	return &MockRelationStateTrackerLocalUnitNameCall{Call: call}
}

// MockRelationStateTrackerLocalUnitNameCall wrap *gomock.Call
type MockRelationStateTrackerLocalUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerLocalUnitNameCall) Return(arg0 string) *MockRelationStateTrackerLocalUnitNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerLocalUnitNameCall) Do(f func() string) *MockRelationStateTrackerLocalUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerLocalUnitNameCall) DoAndReturn(f func() string) *MockRelationStateTrackerLocalUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockRelationStateTracker) Name(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockRelationStateTrackerMockRecorder) Name(arg0 any) *MockRelationStateTrackerNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRelationStateTracker)(nil).Name), arg0)
	return &MockRelationStateTrackerNameCall{Call: call}
}

// MockRelationStateTrackerNameCall wrap *gomock.Call
type MockRelationStateTrackerNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerNameCall) Return(arg0 string, arg1 error) *MockRelationStateTrackerNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerNameCall) Do(f func(int) (string, error)) *MockRelationStateTrackerNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerNameCall) DoAndReturn(f func(int) (string, error)) *MockRelationStateTrackerNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareHook mocks base method.
func (m *MockRelationStateTracker) PrepareHook(arg0 context.Context, arg1 hook.Info) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHook", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareHook indicates an expected call of PrepareHook.
func (mr *MockRelationStateTrackerMockRecorder) PrepareHook(arg0, arg1 any) *MockRelationStateTrackerPrepareHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHook", reflect.TypeOf((*MockRelationStateTracker)(nil).PrepareHook), arg0, arg1)
	return &MockRelationStateTrackerPrepareHookCall{Call: call}
}

// MockRelationStateTrackerPrepareHookCall wrap *gomock.Call
type MockRelationStateTrackerPrepareHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerPrepareHookCall) Return(arg0 string, arg1 error) *MockRelationStateTrackerPrepareHookCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerPrepareHookCall) Do(f func(context.Context, hook.Info) (string, error)) *MockRelationStateTrackerPrepareHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerPrepareHookCall) DoAndReturn(f func(context.Context, hook.Info) (string, error)) *MockRelationStateTrackerPrepareHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationCreated mocks base method.
func (m *MockRelationStateTracker) RelationCreated(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationCreated", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RelationCreated indicates an expected call of RelationCreated.
func (mr *MockRelationStateTrackerMockRecorder) RelationCreated(arg0 any) *MockRelationStateTrackerRelationCreatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationCreated", reflect.TypeOf((*MockRelationStateTracker)(nil).RelationCreated), arg0)
	return &MockRelationStateTrackerRelationCreatedCall{Call: call}
}

// MockRelationStateTrackerRelationCreatedCall wrap *gomock.Call
type MockRelationStateTrackerRelationCreatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerRelationCreatedCall) Return(arg0 bool) *MockRelationStateTrackerRelationCreatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerRelationCreatedCall) Do(f func(int) bool) *MockRelationStateTrackerRelationCreatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerRelationCreatedCall) DoAndReturn(f func(int) bool) *MockRelationStateTrackerRelationCreatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplication mocks base method.
func (m *MockRelationStateTracker) RemoteApplication(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplication", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteApplication indicates an expected call of RemoteApplication.
func (mr *MockRelationStateTrackerMockRecorder) RemoteApplication(arg0 any) *MockRelationStateTrackerRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplication", reflect.TypeOf((*MockRelationStateTracker)(nil).RemoteApplication), arg0)
	return &MockRelationStateTrackerRemoteApplicationCall{Call: call}
}

// MockRelationStateTrackerRemoteApplicationCall wrap *gomock.Call
type MockRelationStateTrackerRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerRemoteApplicationCall) Return(arg0 string) *MockRelationStateTrackerRemoteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerRemoteApplicationCall) Do(f func(int) string) *MockRelationStateTrackerRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerRemoteApplicationCall) DoAndReturn(f func(int) string) *MockRelationStateTrackerRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockRelationStateTracker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockRelationStateTrackerMockRecorder) Report() *MockRelationStateTrackerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockRelationStateTracker)(nil).Report))
	return &MockRelationStateTrackerReportCall{Call: call}
}

// MockRelationStateTrackerReportCall wrap *gomock.Call
type MockRelationStateTrackerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerReportCall) Return(arg0 map[string]any) *MockRelationStateTrackerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerReportCall) Do(f func() map[string]any) *MockRelationStateTrackerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerReportCall) DoAndReturn(f func() map[string]any) *MockRelationStateTrackerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// State mocks base method.
func (m *MockRelationStateTracker) State(arg0 int) (*relation.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", arg0)
	ret0, _ := ret[0].(*relation.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockRelationStateTrackerMockRecorder) State(arg0 any) *MockRelationStateTrackerStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockRelationStateTracker)(nil).State), arg0)
	return &MockRelationStateTrackerStateCall{Call: call}
}

// MockRelationStateTrackerStateCall wrap *gomock.Call
type MockRelationStateTrackerStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerStateCall) Return(arg0 *relation.State, arg1 error) *MockRelationStateTrackerStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerStateCall) Do(f func(int) (*relation.State, error)) *MockRelationStateTrackerStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerStateCall) DoAndReturn(f func(int) (*relation.State, error)) *MockRelationStateTrackerStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateFound mocks base method.
func (m *MockRelationStateTracker) StateFound(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateFound", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// StateFound indicates an expected call of StateFound.
func (mr *MockRelationStateTrackerMockRecorder) StateFound(arg0 any) *MockRelationStateTrackerStateFoundCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateFound", reflect.TypeOf((*MockRelationStateTracker)(nil).StateFound), arg0)
	return &MockRelationStateTrackerStateFoundCall{Call: call}
}

// MockRelationStateTrackerStateFoundCall wrap *gomock.Call
type MockRelationStateTrackerStateFoundCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerStateFoundCall) Return(arg0 bool) *MockRelationStateTrackerStateFoundCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerStateFoundCall) Do(f func(int) bool) *MockRelationStateTrackerStateFoundCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerStateFoundCall) DoAndReturn(f func(int) bool) *MockRelationStateTrackerStateFoundCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SynchronizeScopes mocks base method.
func (m *MockRelationStateTracker) SynchronizeScopes(arg0 context.Context, arg1 remotestate.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeScopes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SynchronizeScopes indicates an expected call of SynchronizeScopes.
func (mr *MockRelationStateTrackerMockRecorder) SynchronizeScopes(arg0, arg1 any) *MockRelationStateTrackerSynchronizeScopesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeScopes", reflect.TypeOf((*MockRelationStateTracker)(nil).SynchronizeScopes), arg0, arg1)
	return &MockRelationStateTrackerSynchronizeScopesCall{Call: call}
}

// MockRelationStateTrackerSynchronizeScopesCall wrap *gomock.Call
type MockRelationStateTrackerSynchronizeScopesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationStateTrackerSynchronizeScopesCall) Return(arg0 error) *MockRelationStateTrackerSynchronizeScopesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationStateTrackerSynchronizeScopesCall) Do(f func(context.Context, remotestate.Snapshot) error) *MockRelationStateTrackerSynchronizeScopesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationStateTrackerSynchronizeScopesCall) DoAndReturn(f func(context.Context, remotestate.Snapshot) error) *MockRelationStateTrackerSynchronizeScopesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
