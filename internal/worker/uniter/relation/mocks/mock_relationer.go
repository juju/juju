// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/relation (interfaces: Relationer)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/mock_relationer.go github.com/juju/juju/internal/worker/uniter/relation Relationer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/internal/worker/uniter/api"
	hook "github.com/juju/juju/internal/worker/uniter/hook"
	context0 "github.com/juju/juju/internal/worker/uniter/runner/context"
	gomock "go.uber.org/mock/gomock"
)

// MockRelationer is a mock of Relationer interface.
type MockRelationer struct {
	ctrl     *gomock.Controller
	recorder *MockRelationerMockRecorder
}

// MockRelationerMockRecorder is the mock recorder for MockRelationer.
type MockRelationerMockRecorder struct {
	mock *MockRelationer
}

// NewMockRelationer creates a new mock instance.
func NewMockRelationer(ctrl *gomock.Controller) *MockRelationer {
	mock := &MockRelationer{ctrl: ctrl}
	mock.recorder = &MockRelationerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationer) EXPECT() *MockRelationerMockRecorder {
	return m.recorder
}

// CommitHook mocks base method.
func (m *MockRelationer) CommitHook(arg0 context.Context, arg1 hook.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitHook indicates an expected call of CommitHook.
func (mr *MockRelationerMockRecorder) CommitHook(arg0, arg1 any) *MockRelationerCommitHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitHook", reflect.TypeOf((*MockRelationer)(nil).CommitHook), arg0, arg1)
	return &MockRelationerCommitHookCall{Call: call}
}

// MockRelationerCommitHookCall wrap *gomock.Call
type MockRelationerCommitHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerCommitHookCall) Return(arg0 error) *MockRelationerCommitHookCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerCommitHookCall) Do(f func(context.Context, hook.Info) error) *MockRelationerCommitHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerCommitHookCall) DoAndReturn(f func(context.Context, hook.Info) error) *MockRelationerCommitHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContextInfo mocks base method.
func (m *MockRelationer) ContextInfo() *context0.RelationInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContextInfo")
	ret0, _ := ret[0].(*context0.RelationInfo)
	return ret0
}

// ContextInfo indicates an expected call of ContextInfo.
func (mr *MockRelationerMockRecorder) ContextInfo() *MockRelationerContextInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContextInfo", reflect.TypeOf((*MockRelationer)(nil).ContextInfo))
	return &MockRelationerContextInfoCall{Call: call}
}

// MockRelationerContextInfoCall wrap *gomock.Call
type MockRelationerContextInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerContextInfoCall) Return(arg0 *context0.RelationInfo) *MockRelationerContextInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerContextInfoCall) Do(f func() *context0.RelationInfo) *MockRelationerContextInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerContextInfoCall) DoAndReturn(f func() *context0.RelationInfo) *MockRelationerContextInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsDying mocks base method.
func (m *MockRelationer) IsDying() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDying")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDying indicates an expected call of IsDying.
func (mr *MockRelationerMockRecorder) IsDying() *MockRelationerIsDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDying", reflect.TypeOf((*MockRelationer)(nil).IsDying))
	return &MockRelationerIsDyingCall{Call: call}
}

// MockRelationerIsDyingCall wrap *gomock.Call
type MockRelationerIsDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerIsDyingCall) Return(arg0 bool) *MockRelationerIsDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerIsDyingCall) Do(f func() bool) *MockRelationerIsDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerIsDyingCall) DoAndReturn(f func() bool) *MockRelationerIsDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsImplicit mocks base method.
func (m *MockRelationer) IsImplicit() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImplicit")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsImplicit indicates an expected call of IsImplicit.
func (mr *MockRelationerMockRecorder) IsImplicit() *MockRelationerIsImplicitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImplicit", reflect.TypeOf((*MockRelationer)(nil).IsImplicit))
	return &MockRelationerIsImplicitCall{Call: call}
}

// MockRelationerIsImplicitCall wrap *gomock.Call
type MockRelationerIsImplicitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerIsImplicitCall) Return(arg0 bool) *MockRelationerIsImplicitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerIsImplicitCall) Do(f func() bool) *MockRelationerIsImplicitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerIsImplicitCall) DoAndReturn(f func() bool) *MockRelationerIsImplicitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Join mocks base method.
func (m *MockRelationer) Join(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockRelationerMockRecorder) Join(arg0 any) *MockRelationerJoinCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockRelationer)(nil).Join), arg0)
	return &MockRelationerJoinCall{Call: call}
}

// MockRelationerJoinCall wrap *gomock.Call
type MockRelationerJoinCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerJoinCall) Return(arg0 error) *MockRelationerJoinCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerJoinCall) Do(f func(context.Context) error) *MockRelationerJoinCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerJoinCall) DoAndReturn(f func(context.Context) error) *MockRelationerJoinCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareHook mocks base method.
func (m *MockRelationer) PrepareHook(arg0 context.Context, arg1 hook.Info) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHook", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareHook indicates an expected call of PrepareHook.
func (mr *MockRelationerMockRecorder) PrepareHook(arg0, arg1 any) *MockRelationerPrepareHookCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHook", reflect.TypeOf((*MockRelationer)(nil).PrepareHook), arg0, arg1)
	return &MockRelationerPrepareHookCall{Call: call}
}

// MockRelationerPrepareHookCall wrap *gomock.Call
type MockRelationerPrepareHookCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerPrepareHookCall) Return(arg0 string, arg1 error) *MockRelationerPrepareHookCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerPrepareHookCall) Do(f func(context.Context, hook.Info) (string, error)) *MockRelationerPrepareHookCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerPrepareHookCall) DoAndReturn(f func(context.Context, hook.Info) (string, error)) *MockRelationerPrepareHookCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationUnit mocks base method.
func (m *MockRelationer) RelationUnit() api.RelationUnit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationUnit")
	ret0, _ := ret[0].(api.RelationUnit)
	return ret0
}

// RelationUnit indicates an expected call of RelationUnit.
func (mr *MockRelationerMockRecorder) RelationUnit() *MockRelationerRelationUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationUnit", reflect.TypeOf((*MockRelationer)(nil).RelationUnit))
	return &MockRelationerRelationUnitCall{Call: call}
}

// MockRelationerRelationUnitCall wrap *gomock.Call
type MockRelationerRelationUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerRelationUnitCall) Return(arg0 api.RelationUnit) *MockRelationerRelationUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerRelationUnitCall) Do(f func() api.RelationUnit) *MockRelationerRelationUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerRelationUnitCall) DoAndReturn(f func() api.RelationUnit) *MockRelationerRelationUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetDying mocks base method.
func (m *MockRelationer) SetDying(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDying", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDying indicates an expected call of SetDying.
func (mr *MockRelationerMockRecorder) SetDying(arg0 any) *MockRelationerSetDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDying", reflect.TypeOf((*MockRelationer)(nil).SetDying), arg0)
	return &MockRelationerSetDyingCall{Call: call}
}

// MockRelationerSetDyingCall wrap *gomock.Call
type MockRelationerSetDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationerSetDyingCall) Return(arg0 error) *MockRelationerSetDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationerSetDyingCall) Do(f func(context.Context) error) *MockRelationerSetDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationerSetDyingCall) DoAndReturn(f func(context.Context) error) *MockRelationerSetDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
