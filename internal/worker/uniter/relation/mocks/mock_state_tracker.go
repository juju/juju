// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/relation (interfaces: StateTrackerClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/mock_state_tracker.go github.com/juju/juju/internal/worker/uniter/relation StateTrackerClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/internal/worker/uniter/api"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockStateTrackerClient is a mock of StateTrackerClient interface.
type MockStateTrackerClient struct {
	ctrl     *gomock.Controller
	recorder *MockStateTrackerClientMockRecorder
}

// MockStateTrackerClientMockRecorder is the mock recorder for MockStateTrackerClient.
type MockStateTrackerClientMockRecorder struct {
	mock *MockStateTrackerClient
}

// NewMockStateTrackerClient creates a new mock instance.
func NewMockStateTrackerClient(ctrl *gomock.Controller) *MockStateTrackerClient {
	mock := &MockStateTrackerClient{ctrl: ctrl}
	mock.recorder = &MockStateTrackerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateTrackerClient) EXPECT() *MockStateTrackerClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStateTrackerClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Relation mocks base method.
func (m *MockStateTrackerClient) Relation(arg0 context.Context, arg1 names.RelationTag) (api.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relation", arg0, arg1)
	ret0, _ := ret[0].(api.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relation indicates an expected call of Relation.
func (mr *MockStateTrackerClientMockRecorder) Relation(arg0, arg1 any) *MockStateTrackerClientRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockStateTrackerClient)(nil).Relation), arg0, arg1)
	return &MockStateTrackerClientRelationCall{Call: call}
}

// MockStateTrackerClientRelationCall wrap *gomock.Call
type MockStateTrackerClientRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateTrackerClientRelationCall) Return(arg0 api.Relation, arg1 error) *MockStateTrackerClientRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateTrackerClientRelationCall) Do(f func(context.Context, names.RelationTag) (api.Relation, error)) *MockStateTrackerClientRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateTrackerClientRelationCall) DoAndReturn(f func(context.Context, names.RelationTag) (api.Relation, error)) *MockStateTrackerClientRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationById mocks base method.
func (m *MockStateTrackerClient) RelationById(arg0 context.Context, arg1 int) (api.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationById", arg0, arg1)
	ret0, _ := ret[0].(api.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationById indicates an expected call of RelationById.
func (mr *MockStateTrackerClientMockRecorder) RelationById(arg0, arg1 any) *MockStateTrackerClientRelationByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationById", reflect.TypeOf((*MockStateTrackerClient)(nil).RelationById), arg0, arg1)
	return &MockStateTrackerClientRelationByIdCall{Call: call}
}

// MockStateTrackerClientRelationByIdCall wrap *gomock.Call
type MockStateTrackerClientRelationByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateTrackerClientRelationByIdCall) Return(arg0 api.Relation, arg1 error) *MockStateTrackerClientRelationByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateTrackerClientRelationByIdCall) Do(f func(context.Context, int) (api.Relation, error)) *MockStateTrackerClientRelationByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateTrackerClientRelationByIdCall) DoAndReturn(f func(context.Context, int) (api.Relation, error)) *MockStateTrackerClientRelationByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockStateTrackerClient) Unit(arg0 context.Context, arg1 names.UnitTag) (api.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0, arg1)
	ret0, _ := ret[0].(api.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockStateTrackerClientMockRecorder) Unit(arg0, arg1 any) *MockStateTrackerClientUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockStateTrackerClient)(nil).Unit), arg0, arg1)
	return &MockStateTrackerClientUnitCall{Call: call}
}

// MockStateTrackerClientUnitCall wrap *gomock.Call
type MockStateTrackerClientUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateTrackerClientUnitCall) Return(arg0 api.Unit, arg1 error) *MockStateTrackerClientUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateTrackerClientUnitCall) Do(f func(context.Context, names.UnitTag) (api.Unit, error)) *MockStateTrackerClientUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateTrackerClientUnitCall) DoAndReturn(f func(context.Context, names.UnitTag) (api.Unit, error)) *MockStateTrackerClientUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
