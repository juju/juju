// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/firewaller (interfaces: FirewallerAPI,RemoteRelationsAPI,CrossModelFirewallerFacadeCloser,EnvironFirewaller,EnvironModelFirewaller,EnvironInstances,EnvironInstance)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/facade_mocks.go github.com/juju/juju/internal/worker/firewaller FirewallerAPI,RemoteRelationsAPI,CrossModelFirewallerFacadeCloser,EnvironFirewaller,EnvironModelFirewaller,EnvironInstances,EnvironInstance
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/api"
	firewaller "github.com/juju/juju/api/controller/firewaller"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	firewall "github.com/juju/juju/core/network/firewall"
	relation "github.com/juju/juju/core/relation"
	watcher "github.com/juju/juju/core/watcher"
	config "github.com/juju/juju/environs/config"
	envcontext "github.com/juju/juju/environs/envcontext"
	instances "github.com/juju/juju/environs/instances"
	firewaller0 "github.com/juju/juju/internal/worker/firewaller"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockFirewallerAPI is a mock of FirewallerAPI interface.
type MockFirewallerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallerAPIMockRecorder
}

// MockFirewallerAPIMockRecorder is the mock recorder for MockFirewallerAPI.
type MockFirewallerAPIMockRecorder struct {
	mock *MockFirewallerAPI
}

// NewMockFirewallerAPI creates a new mock instance.
func NewMockFirewallerAPI(ctrl *gomock.Controller) *MockFirewallerAPI {
	mock := &MockFirewallerAPI{ctrl: ctrl}
	mock.recorder = &MockFirewallerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewallerAPI) EXPECT() *MockFirewallerAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFirewallerAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// AllSpaceInfos mocks base method.
func (m *MockFirewallerAPI) AllSpaceInfos(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSpaceInfos", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSpaceInfos indicates an expected call of AllSpaceInfos.
func (mr *MockFirewallerAPIMockRecorder) AllSpaceInfos(arg0 any) *MockFirewallerAPIAllSpaceInfosCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSpaceInfos", reflect.TypeOf((*MockFirewallerAPI)(nil).AllSpaceInfos), arg0)
	return &MockFirewallerAPIAllSpaceInfosCall{Call: call}
}

// MockFirewallerAPIAllSpaceInfosCall wrap *gomock.Call
type MockFirewallerAPIAllSpaceInfosCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIAllSpaceInfosCall) Return(arg0 network.SpaceInfos, arg1 error) *MockFirewallerAPIAllSpaceInfosCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIAllSpaceInfosCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockFirewallerAPIAllSpaceInfosCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIAllSpaceInfosCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockFirewallerAPIAllSpaceInfosCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerAPIInfoForModel mocks base method.
func (m *MockFirewallerAPI) ControllerAPIInfoForModel(arg0 context.Context, arg1 string) (*api.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAPIInfoForModel", arg0, arg1)
	ret0, _ := ret[0].(*api.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerAPIInfoForModel indicates an expected call of ControllerAPIInfoForModel.
func (mr *MockFirewallerAPIMockRecorder) ControllerAPIInfoForModel(arg0, arg1 any) *MockFirewallerAPIControllerAPIInfoForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAPIInfoForModel", reflect.TypeOf((*MockFirewallerAPI)(nil).ControllerAPIInfoForModel), arg0, arg1)
	return &MockFirewallerAPIControllerAPIInfoForModelCall{Call: call}
}

// MockFirewallerAPIControllerAPIInfoForModelCall wrap *gomock.Call
type MockFirewallerAPIControllerAPIInfoForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIControllerAPIInfoForModelCall) Return(arg0 *api.Info, arg1 error) *MockFirewallerAPIControllerAPIInfoForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIControllerAPIInfoForModelCall) Do(f func(context.Context, string) (*api.Info, error)) *MockFirewallerAPIControllerAPIInfoForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIControllerAPIInfoForModelCall) DoAndReturn(f func(context.Context, string) (*api.Info, error)) *MockFirewallerAPIControllerAPIInfoForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MacaroonForRelation mocks base method.
func (m *MockFirewallerAPI) MacaroonForRelation(arg0 context.Context, arg1 string) (*macaroon.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MacaroonForRelation", arg0, arg1)
	ret0, _ := ret[0].(*macaroon.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MacaroonForRelation indicates an expected call of MacaroonForRelation.
func (mr *MockFirewallerAPIMockRecorder) MacaroonForRelation(arg0, arg1 any) *MockFirewallerAPIMacaroonForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MacaroonForRelation", reflect.TypeOf((*MockFirewallerAPI)(nil).MacaroonForRelation), arg0, arg1)
	return &MockFirewallerAPIMacaroonForRelationCall{Call: call}
}

// MockFirewallerAPIMacaroonForRelationCall wrap *gomock.Call
type MockFirewallerAPIMacaroonForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIMacaroonForRelationCall) Return(arg0 *macaroon.Macaroon, arg1 error) *MockFirewallerAPIMacaroonForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIMacaroonForRelationCall) Do(f func(context.Context, string) (*macaroon.Macaroon, error)) *MockFirewallerAPIMacaroonForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIMacaroonForRelationCall) DoAndReturn(f func(context.Context, string) (*macaroon.Macaroon, error)) *MockFirewallerAPIMacaroonForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockFirewallerAPI) Machine(arg0 context.Context, arg1 names.MachineTag) (firewaller0.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0, arg1)
	ret0, _ := ret[0].(firewaller0.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockFirewallerAPIMockRecorder) Machine(arg0, arg1 any) *MockFirewallerAPIMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockFirewallerAPI)(nil).Machine), arg0, arg1)
	return &MockFirewallerAPIMachineCall{Call: call}
}

// MockFirewallerAPIMachineCall wrap *gomock.Call
type MockFirewallerAPIMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIMachineCall) Return(arg0 firewaller0.Machine, arg1 error) *MockFirewallerAPIMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIMachineCall) Do(f func(context.Context, names.MachineTag) (firewaller0.Machine, error)) *MockFirewallerAPIMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIMachineCall) DoAndReturn(f func(context.Context, names.MachineTag) (firewaller0.Machine, error)) *MockFirewallerAPIMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelConfig mocks base method.
func (m *MockFirewallerAPI) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockFirewallerAPIMockRecorder) ModelConfig(arg0 any) *MockFirewallerAPIModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockFirewallerAPI)(nil).ModelConfig), arg0)
	return &MockFirewallerAPIModelConfigCall{Call: call}
}

// MockFirewallerAPIModelConfigCall wrap *gomock.Call
type MockFirewallerAPIModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockFirewallerAPIModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockFirewallerAPIModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockFirewallerAPIModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelFirewallRules mocks base method.
func (m *MockFirewallerAPI) ModelFirewallRules(arg0 context.Context) (firewall.IngressRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelFirewallRules", arg0)
	ret0, _ := ret[0].(firewall.IngressRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelFirewallRules indicates an expected call of ModelFirewallRules.
func (mr *MockFirewallerAPIMockRecorder) ModelFirewallRules(arg0 any) *MockFirewallerAPIModelFirewallRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelFirewallRules", reflect.TypeOf((*MockFirewallerAPI)(nil).ModelFirewallRules), arg0)
	return &MockFirewallerAPIModelFirewallRulesCall{Call: call}
}

// MockFirewallerAPIModelFirewallRulesCall wrap *gomock.Call
type MockFirewallerAPIModelFirewallRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIModelFirewallRulesCall) Return(arg0 firewall.IngressRules, arg1 error) *MockFirewallerAPIModelFirewallRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIModelFirewallRulesCall) Do(f func(context.Context) (firewall.IngressRules, error)) *MockFirewallerAPIModelFirewallRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIModelFirewallRulesCall) DoAndReturn(f func(context.Context) (firewall.IngressRules, error)) *MockFirewallerAPIModelFirewallRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Relation mocks base method.
func (m *MockFirewallerAPI) Relation(arg0 context.Context, arg1 names.RelationTag) (*firewaller.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relation", arg0, arg1)
	ret0, _ := ret[0].(*firewaller.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relation indicates an expected call of Relation.
func (mr *MockFirewallerAPIMockRecorder) Relation(arg0, arg1 any) *MockFirewallerAPIRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockFirewallerAPI)(nil).Relation), arg0, arg1)
	return &MockFirewallerAPIRelationCall{Call: call}
}

// MockFirewallerAPIRelationCall wrap *gomock.Call
type MockFirewallerAPIRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIRelationCall) Return(arg0 *firewaller.Relation, arg1 error) *MockFirewallerAPIRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIRelationCall) Do(f func(context.Context, names.RelationTag) (*firewaller.Relation, error)) *MockFirewallerAPIRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIRelationCall) DoAndReturn(f func(context.Context, names.RelationTag) (*firewaller.Relation, error)) *MockFirewallerAPIRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationStatus mocks base method.
func (m *MockFirewallerAPI) SetRelationStatus(arg0 context.Context, arg1 string, arg2 relation.Status, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationStatus indicates an expected call of SetRelationStatus.
func (mr *MockFirewallerAPIMockRecorder) SetRelationStatus(arg0, arg1, arg2, arg3 any) *MockFirewallerAPISetRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationStatus", reflect.TypeOf((*MockFirewallerAPI)(nil).SetRelationStatus), arg0, arg1, arg2, arg3)
	return &MockFirewallerAPISetRelationStatusCall{Call: call}
}

// MockFirewallerAPISetRelationStatusCall wrap *gomock.Call
type MockFirewallerAPISetRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPISetRelationStatusCall) Return(arg0 error) *MockFirewallerAPISetRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPISetRelationStatusCall) Do(f func(context.Context, string, relation.Status, string) error) *MockFirewallerAPISetRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPISetRelationStatusCall) DoAndReturn(f func(context.Context, string, relation.Status, string) error) *MockFirewallerAPISetRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockFirewallerAPI) Unit(arg0 context.Context, arg1 names.UnitTag) (firewaller0.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0, arg1)
	ret0, _ := ret[0].(firewaller0.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockFirewallerAPIMockRecorder) Unit(arg0, arg1 any) *MockFirewallerAPIUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockFirewallerAPI)(nil).Unit), arg0, arg1)
	return &MockFirewallerAPIUnitCall{Call: call}
}

// MockFirewallerAPIUnitCall wrap *gomock.Call
type MockFirewallerAPIUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIUnitCall) Return(arg0 firewaller0.Unit, arg1 error) *MockFirewallerAPIUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIUnitCall) Do(f func(context.Context, names.UnitTag) (firewaller0.Unit, error)) *MockFirewallerAPIUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIUnitCall) DoAndReturn(f func(context.Context, names.UnitTag) (firewaller0.Unit, error)) *MockFirewallerAPIUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchEgressAddressesForRelation mocks base method.
func (m *MockFirewallerAPI) WatchEgressAddressesForRelation(arg0 context.Context, arg1 names.RelationTag) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchEgressAddressesForRelation", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEgressAddressesForRelation indicates an expected call of WatchEgressAddressesForRelation.
func (mr *MockFirewallerAPIMockRecorder) WatchEgressAddressesForRelation(arg0, arg1 any) *MockFirewallerAPIWatchEgressAddressesForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEgressAddressesForRelation", reflect.TypeOf((*MockFirewallerAPI)(nil).WatchEgressAddressesForRelation), arg0, arg1)
	return &MockFirewallerAPIWatchEgressAddressesForRelationCall{Call: call}
}

// MockFirewallerAPIWatchEgressAddressesForRelationCall wrap *gomock.Call
type MockFirewallerAPIWatchEgressAddressesForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIWatchEgressAddressesForRelationCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockFirewallerAPIWatchEgressAddressesForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIWatchEgressAddressesForRelationCall) Do(f func(context.Context, names.RelationTag) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchEgressAddressesForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIWatchEgressAddressesForRelationCall) DoAndReturn(f func(context.Context, names.RelationTag) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchEgressAddressesForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchIngressAddressesForRelation mocks base method.
func (m *MockFirewallerAPI) WatchIngressAddressesForRelation(arg0 context.Context, arg1 names.RelationTag) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchIngressAddressesForRelation", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchIngressAddressesForRelation indicates an expected call of WatchIngressAddressesForRelation.
func (mr *MockFirewallerAPIMockRecorder) WatchIngressAddressesForRelation(arg0, arg1 any) *MockFirewallerAPIWatchIngressAddressesForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchIngressAddressesForRelation", reflect.TypeOf((*MockFirewallerAPI)(nil).WatchIngressAddressesForRelation), arg0, arg1)
	return &MockFirewallerAPIWatchIngressAddressesForRelationCall{Call: call}
}

// MockFirewallerAPIWatchIngressAddressesForRelationCall wrap *gomock.Call
type MockFirewallerAPIWatchIngressAddressesForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIWatchIngressAddressesForRelationCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockFirewallerAPIWatchIngressAddressesForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIWatchIngressAddressesForRelationCall) Do(f func(context.Context, names.RelationTag) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchIngressAddressesForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIWatchIngressAddressesForRelationCall) DoAndReturn(f func(context.Context, names.RelationTag) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchIngressAddressesForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelFirewallRules mocks base method.
func (m *MockFirewallerAPI) WatchModelFirewallRules(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelFirewallRules", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelFirewallRules indicates an expected call of WatchModelFirewallRules.
func (mr *MockFirewallerAPIMockRecorder) WatchModelFirewallRules(arg0 any) *MockFirewallerAPIWatchModelFirewallRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelFirewallRules", reflect.TypeOf((*MockFirewallerAPI)(nil).WatchModelFirewallRules), arg0)
	return &MockFirewallerAPIWatchModelFirewallRulesCall{Call: call}
}

// MockFirewallerAPIWatchModelFirewallRulesCall wrap *gomock.Call
type MockFirewallerAPIWatchModelFirewallRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIWatchModelFirewallRulesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockFirewallerAPIWatchModelFirewallRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIWatchModelFirewallRulesCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockFirewallerAPIWatchModelFirewallRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIWatchModelFirewallRulesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockFirewallerAPIWatchModelFirewallRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelMachines mocks base method.
func (m *MockFirewallerAPI) WatchModelMachines(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelMachines", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelMachines indicates an expected call of WatchModelMachines.
func (mr *MockFirewallerAPIMockRecorder) WatchModelMachines(arg0 any) *MockFirewallerAPIWatchModelMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelMachines", reflect.TypeOf((*MockFirewallerAPI)(nil).WatchModelMachines), arg0)
	return &MockFirewallerAPIWatchModelMachinesCall{Call: call}
}

// MockFirewallerAPIWatchModelMachinesCall wrap *gomock.Call
type MockFirewallerAPIWatchModelMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIWatchModelMachinesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockFirewallerAPIWatchModelMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIWatchModelMachinesCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchModelMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIWatchModelMachinesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchModelMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchSubnets mocks base method.
func (m *MockFirewallerAPI) WatchSubnets(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSubnets", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSubnets indicates an expected call of WatchSubnets.
func (mr *MockFirewallerAPIMockRecorder) WatchSubnets(arg0 any) *MockFirewallerAPIWatchSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSubnets", reflect.TypeOf((*MockFirewallerAPI)(nil).WatchSubnets), arg0)
	return &MockFirewallerAPIWatchSubnetsCall{Call: call}
}

// MockFirewallerAPIWatchSubnetsCall wrap *gomock.Call
type MockFirewallerAPIWatchSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerAPIWatchSubnetsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockFirewallerAPIWatchSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerAPIWatchSubnetsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerAPIWatchSubnetsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockFirewallerAPIWatchSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteRelationsAPI is a mock of RemoteRelationsAPI interface.
type MockRemoteRelationsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteRelationsAPIMockRecorder
}

// MockRemoteRelationsAPIMockRecorder is the mock recorder for MockRemoteRelationsAPI.
type MockRemoteRelationsAPIMockRecorder struct {
	mock *MockRemoteRelationsAPI
}

// NewMockRemoteRelationsAPI creates a new mock instance.
func NewMockRemoteRelationsAPI(ctrl *gomock.Controller) *MockRemoteRelationsAPI {
	mock := &MockRemoteRelationsAPI{ctrl: ctrl}
	mock.recorder = &MockRemoteRelationsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteRelationsAPI) EXPECT() *MockRemoteRelationsAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRemoteRelationsAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetToken mocks base method.
func (m *MockRemoteRelationsAPI) GetToken(arg0 context.Context, arg1 names.Tag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockRemoteRelationsAPIMockRecorder) GetToken(arg0, arg1 any) *MockRemoteRelationsAPIGetTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockRemoteRelationsAPI)(nil).GetToken), arg0, arg1)
	return &MockRemoteRelationsAPIGetTokenCall{Call: call}
}

// MockRemoteRelationsAPIGetTokenCall wrap *gomock.Call
type MockRemoteRelationsAPIGetTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteRelationsAPIGetTokenCall) Return(arg0 string, arg1 error) *MockRemoteRelationsAPIGetTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteRelationsAPIGetTokenCall) Do(f func(context.Context, names.Tag) (string, error)) *MockRemoteRelationsAPIGetTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteRelationsAPIGetTokenCall) DoAndReturn(f func(context.Context, names.Tag) (string, error)) *MockRemoteRelationsAPIGetTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Relations mocks base method.
func (m *MockRemoteRelationsAPI) Relations(arg0 context.Context, arg1 []string) ([]params.RemoteRelationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relations", arg0, arg1)
	ret0, _ := ret[0].([]params.RemoteRelationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relations indicates an expected call of Relations.
func (mr *MockRemoteRelationsAPIMockRecorder) Relations(arg0, arg1 any) *MockRemoteRelationsAPIRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relations", reflect.TypeOf((*MockRemoteRelationsAPI)(nil).Relations), arg0, arg1)
	return &MockRemoteRelationsAPIRelationsCall{Call: call}
}

// MockRemoteRelationsAPIRelationsCall wrap *gomock.Call
type MockRemoteRelationsAPIRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteRelationsAPIRelationsCall) Return(arg0 []params.RemoteRelationResult, arg1 error) *MockRemoteRelationsAPIRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteRelationsAPIRelationsCall) Do(f func(context.Context, []string) ([]params.RemoteRelationResult, error)) *MockRemoteRelationsAPIRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteRelationsAPIRelationsCall) DoAndReturn(f func(context.Context, []string) ([]params.RemoteRelationResult, error)) *MockRemoteRelationsAPIRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplications mocks base method.
func (m *MockRemoteRelationsAPI) RemoteApplications(arg0 context.Context, arg1 []string) ([]params.RemoteApplicationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplications", arg0, arg1)
	ret0, _ := ret[0].([]params.RemoteApplicationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteApplications indicates an expected call of RemoteApplications.
func (mr *MockRemoteRelationsAPIMockRecorder) RemoteApplications(arg0, arg1 any) *MockRemoteRelationsAPIRemoteApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplications", reflect.TypeOf((*MockRemoteRelationsAPI)(nil).RemoteApplications), arg0, arg1)
	return &MockRemoteRelationsAPIRemoteApplicationsCall{Call: call}
}

// MockRemoteRelationsAPIRemoteApplicationsCall wrap *gomock.Call
type MockRemoteRelationsAPIRemoteApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteRelationsAPIRemoteApplicationsCall) Return(arg0 []params.RemoteApplicationResult, arg1 error) *MockRemoteRelationsAPIRemoteApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteRelationsAPIRemoteApplicationsCall) Do(f func(context.Context, []string) ([]params.RemoteApplicationResult, error)) *MockRemoteRelationsAPIRemoteApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteRelationsAPIRemoteApplicationsCall) DoAndReturn(f func(context.Context, []string) ([]params.RemoteApplicationResult, error)) *MockRemoteRelationsAPIRemoteApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRemoteRelations mocks base method.
func (m *MockRemoteRelationsAPI) WatchRemoteRelations(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemoteRelations", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemoteRelations indicates an expected call of WatchRemoteRelations.
func (mr *MockRemoteRelationsAPIMockRecorder) WatchRemoteRelations(arg0 any) *MockRemoteRelationsAPIWatchRemoteRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteRelations", reflect.TypeOf((*MockRemoteRelationsAPI)(nil).WatchRemoteRelations), arg0)
	return &MockRemoteRelationsAPIWatchRemoteRelationsCall{Call: call}
}

// MockRemoteRelationsAPIWatchRemoteRelationsCall wrap *gomock.Call
type MockRemoteRelationsAPIWatchRemoteRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteRelationsAPIWatchRemoteRelationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockRemoteRelationsAPIWatchRemoteRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteRelationsAPIWatchRemoteRelationsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockRemoteRelationsAPIWatchRemoteRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteRelationsAPIWatchRemoteRelationsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockRemoteRelationsAPIWatchRemoteRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelFirewallerFacadeCloser is a mock of CrossModelFirewallerFacadeCloser interface.
type MockCrossModelFirewallerFacadeCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelFirewallerFacadeCloserMockRecorder
}

// MockCrossModelFirewallerFacadeCloserMockRecorder is the mock recorder for MockCrossModelFirewallerFacadeCloser.
type MockCrossModelFirewallerFacadeCloserMockRecorder struct {
	mock *MockCrossModelFirewallerFacadeCloser
}

// NewMockCrossModelFirewallerFacadeCloser creates a new mock instance.
func NewMockCrossModelFirewallerFacadeCloser(ctrl *gomock.Controller) *MockCrossModelFirewallerFacadeCloser {
	mock := &MockCrossModelFirewallerFacadeCloser{ctrl: ctrl}
	mock.recorder = &MockCrossModelFirewallerFacadeCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelFirewallerFacadeCloser) EXPECT() *MockCrossModelFirewallerFacadeCloserMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCrossModelFirewallerFacadeCloser) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockCrossModelFirewallerFacadeCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCrossModelFirewallerFacadeCloserMockRecorder) Close() *MockCrossModelFirewallerFacadeCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCrossModelFirewallerFacadeCloser)(nil).Close))
	return &MockCrossModelFirewallerFacadeCloserCloseCall{Call: call}
}

// MockCrossModelFirewallerFacadeCloserCloseCall wrap *gomock.Call
type MockCrossModelFirewallerFacadeCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelFirewallerFacadeCloserCloseCall) Return(arg0 error) *MockCrossModelFirewallerFacadeCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelFirewallerFacadeCloserCloseCall) Do(f func() error) *MockCrossModelFirewallerFacadeCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelFirewallerFacadeCloserCloseCall) DoAndReturn(f func() error) *MockCrossModelFirewallerFacadeCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublishIngressNetworkChange mocks base method.
func (m *MockCrossModelFirewallerFacadeCloser) PublishIngressNetworkChange(arg0 context.Context, arg1 params.IngressNetworksChangeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishIngressNetworkChange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishIngressNetworkChange indicates an expected call of PublishIngressNetworkChange.
func (mr *MockCrossModelFirewallerFacadeCloserMockRecorder) PublishIngressNetworkChange(arg0, arg1 any) *MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishIngressNetworkChange", reflect.TypeOf((*MockCrossModelFirewallerFacadeCloser)(nil).PublishIngressNetworkChange), arg0, arg1)
	return &MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall{Call: call}
}

// MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall wrap *gomock.Call
type MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall) Return(arg0 error) *MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall) Do(f func(context.Context, params.IngressNetworksChangeEvent) error) *MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall) DoAndReturn(f func(context.Context, params.IngressNetworksChangeEvent) error) *MockCrossModelFirewallerFacadeCloserPublishIngressNetworkChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchEgressAddressesForRelation mocks base method.
func (m *MockCrossModelFirewallerFacadeCloser) WatchEgressAddressesForRelation(arg0 context.Context, arg1 params.RemoteEntityArg) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchEgressAddressesForRelation", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEgressAddressesForRelation indicates an expected call of WatchEgressAddressesForRelation.
func (mr *MockCrossModelFirewallerFacadeCloserMockRecorder) WatchEgressAddressesForRelation(arg0, arg1 any) *MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEgressAddressesForRelation", reflect.TypeOf((*MockCrossModelFirewallerFacadeCloser)(nil).WatchEgressAddressesForRelation), arg0, arg1)
	return &MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall{Call: call}
}

// MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall wrap *gomock.Call
type MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall) Do(f func(context.Context, params.RemoteEntityArg) (watcher.Watcher[[]string], error)) *MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall) DoAndReturn(f func(context.Context, params.RemoteEntityArg) (watcher.Watcher[[]string], error)) *MockCrossModelFirewallerFacadeCloserWatchEgressAddressesForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEnvironFirewaller is a mock of EnvironFirewaller interface.
type MockEnvironFirewaller struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironFirewallerMockRecorder
}

// MockEnvironFirewallerMockRecorder is the mock recorder for MockEnvironFirewaller.
type MockEnvironFirewallerMockRecorder struct {
	mock *MockEnvironFirewaller
}

// NewMockEnvironFirewaller creates a new mock instance.
func NewMockEnvironFirewaller(ctrl *gomock.Controller) *MockEnvironFirewaller {
	mock := &MockEnvironFirewaller{ctrl: ctrl}
	mock.recorder = &MockEnvironFirewallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironFirewaller) EXPECT() *MockEnvironFirewallerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnvironFirewaller) ISGOMOCK() struct{} {
	return struct{}{}
}

// ClosePorts mocks base method.
func (m *MockEnvironFirewaller) ClosePorts(arg0 envcontext.ProviderCallContext, arg1 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePorts indicates an expected call of ClosePorts.
func (mr *MockEnvironFirewallerMockRecorder) ClosePorts(arg0, arg1 any) *MockEnvironFirewallerClosePortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePorts", reflect.TypeOf((*MockEnvironFirewaller)(nil).ClosePorts), arg0, arg1)
	return &MockEnvironFirewallerClosePortsCall{Call: call}
}

// MockEnvironFirewallerClosePortsCall wrap *gomock.Call
type MockEnvironFirewallerClosePortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironFirewallerClosePortsCall) Return(arg0 error) *MockEnvironFirewallerClosePortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironFirewallerClosePortsCall) Do(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironFirewallerClosePortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironFirewallerClosePortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironFirewallerClosePortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IngressRules mocks base method.
func (m *MockEnvironFirewaller) IngressRules(arg0 envcontext.ProviderCallContext) (firewall.IngressRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngressRules", arg0)
	ret0, _ := ret[0].(firewall.IngressRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngressRules indicates an expected call of IngressRules.
func (mr *MockEnvironFirewallerMockRecorder) IngressRules(arg0 any) *MockEnvironFirewallerIngressRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngressRules", reflect.TypeOf((*MockEnvironFirewaller)(nil).IngressRules), arg0)
	return &MockEnvironFirewallerIngressRulesCall{Call: call}
}

// MockEnvironFirewallerIngressRulesCall wrap *gomock.Call
type MockEnvironFirewallerIngressRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironFirewallerIngressRulesCall) Return(arg0 firewall.IngressRules, arg1 error) *MockEnvironFirewallerIngressRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironFirewallerIngressRulesCall) Do(f func(envcontext.ProviderCallContext) (firewall.IngressRules, error)) *MockEnvironFirewallerIngressRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironFirewallerIngressRulesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (firewall.IngressRules, error)) *MockEnvironFirewallerIngressRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenPorts mocks base method.
func (m *MockEnvironFirewaller) OpenPorts(arg0 envcontext.ProviderCallContext, arg1 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenPorts indicates an expected call of OpenPorts.
func (mr *MockEnvironFirewallerMockRecorder) OpenPorts(arg0, arg1 any) *MockEnvironFirewallerOpenPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPorts", reflect.TypeOf((*MockEnvironFirewaller)(nil).OpenPorts), arg0, arg1)
	return &MockEnvironFirewallerOpenPortsCall{Call: call}
}

// MockEnvironFirewallerOpenPortsCall wrap *gomock.Call
type MockEnvironFirewallerOpenPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironFirewallerOpenPortsCall) Return(arg0 error) *MockEnvironFirewallerOpenPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironFirewallerOpenPortsCall) Do(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironFirewallerOpenPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironFirewallerOpenPortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironFirewallerOpenPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEnvironModelFirewaller is a mock of EnvironModelFirewaller interface.
type MockEnvironModelFirewaller struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironModelFirewallerMockRecorder
}

// MockEnvironModelFirewallerMockRecorder is the mock recorder for MockEnvironModelFirewaller.
type MockEnvironModelFirewallerMockRecorder struct {
	mock *MockEnvironModelFirewaller
}

// NewMockEnvironModelFirewaller creates a new mock instance.
func NewMockEnvironModelFirewaller(ctrl *gomock.Controller) *MockEnvironModelFirewaller {
	mock := &MockEnvironModelFirewaller{ctrl: ctrl}
	mock.recorder = &MockEnvironModelFirewallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironModelFirewaller) EXPECT() *MockEnvironModelFirewallerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnvironModelFirewaller) ISGOMOCK() struct{} {
	return struct{}{}
}

// CloseModelPorts mocks base method.
func (m *MockEnvironModelFirewaller) CloseModelPorts(arg0 envcontext.ProviderCallContext, arg1 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseModelPorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseModelPorts indicates an expected call of CloseModelPorts.
func (mr *MockEnvironModelFirewallerMockRecorder) CloseModelPorts(arg0, arg1 any) *MockEnvironModelFirewallerCloseModelPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseModelPorts", reflect.TypeOf((*MockEnvironModelFirewaller)(nil).CloseModelPorts), arg0, arg1)
	return &MockEnvironModelFirewallerCloseModelPortsCall{Call: call}
}

// MockEnvironModelFirewallerCloseModelPortsCall wrap *gomock.Call
type MockEnvironModelFirewallerCloseModelPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironModelFirewallerCloseModelPortsCall) Return(arg0 error) *MockEnvironModelFirewallerCloseModelPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironModelFirewallerCloseModelPortsCall) Do(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironModelFirewallerCloseModelPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironModelFirewallerCloseModelPortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironModelFirewallerCloseModelPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelIngressRules mocks base method.
func (m *MockEnvironModelFirewaller) ModelIngressRules(arg0 envcontext.ProviderCallContext) (firewall.IngressRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelIngressRules", arg0)
	ret0, _ := ret[0].(firewall.IngressRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelIngressRules indicates an expected call of ModelIngressRules.
func (mr *MockEnvironModelFirewallerMockRecorder) ModelIngressRules(arg0 any) *MockEnvironModelFirewallerModelIngressRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelIngressRules", reflect.TypeOf((*MockEnvironModelFirewaller)(nil).ModelIngressRules), arg0)
	return &MockEnvironModelFirewallerModelIngressRulesCall{Call: call}
}

// MockEnvironModelFirewallerModelIngressRulesCall wrap *gomock.Call
type MockEnvironModelFirewallerModelIngressRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironModelFirewallerModelIngressRulesCall) Return(arg0 firewall.IngressRules, arg1 error) *MockEnvironModelFirewallerModelIngressRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironModelFirewallerModelIngressRulesCall) Do(f func(envcontext.ProviderCallContext) (firewall.IngressRules, error)) *MockEnvironModelFirewallerModelIngressRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironModelFirewallerModelIngressRulesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (firewall.IngressRules, error)) *MockEnvironModelFirewallerModelIngressRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenModelPorts mocks base method.
func (m *MockEnvironModelFirewaller) OpenModelPorts(arg0 envcontext.ProviderCallContext, arg1 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenModelPorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenModelPorts indicates an expected call of OpenModelPorts.
func (mr *MockEnvironModelFirewallerMockRecorder) OpenModelPorts(arg0, arg1 any) *MockEnvironModelFirewallerOpenModelPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenModelPorts", reflect.TypeOf((*MockEnvironModelFirewaller)(nil).OpenModelPorts), arg0, arg1)
	return &MockEnvironModelFirewallerOpenModelPortsCall{Call: call}
}

// MockEnvironModelFirewallerOpenModelPortsCall wrap *gomock.Call
type MockEnvironModelFirewallerOpenModelPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironModelFirewallerOpenModelPortsCall) Return(arg0 error) *MockEnvironModelFirewallerOpenModelPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironModelFirewallerOpenModelPortsCall) Do(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironModelFirewallerOpenModelPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironModelFirewallerOpenModelPortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockEnvironModelFirewallerOpenModelPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEnvironInstances is a mock of EnvironInstances interface.
type MockEnvironInstances struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironInstancesMockRecorder
}

// MockEnvironInstancesMockRecorder is the mock recorder for MockEnvironInstances.
type MockEnvironInstancesMockRecorder struct {
	mock *MockEnvironInstances
}

// NewMockEnvironInstances creates a new mock instance.
func NewMockEnvironInstances(ctrl *gomock.Controller) *MockEnvironInstances {
	mock := &MockEnvironInstances{ctrl: ctrl}
	mock.recorder = &MockEnvironInstancesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironInstances) EXPECT() *MockEnvironInstancesMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnvironInstances) ISGOMOCK() struct{} {
	return struct{}{}
}

// Instances mocks base method.
func (m *MockEnvironInstances) Instances(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances", arg0, arg1)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockEnvironInstancesMockRecorder) Instances(arg0, arg1 any) *MockEnvironInstancesInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockEnvironInstances)(nil).Instances), arg0, arg1)
	return &MockEnvironInstancesInstancesCall{Call: call}
}

// MockEnvironInstancesInstancesCall wrap *gomock.Call
type MockEnvironInstancesInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstancesInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockEnvironInstancesInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstancesInstancesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockEnvironInstancesInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstancesInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockEnvironInstancesInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEnvironInstance is a mock of EnvironInstance interface.
type MockEnvironInstance struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironInstanceMockRecorder
}

// MockEnvironInstanceMockRecorder is the mock recorder for MockEnvironInstance.
type MockEnvironInstanceMockRecorder struct {
	mock *MockEnvironInstance
}

// NewMockEnvironInstance creates a new mock instance.
func NewMockEnvironInstance(ctrl *gomock.Controller) *MockEnvironInstance {
	mock := &MockEnvironInstance{ctrl: ctrl}
	mock.recorder = &MockEnvironInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironInstance) EXPECT() *MockEnvironInstanceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnvironInstance) ISGOMOCK() struct{} {
	return struct{}{}
}

// Addresses mocks base method.
func (m *MockEnvironInstance) Addresses(arg0 envcontext.ProviderCallContext) (network.ProviderAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses", arg0)
	ret0, _ := ret[0].(network.ProviderAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Addresses indicates an expected call of Addresses.
func (mr *MockEnvironInstanceMockRecorder) Addresses(arg0 any) *MockEnvironInstanceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockEnvironInstance)(nil).Addresses), arg0)
	return &MockEnvironInstanceAddressesCall{Call: call}
}

// MockEnvironInstanceAddressesCall wrap *gomock.Call
type MockEnvironInstanceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceAddressesCall) Return(arg0 network.ProviderAddresses, arg1 error) *MockEnvironInstanceAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceAddressesCall) Do(f func(envcontext.ProviderCallContext) (network.ProviderAddresses, error)) *MockEnvironInstanceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceAddressesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (network.ProviderAddresses, error)) *MockEnvironInstanceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClosePorts mocks base method.
func (m *MockEnvironInstance) ClosePorts(arg0 envcontext.ProviderCallContext, arg1 string, arg2 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePorts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePorts indicates an expected call of ClosePorts.
func (mr *MockEnvironInstanceMockRecorder) ClosePorts(arg0, arg1, arg2 any) *MockEnvironInstanceClosePortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePorts", reflect.TypeOf((*MockEnvironInstance)(nil).ClosePorts), arg0, arg1, arg2)
	return &MockEnvironInstanceClosePortsCall{Call: call}
}

// MockEnvironInstanceClosePortsCall wrap *gomock.Call
type MockEnvironInstanceClosePortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceClosePortsCall) Return(arg0 error) *MockEnvironInstanceClosePortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceClosePortsCall) Do(f func(envcontext.ProviderCallContext, string, firewall.IngressRules) error) *MockEnvironInstanceClosePortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceClosePortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, firewall.IngressRules) error) *MockEnvironInstanceClosePortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockEnvironInstance) Id() instance.Id {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(instance.Id)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockEnvironInstanceMockRecorder) Id() *MockEnvironInstanceIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockEnvironInstance)(nil).Id))
	return &MockEnvironInstanceIdCall{Call: call}
}

// MockEnvironInstanceIdCall wrap *gomock.Call
type MockEnvironInstanceIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceIdCall) Return(arg0 instance.Id) *MockEnvironInstanceIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceIdCall) Do(f func() instance.Id) *MockEnvironInstanceIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceIdCall) DoAndReturn(f func() instance.Id) *MockEnvironInstanceIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IngressRules mocks base method.
func (m *MockEnvironInstance) IngressRules(arg0 envcontext.ProviderCallContext, arg1 string) (firewall.IngressRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngressRules", arg0, arg1)
	ret0, _ := ret[0].(firewall.IngressRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngressRules indicates an expected call of IngressRules.
func (mr *MockEnvironInstanceMockRecorder) IngressRules(arg0, arg1 any) *MockEnvironInstanceIngressRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngressRules", reflect.TypeOf((*MockEnvironInstance)(nil).IngressRules), arg0, arg1)
	return &MockEnvironInstanceIngressRulesCall{Call: call}
}

// MockEnvironInstanceIngressRulesCall wrap *gomock.Call
type MockEnvironInstanceIngressRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceIngressRulesCall) Return(arg0 firewall.IngressRules, arg1 error) *MockEnvironInstanceIngressRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceIngressRulesCall) Do(f func(envcontext.ProviderCallContext, string) (firewall.IngressRules, error)) *MockEnvironInstanceIngressRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceIngressRulesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) (firewall.IngressRules, error)) *MockEnvironInstanceIngressRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenPorts mocks base method.
func (m *MockEnvironInstance) OpenPorts(arg0 envcontext.ProviderCallContext, arg1 string, arg2 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPorts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenPorts indicates an expected call of OpenPorts.
func (mr *MockEnvironInstanceMockRecorder) OpenPorts(arg0, arg1, arg2 any) *MockEnvironInstanceOpenPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPorts", reflect.TypeOf((*MockEnvironInstance)(nil).OpenPorts), arg0, arg1, arg2)
	return &MockEnvironInstanceOpenPortsCall{Call: call}
}

// MockEnvironInstanceOpenPortsCall wrap *gomock.Call
type MockEnvironInstanceOpenPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceOpenPortsCall) Return(arg0 error) *MockEnvironInstanceOpenPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceOpenPortsCall) Do(f func(envcontext.ProviderCallContext, string, firewall.IngressRules) error) *MockEnvironInstanceOpenPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceOpenPortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, firewall.IngressRules) error) *MockEnvironInstanceOpenPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockEnvironInstance) Status(arg0 envcontext.ProviderCallContext) instance.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(instance.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockEnvironInstanceMockRecorder) Status(arg0 any) *MockEnvironInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockEnvironInstance)(nil).Status), arg0)
	return &MockEnvironInstanceStatusCall{Call: call}
}

// MockEnvironInstanceStatusCall wrap *gomock.Call
type MockEnvironInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceStatusCall) Return(arg0 instance.Status) *MockEnvironInstanceStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceStatusCall) Do(f func(envcontext.ProviderCallContext) instance.Status) *MockEnvironInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceStatusCall) DoAndReturn(f func(envcontext.ProviderCallContext) instance.Status) *MockEnvironInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
