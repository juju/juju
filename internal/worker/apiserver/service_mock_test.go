// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/services (interfaces: DomainServicesGetter)
//
// Generated by this command:
//
//	mockgen -typed -package apiserver_test -destination service_mock_test.go github.com/juju/juju/internal/services DomainServicesGetter
//

// Package apiserver_test is a generated GoMock package.
package apiserver_test

import (
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	services "github.com/juju/juju/internal/services"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDomainServicesGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// ServicesForModel mocks base method.
func (m *MockDomainServicesGetter) ServicesForModel(arg0 model.UUID) services.DomainServices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0)
	ret0, _ := ret[0].(services.DomainServices)
	return ret0
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) ServicesForModel(arg0 any) *MockDomainServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).ServicesForModel), arg0)
	return &MockDomainServicesGetterServicesForModelCall{Call: call}
}

// MockDomainServicesGetterServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterServicesForModelCall) Return(arg0 services.DomainServices) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterServicesForModelCall) Do(f func(model.UUID) services.DomainServices) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterServicesForModelCall) DoAndReturn(f func(model.UUID) services.DomainServices) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
