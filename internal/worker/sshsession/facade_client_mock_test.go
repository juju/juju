// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshsession (interfaces: FacadeClient,KeyManager)
//
// Generated by this command:
//
//	mockgen -package sshsession_test -destination ./facade_client_mock_test.go github.com/juju/juju/internal/worker/sshsession FacadeClient,KeyManager
//

// Package sshsession_test is a generated GoMock package.
package sshsession_test

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockFacadeClient is a mock of FacadeClient interface.
type MockFacadeClient struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeClientMockRecorder
}

// MockFacadeClientMockRecorder is the mock recorder for MockFacadeClient.
type MockFacadeClientMockRecorder struct {
	mock *MockFacadeClient
}

// NewMockFacadeClient creates a new mock instance.
func NewMockFacadeClient(ctrl *gomock.Controller) *MockFacadeClient {
	mock := &MockFacadeClient{ctrl: ctrl}
	mock.recorder = &MockFacadeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeClient) EXPECT() *MockFacadeClientMockRecorder {
	return m.recorder
}

// GetSSHConnRequest mocks base method.
func (m *MockFacadeClient) GetSSHConnRequest(arg0 string) (params.SSHConnRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHConnRequest", arg0)
	ret0, _ := ret[0].(params.SSHConnRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHConnRequest indicates an expected call of GetSSHConnRequest.
func (mr *MockFacadeClientMockRecorder) GetSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHConnRequest", reflect.TypeOf((*MockFacadeClient)(nil).GetSSHConnRequest), arg0)
}

// WatchSSHConnRequest mocks base method.
func (m *MockFacadeClient) WatchSSHConnRequest(arg0 string) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSSHConnRequest", arg0)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSSHConnRequest indicates an expected call of WatchSSHConnRequest.
func (mr *MockFacadeClientMockRecorder) WatchSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSSHConnRequest", reflect.TypeOf((*MockFacadeClient)(nil).WatchSSHConnRequest), arg0)
}

// MockKeyManager is a mock of KeyManager interface.
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerMockRecorder
}

// MockKeyManagerMockRecorder is the mock recorder for MockKeyManager.
type MockKeyManagerMockRecorder struct {
	mock *MockKeyManager
}

// NewMockKeyManager creates a new mock instance.
func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &MockKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyManager) EXPECT() *MockKeyManagerMockRecorder {
	return m.recorder
}

// AddPublicKey mocks base method.
func (m *MockKeyManager) AddPublicKey(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublicKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPublicKey indicates an expected call of AddPublicKey.
func (mr *MockKeyManagerMockRecorder) AddPublicKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublicKey", reflect.TypeOf((*MockKeyManager)(nil).AddPublicKey), arg0)
}

// CleanupPublicKey mocks base method.
func (m *MockKeyManager) CleanupPublicKey(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupPublicKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupPublicKey indicates an expected call of CleanupPublicKey.
func (mr *MockKeyManagerMockRecorder) CleanupPublicKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupPublicKey", reflect.TypeOf((*MockKeyManager)(nil).CleanupPublicKey), arg0)
}
