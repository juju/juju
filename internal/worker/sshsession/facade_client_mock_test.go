// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshsession (interfaces: FacadeClient,Logger)
//
// Generated by this command:
//
//	mockgen -package sshsession_test -destination ./facade_client_mock_test.go github.com/juju/juju/internal/worker/sshsession FacadeClient,Logger
//

// Package sshsession_test is a generated GoMock package.
package sshsession_test

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	sshsession "github.com/juju/juju/internal/worker/sshsession"
	gomock "go.uber.org/mock/gomock"
)

// MockFacadeClient is a mock of FacadeClient interface.
type MockFacadeClient struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeClientMockRecorder
}

// MockFacadeClientMockRecorder is the mock recorder for MockFacadeClient.
type MockFacadeClientMockRecorder struct {
	mock *MockFacadeClient
}

// NewMockFacadeClient creates a new mock instance.
func NewMockFacadeClient(ctrl *gomock.Controller) *MockFacadeClient {
	mock := &MockFacadeClient{ctrl: ctrl}
	mock.recorder = &MockFacadeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeClient) EXPECT() *MockFacadeClientMockRecorder {
	return m.recorder
}

// GetSSHConnRequest mocks base method.
func (m *MockFacadeClient) GetSSHConnRequest(arg0 string) (sshsession.DummyParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHConnRequest", arg0)
	ret0, _ := ret[0].(sshsession.DummyParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHConnRequest indicates an expected call of GetSSHConnRequest.
func (mr *MockFacadeClientMockRecorder) GetSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHConnRequest", reflect.TypeOf((*MockFacadeClient)(nil).GetSSHConnRequest), arg0)
}

// WatchSSHConnRequest mocks base method.
func (m *MockFacadeClient) WatchSSHConnRequest(arg0 string) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSSHConnRequest", arg0)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSSHConnRequest indicates an expected call of WatchSSHConnRequest.
func (mr *MockFacadeClientMockRecorder) WatchSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSSHConnRequest", reflect.TypeOf((*MockFacadeClient)(nil).WatchSSHConnRequest), arg0)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}
