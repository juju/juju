// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshsession (interfaces: FacadeClient,ConnectionGetter)
//
// Generated by this command:
//
//	mockgen -typed -package sshsession_test -destination ./service_mock_test.go github.com/juju/juju/internal/worker/sshsession FacadeClient,ConnectionGetter
//

// Package sshsession_test is a generated GoMock package.
package sshsession_test

import (
	net "net"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockFacadeClient is a mock of FacadeClient interface.
type MockFacadeClient struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeClientMockRecorder
}

// MockFacadeClientMockRecorder is the mock recorder for MockFacadeClient.
type MockFacadeClientMockRecorder struct {
	mock *MockFacadeClient
}

// NewMockFacadeClient creates a new mock instance.
func NewMockFacadeClient(ctrl *gomock.Controller) *MockFacadeClient {
	mock := &MockFacadeClient{ctrl: ctrl}
	mock.recorder = &MockFacadeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeClient) EXPECT() *MockFacadeClientMockRecorder {
	return m.recorder
}

// GetSSHConnRequest mocks base method.
func (m *MockFacadeClient) GetSSHConnRequest(arg0 string) (params.SSHConnRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHConnRequest", arg0)
	ret0, _ := ret[0].(params.SSHConnRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHConnRequest indicates an expected call of GetSSHConnRequest.
func (mr *MockFacadeClientMockRecorder) GetSSHConnRequest(arg0 any) *MockFacadeClientGetSSHConnRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHConnRequest", reflect.TypeOf((*MockFacadeClient)(nil).GetSSHConnRequest), arg0)
	return &MockFacadeClientGetSSHConnRequestCall{Call: call}
}

// MockFacadeClientGetSSHConnRequestCall wrap *gomock.Call
type MockFacadeClientGetSSHConnRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeClientGetSSHConnRequestCall) Return(arg0 params.SSHConnRequest, arg1 error) *MockFacadeClientGetSSHConnRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeClientGetSSHConnRequestCall) Do(f func(string) (params.SSHConnRequest, error)) *MockFacadeClientGetSSHConnRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeClientGetSSHConnRequestCall) DoAndReturn(f func(string) (params.SSHConnRequest, error)) *MockFacadeClientGetSSHConnRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchSSHConnRequest mocks base method.
func (m *MockFacadeClient) WatchSSHConnRequest(arg0 string) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSSHConnRequest", arg0)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSSHConnRequest indicates an expected call of WatchSSHConnRequest.
func (mr *MockFacadeClientMockRecorder) WatchSSHConnRequest(arg0 any) *MockFacadeClientWatchSSHConnRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSSHConnRequest", reflect.TypeOf((*MockFacadeClient)(nil).WatchSSHConnRequest), arg0)
	return &MockFacadeClientWatchSSHConnRequestCall{Call: call}
}

// MockFacadeClientWatchSSHConnRequestCall wrap *gomock.Call
type MockFacadeClientWatchSSHConnRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeClientWatchSSHConnRequestCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockFacadeClientWatchSSHConnRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeClientWatchSSHConnRequestCall) Do(f func(string) (watcher.StringsWatcher, error)) *MockFacadeClientWatchSSHConnRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeClientWatchSSHConnRequestCall) DoAndReturn(f func(string) (watcher.StringsWatcher, error)) *MockFacadeClientWatchSSHConnRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConnectionGetter is a mock of ConnectionGetter interface.
type MockConnectionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionGetterMockRecorder
}

// MockConnectionGetterMockRecorder is the mock recorder for MockConnectionGetter.
type MockConnectionGetterMockRecorder struct {
	mock *MockConnectionGetter
}

// NewMockConnectionGetter creates a new mock instance.
func NewMockConnectionGetter(ctrl *gomock.Controller) *MockConnectionGetter {
	mock := &MockConnectionGetter{ctrl: ctrl}
	mock.recorder = &MockConnectionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionGetter) EXPECT() *MockConnectionGetterMockRecorder {
	return m.recorder
}

// GetControllerConnection mocks base method.
func (m *MockConnectionGetter) GetControllerConnection(arg0, arg1 string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerConnection", arg0, arg1)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerConnection indicates an expected call of GetControllerConnection.
func (mr *MockConnectionGetterMockRecorder) GetControllerConnection(arg0, arg1 any) *MockConnectionGetterGetControllerConnectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerConnection", reflect.TypeOf((*MockConnectionGetter)(nil).GetControllerConnection), arg0, arg1)
	return &MockConnectionGetterGetControllerConnectionCall{Call: call}
}

// MockConnectionGetterGetControllerConnectionCall wrap *gomock.Call
type MockConnectionGetterGetControllerConnectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConnectionGetterGetControllerConnectionCall) Return(arg0 net.Conn, arg1 error) *MockConnectionGetterGetControllerConnectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConnectionGetterGetControllerConnectionCall) Do(f func(string, string) (net.Conn, error)) *MockConnectionGetterGetControllerConnectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConnectionGetterGetControllerConnectionCall) DoAndReturn(f func(string, string) (net.Conn, error)) *MockConnectionGetterGetControllerConnectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSSHDConnection mocks base method.
func (m *MockConnectionGetter) GetSSHDConnection() (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHDConnection")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHDConnection indicates an expected call of GetSSHDConnection.
func (mr *MockConnectionGetterMockRecorder) GetSSHDConnection() *MockConnectionGetterGetSSHDConnectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHDConnection", reflect.TypeOf((*MockConnectionGetter)(nil).GetSSHDConnection))
	return &MockConnectionGetterGetSSHDConnectionCall{Call: call}
}

// MockConnectionGetterGetSSHDConnectionCall wrap *gomock.Call
type MockConnectionGetterGetSSHDConnectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConnectionGetterGetSSHDConnectionCall) Return(arg0 net.Conn, arg1 error) *MockConnectionGetterGetSSHDConnectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConnectionGetterGetSSHDConnectionCall) Do(f func() (net.Conn, error)) *MockConnectionGetterGetSSHDConnectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConnectionGetterGetSSHDConnectionCall) DoAndReturn(f func() (net.Conn, error)) *MockConnectionGetterGetSSHDConnectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
