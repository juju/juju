// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/database (interfaces: TxnRunner)
//
// Generated by this command:
//
//	mockgen -typed -package lease -destination database_mock_test.go github.com/juju/juju/core/database TxnRunner
//

// Package lease is a generated GoMock package.
package lease

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sqlair "github.com/canonical/sqlair"
	gomock "go.uber.org/mock/gomock"
)

// MockTxnRunner is a mock of TxnRunner interface.
type MockTxnRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTxnRunnerMockRecorder
}

// MockTxnRunnerMockRecorder is the mock recorder for MockTxnRunner.
type MockTxnRunnerMockRecorder struct {
	mock *MockTxnRunner
}

// NewMockTxnRunner creates a new mock instance.
func NewMockTxnRunner(ctrl *gomock.Controller) *MockTxnRunner {
	mock := &MockTxnRunner{ctrl: ctrl}
	mock.recorder = &MockTxnRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnRunner) EXPECT() *MockTxnRunnerMockRecorder {
	return m.recorder
}

// Dying mocks base method.
func (m *MockTxnRunner) Dying() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dying")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Dying indicates an expected call of Dying.
func (mr *MockTxnRunnerMockRecorder) Dying() *MockTxnRunnerDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dying", reflect.TypeOf((*MockTxnRunner)(nil).Dying))
	return &MockTxnRunnerDyingCall{Call: call}
}

// MockTxnRunnerDyingCall wrap *gomock.Call
type MockTxnRunnerDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxnRunnerDyingCall) Return(arg0 <-chan struct{}) *MockTxnRunnerDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxnRunnerDyingCall) Do(f func() <-chan struct{}) *MockTxnRunnerDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxnRunnerDyingCall) DoAndReturn(f func() <-chan struct{}) *MockTxnRunnerDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StdTxn mocks base method.
func (m *MockTxnRunner) StdTxn(arg0 context.Context, arg1 func(context.Context, *sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdTxn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StdTxn indicates an expected call of StdTxn.
func (mr *MockTxnRunnerMockRecorder) StdTxn(arg0, arg1 any) *MockTxnRunnerStdTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdTxn", reflect.TypeOf((*MockTxnRunner)(nil).StdTxn), arg0, arg1)
	return &MockTxnRunnerStdTxnCall{Call: call}
}

// MockTxnRunnerStdTxnCall wrap *gomock.Call
type MockTxnRunnerStdTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxnRunnerStdTxnCall) Return(arg0 error) *MockTxnRunnerStdTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxnRunnerStdTxnCall) Do(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockTxnRunnerStdTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxnRunnerStdTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockTxnRunnerStdTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Txn mocks base method.
func (m *MockTxnRunner) Txn(arg0 context.Context, arg1 func(context.Context, *sqlair.TX) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockTxnRunnerMockRecorder) Txn(arg0, arg1 any) *MockTxnRunnerTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockTxnRunner)(nil).Txn), arg0, arg1)
	return &MockTxnRunnerTxnCall{Call: call}
}

// MockTxnRunnerTxnCall wrap *gomock.Call
type MockTxnRunnerTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxnRunnerTxnCall) Return(arg0 error) *MockTxnRunnerTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxnRunnerTxnCall) Do(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockTxnRunnerTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxnRunnerTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockTxnRunnerTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
