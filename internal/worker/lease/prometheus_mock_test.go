// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prometheus/client_golang/prometheus (interfaces: Registerer)
//
// Generated by this command:
//
//	mockgen -typed -package lease -destination prometheus_mock_test.go github.com/prometheus/client_golang/prometheus Registerer
//

// Package lease is a generated GoMock package.
package lease

import (
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
)

// MockRegisterer is a mock of Registerer interface.
type MockRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockRegistererMockRecorder
}

// MockRegistererMockRecorder is the mock recorder for MockRegisterer.
type MockRegistererMockRecorder struct {
	mock *MockRegisterer
}

// NewMockRegisterer creates a new mock instance.
func NewMockRegisterer(ctrl *gomock.Controller) *MockRegisterer {
	mock := &MockRegisterer{ctrl: ctrl}
	mock.recorder = &MockRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterer) EXPECT() *MockRegistererMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRegisterer) ISGOMOCK() struct{} {
	return struct{}{}
}

// MustRegister mocks base method.
func (m *MockRegisterer) MustRegister(arg0 ...prometheus.Collector) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "MustRegister", varargs...)
}

// MustRegister indicates an expected call of MustRegister.
func (mr *MockRegistererMockRecorder) MustRegister(arg0 ...any) *MockRegistererMustRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRegister", reflect.TypeOf((*MockRegisterer)(nil).MustRegister), arg0...)
	return &MockRegistererMustRegisterCall{Call: call}
}

// MockRegistererMustRegisterCall wrap *gomock.Call
type MockRegistererMustRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistererMustRegisterCall) Return() *MockRegistererMustRegisterCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistererMustRegisterCall) Do(f func(...prometheus.Collector)) *MockRegistererMustRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistererMustRegisterCall) DoAndReturn(f func(...prometheus.Collector)) *MockRegistererMustRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Register mocks base method.
func (m *MockRegisterer) Register(arg0 prometheus.Collector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegistererMockRecorder) Register(arg0 any) *MockRegistererRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterer)(nil).Register), arg0)
	return &MockRegistererRegisterCall{Call: call}
}

// MockRegistererRegisterCall wrap *gomock.Call
type MockRegistererRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistererRegisterCall) Return(arg0 error) *MockRegistererRegisterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistererRegisterCall) Do(f func(prometheus.Collector) error) *MockRegistererRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistererRegisterCall) DoAndReturn(f func(prometheus.Collector) error) *MockRegistererRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unregister mocks base method.
func (m *MockRegisterer) Unregister(arg0 prometheus.Collector) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockRegistererMockRecorder) Unregister(arg0 any) *MockRegistererUnregisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockRegisterer)(nil).Unregister), arg0)
	return &MockRegistererUnregisterCall{Call: call}
}

// MockRegistererUnregisterCall wrap *gomock.Call
type MockRegistererUnregisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistererUnregisterCall) Return(arg0 bool) *MockRegistererUnregisterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistererUnregisterCall) Do(f func(prometheus.Collector) bool) *MockRegistererUnregisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistererUnregisterCall) DoAndReturn(f func(prometheus.Collector) bool) *MockRegistererUnregisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
