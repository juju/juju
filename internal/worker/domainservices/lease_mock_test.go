// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/lease (interfaces: Checker,Manager,LeaseManagerGetter,ModelLeaseManagerGetter,LeaseManager)
//
// Generated by this command:
//
//	mockgen -typed -package domainservices -destination lease_mock_test.go github.com/juju/juju/core/lease Checker,Manager,LeaseManagerGetter,ModelLeaseManagerGetter,LeaseManager
//

// Package domainservices is a generated GoMock package.
package domainservices

import (
	context "context"
	reflect "reflect"

	lease "github.com/juju/juju/core/lease"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockChecker is a mock of Checker interface.
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker.
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance.
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockChecker) Token(arg0, arg1 string) lease.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0, arg1)
	ret0, _ := ret[0].(lease.Token)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockCheckerMockRecorder) Token(arg0, arg1 any) *MockCheckerTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockChecker)(nil).Token), arg0, arg1)
	return &MockCheckerTokenCall{Call: call}
}

// MockCheckerTokenCall wrap *gomock.Call
type MockCheckerTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckerTokenCall) Return(arg0 lease.Token) *MockCheckerTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckerTokenCall) Do(f func(string, string) lease.Token) *MockCheckerTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckerTokenCall) DoAndReturn(f func(string, string) lease.Token) *MockCheckerTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitUntilExpired mocks base method.
func (m *MockChecker) WaitUntilExpired(arg0 context.Context, arg1 string, arg2 chan<- struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilExpired", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilExpired indicates an expected call of WaitUntilExpired.
func (mr *MockCheckerMockRecorder) WaitUntilExpired(arg0, arg1, arg2 any) *MockCheckerWaitUntilExpiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilExpired", reflect.TypeOf((*MockChecker)(nil).WaitUntilExpired), arg0, arg1, arg2)
	return &MockCheckerWaitUntilExpiredCall{Call: call}
}

// MockCheckerWaitUntilExpiredCall wrap *gomock.Call
type MockCheckerWaitUntilExpiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckerWaitUntilExpiredCall) Return(arg0 error) *MockCheckerWaitUntilExpiredCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckerWaitUntilExpiredCall) Do(f func(context.Context, string, chan<- struct{}) error) *MockCheckerWaitUntilExpiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckerWaitUntilExpiredCall) DoAndReturn(f func(context.Context, string, chan<- struct{}) error) *MockCheckerWaitUntilExpiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Checker mocks base method.
func (m *MockManager) Checker(arg0, arg1 string) (lease.Checker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker", arg0, arg1)
	ret0, _ := ret[0].(lease.Checker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checker indicates an expected call of Checker.
func (mr *MockManagerMockRecorder) Checker(arg0, arg1 any) *MockManagerCheckerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockManager)(nil).Checker), arg0, arg1)
	return &MockManagerCheckerCall{Call: call}
}

// MockManagerCheckerCall wrap *gomock.Call
type MockManagerCheckerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerCheckerCall) Return(arg0 lease.Checker, arg1 error) *MockManagerCheckerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerCheckerCall) Do(f func(string, string) (lease.Checker, error)) *MockManagerCheckerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerCheckerCall) DoAndReturn(f func(string, string) (lease.Checker, error)) *MockManagerCheckerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Claimer mocks base method.
func (m *MockManager) Claimer(arg0, arg1 string) (lease.Claimer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claimer", arg0, arg1)
	ret0, _ := ret[0].(lease.Claimer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claimer indicates an expected call of Claimer.
func (mr *MockManagerMockRecorder) Claimer(arg0, arg1 any) *MockManagerClaimerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claimer", reflect.TypeOf((*MockManager)(nil).Claimer), arg0, arg1)
	return &MockManagerClaimerCall{Call: call}
}

// MockManagerClaimerCall wrap *gomock.Call
type MockManagerClaimerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerClaimerCall) Return(arg0 lease.Claimer, arg1 error) *MockManagerClaimerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerClaimerCall) Do(f func(string, string) (lease.Claimer, error)) *MockManagerClaimerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerClaimerCall) DoAndReturn(f func(string, string) (lease.Claimer, error)) *MockManagerClaimerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pinner mocks base method.
func (m *MockManager) Pinner(arg0, arg1 string) (lease.Pinner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pinner", arg0, arg1)
	ret0, _ := ret[0].(lease.Pinner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pinner indicates an expected call of Pinner.
func (mr *MockManagerMockRecorder) Pinner(arg0, arg1 any) *MockManagerPinnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pinner", reflect.TypeOf((*MockManager)(nil).Pinner), arg0, arg1)
	return &MockManagerPinnerCall{Call: call}
}

// MockManagerPinnerCall wrap *gomock.Call
type MockManagerPinnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerPinnerCall) Return(arg0 lease.Pinner, arg1 error) *MockManagerPinnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerPinnerCall) Do(f func(string, string) (lease.Pinner, error)) *MockManagerPinnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerPinnerCall) DoAndReturn(f func(string, string) (lease.Pinner, error)) *MockManagerPinnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reader mocks base method.
func (m *MockManager) Reader(arg0, arg1 string) (lease.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader", arg0, arg1)
	ret0, _ := ret[0].(lease.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockManagerMockRecorder) Reader(arg0, arg1 any) *MockManagerReaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockManager)(nil).Reader), arg0, arg1)
	return &MockManagerReaderCall{Call: call}
}

// MockManagerReaderCall wrap *gomock.Call
type MockManagerReaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerReaderCall) Return(arg0 lease.Reader, arg1 error) *MockManagerReaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerReaderCall) Do(f func(string, string) (lease.Reader, error)) *MockManagerReaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerReaderCall) DoAndReturn(f func(string, string) (lease.Reader, error)) *MockManagerReaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Revoker mocks base method.
func (m *MockManager) Revoker(arg0, arg1 string) (lease.Revoker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoker", arg0, arg1)
	ret0, _ := ret[0].(lease.Revoker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoker indicates an expected call of Revoker.
func (mr *MockManagerMockRecorder) Revoker(arg0, arg1 any) *MockManagerRevokerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoker", reflect.TypeOf((*MockManager)(nil).Revoker), arg0, arg1)
	return &MockManagerRevokerCall{Call: call}
}

// MockManagerRevokerCall wrap *gomock.Call
type MockManagerRevokerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerRevokerCall) Return(arg0 lease.Revoker, arg1 error) *MockManagerRevokerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerRevokerCall) Do(f func(string, string) (lease.Revoker, error)) *MockManagerRevokerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerRevokerCall) DoAndReturn(f func(string, string) (lease.Revoker, error)) *MockManagerRevokerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeaseManagerGetter is a mock of LeaseManagerGetter interface.
type MockLeaseManagerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseManagerGetterMockRecorder
}

// MockLeaseManagerGetterMockRecorder is the mock recorder for MockLeaseManagerGetter.
type MockLeaseManagerGetterMockRecorder struct {
	mock *MockLeaseManagerGetter
}

// NewMockLeaseManagerGetter creates a new mock instance.
func NewMockLeaseManagerGetter(ctrl *gomock.Controller) *MockLeaseManagerGetter {
	mock := &MockLeaseManagerGetter{ctrl: ctrl}
	mock.recorder = &MockLeaseManagerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseManagerGetter) EXPECT() *MockLeaseManagerGetterMockRecorder {
	return m.recorder
}

// GetLeaseManager mocks base method.
func (m *MockLeaseManagerGetter) GetLeaseManager(arg0 model.UUID) (lease.LeaseManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseManager", arg0)
	ret0, _ := ret[0].(lease.LeaseManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseManager indicates an expected call of GetLeaseManager.
func (mr *MockLeaseManagerGetterMockRecorder) GetLeaseManager(arg0 any) *MockLeaseManagerGetterGetLeaseManagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseManager", reflect.TypeOf((*MockLeaseManagerGetter)(nil).GetLeaseManager), arg0)
	return &MockLeaseManagerGetterGetLeaseManagerCall{Call: call}
}

// MockLeaseManagerGetterGetLeaseManagerCall wrap *gomock.Call
type MockLeaseManagerGetterGetLeaseManagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaseManagerGetterGetLeaseManagerCall) Return(arg0 lease.LeaseManager, arg1 error) *MockLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaseManagerGetterGetLeaseManagerCall) Do(f func(model.UUID) (lease.LeaseManager, error)) *MockLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaseManagerGetterGetLeaseManagerCall) DoAndReturn(f func(model.UUID) (lease.LeaseManager, error)) *MockLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelLeaseManagerGetter is a mock of ModelLeaseManagerGetter interface.
type MockModelLeaseManagerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockModelLeaseManagerGetterMockRecorder
}

// MockModelLeaseManagerGetterMockRecorder is the mock recorder for MockModelLeaseManagerGetter.
type MockModelLeaseManagerGetterMockRecorder struct {
	mock *MockModelLeaseManagerGetter
}

// NewMockModelLeaseManagerGetter creates a new mock instance.
func NewMockModelLeaseManagerGetter(ctrl *gomock.Controller) *MockModelLeaseManagerGetter {
	mock := &MockModelLeaseManagerGetter{ctrl: ctrl}
	mock.recorder = &MockModelLeaseManagerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelLeaseManagerGetter) EXPECT() *MockModelLeaseManagerGetterMockRecorder {
	return m.recorder
}

// GetLeaseManager mocks base method.
func (m *MockModelLeaseManagerGetter) GetLeaseManager() (lease.LeaseManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseManager")
	ret0, _ := ret[0].(lease.LeaseManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseManager indicates an expected call of GetLeaseManager.
func (mr *MockModelLeaseManagerGetterMockRecorder) GetLeaseManager() *MockModelLeaseManagerGetterGetLeaseManagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseManager", reflect.TypeOf((*MockModelLeaseManagerGetter)(nil).GetLeaseManager))
	return &MockModelLeaseManagerGetterGetLeaseManagerCall{Call: call}
}

// MockModelLeaseManagerGetterGetLeaseManagerCall wrap *gomock.Call
type MockModelLeaseManagerGetterGetLeaseManagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelLeaseManagerGetterGetLeaseManagerCall) Return(arg0 lease.LeaseManager, arg1 error) *MockModelLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelLeaseManagerGetterGetLeaseManagerCall) Do(f func() (lease.LeaseManager, error)) *MockModelLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelLeaseManagerGetterGetLeaseManagerCall) DoAndReturn(f func() (lease.LeaseManager, error)) *MockModelLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeaseManager is a mock of LeaseManager interface.
type MockLeaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseManagerMockRecorder
}

// MockLeaseManagerMockRecorder is the mock recorder for MockLeaseManager.
type MockLeaseManagerMockRecorder struct {
	mock *MockLeaseManager
}

// NewMockLeaseManager creates a new mock instance.
func NewMockLeaseManager(ctrl *gomock.Controller) *MockLeaseManager {
	mock := &MockLeaseManager{ctrl: ctrl}
	mock.recorder = &MockLeaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseManager) EXPECT() *MockLeaseManagerMockRecorder {
	return m.recorder
}

// Revoke mocks base method.
func (m *MockLeaseManager) Revoke(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockLeaseManagerMockRecorder) Revoke(arg0, arg1 any) *MockLeaseManagerRevokeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockLeaseManager)(nil).Revoke), arg0, arg1)
	return &MockLeaseManagerRevokeCall{Call: call}
}

// MockLeaseManagerRevokeCall wrap *gomock.Call
type MockLeaseManagerRevokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaseManagerRevokeCall) Return(arg0 error) *MockLeaseManagerRevokeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaseManagerRevokeCall) Do(f func(string, string) error) *MockLeaseManagerRevokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaseManagerRevokeCall) DoAndReturn(f func(string, string) error) *MockLeaseManagerRevokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Token mocks base method.
func (m *MockLeaseManager) Token(arg0, arg1 string) lease.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0, arg1)
	ret0, _ := ret[0].(lease.Token)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockLeaseManagerMockRecorder) Token(arg0, arg1 any) *MockLeaseManagerTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockLeaseManager)(nil).Token), arg0, arg1)
	return &MockLeaseManagerTokenCall{Call: call}
}

// MockLeaseManagerTokenCall wrap *gomock.Call
type MockLeaseManagerTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaseManagerTokenCall) Return(arg0 lease.Token) *MockLeaseManagerTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaseManagerTokenCall) Do(f func(string, string) lease.Token) *MockLeaseManagerTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaseManagerTokenCall) DoAndReturn(f func(string, string) lease.Token) *MockLeaseManagerTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitUntilExpired mocks base method.
func (m *MockLeaseManager) WaitUntilExpired(arg0 context.Context, arg1 string, arg2 chan<- struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilExpired", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilExpired indicates an expected call of WaitUntilExpired.
func (mr *MockLeaseManagerMockRecorder) WaitUntilExpired(arg0, arg1, arg2 any) *MockLeaseManagerWaitUntilExpiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilExpired", reflect.TypeOf((*MockLeaseManager)(nil).WaitUntilExpired), arg0, arg1, arg2)
	return &MockLeaseManagerWaitUntilExpiredCall{Call: call}
}

// MockLeaseManagerWaitUntilExpiredCall wrap *gomock.Call
type MockLeaseManagerWaitUntilExpiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaseManagerWaitUntilExpiredCall) Return(arg0 error) *MockLeaseManagerWaitUntilExpiredCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaseManagerWaitUntilExpiredCall) Do(f func(context.Context, string, chan<- struct{}) error) *MockLeaseManagerWaitUntilExpiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaseManagerWaitUntilExpiredCall) DoAndReturn(f func(context.Context, string, chan<- struct{}) error) *MockLeaseManagerWaitUntilExpiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
