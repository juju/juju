// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/services (interfaces: ControllerDomainServices,ModelDomainServices,DomainServices,DomainServicesGetter)
//
// Generated by this command:
//
//	mockgen -typed -package domainservices -destination domainservices_mock_test.go github.com/juju/juju/internal/services ControllerDomainServices,ModelDomainServices,DomainServices,DomainServicesGetter
//

// Package domainservices is a generated GoMock package.
package domainservices

import (
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	service "github.com/juju/juju/domain/access/service"
	service0 "github.com/juju/juju/domain/agentprovisioner/service"
	service1 "github.com/juju/juju/domain/annotation/service"
	service2 "github.com/juju/juju/domain/application/service"
	service3 "github.com/juju/juju/domain/autocert/service"
	service4 "github.com/juju/juju/domain/blockcommand/service"
	service5 "github.com/juju/juju/domain/blockdevice/service"
	service6 "github.com/juju/juju/domain/cloud/service"
	service7 "github.com/juju/juju/domain/cloudimagemetadata/service"
	service8 "github.com/juju/juju/domain/controller/service"
	service9 "github.com/juju/juju/domain/controllerconfig/service"
	service10 "github.com/juju/juju/domain/controllernode/service"
	service11 "github.com/juju/juju/domain/credential/service"
	service12 "github.com/juju/juju/domain/externalcontroller/service"
	service13 "github.com/juju/juju/domain/flag/service"
	service14 "github.com/juju/juju/domain/keymanager/service"
	service15 "github.com/juju/juju/domain/keyupdater/service"
	service16 "github.com/juju/juju/domain/macaroon/service"
	service17 "github.com/juju/juju/domain/machine/service"
	service18 "github.com/juju/juju/domain/model/service"
	service19 "github.com/juju/juju/domain/modelagent/service"
	service20 "github.com/juju/juju/domain/modelconfig/service"
	service21 "github.com/juju/juju/domain/modeldefaults/service"
	service22 "github.com/juju/juju/domain/modelmigration/service"
	service23 "github.com/juju/juju/domain/network/service"
	service24 "github.com/juju/juju/domain/port/service"
	service25 "github.com/juju/juju/domain/proxy/service"
	service26 "github.com/juju/juju/domain/resource/service"
	service27 "github.com/juju/juju/domain/secret/service"
	service28 "github.com/juju/juju/domain/secretbackend/service"
	service29 "github.com/juju/juju/domain/storage/service"
	stub "github.com/juju/juju/domain/stub"
	service30 "github.com/juju/juju/domain/unitstate/service"
	service31 "github.com/juju/juju/domain/upgrade/service"
	services "github.com/juju/juju/internal/services"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerDomainServices is a mock of ControllerDomainServices interface.
type MockControllerDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDomainServicesMockRecorder
}

// MockControllerDomainServicesMockRecorder is the mock recorder for MockControllerDomainServices.
type MockControllerDomainServicesMockRecorder struct {
	mock *MockControllerDomainServices
}

// NewMockControllerDomainServices creates a new mock instance.
func NewMockControllerDomainServices(ctrl *gomock.Controller) *MockControllerDomainServices {
	mock := &MockControllerDomainServices{ctrl: ctrl}
	mock.recorder = &MockControllerDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDomainServices) EXPECT() *MockControllerDomainServicesMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockControllerDomainServices) ISGOMOCK() struct{} {
	return struct{}{}
}

// Access mocks base method.
func (m *MockControllerDomainServices) Access() *service.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access")
	ret0, _ := ret[0].(*service.Service)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockControllerDomainServicesMockRecorder) Access() *MockControllerDomainServicesAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockControllerDomainServices)(nil).Access))
	return &MockControllerDomainServicesAccessCall{Call: call}
}

// MockControllerDomainServicesAccessCall wrap *gomock.Call
type MockControllerDomainServicesAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesAccessCall) Return(arg0 *service.Service) *MockControllerDomainServicesAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesAccessCall) Do(f func() *service.Service) *MockControllerDomainServicesAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesAccessCall) DoAndReturn(f func() *service.Service) *MockControllerDomainServicesAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AutocertCache mocks base method.
func (m *MockControllerDomainServices) AutocertCache() *service3.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutocertCache")
	ret0, _ := ret[0].(*service3.Service)
	return ret0
}

// AutocertCache indicates an expected call of AutocertCache.
func (mr *MockControllerDomainServicesMockRecorder) AutocertCache() *MockControllerDomainServicesAutocertCacheCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutocertCache", reflect.TypeOf((*MockControllerDomainServices)(nil).AutocertCache))
	return &MockControllerDomainServicesAutocertCacheCall{Call: call}
}

// MockControllerDomainServicesAutocertCacheCall wrap *gomock.Call
type MockControllerDomainServicesAutocertCacheCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesAutocertCacheCall) Return(arg0 *service3.Service) *MockControllerDomainServicesAutocertCacheCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesAutocertCacheCall) Do(f func() *service3.Service) *MockControllerDomainServicesAutocertCacheCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesAutocertCacheCall) DoAndReturn(f func() *service3.Service) *MockControllerDomainServicesAutocertCacheCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cloud mocks base method.
func (m *MockControllerDomainServices) Cloud() *service6.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(*service6.WatchableService)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockControllerDomainServicesMockRecorder) Cloud() *MockControllerDomainServicesCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockControllerDomainServices)(nil).Cloud))
	return &MockControllerDomainServicesCloudCall{Call: call}
}

// MockControllerDomainServicesCloudCall wrap *gomock.Call
type MockControllerDomainServicesCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesCloudCall) Return(arg0 *service6.WatchableService) *MockControllerDomainServicesCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesCloudCall) Do(f func() *service6.WatchableService) *MockControllerDomainServicesCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesCloudCall) DoAndReturn(f func() *service6.WatchableService) *MockControllerDomainServicesCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Controller mocks base method.
func (m *MockControllerDomainServices) Controller() *service8.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller")
	ret0, _ := ret[0].(*service8.Service)
	return ret0
}

// Controller indicates an expected call of Controller.
func (mr *MockControllerDomainServicesMockRecorder) Controller() *MockControllerDomainServicesControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockControllerDomainServices)(nil).Controller))
	return &MockControllerDomainServicesControllerCall{Call: call}
}

// MockControllerDomainServicesControllerCall wrap *gomock.Call
type MockControllerDomainServicesControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesControllerCall) Return(arg0 *service8.Service) *MockControllerDomainServicesControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesControllerCall) Do(f func() *service8.Service) *MockControllerDomainServicesControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesControllerCall) DoAndReturn(f func() *service8.Service) *MockControllerDomainServicesControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerConfig mocks base method.
func (m *MockControllerDomainServices) ControllerConfig() *service9.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(*service9.WatchableService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerDomainServicesMockRecorder) ControllerConfig() *MockControllerDomainServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerDomainServices)(nil).ControllerConfig))
	return &MockControllerDomainServicesControllerConfigCall{Call: call}
}

// MockControllerDomainServicesControllerConfigCall wrap *gomock.Call
type MockControllerDomainServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesControllerConfigCall) Return(arg0 *service9.WatchableService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesControllerConfigCall) Do(f func() *service9.WatchableService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesControllerConfigCall) DoAndReturn(f func() *service9.WatchableService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerNode mocks base method.
func (m *MockControllerDomainServices) ControllerNode() *service10.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNode")
	ret0, _ := ret[0].(*service10.Service)
	return ret0
}

// ControllerNode indicates an expected call of ControllerNode.
func (mr *MockControllerDomainServicesMockRecorder) ControllerNode() *MockControllerDomainServicesControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNode", reflect.TypeOf((*MockControllerDomainServices)(nil).ControllerNode))
	return &MockControllerDomainServicesControllerNodeCall{Call: call}
}

// MockControllerDomainServicesControllerNodeCall wrap *gomock.Call
type MockControllerDomainServicesControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesControllerNodeCall) Return(arg0 *service10.Service) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesControllerNodeCall) Do(f func() *service10.Service) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesControllerNodeCall) DoAndReturn(f func() *service10.Service) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Credential mocks base method.
func (m *MockControllerDomainServices) Credential() *service11.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credential")
	ret0, _ := ret[0].(*service11.WatchableService)
	return ret0
}

// Credential indicates an expected call of Credential.
func (mr *MockControllerDomainServicesMockRecorder) Credential() *MockControllerDomainServicesCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credential", reflect.TypeOf((*MockControllerDomainServices)(nil).Credential))
	return &MockControllerDomainServicesCredentialCall{Call: call}
}

// MockControllerDomainServicesCredentialCall wrap *gomock.Call
type MockControllerDomainServicesCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesCredentialCall) Return(arg0 *service11.WatchableService) *MockControllerDomainServicesCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesCredentialCall) Do(f func() *service11.WatchableService) *MockControllerDomainServicesCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesCredentialCall) DoAndReturn(f func() *service11.WatchableService) *MockControllerDomainServicesCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExternalController mocks base method.
func (m *MockControllerDomainServices) ExternalController() *service12.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalController")
	ret0, _ := ret[0].(*service12.WatchableService)
	return ret0
}

// ExternalController indicates an expected call of ExternalController.
func (mr *MockControllerDomainServicesMockRecorder) ExternalController() *MockControllerDomainServicesExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalController", reflect.TypeOf((*MockControllerDomainServices)(nil).ExternalController))
	return &MockControllerDomainServicesExternalControllerCall{Call: call}
}

// MockControllerDomainServicesExternalControllerCall wrap *gomock.Call
type MockControllerDomainServicesExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesExternalControllerCall) Return(arg0 *service12.WatchableService) *MockControllerDomainServicesExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesExternalControllerCall) Do(f func() *service12.WatchableService) *MockControllerDomainServicesExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesExternalControllerCall) DoAndReturn(f func() *service12.WatchableService) *MockControllerDomainServicesExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Flag mocks base method.
func (m *MockControllerDomainServices) Flag() *service13.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flag")
	ret0, _ := ret[0].(*service13.Service)
	return ret0
}

// Flag indicates an expected call of Flag.
func (mr *MockControllerDomainServicesMockRecorder) Flag() *MockControllerDomainServicesFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flag", reflect.TypeOf((*MockControllerDomainServices)(nil).Flag))
	return &MockControllerDomainServicesFlagCall{Call: call}
}

// MockControllerDomainServicesFlagCall wrap *gomock.Call
type MockControllerDomainServicesFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesFlagCall) Return(arg0 *service13.Service) *MockControllerDomainServicesFlagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesFlagCall) Do(f func() *service13.Service) *MockControllerDomainServicesFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesFlagCall) DoAndReturn(f func() *service13.Service) *MockControllerDomainServicesFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Macaroon mocks base method.
func (m *MockControllerDomainServices) Macaroon() *service16.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(*service16.Service)
	return ret0
}

// Macaroon indicates an expected call of Macaroon.
func (mr *MockControllerDomainServicesMockRecorder) Macaroon() *MockControllerDomainServicesMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockControllerDomainServices)(nil).Macaroon))
	return &MockControllerDomainServicesMacaroonCall{Call: call}
}

// MockControllerDomainServicesMacaroonCall wrap *gomock.Call
type MockControllerDomainServicesMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesMacaroonCall) Return(arg0 *service16.Service) *MockControllerDomainServicesMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesMacaroonCall) Do(f func() *service16.Service) *MockControllerDomainServicesMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesMacaroonCall) DoAndReturn(f func() *service16.Service) *MockControllerDomainServicesMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockControllerDomainServices) Model() *service18.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(*service18.Service)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockControllerDomainServicesMockRecorder) Model() *MockControllerDomainServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockControllerDomainServices)(nil).Model))
	return &MockControllerDomainServicesModelCall{Call: call}
}

// MockControllerDomainServicesModelCall wrap *gomock.Call
type MockControllerDomainServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesModelCall) Return(arg0 *service18.Service) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesModelCall) Do(f func() *service18.Service) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesModelCall) DoAndReturn(f func() *service18.Service) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelDefaults mocks base method.
func (m *MockControllerDomainServices) ModelDefaults() *service21.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelDefaults")
	ret0, _ := ret[0].(*service21.Service)
	return ret0
}

// ModelDefaults indicates an expected call of ModelDefaults.
func (mr *MockControllerDomainServicesMockRecorder) ModelDefaults() *MockControllerDomainServicesModelDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelDefaults", reflect.TypeOf((*MockControllerDomainServices)(nil).ModelDefaults))
	return &MockControllerDomainServicesModelDefaultsCall{Call: call}
}

// MockControllerDomainServicesModelDefaultsCall wrap *gomock.Call
type MockControllerDomainServicesModelDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesModelDefaultsCall) Return(arg0 *service21.Service) *MockControllerDomainServicesModelDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesModelDefaultsCall) Do(f func() *service21.Service) *MockControllerDomainServicesModelDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesModelDefaultsCall) DoAndReturn(f func() *service21.Service) *MockControllerDomainServicesModelDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretBackend mocks base method.
func (m *MockControllerDomainServices) SecretBackend() *service28.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretBackend")
	ret0, _ := ret[0].(*service28.WatchableService)
	return ret0
}

// SecretBackend indicates an expected call of SecretBackend.
func (mr *MockControllerDomainServicesMockRecorder) SecretBackend() *MockControllerDomainServicesSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretBackend", reflect.TypeOf((*MockControllerDomainServices)(nil).SecretBackend))
	return &MockControllerDomainServicesSecretBackendCall{Call: call}
}

// MockControllerDomainServicesSecretBackendCall wrap *gomock.Call
type MockControllerDomainServicesSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesSecretBackendCall) Return(arg0 *service28.WatchableService) *MockControllerDomainServicesSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesSecretBackendCall) Do(f func() *service28.WatchableService) *MockControllerDomainServicesSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesSecretBackendCall) DoAndReturn(f func() *service28.WatchableService) *MockControllerDomainServicesSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Upgrade mocks base method.
func (m *MockControllerDomainServices) Upgrade() *service31.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade")
	ret0, _ := ret[0].(*service31.WatchableService)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockControllerDomainServicesMockRecorder) Upgrade() *MockControllerDomainServicesUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockControllerDomainServices)(nil).Upgrade))
	return &MockControllerDomainServicesUpgradeCall{Call: call}
}

// MockControllerDomainServicesUpgradeCall wrap *gomock.Call
type MockControllerDomainServicesUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesUpgradeCall) Return(arg0 *service31.WatchableService) *MockControllerDomainServicesUpgradeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesUpgradeCall) Do(f func() *service31.WatchableService) *MockControllerDomainServicesUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesUpgradeCall) DoAndReturn(f func() *service31.WatchableService) *MockControllerDomainServicesUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDomainServices is a mock of ModelDomainServices interface.
type MockModelDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockModelDomainServicesMockRecorder
}

// MockModelDomainServicesMockRecorder is the mock recorder for MockModelDomainServices.
type MockModelDomainServicesMockRecorder struct {
	mock *MockModelDomainServices
}

// NewMockModelDomainServices creates a new mock instance.
func NewMockModelDomainServices(ctrl *gomock.Controller) *MockModelDomainServices {
	mock := &MockModelDomainServices{ctrl: ctrl}
	mock.recorder = &MockModelDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDomainServices) EXPECT() *MockModelDomainServicesMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelDomainServices) ISGOMOCK() struct{} {
	return struct{}{}
}

// Agent mocks base method.
func (m *MockModelDomainServices) Agent() *service19.ModelService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(*service19.ModelService)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockModelDomainServicesMockRecorder) Agent() *MockModelDomainServicesAgentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockModelDomainServices)(nil).Agent))
	return &MockModelDomainServicesAgentCall{Call: call}
}

// MockModelDomainServicesAgentCall wrap *gomock.Call
type MockModelDomainServicesAgentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesAgentCall) Return(arg0 *service19.ModelService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesAgentCall) Do(f func() *service19.ModelService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesAgentCall) DoAndReturn(f func() *service19.ModelService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentProvisioner mocks base method.
func (m *MockModelDomainServices) AgentProvisioner() *service0.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentProvisioner")
	ret0, _ := ret[0].(*service0.Service)
	return ret0
}

// AgentProvisioner indicates an expected call of AgentProvisioner.
func (mr *MockModelDomainServicesMockRecorder) AgentProvisioner() *MockModelDomainServicesAgentProvisionerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentProvisioner", reflect.TypeOf((*MockModelDomainServices)(nil).AgentProvisioner))
	return &MockModelDomainServicesAgentProvisionerCall{Call: call}
}

// MockModelDomainServicesAgentProvisionerCall wrap *gomock.Call
type MockModelDomainServicesAgentProvisionerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesAgentProvisionerCall) Return(arg0 *service0.Service) *MockModelDomainServicesAgentProvisionerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesAgentProvisionerCall) Do(f func() *service0.Service) *MockModelDomainServicesAgentProvisionerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesAgentProvisionerCall) DoAndReturn(f func() *service0.Service) *MockModelDomainServicesAgentProvisionerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Annotation mocks base method.
func (m *MockModelDomainServices) Annotation() *service1.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotation")
	ret0, _ := ret[0].(*service1.Service)
	return ret0
}

// Annotation indicates an expected call of Annotation.
func (mr *MockModelDomainServicesMockRecorder) Annotation() *MockModelDomainServicesAnnotationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotation", reflect.TypeOf((*MockModelDomainServices)(nil).Annotation))
	return &MockModelDomainServicesAnnotationCall{Call: call}
}

// MockModelDomainServicesAnnotationCall wrap *gomock.Call
type MockModelDomainServicesAnnotationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesAnnotationCall) Return(arg0 *service1.Service) *MockModelDomainServicesAnnotationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesAnnotationCall) Do(f func() *service1.Service) *MockModelDomainServicesAnnotationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesAnnotationCall) DoAndReturn(f func() *service1.Service) *MockModelDomainServicesAnnotationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Application mocks base method.
func (m *MockModelDomainServices) Application() *service2.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(*service2.WatchableService)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockModelDomainServicesMockRecorder) Application() *MockModelDomainServicesApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockModelDomainServices)(nil).Application))
	return &MockModelDomainServicesApplicationCall{Call: call}
}

// MockModelDomainServicesApplicationCall wrap *gomock.Call
type MockModelDomainServicesApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesApplicationCall) Return(arg0 *service2.WatchableService) *MockModelDomainServicesApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesApplicationCall) Do(f func() *service2.WatchableService) *MockModelDomainServicesApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesApplicationCall) DoAndReturn(f func() *service2.WatchableService) *MockModelDomainServicesApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockCommand mocks base method.
func (m *MockModelDomainServices) BlockCommand() *service4.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCommand")
	ret0, _ := ret[0].(*service4.Service)
	return ret0
}

// BlockCommand indicates an expected call of BlockCommand.
func (mr *MockModelDomainServicesMockRecorder) BlockCommand() *MockModelDomainServicesBlockCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCommand", reflect.TypeOf((*MockModelDomainServices)(nil).BlockCommand))
	return &MockModelDomainServicesBlockCommandCall{Call: call}
}

// MockModelDomainServicesBlockCommandCall wrap *gomock.Call
type MockModelDomainServicesBlockCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesBlockCommandCall) Return(arg0 *service4.Service) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesBlockCommandCall) Do(f func() *service4.Service) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesBlockCommandCall) DoAndReturn(f func() *service4.Service) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockDevice mocks base method.
func (m *MockModelDomainServices) BlockDevice() *service5.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevice")
	ret0, _ := ret[0].(*service5.WatchableService)
	return ret0
}

// BlockDevice indicates an expected call of BlockDevice.
func (mr *MockModelDomainServicesMockRecorder) BlockDevice() *MockModelDomainServicesBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevice", reflect.TypeOf((*MockModelDomainServices)(nil).BlockDevice))
	return &MockModelDomainServicesBlockDeviceCall{Call: call}
}

// MockModelDomainServicesBlockDeviceCall wrap *gomock.Call
type MockModelDomainServicesBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesBlockDeviceCall) Return(arg0 *service5.WatchableService) *MockModelDomainServicesBlockDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesBlockDeviceCall) Do(f func() *service5.WatchableService) *MockModelDomainServicesBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesBlockDeviceCall) DoAndReturn(f func() *service5.WatchableService) *MockModelDomainServicesBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudImageMetadata mocks base method.
func (m *MockModelDomainServices) CloudImageMetadata() *service7.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudImageMetadata")
	ret0, _ := ret[0].(*service7.Service)
	return ret0
}

// CloudImageMetadata indicates an expected call of CloudImageMetadata.
func (mr *MockModelDomainServicesMockRecorder) CloudImageMetadata() *MockModelDomainServicesCloudImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudImageMetadata", reflect.TypeOf((*MockModelDomainServices)(nil).CloudImageMetadata))
	return &MockModelDomainServicesCloudImageMetadataCall{Call: call}
}

// MockModelDomainServicesCloudImageMetadataCall wrap *gomock.Call
type MockModelDomainServicesCloudImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesCloudImageMetadataCall) Return(arg0 *service7.Service) *MockModelDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesCloudImageMetadataCall) Do(f func() *service7.Service) *MockModelDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesCloudImageMetadataCall) DoAndReturn(f func() *service7.Service) *MockModelDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockModelDomainServices) Config() *service20.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*service20.WatchableService)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockModelDomainServicesMockRecorder) Config() *MockModelDomainServicesConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockModelDomainServices)(nil).Config))
	return &MockModelDomainServicesConfigCall{Call: call}
}

// MockModelDomainServicesConfigCall wrap *gomock.Call
type MockModelDomainServicesConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesConfigCall) Return(arg0 *service20.WatchableService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesConfigCall) Do(f func() *service20.WatchableService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesConfigCall) DoAndReturn(f func() *service20.WatchableService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyManager mocks base method.
func (m *MockModelDomainServices) KeyManager() *service14.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyManager")
	ret0, _ := ret[0].(*service14.Service)
	return ret0
}

// KeyManager indicates an expected call of KeyManager.
func (mr *MockModelDomainServicesMockRecorder) KeyManager() *MockModelDomainServicesKeyManagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyManager", reflect.TypeOf((*MockModelDomainServices)(nil).KeyManager))
	return &MockModelDomainServicesKeyManagerCall{Call: call}
}

// MockModelDomainServicesKeyManagerCall wrap *gomock.Call
type MockModelDomainServicesKeyManagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesKeyManagerCall) Return(arg0 *service14.Service) *MockModelDomainServicesKeyManagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesKeyManagerCall) Do(f func() *service14.Service) *MockModelDomainServicesKeyManagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesKeyManagerCall) DoAndReturn(f func() *service14.Service) *MockModelDomainServicesKeyManagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyManagerWithImporter mocks base method.
func (m *MockModelDomainServices) KeyManagerWithImporter() *service14.ImporterService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyManagerWithImporter")
	ret0, _ := ret[0].(*service14.ImporterService)
	return ret0
}

// KeyManagerWithImporter indicates an expected call of KeyManagerWithImporter.
func (mr *MockModelDomainServicesMockRecorder) KeyManagerWithImporter() *MockModelDomainServicesKeyManagerWithImporterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyManagerWithImporter", reflect.TypeOf((*MockModelDomainServices)(nil).KeyManagerWithImporter))
	return &MockModelDomainServicesKeyManagerWithImporterCall{Call: call}
}

// MockModelDomainServicesKeyManagerWithImporterCall wrap *gomock.Call
type MockModelDomainServicesKeyManagerWithImporterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesKeyManagerWithImporterCall) Return(arg0 *service14.ImporterService) *MockModelDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesKeyManagerWithImporterCall) Do(f func() *service14.ImporterService) *MockModelDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesKeyManagerWithImporterCall) DoAndReturn(f func() *service14.ImporterService) *MockModelDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyUpdater mocks base method.
func (m *MockModelDomainServices) KeyUpdater() *service15.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyUpdater")
	ret0, _ := ret[0].(*service15.WatchableService)
	return ret0
}

// KeyUpdater indicates an expected call of KeyUpdater.
func (mr *MockModelDomainServicesMockRecorder) KeyUpdater() *MockModelDomainServicesKeyUpdaterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyUpdater", reflect.TypeOf((*MockModelDomainServices)(nil).KeyUpdater))
	return &MockModelDomainServicesKeyUpdaterCall{Call: call}
}

// MockModelDomainServicesKeyUpdaterCall wrap *gomock.Call
type MockModelDomainServicesKeyUpdaterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesKeyUpdaterCall) Return(arg0 *service15.WatchableService) *MockModelDomainServicesKeyUpdaterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesKeyUpdaterCall) Do(f func() *service15.WatchableService) *MockModelDomainServicesKeyUpdaterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesKeyUpdaterCall) DoAndReturn(f func() *service15.WatchableService) *MockModelDomainServicesKeyUpdaterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockModelDomainServices) Machine() *service17.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine")
	ret0, _ := ret[0].(*service17.WatchableService)
	return ret0
}

// Machine indicates an expected call of Machine.
func (mr *MockModelDomainServicesMockRecorder) Machine() *MockModelDomainServicesMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockModelDomainServices)(nil).Machine))
	return &MockModelDomainServicesMachineCall{Call: call}
}

// MockModelDomainServicesMachineCall wrap *gomock.Call
type MockModelDomainServicesMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesMachineCall) Return(arg0 *service17.WatchableService) *MockModelDomainServicesMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesMachineCall) Do(f func() *service17.WatchableService) *MockModelDomainServicesMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesMachineCall) DoAndReturn(f func() *service17.WatchableService) *MockModelDomainServicesMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelInfo mocks base method.
func (m *MockModelDomainServices) ModelInfo() *service18.ModelService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo")
	ret0, _ := ret[0].(*service18.ModelService)
	return ret0
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockModelDomainServicesMockRecorder) ModelInfo() *MockModelDomainServicesModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockModelDomainServices)(nil).ModelInfo))
	return &MockModelDomainServicesModelInfoCall{Call: call}
}

// MockModelDomainServicesModelInfoCall wrap *gomock.Call
type MockModelDomainServicesModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesModelInfoCall) Return(arg0 *service18.ModelService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesModelInfoCall) Do(f func() *service18.ModelService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesModelInfoCall) DoAndReturn(f func() *service18.ModelService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelMigration mocks base method.
func (m *MockModelDomainServices) ModelMigration() *service22.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMigration")
	ret0, _ := ret[0].(*service22.Service)
	return ret0
}

// ModelMigration indicates an expected call of ModelMigration.
func (mr *MockModelDomainServicesMockRecorder) ModelMigration() *MockModelDomainServicesModelMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMigration", reflect.TypeOf((*MockModelDomainServices)(nil).ModelMigration))
	return &MockModelDomainServicesModelMigrationCall{Call: call}
}

// MockModelDomainServicesModelMigrationCall wrap *gomock.Call
type MockModelDomainServicesModelMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesModelMigrationCall) Return(arg0 *service22.Service) *MockModelDomainServicesModelMigrationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesModelMigrationCall) Do(f func() *service22.Service) *MockModelDomainServicesModelMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesModelMigrationCall) DoAndReturn(f func() *service22.Service) *MockModelDomainServicesModelMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelSecretBackend mocks base method.
func (m *MockModelDomainServices) ModelSecretBackend() *service28.ModelSecretBackendService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelSecretBackend")
	ret0, _ := ret[0].(*service28.ModelSecretBackendService)
	return ret0
}

// ModelSecretBackend indicates an expected call of ModelSecretBackend.
func (mr *MockModelDomainServicesMockRecorder) ModelSecretBackend() *MockModelDomainServicesModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelSecretBackend", reflect.TypeOf((*MockModelDomainServices)(nil).ModelSecretBackend))
	return &MockModelDomainServicesModelSecretBackendCall{Call: call}
}

// MockModelDomainServicesModelSecretBackendCall wrap *gomock.Call
type MockModelDomainServicesModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesModelSecretBackendCall) Return(arg0 *service28.ModelSecretBackendService) *MockModelDomainServicesModelSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesModelSecretBackendCall) Do(f func() *service28.ModelSecretBackendService) *MockModelDomainServicesModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesModelSecretBackendCall) DoAndReturn(f func() *service28.ModelSecretBackendService) *MockModelDomainServicesModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Network mocks base method.
func (m *MockModelDomainServices) Network() *service23.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(*service23.WatchableService)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockModelDomainServicesMockRecorder) Network() *MockModelDomainServicesNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockModelDomainServices)(nil).Network))
	return &MockModelDomainServicesNetworkCall{Call: call}
}

// MockModelDomainServicesNetworkCall wrap *gomock.Call
type MockModelDomainServicesNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesNetworkCall) Return(arg0 *service23.WatchableService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesNetworkCall) Do(f func() *service23.WatchableService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesNetworkCall) DoAndReturn(f func() *service23.WatchableService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Port mocks base method.
func (m *MockModelDomainServices) Port() *service24.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(*service24.WatchableService)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockModelDomainServicesMockRecorder) Port() *MockModelDomainServicesPortCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockModelDomainServices)(nil).Port))
	return &MockModelDomainServicesPortCall{Call: call}
}

// MockModelDomainServicesPortCall wrap *gomock.Call
type MockModelDomainServicesPortCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesPortCall) Return(arg0 *service24.WatchableService) *MockModelDomainServicesPortCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesPortCall) Do(f func() *service24.WatchableService) *MockModelDomainServicesPortCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesPortCall) DoAndReturn(f func() *service24.WatchableService) *MockModelDomainServicesPortCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Proxy mocks base method.
func (m *MockModelDomainServices) Proxy() *service25.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proxy")
	ret0, _ := ret[0].(*service25.Service)
	return ret0
}

// Proxy indicates an expected call of Proxy.
func (mr *MockModelDomainServicesMockRecorder) Proxy() *MockModelDomainServicesProxyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockModelDomainServices)(nil).Proxy))
	return &MockModelDomainServicesProxyCall{Call: call}
}

// MockModelDomainServicesProxyCall wrap *gomock.Call
type MockModelDomainServicesProxyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesProxyCall) Return(arg0 *service25.Service) *MockModelDomainServicesProxyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesProxyCall) Do(f func() *service25.Service) *MockModelDomainServicesProxyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesProxyCall) DoAndReturn(f func() *service25.Service) *MockModelDomainServicesProxyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resource mocks base method.
func (m *MockModelDomainServices) Resource() *service26.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource")
	ret0, _ := ret[0].(*service26.Service)
	return ret0
}

// Resource indicates an expected call of Resource.
func (mr *MockModelDomainServicesMockRecorder) Resource() *MockModelDomainServicesResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockModelDomainServices)(nil).Resource))
	return &MockModelDomainServicesResourceCall{Call: call}
}

// MockModelDomainServicesResourceCall wrap *gomock.Call
type MockModelDomainServicesResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesResourceCall) Return(arg0 *service26.Service) *MockModelDomainServicesResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesResourceCall) Do(f func() *service26.Service) *MockModelDomainServicesResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesResourceCall) DoAndReturn(f func() *service26.Service) *MockModelDomainServicesResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Secret mocks base method.
func (m *MockModelDomainServices) Secret(arg0 service27.SecretServiceParams) *service27.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret", arg0)
	ret0, _ := ret[0].(*service27.WatchableService)
	return ret0
}

// Secret indicates an expected call of Secret.
func (mr *MockModelDomainServicesMockRecorder) Secret(arg0 any) *MockModelDomainServicesSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockModelDomainServices)(nil).Secret), arg0)
	return &MockModelDomainServicesSecretCall{Call: call}
}

// MockModelDomainServicesSecretCall wrap *gomock.Call
type MockModelDomainServicesSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesSecretCall) Return(arg0 *service27.WatchableService) *MockModelDomainServicesSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesSecretCall) Do(f func(service27.SecretServiceParams) *service27.WatchableService) *MockModelDomainServicesSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesSecretCall) DoAndReturn(f func(service27.SecretServiceParams) *service27.WatchableService) *MockModelDomainServicesSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storage mocks base method.
func (m *MockModelDomainServices) Storage() *service29.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(*service29.Service)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockModelDomainServicesMockRecorder) Storage() *MockModelDomainServicesStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockModelDomainServices)(nil).Storage))
	return &MockModelDomainServicesStorageCall{Call: call}
}

// MockModelDomainServicesStorageCall wrap *gomock.Call
type MockModelDomainServicesStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesStorageCall) Return(arg0 *service29.Service) *MockModelDomainServicesStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesStorageCall) Do(f func() *service29.Service) *MockModelDomainServicesStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesStorageCall) DoAndReturn(f func() *service29.Service) *MockModelDomainServicesStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stub mocks base method.
func (m *MockModelDomainServices) Stub() *stub.StubService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stub")
	ret0, _ := ret[0].(*stub.StubService)
	return ret0
}

// Stub indicates an expected call of Stub.
func (mr *MockModelDomainServicesMockRecorder) Stub() *MockModelDomainServicesStubCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stub", reflect.TypeOf((*MockModelDomainServices)(nil).Stub))
	return &MockModelDomainServicesStubCall{Call: call}
}

// MockModelDomainServicesStubCall wrap *gomock.Call
type MockModelDomainServicesStubCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesStubCall) Return(arg0 *stub.StubService) *MockModelDomainServicesStubCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesStubCall) Do(f func() *stub.StubService) *MockModelDomainServicesStubCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesStubCall) DoAndReturn(f func() *stub.StubService) *MockModelDomainServicesStubCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitState mocks base method.
func (m *MockModelDomainServices) UnitState() *service30.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitState")
	ret0, _ := ret[0].(*service30.Service)
	return ret0
}

// UnitState indicates an expected call of UnitState.
func (mr *MockModelDomainServicesMockRecorder) UnitState() *MockModelDomainServicesUnitStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitState", reflect.TypeOf((*MockModelDomainServices)(nil).UnitState))
	return &MockModelDomainServicesUnitStateCall{Call: call}
}

// MockModelDomainServicesUnitStateCall wrap *gomock.Call
type MockModelDomainServicesUnitStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesUnitStateCall) Return(arg0 *service30.Service) *MockModelDomainServicesUnitStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesUnitStateCall) Do(f func() *service30.Service) *MockModelDomainServicesUnitStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesUnitStateCall) DoAndReturn(f func() *service30.Service) *MockModelDomainServicesUnitStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServices is a mock of DomainServices interface.
type MockDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesMockRecorder
}

// MockDomainServicesMockRecorder is the mock recorder for MockDomainServices.
type MockDomainServicesMockRecorder struct {
	mock *MockDomainServices
}

// NewMockDomainServices creates a new mock instance.
func NewMockDomainServices(ctrl *gomock.Controller) *MockDomainServices {
	mock := &MockDomainServices{ctrl: ctrl}
	mock.recorder = &MockDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServices) EXPECT() *MockDomainServicesMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDomainServices) ISGOMOCK() struct{} {
	return struct{}{}
}

// Access mocks base method.
func (m *MockDomainServices) Access() *service.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access")
	ret0, _ := ret[0].(*service.Service)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockDomainServicesMockRecorder) Access() *MockDomainServicesAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockDomainServices)(nil).Access))
	return &MockDomainServicesAccessCall{Call: call}
}

// MockDomainServicesAccessCall wrap *gomock.Call
type MockDomainServicesAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAccessCall) Return(arg0 *service.Service) *MockDomainServicesAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAccessCall) Do(f func() *service.Service) *MockDomainServicesAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAccessCall) DoAndReturn(f func() *service.Service) *MockDomainServicesAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Agent mocks base method.
func (m *MockDomainServices) Agent() *service19.ModelService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(*service19.ModelService)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockDomainServicesMockRecorder) Agent() *MockDomainServicesAgentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockDomainServices)(nil).Agent))
	return &MockDomainServicesAgentCall{Call: call}
}

// MockDomainServicesAgentCall wrap *gomock.Call
type MockDomainServicesAgentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAgentCall) Return(arg0 *service19.ModelService) *MockDomainServicesAgentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAgentCall) Do(f func() *service19.ModelService) *MockDomainServicesAgentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAgentCall) DoAndReturn(f func() *service19.ModelService) *MockDomainServicesAgentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentProvisioner mocks base method.
func (m *MockDomainServices) AgentProvisioner() *service0.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentProvisioner")
	ret0, _ := ret[0].(*service0.Service)
	return ret0
}

// AgentProvisioner indicates an expected call of AgentProvisioner.
func (mr *MockDomainServicesMockRecorder) AgentProvisioner() *MockDomainServicesAgentProvisionerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentProvisioner", reflect.TypeOf((*MockDomainServices)(nil).AgentProvisioner))
	return &MockDomainServicesAgentProvisionerCall{Call: call}
}

// MockDomainServicesAgentProvisionerCall wrap *gomock.Call
type MockDomainServicesAgentProvisionerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAgentProvisionerCall) Return(arg0 *service0.Service) *MockDomainServicesAgentProvisionerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAgentProvisionerCall) Do(f func() *service0.Service) *MockDomainServicesAgentProvisionerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAgentProvisionerCall) DoAndReturn(f func() *service0.Service) *MockDomainServicesAgentProvisionerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Annotation mocks base method.
func (m *MockDomainServices) Annotation() *service1.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotation")
	ret0, _ := ret[0].(*service1.Service)
	return ret0
}

// Annotation indicates an expected call of Annotation.
func (mr *MockDomainServicesMockRecorder) Annotation() *MockDomainServicesAnnotationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotation", reflect.TypeOf((*MockDomainServices)(nil).Annotation))
	return &MockDomainServicesAnnotationCall{Call: call}
}

// MockDomainServicesAnnotationCall wrap *gomock.Call
type MockDomainServicesAnnotationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAnnotationCall) Return(arg0 *service1.Service) *MockDomainServicesAnnotationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAnnotationCall) Do(f func() *service1.Service) *MockDomainServicesAnnotationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAnnotationCall) DoAndReturn(f func() *service1.Service) *MockDomainServicesAnnotationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Application mocks base method.
func (m *MockDomainServices) Application() *service2.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(*service2.WatchableService)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockDomainServicesMockRecorder) Application() *MockDomainServicesApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockDomainServices)(nil).Application))
	return &MockDomainServicesApplicationCall{Call: call}
}

// MockDomainServicesApplicationCall wrap *gomock.Call
type MockDomainServicesApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesApplicationCall) Return(arg0 *service2.WatchableService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesApplicationCall) Do(f func() *service2.WatchableService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesApplicationCall) DoAndReturn(f func() *service2.WatchableService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AutocertCache mocks base method.
func (m *MockDomainServices) AutocertCache() *service3.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutocertCache")
	ret0, _ := ret[0].(*service3.Service)
	return ret0
}

// AutocertCache indicates an expected call of AutocertCache.
func (mr *MockDomainServicesMockRecorder) AutocertCache() *MockDomainServicesAutocertCacheCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutocertCache", reflect.TypeOf((*MockDomainServices)(nil).AutocertCache))
	return &MockDomainServicesAutocertCacheCall{Call: call}
}

// MockDomainServicesAutocertCacheCall wrap *gomock.Call
type MockDomainServicesAutocertCacheCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesAutocertCacheCall) Return(arg0 *service3.Service) *MockDomainServicesAutocertCacheCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesAutocertCacheCall) Do(f func() *service3.Service) *MockDomainServicesAutocertCacheCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesAutocertCacheCall) DoAndReturn(f func() *service3.Service) *MockDomainServicesAutocertCacheCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockCommand mocks base method.
func (m *MockDomainServices) BlockCommand() *service4.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCommand")
	ret0, _ := ret[0].(*service4.Service)
	return ret0
}

// BlockCommand indicates an expected call of BlockCommand.
func (mr *MockDomainServicesMockRecorder) BlockCommand() *MockDomainServicesBlockCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCommand", reflect.TypeOf((*MockDomainServices)(nil).BlockCommand))
	return &MockDomainServicesBlockCommandCall{Call: call}
}

// MockDomainServicesBlockCommandCall wrap *gomock.Call
type MockDomainServicesBlockCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesBlockCommandCall) Return(arg0 *service4.Service) *MockDomainServicesBlockCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesBlockCommandCall) Do(f func() *service4.Service) *MockDomainServicesBlockCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesBlockCommandCall) DoAndReturn(f func() *service4.Service) *MockDomainServicesBlockCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockDevice mocks base method.
func (m *MockDomainServices) BlockDevice() *service5.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevice")
	ret0, _ := ret[0].(*service5.WatchableService)
	return ret0
}

// BlockDevice indicates an expected call of BlockDevice.
func (mr *MockDomainServicesMockRecorder) BlockDevice() *MockDomainServicesBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevice", reflect.TypeOf((*MockDomainServices)(nil).BlockDevice))
	return &MockDomainServicesBlockDeviceCall{Call: call}
}

// MockDomainServicesBlockDeviceCall wrap *gomock.Call
type MockDomainServicesBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesBlockDeviceCall) Return(arg0 *service5.WatchableService) *MockDomainServicesBlockDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesBlockDeviceCall) Do(f func() *service5.WatchableService) *MockDomainServicesBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesBlockDeviceCall) DoAndReturn(f func() *service5.WatchableService) *MockDomainServicesBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cloud mocks base method.
func (m *MockDomainServices) Cloud() *service6.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(*service6.WatchableService)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockDomainServicesMockRecorder) Cloud() *MockDomainServicesCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockDomainServices)(nil).Cloud))
	return &MockDomainServicesCloudCall{Call: call}
}

// MockDomainServicesCloudCall wrap *gomock.Call
type MockDomainServicesCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesCloudCall) Return(arg0 *service6.WatchableService) *MockDomainServicesCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesCloudCall) Do(f func() *service6.WatchableService) *MockDomainServicesCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesCloudCall) DoAndReturn(f func() *service6.WatchableService) *MockDomainServicesCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudImageMetadata mocks base method.
func (m *MockDomainServices) CloudImageMetadata() *service7.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudImageMetadata")
	ret0, _ := ret[0].(*service7.Service)
	return ret0
}

// CloudImageMetadata indicates an expected call of CloudImageMetadata.
func (mr *MockDomainServicesMockRecorder) CloudImageMetadata() *MockDomainServicesCloudImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudImageMetadata", reflect.TypeOf((*MockDomainServices)(nil).CloudImageMetadata))
	return &MockDomainServicesCloudImageMetadataCall{Call: call}
}

// MockDomainServicesCloudImageMetadataCall wrap *gomock.Call
type MockDomainServicesCloudImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesCloudImageMetadataCall) Return(arg0 *service7.Service) *MockDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesCloudImageMetadataCall) Do(f func() *service7.Service) *MockDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesCloudImageMetadataCall) DoAndReturn(f func() *service7.Service) *MockDomainServicesCloudImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockDomainServices) Config() *service20.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*service20.WatchableService)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockDomainServicesMockRecorder) Config() *MockDomainServicesConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockDomainServices)(nil).Config))
	return &MockDomainServicesConfigCall{Call: call}
}

// MockDomainServicesConfigCall wrap *gomock.Call
type MockDomainServicesConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesConfigCall) Return(arg0 *service20.WatchableService) *MockDomainServicesConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesConfigCall) Do(f func() *service20.WatchableService) *MockDomainServicesConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesConfigCall) DoAndReturn(f func() *service20.WatchableService) *MockDomainServicesConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Controller mocks base method.
func (m *MockDomainServices) Controller() *service8.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller")
	ret0, _ := ret[0].(*service8.Service)
	return ret0
}

// Controller indicates an expected call of Controller.
func (mr *MockDomainServicesMockRecorder) Controller() *MockDomainServicesControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockDomainServices)(nil).Controller))
	return &MockDomainServicesControllerCall{Call: call}
}

// MockDomainServicesControllerCall wrap *gomock.Call
type MockDomainServicesControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerCall) Return(arg0 *service8.Service) *MockDomainServicesControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerCall) Do(f func() *service8.Service) *MockDomainServicesControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerCall) DoAndReturn(f func() *service8.Service) *MockDomainServicesControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerConfig mocks base method.
func (m *MockDomainServices) ControllerConfig() *service9.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(*service9.WatchableService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockDomainServicesMockRecorder) ControllerConfig() *MockDomainServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockDomainServices)(nil).ControllerConfig))
	return &MockDomainServicesControllerConfigCall{Call: call}
}

// MockDomainServicesControllerConfigCall wrap *gomock.Call
type MockDomainServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerConfigCall) Return(arg0 *service9.WatchableService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerConfigCall) Do(f func() *service9.WatchableService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerConfigCall) DoAndReturn(f func() *service9.WatchableService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerNode mocks base method.
func (m *MockDomainServices) ControllerNode() *service10.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNode")
	ret0, _ := ret[0].(*service10.Service)
	return ret0
}

// ControllerNode indicates an expected call of ControllerNode.
func (mr *MockDomainServicesMockRecorder) ControllerNode() *MockDomainServicesControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNode", reflect.TypeOf((*MockDomainServices)(nil).ControllerNode))
	return &MockDomainServicesControllerNodeCall{Call: call}
}

// MockDomainServicesControllerNodeCall wrap *gomock.Call
type MockDomainServicesControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerNodeCall) Return(arg0 *service10.Service) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerNodeCall) Do(f func() *service10.Service) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerNodeCall) DoAndReturn(f func() *service10.Service) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Credential mocks base method.
func (m *MockDomainServices) Credential() *service11.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credential")
	ret0, _ := ret[0].(*service11.WatchableService)
	return ret0
}

// Credential indicates an expected call of Credential.
func (mr *MockDomainServicesMockRecorder) Credential() *MockDomainServicesCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credential", reflect.TypeOf((*MockDomainServices)(nil).Credential))
	return &MockDomainServicesCredentialCall{Call: call}
}

// MockDomainServicesCredentialCall wrap *gomock.Call
type MockDomainServicesCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesCredentialCall) Return(arg0 *service11.WatchableService) *MockDomainServicesCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesCredentialCall) Do(f func() *service11.WatchableService) *MockDomainServicesCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesCredentialCall) DoAndReturn(f func() *service11.WatchableService) *MockDomainServicesCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExternalController mocks base method.
func (m *MockDomainServices) ExternalController() *service12.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalController")
	ret0, _ := ret[0].(*service12.WatchableService)
	return ret0
}

// ExternalController indicates an expected call of ExternalController.
func (mr *MockDomainServicesMockRecorder) ExternalController() *MockDomainServicesExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalController", reflect.TypeOf((*MockDomainServices)(nil).ExternalController))
	return &MockDomainServicesExternalControllerCall{Call: call}
}

// MockDomainServicesExternalControllerCall wrap *gomock.Call
type MockDomainServicesExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesExternalControllerCall) Return(arg0 *service12.WatchableService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesExternalControllerCall) Do(f func() *service12.WatchableService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesExternalControllerCall) DoAndReturn(f func() *service12.WatchableService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Flag mocks base method.
func (m *MockDomainServices) Flag() *service13.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flag")
	ret0, _ := ret[0].(*service13.Service)
	return ret0
}

// Flag indicates an expected call of Flag.
func (mr *MockDomainServicesMockRecorder) Flag() *MockDomainServicesFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flag", reflect.TypeOf((*MockDomainServices)(nil).Flag))
	return &MockDomainServicesFlagCall{Call: call}
}

// MockDomainServicesFlagCall wrap *gomock.Call
type MockDomainServicesFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesFlagCall) Return(arg0 *service13.Service) *MockDomainServicesFlagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesFlagCall) Do(f func() *service13.Service) *MockDomainServicesFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesFlagCall) DoAndReturn(f func() *service13.Service) *MockDomainServicesFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyManager mocks base method.
func (m *MockDomainServices) KeyManager() *service14.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyManager")
	ret0, _ := ret[0].(*service14.Service)
	return ret0
}

// KeyManager indicates an expected call of KeyManager.
func (mr *MockDomainServicesMockRecorder) KeyManager() *MockDomainServicesKeyManagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyManager", reflect.TypeOf((*MockDomainServices)(nil).KeyManager))
	return &MockDomainServicesKeyManagerCall{Call: call}
}

// MockDomainServicesKeyManagerCall wrap *gomock.Call
type MockDomainServicesKeyManagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesKeyManagerCall) Return(arg0 *service14.Service) *MockDomainServicesKeyManagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesKeyManagerCall) Do(f func() *service14.Service) *MockDomainServicesKeyManagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesKeyManagerCall) DoAndReturn(f func() *service14.Service) *MockDomainServicesKeyManagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyManagerWithImporter mocks base method.
func (m *MockDomainServices) KeyManagerWithImporter() *service14.ImporterService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyManagerWithImporter")
	ret0, _ := ret[0].(*service14.ImporterService)
	return ret0
}

// KeyManagerWithImporter indicates an expected call of KeyManagerWithImporter.
func (mr *MockDomainServicesMockRecorder) KeyManagerWithImporter() *MockDomainServicesKeyManagerWithImporterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyManagerWithImporter", reflect.TypeOf((*MockDomainServices)(nil).KeyManagerWithImporter))
	return &MockDomainServicesKeyManagerWithImporterCall{Call: call}
}

// MockDomainServicesKeyManagerWithImporterCall wrap *gomock.Call
type MockDomainServicesKeyManagerWithImporterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesKeyManagerWithImporterCall) Return(arg0 *service14.ImporterService) *MockDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesKeyManagerWithImporterCall) Do(f func() *service14.ImporterService) *MockDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesKeyManagerWithImporterCall) DoAndReturn(f func() *service14.ImporterService) *MockDomainServicesKeyManagerWithImporterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyUpdater mocks base method.
func (m *MockDomainServices) KeyUpdater() *service15.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyUpdater")
	ret0, _ := ret[0].(*service15.WatchableService)
	return ret0
}

// KeyUpdater indicates an expected call of KeyUpdater.
func (mr *MockDomainServicesMockRecorder) KeyUpdater() *MockDomainServicesKeyUpdaterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyUpdater", reflect.TypeOf((*MockDomainServices)(nil).KeyUpdater))
	return &MockDomainServicesKeyUpdaterCall{Call: call}
}

// MockDomainServicesKeyUpdaterCall wrap *gomock.Call
type MockDomainServicesKeyUpdaterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesKeyUpdaterCall) Return(arg0 *service15.WatchableService) *MockDomainServicesKeyUpdaterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesKeyUpdaterCall) Do(f func() *service15.WatchableService) *MockDomainServicesKeyUpdaterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesKeyUpdaterCall) DoAndReturn(f func() *service15.WatchableService) *MockDomainServicesKeyUpdaterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Macaroon mocks base method.
func (m *MockDomainServices) Macaroon() *service16.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Macaroon")
	ret0, _ := ret[0].(*service16.Service)
	return ret0
}

// Macaroon indicates an expected call of Macaroon.
func (mr *MockDomainServicesMockRecorder) Macaroon() *MockDomainServicesMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Macaroon", reflect.TypeOf((*MockDomainServices)(nil).Macaroon))
	return &MockDomainServicesMacaroonCall{Call: call}
}

// MockDomainServicesMacaroonCall wrap *gomock.Call
type MockDomainServicesMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesMacaroonCall) Return(arg0 *service16.Service) *MockDomainServicesMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesMacaroonCall) Do(f func() *service16.Service) *MockDomainServicesMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesMacaroonCall) DoAndReturn(f func() *service16.Service) *MockDomainServicesMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockDomainServices) Machine() *service17.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine")
	ret0, _ := ret[0].(*service17.WatchableService)
	return ret0
}

// Machine indicates an expected call of Machine.
func (mr *MockDomainServicesMockRecorder) Machine() *MockDomainServicesMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockDomainServices)(nil).Machine))
	return &MockDomainServicesMachineCall{Call: call}
}

// MockDomainServicesMachineCall wrap *gomock.Call
type MockDomainServicesMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesMachineCall) Return(arg0 *service17.WatchableService) *MockDomainServicesMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesMachineCall) Do(f func() *service17.WatchableService) *MockDomainServicesMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesMachineCall) DoAndReturn(f func() *service17.WatchableService) *MockDomainServicesMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockDomainServices) Model() *service18.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(*service18.Service)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDomainServicesMockRecorder) Model() *MockDomainServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDomainServices)(nil).Model))
	return &MockDomainServicesModelCall{Call: call}
}

// MockDomainServicesModelCall wrap *gomock.Call
type MockDomainServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelCall) Return(arg0 *service18.Service) *MockDomainServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelCall) Do(f func() *service18.Service) *MockDomainServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelCall) DoAndReturn(f func() *service18.Service) *MockDomainServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelDefaults mocks base method.
func (m *MockDomainServices) ModelDefaults() *service21.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelDefaults")
	ret0, _ := ret[0].(*service21.Service)
	return ret0
}

// ModelDefaults indicates an expected call of ModelDefaults.
func (mr *MockDomainServicesMockRecorder) ModelDefaults() *MockDomainServicesModelDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelDefaults", reflect.TypeOf((*MockDomainServices)(nil).ModelDefaults))
	return &MockDomainServicesModelDefaultsCall{Call: call}
}

// MockDomainServicesModelDefaultsCall wrap *gomock.Call
type MockDomainServicesModelDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelDefaultsCall) Return(arg0 *service21.Service) *MockDomainServicesModelDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelDefaultsCall) Do(f func() *service21.Service) *MockDomainServicesModelDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelDefaultsCall) DoAndReturn(f func() *service21.Service) *MockDomainServicesModelDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelInfo mocks base method.
func (m *MockDomainServices) ModelInfo() *service18.ModelService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo")
	ret0, _ := ret[0].(*service18.ModelService)
	return ret0
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockDomainServicesMockRecorder) ModelInfo() *MockDomainServicesModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockDomainServices)(nil).ModelInfo))
	return &MockDomainServicesModelInfoCall{Call: call}
}

// MockDomainServicesModelInfoCall wrap *gomock.Call
type MockDomainServicesModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelInfoCall) Return(arg0 *service18.ModelService) *MockDomainServicesModelInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelInfoCall) Do(f func() *service18.ModelService) *MockDomainServicesModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelInfoCall) DoAndReturn(f func() *service18.ModelService) *MockDomainServicesModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelMigration mocks base method.
func (m *MockDomainServices) ModelMigration() *service22.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMigration")
	ret0, _ := ret[0].(*service22.Service)
	return ret0
}

// ModelMigration indicates an expected call of ModelMigration.
func (mr *MockDomainServicesMockRecorder) ModelMigration() *MockDomainServicesModelMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMigration", reflect.TypeOf((*MockDomainServices)(nil).ModelMigration))
	return &MockDomainServicesModelMigrationCall{Call: call}
}

// MockDomainServicesModelMigrationCall wrap *gomock.Call
type MockDomainServicesModelMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelMigrationCall) Return(arg0 *service22.Service) *MockDomainServicesModelMigrationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelMigrationCall) Do(f func() *service22.Service) *MockDomainServicesModelMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelMigrationCall) DoAndReturn(f func() *service22.Service) *MockDomainServicesModelMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelSecretBackend mocks base method.
func (m *MockDomainServices) ModelSecretBackend() *service28.ModelSecretBackendService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelSecretBackend")
	ret0, _ := ret[0].(*service28.ModelSecretBackendService)
	return ret0
}

// ModelSecretBackend indicates an expected call of ModelSecretBackend.
func (mr *MockDomainServicesMockRecorder) ModelSecretBackend() *MockDomainServicesModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelSecretBackend", reflect.TypeOf((*MockDomainServices)(nil).ModelSecretBackend))
	return &MockDomainServicesModelSecretBackendCall{Call: call}
}

// MockDomainServicesModelSecretBackendCall wrap *gomock.Call
type MockDomainServicesModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelSecretBackendCall) Return(arg0 *service28.ModelSecretBackendService) *MockDomainServicesModelSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelSecretBackendCall) Do(f func() *service28.ModelSecretBackendService) *MockDomainServicesModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelSecretBackendCall) DoAndReturn(f func() *service28.ModelSecretBackendService) *MockDomainServicesModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Network mocks base method.
func (m *MockDomainServices) Network() *service23.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(*service23.WatchableService)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockDomainServicesMockRecorder) Network() *MockDomainServicesNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockDomainServices)(nil).Network))
	return &MockDomainServicesNetworkCall{Call: call}
}

// MockDomainServicesNetworkCall wrap *gomock.Call
type MockDomainServicesNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesNetworkCall) Return(arg0 *service23.WatchableService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesNetworkCall) Do(f func() *service23.WatchableService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesNetworkCall) DoAndReturn(f func() *service23.WatchableService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Port mocks base method.
func (m *MockDomainServices) Port() *service24.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(*service24.WatchableService)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockDomainServicesMockRecorder) Port() *MockDomainServicesPortCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockDomainServices)(nil).Port))
	return &MockDomainServicesPortCall{Call: call}
}

// MockDomainServicesPortCall wrap *gomock.Call
type MockDomainServicesPortCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesPortCall) Return(arg0 *service24.WatchableService) *MockDomainServicesPortCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesPortCall) Do(f func() *service24.WatchableService) *MockDomainServicesPortCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesPortCall) DoAndReturn(f func() *service24.WatchableService) *MockDomainServicesPortCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Proxy mocks base method.
func (m *MockDomainServices) Proxy() *service25.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proxy")
	ret0, _ := ret[0].(*service25.Service)
	return ret0
}

// Proxy indicates an expected call of Proxy.
func (mr *MockDomainServicesMockRecorder) Proxy() *MockDomainServicesProxyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockDomainServices)(nil).Proxy))
	return &MockDomainServicesProxyCall{Call: call}
}

// MockDomainServicesProxyCall wrap *gomock.Call
type MockDomainServicesProxyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesProxyCall) Return(arg0 *service25.Service) *MockDomainServicesProxyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesProxyCall) Do(f func() *service25.Service) *MockDomainServicesProxyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesProxyCall) DoAndReturn(f func() *service25.Service) *MockDomainServicesProxyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resource mocks base method.
func (m *MockDomainServices) Resource() *service26.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource")
	ret0, _ := ret[0].(*service26.Service)
	return ret0
}

// Resource indicates an expected call of Resource.
func (mr *MockDomainServicesMockRecorder) Resource() *MockDomainServicesResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockDomainServices)(nil).Resource))
	return &MockDomainServicesResourceCall{Call: call}
}

// MockDomainServicesResourceCall wrap *gomock.Call
type MockDomainServicesResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesResourceCall) Return(arg0 *service26.Service) *MockDomainServicesResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesResourceCall) Do(f func() *service26.Service) *MockDomainServicesResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesResourceCall) DoAndReturn(f func() *service26.Service) *MockDomainServicesResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Secret mocks base method.
func (m *MockDomainServices) Secret(arg0 service27.SecretServiceParams) *service27.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret", arg0)
	ret0, _ := ret[0].(*service27.WatchableService)
	return ret0
}

// Secret indicates an expected call of Secret.
func (mr *MockDomainServicesMockRecorder) Secret(arg0 any) *MockDomainServicesSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockDomainServices)(nil).Secret), arg0)
	return &MockDomainServicesSecretCall{Call: call}
}

// MockDomainServicesSecretCall wrap *gomock.Call
type MockDomainServicesSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesSecretCall) Return(arg0 *service27.WatchableService) *MockDomainServicesSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesSecretCall) Do(f func(service27.SecretServiceParams) *service27.WatchableService) *MockDomainServicesSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesSecretCall) DoAndReturn(f func(service27.SecretServiceParams) *service27.WatchableService) *MockDomainServicesSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretBackend mocks base method.
func (m *MockDomainServices) SecretBackend() *service28.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretBackend")
	ret0, _ := ret[0].(*service28.WatchableService)
	return ret0
}

// SecretBackend indicates an expected call of SecretBackend.
func (mr *MockDomainServicesMockRecorder) SecretBackend() *MockDomainServicesSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretBackend", reflect.TypeOf((*MockDomainServices)(nil).SecretBackend))
	return &MockDomainServicesSecretBackendCall{Call: call}
}

// MockDomainServicesSecretBackendCall wrap *gomock.Call
type MockDomainServicesSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesSecretBackendCall) Return(arg0 *service28.WatchableService) *MockDomainServicesSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesSecretBackendCall) Do(f func() *service28.WatchableService) *MockDomainServicesSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesSecretBackendCall) DoAndReturn(f func() *service28.WatchableService) *MockDomainServicesSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storage mocks base method.
func (m *MockDomainServices) Storage() *service29.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(*service29.Service)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockDomainServicesMockRecorder) Storage() *MockDomainServicesStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockDomainServices)(nil).Storage))
	return &MockDomainServicesStorageCall{Call: call}
}

// MockDomainServicesStorageCall wrap *gomock.Call
type MockDomainServicesStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesStorageCall) Return(arg0 *service29.Service) *MockDomainServicesStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesStorageCall) Do(f func() *service29.Service) *MockDomainServicesStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesStorageCall) DoAndReturn(f func() *service29.Service) *MockDomainServicesStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stub mocks base method.
func (m *MockDomainServices) Stub() *stub.StubService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stub")
	ret0, _ := ret[0].(*stub.StubService)
	return ret0
}

// Stub indicates an expected call of Stub.
func (mr *MockDomainServicesMockRecorder) Stub() *MockDomainServicesStubCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stub", reflect.TypeOf((*MockDomainServices)(nil).Stub))
	return &MockDomainServicesStubCall{Call: call}
}

// MockDomainServicesStubCall wrap *gomock.Call
type MockDomainServicesStubCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesStubCall) Return(arg0 *stub.StubService) *MockDomainServicesStubCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesStubCall) Do(f func() *stub.StubService) *MockDomainServicesStubCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesStubCall) DoAndReturn(f func() *stub.StubService) *MockDomainServicesStubCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitState mocks base method.
func (m *MockDomainServices) UnitState() *service30.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitState")
	ret0, _ := ret[0].(*service30.Service)
	return ret0
}

// UnitState indicates an expected call of UnitState.
func (mr *MockDomainServicesMockRecorder) UnitState() *MockDomainServicesUnitStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitState", reflect.TypeOf((*MockDomainServices)(nil).UnitState))
	return &MockDomainServicesUnitStateCall{Call: call}
}

// MockDomainServicesUnitStateCall wrap *gomock.Call
type MockDomainServicesUnitStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesUnitStateCall) Return(arg0 *service30.Service) *MockDomainServicesUnitStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesUnitStateCall) Do(f func() *service30.Service) *MockDomainServicesUnitStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesUnitStateCall) DoAndReturn(f func() *service30.Service) *MockDomainServicesUnitStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Upgrade mocks base method.
func (m *MockDomainServices) Upgrade() *service31.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade")
	ret0, _ := ret[0].(*service31.WatchableService)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockDomainServicesMockRecorder) Upgrade() *MockDomainServicesUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockDomainServices)(nil).Upgrade))
	return &MockDomainServicesUpgradeCall{Call: call}
}

// MockDomainServicesUpgradeCall wrap *gomock.Call
type MockDomainServicesUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesUpgradeCall) Return(arg0 *service31.WatchableService) *MockDomainServicesUpgradeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesUpgradeCall) Do(f func() *service31.WatchableService) *MockDomainServicesUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesUpgradeCall) DoAndReturn(f func() *service31.WatchableService) *MockDomainServicesUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDomainServicesGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// ServicesForModel mocks base method.
func (m *MockDomainServicesGetter) ServicesForModel(arg0 model.UUID) services.DomainServices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0)
	ret0, _ := ret[0].(services.DomainServices)
	return ret0
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) ServicesForModel(arg0 any) *MockDomainServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).ServicesForModel), arg0)
	return &MockDomainServicesGetterServicesForModelCall{Call: call}
}

// MockDomainServicesGetterServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterServicesForModelCall) Return(arg0 services.DomainServices) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterServicesForModelCall) Do(f func(model.UUID) services.DomainServices) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterServicesForModelCall) DoAndReturn(f func(model.UUID) services.DomainServices) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
