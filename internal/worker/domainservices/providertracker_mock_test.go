// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/providertracker (interfaces: Provider,ProviderFactory)
//
// Generated by this command:
//
//	mockgen -typed -package domainservices -destination providertracker_mock_test.go github.com/juju/juju/core/providertracker Provider,ProviderFactory
//

// Package domainservices is a generated GoMock package.
package domainservices

import (
	context "context"
	reflect "reflect"

	constraints "github.com/juju/juju/core/constraints"
	providertracker "github.com/juju/juju/core/providertracker"
	environs "github.com/juju/juju/environs"
	config "github.com/juju/juju/environs/config"
	envcontext "github.com/juju/juju/environs/envcontext"
	storage "github.com/juju/juju/internal/storage"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// AdoptResources mocks base method.
func (m *MockProvider) AdoptResources(arg0 envcontext.ProviderCallContext, arg1 string, arg2 version.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptResources indicates an expected call of AdoptResources.
func (mr *MockProviderMockRecorder) AdoptResources(arg0, arg1, arg2 any) *MockProviderAdoptResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptResources", reflect.TypeOf((*MockProvider)(nil).AdoptResources), arg0, arg1, arg2)
	return &MockProviderAdoptResourcesCall{Call: call}
}

// MockProviderAdoptResourcesCall wrap *gomock.Call
type MockProviderAdoptResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderAdoptResourcesCall) Return(arg0 error) *MockProviderAdoptResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderAdoptResourcesCall) Do(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockProviderAdoptResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderAdoptResourcesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockProviderAdoptResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bootstrap mocks base method.
func (m *MockProvider) Bootstrap(arg0 environs.BootstrapContext, arg1 envcontext.ProviderCallContext, arg2 environs.BootstrapParams) (*environs.BootstrapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*environs.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockProviderMockRecorder) Bootstrap(arg0, arg1, arg2 any) *MockProviderBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockProvider)(nil).Bootstrap), arg0, arg1, arg2)
	return &MockProviderBootstrapCall{Call: call}
}

// MockProviderBootstrapCall wrap *gomock.Call
type MockProviderBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderBootstrapCall) Return(arg0 *environs.BootstrapResult, arg1 error) *MockProviderBootstrapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderBootstrapCall) Do(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockProviderBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockProviderBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockProvider) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockProviderMockRecorder) Config() *MockProviderConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockProvider)(nil).Config))
	return &MockProviderConfigCall{Call: call}
}

// MockProviderConfigCall wrap *gomock.Call
type MockProviderConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderConfigCall) Return(arg0 *config.Config) *MockProviderConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderConfigCall) Do(f func() *config.Config) *MockProviderConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderConfigCall) DoAndReturn(f func() *config.Config) *MockProviderConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsValidator mocks base method.
func (m *MockProvider) ConstraintsValidator(arg0 envcontext.ProviderCallContext) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockProviderMockRecorder) ConstraintsValidator(arg0 any) *MockProviderConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockProvider)(nil).ConstraintsValidator), arg0)
	return &MockProviderConstraintsValidatorCall{Call: call}
}

// MockProviderConstraintsValidatorCall wrap *gomock.Call
type MockProviderConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockProviderConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderConstraintsValidatorCall) Do(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockProviderConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderConstraintsValidatorCall) DoAndReturn(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockProviderConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockProvider) Create(arg0 envcontext.ProviderCallContext, arg1 environs.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProviderMockRecorder) Create(arg0, arg1 any) *MockProviderCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProvider)(nil).Create), arg0, arg1)
	return &MockProviderCreateCall{Call: call}
}

// MockProviderCreateCall wrap *gomock.Call
type MockProviderCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderCreateCall) Return(arg0 error) *MockProviderCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderCreateCall) Do(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockProviderCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderCreateCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockProviderCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockProvider) Destroy(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockProviderMockRecorder) Destroy(arg0 any) *MockProviderDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProvider)(nil).Destroy), arg0)
	return &MockProviderDestroyCall{Call: call}
}

// MockProviderDestroyCall wrap *gomock.Call
type MockProviderDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderDestroyCall) Return(arg0 error) *MockProviderDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderDestroyCall) Do(f func(envcontext.ProviderCallContext) error) *MockProviderDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderDestroyCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockProviderDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyController mocks base method.
func (m *MockProvider) DestroyController(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyController indicates an expected call of DestroyController.
func (mr *MockProviderMockRecorder) DestroyController(arg0, arg1 any) *MockProviderDestroyControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyController", reflect.TypeOf((*MockProvider)(nil).DestroyController), arg0, arg1)
	return &MockProviderDestroyControllerCall{Call: call}
}

// MockProviderDestroyControllerCall wrap *gomock.Call
type MockProviderDestroyControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderDestroyControllerCall) Return(arg0 error) *MockProviderDestroyControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderDestroyControllerCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockProviderDestroyControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderDestroyControllerCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockProviderDestroyControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrecheckInstance mocks base method.
func (m *MockProvider) PrecheckInstance(arg0 envcontext.ProviderCallContext, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockProviderMockRecorder) PrecheckInstance(arg0, arg1 any) *MockProviderPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockProvider)(nil).PrecheckInstance), arg0, arg1)
	return &MockProviderPrecheckInstanceCall{Call: call}
}

// MockProviderPrecheckInstanceCall wrap *gomock.Call
type MockProviderPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderPrecheckInstanceCall) Return(arg0 error) *MockProviderPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderPrecheckInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockProviderPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderPrecheckInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockProviderPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareForBootstrap mocks base method.
func (m *MockProvider) PrepareForBootstrap(arg0 environs.BootstrapContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForBootstrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareForBootstrap indicates an expected call of PrepareForBootstrap.
func (mr *MockProviderMockRecorder) PrepareForBootstrap(arg0, arg1 any) *MockProviderPrepareForBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForBootstrap", reflect.TypeOf((*MockProvider)(nil).PrepareForBootstrap), arg0, arg1)
	return &MockProviderPrepareForBootstrapCall{Call: call}
}

// MockProviderPrepareForBootstrapCall wrap *gomock.Call
type MockProviderPrepareForBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderPrepareForBootstrapCall) Return(arg0 error) *MockProviderPrepareForBootstrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderPrepareForBootstrapCall) Do(f func(environs.BootstrapContext, string) error) *MockProviderPrepareForBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderPrepareForBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, string) error) *MockProviderPrepareForBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockProvider) SetConfig(arg0 context.Context, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockProviderMockRecorder) SetConfig(arg0, arg1 any) *MockProviderSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockProvider)(nil).SetConfig), arg0, arg1)
	return &MockProviderSetConfigCall{Call: call}
}

// MockProviderSetConfigCall wrap *gomock.Call
type MockProviderSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderSetConfigCall) Return(arg0 error) *MockProviderSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderSetConfigCall) Do(f func(context.Context, *config.Config) error) *MockProviderSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderSetConfigCall) DoAndReturn(f func(context.Context, *config.Config) error) *MockProviderSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockProvider) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockProviderMockRecorder) StorageProvider(arg0 any) *MockProviderStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockProvider)(nil).StorageProvider), arg0)
	return &MockProviderStorageProviderCall{Call: call}
}

// MockProviderStorageProviderCall wrap *gomock.Call
type MockProviderStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockProviderStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockProviderStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockProviderStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockProvider) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockProviderMockRecorder) StorageProviderTypes() *MockProviderStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockProvider)(nil).StorageProviderTypes))
	return &MockProviderStorageProviderTypesCall{Call: call}
}

// MockProviderStorageProviderTypesCall wrap *gomock.Call
type MockProviderStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockProviderStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockProviderStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockProviderStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderFactory is a mock of ProviderFactory interface.
type MockProviderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockProviderFactoryMockRecorder
}

// MockProviderFactoryMockRecorder is the mock recorder for MockProviderFactory.
type MockProviderFactoryMockRecorder struct {
	mock *MockProviderFactory
}

// NewMockProviderFactory creates a new mock instance.
func NewMockProviderFactory(ctrl *gomock.Controller) *MockProviderFactory {
	mock := &MockProviderFactory{ctrl: ctrl}
	mock.recorder = &MockProviderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderFactory) EXPECT() *MockProviderFactoryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProviderFactory) ISGOMOCK() struct{} {
	return struct{}{}
}

// ProviderForModel mocks base method.
func (m *MockProviderFactory) ProviderForModel(arg0 context.Context, arg1 string) (providertracker.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderForModel", arg0, arg1)
	ret0, _ := ret[0].(providertracker.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderForModel indicates an expected call of ProviderForModel.
func (mr *MockProviderFactoryMockRecorder) ProviderForModel(arg0, arg1 any) *MockProviderFactoryProviderForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderForModel", reflect.TypeOf((*MockProviderFactory)(nil).ProviderForModel), arg0, arg1)
	return &MockProviderFactoryProviderForModelCall{Call: call}
}

// MockProviderFactoryProviderForModelCall wrap *gomock.Call
type MockProviderFactoryProviderForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderFactoryProviderForModelCall) Return(arg0 providertracker.Provider, arg1 error) *MockProviderFactoryProviderForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderFactoryProviderForModelCall) Do(f func(context.Context, string) (providertracker.Provider, error)) *MockProviderFactoryProviderForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderFactoryProviderForModelCall) DoAndReturn(f func(context.Context, string) (providertracker.Provider, error)) *MockProviderFactoryProviderForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
