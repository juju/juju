// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs (interfaces: LXDProfiler,InstanceBroker)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/environs_mock.go github.com/juju/juju/environs LXDProfiler,InstanceBroker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	instance "github.com/juju/juju/core/instance"
	lxdprofile "github.com/juju/juju/core/lxdprofile"
	environs "github.com/juju/juju/environs"
	envcontext "github.com/juju/juju/environs/envcontext"
	instances "github.com/juju/juju/environs/instances"
	gomock "go.uber.org/mock/gomock"
)

// MockLXDProfiler is a mock of LXDProfiler interface.
type MockLXDProfiler struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfilerMockRecorder
}

// MockLXDProfilerMockRecorder is the mock recorder for MockLXDProfiler.
type MockLXDProfilerMockRecorder struct {
	mock *MockLXDProfiler
}

// NewMockLXDProfiler creates a new mock instance.
func NewMockLXDProfiler(ctrl *gomock.Controller) *MockLXDProfiler {
	mock := &MockLXDProfiler{ctrl: ctrl}
	mock.recorder = &MockLXDProfilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLXDProfiler) EXPECT() *MockLXDProfilerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLXDProfiler) ISGOMOCK() struct{} {
	return struct{}{}
}

// AssignLXDProfiles mocks base method.
func (m *MockLXDProfiler) AssignLXDProfiles(arg0 string, arg1 []string, arg2 []lxdprofile.ProfilePost) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignLXDProfiles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignLXDProfiles indicates an expected call of AssignLXDProfiles.
func (mr *MockLXDProfilerMockRecorder) AssignLXDProfiles(arg0, arg1, arg2 any) *MockLXDProfilerAssignLXDProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignLXDProfiles", reflect.TypeOf((*MockLXDProfiler)(nil).AssignLXDProfiles), arg0, arg1, arg2)
	return &MockLXDProfilerAssignLXDProfilesCall{Call: call}
}

// MockLXDProfilerAssignLXDProfilesCall wrap *gomock.Call
type MockLXDProfilerAssignLXDProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLXDProfilerAssignLXDProfilesCall) Return(arg0 []string, arg1 error) *MockLXDProfilerAssignLXDProfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLXDProfilerAssignLXDProfilesCall) Do(f func(string, []string, []lxdprofile.ProfilePost) ([]string, error)) *MockLXDProfilerAssignLXDProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLXDProfilerAssignLXDProfilesCall) DoAndReturn(f func(string, []string, []lxdprofile.ProfilePost) ([]string, error)) *MockLXDProfilerAssignLXDProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LXDProfileNames mocks base method.
func (m *MockLXDProfiler) LXDProfileNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfileNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LXDProfileNames indicates an expected call of LXDProfileNames.
func (mr *MockLXDProfilerMockRecorder) LXDProfileNames(arg0 any) *MockLXDProfilerLXDProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfileNames", reflect.TypeOf((*MockLXDProfiler)(nil).LXDProfileNames), arg0)
	return &MockLXDProfilerLXDProfileNamesCall{Call: call}
}

// MockLXDProfilerLXDProfileNamesCall wrap *gomock.Call
type MockLXDProfilerLXDProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLXDProfilerLXDProfileNamesCall) Return(arg0 []string, arg1 error) *MockLXDProfilerLXDProfileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLXDProfilerLXDProfileNamesCall) Do(f func(string) ([]string, error)) *MockLXDProfilerLXDProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLXDProfilerLXDProfileNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockLXDProfilerLXDProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MaybeWriteLXDProfile mocks base method.
func (m *MockLXDProfiler) MaybeWriteLXDProfile(arg0 string, arg1 lxdprofile.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaybeWriteLXDProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaybeWriteLXDProfile indicates an expected call of MaybeWriteLXDProfile.
func (mr *MockLXDProfilerMockRecorder) MaybeWriteLXDProfile(arg0, arg1 any) *MockLXDProfilerMaybeWriteLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeWriteLXDProfile", reflect.TypeOf((*MockLXDProfiler)(nil).MaybeWriteLXDProfile), arg0, arg1)
	return &MockLXDProfilerMaybeWriteLXDProfileCall{Call: call}
}

// MockLXDProfilerMaybeWriteLXDProfileCall wrap *gomock.Call
type MockLXDProfilerMaybeWriteLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLXDProfilerMaybeWriteLXDProfileCall) Return(arg0 error) *MockLXDProfilerMaybeWriteLXDProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLXDProfilerMaybeWriteLXDProfileCall) Do(f func(string, lxdprofile.Profile) error) *MockLXDProfilerMaybeWriteLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLXDProfilerMaybeWriteLXDProfileCall) DoAndReturn(f func(string, lxdprofile.Profile) error) *MockLXDProfilerMaybeWriteLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstanceBroker is a mock of InstanceBroker interface.
type MockInstanceBroker struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceBrokerMockRecorder
}

// MockInstanceBrokerMockRecorder is the mock recorder for MockInstanceBroker.
type MockInstanceBrokerMockRecorder struct {
	mock *MockInstanceBroker
}

// NewMockInstanceBroker creates a new mock instance.
func NewMockInstanceBroker(ctrl *gomock.Controller) *MockInstanceBroker {
	mock := &MockInstanceBroker{ctrl: ctrl}
	mock.recorder = &MockInstanceBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceBroker) EXPECT() *MockInstanceBrokerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstanceBroker) ISGOMOCK() struct{} {
	return struct{}{}
}

// AllInstances mocks base method.
func (m *MockInstanceBroker) AllInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockInstanceBrokerMockRecorder) AllInstances(arg0 any) *MockInstanceBrokerAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockInstanceBroker)(nil).AllInstances), arg0)
	return &MockInstanceBrokerAllInstancesCall{Call: call}
}

// MockInstanceBrokerAllInstancesCall wrap *gomock.Call
type MockInstanceBrokerAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceBrokerAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockInstanceBrokerAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceBrokerAllInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockInstanceBrokerAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceBrokerAllInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockInstanceBrokerAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRunningInstances mocks base method.
func (m *MockInstanceBroker) AllRunningInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRunningInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRunningInstances indicates an expected call of AllRunningInstances.
func (mr *MockInstanceBrokerMockRecorder) AllRunningInstances(arg0 any) *MockInstanceBrokerAllRunningInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRunningInstances", reflect.TypeOf((*MockInstanceBroker)(nil).AllRunningInstances), arg0)
	return &MockInstanceBrokerAllRunningInstancesCall{Call: call}
}

// MockInstanceBrokerAllRunningInstancesCall wrap *gomock.Call
type MockInstanceBrokerAllRunningInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceBrokerAllRunningInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockInstanceBrokerAllRunningInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceBrokerAllRunningInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockInstanceBrokerAllRunningInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceBrokerAllRunningInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockInstanceBrokerAllRunningInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartInstance mocks base method.
func (m *MockInstanceBroker) StartInstance(arg0 envcontext.ProviderCallContext, arg1 environs.StartInstanceParams) (*environs.StartInstanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1)
	ret0, _ := ret[0].(*environs.StartInstanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockInstanceBrokerMockRecorder) StartInstance(arg0, arg1 any) *MockInstanceBrokerStartInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockInstanceBroker)(nil).StartInstance), arg0, arg1)
	return &MockInstanceBrokerStartInstanceCall{Call: call}
}

// MockInstanceBrokerStartInstanceCall wrap *gomock.Call
type MockInstanceBrokerStartInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceBrokerStartInstanceCall) Return(arg0 *environs.StartInstanceResult, arg1 error) *MockInstanceBrokerStartInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceBrokerStartInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockInstanceBrokerStartInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceBrokerStartInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockInstanceBrokerStartInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopInstances mocks base method.
func (m *MockInstanceBroker) StopInstances(arg0 envcontext.ProviderCallContext, arg1 ...instance.Id) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstances indicates an expected call of StopInstances.
func (mr *MockInstanceBrokerMockRecorder) StopInstances(arg0 any, arg1 ...any) *MockInstanceBrokerStopInstancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockInstanceBroker)(nil).StopInstances), varargs...)
	return &MockInstanceBrokerStopInstancesCall{Call: call}
}

// MockInstanceBrokerStopInstancesCall wrap *gomock.Call
type MockInstanceBrokerStopInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceBrokerStopInstancesCall) Return(arg0 error) *MockInstanceBrokerStopInstancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceBrokerStopInstancesCall) Do(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockInstanceBrokerStopInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceBrokerStopInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockInstanceBrokerStopInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
