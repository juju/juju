// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/containerbroker (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/state_mock.go github.com/juju/juju/internal/worker/containerbroker State
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	provisioner "github.com/juju/juju/api/agent/provisioner"
	network "github.com/juju/juju/core/network"
	network0 "github.com/juju/juju/domain/network"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ContainerConfig mocks base method.
func (m *MockState) ContainerConfig(arg0 context.Context) (params.ContainerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerConfig", arg0)
	ret0, _ := ret[0].(params.ContainerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerConfig indicates an expected call of ContainerConfig.
func (mr *MockStateMockRecorder) ContainerConfig(arg0 any) *MockStateContainerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerConfig", reflect.TypeOf((*MockState)(nil).ContainerConfig), arg0)
	return &MockStateContainerConfigCall{Call: call}
}

// MockStateContainerConfigCall wrap *gomock.Call
type MockStateContainerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateContainerConfigCall) Return(arg0 params.ContainerConfig, arg1 error) *MockStateContainerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateContainerConfigCall) Do(f func(context.Context) (params.ContainerConfig, error)) *MockStateContainerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateContainerConfigCall) DoAndReturn(f func(context.Context) (params.ContainerConfig, error)) *MockStateContainerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerManagerConfig mocks base method.
func (m *MockState) ContainerManagerConfig(arg0 context.Context, arg1 params.ContainerManagerConfigParams) (params.ContainerManagerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerManagerConfig", arg0, arg1)
	ret0, _ := ret[0].(params.ContainerManagerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerManagerConfig indicates an expected call of ContainerManagerConfig.
func (mr *MockStateMockRecorder) ContainerManagerConfig(arg0, arg1 any) *MockStateContainerManagerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerManagerConfig", reflect.TypeOf((*MockState)(nil).ContainerManagerConfig), arg0, arg1)
	return &MockStateContainerManagerConfigCall{Call: call}
}

// MockStateContainerManagerConfigCall wrap *gomock.Call
type MockStateContainerManagerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateContainerManagerConfigCall) Return(arg0 params.ContainerManagerConfig, arg1 error) *MockStateContainerManagerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateContainerManagerConfigCall) Do(f func(context.Context, params.ContainerManagerConfigParams) (params.ContainerManagerConfig, error)) *MockStateContainerManagerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateContainerManagerConfigCall) DoAndReturn(f func(context.Context, params.ContainerManagerConfigParams) (params.ContainerManagerConfig, error)) *MockStateContainerManagerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerProfileInfo mocks base method.
func (m *MockState) GetContainerProfileInfo(arg0 context.Context, arg1 names.MachineTag) ([]*provisioner.LXDProfileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerProfileInfo", arg0, arg1)
	ret0, _ := ret[0].([]*provisioner.LXDProfileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerProfileInfo indicates an expected call of GetContainerProfileInfo.
func (mr *MockStateMockRecorder) GetContainerProfileInfo(arg0, arg1 any) *MockStateGetContainerProfileInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerProfileInfo", reflect.TypeOf((*MockState)(nil).GetContainerProfileInfo), arg0, arg1)
	return &MockStateGetContainerProfileInfoCall{Call: call}
}

// MockStateGetContainerProfileInfoCall wrap *gomock.Call
type MockStateGetContainerProfileInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetContainerProfileInfoCall) Return(arg0 []*provisioner.LXDProfileResult, arg1 error) *MockStateGetContainerProfileInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetContainerProfileInfoCall) Do(f func(context.Context, names.MachineTag) ([]*provisioner.LXDProfileResult, error)) *MockStateGetContainerProfileInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetContainerProfileInfoCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]*provisioner.LXDProfileResult, error)) *MockStateGetContainerProfileInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HostChangesForContainer mocks base method.
func (m *MockState) HostChangesForContainer(arg0 context.Context, arg1 names.MachineTag) ([]network0.DeviceToBridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostChangesForContainer", arg0, arg1)
	ret0, _ := ret[0].([]network0.DeviceToBridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostChangesForContainer indicates an expected call of HostChangesForContainer.
func (mr *MockStateMockRecorder) HostChangesForContainer(arg0, arg1 any) *MockStateHostChangesForContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostChangesForContainer", reflect.TypeOf((*MockState)(nil).HostChangesForContainer), arg0, arg1)
	return &MockStateHostChangesForContainerCall{Call: call}
}

// MockStateHostChangesForContainerCall wrap *gomock.Call
type MockStateHostChangesForContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateHostChangesForContainerCall) Return(arg0 []network0.DeviceToBridge, arg1 error) *MockStateHostChangesForContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateHostChangesForContainerCall) Do(f func(context.Context, names.MachineTag) ([]network0.DeviceToBridge, error)) *MockStateHostChangesForContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateHostChangesForContainerCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]network0.DeviceToBridge, error)) *MockStateHostChangesForContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machines mocks base method.
func (m *MockState) Machines(arg0 context.Context, arg1 ...names.MachineTag) ([]provisioner.MachineResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Machines", varargs...)
	ret0, _ := ret[0].([]provisioner.MachineResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machines indicates an expected call of Machines.
func (mr *MockStateMockRecorder) Machines(arg0 any, arg1 ...any) *MockStateMachinesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machines", reflect.TypeOf((*MockState)(nil).Machines), varargs...)
	return &MockStateMachinesCall{Call: call}
}

// MockStateMachinesCall wrap *gomock.Call
type MockStateMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMachinesCall) Return(arg0 []provisioner.MachineResult, arg1 error) *MockStateMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMachinesCall) Do(f func(context.Context, ...names.MachineTag) ([]provisioner.MachineResult, error)) *MockStateMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMachinesCall) DoAndReturn(f func(context.Context, ...names.MachineTag) ([]provisioner.MachineResult, error)) *MockStateMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareContainerInterfaceInfo mocks base method.
func (m *MockState) PrepareContainerInterfaceInfo(arg0 context.Context, arg1 names.MachineTag) (network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContainerInterfaceInfo", arg0, arg1)
	ret0, _ := ret[0].(network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContainerInterfaceInfo indicates an expected call of PrepareContainerInterfaceInfo.
func (mr *MockStateMockRecorder) PrepareContainerInterfaceInfo(arg0, arg1 any) *MockStatePrepareContainerInterfaceInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContainerInterfaceInfo", reflect.TypeOf((*MockState)(nil).PrepareContainerInterfaceInfo), arg0, arg1)
	return &MockStatePrepareContainerInterfaceInfoCall{Call: call}
}

// MockStatePrepareContainerInterfaceInfoCall wrap *gomock.Call
type MockStatePrepareContainerInterfaceInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePrepareContainerInterfaceInfoCall) Return(arg0 network.InterfaceInfos, arg1 error) *MockStatePrepareContainerInterfaceInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePrepareContainerInterfaceInfoCall) Do(f func(context.Context, names.MachineTag) (network.InterfaceInfos, error)) *MockStatePrepareContainerInterfaceInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePrepareContainerInterfaceInfoCall) DoAndReturn(f func(context.Context, names.MachineTag) (network.InterfaceInfos, error)) *MockStatePrepareContainerInterfaceInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseContainerAddresses mocks base method.
func (m *MockState) ReleaseContainerAddresses(arg0 context.Context, arg1 names.MachineTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerAddresses indicates an expected call of ReleaseContainerAddresses.
func (mr *MockStateMockRecorder) ReleaseContainerAddresses(arg0, arg1 any) *MockStateReleaseContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerAddresses", reflect.TypeOf((*MockState)(nil).ReleaseContainerAddresses), arg0, arg1)
	return &MockStateReleaseContainerAddressesCall{Call: call}
}

// MockStateReleaseContainerAddressesCall wrap *gomock.Call
type MockStateReleaseContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReleaseContainerAddressesCall) Return(arg0 error) *MockStateReleaseContainerAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReleaseContainerAddressesCall) Do(f func(context.Context, names.MachineTag) error) *MockStateReleaseContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReleaseContainerAddressesCall) DoAndReturn(f func(context.Context, names.MachineTag) error) *MockStateReleaseContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHostMachineNetworkConfig mocks base method.
func (m *MockState) SetHostMachineNetworkConfig(arg0 context.Context, arg1 names.MachineTag, arg2 []params.NetworkConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHostMachineNetworkConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHostMachineNetworkConfig indicates an expected call of SetHostMachineNetworkConfig.
func (mr *MockStateMockRecorder) SetHostMachineNetworkConfig(arg0, arg1, arg2 any) *MockStateSetHostMachineNetworkConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHostMachineNetworkConfig", reflect.TypeOf((*MockState)(nil).SetHostMachineNetworkConfig), arg0, arg1, arg2)
	return &MockStateSetHostMachineNetworkConfigCall{Call: call}
}

// MockStateSetHostMachineNetworkConfigCall wrap *gomock.Call
type MockStateSetHostMachineNetworkConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetHostMachineNetworkConfigCall) Return(arg0 error) *MockStateSetHostMachineNetworkConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetHostMachineNetworkConfigCall) Do(f func(context.Context, names.MachineTag, []params.NetworkConfig) error) *MockStateSetHostMachineNetworkConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetHostMachineNetworkConfigCall) DoAndReturn(f func(context.Context, names.MachineTag, []params.NetworkConfig) error) *MockStateSetHostMachineNetworkConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
