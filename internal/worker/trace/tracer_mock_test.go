// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/trace (interfaces: TrackedTracer,Client,ClientTracer,ClientTracerProvider)
//
// Generated by this command:
//
//	mockgen -typed -package trace -destination tracer_mock_test.go github.com/juju/juju/internal/worker/trace TrackedTracer,Client,ClientTracer,ClientTracerProvider
//

// Package trace is a generated GoMock package.
package trace

import (
	context "context"
	reflect "reflect"

	trace "github.com/juju/juju/core/trace"
	trace1 "go.opentelemetry.io/otel/trace"
	gomock "go.uber.org/mock/gomock"
)

// MockTrackedTracer is a mock of TrackedTracer interface.
type MockTrackedTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTrackedTracerMockRecorder
}

// MockTrackedTracerMockRecorder is the mock recorder for MockTrackedTracer.
type MockTrackedTracerMockRecorder struct {
	mock *MockTrackedTracer
}

// NewMockTrackedTracer creates a new mock instance.
func NewMockTrackedTracer(ctrl *gomock.Controller) *MockTrackedTracer {
	mock := &MockTrackedTracer{ctrl: ctrl}
	mock.recorder = &MockTrackedTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackedTracer) EXPECT() *MockTrackedTracerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockTrackedTracer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Enabled mocks base method.
func (m *MockTrackedTracer) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockTrackedTracerMockRecorder) Enabled() *MockTrackedTracerEnabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockTrackedTracer)(nil).Enabled))
	return &MockTrackedTracerEnabledCall{Call: call}
}

// MockTrackedTracerEnabledCall wrap *gomock.Call
type MockTrackedTracerEnabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedTracerEnabledCall) Return(arg0 bool) *MockTrackedTracerEnabledCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedTracerEnabledCall) Do(f func() bool) *MockTrackedTracerEnabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedTracerEnabledCall) DoAndReturn(f func() bool) *MockTrackedTracerEnabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockTrackedTracer) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockTrackedTracerMockRecorder) Kill() *MockTrackedTracerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTrackedTracer)(nil).Kill))
	return &MockTrackedTracerKillCall{Call: call}
}

// MockTrackedTracerKillCall wrap *gomock.Call
type MockTrackedTracerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedTracerKillCall) Return() *MockTrackedTracerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedTracerKillCall) Do(f func()) *MockTrackedTracerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedTracerKillCall) DoAndReturn(f func()) *MockTrackedTracerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockTrackedTracer) Start(arg0 context.Context, arg1 string, arg2 ...trace.Option) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTrackedTracerMockRecorder) Start(arg0, arg1 any, arg2 ...any) *MockTrackedTracerStartCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTrackedTracer)(nil).Start), varargs...)
	return &MockTrackedTracerStartCall{Call: call}
}

// MockTrackedTracerStartCall wrap *gomock.Call
type MockTrackedTracerStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedTracerStartCall) Return(arg0 context.Context, arg1 trace.Span) *MockTrackedTracerStartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedTracerStartCall) Do(f func(context.Context, string, ...trace.Option) (context.Context, trace.Span)) *MockTrackedTracerStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedTracerStartCall) DoAndReturn(f func(context.Context, string, ...trace.Option) (context.Context, trace.Span)) *MockTrackedTracerStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockTrackedTracer) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTrackedTracerMockRecorder) Wait() *MockTrackedTracerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrackedTracer)(nil).Wait))
	return &MockTrackedTracerWaitCall{Call: call}
}

// MockTrackedTracerWaitCall wrap *gomock.Call
type MockTrackedTracerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedTracerWaitCall) Return(arg0 error) *MockTrackedTracerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedTracerWaitCall) Do(f func() error) *MockTrackedTracerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedTracerWaitCall) DoAndReturn(f func() error) *MockTrackedTracerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Start mocks base method.
func (m *MockClient) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClientMockRecorder) Start(arg0 any) *MockClientStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClient)(nil).Start), arg0)
	return &MockClientStartCall{Call: call}
}

// MockClientStartCall wrap *gomock.Call
type MockClientStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStartCall) Return(arg0 error) *MockClientStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStartCall) Do(f func(context.Context) error) *MockClientStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStartCall) DoAndReturn(f func(context.Context) error) *MockClientStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockClient) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockClientMockRecorder) Stop(arg0 any) *MockClientStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop), arg0)
	return &MockClientStopCall{Call: call}
}

// MockClientStopCall wrap *gomock.Call
type MockClientStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStopCall) Return(arg0 error) *MockClientStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStopCall) Do(f func(context.Context) error) *MockClientStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStopCall) DoAndReturn(f func(context.Context) error) *MockClientStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClientTracer is a mock of ClientTracer interface.
type MockClientTracer struct {
	ctrl     *gomock.Controller
	recorder *MockClientTracerMockRecorder
}

// MockClientTracerMockRecorder is the mock recorder for MockClientTracer.
type MockClientTracerMockRecorder struct {
	mock *MockClientTracer
}

// NewMockClientTracer creates a new mock instance.
func NewMockClientTracer(ctrl *gomock.Controller) *MockClientTracer {
	mock := &MockClientTracer{ctrl: ctrl}
	mock.recorder = &MockClientTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTracer) EXPECT() *MockClientTracerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClientTracer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Start mocks base method.
func (m *MockClientTracer) Start(arg0 context.Context, arg1 string, arg2 ...trace1.SpanStartOption) (context.Context, ClientSpan) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(ClientSpan)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockClientTracerMockRecorder) Start(arg0, arg1 any, arg2 ...any) *MockClientTracerStartCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClientTracer)(nil).Start), varargs...)
	return &MockClientTracerStartCall{Call: call}
}

// MockClientTracerStartCall wrap *gomock.Call
type MockClientTracerStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientTracerStartCall) Return(arg0 context.Context, arg1 ClientSpan) *MockClientTracerStartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientTracerStartCall) Do(f func(context.Context, string, ...trace1.SpanStartOption) (context.Context, ClientSpan)) *MockClientTracerStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientTracerStartCall) DoAndReturn(f func(context.Context, string, ...trace1.SpanStartOption) (context.Context, ClientSpan)) *MockClientTracerStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClientTracerProvider is a mock of ClientTracerProvider interface.
type MockClientTracerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClientTracerProviderMockRecorder
}

// MockClientTracerProviderMockRecorder is the mock recorder for MockClientTracerProvider.
type MockClientTracerProviderMockRecorder struct {
	mock *MockClientTracerProvider
}

// NewMockClientTracerProvider creates a new mock instance.
func NewMockClientTracerProvider(ctrl *gomock.Controller) *MockClientTracerProvider {
	mock := &MockClientTracerProvider{ctrl: ctrl}
	mock.recorder = &MockClientTracerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTracerProvider) EXPECT() *MockClientTracerProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClientTracerProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// ForceFlush mocks base method.
func (m *MockClientTracerProvider) ForceFlush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceFlush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceFlush indicates an expected call of ForceFlush.
func (mr *MockClientTracerProviderMockRecorder) ForceFlush(arg0 any) *MockClientTracerProviderForceFlushCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceFlush", reflect.TypeOf((*MockClientTracerProvider)(nil).ForceFlush), arg0)
	return &MockClientTracerProviderForceFlushCall{Call: call}
}

// MockClientTracerProviderForceFlushCall wrap *gomock.Call
type MockClientTracerProviderForceFlushCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientTracerProviderForceFlushCall) Return(arg0 error) *MockClientTracerProviderForceFlushCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientTracerProviderForceFlushCall) Do(f func(context.Context) error) *MockClientTracerProviderForceFlushCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientTracerProviderForceFlushCall) DoAndReturn(f func(context.Context) error) *MockClientTracerProviderForceFlushCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shutdown mocks base method.
func (m *MockClientTracerProvider) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockClientTracerProviderMockRecorder) Shutdown(arg0 any) *MockClientTracerProviderShutdownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockClientTracerProvider)(nil).Shutdown), arg0)
	return &MockClientTracerProviderShutdownCall{Call: call}
}

// MockClientTracerProviderShutdownCall wrap *gomock.Call
type MockClientTracerProviderShutdownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientTracerProviderShutdownCall) Return(arg0 error) *MockClientTracerProviderShutdownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientTracerProviderShutdownCall) Do(f func(context.Context) error) *MockClientTracerProviderShutdownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientTracerProviderShutdownCall) DoAndReturn(f func(context.Context) error) *MockClientTracerProviderShutdownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
