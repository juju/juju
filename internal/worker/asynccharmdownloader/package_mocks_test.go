// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/asynccharmdownloader (interfaces: ApplicationService,Downloader)
//
// Generated by this command:
//
//	mockgen -typed -package asynccharmdownloader -destination package_mocks_test.go github.com/juju/juju/internal/worker/asynccharmdownloader ApplicationService,Downloader
//

// Package asynccharmdownloader is a generated GoMock package.
package asynccharmdownloader

import (
	context "context"
	url "net/url"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	watcher "github.com/juju/juju/core/watcher"
	application0 "github.com/juju/juju/domain/application"
	charmdownloader "github.com/juju/juju/internal/charm/charmdownloader"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplicationService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetAsyncCharmDownloadInfo mocks base method.
func (m *MockApplicationService) GetAsyncCharmDownloadInfo(arg0 context.Context, arg1 application.ID) (application0.CharmDownloadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncCharmDownloadInfo", arg0, arg1)
	ret0, _ := ret[0].(application0.CharmDownloadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncCharmDownloadInfo indicates an expected call of GetAsyncCharmDownloadInfo.
func (mr *MockApplicationServiceMockRecorder) GetAsyncCharmDownloadInfo(arg0, arg1 any) *MockApplicationServiceGetAsyncCharmDownloadInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncCharmDownloadInfo", reflect.TypeOf((*MockApplicationService)(nil).GetAsyncCharmDownloadInfo), arg0, arg1)
	return &MockApplicationServiceGetAsyncCharmDownloadInfoCall{Call: call}
}

// MockApplicationServiceGetAsyncCharmDownloadInfoCall wrap *gomock.Call
type MockApplicationServiceGetAsyncCharmDownloadInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAsyncCharmDownloadInfoCall) Return(arg0 application0.CharmDownloadInfo, arg1 error) *MockApplicationServiceGetAsyncCharmDownloadInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAsyncCharmDownloadInfoCall) Do(f func(context.Context, application.ID) (application0.CharmDownloadInfo, error)) *MockApplicationServiceGetAsyncCharmDownloadInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAsyncCharmDownloadInfoCall) DoAndReturn(f func(context.Context, application.ID) (application0.CharmDownloadInfo, error)) *MockApplicationServiceGetAsyncCharmDownloadInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveCharmDownload mocks base method.
func (m *MockApplicationService) ResolveCharmDownload(arg0 context.Context, arg1 application.ID, arg2 application0.ResolveCharmDownload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCharmDownload", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveCharmDownload indicates an expected call of ResolveCharmDownload.
func (mr *MockApplicationServiceMockRecorder) ResolveCharmDownload(arg0, arg1, arg2 any) *MockApplicationServiceResolveCharmDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCharmDownload", reflect.TypeOf((*MockApplicationService)(nil).ResolveCharmDownload), arg0, arg1, arg2)
	return &MockApplicationServiceResolveCharmDownloadCall{Call: call}
}

// MockApplicationServiceResolveCharmDownloadCall wrap *gomock.Call
type MockApplicationServiceResolveCharmDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceResolveCharmDownloadCall) Return(arg0 error) *MockApplicationServiceResolveCharmDownloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceResolveCharmDownloadCall) Do(f func(context.Context, application.ID, application0.ResolveCharmDownload) error) *MockApplicationServiceResolveCharmDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceResolveCharmDownloadCall) DoAndReturn(f func(context.Context, application.ID, application0.ResolveCharmDownload) error) *MockApplicationServiceResolveCharmDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationsWithPendingCharms mocks base method.
func (m *MockApplicationService) WatchApplicationsWithPendingCharms(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationsWithPendingCharms", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationsWithPendingCharms indicates an expected call of WatchApplicationsWithPendingCharms.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationsWithPendingCharms(arg0 any) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationsWithPendingCharms", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationsWithPendingCharms), arg0)
	return &MockApplicationServiceWatchApplicationsWithPendingCharmsCall{Call: call}
}

// MockApplicationServiceWatchApplicationsWithPendingCharmsCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationsWithPendingCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDownloader) ISGOMOCK() struct{} {
	return struct{}{}
}

// Download mocks base method.
func (m *MockDownloader) Download(arg0 context.Context, arg1 *url.URL, arg2 string) (*charmdownloader.DownloadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1, arg2)
	ret0, _ := ret[0].(*charmdownloader.DownloadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockDownloaderMockRecorder) Download(arg0, arg1, arg2 any) *MockDownloaderDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloader)(nil).Download), arg0, arg1, arg2)
	return &MockDownloaderDownloadCall{Call: call}
}

// MockDownloaderDownloadCall wrap *gomock.Call
type MockDownloaderDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderDownloadCall) Return(arg0 *charmdownloader.DownloadResult, arg1 error) *MockDownloaderDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderDownloadCall) Do(f func(context.Context, *url.URL, string) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderDownloadCall) DoAndReturn(f func(context.Context, *url.URL, string) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
