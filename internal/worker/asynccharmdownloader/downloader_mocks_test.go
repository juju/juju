// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/asynccharmdownloader (interfaces: Downloader)
//
// Generated by this command:
//
//	mockgen -typed -package asynccharmdownloader -destination downloader_mocks_test.go github.com/juju/juju/internal/worker/asynccharmdownloader Downloader
//

// Package asynccharmdownloader is a generated GoMock package.
package asynccharmdownloader

import (
	context "context"
	reflect "reflect"

	charm "github.com/juju/juju/core/charm"
	charmdownloader "github.com/juju/juju/internal/charm/charmdownloader"
	gomock "go.uber.org/mock/gomock"
)

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockDownloader) Download(arg0 context.Context, arg1 string, arg2 charm.Origin) (*charmdownloader.DownloadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1, arg2)
	ret0, _ := ret[0].(*charmdownloader.DownloadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockDownloaderMockRecorder) Download(arg0, arg1, arg2 any) *MockDownloaderDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloader)(nil).Download), arg0, arg1, arg2)
	return &MockDownloaderDownloadCall{Call: call}
}

// MockDownloaderDownloadCall wrap *gomock.Call
type MockDownloaderDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderDownloadCall) Return(arg0 *charmdownloader.DownloadResult, arg1 error) *MockDownloaderDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderDownloadCall) Do(f func(context.Context, string, charm.Origin) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderDownloadCall) DoAndReturn(f func(context.Context, string, charm.Origin) (*charmdownloader.DownloadResult, error)) *MockDownloaderDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
