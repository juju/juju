// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/asynccharmdownloader (interfaces: ApplicationService,ModelConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package asynccharmdownloader -destination service_mocks_test.go github.com/juju/juju/internal/worker/asynccharmdownloader ApplicationService,ModelConfigService
//

// Package asynccharmdownloader is a generated GoMock package.
package asynccharmdownloader

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	watcher "github.com/juju/juju/core/watcher"
	application0 "github.com/juju/juju/domain/application"
	config "github.com/juju/juju/environs/config"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// ReserveCharmDownload mocks base method.
func (m *MockApplicationService) ReserveCharmDownload(arg0 context.Context, arg1 application.ID) (application0.CharmDownloadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveCharmDownload", arg0, arg1)
	ret0, _ := ret[0].(application0.CharmDownloadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveCharmDownload indicates an expected call of ReserveCharmDownload.
func (mr *MockApplicationServiceMockRecorder) ReserveCharmDownload(arg0, arg1 any) *MockApplicationServiceReserveCharmDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveCharmDownload", reflect.TypeOf((*MockApplicationService)(nil).ReserveCharmDownload), arg0, arg1)
	return &MockApplicationServiceReserveCharmDownloadCall{Call: call}
}

// MockApplicationServiceReserveCharmDownloadCall wrap *gomock.Call
type MockApplicationServiceReserveCharmDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceReserveCharmDownloadCall) Return(arg0 application0.CharmDownloadInfo, arg1 error) *MockApplicationServiceReserveCharmDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceReserveCharmDownloadCall) Do(f func(context.Context, application.ID) (application0.CharmDownloadInfo, error)) *MockApplicationServiceReserveCharmDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceReserveCharmDownloadCall) DoAndReturn(f func(context.Context, application.ID) (application0.CharmDownloadInfo, error)) *MockApplicationServiceReserveCharmDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveCharmDownload mocks base method.
func (m *MockApplicationService) ResolveCharmDownload(arg0 context.Context, arg1 application.ID, arg2 application0.ResolveCharmDownload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCharmDownload", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveCharmDownload indicates an expected call of ResolveCharmDownload.
func (mr *MockApplicationServiceMockRecorder) ResolveCharmDownload(arg0, arg1, arg2 any) *MockApplicationServiceResolveCharmDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCharmDownload", reflect.TypeOf((*MockApplicationService)(nil).ResolveCharmDownload), arg0, arg1, arg2)
	return &MockApplicationServiceResolveCharmDownloadCall{Call: call}
}

// MockApplicationServiceResolveCharmDownloadCall wrap *gomock.Call
type MockApplicationServiceResolveCharmDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceResolveCharmDownloadCall) Return(arg0 error) *MockApplicationServiceResolveCharmDownloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceResolveCharmDownloadCall) Do(f func(context.Context, application.ID, application0.ResolveCharmDownload) error) *MockApplicationServiceResolveCharmDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceResolveCharmDownloadCall) DoAndReturn(f func(context.Context, application.ID, application0.ResolveCharmDownload) error) *MockApplicationServiceResolveCharmDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationsWithPendingCharms mocks base method.
func (m *MockApplicationService) WatchApplicationsWithPendingCharms(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationsWithPendingCharms", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationsWithPendingCharms indicates an expected call of WatchApplicationsWithPendingCharms.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationsWithPendingCharms(arg0 any) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationsWithPendingCharms", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationsWithPendingCharms), arg0)
	return &MockApplicationServiceWatchApplicationsWithPendingCharmsCall{Call: call}
}

// MockApplicationServiceWatchApplicationsWithPendingCharmsCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationsWithPendingCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationsWithPendingCharmsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
