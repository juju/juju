// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/agent/instancemutater (interfaces: MutaterMachine)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/machinemutater_mock.go github.com/juju/juju/api/agent/instancemutater MutaterMachine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	instancemutater "github.com/juju/juju/api/agent/instancemutater"
	instance "github.com/juju/juju/core/instance"
	life "github.com/juju/juju/core/life"
	status "github.com/juju/juju/core/status"
	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockMutaterMachine is a mock of MutaterMachine interface.
type MockMutaterMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMutaterMachineMockRecorder
}

// MockMutaterMachineMockRecorder is the mock recorder for MockMutaterMachine.
type MockMutaterMachineMockRecorder struct {
	mock *MockMutaterMachine
}

// NewMockMutaterMachine creates a new mock instance.
func NewMockMutaterMachine(ctrl *gomock.Controller) *MockMutaterMachine {
	mock := &MockMutaterMachine{ctrl: ctrl}
	mock.recorder = &MockMutaterMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutaterMachine) EXPECT() *MockMutaterMachineMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockMutaterMachine) ISGOMOCK() struct{} {
	return struct{}{}
}

// CharmProfilingInfo mocks base method.
func (m *MockMutaterMachine) CharmProfilingInfo(arg0 context.Context) (*instancemutater.UnitProfileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmProfilingInfo", arg0)
	ret0, _ := ret[0].(*instancemutater.UnitProfileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmProfilingInfo indicates an expected call of CharmProfilingInfo.
func (mr *MockMutaterMachineMockRecorder) CharmProfilingInfo(arg0 any) *MockMutaterMachineCharmProfilingInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmProfilingInfo", reflect.TypeOf((*MockMutaterMachine)(nil).CharmProfilingInfo), arg0)
	return &MockMutaterMachineCharmProfilingInfoCall{Call: call}
}

// MockMutaterMachineCharmProfilingInfoCall wrap *gomock.Call
type MockMutaterMachineCharmProfilingInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineCharmProfilingInfoCall) Return(arg0 *instancemutater.UnitProfileInfo, arg1 error) *MockMutaterMachineCharmProfilingInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineCharmProfilingInfoCall) Do(f func(context.Context) (*instancemutater.UnitProfileInfo, error)) *MockMutaterMachineCharmProfilingInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineCharmProfilingInfoCall) DoAndReturn(f func(context.Context) (*instancemutater.UnitProfileInfo, error)) *MockMutaterMachineCharmProfilingInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerType mocks base method.
func (m *MockMutaterMachine) ContainerType(arg0 context.Context) (instance.ContainerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType", arg0)
	ret0, _ := ret[0].(instance.ContainerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockMutaterMachineMockRecorder) ContainerType(arg0 any) *MockMutaterMachineContainerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockMutaterMachine)(nil).ContainerType), arg0)
	return &MockMutaterMachineContainerTypeCall{Call: call}
}

// MockMutaterMachineContainerTypeCall wrap *gomock.Call
type MockMutaterMachineContainerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineContainerTypeCall) Return(arg0 instance.ContainerType, arg1 error) *MockMutaterMachineContainerTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineContainerTypeCall) Do(f func(context.Context) (instance.ContainerType, error)) *MockMutaterMachineContainerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineContainerTypeCall) DoAndReturn(f func(context.Context) (instance.ContainerType, error)) *MockMutaterMachineContainerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceId mocks base method.
func (m *MockMutaterMachine) InstanceId(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceId", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceId indicates an expected call of InstanceId.
func (mr *MockMutaterMachineMockRecorder) InstanceId(arg0 any) *MockMutaterMachineInstanceIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceId", reflect.TypeOf((*MockMutaterMachine)(nil).InstanceId), arg0)
	return &MockMutaterMachineInstanceIdCall{Call: call}
}

// MockMutaterMachineInstanceIdCall wrap *gomock.Call
type MockMutaterMachineInstanceIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineInstanceIdCall) Return(arg0 string, arg1 error) *MockMutaterMachineInstanceIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineInstanceIdCall) Do(f func(context.Context) (string, error)) *MockMutaterMachineInstanceIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineInstanceIdCall) DoAndReturn(f func(context.Context) (string, error)) *MockMutaterMachineInstanceIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockMutaterMachine) Life() life.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(life.Value)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockMutaterMachineMockRecorder) Life() *MockMutaterMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockMutaterMachine)(nil).Life))
	return &MockMutaterMachineLifeCall{Call: call}
}

// MockMutaterMachineLifeCall wrap *gomock.Call
type MockMutaterMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineLifeCall) Return(arg0 life.Value) *MockMutaterMachineLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineLifeCall) Do(f func() life.Value) *MockMutaterMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineLifeCall) DoAndReturn(f func() life.Value) *MockMutaterMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockMutaterMachine) Refresh(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockMutaterMachineMockRecorder) Refresh(arg0 any) *MockMutaterMachineRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockMutaterMachine)(nil).Refresh), arg0)
	return &MockMutaterMachineRefreshCall{Call: call}
}

// MockMutaterMachineRefreshCall wrap *gomock.Call
type MockMutaterMachineRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineRefreshCall) Return(arg0 error) *MockMutaterMachineRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineRefreshCall) Do(f func(context.Context) error) *MockMutaterMachineRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineRefreshCall) DoAndReturn(f func(context.Context) error) *MockMutaterMachineRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmProfiles mocks base method.
func (m *MockMutaterMachine) SetCharmProfiles(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharmProfiles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharmProfiles indicates an expected call of SetCharmProfiles.
func (mr *MockMutaterMachineMockRecorder) SetCharmProfiles(arg0, arg1 any) *MockMutaterMachineSetCharmProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmProfiles", reflect.TypeOf((*MockMutaterMachine)(nil).SetCharmProfiles), arg0, arg1)
	return &MockMutaterMachineSetCharmProfilesCall{Call: call}
}

// MockMutaterMachineSetCharmProfilesCall wrap *gomock.Call
type MockMutaterMachineSetCharmProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineSetCharmProfilesCall) Return(arg0 error) *MockMutaterMachineSetCharmProfilesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineSetCharmProfilesCall) Do(f func(context.Context, []string) error) *MockMutaterMachineSetCharmProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineSetCharmProfilesCall) DoAndReturn(f func(context.Context, []string) error) *MockMutaterMachineSetCharmProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModificationStatus mocks base method.
func (m *MockMutaterMachine) SetModificationStatus(arg0 context.Context, arg1 status.Status, arg2 string, arg3 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModificationStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModificationStatus indicates an expected call of SetModificationStatus.
func (mr *MockMutaterMachineMockRecorder) SetModificationStatus(arg0, arg1, arg2, arg3 any) *MockMutaterMachineSetModificationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModificationStatus", reflect.TypeOf((*MockMutaterMachine)(nil).SetModificationStatus), arg0, arg1, arg2, arg3)
	return &MockMutaterMachineSetModificationStatusCall{Call: call}
}

// MockMutaterMachineSetModificationStatusCall wrap *gomock.Call
type MockMutaterMachineSetModificationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineSetModificationStatusCall) Return(arg0 error) *MockMutaterMachineSetModificationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineSetModificationStatusCall) Do(f func(context.Context, status.Status, string, map[string]any) error) *MockMutaterMachineSetModificationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineSetModificationStatusCall) DoAndReturn(f func(context.Context, status.Status, string, map[string]any) error) *MockMutaterMachineSetModificationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockMutaterMachine) Tag() names.MachineTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.MachineTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockMutaterMachineMockRecorder) Tag() *MockMutaterMachineTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockMutaterMachine)(nil).Tag))
	return &MockMutaterMachineTagCall{Call: call}
}

// MockMutaterMachineTagCall wrap *gomock.Call
type MockMutaterMachineTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineTagCall) Return(arg0 names.MachineTag) *MockMutaterMachineTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineTagCall) Do(f func() names.MachineTag) *MockMutaterMachineTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineTagCall) DoAndReturn(f func() names.MachineTag) *MockMutaterMachineTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchContainers mocks base method.
func (m *MockMutaterMachine) WatchContainers(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchContainers", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchContainers indicates an expected call of WatchContainers.
func (mr *MockMutaterMachineMockRecorder) WatchContainers(arg0 any) *MockMutaterMachineWatchContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchContainers", reflect.TypeOf((*MockMutaterMachine)(nil).WatchContainers), arg0)
	return &MockMutaterMachineWatchContainersCall{Call: call}
}

// MockMutaterMachineWatchContainersCall wrap *gomock.Call
type MockMutaterMachineWatchContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineWatchContainersCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockMutaterMachineWatchContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineWatchContainersCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMutaterMachineWatchContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineWatchContainersCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMutaterMachineWatchContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchLXDProfileVerificationNeeded mocks base method.
func (m *MockMutaterMachine) WatchLXDProfileVerificationNeeded(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLXDProfileVerificationNeeded", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLXDProfileVerificationNeeded indicates an expected call of WatchLXDProfileVerificationNeeded.
func (mr *MockMutaterMachineMockRecorder) WatchLXDProfileVerificationNeeded(arg0 any) *MockMutaterMachineWatchLXDProfileVerificationNeededCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLXDProfileVerificationNeeded", reflect.TypeOf((*MockMutaterMachine)(nil).WatchLXDProfileVerificationNeeded), arg0)
	return &MockMutaterMachineWatchLXDProfileVerificationNeededCall{Call: call}
}

// MockMutaterMachineWatchLXDProfileVerificationNeededCall wrap *gomock.Call
type MockMutaterMachineWatchLXDProfileVerificationNeededCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineWatchLXDProfileVerificationNeededCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockMutaterMachineWatchLXDProfileVerificationNeededCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineWatchLXDProfileVerificationNeededCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMutaterMachineWatchLXDProfileVerificationNeededCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineWatchLXDProfileVerificationNeededCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMutaterMachineWatchLXDProfileVerificationNeededCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnits mocks base method.
func (m *MockMutaterMachine) WatchUnits(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnits", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnits indicates an expected call of WatchUnits.
func (mr *MockMutaterMachineMockRecorder) WatchUnits(arg0 any) *MockMutaterMachineWatchUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnits", reflect.TypeOf((*MockMutaterMachine)(nil).WatchUnits), arg0)
	return &MockMutaterMachineWatchUnitsCall{Call: call}
}

// MockMutaterMachineWatchUnitsCall wrap *gomock.Call
type MockMutaterMachineWatchUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMutaterMachineWatchUnitsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockMutaterMachineWatchUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMutaterMachineWatchUnitsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMutaterMachineWatchUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMutaterMachineWatchUnitsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMutaterMachineWatchUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
