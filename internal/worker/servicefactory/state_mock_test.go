// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/state (interfaces: StateTracker)
//
// Generated by this command:
//
//	mockgen -package servicefactory -destination state_mock_test.go github.com/juju/juju/internal/worker/state StateTracker
//

// Package servicefactory is a generated GoMock package.
package servicefactory

import (
	reflect "reflect"

	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockStateTracker is a mock of StateTracker interface.
type MockStateTracker struct {
	ctrl     *gomock.Controller
	recorder *MockStateTrackerMockRecorder
}

// MockStateTrackerMockRecorder is the mock recorder for MockStateTracker.
type MockStateTrackerMockRecorder struct {
	mock *MockStateTracker
}

// NewMockStateTracker creates a new mock instance.
func NewMockStateTracker(ctrl *gomock.Controller) *MockStateTracker {
	mock := &MockStateTracker{ctrl: ctrl}
	mock.recorder = &MockStateTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateTracker) EXPECT() *MockStateTrackerMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockStateTracker) Done() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockStateTrackerMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockStateTracker)(nil).Done))
}

// Report mocks base method.
func (m *MockStateTracker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockStateTrackerMockRecorder) Report() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockStateTracker)(nil).Report))
}

// Use mocks base method.
func (m *MockStateTracker) Use() (*state.StatePool, *state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use")
	ret0, _ := ret[0].(*state.StatePool)
	ret1, _ := ret[1].(*state.State)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Use indicates an expected call of Use.
func (mr *MockStateTrackerMockRecorder) Use() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockStateTracker)(nil).Use))
}
