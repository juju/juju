// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/servicefactory (interfaces: EnvironFactory)
//
// Generated by this command:
//
//	mockgen -package servicefactory -destination domain_mock_test.go github.com/juju/juju/domain/servicefactory EnvironFactory
//

// Package servicefactory is a generated GoMock package.
package servicefactory

import (
	context "context"
	reflect "reflect"

	environs "github.com/juju/juju/environs"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironFactory is a mock of EnvironFactory interface.
type MockEnvironFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironFactoryMockRecorder
}

// MockEnvironFactoryMockRecorder is the mock recorder for MockEnvironFactory.
type MockEnvironFactoryMockRecorder struct {
	mock *MockEnvironFactory
}

// NewMockEnvironFactory creates a new mock instance.
func NewMockEnvironFactory(ctrl *gomock.Controller) *MockEnvironFactory {
	mock := &MockEnvironFactory{ctrl: ctrl}
	mock.recorder = &MockEnvironFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironFactory) EXPECT() *MockEnvironFactoryMockRecorder {
	return m.recorder
}

// Environ mocks base method.
func (m *MockEnvironFactory) Environ(arg0 context.Context) (environs.BootstrapEnviron, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ", arg0)
	ret0, _ := ret[0].(environs.BootstrapEnviron)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environ indicates an expected call of Environ.
func (mr *MockEnvironFactoryMockRecorder) Environ(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockEnvironFactory)(nil).Environ), arg0)
}
