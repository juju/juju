// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/apiaddresssetter (interfaces: ControllerConfigService,ApplicationService,ControllerNodeService,NetworkService,ModelService,DomainServices,ControllerDomainServices)
//
// Generated by this command:
//
//	mockgen -typed -package apiaddresssetter -destination package_mocks_test.go github.com/juju/juju/internal/worker/apiaddresssetter ControllerConfigService,ApplicationService,ControllerNodeService,NetworkService,ModelService,DomainServices,ControllerDomainServices
//

// Package apiaddresssetter is a generated GoMock package.
package apiaddresssetter

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	network "github.com/juju/juju/core/network"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerConfig mocks base method.
func (m *MockControllerConfigService) WatchControllerConfig(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerConfig", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerConfig indicates an expected call of WatchControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) WatchControllerConfig(arg0 any) *MockControllerConfigServiceWatchControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).WatchControllerConfig), arg0)
	return &MockControllerConfigServiceWatchControllerConfigCall{Call: call}
}

// MockControllerConfigServiceWatchControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceWatchControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceWatchControllerConfigCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceWatchControllerConfigCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceWatchControllerConfigCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// WatchUnitAddresses mocks base method.
func (m *MockApplicationService) WatchUnitAddresses(arg0 context.Context, arg1 unit.Name) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitAddresses", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitAddresses indicates an expected call of WatchUnitAddresses.
func (mr *MockApplicationServiceMockRecorder) WatchUnitAddresses(arg0, arg1 any) *MockApplicationServiceWatchUnitAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitAddresses", reflect.TypeOf((*MockApplicationService)(nil).WatchUnitAddresses), arg0, arg1)
	return &MockApplicationServiceWatchUnitAddressesCall{Call: call}
}

// MockApplicationServiceWatchUnitAddressesCall wrap *gomock.Call
type MockApplicationServiceWatchUnitAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchUnitAddressesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchUnitAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchUnitAddressesCall) Do(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchUnitAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchUnitAddressesCall) DoAndReturn(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchUnitAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetControllerIDs mocks base method.
func (m *MockControllerNodeService) GetControllerIDs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerIDs indicates an expected call of GetControllerIDs.
func (mr *MockControllerNodeServiceMockRecorder) GetControllerIDs(arg0 any) *MockControllerNodeServiceGetControllerIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerIDs", reflect.TypeOf((*MockControllerNodeService)(nil).GetControllerIDs), arg0)
	return &MockControllerNodeServiceGetControllerIDsCall{Call: call}
}

// MockControllerNodeServiceGetControllerIDsCall wrap *gomock.Call
type MockControllerNodeServiceGetControllerIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetControllerIDsCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetControllerIDsCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetControllerIDsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAPIAddresses mocks base method.
func (m *MockControllerNodeService) SetAPIAddresses(arg0 context.Context, arg1 string, arg2 network.SpaceHostPorts, arg3 *network.SpaceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIAddresses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPIAddresses indicates an expected call of SetAPIAddresses.
func (mr *MockControllerNodeServiceMockRecorder) SetAPIAddresses(arg0, arg1, arg2, arg3 any) *MockControllerNodeServiceSetAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIAddresses", reflect.TypeOf((*MockControllerNodeService)(nil).SetAPIAddresses), arg0, arg1, arg2, arg3)
	return &MockControllerNodeServiceSetAPIAddressesCall{Call: call}
}

// MockControllerNodeServiceSetAPIAddressesCall wrap *gomock.Call
type MockControllerNodeServiceSetAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceSetAPIAddressesCall) Return(arg0 error) *MockControllerNodeServiceSetAPIAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceSetAPIAddressesCall) Do(f func(context.Context, string, network.SpaceHostPorts, *network.SpaceInfo) error) *MockControllerNodeServiceSetAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceSetAPIAddressesCall) DoAndReturn(f func(context.Context, string, network.SpaceHostPorts, *network.SpaceInfo) error) *MockControllerNodeServiceSetAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerNodes mocks base method.
func (m *MockControllerNodeService) WatchControllerNodes(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerNodes", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerNodes indicates an expected call of WatchControllerNodes.
func (mr *MockControllerNodeServiceMockRecorder) WatchControllerNodes(arg0 any) *MockControllerNodeServiceWatchControllerNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerNodes", reflect.TypeOf((*MockControllerNodeService)(nil).WatchControllerNodes), arg0)
	return &MockControllerNodeServiceWatchControllerNodesCall{Call: call}
}

// MockControllerNodeServiceWatchControllerNodesCall wrap *gomock.Call
type MockControllerNodeServiceWatchControllerNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceWatchControllerNodesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockControllerNodeServiceWatchControllerNodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceWatchControllerNodesCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerNodeServiceWatchControllerNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceWatchControllerNodesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerNodeServiceWatchControllerNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetUnitPublicAddresses mocks base method.
func (m *MockNetworkService) GetUnitPublicAddresses(arg0 context.Context, arg1 unit.Name) (network.SpaceAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPublicAddresses", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitPublicAddresses indicates an expected call of GetUnitPublicAddresses.
func (mr *MockNetworkServiceMockRecorder) GetUnitPublicAddresses(arg0, arg1 any) *MockNetworkServiceGetUnitPublicAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPublicAddresses", reflect.TypeOf((*MockNetworkService)(nil).GetUnitPublicAddresses), arg0, arg1)
	return &MockNetworkServiceGetUnitPublicAddressesCall{Call: call}
}

// MockNetworkServiceGetUnitPublicAddressesCall wrap *gomock.Call
type MockNetworkServiceGetUnitPublicAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetUnitPublicAddressesCall) Return(arg0 network.SpaceAddresses, arg1 error) *MockNetworkServiceGetUnitPublicAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetUnitPublicAddressesCall) Do(f func(context.Context, unit.Name) (network.SpaceAddresses, error)) *MockNetworkServiceGetUnitPublicAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetUnitPublicAddressesCall) DoAndReturn(f func(context.Context, unit.Name) (network.SpaceAddresses, error)) *MockNetworkServiceGetUnitPublicAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SpaceByName mocks base method.
func (m *MockNetworkService) SpaceByName(arg0 context.Context, arg1 network.SpaceName) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByName indicates an expected call of SpaceByName.
func (mr *MockNetworkServiceMockRecorder) SpaceByName(arg0, arg1 any) *MockNetworkServiceSpaceByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByName", reflect.TypeOf((*MockNetworkService)(nil).SpaceByName), arg0, arg1)
	return &MockNetworkServiceSpaceByNameCall{Call: call}
}

// MockNetworkServiceSpaceByNameCall wrap *gomock.Call
type MockNetworkServiceSpaceByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSpaceByNameCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSpaceByNameCall) Do(f func(context.Context, network.SpaceName) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSpaceByNameCall) DoAndReturn(f func(context.Context, network.SpaceName) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// GetControllerModelUUID mocks base method.
func (m *MockModelService) GetControllerModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModelUUID indicates an expected call of GetControllerModelUUID.
func (mr *MockModelServiceMockRecorder) GetControllerModelUUID(arg0 any) *MockModelServiceGetControllerModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModelUUID", reflect.TypeOf((*MockModelService)(nil).GetControllerModelUUID), arg0)
	return &MockModelServiceGetControllerModelUUIDCall{Call: call}
}

// MockModelServiceGetControllerModelUUIDCall wrap *gomock.Call
type MockModelServiceGetControllerModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetControllerModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockModelServiceGetControllerModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetControllerModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockModelServiceGetControllerModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetControllerModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockModelServiceGetControllerModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServices is a mock of DomainServices interface.
type MockDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesMockRecorder
}

// MockDomainServicesMockRecorder is the mock recorder for MockDomainServices.
type MockDomainServicesMockRecorder struct {
	mock *MockDomainServices
}

// NewMockDomainServices creates a new mock instance.
func NewMockDomainServices(ctrl *gomock.Controller) *MockDomainServices {
	mock := &MockDomainServices{ctrl: ctrl}
	mock.recorder = &MockDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServices) EXPECT() *MockDomainServicesMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockDomainServices) Application() ApplicationService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(ApplicationService)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockDomainServicesMockRecorder) Application() *MockDomainServicesApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockDomainServices)(nil).Application))
	return &MockDomainServicesApplicationCall{Call: call}
}

// MockDomainServicesApplicationCall wrap *gomock.Call
type MockDomainServicesApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesApplicationCall) Return(arg0 ApplicationService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesApplicationCall) Do(f func() ApplicationService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesApplicationCall) DoAndReturn(f func() ApplicationService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Network mocks base method.
func (m *MockDomainServices) Network() NetworkService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(NetworkService)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockDomainServicesMockRecorder) Network() *MockDomainServicesNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockDomainServices)(nil).Network))
	return &MockDomainServicesNetworkCall{Call: call}
}

// MockDomainServicesNetworkCall wrap *gomock.Call
type MockDomainServicesNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesNetworkCall) Return(arg0 NetworkService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesNetworkCall) Do(f func() NetworkService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesNetworkCall) DoAndReturn(f func() NetworkService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerDomainServices is a mock of ControllerDomainServices interface.
type MockControllerDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDomainServicesMockRecorder
}

// MockControllerDomainServicesMockRecorder is the mock recorder for MockControllerDomainServices.
type MockControllerDomainServicesMockRecorder struct {
	mock *MockControllerDomainServices
}

// NewMockControllerDomainServices creates a new mock instance.
func NewMockControllerDomainServices(ctrl *gomock.Controller) *MockControllerDomainServices {
	mock := &MockControllerDomainServices{ctrl: ctrl}
	mock.recorder = &MockControllerDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDomainServices) EXPECT() *MockControllerDomainServicesMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerDomainServices) ControllerConfig() ControllerConfigService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(ControllerConfigService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerDomainServicesMockRecorder) ControllerConfig() *MockControllerDomainServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerDomainServices)(nil).ControllerConfig))
	return &MockControllerDomainServicesControllerConfigCall{Call: call}
}

// MockControllerDomainServicesControllerConfigCall wrap *gomock.Call
type MockControllerDomainServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesControllerConfigCall) Return(arg0 ControllerConfigService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesControllerConfigCall) Do(f func() ControllerConfigService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesControllerConfigCall) DoAndReturn(f func() ControllerConfigService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerNode mocks base method.
func (m *MockControllerDomainServices) ControllerNode() ControllerNodeService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNode")
	ret0, _ := ret[0].(ControllerNodeService)
	return ret0
}

// ControllerNode indicates an expected call of ControllerNode.
func (mr *MockControllerDomainServicesMockRecorder) ControllerNode() *MockControllerDomainServicesControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNode", reflect.TypeOf((*MockControllerDomainServices)(nil).ControllerNode))
	return &MockControllerDomainServicesControllerNodeCall{Call: call}
}

// MockControllerDomainServicesControllerNodeCall wrap *gomock.Call
type MockControllerDomainServicesControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesControllerNodeCall) Return(arg0 ControllerNodeService) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesControllerNodeCall) Do(f func() ControllerNodeService) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesControllerNodeCall) DoAndReturn(f func() ControllerNodeService) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockControllerDomainServices) Model() ModelService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(ModelService)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockControllerDomainServicesMockRecorder) Model() *MockControllerDomainServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockControllerDomainServices)(nil).Model))
	return &MockControllerDomainServicesModelCall{Call: call}
}

// MockControllerDomainServicesModelCall wrap *gomock.Call
type MockControllerDomainServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesModelCall) Return(arg0 ModelService) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesModelCall) Do(f func() ModelService) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesModelCall) DoAndReturn(f func() ModelService) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
