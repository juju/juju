// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/machineactions (interfaces: Facade)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/mock_facade.go github.com/juju/juju/internal/worker/machineactions Facade
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	machineactions "github.com/juju/juju/api/agent/machineactions"
	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockFacade is a mock of Facade interface.
type MockFacade struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeMockRecorder
}

// MockFacadeMockRecorder is the mock recorder for MockFacade.
type MockFacadeMockRecorder struct {
	mock *MockFacade
}

// NewMockFacade creates a new mock instance.
func NewMockFacade(ctrl *gomock.Controller) *MockFacade {
	mock := &MockFacade{ctrl: ctrl}
	mock.recorder = &MockFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacade) EXPECT() *MockFacadeMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFacade) ISGOMOCK() struct{} {
	return struct{}{}
}

// Action mocks base method.
func (m *MockFacade) Action(arg0 context.Context, arg1 names.ActionTag) (*machineactions.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action", arg0, arg1)
	ret0, _ := ret[0].(*machineactions.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Action indicates an expected call of Action.
func (mr *MockFacadeMockRecorder) Action(arg0, arg1 any) *MockFacadeActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockFacade)(nil).Action), arg0, arg1)
	return &MockFacadeActionCall{Call: call}
}

// MockFacadeActionCall wrap *gomock.Call
type MockFacadeActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeActionCall) Return(arg0 *machineactions.Action, arg1 error) *MockFacadeActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeActionCall) Do(f func(context.Context, names.ActionTag) (*machineactions.Action, error)) *MockFacadeActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeActionCall) DoAndReturn(f func(context.Context, names.ActionTag) (*machineactions.Action, error)) *MockFacadeActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ActionBegin mocks base method.
func (m *MockFacade) ActionBegin(arg0 context.Context, arg1 names.ActionTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionBegin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionBegin indicates an expected call of ActionBegin.
func (mr *MockFacadeMockRecorder) ActionBegin(arg0, arg1 any) *MockFacadeActionBeginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionBegin", reflect.TypeOf((*MockFacade)(nil).ActionBegin), arg0, arg1)
	return &MockFacadeActionBeginCall{Call: call}
}

// MockFacadeActionBeginCall wrap *gomock.Call
type MockFacadeActionBeginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeActionBeginCall) Return(arg0 error) *MockFacadeActionBeginCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeActionBeginCall) Do(f func(context.Context, names.ActionTag) error) *MockFacadeActionBeginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeActionBeginCall) DoAndReturn(f func(context.Context, names.ActionTag) error) *MockFacadeActionBeginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ActionFinish mocks base method.
func (m *MockFacade) ActionFinish(arg0 context.Context, arg1 names.ActionTag, arg2 string, arg3 map[string]any, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionFinish", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionFinish indicates an expected call of ActionFinish.
func (mr *MockFacadeMockRecorder) ActionFinish(arg0, arg1, arg2, arg3, arg4 any) *MockFacadeActionFinishCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionFinish", reflect.TypeOf((*MockFacade)(nil).ActionFinish), arg0, arg1, arg2, arg3, arg4)
	return &MockFacadeActionFinishCall{Call: call}
}

// MockFacadeActionFinishCall wrap *gomock.Call
type MockFacadeActionFinishCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeActionFinishCall) Return(arg0 error) *MockFacadeActionFinishCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeActionFinishCall) Do(f func(context.Context, names.ActionTag, string, map[string]any, string) error) *MockFacadeActionFinishCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeActionFinishCall) DoAndReturn(f func(context.Context, names.ActionTag, string, map[string]any, string) error) *MockFacadeActionFinishCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunningActions mocks base method.
func (m *MockFacade) RunningActions(arg0 context.Context, arg1 names.MachineTag) ([]params.ActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunningActions", arg0, arg1)
	ret0, _ := ret[0].([]params.ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunningActions indicates an expected call of RunningActions.
func (mr *MockFacadeMockRecorder) RunningActions(arg0, arg1 any) *MockFacadeRunningActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningActions", reflect.TypeOf((*MockFacade)(nil).RunningActions), arg0, arg1)
	return &MockFacadeRunningActionsCall{Call: call}
}

// MockFacadeRunningActionsCall wrap *gomock.Call
type MockFacadeRunningActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeRunningActionsCall) Return(arg0 []params.ActionResult, arg1 error) *MockFacadeRunningActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeRunningActionsCall) Do(f func(context.Context, names.MachineTag) ([]params.ActionResult, error)) *MockFacadeRunningActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeRunningActionsCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]params.ActionResult, error)) *MockFacadeRunningActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchActionNotifications mocks base method.
func (m *MockFacade) WatchActionNotifications(arg0 context.Context, arg1 names.MachineTag) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchActionNotifications", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchActionNotifications indicates an expected call of WatchActionNotifications.
func (mr *MockFacadeMockRecorder) WatchActionNotifications(arg0, arg1 any) *MockFacadeWatchActionNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchActionNotifications", reflect.TypeOf((*MockFacade)(nil).WatchActionNotifications), arg0, arg1)
	return &MockFacadeWatchActionNotificationsCall{Call: call}
}

// MockFacadeWatchActionNotificationsCall wrap *gomock.Call
type MockFacadeWatchActionNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeWatchActionNotificationsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockFacadeWatchActionNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeWatchActionNotificationsCall) Do(f func(context.Context, names.MachineTag) (watcher.Watcher[[]string], error)) *MockFacadeWatchActionNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeWatchActionNotificationsCall) DoAndReturn(f func(context.Context, names.MachineTag) (watcher.Watcher[[]string], error)) *MockFacadeWatchActionNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
