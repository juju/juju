// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/dbaccessor (interfaces: DBApp,NodeManager,TrackedDB,Client,ClusterConfig)
//
// Generated by this command:
//
//	mockgen -typed -package dbaccessor -destination package_mock_test.go github.com/juju/juju/internal/worker/dbaccessor DBApp,NodeManager,TrackedDB,Client,ClusterConfig
//

// Package dbaccessor is a generated GoMock package.
package dbaccessor

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sqlair "github.com/canonical/sqlair"
	app "github.com/juju/juju/internal/database/app"
	dqlite "github.com/juju/juju/internal/database/dqlite"
	gomock "go.uber.org/mock/gomock"
)

// MockDBApp is a mock of DBApp interface.
type MockDBApp struct {
	ctrl     *gomock.Controller
	recorder *MockDBAppMockRecorder
}

// MockDBAppMockRecorder is the mock recorder for MockDBApp.
type MockDBAppMockRecorder struct {
	mock *MockDBApp
}

// NewMockDBApp creates a new mock instance.
func NewMockDBApp(ctrl *gomock.Controller) *MockDBApp {
	mock := &MockDBApp{ctrl: ctrl}
	mock.recorder = &MockDBAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBApp) EXPECT() *MockDBAppMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockDBApp) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockDBAppMockRecorder) Address() *MockDBAppAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockDBApp)(nil).Address))
	return &MockDBAppAddressCall{Call: call}
}

// MockDBAppAddressCall wrap *gomock.Call
type MockDBAppAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppAddressCall) Return(arg0 string) *MockDBAppAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppAddressCall) Do(f func() string) *MockDBAppAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppAddressCall) DoAndReturn(f func() string) *MockDBAppAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Client mocks base method.
func (m *MockDBApp) Client(arg0 context.Context) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", arg0)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client.
func (mr *MockDBAppMockRecorder) Client(arg0 any) *MockDBAppClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDBApp)(nil).Client), arg0)
	return &MockDBAppClientCall{Call: call}
}

// MockDBAppClientCall wrap *gomock.Call
type MockDBAppClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppClientCall) Return(arg0 Client, arg1 error) *MockDBAppClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppClientCall) Do(f func(context.Context) (Client, error)) *MockDBAppClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppClientCall) DoAndReturn(f func(context.Context) (Client, error)) *MockDBAppClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockDBApp) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBAppMockRecorder) Close() *MockDBAppCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBApp)(nil).Close))
	return &MockDBAppCloseCall{Call: call}
}

// MockDBAppCloseCall wrap *gomock.Call
type MockDBAppCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppCloseCall) Return(arg0 error) *MockDBAppCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppCloseCall) Do(f func() error) *MockDBAppCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppCloseCall) DoAndReturn(f func() error) *MockDBAppCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Handover mocks base method.
func (m *MockDBApp) Handover(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handover", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handover indicates an expected call of Handover.
func (mr *MockDBAppMockRecorder) Handover(arg0 any) *MockDBAppHandoverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handover", reflect.TypeOf((*MockDBApp)(nil).Handover), arg0)
	return &MockDBAppHandoverCall{Call: call}
}

// MockDBAppHandoverCall wrap *gomock.Call
type MockDBAppHandoverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppHandoverCall) Return(arg0 error) *MockDBAppHandoverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppHandoverCall) Do(f func(context.Context) error) *MockDBAppHandoverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppHandoverCall) DoAndReturn(f func(context.Context) error) *MockDBAppHandoverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockDBApp) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDBAppMockRecorder) ID() *MockDBAppIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDBApp)(nil).ID))
	return &MockDBAppIDCall{Call: call}
}

// MockDBAppIDCall wrap *gomock.Call
type MockDBAppIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppIDCall) Return(arg0 uint64) *MockDBAppIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppIDCall) Do(f func() uint64) *MockDBAppIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppIDCall) DoAndReturn(f func() uint64) *MockDBAppIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockDBApp) Open(arg0 context.Context, arg1 string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDBAppMockRecorder) Open(arg0, arg1 any) *MockDBAppOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDBApp)(nil).Open), arg0, arg1)
	return &MockDBAppOpenCall{Call: call}
}

// MockDBAppOpenCall wrap *gomock.Call
type MockDBAppOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppOpenCall) Return(arg0 *sql.DB, arg1 error) *MockDBAppOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppOpenCall) Do(f func(context.Context, string) (*sql.DB, error)) *MockDBAppOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppOpenCall) DoAndReturn(f func(context.Context, string) (*sql.DB, error)) *MockDBAppOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ready mocks base method.
func (m *MockDBApp) Ready(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockDBAppMockRecorder) Ready(arg0 any) *MockDBAppReadyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockDBApp)(nil).Ready), arg0)
	return &MockDBAppReadyCall{Call: call}
}

// MockDBAppReadyCall wrap *gomock.Call
type MockDBAppReadyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBAppReadyCall) Return(arg0 error) *MockDBAppReadyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBAppReadyCall) Do(f func(context.Context) error) *MockDBAppReadyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBAppReadyCall) DoAndReturn(f func(context.Context) error) *MockDBAppReadyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNodeManager is a mock of NodeManager interface.
type MockNodeManager struct {
	ctrl     *gomock.Controller
	recorder *MockNodeManagerMockRecorder
}

// MockNodeManagerMockRecorder is the mock recorder for MockNodeManager.
type MockNodeManagerMockRecorder struct {
	mock *MockNodeManager
}

// NewMockNodeManager creates a new mock instance.
func NewMockNodeManager(ctrl *gomock.Controller) *MockNodeManager {
	mock := &MockNodeManager{ctrl: ctrl}
	mock.recorder = &MockNodeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeManager) EXPECT() *MockNodeManagerMockRecorder {
	return m.recorder
}

// ClusterServers mocks base method.
func (m *MockNodeManager) ClusterServers(arg0 context.Context) ([]dqlite.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterServers", arg0)
	ret0, _ := ret[0].([]dqlite.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterServers indicates an expected call of ClusterServers.
func (mr *MockNodeManagerMockRecorder) ClusterServers(arg0 any) *MockNodeManagerClusterServersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterServers", reflect.TypeOf((*MockNodeManager)(nil).ClusterServers), arg0)
	return &MockNodeManagerClusterServersCall{Call: call}
}

// MockNodeManagerClusterServersCall wrap *gomock.Call
type MockNodeManagerClusterServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerClusterServersCall) Return(arg0 []dqlite.NodeInfo, arg1 error) *MockNodeManagerClusterServersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerClusterServersCall) Do(f func(context.Context) ([]dqlite.NodeInfo, error)) *MockNodeManagerClusterServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerClusterServersCall) DoAndReturn(f func(context.Context) ([]dqlite.NodeInfo, error)) *MockNodeManagerClusterServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureDataDir mocks base method.
func (m *MockNodeManager) EnsureDataDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDataDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureDataDir indicates an expected call of EnsureDataDir.
func (mr *MockNodeManagerMockRecorder) EnsureDataDir() *MockNodeManagerEnsureDataDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDataDir", reflect.TypeOf((*MockNodeManager)(nil).EnsureDataDir))
	return &MockNodeManagerEnsureDataDirCall{Call: call}
}

// MockNodeManagerEnsureDataDirCall wrap *gomock.Call
type MockNodeManagerEnsureDataDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerEnsureDataDirCall) Return(arg0 string, arg1 error) *MockNodeManagerEnsureDataDirCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerEnsureDataDirCall) Do(f func() (string, error)) *MockNodeManagerEnsureDataDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerEnsureDataDirCall) DoAndReturn(f func() (string, error)) *MockNodeManagerEnsureDataDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsExistingNode mocks base method.
func (m *MockNodeManager) IsExistingNode() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistingNode")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistingNode indicates an expected call of IsExistingNode.
func (mr *MockNodeManagerMockRecorder) IsExistingNode() *MockNodeManagerIsExistingNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistingNode", reflect.TypeOf((*MockNodeManager)(nil).IsExistingNode))
	return &MockNodeManagerIsExistingNodeCall{Call: call}
}

// MockNodeManagerIsExistingNodeCall wrap *gomock.Call
type MockNodeManagerIsExistingNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerIsExistingNodeCall) Return(arg0 bool, arg1 error) *MockNodeManagerIsExistingNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerIsExistingNodeCall) Do(f func() (bool, error)) *MockNodeManagerIsExistingNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerIsExistingNodeCall) DoAndReturn(f func() (bool, error)) *MockNodeManagerIsExistingNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsLoopbackBound mocks base method.
func (m *MockNodeManager) IsLoopbackBound(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoopbackBound", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoopbackBound indicates an expected call of IsLoopbackBound.
func (mr *MockNodeManagerMockRecorder) IsLoopbackBound(arg0 any) *MockNodeManagerIsLoopbackBoundCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoopbackBound", reflect.TypeOf((*MockNodeManager)(nil).IsLoopbackBound), arg0)
	return &MockNodeManagerIsLoopbackBoundCall{Call: call}
}

// MockNodeManagerIsLoopbackBoundCall wrap *gomock.Call
type MockNodeManagerIsLoopbackBoundCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerIsLoopbackBoundCall) Return(arg0 bool, arg1 error) *MockNodeManagerIsLoopbackBoundCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerIsLoopbackBoundCall) Do(f func(context.Context) (bool, error)) *MockNodeManagerIsLoopbackBoundCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerIsLoopbackBoundCall) DoAndReturn(f func(context.Context) (bool, error)) *MockNodeManagerIsLoopbackBoundCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsLoopbackPreferred mocks base method.
func (m *MockNodeManager) IsLoopbackPreferred() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoopbackPreferred")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoopbackPreferred indicates an expected call of IsLoopbackPreferred.
func (mr *MockNodeManagerMockRecorder) IsLoopbackPreferred() *MockNodeManagerIsLoopbackPreferredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoopbackPreferred", reflect.TypeOf((*MockNodeManager)(nil).IsLoopbackPreferred))
	return &MockNodeManagerIsLoopbackPreferredCall{Call: call}
}

// MockNodeManagerIsLoopbackPreferredCall wrap *gomock.Call
type MockNodeManagerIsLoopbackPreferredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerIsLoopbackPreferredCall) Return(arg0 bool) *MockNodeManagerIsLoopbackPreferredCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerIsLoopbackPreferredCall) Do(f func() bool) *MockNodeManagerIsLoopbackPreferredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerIsLoopbackPreferredCall) DoAndReturn(f func() bool) *MockNodeManagerIsLoopbackPreferredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClusterServers mocks base method.
func (m *MockNodeManager) SetClusterServers(arg0 context.Context, arg1 []dqlite.NodeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClusterServers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClusterServers indicates an expected call of SetClusterServers.
func (mr *MockNodeManagerMockRecorder) SetClusterServers(arg0, arg1 any) *MockNodeManagerSetClusterServersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterServers", reflect.TypeOf((*MockNodeManager)(nil).SetClusterServers), arg0, arg1)
	return &MockNodeManagerSetClusterServersCall{Call: call}
}

// MockNodeManagerSetClusterServersCall wrap *gomock.Call
type MockNodeManagerSetClusterServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerSetClusterServersCall) Return(arg0 error) *MockNodeManagerSetClusterServersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerSetClusterServersCall) Do(f func(context.Context, []dqlite.NodeInfo) error) *MockNodeManagerSetClusterServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerSetClusterServersCall) DoAndReturn(f func(context.Context, []dqlite.NodeInfo) error) *MockNodeManagerSetClusterServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClusterToLocalNode mocks base method.
func (m *MockNodeManager) SetClusterToLocalNode(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClusterToLocalNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClusterToLocalNode indicates an expected call of SetClusterToLocalNode.
func (mr *MockNodeManagerMockRecorder) SetClusterToLocalNode(arg0 any) *MockNodeManagerSetClusterToLocalNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterToLocalNode", reflect.TypeOf((*MockNodeManager)(nil).SetClusterToLocalNode), arg0)
	return &MockNodeManagerSetClusterToLocalNodeCall{Call: call}
}

// MockNodeManagerSetClusterToLocalNodeCall wrap *gomock.Call
type MockNodeManagerSetClusterToLocalNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerSetClusterToLocalNodeCall) Return(arg0 error) *MockNodeManagerSetClusterToLocalNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerSetClusterToLocalNodeCall) Do(f func(context.Context) error) *MockNodeManagerSetClusterToLocalNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerSetClusterToLocalNodeCall) DoAndReturn(f func(context.Context) error) *MockNodeManagerSetClusterToLocalNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetNodeInfo mocks base method.
func (m *MockNodeManager) SetNodeInfo(arg0 dqlite.NodeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodeInfo indicates an expected call of SetNodeInfo.
func (mr *MockNodeManagerMockRecorder) SetNodeInfo(arg0 any) *MockNodeManagerSetNodeInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeInfo", reflect.TypeOf((*MockNodeManager)(nil).SetNodeInfo), arg0)
	return &MockNodeManagerSetNodeInfoCall{Call: call}
}

// MockNodeManagerSetNodeInfoCall wrap *gomock.Call
type MockNodeManagerSetNodeInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerSetNodeInfoCall) Return(arg0 error) *MockNodeManagerSetNodeInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerSetNodeInfoCall) Do(f func(dqlite.NodeInfo) error) *MockNodeManagerSetNodeInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerSetNodeInfoCall) DoAndReturn(f func(dqlite.NodeInfo) error) *MockNodeManagerSetNodeInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAddressOption mocks base method.
func (m *MockNodeManager) WithAddressOption(arg0 string) app.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAddressOption", arg0)
	ret0, _ := ret[0].(app.Option)
	return ret0
}

// WithAddressOption indicates an expected call of WithAddressOption.
func (mr *MockNodeManagerMockRecorder) WithAddressOption(arg0 any) *MockNodeManagerWithAddressOptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAddressOption", reflect.TypeOf((*MockNodeManager)(nil).WithAddressOption), arg0)
	return &MockNodeManagerWithAddressOptionCall{Call: call}
}

// MockNodeManagerWithAddressOptionCall wrap *gomock.Call
type MockNodeManagerWithAddressOptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerWithAddressOptionCall) Return(arg0 app.Option) *MockNodeManagerWithAddressOptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerWithAddressOptionCall) Do(f func(string) app.Option) *MockNodeManagerWithAddressOptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerWithAddressOptionCall) DoAndReturn(f func(string) app.Option) *MockNodeManagerWithAddressOptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithClusterOption mocks base method.
func (m *MockNodeManager) WithClusterOption(arg0 []string) app.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithClusterOption", arg0)
	ret0, _ := ret[0].(app.Option)
	return ret0
}

// WithClusterOption indicates an expected call of WithClusterOption.
func (mr *MockNodeManagerMockRecorder) WithClusterOption(arg0 any) *MockNodeManagerWithClusterOptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithClusterOption", reflect.TypeOf((*MockNodeManager)(nil).WithClusterOption), arg0)
	return &MockNodeManagerWithClusterOptionCall{Call: call}
}

// MockNodeManagerWithClusterOptionCall wrap *gomock.Call
type MockNodeManagerWithClusterOptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerWithClusterOptionCall) Return(arg0 app.Option) *MockNodeManagerWithClusterOptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerWithClusterOptionCall) Do(f func([]string) app.Option) *MockNodeManagerWithClusterOptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerWithClusterOptionCall) DoAndReturn(f func([]string) app.Option) *MockNodeManagerWithClusterOptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithLogFuncOption mocks base method.
func (m *MockNodeManager) WithLogFuncOption() app.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLogFuncOption")
	ret0, _ := ret[0].(app.Option)
	return ret0
}

// WithLogFuncOption indicates an expected call of WithLogFuncOption.
func (mr *MockNodeManagerMockRecorder) WithLogFuncOption() *MockNodeManagerWithLogFuncOptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLogFuncOption", reflect.TypeOf((*MockNodeManager)(nil).WithLogFuncOption))
	return &MockNodeManagerWithLogFuncOptionCall{Call: call}
}

// MockNodeManagerWithLogFuncOptionCall wrap *gomock.Call
type MockNodeManagerWithLogFuncOptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerWithLogFuncOptionCall) Return(arg0 app.Option) *MockNodeManagerWithLogFuncOptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerWithLogFuncOptionCall) Do(f func() app.Option) *MockNodeManagerWithLogFuncOptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerWithLogFuncOptionCall) DoAndReturn(f func() app.Option) *MockNodeManagerWithLogFuncOptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithTLSOption mocks base method.
func (m *MockNodeManager) WithTLSOption() (app.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTLSOption")
	ret0, _ := ret[0].(app.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTLSOption indicates an expected call of WithTLSOption.
func (mr *MockNodeManagerMockRecorder) WithTLSOption() *MockNodeManagerWithTLSOptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTLSOption", reflect.TypeOf((*MockNodeManager)(nil).WithTLSOption))
	return &MockNodeManagerWithTLSOptionCall{Call: call}
}

// MockNodeManagerWithTLSOptionCall wrap *gomock.Call
type MockNodeManagerWithTLSOptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerWithTLSOptionCall) Return(arg0 app.Option, arg1 error) *MockNodeManagerWithTLSOptionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerWithTLSOptionCall) Do(f func() (app.Option, error)) *MockNodeManagerWithTLSOptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerWithTLSOptionCall) DoAndReturn(f func() (app.Option, error)) *MockNodeManagerWithTLSOptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithTracingOption mocks base method.
func (m *MockNodeManager) WithTracingOption() app.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTracingOption")
	ret0, _ := ret[0].(app.Option)
	return ret0
}

// WithTracingOption indicates an expected call of WithTracingOption.
func (mr *MockNodeManagerMockRecorder) WithTracingOption() *MockNodeManagerWithTracingOptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTracingOption", reflect.TypeOf((*MockNodeManager)(nil).WithTracingOption))
	return &MockNodeManagerWithTracingOptionCall{Call: call}
}

// MockNodeManagerWithTracingOptionCall wrap *gomock.Call
type MockNodeManagerWithTracingOptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeManagerWithTracingOptionCall) Return(arg0 app.Option) *MockNodeManagerWithTracingOptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeManagerWithTracingOptionCall) Do(f func() app.Option) *MockNodeManagerWithTracingOptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeManagerWithTracingOptionCall) DoAndReturn(f func() app.Option) *MockNodeManagerWithTracingOptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTrackedDB is a mock of TrackedDB interface.
type MockTrackedDB struct {
	ctrl     *gomock.Controller
	recorder *MockTrackedDBMockRecorder
}

// MockTrackedDBMockRecorder is the mock recorder for MockTrackedDB.
type MockTrackedDBMockRecorder struct {
	mock *MockTrackedDB
}

// NewMockTrackedDB creates a new mock instance.
func NewMockTrackedDB(ctrl *gomock.Controller) *MockTrackedDB {
	mock := &MockTrackedDB{ctrl: ctrl}
	mock.recorder = &MockTrackedDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackedDB) EXPECT() *MockTrackedDBMockRecorder {
	return m.recorder
}

// Dying mocks base method.
func (m *MockTrackedDB) Dying() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dying")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Dying indicates an expected call of Dying.
func (mr *MockTrackedDBMockRecorder) Dying() *MockTrackedDBDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dying", reflect.TypeOf((*MockTrackedDB)(nil).Dying))
	return &MockTrackedDBDyingCall{Call: call}
}

// MockTrackedDBDyingCall wrap *gomock.Call
type MockTrackedDBDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBDyingCall) Return(arg0 <-chan struct{}) *MockTrackedDBDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBDyingCall) Do(f func() <-chan struct{}) *MockTrackedDBDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBDyingCall) DoAndReturn(f func() <-chan struct{}) *MockTrackedDBDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockTrackedDB) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockTrackedDBMockRecorder) Kill() *MockTrackedDBKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTrackedDB)(nil).Kill))
	return &MockTrackedDBKillCall{Call: call}
}

// MockTrackedDBKillCall wrap *gomock.Call
type MockTrackedDBKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBKillCall) Return() *MockTrackedDBKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBKillCall) Do(f func()) *MockTrackedDBKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBKillCall) DoAndReturn(f func()) *MockTrackedDBKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StdTxn mocks base method.
func (m *MockTrackedDB) StdTxn(arg0 context.Context, arg1 func(context.Context, *sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdTxn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StdTxn indicates an expected call of StdTxn.
func (mr *MockTrackedDBMockRecorder) StdTxn(arg0, arg1 any) *MockTrackedDBStdTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdTxn", reflect.TypeOf((*MockTrackedDB)(nil).StdTxn), arg0, arg1)
	return &MockTrackedDBStdTxnCall{Call: call}
}

// MockTrackedDBStdTxnCall wrap *gomock.Call
type MockTrackedDBStdTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBStdTxnCall) Return(arg0 error) *MockTrackedDBStdTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBStdTxnCall) Do(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockTrackedDBStdTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBStdTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sql.Tx) error) error) *MockTrackedDBStdTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Txn mocks base method.
func (m *MockTrackedDB) Txn(arg0 context.Context, arg1 func(context.Context, *sqlair.TX) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockTrackedDBMockRecorder) Txn(arg0, arg1 any) *MockTrackedDBTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockTrackedDB)(nil).Txn), arg0, arg1)
	return &MockTrackedDBTxnCall{Call: call}
}

// MockTrackedDBTxnCall wrap *gomock.Call
type MockTrackedDBTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBTxnCall) Return(arg0 error) *MockTrackedDBTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBTxnCall) Do(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockTrackedDBTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBTxnCall) DoAndReturn(f func(context.Context, func(context.Context, *sqlair.TX) error) error) *MockTrackedDBTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockTrackedDB) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTrackedDBMockRecorder) Wait() *MockTrackedDBWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrackedDB)(nil).Wait))
	return &MockTrackedDBWaitCall{Call: call}
}

// MockTrackedDBWaitCall wrap *gomock.Call
type MockTrackedDBWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackedDBWaitCall) Return(arg0 error) *MockTrackedDBWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackedDBWaitCall) Do(f func() error) *MockTrackedDBWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackedDBWaitCall) DoAndReturn(f func() error) *MockTrackedDBWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockClient) Cluster(arg0 context.Context) ([]dqlite.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0)
	ret0, _ := ret[0].([]dqlite.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockClientMockRecorder) Cluster(arg0 any) *MockClientClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockClient)(nil).Cluster), arg0)
	return &MockClientClusterCall{Call: call}
}

// MockClientClusterCall wrap *gomock.Call
type MockClientClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientClusterCall) Return(arg0 []dqlite.NodeInfo, arg1 error) *MockClientClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientClusterCall) Do(f func(context.Context) ([]dqlite.NodeInfo, error)) *MockClientClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientClusterCall) DoAndReturn(f func(context.Context) ([]dqlite.NodeInfo, error)) *MockClientClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Leader mocks base method.
func (m *MockClient) Leader(arg0 context.Context) (*dqlite.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leader", arg0)
	ret0, _ := ret[0].(*dqlite.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leader indicates an expected call of Leader.
func (mr *MockClientMockRecorder) Leader(arg0 any) *MockClientLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockClient)(nil).Leader), arg0)
	return &MockClientLeaderCall{Call: call}
}

// MockClientLeaderCall wrap *gomock.Call
type MockClientLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientLeaderCall) Return(arg0 *dqlite.NodeInfo, arg1 error) *MockClientLeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientLeaderCall) Do(f func(context.Context) (*dqlite.NodeInfo, error)) *MockClientLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientLeaderCall) DoAndReturn(f func(context.Context) (*dqlite.NodeInfo, error)) *MockClientLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClusterConfig is a mock of ClusterConfig interface.
type MockClusterConfig struct {
	ctrl     *gomock.Controller
	recorder *MockClusterConfigMockRecorder
}

// MockClusterConfigMockRecorder is the mock recorder for MockClusterConfig.
type MockClusterConfigMockRecorder struct {
	mock *MockClusterConfig
}

// NewMockClusterConfig creates a new mock instance.
func NewMockClusterConfig(ctrl *gomock.Controller) *MockClusterConfig {
	mock := &MockClusterConfig{ctrl: ctrl}
	mock.recorder = &MockClusterConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterConfig) EXPECT() *MockClusterConfigMockRecorder {
	return m.recorder
}

// DBBindAddresses mocks base method.
func (m *MockClusterConfig) DBBindAddresses() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBBindAddresses")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBBindAddresses indicates an expected call of DBBindAddresses.
func (mr *MockClusterConfigMockRecorder) DBBindAddresses() *MockClusterConfigDBBindAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBBindAddresses", reflect.TypeOf((*MockClusterConfig)(nil).DBBindAddresses))
	return &MockClusterConfigDBBindAddressesCall{Call: call}
}

// MockClusterConfigDBBindAddressesCall wrap *gomock.Call
type MockClusterConfigDBBindAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterConfigDBBindAddressesCall) Return(arg0 map[string]string, arg1 error) *MockClusterConfigDBBindAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterConfigDBBindAddressesCall) Do(f func() (map[string]string, error)) *MockClusterConfigDBBindAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterConfigDBBindAddressesCall) DoAndReturn(f func() (map[string]string, error)) *MockClusterConfigDBBindAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
