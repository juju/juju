// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/agent/reboot (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/facade_mock.go github.com/juju/juju/api/agent/reboot Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// ClearReboot mocks base method.
func (m *MockClient) ClearReboot(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearReboot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearReboot indicates an expected call of ClearReboot.
func (mr *MockClientMockRecorder) ClearReboot(arg0 any) *MockClientClearRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearReboot", reflect.TypeOf((*MockClient)(nil).ClearReboot), arg0)
	return &MockClientClearRebootCall{Call: call}
}

// MockClientClearRebootCall wrap *gomock.Call
type MockClientClearRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientClearRebootCall) Return(arg0 error) *MockClientClearRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientClearRebootCall) Do(f func(context.Context) error) *MockClientClearRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientClearRebootCall) DoAndReturn(f func(context.Context) error) *MockClientClearRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRebootAction mocks base method.
func (m *MockClient) GetRebootAction(arg0 context.Context) (params.RebootAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRebootAction", arg0)
	ret0, _ := ret[0].(params.RebootAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRebootAction indicates an expected call of GetRebootAction.
func (mr *MockClientMockRecorder) GetRebootAction(arg0 any) *MockClientGetRebootActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRebootAction", reflect.TypeOf((*MockClient)(nil).GetRebootAction), arg0)
	return &MockClientGetRebootActionCall{Call: call}
}

// MockClientGetRebootActionCall wrap *gomock.Call
type MockClientGetRebootActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetRebootActionCall) Return(arg0 params.RebootAction, arg1 error) *MockClientGetRebootActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetRebootActionCall) Do(f func(context.Context) (params.RebootAction, error)) *MockClientGetRebootActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetRebootActionCall) DoAndReturn(f func(context.Context) (params.RebootAction, error)) *MockClientGetRebootActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequestReboot mocks base method.
func (m *MockClient) RequestReboot(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReboot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestReboot indicates an expected call of RequestReboot.
func (mr *MockClientMockRecorder) RequestReboot(arg0 any) *MockClientRequestRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReboot", reflect.TypeOf((*MockClient)(nil).RequestReboot), arg0)
	return &MockClientRequestRebootCall{Call: call}
}

// MockClientRequestRebootCall wrap *gomock.Call
type MockClientRequestRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRequestRebootCall) Return(arg0 error) *MockClientRequestRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRequestRebootCall) Do(f func(context.Context) error) *MockClientRequestRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRequestRebootCall) DoAndReturn(f func(context.Context) error) *MockClientRequestRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchForRebootEvent mocks base method.
func (m *MockClient) WatchForRebootEvent(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForRebootEvent", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchForRebootEvent indicates an expected call of WatchForRebootEvent.
func (mr *MockClientMockRecorder) WatchForRebootEvent(arg0 any) *MockClientWatchForRebootEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForRebootEvent", reflect.TypeOf((*MockClient)(nil).WatchForRebootEvent), arg0)
	return &MockClientWatchForRebootEventCall{Call: call}
}

// MockClientWatchForRebootEventCall wrap *gomock.Call
type MockClientWatchForRebootEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientWatchForRebootEventCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockClientWatchForRebootEventCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientWatchForRebootEventCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockClientWatchForRebootEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientWatchForRebootEventCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockClientWatchForRebootEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
