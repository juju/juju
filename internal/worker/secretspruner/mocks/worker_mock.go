// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/secretspruner (interfaces: SecretsFacade)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/worker_mock.go github.com/juju/juju/internal/worker/secretspruner SecretsFacade
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretsFacade is a mock of SecretsFacade interface.
type MockSecretsFacade struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsFacadeMockRecorder
}

// MockSecretsFacadeMockRecorder is the mock recorder for MockSecretsFacade.
type MockSecretsFacadeMockRecorder struct {
	mock *MockSecretsFacade
}

// NewMockSecretsFacade creates a new mock instance.
func NewMockSecretsFacade(ctrl *gomock.Controller) *MockSecretsFacade {
	mock := &MockSecretsFacade{ctrl: ctrl}
	mock.recorder = &MockSecretsFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsFacade) EXPECT() *MockSecretsFacadeMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretsFacade) ISGOMOCK() struct{} {
	return struct{}{}
}

// DeleteObsoleteUserSecretRevisions mocks base method.
func (m *MockSecretsFacade) DeleteObsoleteUserSecretRevisions(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObsoleteUserSecretRevisions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObsoleteUserSecretRevisions indicates an expected call of DeleteObsoleteUserSecretRevisions.
func (mr *MockSecretsFacadeMockRecorder) DeleteObsoleteUserSecretRevisions(arg0 any) *MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObsoleteUserSecretRevisions", reflect.TypeOf((*MockSecretsFacade)(nil).DeleteObsoleteUserSecretRevisions), arg0)
	return &MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall{Call: call}
}

// MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall wrap *gomock.Call
type MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall) Return(arg0 error) *MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall) Do(f func(context.Context) error) *MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall) DoAndReturn(f func(context.Context) error) *MockSecretsFacadeDeleteObsoleteUserSecretRevisionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRevisionsToPrune mocks base method.
func (m *MockSecretsFacade) WatchRevisionsToPrune(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRevisionsToPrune", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRevisionsToPrune indicates an expected call of WatchRevisionsToPrune.
func (mr *MockSecretsFacadeMockRecorder) WatchRevisionsToPrune(arg0 any) *MockSecretsFacadeWatchRevisionsToPruneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRevisionsToPrune", reflect.TypeOf((*MockSecretsFacade)(nil).WatchRevisionsToPrune), arg0)
	return &MockSecretsFacadeWatchRevisionsToPruneCall{Call: call}
}

// MockSecretsFacadeWatchRevisionsToPruneCall wrap *gomock.Call
type MockSecretsFacadeWatchRevisionsToPruneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsFacadeWatchRevisionsToPruneCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockSecretsFacadeWatchRevisionsToPruneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsFacadeWatchRevisionsToPruneCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockSecretsFacadeWatchRevisionsToPruneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsFacadeWatchRevisionsToPruneCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockSecretsFacadeWatchRevisionsToPruneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
