// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/vsphere (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/client_mock.go github.com/juju/juju/internal/provider/vsphere Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	vsphereclient "github.com/juju/juju/internal/provider/vsphere/internal/vsphereclient"
	object "github.com/vmware/govmomi/object"
	mo "github.com/vmware/govmomi/vim25/mo"
	types "github.com/vmware/govmomi/vim25/types"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockClient) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(arg0 any) *MockClientCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), arg0)
	return &MockClientCloseCall{Call: call}
}

// MockClientCloseCall wrap *gomock.Call
type MockClientCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCloseCall) Return(arg0 error) *MockClientCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCloseCall) Do(f func(context.Context) error) *MockClientCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCloseCall) DoAndReturn(f func(context.Context) error) *MockClientCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ComputeResources mocks base method.
func (m *MockClient) ComputeResources(arg0 context.Context) ([]vsphereclient.ComputeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeResources", arg0)
	ret0, _ := ret[0].([]vsphereclient.ComputeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeResources indicates an expected call of ComputeResources.
func (mr *MockClientMockRecorder) ComputeResources(arg0 any) *MockClientComputeResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeResources", reflect.TypeOf((*MockClient)(nil).ComputeResources), arg0)
	return &MockClientComputeResourcesCall{Call: call}
}

// MockClientComputeResourcesCall wrap *gomock.Call
type MockClientComputeResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientComputeResourcesCall) Return(arg0 []vsphereclient.ComputeResource, arg1 error) *MockClientComputeResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientComputeResourcesCall) Do(f func(context.Context) ([]vsphereclient.ComputeResource, error)) *MockClientComputeResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientComputeResourcesCall) DoAndReturn(f func(context.Context) ([]vsphereclient.ComputeResource, error)) *MockClientComputeResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTemplateVM mocks base method.
func (m *MockClient) CreateTemplateVM(arg0 context.Context, arg1 vsphereclient.ImportOVAParameters) (*object.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateVM", arg0, arg1)
	ret0, _ := ret[0].(*object.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateVM indicates an expected call of CreateTemplateVM.
func (mr *MockClientMockRecorder) CreateTemplateVM(arg0, arg1 any) *MockClientCreateTemplateVMCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateVM", reflect.TypeOf((*MockClient)(nil).CreateTemplateVM), arg0, arg1)
	return &MockClientCreateTemplateVMCall{Call: call}
}

// MockClientCreateTemplateVMCall wrap *gomock.Call
type MockClientCreateTemplateVMCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCreateTemplateVMCall) Return(arg0 *object.VirtualMachine, arg1 error) *MockClientCreateTemplateVMCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCreateTemplateVMCall) Do(f func(context.Context, vsphereclient.ImportOVAParameters) (*object.VirtualMachine, error)) *MockClientCreateTemplateVMCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCreateTemplateVMCall) DoAndReturn(f func(context.Context, vsphereclient.ImportOVAParameters) (*object.VirtualMachine, error)) *MockClientCreateTemplateVMCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVirtualMachine mocks base method.
func (m *MockClient) CreateVirtualMachine(arg0 context.Context, arg1 vsphereclient.CreateVirtualMachineParams) (*mo.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*mo.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine.
func (mr *MockClientMockRecorder) CreateVirtualMachine(arg0, arg1 any) *MockClientCreateVirtualMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockClient)(nil).CreateVirtualMachine), arg0, arg1)
	return &MockClientCreateVirtualMachineCall{Call: call}
}

// MockClientCreateVirtualMachineCall wrap *gomock.Call
type MockClientCreateVirtualMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCreateVirtualMachineCall) Return(arg0 *mo.VirtualMachine, arg1 error) *MockClientCreateVirtualMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCreateVirtualMachineCall) Do(f func(context.Context, vsphereclient.CreateVirtualMachineParams) (*mo.VirtualMachine, error)) *MockClientCreateVirtualMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCreateVirtualMachineCall) DoAndReturn(f func(context.Context, vsphereclient.CreateVirtualMachineParams) (*mo.VirtualMachine, error)) *MockClientCreateVirtualMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Datastores mocks base method.
func (m *MockClient) Datastores(arg0 context.Context) ([]mo.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Datastores", arg0)
	ret0, _ := ret[0].([]mo.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Datastores indicates an expected call of Datastores.
func (mr *MockClientMockRecorder) Datastores(arg0 any) *MockClientDatastoresCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datastores", reflect.TypeOf((*MockClient)(nil).Datastores), arg0)
	return &MockClientDatastoresCall{Call: call}
}

// MockClientDatastoresCall wrap *gomock.Call
type MockClientDatastoresCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDatastoresCall) Return(arg0 []mo.Datastore, arg1 error) *MockClientDatastoresCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDatastoresCall) Do(f func(context.Context) ([]mo.Datastore, error)) *MockClientDatastoresCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDatastoresCall) DoAndReturn(f func(context.Context) ([]mo.Datastore, error)) *MockClientDatastoresCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDatastoreFile mocks base method.
func (m *MockClient) DeleteDatastoreFile(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatastoreFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatastoreFile indicates an expected call of DeleteDatastoreFile.
func (mr *MockClientMockRecorder) DeleteDatastoreFile(arg0, arg1 any) *MockClientDeleteDatastoreFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastoreFile", reflect.TypeOf((*MockClient)(nil).DeleteDatastoreFile), arg0, arg1)
	return &MockClientDeleteDatastoreFileCall{Call: call}
}

// MockClientDeleteDatastoreFileCall wrap *gomock.Call
type MockClientDeleteDatastoreFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteDatastoreFileCall) Return(arg0 error) *MockClientDeleteDatastoreFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteDatastoreFileCall) Do(f func(context.Context, string) error) *MockClientDeleteDatastoreFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteDatastoreFileCall) DoAndReturn(f func(context.Context, string) error) *MockClientDeleteDatastoreFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyVMFolder mocks base method.
func (m *MockClient) DestroyVMFolder(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyVMFolder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyVMFolder indicates an expected call of DestroyVMFolder.
func (mr *MockClientMockRecorder) DestroyVMFolder(arg0, arg1 any) *MockClientDestroyVMFolderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyVMFolder", reflect.TypeOf((*MockClient)(nil).DestroyVMFolder), arg0, arg1)
	return &MockClientDestroyVMFolderCall{Call: call}
}

// MockClientDestroyVMFolderCall wrap *gomock.Call
type MockClientDestroyVMFolderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDestroyVMFolderCall) Return(arg0 error) *MockClientDestroyVMFolderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDestroyVMFolderCall) Do(f func(context.Context, string) error) *MockClientDestroyVMFolderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDestroyVMFolderCall) DoAndReturn(f func(context.Context, string) error) *MockClientDestroyVMFolderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureVMFolder mocks base method.
func (m *MockClient) EnsureVMFolder(arg0 context.Context, arg1, arg2 string) (*object.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVMFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].(*object.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureVMFolder indicates an expected call of EnsureVMFolder.
func (mr *MockClientMockRecorder) EnsureVMFolder(arg0, arg1, arg2 any) *MockClientEnsureVMFolderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVMFolder", reflect.TypeOf((*MockClient)(nil).EnsureVMFolder), arg0, arg1, arg2)
	return &MockClientEnsureVMFolderCall{Call: call}
}

// MockClientEnsureVMFolderCall wrap *gomock.Call
type MockClientEnsureVMFolderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientEnsureVMFolderCall) Return(arg0 *object.Folder, arg1 error) *MockClientEnsureVMFolderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientEnsureVMFolderCall) Do(f func(context.Context, string, string) (*object.Folder, error)) *MockClientEnsureVMFolderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientEnsureVMFolderCall) DoAndReturn(f func(context.Context, string, string) (*object.Folder, error)) *MockClientEnsureVMFolderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindFolder mocks base method.
func (m *MockClient) FindFolder(arg0 context.Context, arg1 string) (*object.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFolder", arg0, arg1)
	ret0, _ := ret[0].(*object.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFolder indicates an expected call of FindFolder.
func (mr *MockClientMockRecorder) FindFolder(arg0, arg1 any) *MockClientFindFolderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFolder", reflect.TypeOf((*MockClient)(nil).FindFolder), arg0, arg1)
	return &MockClientFindFolderCall{Call: call}
}

// MockClientFindFolderCall wrap *gomock.Call
type MockClientFindFolderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientFindFolderCall) Return(arg0 *object.Folder, arg1 error) *MockClientFindFolderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientFindFolderCall) Do(f func(context.Context, string) (*object.Folder, error)) *MockClientFindFolderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientFindFolderCall) DoAndReturn(f func(context.Context, string) (*object.Folder, error)) *MockClientFindFolderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Folders mocks base method.
func (m *MockClient) Folders(arg0 context.Context) (*object.DatacenterFolders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Folders", arg0)
	ret0, _ := ret[0].(*object.DatacenterFolders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Folders indicates an expected call of Folders.
func (mr *MockClientMockRecorder) Folders(arg0 any) *MockClientFoldersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folders", reflect.TypeOf((*MockClient)(nil).Folders), arg0)
	return &MockClientFoldersCall{Call: call}
}

// MockClientFoldersCall wrap *gomock.Call
type MockClientFoldersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientFoldersCall) Return(arg0 *object.DatacenterFolders, arg1 error) *MockClientFoldersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientFoldersCall) Do(f func(context.Context) (*object.DatacenterFolders, error)) *MockClientFoldersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientFoldersCall) DoAndReturn(f func(context.Context) (*object.DatacenterFolders, error)) *MockClientFoldersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTargetDatastore mocks base method.
func (m *MockClient) GetTargetDatastore(arg0 context.Context, arg1 *mo.ComputeResource, arg2 string) (*object.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetDatastore", arg0, arg1, arg2)
	ret0, _ := ret[0].(*object.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetDatastore indicates an expected call of GetTargetDatastore.
func (mr *MockClientMockRecorder) GetTargetDatastore(arg0, arg1, arg2 any) *MockClientGetTargetDatastoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetDatastore", reflect.TypeOf((*MockClient)(nil).GetTargetDatastore), arg0, arg1, arg2)
	return &MockClientGetTargetDatastoreCall{Call: call}
}

// MockClientGetTargetDatastoreCall wrap *gomock.Call
type MockClientGetTargetDatastoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetTargetDatastoreCall) Return(arg0 *object.Datastore, arg1 error) *MockClientGetTargetDatastoreCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetTargetDatastoreCall) Do(f func(context.Context, *mo.ComputeResource, string) (*object.Datastore, error)) *MockClientGetTargetDatastoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetTargetDatastoreCall) DoAndReturn(f func(context.Context, *mo.ComputeResource, string) (*object.Datastore, error)) *MockClientGetTargetDatastoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVMTemplates mocks base method.
func (m *MockClient) ListVMTemplates(arg0 context.Context, arg1 string) ([]*object.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVMTemplates", arg0, arg1)
	ret0, _ := ret[0].([]*object.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMTemplates indicates an expected call of ListVMTemplates.
func (mr *MockClientMockRecorder) ListVMTemplates(arg0, arg1 any) *MockClientListVMTemplatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMTemplates", reflect.TypeOf((*MockClient)(nil).ListVMTemplates), arg0, arg1)
	return &MockClientListVMTemplatesCall{Call: call}
}

// MockClientListVMTemplatesCall wrap *gomock.Call
type MockClientListVMTemplatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientListVMTemplatesCall) Return(arg0 []*object.VirtualMachine, arg1 error) *MockClientListVMTemplatesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientListVMTemplatesCall) Do(f func(context.Context, string) ([]*object.VirtualMachine, error)) *MockClientListVMTemplatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientListVMTemplatesCall) DoAndReturn(f func(context.Context, string) ([]*object.VirtualMachine, error)) *MockClientListVMTemplatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveVMFolderInto mocks base method.
func (m *MockClient) MoveVMFolderInto(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveVMFolderInto", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveVMFolderInto indicates an expected call of MoveVMFolderInto.
func (mr *MockClientMockRecorder) MoveVMFolderInto(arg0, arg1, arg2 any) *MockClientMoveVMFolderIntoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveVMFolderInto", reflect.TypeOf((*MockClient)(nil).MoveVMFolderInto), arg0, arg1, arg2)
	return &MockClientMoveVMFolderIntoCall{Call: call}
}

// MockClientMoveVMFolderIntoCall wrap *gomock.Call
type MockClientMoveVMFolderIntoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientMoveVMFolderIntoCall) Return(arg0 error) *MockClientMoveVMFolderIntoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientMoveVMFolderIntoCall) Do(f func(context.Context, string, string) error) *MockClientMoveVMFolderIntoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientMoveVMFolderIntoCall) DoAndReturn(f func(context.Context, string, string) error) *MockClientMoveVMFolderIntoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveVMsInto mocks base method.
func (m *MockClient) MoveVMsInto(arg0 context.Context, arg1 string, arg2 ...types.ManagedObjectReference) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveVMsInto", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveVMsInto indicates an expected call of MoveVMsInto.
func (mr *MockClientMockRecorder) MoveVMsInto(arg0, arg1 any, arg2 ...any) *MockClientMoveVMsIntoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveVMsInto", reflect.TypeOf((*MockClient)(nil).MoveVMsInto), varargs...)
	return &MockClientMoveVMsIntoCall{Call: call}
}

// MockClientMoveVMsIntoCall wrap *gomock.Call
type MockClientMoveVMsIntoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientMoveVMsIntoCall) Return(arg0 error) *MockClientMoveVMsIntoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientMoveVMsIntoCall) Do(f func(context.Context, string, ...types.ManagedObjectReference) error) *MockClientMoveVMsIntoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientMoveVMsIntoCall) DoAndReturn(f func(context.Context, string, ...types.ManagedObjectReference) error) *MockClientMoveVMsIntoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveVirtualMachines mocks base method.
func (m *MockClient) RemoveVirtualMachines(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVirtualMachines", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVirtualMachines indicates an expected call of RemoveVirtualMachines.
func (mr *MockClientMockRecorder) RemoveVirtualMachines(arg0, arg1 any) *MockClientRemoveVirtualMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVirtualMachines", reflect.TypeOf((*MockClient)(nil).RemoveVirtualMachines), arg0, arg1)
	return &MockClientRemoveVirtualMachinesCall{Call: call}
}

// MockClientRemoveVirtualMachinesCall wrap *gomock.Call
type MockClientRemoveVirtualMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRemoveVirtualMachinesCall) Return(arg0 error) *MockClientRemoveVirtualMachinesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRemoveVirtualMachinesCall) Do(f func(context.Context, string) error) *MockClientRemoveVirtualMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRemoveVirtualMachinesCall) DoAndReturn(f func(context.Context, string) error) *MockClientRemoveVirtualMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResourcePools mocks base method.
func (m *MockClient) ResourcePools(arg0 context.Context, arg1 string) ([]*object.ResourcePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcePools", arg0, arg1)
	ret0, _ := ret[0].([]*object.ResourcePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcePools indicates an expected call of ResourcePools.
func (mr *MockClientMockRecorder) ResourcePools(arg0, arg1 any) *MockClientResourcePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcePools", reflect.TypeOf((*MockClient)(nil).ResourcePools), arg0, arg1)
	return &MockClientResourcePoolsCall{Call: call}
}

// MockClientResourcePoolsCall wrap *gomock.Call
type MockClientResourcePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientResourcePoolsCall) Return(arg0 []*object.ResourcePool, arg1 error) *MockClientResourcePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientResourcePoolsCall) Do(f func(context.Context, string) ([]*object.ResourcePool, error)) *MockClientResourcePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientResourcePoolsCall) DoAndReturn(f func(context.Context, string) ([]*object.ResourcePool, error)) *MockClientResourcePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVirtualMachineExtraConfig mocks base method.
func (m *MockClient) UpdateVirtualMachineExtraConfig(arg0 context.Context, arg1 *mo.VirtualMachine, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualMachineExtraConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMachineExtraConfig indicates an expected call of UpdateVirtualMachineExtraConfig.
func (mr *MockClientMockRecorder) UpdateVirtualMachineExtraConfig(arg0, arg1, arg2 any) *MockClientUpdateVirtualMachineExtraConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMachineExtraConfig", reflect.TypeOf((*MockClient)(nil).UpdateVirtualMachineExtraConfig), arg0, arg1, arg2)
	return &MockClientUpdateVirtualMachineExtraConfigCall{Call: call}
}

// MockClientUpdateVirtualMachineExtraConfigCall wrap *gomock.Call
type MockClientUpdateVirtualMachineExtraConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUpdateVirtualMachineExtraConfigCall) Return(arg0 error) *MockClientUpdateVirtualMachineExtraConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUpdateVirtualMachineExtraConfigCall) Do(f func(context.Context, *mo.VirtualMachine, map[string]string) error) *MockClientUpdateVirtualMachineExtraConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUpdateVirtualMachineExtraConfigCall) DoAndReturn(f func(context.Context, *mo.VirtualMachine, map[string]string) error) *MockClientUpdateVirtualMachineExtraConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UserHasRootLevelPrivilege mocks base method.
func (m *MockClient) UserHasRootLevelPrivilege(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasRootLevelPrivilege", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHasRootLevelPrivilege indicates an expected call of UserHasRootLevelPrivilege.
func (mr *MockClientMockRecorder) UserHasRootLevelPrivilege(arg0, arg1 any) *MockClientUserHasRootLevelPrivilegeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasRootLevelPrivilege", reflect.TypeOf((*MockClient)(nil).UserHasRootLevelPrivilege), arg0, arg1)
	return &MockClientUserHasRootLevelPrivilegeCall{Call: call}
}

// MockClientUserHasRootLevelPrivilegeCall wrap *gomock.Call
type MockClientUserHasRootLevelPrivilegeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUserHasRootLevelPrivilegeCall) Return(arg0 bool, arg1 error) *MockClientUserHasRootLevelPrivilegeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUserHasRootLevelPrivilegeCall) Do(f func(context.Context, string) (bool, error)) *MockClientUserHasRootLevelPrivilegeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUserHasRootLevelPrivilegeCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockClientUserHasRootLevelPrivilegeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VirtualMachineObjectToManagedObject mocks base method.
func (m *MockClient) VirtualMachineObjectToManagedObject(arg0 context.Context, arg1 *object.VirtualMachine) (mo.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineObjectToManagedObject", arg0, arg1)
	ret0, _ := ret[0].(mo.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachineObjectToManagedObject indicates an expected call of VirtualMachineObjectToManagedObject.
func (mr *MockClientMockRecorder) VirtualMachineObjectToManagedObject(arg0, arg1 any) *MockClientVirtualMachineObjectToManagedObjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineObjectToManagedObject", reflect.TypeOf((*MockClient)(nil).VirtualMachineObjectToManagedObject), arg0, arg1)
	return &MockClientVirtualMachineObjectToManagedObjectCall{Call: call}
}

// MockClientVirtualMachineObjectToManagedObjectCall wrap *gomock.Call
type MockClientVirtualMachineObjectToManagedObjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientVirtualMachineObjectToManagedObjectCall) Return(arg0 mo.VirtualMachine, arg1 error) *MockClientVirtualMachineObjectToManagedObjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientVirtualMachineObjectToManagedObjectCall) Do(f func(context.Context, *object.VirtualMachine) (mo.VirtualMachine, error)) *MockClientVirtualMachineObjectToManagedObjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientVirtualMachineObjectToManagedObjectCall) DoAndReturn(f func(context.Context, *object.VirtualMachine) (mo.VirtualMachine, error)) *MockClientVirtualMachineObjectToManagedObjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VirtualMachines mocks base method.
func (m *MockClient) VirtualMachines(arg0 context.Context, arg1 string) ([]*mo.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachines", arg0, arg1)
	ret0, _ := ret[0].([]*mo.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachines indicates an expected call of VirtualMachines.
func (mr *MockClientMockRecorder) VirtualMachines(arg0, arg1 any) *MockClientVirtualMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachines", reflect.TypeOf((*MockClient)(nil).VirtualMachines), arg0, arg1)
	return &MockClientVirtualMachinesCall{Call: call}
}

// MockClientVirtualMachinesCall wrap *gomock.Call
type MockClientVirtualMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientVirtualMachinesCall) Return(arg0 []*mo.VirtualMachine, arg1 error) *MockClientVirtualMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientVirtualMachinesCall) Do(f func(context.Context, string) ([]*mo.VirtualMachine, error)) *MockClientVirtualMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientVirtualMachinesCall) DoAndReturn(f func(context.Context, string) ([]*mo.VirtualMachine, error)) *MockClientVirtualMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
