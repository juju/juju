// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/network (interfaces: AvailabilityZone)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/availability_zone.go github.com/juju/juju/core/network AvailabilityZone
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAvailabilityZone is a mock of AvailabilityZone interface.
type MockAvailabilityZone struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityZoneMockRecorder
}

// MockAvailabilityZoneMockRecorder is the mock recorder for MockAvailabilityZone.
type MockAvailabilityZoneMockRecorder struct {
	mock *MockAvailabilityZone
}

// NewMockAvailabilityZone creates a new mock instance.
func NewMockAvailabilityZone(ctrl *gomock.Controller) *MockAvailabilityZone {
	mock := &MockAvailabilityZone{ctrl: ctrl}
	mock.recorder = &MockAvailabilityZoneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityZone) EXPECT() *MockAvailabilityZoneMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAvailabilityZone) ISGOMOCK() struct{} {
	return struct{}{}
}

// Available mocks base method.
func (m *MockAvailabilityZone) Available() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Available")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Available indicates an expected call of Available.
func (mr *MockAvailabilityZoneMockRecorder) Available() *MockAvailabilityZoneAvailableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockAvailabilityZone)(nil).Available))
	return &MockAvailabilityZoneAvailableCall{Call: call}
}

// MockAvailabilityZoneAvailableCall wrap *gomock.Call
type MockAvailabilityZoneAvailableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAvailabilityZoneAvailableCall) Return(arg0 bool) *MockAvailabilityZoneAvailableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAvailabilityZoneAvailableCall) Do(f func() bool) *MockAvailabilityZoneAvailableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAvailabilityZoneAvailableCall) DoAndReturn(f func() bool) *MockAvailabilityZoneAvailableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockAvailabilityZone) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAvailabilityZoneMockRecorder) Name() *MockAvailabilityZoneNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAvailabilityZone)(nil).Name))
	return &MockAvailabilityZoneNameCall{Call: call}
}

// MockAvailabilityZoneNameCall wrap *gomock.Call
type MockAvailabilityZoneNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAvailabilityZoneNameCall) Return(arg0 string) *MockAvailabilityZoneNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAvailabilityZoneNameCall) Do(f func() string) *MockAvailabilityZoneNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAvailabilityZoneNameCall) DoAndReturn(f func() string) *MockAvailabilityZoneNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
