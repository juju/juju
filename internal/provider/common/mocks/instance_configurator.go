// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/common (interfaces: InstanceConfigurator)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/instance_configurator.go github.com/juju/juju/internal/provider/common InstanceConfigurator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	firewall "github.com/juju/juju/core/network/firewall"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceConfigurator is a mock of InstanceConfigurator interface.
type MockInstanceConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceConfiguratorMockRecorder
}

// MockInstanceConfiguratorMockRecorder is the mock recorder for MockInstanceConfigurator.
type MockInstanceConfiguratorMockRecorder struct {
	mock *MockInstanceConfigurator
}

// NewMockInstanceConfigurator creates a new mock instance.
func NewMockInstanceConfigurator(ctrl *gomock.Controller) *MockInstanceConfigurator {
	mock := &MockInstanceConfigurator{ctrl: ctrl}
	mock.recorder = &MockInstanceConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceConfigurator) EXPECT() *MockInstanceConfiguratorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstanceConfigurator) ISGOMOCK() struct{} {
	return struct{}{}
}

// ChangeIngressRules mocks base method.
func (m *MockInstanceConfigurator) ChangeIngressRules(arg0 string, arg1 bool, arg2 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeIngressRules", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeIngressRules indicates an expected call of ChangeIngressRules.
func (mr *MockInstanceConfiguratorMockRecorder) ChangeIngressRules(arg0, arg1, arg2 any) *MockInstanceConfiguratorChangeIngressRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeIngressRules", reflect.TypeOf((*MockInstanceConfigurator)(nil).ChangeIngressRules), arg0, arg1, arg2)
	return &MockInstanceConfiguratorChangeIngressRulesCall{Call: call}
}

// MockInstanceConfiguratorChangeIngressRulesCall wrap *gomock.Call
type MockInstanceConfiguratorChangeIngressRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceConfiguratorChangeIngressRulesCall) Return(arg0 error) *MockInstanceConfiguratorChangeIngressRulesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceConfiguratorChangeIngressRulesCall) Do(f func(string, bool, firewall.IngressRules) error) *MockInstanceConfiguratorChangeIngressRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceConfiguratorChangeIngressRulesCall) DoAndReturn(f func(string, bool, firewall.IngressRules) error) *MockInstanceConfiguratorChangeIngressRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DropAllPorts mocks base method.
func (m *MockInstanceConfigurator) DropAllPorts(arg0 []int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAllPorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAllPorts indicates an expected call of DropAllPorts.
func (mr *MockInstanceConfiguratorMockRecorder) DropAllPorts(arg0, arg1 any) *MockInstanceConfiguratorDropAllPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllPorts", reflect.TypeOf((*MockInstanceConfigurator)(nil).DropAllPorts), arg0, arg1)
	return &MockInstanceConfiguratorDropAllPortsCall{Call: call}
}

// MockInstanceConfiguratorDropAllPortsCall wrap *gomock.Call
type MockInstanceConfiguratorDropAllPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceConfiguratorDropAllPortsCall) Return(arg0 error) *MockInstanceConfiguratorDropAllPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceConfiguratorDropAllPortsCall) Do(f func([]int, string) error) *MockInstanceConfiguratorDropAllPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceConfiguratorDropAllPortsCall) DoAndReturn(f func([]int, string) error) *MockInstanceConfiguratorDropAllPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindIngressRules mocks base method.
func (m *MockInstanceConfigurator) FindIngressRules() (firewall.IngressRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIngressRules")
	ret0, _ := ret[0].(firewall.IngressRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIngressRules indicates an expected call of FindIngressRules.
func (mr *MockInstanceConfiguratorMockRecorder) FindIngressRules() *MockInstanceConfiguratorFindIngressRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIngressRules", reflect.TypeOf((*MockInstanceConfigurator)(nil).FindIngressRules))
	return &MockInstanceConfiguratorFindIngressRulesCall{Call: call}
}

// MockInstanceConfiguratorFindIngressRulesCall wrap *gomock.Call
type MockInstanceConfiguratorFindIngressRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceConfiguratorFindIngressRulesCall) Return(arg0 firewall.IngressRules, arg1 error) *MockInstanceConfiguratorFindIngressRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceConfiguratorFindIngressRulesCall) Do(f func() (firewall.IngressRules, error)) *MockInstanceConfiguratorFindIngressRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceConfiguratorFindIngressRulesCall) DoAndReturn(f func() (firewall.IngressRules, error)) *MockInstanceConfiguratorFindIngressRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
