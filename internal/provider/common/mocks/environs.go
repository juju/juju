// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs (interfaces: CredentialInvalidator)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/environs.go github.com/juju/juju/environs CredentialInvalidator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	environs "github.com/juju/juju/environs"
	gomock "go.uber.org/mock/gomock"
)

// MockCredentialInvalidator is a mock of CredentialInvalidator interface.
type MockCredentialInvalidator struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialInvalidatorMockRecorder
}

// MockCredentialInvalidatorMockRecorder is the mock recorder for MockCredentialInvalidator.
type MockCredentialInvalidatorMockRecorder struct {
	mock *MockCredentialInvalidator
}

// NewMockCredentialInvalidator creates a new mock instance.
func NewMockCredentialInvalidator(ctrl *gomock.Controller) *MockCredentialInvalidator {
	mock := &MockCredentialInvalidator{ctrl: ctrl}
	mock.recorder = &MockCredentialInvalidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialInvalidator) EXPECT() *MockCredentialInvalidatorMockRecorder {
	return m.recorder
}

// InvalidateCredentials mocks base method.
func (m *MockCredentialInvalidator) InvalidateCredentials(arg0 context.Context, arg1 environs.CredentialInvalidReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateCredentials", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateCredentials indicates an expected call of InvalidateCredentials.
func (mr *MockCredentialInvalidatorMockRecorder) InvalidateCredentials(arg0, arg1 any) *MockCredentialInvalidatorInvalidateCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateCredentials", reflect.TypeOf((*MockCredentialInvalidator)(nil).InvalidateCredentials), arg0, arg1)
	return &MockCredentialInvalidatorInvalidateCredentialsCall{Call: call}
}

// MockCredentialInvalidatorInvalidateCredentialsCall wrap *gomock.Call
type MockCredentialInvalidatorInvalidateCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialInvalidatorInvalidateCredentialsCall) Return(arg0 error) *MockCredentialInvalidatorInvalidateCredentialsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialInvalidatorInvalidateCredentialsCall) Do(f func(context.Context, environs.CredentialInvalidReason) error) *MockCredentialInvalidatorInvalidateCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialInvalidatorInvalidateCredentialsCall) DoAndReturn(f func(context.Context, environs.CredentialInvalidReason) error) *MockCredentialInvalidatorInvalidateCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
