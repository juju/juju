// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/common (interfaces: ZonedEnviron)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/zoned_environ.go github.com/juju/juju/internal/provider/common ZonedEnviron
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	constraints "github.com/juju/juju/core/constraints"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	environs "github.com/juju/juju/environs"
	config "github.com/juju/juju/environs/config"
	envcontext "github.com/juju/juju/environs/envcontext"
	instances "github.com/juju/juju/environs/instances"
	storage "github.com/juju/juju/internal/storage"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockZonedEnviron is a mock of ZonedEnviron interface.
type MockZonedEnviron struct {
	ctrl     *gomock.Controller
	recorder *MockZonedEnvironMockRecorder
}

// MockZonedEnvironMockRecorder is the mock recorder for MockZonedEnviron.
type MockZonedEnvironMockRecorder struct {
	mock *MockZonedEnviron
}

// NewMockZonedEnviron creates a new mock instance.
func NewMockZonedEnviron(ctrl *gomock.Controller) *MockZonedEnviron {
	mock := &MockZonedEnviron{ctrl: ctrl}
	mock.recorder = &MockZonedEnvironMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZonedEnviron) EXPECT() *MockZonedEnvironMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockZonedEnviron) ISGOMOCK() struct{} {
	return struct{}{}
}

// AdoptResources mocks base method.
func (m *MockZonedEnviron) AdoptResources(arg0 envcontext.ProviderCallContext, arg1 string, arg2 version.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptResources indicates an expected call of AdoptResources.
func (mr *MockZonedEnvironMockRecorder) AdoptResources(arg0, arg1, arg2 any) *MockZonedEnvironAdoptResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptResources", reflect.TypeOf((*MockZonedEnviron)(nil).AdoptResources), arg0, arg1, arg2)
	return &MockZonedEnvironAdoptResourcesCall{Call: call}
}

// MockZonedEnvironAdoptResourcesCall wrap *gomock.Call
type MockZonedEnvironAdoptResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironAdoptResourcesCall) Return(arg0 error) *MockZonedEnvironAdoptResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironAdoptResourcesCall) Do(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockZonedEnvironAdoptResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironAdoptResourcesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockZonedEnvironAdoptResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllInstances mocks base method.
func (m *MockZonedEnviron) AllInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockZonedEnvironMockRecorder) AllInstances(arg0 any) *MockZonedEnvironAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockZonedEnviron)(nil).AllInstances), arg0)
	return &MockZonedEnvironAllInstancesCall{Call: call}
}

// MockZonedEnvironAllInstancesCall wrap *gomock.Call
type MockZonedEnvironAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockZonedEnvironAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironAllInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockZonedEnvironAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironAllInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockZonedEnvironAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRunningInstances mocks base method.
func (m *MockZonedEnviron) AllRunningInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRunningInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRunningInstances indicates an expected call of AllRunningInstances.
func (mr *MockZonedEnvironMockRecorder) AllRunningInstances(arg0 any) *MockZonedEnvironAllRunningInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRunningInstances", reflect.TypeOf((*MockZonedEnviron)(nil).AllRunningInstances), arg0)
	return &MockZonedEnvironAllRunningInstancesCall{Call: call}
}

// MockZonedEnvironAllRunningInstancesCall wrap *gomock.Call
type MockZonedEnvironAllRunningInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironAllRunningInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockZonedEnvironAllRunningInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironAllRunningInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockZonedEnvironAllRunningInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironAllRunningInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockZonedEnvironAllRunningInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AvailabilityZones mocks base method.
func (m *MockZonedEnviron) AvailabilityZones(arg0 envcontext.ProviderCallContext) (network.AvailabilityZones, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZones", arg0)
	ret0, _ := ret[0].(network.AvailabilityZones)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZones indicates an expected call of AvailabilityZones.
func (mr *MockZonedEnvironMockRecorder) AvailabilityZones(arg0 any) *MockZonedEnvironAvailabilityZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZones", reflect.TypeOf((*MockZonedEnviron)(nil).AvailabilityZones), arg0)
	return &MockZonedEnvironAvailabilityZonesCall{Call: call}
}

// MockZonedEnvironAvailabilityZonesCall wrap *gomock.Call
type MockZonedEnvironAvailabilityZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironAvailabilityZonesCall) Return(arg0 network.AvailabilityZones, arg1 error) *MockZonedEnvironAvailabilityZonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironAvailabilityZonesCall) Do(f func(envcontext.ProviderCallContext) (network.AvailabilityZones, error)) *MockZonedEnvironAvailabilityZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironAvailabilityZonesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (network.AvailabilityZones, error)) *MockZonedEnvironAvailabilityZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bootstrap mocks base method.
func (m *MockZonedEnviron) Bootstrap(arg0 environs.BootstrapContext, arg1 envcontext.ProviderCallContext, arg2 environs.BootstrapParams) (*environs.BootstrapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*environs.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockZonedEnvironMockRecorder) Bootstrap(arg0, arg1, arg2 any) *MockZonedEnvironBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockZonedEnviron)(nil).Bootstrap), arg0, arg1, arg2)
	return &MockZonedEnvironBootstrapCall{Call: call}
}

// MockZonedEnvironBootstrapCall wrap *gomock.Call
type MockZonedEnvironBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironBootstrapCall) Return(arg0 *environs.BootstrapResult, arg1 error) *MockZonedEnvironBootstrapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironBootstrapCall) Do(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockZonedEnvironBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockZonedEnvironBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockZonedEnviron) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockZonedEnvironMockRecorder) Config() *MockZonedEnvironConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockZonedEnviron)(nil).Config))
	return &MockZonedEnvironConfigCall{Call: call}
}

// MockZonedEnvironConfigCall wrap *gomock.Call
type MockZonedEnvironConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironConfigCall) Return(arg0 *config.Config) *MockZonedEnvironConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironConfigCall) Do(f func() *config.Config) *MockZonedEnvironConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironConfigCall) DoAndReturn(f func() *config.Config) *MockZonedEnvironConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsValidator mocks base method.
func (m *MockZonedEnviron) ConstraintsValidator(arg0 envcontext.ProviderCallContext) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockZonedEnvironMockRecorder) ConstraintsValidator(arg0 any) *MockZonedEnvironConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockZonedEnviron)(nil).ConstraintsValidator), arg0)
	return &MockZonedEnvironConstraintsValidatorCall{Call: call}
}

// MockZonedEnvironConstraintsValidatorCall wrap *gomock.Call
type MockZonedEnvironConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockZonedEnvironConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironConstraintsValidatorCall) Do(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockZonedEnvironConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironConstraintsValidatorCall) DoAndReturn(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockZonedEnvironConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerInstances mocks base method.
func (m *MockZonedEnviron) ControllerInstances(arg0 envcontext.ProviderCallContext, arg1 string) ([]instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerInstances", arg0, arg1)
	ret0, _ := ret[0].([]instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerInstances indicates an expected call of ControllerInstances.
func (mr *MockZonedEnvironMockRecorder) ControllerInstances(arg0, arg1 any) *MockZonedEnvironControllerInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerInstances", reflect.TypeOf((*MockZonedEnviron)(nil).ControllerInstances), arg0, arg1)
	return &MockZonedEnvironControllerInstancesCall{Call: call}
}

// MockZonedEnvironControllerInstancesCall wrap *gomock.Call
type MockZonedEnvironControllerInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironControllerInstancesCall) Return(arg0 []instance.Id, arg1 error) *MockZonedEnvironControllerInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironControllerInstancesCall) Do(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockZonedEnvironControllerInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironControllerInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockZonedEnvironControllerInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockZonedEnviron) Create(arg0 envcontext.ProviderCallContext, arg1 environs.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockZonedEnvironMockRecorder) Create(arg0, arg1 any) *MockZonedEnvironCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZonedEnviron)(nil).Create), arg0, arg1)
	return &MockZonedEnvironCreateCall{Call: call}
}

// MockZonedEnvironCreateCall wrap *gomock.Call
type MockZonedEnvironCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironCreateCall) Return(arg0 error) *MockZonedEnvironCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironCreateCall) Do(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockZonedEnvironCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironCreateCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockZonedEnvironCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeriveAvailabilityZones mocks base method.
func (m *MockZonedEnviron) DeriveAvailabilityZones(arg0 envcontext.ProviderCallContext, arg1 environs.StartInstanceParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveAvailabilityZones", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveAvailabilityZones indicates an expected call of DeriveAvailabilityZones.
func (mr *MockZonedEnvironMockRecorder) DeriveAvailabilityZones(arg0, arg1 any) *MockZonedEnvironDeriveAvailabilityZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveAvailabilityZones", reflect.TypeOf((*MockZonedEnviron)(nil).DeriveAvailabilityZones), arg0, arg1)
	return &MockZonedEnvironDeriveAvailabilityZonesCall{Call: call}
}

// MockZonedEnvironDeriveAvailabilityZonesCall wrap *gomock.Call
type MockZonedEnvironDeriveAvailabilityZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironDeriveAvailabilityZonesCall) Return(arg0 []string, arg1 error) *MockZonedEnvironDeriveAvailabilityZonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironDeriveAvailabilityZonesCall) Do(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) ([]string, error)) *MockZonedEnvironDeriveAvailabilityZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironDeriveAvailabilityZonesCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) ([]string, error)) *MockZonedEnvironDeriveAvailabilityZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockZonedEnviron) Destroy(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockZonedEnvironMockRecorder) Destroy(arg0 any) *MockZonedEnvironDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockZonedEnviron)(nil).Destroy), arg0)
	return &MockZonedEnvironDestroyCall{Call: call}
}

// MockZonedEnvironDestroyCall wrap *gomock.Call
type MockZonedEnvironDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironDestroyCall) Return(arg0 error) *MockZonedEnvironDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironDestroyCall) Do(f func(envcontext.ProviderCallContext) error) *MockZonedEnvironDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironDestroyCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockZonedEnvironDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyController mocks base method.
func (m *MockZonedEnviron) DestroyController(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyController indicates an expected call of DestroyController.
func (mr *MockZonedEnvironMockRecorder) DestroyController(arg0, arg1 any) *MockZonedEnvironDestroyControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyController", reflect.TypeOf((*MockZonedEnviron)(nil).DestroyController), arg0, arg1)
	return &MockZonedEnvironDestroyControllerCall{Call: call}
}

// MockZonedEnvironDestroyControllerCall wrap *gomock.Call
type MockZonedEnvironDestroyControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironDestroyControllerCall) Return(arg0 error) *MockZonedEnvironDestroyControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironDestroyControllerCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockZonedEnvironDestroyControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironDestroyControllerCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockZonedEnvironDestroyControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceAvailabilityZoneNames mocks base method.
func (m *MockZonedEnviron) InstanceAvailabilityZoneNames(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) (map[instance.Id]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceAvailabilityZoneNames", arg0, arg1)
	ret0, _ := ret[0].(map[instance.Id]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceAvailabilityZoneNames indicates an expected call of InstanceAvailabilityZoneNames.
func (mr *MockZonedEnvironMockRecorder) InstanceAvailabilityZoneNames(arg0, arg1 any) *MockZonedEnvironInstanceAvailabilityZoneNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceAvailabilityZoneNames", reflect.TypeOf((*MockZonedEnviron)(nil).InstanceAvailabilityZoneNames), arg0, arg1)
	return &MockZonedEnvironInstanceAvailabilityZoneNamesCall{Call: call}
}

// MockZonedEnvironInstanceAvailabilityZoneNamesCall wrap *gomock.Call
type MockZonedEnvironInstanceAvailabilityZoneNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironInstanceAvailabilityZoneNamesCall) Return(arg0 map[instance.Id]string, arg1 error) *MockZonedEnvironInstanceAvailabilityZoneNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironInstanceAvailabilityZoneNamesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) (map[instance.Id]string, error)) *MockZonedEnvironInstanceAvailabilityZoneNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironInstanceAvailabilityZoneNamesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) (map[instance.Id]string, error)) *MockZonedEnvironInstanceAvailabilityZoneNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceTypes mocks base method.
func (m *MockZonedEnviron) InstanceTypes(arg0 envcontext.ProviderCallContext, arg1 constraints.Value) (instances.InstanceTypesWithCostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(instances.InstanceTypesWithCostMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceTypes indicates an expected call of InstanceTypes.
func (mr *MockZonedEnvironMockRecorder) InstanceTypes(arg0, arg1 any) *MockZonedEnvironInstanceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceTypes", reflect.TypeOf((*MockZonedEnviron)(nil).InstanceTypes), arg0, arg1)
	return &MockZonedEnvironInstanceTypesCall{Call: call}
}

// MockZonedEnvironInstanceTypesCall wrap *gomock.Call
type MockZonedEnvironInstanceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironInstanceTypesCall) Return(arg0 instances.InstanceTypesWithCostMetadata, arg1 error) *MockZonedEnvironInstanceTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironInstanceTypesCall) Do(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockZonedEnvironInstanceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironInstanceTypesCall) DoAndReturn(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockZonedEnvironInstanceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Instances mocks base method.
func (m *MockZonedEnviron) Instances(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances", arg0, arg1)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockZonedEnvironMockRecorder) Instances(arg0, arg1 any) *MockZonedEnvironInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockZonedEnviron)(nil).Instances), arg0, arg1)
	return &MockZonedEnvironInstancesCall{Call: call}
}

// MockZonedEnvironInstancesCall wrap *gomock.Call
type MockZonedEnvironInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockZonedEnvironInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironInstancesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockZonedEnvironInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockZonedEnvironInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrecheckInstance mocks base method.
func (m *MockZonedEnviron) PrecheckInstance(arg0 envcontext.ProviderCallContext, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockZonedEnvironMockRecorder) PrecheckInstance(arg0, arg1 any) *MockZonedEnvironPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockZonedEnviron)(nil).PrecheckInstance), arg0, arg1)
	return &MockZonedEnvironPrecheckInstanceCall{Call: call}
}

// MockZonedEnvironPrecheckInstanceCall wrap *gomock.Call
type MockZonedEnvironPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironPrecheckInstanceCall) Return(arg0 error) *MockZonedEnvironPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironPrecheckInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockZonedEnvironPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironPrecheckInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockZonedEnvironPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareForBootstrap mocks base method.
func (m *MockZonedEnviron) PrepareForBootstrap(arg0 environs.BootstrapContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForBootstrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareForBootstrap indicates an expected call of PrepareForBootstrap.
func (mr *MockZonedEnvironMockRecorder) PrepareForBootstrap(arg0, arg1 any) *MockZonedEnvironPrepareForBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForBootstrap", reflect.TypeOf((*MockZonedEnviron)(nil).PrepareForBootstrap), arg0, arg1)
	return &MockZonedEnvironPrepareForBootstrapCall{Call: call}
}

// MockZonedEnvironPrepareForBootstrapCall wrap *gomock.Call
type MockZonedEnvironPrepareForBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironPrepareForBootstrapCall) Return(arg0 error) *MockZonedEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironPrepareForBootstrapCall) Do(f func(environs.BootstrapContext, string) error) *MockZonedEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironPrepareForBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, string) error) *MockZonedEnvironPrepareForBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Provider mocks base method.
func (m *MockZonedEnviron) Provider() environs.EnvironProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(environs.EnvironProvider)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockZonedEnvironMockRecorder) Provider() *MockZonedEnvironProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockZonedEnviron)(nil).Provider))
	return &MockZonedEnvironProviderCall{Call: call}
}

// MockZonedEnvironProviderCall wrap *gomock.Call
type MockZonedEnvironProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironProviderCall) Return(arg0 environs.EnvironProvider) *MockZonedEnvironProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironProviderCall) Do(f func() environs.EnvironProvider) *MockZonedEnvironProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironProviderCall) DoAndReturn(f func() environs.EnvironProvider) *MockZonedEnvironProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockZonedEnviron) SetConfig(arg0 context.Context, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockZonedEnvironMockRecorder) SetConfig(arg0, arg1 any) *MockZonedEnvironSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockZonedEnviron)(nil).SetConfig), arg0, arg1)
	return &MockZonedEnvironSetConfigCall{Call: call}
}

// MockZonedEnvironSetConfigCall wrap *gomock.Call
type MockZonedEnvironSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironSetConfigCall) Return(arg0 error) *MockZonedEnvironSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironSetConfigCall) Do(f func(context.Context, *config.Config) error) *MockZonedEnvironSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironSetConfigCall) DoAndReturn(f func(context.Context, *config.Config) error) *MockZonedEnvironSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartInstance mocks base method.
func (m *MockZonedEnviron) StartInstance(arg0 envcontext.ProviderCallContext, arg1 environs.StartInstanceParams) (*environs.StartInstanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1)
	ret0, _ := ret[0].(*environs.StartInstanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockZonedEnvironMockRecorder) StartInstance(arg0, arg1 any) *MockZonedEnvironStartInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockZonedEnviron)(nil).StartInstance), arg0, arg1)
	return &MockZonedEnvironStartInstanceCall{Call: call}
}

// MockZonedEnvironStartInstanceCall wrap *gomock.Call
type MockZonedEnvironStartInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironStartInstanceCall) Return(arg0 *environs.StartInstanceResult, arg1 error) *MockZonedEnvironStartInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironStartInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockZonedEnvironStartInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironStartInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockZonedEnvironStartInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopInstances mocks base method.
func (m *MockZonedEnviron) StopInstances(arg0 envcontext.ProviderCallContext, arg1 ...instance.Id) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstances indicates an expected call of StopInstances.
func (mr *MockZonedEnvironMockRecorder) StopInstances(arg0 any, arg1 ...any) *MockZonedEnvironStopInstancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockZonedEnviron)(nil).StopInstances), varargs...)
	return &MockZonedEnvironStopInstancesCall{Call: call}
}

// MockZonedEnvironStopInstancesCall wrap *gomock.Call
type MockZonedEnvironStopInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironStopInstancesCall) Return(arg0 error) *MockZonedEnvironStopInstancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironStopInstancesCall) Do(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockZonedEnvironStopInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironStopInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockZonedEnvironStopInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockZonedEnviron) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockZonedEnvironMockRecorder) StorageProvider(arg0 any) *MockZonedEnvironStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockZonedEnviron)(nil).StorageProvider), arg0)
	return &MockZonedEnvironStorageProviderCall{Call: call}
}

// MockZonedEnvironStorageProviderCall wrap *gomock.Call
type MockZonedEnvironStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockZonedEnvironStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockZonedEnvironStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockZonedEnvironStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockZonedEnviron) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockZonedEnvironMockRecorder) StorageProviderTypes() *MockZonedEnvironStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockZonedEnviron)(nil).StorageProviderTypes))
	return &MockZonedEnvironStorageProviderTypesCall{Call: call}
}

// MockZonedEnvironStorageProviderTypesCall wrap *gomock.Call
type MockZonedEnvironStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonedEnvironStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockZonedEnvironStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonedEnvironStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockZonedEnvironStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonedEnvironStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockZonedEnvironStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
