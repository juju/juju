// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/oci (interfaces: NetworkingClient)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination testing/mocks_networking.go -write_package_comment=false github.com/juju/juju/internal/provider/oci NetworkingClient
//

package testing

import (
	context "context"
	reflect "reflect"

	core "github.com/oracle/oci-go-sdk/v65/core"
	gomock "go.uber.org/mock/gomock"
)

// MockNetworkingClient is a mock of NetworkingClient interface.
type MockNetworkingClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingClientMockRecorder
}

// MockNetworkingClientMockRecorder is the mock recorder for MockNetworkingClient.
type MockNetworkingClientMockRecorder struct {
	mock *MockNetworkingClient
}

// NewMockNetworkingClient creates a new mock instance.
func NewMockNetworkingClient(ctrl *gomock.Controller) *MockNetworkingClient {
	mock := &MockNetworkingClient{ctrl: ctrl}
	mock.recorder = &MockNetworkingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingClient) EXPECT() *MockNetworkingClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateInternetGateway mocks base method.
func (m *MockNetworkingClient) CreateInternetGateway(arg0 context.Context, arg1 core.CreateInternetGatewayRequest) (core.CreateInternetGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInternetGateway", arg0, arg1)
	ret0, _ := ret[0].(core.CreateInternetGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInternetGateway indicates an expected call of CreateInternetGateway.
func (mr *MockNetworkingClientMockRecorder) CreateInternetGateway(arg0, arg1 any) *MockNetworkingClientCreateInternetGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInternetGateway", reflect.TypeOf((*MockNetworkingClient)(nil).CreateInternetGateway), arg0, arg1)
	return &MockNetworkingClientCreateInternetGatewayCall{Call: call}
}

// MockNetworkingClientCreateInternetGatewayCall wrap *gomock.Call
type MockNetworkingClientCreateInternetGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientCreateInternetGatewayCall) Return(arg0 core.CreateInternetGatewayResponse, arg1 error) *MockNetworkingClientCreateInternetGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientCreateInternetGatewayCall) Do(f func(context.Context, core.CreateInternetGatewayRequest) (core.CreateInternetGatewayResponse, error)) *MockNetworkingClientCreateInternetGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientCreateInternetGatewayCall) DoAndReturn(f func(context.Context, core.CreateInternetGatewayRequest) (core.CreateInternetGatewayResponse, error)) *MockNetworkingClientCreateInternetGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateRouteTable mocks base method.
func (m *MockNetworkingClient) CreateRouteTable(arg0 context.Context, arg1 core.CreateRouteTableRequest) (core.CreateRouteTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteTable", arg0, arg1)
	ret0, _ := ret[0].(core.CreateRouteTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteTable indicates an expected call of CreateRouteTable.
func (mr *MockNetworkingClientMockRecorder) CreateRouteTable(arg0, arg1 any) *MockNetworkingClientCreateRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockNetworkingClient)(nil).CreateRouteTable), arg0, arg1)
	return &MockNetworkingClientCreateRouteTableCall{Call: call}
}

// MockNetworkingClientCreateRouteTableCall wrap *gomock.Call
type MockNetworkingClientCreateRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientCreateRouteTableCall) Return(arg0 core.CreateRouteTableResponse, arg1 error) *MockNetworkingClientCreateRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientCreateRouteTableCall) Do(f func(context.Context, core.CreateRouteTableRequest) (core.CreateRouteTableResponse, error)) *MockNetworkingClientCreateRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientCreateRouteTableCall) DoAndReturn(f func(context.Context, core.CreateRouteTableRequest) (core.CreateRouteTableResponse, error)) *MockNetworkingClientCreateRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSubnet mocks base method.
func (m *MockNetworkingClient) CreateSubnet(arg0 context.Context, arg1 core.CreateSubnetRequest) (core.CreateSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", arg0, arg1)
	ret0, _ := ret[0].(core.CreateSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockNetworkingClientMockRecorder) CreateSubnet(arg0, arg1 any) *MockNetworkingClientCreateSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockNetworkingClient)(nil).CreateSubnet), arg0, arg1)
	return &MockNetworkingClientCreateSubnetCall{Call: call}
}

// MockNetworkingClientCreateSubnetCall wrap *gomock.Call
type MockNetworkingClientCreateSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientCreateSubnetCall) Return(arg0 core.CreateSubnetResponse, arg1 error) *MockNetworkingClientCreateSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientCreateSubnetCall) Do(f func(context.Context, core.CreateSubnetRequest) (core.CreateSubnetResponse, error)) *MockNetworkingClientCreateSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientCreateSubnetCall) DoAndReturn(f func(context.Context, core.CreateSubnetRequest) (core.CreateSubnetResponse, error)) *MockNetworkingClientCreateSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVcn mocks base method.
func (m *MockNetworkingClient) CreateVcn(arg0 context.Context, arg1 core.CreateVcnRequest) (core.CreateVcnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVcn", arg0, arg1)
	ret0, _ := ret[0].(core.CreateVcnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVcn indicates an expected call of CreateVcn.
func (mr *MockNetworkingClientMockRecorder) CreateVcn(arg0, arg1 any) *MockNetworkingClientCreateVcnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVcn", reflect.TypeOf((*MockNetworkingClient)(nil).CreateVcn), arg0, arg1)
	return &MockNetworkingClientCreateVcnCall{Call: call}
}

// MockNetworkingClientCreateVcnCall wrap *gomock.Call
type MockNetworkingClientCreateVcnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientCreateVcnCall) Return(arg0 core.CreateVcnResponse, arg1 error) *MockNetworkingClientCreateVcnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientCreateVcnCall) Do(f func(context.Context, core.CreateVcnRequest) (core.CreateVcnResponse, error)) *MockNetworkingClientCreateVcnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientCreateVcnCall) DoAndReturn(f func(context.Context, core.CreateVcnRequest) (core.CreateVcnResponse, error)) *MockNetworkingClientCreateVcnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInternetGateway mocks base method.
func (m *MockNetworkingClient) DeleteInternetGateway(arg0 context.Context, arg1 core.DeleteInternetGatewayRequest) (core.DeleteInternetGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInternetGateway", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteInternetGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInternetGateway indicates an expected call of DeleteInternetGateway.
func (mr *MockNetworkingClientMockRecorder) DeleteInternetGateway(arg0, arg1 any) *MockNetworkingClientDeleteInternetGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInternetGateway", reflect.TypeOf((*MockNetworkingClient)(nil).DeleteInternetGateway), arg0, arg1)
	return &MockNetworkingClientDeleteInternetGatewayCall{Call: call}
}

// MockNetworkingClientDeleteInternetGatewayCall wrap *gomock.Call
type MockNetworkingClientDeleteInternetGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientDeleteInternetGatewayCall) Return(arg0 core.DeleteInternetGatewayResponse, arg1 error) *MockNetworkingClientDeleteInternetGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientDeleteInternetGatewayCall) Do(f func(context.Context, core.DeleteInternetGatewayRequest) (core.DeleteInternetGatewayResponse, error)) *MockNetworkingClientDeleteInternetGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientDeleteInternetGatewayCall) DoAndReturn(f func(context.Context, core.DeleteInternetGatewayRequest) (core.DeleteInternetGatewayResponse, error)) *MockNetworkingClientDeleteInternetGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRouteTable mocks base method.
func (m *MockNetworkingClient) DeleteRouteTable(arg0 context.Context, arg1 core.DeleteRouteTableRequest) (core.DeleteRouteTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteTable", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteRouteTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable.
func (mr *MockNetworkingClientMockRecorder) DeleteRouteTable(arg0, arg1 any) *MockNetworkingClientDeleteRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockNetworkingClient)(nil).DeleteRouteTable), arg0, arg1)
	return &MockNetworkingClientDeleteRouteTableCall{Call: call}
}

// MockNetworkingClientDeleteRouteTableCall wrap *gomock.Call
type MockNetworkingClientDeleteRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientDeleteRouteTableCall) Return(arg0 core.DeleteRouteTableResponse, arg1 error) *MockNetworkingClientDeleteRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientDeleteRouteTableCall) Do(f func(context.Context, core.DeleteRouteTableRequest) (core.DeleteRouteTableResponse, error)) *MockNetworkingClientDeleteRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientDeleteRouteTableCall) DoAndReturn(f func(context.Context, core.DeleteRouteTableRequest) (core.DeleteRouteTableResponse, error)) *MockNetworkingClientDeleteRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSubnet mocks base method.
func (m *MockNetworkingClient) DeleteSubnet(arg0 context.Context, arg1 core.DeleteSubnetRequest) (core.DeleteSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockNetworkingClientMockRecorder) DeleteSubnet(arg0, arg1 any) *MockNetworkingClientDeleteSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockNetworkingClient)(nil).DeleteSubnet), arg0, arg1)
	return &MockNetworkingClientDeleteSubnetCall{Call: call}
}

// MockNetworkingClientDeleteSubnetCall wrap *gomock.Call
type MockNetworkingClientDeleteSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientDeleteSubnetCall) Return(arg0 core.DeleteSubnetResponse, arg1 error) *MockNetworkingClientDeleteSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientDeleteSubnetCall) Do(f func(context.Context, core.DeleteSubnetRequest) (core.DeleteSubnetResponse, error)) *MockNetworkingClientDeleteSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientDeleteSubnetCall) DoAndReturn(f func(context.Context, core.DeleteSubnetRequest) (core.DeleteSubnetResponse, error)) *MockNetworkingClientDeleteSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVcn mocks base method.
func (m *MockNetworkingClient) DeleteVcn(arg0 context.Context, arg1 core.DeleteVcnRequest) (core.DeleteVcnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVcn", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteVcnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVcn indicates an expected call of DeleteVcn.
func (mr *MockNetworkingClientMockRecorder) DeleteVcn(arg0, arg1 any) *MockNetworkingClientDeleteVcnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVcn", reflect.TypeOf((*MockNetworkingClient)(nil).DeleteVcn), arg0, arg1)
	return &MockNetworkingClientDeleteVcnCall{Call: call}
}

// MockNetworkingClientDeleteVcnCall wrap *gomock.Call
type MockNetworkingClientDeleteVcnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientDeleteVcnCall) Return(arg0 core.DeleteVcnResponse, arg1 error) *MockNetworkingClientDeleteVcnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientDeleteVcnCall) Do(f func(context.Context, core.DeleteVcnRequest) (core.DeleteVcnResponse, error)) *MockNetworkingClientDeleteVcnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientDeleteVcnCall) DoAndReturn(f func(context.Context, core.DeleteVcnRequest) (core.DeleteVcnResponse, error)) *MockNetworkingClientDeleteVcnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInternetGateway mocks base method.
func (m *MockNetworkingClient) GetInternetGateway(arg0 context.Context, arg1 core.GetInternetGatewayRequest) (core.GetInternetGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternetGateway", arg0, arg1)
	ret0, _ := ret[0].(core.GetInternetGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternetGateway indicates an expected call of GetInternetGateway.
func (mr *MockNetworkingClientMockRecorder) GetInternetGateway(arg0, arg1 any) *MockNetworkingClientGetInternetGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternetGateway", reflect.TypeOf((*MockNetworkingClient)(nil).GetInternetGateway), arg0, arg1)
	return &MockNetworkingClientGetInternetGatewayCall{Call: call}
}

// MockNetworkingClientGetInternetGatewayCall wrap *gomock.Call
type MockNetworkingClientGetInternetGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientGetInternetGatewayCall) Return(arg0 core.GetInternetGatewayResponse, arg1 error) *MockNetworkingClientGetInternetGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientGetInternetGatewayCall) Do(f func(context.Context, core.GetInternetGatewayRequest) (core.GetInternetGatewayResponse, error)) *MockNetworkingClientGetInternetGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientGetInternetGatewayCall) DoAndReturn(f func(context.Context, core.GetInternetGatewayRequest) (core.GetInternetGatewayResponse, error)) *MockNetworkingClientGetInternetGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRouteTable mocks base method.
func (m *MockNetworkingClient) GetRouteTable(arg0 context.Context, arg1 core.GetRouteTableRequest) (core.GetRouteTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", arg0, arg1)
	ret0, _ := ret[0].(core.GetRouteTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable.
func (mr *MockNetworkingClientMockRecorder) GetRouteTable(arg0, arg1 any) *MockNetworkingClientGetRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockNetworkingClient)(nil).GetRouteTable), arg0, arg1)
	return &MockNetworkingClientGetRouteTableCall{Call: call}
}

// MockNetworkingClientGetRouteTableCall wrap *gomock.Call
type MockNetworkingClientGetRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientGetRouteTableCall) Return(arg0 core.GetRouteTableResponse, arg1 error) *MockNetworkingClientGetRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientGetRouteTableCall) Do(f func(context.Context, core.GetRouteTableRequest) (core.GetRouteTableResponse, error)) *MockNetworkingClientGetRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientGetRouteTableCall) DoAndReturn(f func(context.Context, core.GetRouteTableRequest) (core.GetRouteTableResponse, error)) *MockNetworkingClientGetRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSubnet mocks base method.
func (m *MockNetworkingClient) GetSubnet(arg0 context.Context, arg1 core.GetSubnetRequest) (core.GetSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", arg0, arg1)
	ret0, _ := ret[0].(core.GetSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockNetworkingClientMockRecorder) GetSubnet(arg0, arg1 any) *MockNetworkingClientGetSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockNetworkingClient)(nil).GetSubnet), arg0, arg1)
	return &MockNetworkingClientGetSubnetCall{Call: call}
}

// MockNetworkingClientGetSubnetCall wrap *gomock.Call
type MockNetworkingClientGetSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientGetSubnetCall) Return(arg0 core.GetSubnetResponse, arg1 error) *MockNetworkingClientGetSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientGetSubnetCall) Do(f func(context.Context, core.GetSubnetRequest) (core.GetSubnetResponse, error)) *MockNetworkingClientGetSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientGetSubnetCall) DoAndReturn(f func(context.Context, core.GetSubnetRequest) (core.GetSubnetResponse, error)) *MockNetworkingClientGetSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVcn mocks base method.
func (m *MockNetworkingClient) GetVcn(arg0 context.Context, arg1 core.GetVcnRequest) (core.GetVcnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVcn", arg0, arg1)
	ret0, _ := ret[0].(core.GetVcnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVcn indicates an expected call of GetVcn.
func (mr *MockNetworkingClientMockRecorder) GetVcn(arg0, arg1 any) *MockNetworkingClientGetVcnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVcn", reflect.TypeOf((*MockNetworkingClient)(nil).GetVcn), arg0, arg1)
	return &MockNetworkingClientGetVcnCall{Call: call}
}

// MockNetworkingClientGetVcnCall wrap *gomock.Call
type MockNetworkingClientGetVcnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientGetVcnCall) Return(arg0 core.GetVcnResponse, arg1 error) *MockNetworkingClientGetVcnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientGetVcnCall) Do(f func(context.Context, core.GetVcnRequest) (core.GetVcnResponse, error)) *MockNetworkingClientGetVcnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientGetVcnCall) DoAndReturn(f func(context.Context, core.GetVcnRequest) (core.GetVcnResponse, error)) *MockNetworkingClientGetVcnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVnic mocks base method.
func (m *MockNetworkingClient) GetVnic(arg0 context.Context, arg1 core.GetVnicRequest) (core.GetVnicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnic", arg0, arg1)
	ret0, _ := ret[0].(core.GetVnicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnic indicates an expected call of GetVnic.
func (mr *MockNetworkingClientMockRecorder) GetVnic(arg0, arg1 any) *MockNetworkingClientGetVnicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnic", reflect.TypeOf((*MockNetworkingClient)(nil).GetVnic), arg0, arg1)
	return &MockNetworkingClientGetVnicCall{Call: call}
}

// MockNetworkingClientGetVnicCall wrap *gomock.Call
type MockNetworkingClientGetVnicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientGetVnicCall) Return(arg0 core.GetVnicResponse, arg1 error) *MockNetworkingClientGetVnicCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientGetVnicCall) Do(f func(context.Context, core.GetVnicRequest) (core.GetVnicResponse, error)) *MockNetworkingClientGetVnicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientGetVnicCall) DoAndReturn(f func(context.Context, core.GetVnicRequest) (core.GetVnicResponse, error)) *MockNetworkingClientGetVnicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListInternetGateways mocks base method.
func (m *MockNetworkingClient) ListInternetGateways(arg0 context.Context, arg1, arg2 *string) ([]core.InternetGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInternetGateways", arg0, arg1, arg2)
	ret0, _ := ret[0].([]core.InternetGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInternetGateways indicates an expected call of ListInternetGateways.
func (mr *MockNetworkingClientMockRecorder) ListInternetGateways(arg0, arg1, arg2 any) *MockNetworkingClientListInternetGatewaysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInternetGateways", reflect.TypeOf((*MockNetworkingClient)(nil).ListInternetGateways), arg0, arg1, arg2)
	return &MockNetworkingClientListInternetGatewaysCall{Call: call}
}

// MockNetworkingClientListInternetGatewaysCall wrap *gomock.Call
type MockNetworkingClientListInternetGatewaysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientListInternetGatewaysCall) Return(arg0 []core.InternetGateway, arg1 error) *MockNetworkingClientListInternetGatewaysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientListInternetGatewaysCall) Do(f func(context.Context, *string, *string) ([]core.InternetGateway, error)) *MockNetworkingClientListInternetGatewaysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientListInternetGatewaysCall) DoAndReturn(f func(context.Context, *string, *string) ([]core.InternetGateway, error)) *MockNetworkingClientListInternetGatewaysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRouteTables mocks base method.
func (m *MockNetworkingClient) ListRouteTables(arg0 context.Context, arg1, arg2 *string) ([]core.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteTables", arg0, arg1, arg2)
	ret0, _ := ret[0].([]core.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTables indicates an expected call of ListRouteTables.
func (mr *MockNetworkingClientMockRecorder) ListRouteTables(arg0, arg1, arg2 any) *MockNetworkingClientListRouteTablesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTables", reflect.TypeOf((*MockNetworkingClient)(nil).ListRouteTables), arg0, arg1, arg2)
	return &MockNetworkingClientListRouteTablesCall{Call: call}
}

// MockNetworkingClientListRouteTablesCall wrap *gomock.Call
type MockNetworkingClientListRouteTablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientListRouteTablesCall) Return(arg0 []core.RouteTable, arg1 error) *MockNetworkingClientListRouteTablesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientListRouteTablesCall) Do(f func(context.Context, *string, *string) ([]core.RouteTable, error)) *MockNetworkingClientListRouteTablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientListRouteTablesCall) DoAndReturn(f func(context.Context, *string, *string) ([]core.RouteTable, error)) *MockNetworkingClientListRouteTablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSubnets mocks base method.
func (m *MockNetworkingClient) ListSubnets(arg0 context.Context, arg1, arg2 *string) ([]core.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnets", arg0, arg1, arg2)
	ret0, _ := ret[0].([]core.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockNetworkingClientMockRecorder) ListSubnets(arg0, arg1, arg2 any) *MockNetworkingClientListSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockNetworkingClient)(nil).ListSubnets), arg0, arg1, arg2)
	return &MockNetworkingClientListSubnetsCall{Call: call}
}

// MockNetworkingClientListSubnetsCall wrap *gomock.Call
type MockNetworkingClientListSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientListSubnetsCall) Return(arg0 []core.Subnet, arg1 error) *MockNetworkingClientListSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientListSubnetsCall) Do(f func(context.Context, *string, *string) ([]core.Subnet, error)) *MockNetworkingClientListSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientListSubnetsCall) DoAndReturn(f func(context.Context, *string, *string) ([]core.Subnet, error)) *MockNetworkingClientListSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVcns mocks base method.
func (m *MockNetworkingClient) ListVcns(arg0 context.Context, arg1 *string) ([]core.Vcn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVcns", arg0, arg1)
	ret0, _ := ret[0].([]core.Vcn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVcns indicates an expected call of ListVcns.
func (mr *MockNetworkingClientMockRecorder) ListVcns(arg0, arg1 any) *MockNetworkingClientListVcnsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVcns", reflect.TypeOf((*MockNetworkingClient)(nil).ListVcns), arg0, arg1)
	return &MockNetworkingClientListVcnsCall{Call: call}
}

// MockNetworkingClientListVcnsCall wrap *gomock.Call
type MockNetworkingClientListVcnsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingClientListVcnsCall) Return(arg0 []core.Vcn, arg1 error) *MockNetworkingClientListVcnsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingClientListVcnsCall) Do(f func(context.Context, *string) ([]core.Vcn, error)) *MockNetworkingClientListVcnsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingClientListVcnsCall) DoAndReturn(f func(context.Context, *string) ([]core.Vcn, error)) *MockNetworkingClientListVcnsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
