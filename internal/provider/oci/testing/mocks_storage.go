// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/oci (interfaces: StorageClient)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination testing/mocks_storage.go -write_package_comment=false github.com/juju/juju/internal/provider/oci StorageClient
//

package testing

import (
	context "context"
	reflect "reflect"

	core "github.com/oracle/oci-go-sdk/v65/core"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageClient is a mock of StorageClient interface.
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient.
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance.
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStorageClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateVolume mocks base method.
func (m *MockStorageClient) CreateVolume(arg0 context.Context, arg1 core.CreateVolumeRequest) (core.CreateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(core.CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockStorageClientMockRecorder) CreateVolume(arg0, arg1 any) *MockStorageClientCreateVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockStorageClient)(nil).CreateVolume), arg0, arg1)
	return &MockStorageClientCreateVolumeCall{Call: call}
}

// MockStorageClientCreateVolumeCall wrap *gomock.Call
type MockStorageClientCreateVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClientCreateVolumeCall) Return(arg0 core.CreateVolumeResponse, arg1 error) *MockStorageClientCreateVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClientCreateVolumeCall) Do(f func(context.Context, core.CreateVolumeRequest) (core.CreateVolumeResponse, error)) *MockStorageClientCreateVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClientCreateVolumeCall) DoAndReturn(f func(context.Context, core.CreateVolumeRequest) (core.CreateVolumeResponse, error)) *MockStorageClientCreateVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVolume mocks base method.
func (m *MockStorageClient) DeleteVolume(arg0 context.Context, arg1 core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockStorageClientMockRecorder) DeleteVolume(arg0, arg1 any) *MockStorageClientDeleteVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockStorageClient)(nil).DeleteVolume), arg0, arg1)
	return &MockStorageClientDeleteVolumeCall{Call: call}
}

// MockStorageClientDeleteVolumeCall wrap *gomock.Call
type MockStorageClientDeleteVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClientDeleteVolumeCall) Return(arg0 core.DeleteVolumeResponse, arg1 error) *MockStorageClientDeleteVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClientDeleteVolumeCall) Do(f func(context.Context, core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error)) *MockStorageClientDeleteVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClientDeleteVolumeCall) DoAndReturn(f func(context.Context, core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error)) *MockStorageClientDeleteVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolume mocks base method.
func (m *MockStorageClient) GetVolume(arg0 context.Context, arg1 core.GetVolumeRequest) (core.GetVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(core.GetVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockStorageClientMockRecorder) GetVolume(arg0, arg1 any) *MockStorageClientGetVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockStorageClient)(nil).GetVolume), arg0, arg1)
	return &MockStorageClientGetVolumeCall{Call: call}
}

// MockStorageClientGetVolumeCall wrap *gomock.Call
type MockStorageClientGetVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClientGetVolumeCall) Return(arg0 core.GetVolumeResponse, arg1 error) *MockStorageClientGetVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClientGetVolumeCall) Do(f func(context.Context, core.GetVolumeRequest) (core.GetVolumeResponse, error)) *MockStorageClientGetVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClientGetVolumeCall) DoAndReturn(f func(context.Context, core.GetVolumeRequest) (core.GetVolumeResponse, error)) *MockStorageClientGetVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVolumes mocks base method.
func (m *MockStorageClient) ListVolumes(arg0 context.Context, arg1 *string) ([]core.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", arg0, arg1)
	ret0, _ := ret[0].([]core.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockStorageClientMockRecorder) ListVolumes(arg0, arg1 any) *MockStorageClientListVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockStorageClient)(nil).ListVolumes), arg0, arg1)
	return &MockStorageClientListVolumesCall{Call: call}
}

// MockStorageClientListVolumesCall wrap *gomock.Call
type MockStorageClientListVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClientListVolumesCall) Return(arg0 []core.Volume, arg1 error) *MockStorageClientListVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClientListVolumesCall) Do(f func(context.Context, *string) ([]core.Volume, error)) *MockStorageClientListVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClientListVolumesCall) DoAndReturn(f func(context.Context, *string) ([]core.Volume, error)) *MockStorageClientListVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolume mocks base method.
func (m *MockStorageClient) UpdateVolume(arg0 context.Context, arg1 core.UpdateVolumeRequest) (core.UpdateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0, arg1)
	ret0, _ := ret[0].(core.UpdateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockStorageClientMockRecorder) UpdateVolume(arg0, arg1 any) *MockStorageClientUpdateVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockStorageClient)(nil).UpdateVolume), arg0, arg1)
	return &MockStorageClientUpdateVolumeCall{Call: call}
}

// MockStorageClientUpdateVolumeCall wrap *gomock.Call
type MockStorageClientUpdateVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClientUpdateVolumeCall) Return(arg0 core.UpdateVolumeResponse, arg1 error) *MockStorageClientUpdateVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClientUpdateVolumeCall) Do(f func(context.Context, core.UpdateVolumeRequest) (core.UpdateVolumeResponse, error)) *MockStorageClientUpdateVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClientUpdateVolumeCall) DoAndReturn(f func(context.Context, core.UpdateVolumeRequest) (core.UpdateVolumeResponse, error)) *MockStorageClientUpdateVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
