// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/oci/common (interfaces: OCIStorageClient)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination ../testing/mocks_clientstorage.go -write_package_comment=false github.com/juju/juju/internal/provider/oci/common OCIStorageClient
//

package testing

import (
	context "context"
	reflect "reflect"

	core "github.com/oracle/oci-go-sdk/v65/core"
	gomock "go.uber.org/mock/gomock"
)

// MockOCIStorageClient is a mock of OCIStorageClient interface.
type MockOCIStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCIStorageClientMockRecorder
}

// MockOCIStorageClientMockRecorder is the mock recorder for MockOCIStorageClient.
type MockOCIStorageClientMockRecorder struct {
	mock *MockOCIStorageClient
}

// NewMockOCIStorageClient creates a new mock instance.
func NewMockOCIStorageClient(ctrl *gomock.Controller) *MockOCIStorageClient {
	mock := &MockOCIStorageClient{ctrl: ctrl}
	mock.recorder = &MockOCIStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCIStorageClient) EXPECT() *MockOCIStorageClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOCIStorageClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateVolume mocks base method.
func (m *MockOCIStorageClient) CreateVolume(arg0 context.Context, arg1 core.CreateVolumeRequest) (core.CreateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(core.CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockOCIStorageClientMockRecorder) CreateVolume(arg0, arg1 any) *MockOCIStorageClientCreateVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).CreateVolume), arg0, arg1)
	return &MockOCIStorageClientCreateVolumeCall{Call: call}
}

// MockOCIStorageClientCreateVolumeCall wrap *gomock.Call
type MockOCIStorageClientCreateVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIStorageClientCreateVolumeCall) Return(arg0 core.CreateVolumeResponse, arg1 error) *MockOCIStorageClientCreateVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIStorageClientCreateVolumeCall) Do(f func(context.Context, core.CreateVolumeRequest) (core.CreateVolumeResponse, error)) *MockOCIStorageClientCreateVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIStorageClientCreateVolumeCall) DoAndReturn(f func(context.Context, core.CreateVolumeRequest) (core.CreateVolumeResponse, error)) *MockOCIStorageClientCreateVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVolume mocks base method.
func (m *MockOCIStorageClient) DeleteVolume(arg0 context.Context, arg1 core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockOCIStorageClientMockRecorder) DeleteVolume(arg0, arg1 any) *MockOCIStorageClientDeleteVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).DeleteVolume), arg0, arg1)
	return &MockOCIStorageClientDeleteVolumeCall{Call: call}
}

// MockOCIStorageClientDeleteVolumeCall wrap *gomock.Call
type MockOCIStorageClientDeleteVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIStorageClientDeleteVolumeCall) Return(arg0 core.DeleteVolumeResponse, arg1 error) *MockOCIStorageClientDeleteVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIStorageClientDeleteVolumeCall) Do(f func(context.Context, core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error)) *MockOCIStorageClientDeleteVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIStorageClientDeleteVolumeCall) DoAndReturn(f func(context.Context, core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error)) *MockOCIStorageClientDeleteVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolume mocks base method.
func (m *MockOCIStorageClient) GetVolume(arg0 context.Context, arg1 core.GetVolumeRequest) (core.GetVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(core.GetVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockOCIStorageClientMockRecorder) GetVolume(arg0, arg1 any) *MockOCIStorageClientGetVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).GetVolume), arg0, arg1)
	return &MockOCIStorageClientGetVolumeCall{Call: call}
}

// MockOCIStorageClientGetVolumeCall wrap *gomock.Call
type MockOCIStorageClientGetVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIStorageClientGetVolumeCall) Return(arg0 core.GetVolumeResponse, arg1 error) *MockOCIStorageClientGetVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIStorageClientGetVolumeCall) Do(f func(context.Context, core.GetVolumeRequest) (core.GetVolumeResponse, error)) *MockOCIStorageClientGetVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIStorageClientGetVolumeCall) DoAndReturn(f func(context.Context, core.GetVolumeRequest) (core.GetVolumeResponse, error)) *MockOCIStorageClientGetVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVolumes mocks base method.
func (m *MockOCIStorageClient) ListVolumes(arg0 context.Context, arg1 core.ListVolumesRequest) (core.ListVolumesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", arg0, arg1)
	ret0, _ := ret[0].(core.ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockOCIStorageClientMockRecorder) ListVolumes(arg0, arg1 any) *MockOCIStorageClientListVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockOCIStorageClient)(nil).ListVolumes), arg0, arg1)
	return &MockOCIStorageClientListVolumesCall{Call: call}
}

// MockOCIStorageClientListVolumesCall wrap *gomock.Call
type MockOCIStorageClientListVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIStorageClientListVolumesCall) Return(arg0 core.ListVolumesResponse, arg1 error) *MockOCIStorageClientListVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIStorageClientListVolumesCall) Do(f func(context.Context, core.ListVolumesRequest) (core.ListVolumesResponse, error)) *MockOCIStorageClientListVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIStorageClientListVolumesCall) DoAndReturn(f func(context.Context, core.ListVolumesRequest) (core.ListVolumesResponse, error)) *MockOCIStorageClientListVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolume mocks base method.
func (m *MockOCIStorageClient) UpdateVolume(arg0 context.Context, arg1 core.UpdateVolumeRequest) (core.UpdateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0, arg1)
	ret0, _ := ret[0].(core.UpdateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockOCIStorageClientMockRecorder) UpdateVolume(arg0, arg1 any) *MockOCIStorageClientUpdateVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).UpdateVolume), arg0, arg1)
	return &MockOCIStorageClientUpdateVolumeCall{Call: call}
}

// MockOCIStorageClientUpdateVolumeCall wrap *gomock.Call
type MockOCIStorageClientUpdateVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIStorageClientUpdateVolumeCall) Return(arg0 core.UpdateVolumeResponse, arg1 error) *MockOCIStorageClientUpdateVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIStorageClientUpdateVolumeCall) Do(f func(context.Context, core.UpdateVolumeRequest) (core.UpdateVolumeResponse, error)) *MockOCIStorageClientUpdateVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIStorageClientUpdateVolumeCall) DoAndReturn(f func(context.Context, core.UpdateVolumeRequest) (core.UpdateVolumeResponse, error)) *MockOCIStorageClientUpdateVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
