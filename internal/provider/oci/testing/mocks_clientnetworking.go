// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/oci/common (interfaces: OCIVirtualNetworkingClient)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination ../testing/mocks_clientnetworking.go -write_package_comment=false github.com/juju/juju/internal/provider/oci/common OCIVirtualNetworkingClient
//

package testing

import (
	context "context"
	reflect "reflect"

	core "github.com/oracle/oci-go-sdk/v65/core"
	gomock "go.uber.org/mock/gomock"
)

// MockOCIVirtualNetworkingClient is a mock of OCIVirtualNetworkingClient interface.
type MockOCIVirtualNetworkingClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCIVirtualNetworkingClientMockRecorder
}

// MockOCIVirtualNetworkingClientMockRecorder is the mock recorder for MockOCIVirtualNetworkingClient.
type MockOCIVirtualNetworkingClientMockRecorder struct {
	mock *MockOCIVirtualNetworkingClient
}

// NewMockOCIVirtualNetworkingClient creates a new mock instance.
func NewMockOCIVirtualNetworkingClient(ctrl *gomock.Controller) *MockOCIVirtualNetworkingClient {
	mock := &MockOCIVirtualNetworkingClient{ctrl: ctrl}
	mock.recorder = &MockOCIVirtualNetworkingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCIVirtualNetworkingClient) EXPECT() *MockOCIVirtualNetworkingClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOCIVirtualNetworkingClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateInternetGateway mocks base method.
func (m *MockOCIVirtualNetworkingClient) CreateInternetGateway(arg0 context.Context, arg1 core.CreateInternetGatewayRequest) (core.CreateInternetGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInternetGateway", arg0, arg1)
	ret0, _ := ret[0].(core.CreateInternetGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInternetGateway indicates an expected call of CreateInternetGateway.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) CreateInternetGateway(arg0, arg1 any) *MockOCIVirtualNetworkingClientCreateInternetGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInternetGateway", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).CreateInternetGateway), arg0, arg1)
	return &MockOCIVirtualNetworkingClientCreateInternetGatewayCall{Call: call}
}

// MockOCIVirtualNetworkingClientCreateInternetGatewayCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientCreateInternetGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientCreateInternetGatewayCall) Return(arg0 core.CreateInternetGatewayResponse, arg1 error) *MockOCIVirtualNetworkingClientCreateInternetGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientCreateInternetGatewayCall) Do(f func(context.Context, core.CreateInternetGatewayRequest) (core.CreateInternetGatewayResponse, error)) *MockOCIVirtualNetworkingClientCreateInternetGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientCreateInternetGatewayCall) DoAndReturn(f func(context.Context, core.CreateInternetGatewayRequest) (core.CreateInternetGatewayResponse, error)) *MockOCIVirtualNetworkingClientCreateInternetGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateRouteTable mocks base method.
func (m *MockOCIVirtualNetworkingClient) CreateRouteTable(arg0 context.Context, arg1 core.CreateRouteTableRequest) (core.CreateRouteTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteTable", arg0, arg1)
	ret0, _ := ret[0].(core.CreateRouteTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteTable indicates an expected call of CreateRouteTable.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) CreateRouteTable(arg0, arg1 any) *MockOCIVirtualNetworkingClientCreateRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteTable", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).CreateRouteTable), arg0, arg1)
	return &MockOCIVirtualNetworkingClientCreateRouteTableCall{Call: call}
}

// MockOCIVirtualNetworkingClientCreateRouteTableCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientCreateRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientCreateRouteTableCall) Return(arg0 core.CreateRouteTableResponse, arg1 error) *MockOCIVirtualNetworkingClientCreateRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientCreateRouteTableCall) Do(f func(context.Context, core.CreateRouteTableRequest) (core.CreateRouteTableResponse, error)) *MockOCIVirtualNetworkingClientCreateRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientCreateRouteTableCall) DoAndReturn(f func(context.Context, core.CreateRouteTableRequest) (core.CreateRouteTableResponse, error)) *MockOCIVirtualNetworkingClientCreateRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSecurityList mocks base method.
func (m *MockOCIVirtualNetworkingClient) CreateSecurityList(arg0 context.Context, arg1 core.CreateSecurityListRequest) (core.CreateSecurityListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityList", arg0, arg1)
	ret0, _ := ret[0].(core.CreateSecurityListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityList indicates an expected call of CreateSecurityList.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) CreateSecurityList(arg0, arg1 any) *MockOCIVirtualNetworkingClientCreateSecurityListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityList", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).CreateSecurityList), arg0, arg1)
	return &MockOCIVirtualNetworkingClientCreateSecurityListCall{Call: call}
}

// MockOCIVirtualNetworkingClientCreateSecurityListCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientCreateSecurityListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientCreateSecurityListCall) Return(arg0 core.CreateSecurityListResponse, arg1 error) *MockOCIVirtualNetworkingClientCreateSecurityListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientCreateSecurityListCall) Do(f func(context.Context, core.CreateSecurityListRequest) (core.CreateSecurityListResponse, error)) *MockOCIVirtualNetworkingClientCreateSecurityListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientCreateSecurityListCall) DoAndReturn(f func(context.Context, core.CreateSecurityListRequest) (core.CreateSecurityListResponse, error)) *MockOCIVirtualNetworkingClientCreateSecurityListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSubnet mocks base method.
func (m *MockOCIVirtualNetworkingClient) CreateSubnet(arg0 context.Context, arg1 core.CreateSubnetRequest) (core.CreateSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", arg0, arg1)
	ret0, _ := ret[0].(core.CreateSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) CreateSubnet(arg0, arg1 any) *MockOCIVirtualNetworkingClientCreateSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).CreateSubnet), arg0, arg1)
	return &MockOCIVirtualNetworkingClientCreateSubnetCall{Call: call}
}

// MockOCIVirtualNetworkingClientCreateSubnetCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientCreateSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientCreateSubnetCall) Return(arg0 core.CreateSubnetResponse, arg1 error) *MockOCIVirtualNetworkingClientCreateSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientCreateSubnetCall) Do(f func(context.Context, core.CreateSubnetRequest) (core.CreateSubnetResponse, error)) *MockOCIVirtualNetworkingClientCreateSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientCreateSubnetCall) DoAndReturn(f func(context.Context, core.CreateSubnetRequest) (core.CreateSubnetResponse, error)) *MockOCIVirtualNetworkingClientCreateSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVcn mocks base method.
func (m *MockOCIVirtualNetworkingClient) CreateVcn(arg0 context.Context, arg1 core.CreateVcnRequest) (core.CreateVcnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVcn", arg0, arg1)
	ret0, _ := ret[0].(core.CreateVcnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVcn indicates an expected call of CreateVcn.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) CreateVcn(arg0, arg1 any) *MockOCIVirtualNetworkingClientCreateVcnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVcn", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).CreateVcn), arg0, arg1)
	return &MockOCIVirtualNetworkingClientCreateVcnCall{Call: call}
}

// MockOCIVirtualNetworkingClientCreateVcnCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientCreateVcnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientCreateVcnCall) Return(arg0 core.CreateVcnResponse, arg1 error) *MockOCIVirtualNetworkingClientCreateVcnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientCreateVcnCall) Do(f func(context.Context, core.CreateVcnRequest) (core.CreateVcnResponse, error)) *MockOCIVirtualNetworkingClientCreateVcnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientCreateVcnCall) DoAndReturn(f func(context.Context, core.CreateVcnRequest) (core.CreateVcnResponse, error)) *MockOCIVirtualNetworkingClientCreateVcnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInternetGateway mocks base method.
func (m *MockOCIVirtualNetworkingClient) DeleteInternetGateway(arg0 context.Context, arg1 core.DeleteInternetGatewayRequest) (core.DeleteInternetGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInternetGateway", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteInternetGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInternetGateway indicates an expected call of DeleteInternetGateway.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) DeleteInternetGateway(arg0, arg1 any) *MockOCIVirtualNetworkingClientDeleteInternetGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInternetGateway", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).DeleteInternetGateway), arg0, arg1)
	return &MockOCIVirtualNetworkingClientDeleteInternetGatewayCall{Call: call}
}

// MockOCIVirtualNetworkingClientDeleteInternetGatewayCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientDeleteInternetGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientDeleteInternetGatewayCall) Return(arg0 core.DeleteInternetGatewayResponse, arg1 error) *MockOCIVirtualNetworkingClientDeleteInternetGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientDeleteInternetGatewayCall) Do(f func(context.Context, core.DeleteInternetGatewayRequest) (core.DeleteInternetGatewayResponse, error)) *MockOCIVirtualNetworkingClientDeleteInternetGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientDeleteInternetGatewayCall) DoAndReturn(f func(context.Context, core.DeleteInternetGatewayRequest) (core.DeleteInternetGatewayResponse, error)) *MockOCIVirtualNetworkingClientDeleteInternetGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRouteTable mocks base method.
func (m *MockOCIVirtualNetworkingClient) DeleteRouteTable(arg0 context.Context, arg1 core.DeleteRouteTableRequest) (core.DeleteRouteTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteTable", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteRouteTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteTable indicates an expected call of DeleteRouteTable.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) DeleteRouteTable(arg0, arg1 any) *MockOCIVirtualNetworkingClientDeleteRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteTable", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).DeleteRouteTable), arg0, arg1)
	return &MockOCIVirtualNetworkingClientDeleteRouteTableCall{Call: call}
}

// MockOCIVirtualNetworkingClientDeleteRouteTableCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientDeleteRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientDeleteRouteTableCall) Return(arg0 core.DeleteRouteTableResponse, arg1 error) *MockOCIVirtualNetworkingClientDeleteRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientDeleteRouteTableCall) Do(f func(context.Context, core.DeleteRouteTableRequest) (core.DeleteRouteTableResponse, error)) *MockOCIVirtualNetworkingClientDeleteRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientDeleteRouteTableCall) DoAndReturn(f func(context.Context, core.DeleteRouteTableRequest) (core.DeleteRouteTableResponse, error)) *MockOCIVirtualNetworkingClientDeleteRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSecurityList mocks base method.
func (m *MockOCIVirtualNetworkingClient) DeleteSecurityList(arg0 context.Context, arg1 core.DeleteSecurityListRequest) (core.DeleteSecurityListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityList", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteSecurityListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityList indicates an expected call of DeleteSecurityList.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) DeleteSecurityList(arg0, arg1 any) *MockOCIVirtualNetworkingClientDeleteSecurityListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityList", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).DeleteSecurityList), arg0, arg1)
	return &MockOCIVirtualNetworkingClientDeleteSecurityListCall{Call: call}
}

// MockOCIVirtualNetworkingClientDeleteSecurityListCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientDeleteSecurityListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientDeleteSecurityListCall) Return(arg0 core.DeleteSecurityListResponse, arg1 error) *MockOCIVirtualNetworkingClientDeleteSecurityListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientDeleteSecurityListCall) Do(f func(context.Context, core.DeleteSecurityListRequest) (core.DeleteSecurityListResponse, error)) *MockOCIVirtualNetworkingClientDeleteSecurityListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientDeleteSecurityListCall) DoAndReturn(f func(context.Context, core.DeleteSecurityListRequest) (core.DeleteSecurityListResponse, error)) *MockOCIVirtualNetworkingClientDeleteSecurityListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSubnet mocks base method.
func (m *MockOCIVirtualNetworkingClient) DeleteSubnet(arg0 context.Context, arg1 core.DeleteSubnetRequest) (core.DeleteSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) DeleteSubnet(arg0, arg1 any) *MockOCIVirtualNetworkingClientDeleteSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).DeleteSubnet), arg0, arg1)
	return &MockOCIVirtualNetworkingClientDeleteSubnetCall{Call: call}
}

// MockOCIVirtualNetworkingClientDeleteSubnetCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientDeleteSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientDeleteSubnetCall) Return(arg0 core.DeleteSubnetResponse, arg1 error) *MockOCIVirtualNetworkingClientDeleteSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientDeleteSubnetCall) Do(f func(context.Context, core.DeleteSubnetRequest) (core.DeleteSubnetResponse, error)) *MockOCIVirtualNetworkingClientDeleteSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientDeleteSubnetCall) DoAndReturn(f func(context.Context, core.DeleteSubnetRequest) (core.DeleteSubnetResponse, error)) *MockOCIVirtualNetworkingClientDeleteSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVcn mocks base method.
func (m *MockOCIVirtualNetworkingClient) DeleteVcn(arg0 context.Context, arg1 core.DeleteVcnRequest) (core.DeleteVcnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVcn", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteVcnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVcn indicates an expected call of DeleteVcn.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) DeleteVcn(arg0, arg1 any) *MockOCIVirtualNetworkingClientDeleteVcnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVcn", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).DeleteVcn), arg0, arg1)
	return &MockOCIVirtualNetworkingClientDeleteVcnCall{Call: call}
}

// MockOCIVirtualNetworkingClientDeleteVcnCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientDeleteVcnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientDeleteVcnCall) Return(arg0 core.DeleteVcnResponse, arg1 error) *MockOCIVirtualNetworkingClientDeleteVcnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientDeleteVcnCall) Do(f func(context.Context, core.DeleteVcnRequest) (core.DeleteVcnResponse, error)) *MockOCIVirtualNetworkingClientDeleteVcnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientDeleteVcnCall) DoAndReturn(f func(context.Context, core.DeleteVcnRequest) (core.DeleteVcnResponse, error)) *MockOCIVirtualNetworkingClientDeleteVcnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInternetGateway mocks base method.
func (m *MockOCIVirtualNetworkingClient) GetInternetGateway(arg0 context.Context, arg1 core.GetInternetGatewayRequest) (core.GetInternetGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternetGateway", arg0, arg1)
	ret0, _ := ret[0].(core.GetInternetGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternetGateway indicates an expected call of GetInternetGateway.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) GetInternetGateway(arg0, arg1 any) *MockOCIVirtualNetworkingClientGetInternetGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternetGateway", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).GetInternetGateway), arg0, arg1)
	return &MockOCIVirtualNetworkingClientGetInternetGatewayCall{Call: call}
}

// MockOCIVirtualNetworkingClientGetInternetGatewayCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientGetInternetGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientGetInternetGatewayCall) Return(arg0 core.GetInternetGatewayResponse, arg1 error) *MockOCIVirtualNetworkingClientGetInternetGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientGetInternetGatewayCall) Do(f func(context.Context, core.GetInternetGatewayRequest) (core.GetInternetGatewayResponse, error)) *MockOCIVirtualNetworkingClientGetInternetGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientGetInternetGatewayCall) DoAndReturn(f func(context.Context, core.GetInternetGatewayRequest) (core.GetInternetGatewayResponse, error)) *MockOCIVirtualNetworkingClientGetInternetGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRouteTable mocks base method.
func (m *MockOCIVirtualNetworkingClient) GetRouteTable(arg0 context.Context, arg1 core.GetRouteTableRequest) (core.GetRouteTableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTable", arg0, arg1)
	ret0, _ := ret[0].(core.GetRouteTableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTable indicates an expected call of GetRouteTable.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) GetRouteTable(arg0, arg1 any) *MockOCIVirtualNetworkingClientGetRouteTableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTable", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).GetRouteTable), arg0, arg1)
	return &MockOCIVirtualNetworkingClientGetRouteTableCall{Call: call}
}

// MockOCIVirtualNetworkingClientGetRouteTableCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientGetRouteTableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientGetRouteTableCall) Return(arg0 core.GetRouteTableResponse, arg1 error) *MockOCIVirtualNetworkingClientGetRouteTableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientGetRouteTableCall) Do(f func(context.Context, core.GetRouteTableRequest) (core.GetRouteTableResponse, error)) *MockOCIVirtualNetworkingClientGetRouteTableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientGetRouteTableCall) DoAndReturn(f func(context.Context, core.GetRouteTableRequest) (core.GetRouteTableResponse, error)) *MockOCIVirtualNetworkingClientGetRouteTableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecurityList mocks base method.
func (m *MockOCIVirtualNetworkingClient) GetSecurityList(arg0 context.Context, arg1 core.GetSecurityListRequest) (core.GetSecurityListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityList", arg0, arg1)
	ret0, _ := ret[0].(core.GetSecurityListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityList indicates an expected call of GetSecurityList.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) GetSecurityList(arg0, arg1 any) *MockOCIVirtualNetworkingClientGetSecurityListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityList", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).GetSecurityList), arg0, arg1)
	return &MockOCIVirtualNetworkingClientGetSecurityListCall{Call: call}
}

// MockOCIVirtualNetworkingClientGetSecurityListCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientGetSecurityListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientGetSecurityListCall) Return(arg0 core.GetSecurityListResponse, arg1 error) *MockOCIVirtualNetworkingClientGetSecurityListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientGetSecurityListCall) Do(f func(context.Context, core.GetSecurityListRequest) (core.GetSecurityListResponse, error)) *MockOCIVirtualNetworkingClientGetSecurityListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientGetSecurityListCall) DoAndReturn(f func(context.Context, core.GetSecurityListRequest) (core.GetSecurityListResponse, error)) *MockOCIVirtualNetworkingClientGetSecurityListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSubnet mocks base method.
func (m *MockOCIVirtualNetworkingClient) GetSubnet(arg0 context.Context, arg1 core.GetSubnetRequest) (core.GetSubnetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", arg0, arg1)
	ret0, _ := ret[0].(core.GetSubnetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) GetSubnet(arg0, arg1 any) *MockOCIVirtualNetworkingClientGetSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).GetSubnet), arg0, arg1)
	return &MockOCIVirtualNetworkingClientGetSubnetCall{Call: call}
}

// MockOCIVirtualNetworkingClientGetSubnetCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientGetSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientGetSubnetCall) Return(arg0 core.GetSubnetResponse, arg1 error) *MockOCIVirtualNetworkingClientGetSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientGetSubnetCall) Do(f func(context.Context, core.GetSubnetRequest) (core.GetSubnetResponse, error)) *MockOCIVirtualNetworkingClientGetSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientGetSubnetCall) DoAndReturn(f func(context.Context, core.GetSubnetRequest) (core.GetSubnetResponse, error)) *MockOCIVirtualNetworkingClientGetSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVcn mocks base method.
func (m *MockOCIVirtualNetworkingClient) GetVcn(arg0 context.Context, arg1 core.GetVcnRequest) (core.GetVcnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVcn", arg0, arg1)
	ret0, _ := ret[0].(core.GetVcnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVcn indicates an expected call of GetVcn.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) GetVcn(arg0, arg1 any) *MockOCIVirtualNetworkingClientGetVcnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVcn", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).GetVcn), arg0, arg1)
	return &MockOCIVirtualNetworkingClientGetVcnCall{Call: call}
}

// MockOCIVirtualNetworkingClientGetVcnCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientGetVcnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientGetVcnCall) Return(arg0 core.GetVcnResponse, arg1 error) *MockOCIVirtualNetworkingClientGetVcnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientGetVcnCall) Do(f func(context.Context, core.GetVcnRequest) (core.GetVcnResponse, error)) *MockOCIVirtualNetworkingClientGetVcnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientGetVcnCall) DoAndReturn(f func(context.Context, core.GetVcnRequest) (core.GetVcnResponse, error)) *MockOCIVirtualNetworkingClientGetVcnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVnic mocks base method.
func (m *MockOCIVirtualNetworkingClient) GetVnic(arg0 context.Context, arg1 core.GetVnicRequest) (core.GetVnicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnic", arg0, arg1)
	ret0, _ := ret[0].(core.GetVnicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnic indicates an expected call of GetVnic.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) GetVnic(arg0, arg1 any) *MockOCIVirtualNetworkingClientGetVnicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnic", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).GetVnic), arg0, arg1)
	return &MockOCIVirtualNetworkingClientGetVnicCall{Call: call}
}

// MockOCIVirtualNetworkingClientGetVnicCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientGetVnicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientGetVnicCall) Return(arg0 core.GetVnicResponse, arg1 error) *MockOCIVirtualNetworkingClientGetVnicCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientGetVnicCall) Do(f func(context.Context, core.GetVnicRequest) (core.GetVnicResponse, error)) *MockOCIVirtualNetworkingClientGetVnicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientGetVnicCall) DoAndReturn(f func(context.Context, core.GetVnicRequest) (core.GetVnicResponse, error)) *MockOCIVirtualNetworkingClientGetVnicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListInternetGateways mocks base method.
func (m *MockOCIVirtualNetworkingClient) ListInternetGateways(arg0 context.Context, arg1 core.ListInternetGatewaysRequest) (core.ListInternetGatewaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInternetGateways", arg0, arg1)
	ret0, _ := ret[0].(core.ListInternetGatewaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInternetGateways indicates an expected call of ListInternetGateways.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) ListInternetGateways(arg0, arg1 any) *MockOCIVirtualNetworkingClientListInternetGatewaysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInternetGateways", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).ListInternetGateways), arg0, arg1)
	return &MockOCIVirtualNetworkingClientListInternetGatewaysCall{Call: call}
}

// MockOCIVirtualNetworkingClientListInternetGatewaysCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientListInternetGatewaysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientListInternetGatewaysCall) Return(arg0 core.ListInternetGatewaysResponse, arg1 error) *MockOCIVirtualNetworkingClientListInternetGatewaysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientListInternetGatewaysCall) Do(f func(context.Context, core.ListInternetGatewaysRequest) (core.ListInternetGatewaysResponse, error)) *MockOCIVirtualNetworkingClientListInternetGatewaysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientListInternetGatewaysCall) DoAndReturn(f func(context.Context, core.ListInternetGatewaysRequest) (core.ListInternetGatewaysResponse, error)) *MockOCIVirtualNetworkingClientListInternetGatewaysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRouteTables mocks base method.
func (m *MockOCIVirtualNetworkingClient) ListRouteTables(arg0 context.Context, arg1 core.ListRouteTablesRequest) (core.ListRouteTablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteTables", arg0, arg1)
	ret0, _ := ret[0].(core.ListRouteTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteTables indicates an expected call of ListRouteTables.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) ListRouteTables(arg0, arg1 any) *MockOCIVirtualNetworkingClientListRouteTablesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteTables", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).ListRouteTables), arg0, arg1)
	return &MockOCIVirtualNetworkingClientListRouteTablesCall{Call: call}
}

// MockOCIVirtualNetworkingClientListRouteTablesCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientListRouteTablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientListRouteTablesCall) Return(arg0 core.ListRouteTablesResponse, arg1 error) *MockOCIVirtualNetworkingClientListRouteTablesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientListRouteTablesCall) Do(f func(context.Context, core.ListRouteTablesRequest) (core.ListRouteTablesResponse, error)) *MockOCIVirtualNetworkingClientListRouteTablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientListRouteTablesCall) DoAndReturn(f func(context.Context, core.ListRouteTablesRequest) (core.ListRouteTablesResponse, error)) *MockOCIVirtualNetworkingClientListRouteTablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecurityLists mocks base method.
func (m *MockOCIVirtualNetworkingClient) ListSecurityLists(arg0 context.Context, arg1 core.ListSecurityListsRequest) (core.ListSecurityListsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityLists", arg0, arg1)
	ret0, _ := ret[0].(core.ListSecurityListsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityLists indicates an expected call of ListSecurityLists.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) ListSecurityLists(arg0, arg1 any) *MockOCIVirtualNetworkingClientListSecurityListsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityLists", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).ListSecurityLists), arg0, arg1)
	return &MockOCIVirtualNetworkingClientListSecurityListsCall{Call: call}
}

// MockOCIVirtualNetworkingClientListSecurityListsCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientListSecurityListsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientListSecurityListsCall) Return(arg0 core.ListSecurityListsResponse, arg1 error) *MockOCIVirtualNetworkingClientListSecurityListsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientListSecurityListsCall) Do(f func(context.Context, core.ListSecurityListsRequest) (core.ListSecurityListsResponse, error)) *MockOCIVirtualNetworkingClientListSecurityListsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientListSecurityListsCall) DoAndReturn(f func(context.Context, core.ListSecurityListsRequest) (core.ListSecurityListsResponse, error)) *MockOCIVirtualNetworkingClientListSecurityListsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSubnets mocks base method.
func (m *MockOCIVirtualNetworkingClient) ListSubnets(arg0 context.Context, arg1 core.ListSubnetsRequest) (core.ListSubnetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnets", arg0, arg1)
	ret0, _ := ret[0].(core.ListSubnetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) ListSubnets(arg0, arg1 any) *MockOCIVirtualNetworkingClientListSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).ListSubnets), arg0, arg1)
	return &MockOCIVirtualNetworkingClientListSubnetsCall{Call: call}
}

// MockOCIVirtualNetworkingClientListSubnetsCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientListSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientListSubnetsCall) Return(arg0 core.ListSubnetsResponse, arg1 error) *MockOCIVirtualNetworkingClientListSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientListSubnetsCall) Do(f func(context.Context, core.ListSubnetsRequest) (core.ListSubnetsResponse, error)) *MockOCIVirtualNetworkingClientListSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientListSubnetsCall) DoAndReturn(f func(context.Context, core.ListSubnetsRequest) (core.ListSubnetsResponse, error)) *MockOCIVirtualNetworkingClientListSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVcns mocks base method.
func (m *MockOCIVirtualNetworkingClient) ListVcns(arg0 context.Context, arg1 core.ListVcnsRequest) (core.ListVcnsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVcns", arg0, arg1)
	ret0, _ := ret[0].(core.ListVcnsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVcns indicates an expected call of ListVcns.
func (mr *MockOCIVirtualNetworkingClientMockRecorder) ListVcns(arg0, arg1 any) *MockOCIVirtualNetworkingClientListVcnsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVcns", reflect.TypeOf((*MockOCIVirtualNetworkingClient)(nil).ListVcns), arg0, arg1)
	return &MockOCIVirtualNetworkingClientListVcnsCall{Call: call}
}

// MockOCIVirtualNetworkingClientListVcnsCall wrap *gomock.Call
type MockOCIVirtualNetworkingClientListVcnsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIVirtualNetworkingClientListVcnsCall) Return(arg0 core.ListVcnsResponse, arg1 error) *MockOCIVirtualNetworkingClientListVcnsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIVirtualNetworkingClientListVcnsCall) Do(f func(context.Context, core.ListVcnsRequest) (core.ListVcnsResponse, error)) *MockOCIVirtualNetworkingClientListVcnsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIVirtualNetworkingClientListVcnsCall) DoAndReturn(f func(context.Context, core.ListVcnsRequest) (core.ListVcnsResponse, error)) *MockOCIVirtualNetworkingClientListVcnsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
