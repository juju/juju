// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/oci/common (interfaces: OCIComputeClient)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination ../testing/mocks_clientcompute.go -write_package_comment=false github.com/juju/juju/internal/provider/oci/common OCIComputeClient
//

package testing

import (
	context "context"
	reflect "reflect"

	core "github.com/oracle/oci-go-sdk/v65/core"
	gomock "go.uber.org/mock/gomock"
)

// MockOCIComputeClient is a mock of OCIComputeClient interface.
type MockOCIComputeClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCIComputeClientMockRecorder
}

// MockOCIComputeClientMockRecorder is the mock recorder for MockOCIComputeClient.
type MockOCIComputeClientMockRecorder struct {
	mock *MockOCIComputeClient
}

// NewMockOCIComputeClient creates a new mock instance.
func NewMockOCIComputeClient(ctrl *gomock.Controller) *MockOCIComputeClient {
	mock := &MockOCIComputeClient{ctrl: ctrl}
	mock.recorder = &MockOCIComputeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCIComputeClient) EXPECT() *MockOCIComputeClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOCIComputeClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// AttachVolume mocks base method.
func (m *MockOCIComputeClient) AttachVolume(arg0 context.Context, arg1 core.AttachVolumeRequest) (core.AttachVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolume", arg0, arg1)
	ret0, _ := ret[0].(core.AttachVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolume indicates an expected call of AttachVolume.
func (mr *MockOCIComputeClientMockRecorder) AttachVolume(arg0, arg1 any) *MockOCIComputeClientAttachVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolume", reflect.TypeOf((*MockOCIComputeClient)(nil).AttachVolume), arg0, arg1)
	return &MockOCIComputeClientAttachVolumeCall{Call: call}
}

// MockOCIComputeClientAttachVolumeCall wrap *gomock.Call
type MockOCIComputeClientAttachVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientAttachVolumeCall) Return(arg0 core.AttachVolumeResponse, arg1 error) *MockOCIComputeClientAttachVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientAttachVolumeCall) Do(f func(context.Context, core.AttachVolumeRequest) (core.AttachVolumeResponse, error)) *MockOCIComputeClientAttachVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientAttachVolumeCall) DoAndReturn(f func(context.Context, core.AttachVolumeRequest) (core.AttachVolumeResponse, error)) *MockOCIComputeClientAttachVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachVolume mocks base method.
func (m *MockOCIComputeClient) DetachVolume(arg0 context.Context, arg1 core.DetachVolumeRequest) (core.DetachVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", arg0, arg1)
	ret0, _ := ret[0].(core.DetachVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockOCIComputeClientMockRecorder) DetachVolume(arg0, arg1 any) *MockOCIComputeClientDetachVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockOCIComputeClient)(nil).DetachVolume), arg0, arg1)
	return &MockOCIComputeClientDetachVolumeCall{Call: call}
}

// MockOCIComputeClientDetachVolumeCall wrap *gomock.Call
type MockOCIComputeClientDetachVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientDetachVolumeCall) Return(arg0 core.DetachVolumeResponse, arg1 error) *MockOCIComputeClientDetachVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientDetachVolumeCall) Do(f func(context.Context, core.DetachVolumeRequest) (core.DetachVolumeResponse, error)) *MockOCIComputeClientDetachVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientDetachVolumeCall) DoAndReturn(f func(context.Context, core.DetachVolumeRequest) (core.DetachVolumeResponse, error)) *MockOCIComputeClientDetachVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstance mocks base method.
func (m *MockOCIComputeClient) GetInstance(arg0 context.Context, arg1 core.GetInstanceRequest) (core.GetInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0, arg1)
	ret0, _ := ret[0].(core.GetInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockOCIComputeClientMockRecorder) GetInstance(arg0, arg1 any) *MockOCIComputeClientGetInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockOCIComputeClient)(nil).GetInstance), arg0, arg1)
	return &MockOCIComputeClientGetInstanceCall{Call: call}
}

// MockOCIComputeClientGetInstanceCall wrap *gomock.Call
type MockOCIComputeClientGetInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientGetInstanceCall) Return(arg0 core.GetInstanceResponse, arg1 error) *MockOCIComputeClientGetInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientGetInstanceCall) Do(f func(context.Context, core.GetInstanceRequest) (core.GetInstanceResponse, error)) *MockOCIComputeClientGetInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientGetInstanceCall) DoAndReturn(f func(context.Context, core.GetInstanceRequest) (core.GetInstanceResponse, error)) *MockOCIComputeClientGetInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachment mocks base method.
func (m *MockOCIComputeClient) GetVolumeAttachment(arg0 context.Context, arg1 core.GetVolumeAttachmentRequest) (core.GetVolumeAttachmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachment", arg0, arg1)
	ret0, _ := ret[0].(core.GetVolumeAttachmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachment indicates an expected call of GetVolumeAttachment.
func (mr *MockOCIComputeClientMockRecorder) GetVolumeAttachment(arg0, arg1 any) *MockOCIComputeClientGetVolumeAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachment", reflect.TypeOf((*MockOCIComputeClient)(nil).GetVolumeAttachment), arg0, arg1)
	return &MockOCIComputeClientGetVolumeAttachmentCall{Call: call}
}

// MockOCIComputeClientGetVolumeAttachmentCall wrap *gomock.Call
type MockOCIComputeClientGetVolumeAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientGetVolumeAttachmentCall) Return(arg0 core.GetVolumeAttachmentResponse, arg1 error) *MockOCIComputeClientGetVolumeAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientGetVolumeAttachmentCall) Do(f func(context.Context, core.GetVolumeAttachmentRequest) (core.GetVolumeAttachmentResponse, error)) *MockOCIComputeClientGetVolumeAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientGetVolumeAttachmentCall) DoAndReturn(f func(context.Context, core.GetVolumeAttachmentRequest) (core.GetVolumeAttachmentResponse, error)) *MockOCIComputeClientGetVolumeAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LaunchInstance mocks base method.
func (m *MockOCIComputeClient) LaunchInstance(arg0 context.Context, arg1 core.LaunchInstanceRequest) (core.LaunchInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchInstance", arg0, arg1)
	ret0, _ := ret[0].(core.LaunchInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchInstance indicates an expected call of LaunchInstance.
func (mr *MockOCIComputeClientMockRecorder) LaunchInstance(arg0, arg1 any) *MockOCIComputeClientLaunchInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchInstance", reflect.TypeOf((*MockOCIComputeClient)(nil).LaunchInstance), arg0, arg1)
	return &MockOCIComputeClientLaunchInstanceCall{Call: call}
}

// MockOCIComputeClientLaunchInstanceCall wrap *gomock.Call
type MockOCIComputeClientLaunchInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientLaunchInstanceCall) Return(arg0 core.LaunchInstanceResponse, arg1 error) *MockOCIComputeClientLaunchInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientLaunchInstanceCall) Do(f func(context.Context, core.LaunchInstanceRequest) (core.LaunchInstanceResponse, error)) *MockOCIComputeClientLaunchInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientLaunchInstanceCall) DoAndReturn(f func(context.Context, core.LaunchInstanceRequest) (core.LaunchInstanceResponse, error)) *MockOCIComputeClientLaunchInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListImages mocks base method.
func (m *MockOCIComputeClient) ListImages(arg0 context.Context, arg1 core.ListImagesRequest) (core.ListImagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0, arg1)
	ret0, _ := ret[0].(core.ListImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockOCIComputeClientMockRecorder) ListImages(arg0, arg1 any) *MockOCIComputeClientListImagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockOCIComputeClient)(nil).ListImages), arg0, arg1)
	return &MockOCIComputeClientListImagesCall{Call: call}
}

// MockOCIComputeClientListImagesCall wrap *gomock.Call
type MockOCIComputeClientListImagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientListImagesCall) Return(arg0 core.ListImagesResponse, arg1 error) *MockOCIComputeClientListImagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientListImagesCall) Do(f func(context.Context, core.ListImagesRequest) (core.ListImagesResponse, error)) *MockOCIComputeClientListImagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientListImagesCall) DoAndReturn(f func(context.Context, core.ListImagesRequest) (core.ListImagesResponse, error)) *MockOCIComputeClientListImagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListInstances mocks base method.
func (m *MockOCIComputeClient) ListInstances(arg0 context.Context, arg1 core.ListInstancesRequest) (core.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0, arg1)
	ret0, _ := ret[0].(core.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockOCIComputeClientMockRecorder) ListInstances(arg0, arg1 any) *MockOCIComputeClientListInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockOCIComputeClient)(nil).ListInstances), arg0, arg1)
	return &MockOCIComputeClientListInstancesCall{Call: call}
}

// MockOCIComputeClientListInstancesCall wrap *gomock.Call
type MockOCIComputeClientListInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientListInstancesCall) Return(arg0 core.ListInstancesResponse, arg1 error) *MockOCIComputeClientListInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientListInstancesCall) Do(f func(context.Context, core.ListInstancesRequest) (core.ListInstancesResponse, error)) *MockOCIComputeClientListInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientListInstancesCall) DoAndReturn(f func(context.Context, core.ListInstancesRequest) (core.ListInstancesResponse, error)) *MockOCIComputeClientListInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListShapes mocks base method.
func (m *MockOCIComputeClient) ListShapes(arg0 context.Context, arg1 core.ListShapesRequest) (core.ListShapesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShapes", arg0, arg1)
	ret0, _ := ret[0].(core.ListShapesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShapes indicates an expected call of ListShapes.
func (mr *MockOCIComputeClientMockRecorder) ListShapes(arg0, arg1 any) *MockOCIComputeClientListShapesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShapes", reflect.TypeOf((*MockOCIComputeClient)(nil).ListShapes), arg0, arg1)
	return &MockOCIComputeClientListShapesCall{Call: call}
}

// MockOCIComputeClientListShapesCall wrap *gomock.Call
type MockOCIComputeClientListShapesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientListShapesCall) Return(arg0 core.ListShapesResponse, arg1 error) *MockOCIComputeClientListShapesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientListShapesCall) Do(f func(context.Context, core.ListShapesRequest) (core.ListShapesResponse, error)) *MockOCIComputeClientListShapesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientListShapesCall) DoAndReturn(f func(context.Context, core.ListShapesRequest) (core.ListShapesResponse, error)) *MockOCIComputeClientListShapesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVnicAttachments mocks base method.
func (m *MockOCIComputeClient) ListVnicAttachments(arg0 context.Context, arg1 core.ListVnicAttachmentsRequest) (core.ListVnicAttachmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVnicAttachments", arg0, arg1)
	ret0, _ := ret[0].(core.ListVnicAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVnicAttachments indicates an expected call of ListVnicAttachments.
func (mr *MockOCIComputeClientMockRecorder) ListVnicAttachments(arg0, arg1 any) *MockOCIComputeClientListVnicAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVnicAttachments", reflect.TypeOf((*MockOCIComputeClient)(nil).ListVnicAttachments), arg0, arg1)
	return &MockOCIComputeClientListVnicAttachmentsCall{Call: call}
}

// MockOCIComputeClientListVnicAttachmentsCall wrap *gomock.Call
type MockOCIComputeClientListVnicAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientListVnicAttachmentsCall) Return(arg0 core.ListVnicAttachmentsResponse, arg1 error) *MockOCIComputeClientListVnicAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientListVnicAttachmentsCall) Do(f func(context.Context, core.ListVnicAttachmentsRequest) (core.ListVnicAttachmentsResponse, error)) *MockOCIComputeClientListVnicAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientListVnicAttachmentsCall) DoAndReturn(f func(context.Context, core.ListVnicAttachmentsRequest) (core.ListVnicAttachmentsResponse, error)) *MockOCIComputeClientListVnicAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVolumeAttachments mocks base method.
func (m *MockOCIComputeClient) ListVolumeAttachments(arg0 context.Context, arg1 core.ListVolumeAttachmentsRequest) (core.ListVolumeAttachmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumeAttachments", arg0, arg1)
	ret0, _ := ret[0].(core.ListVolumeAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumeAttachments indicates an expected call of ListVolumeAttachments.
func (mr *MockOCIComputeClientMockRecorder) ListVolumeAttachments(arg0, arg1 any) *MockOCIComputeClientListVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeAttachments", reflect.TypeOf((*MockOCIComputeClient)(nil).ListVolumeAttachments), arg0, arg1)
	return &MockOCIComputeClientListVolumeAttachmentsCall{Call: call}
}

// MockOCIComputeClientListVolumeAttachmentsCall wrap *gomock.Call
type MockOCIComputeClientListVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientListVolumeAttachmentsCall) Return(arg0 core.ListVolumeAttachmentsResponse, arg1 error) *MockOCIComputeClientListVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientListVolumeAttachmentsCall) Do(f func(context.Context, core.ListVolumeAttachmentsRequest) (core.ListVolumeAttachmentsResponse, error)) *MockOCIComputeClientListVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientListVolumeAttachmentsCall) DoAndReturn(f func(context.Context, core.ListVolumeAttachmentsRequest) (core.ListVolumeAttachmentsResponse, error)) *MockOCIComputeClientListVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TerminateInstance mocks base method.
func (m *MockOCIComputeClient) TerminateInstance(arg0 context.Context, arg1 core.TerminateInstanceRequest) (core.TerminateInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateInstance", arg0, arg1)
	ret0, _ := ret[0].(core.TerminateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateInstance indicates an expected call of TerminateInstance.
func (mr *MockOCIComputeClientMockRecorder) TerminateInstance(arg0, arg1 any) *MockOCIComputeClientTerminateInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateInstance", reflect.TypeOf((*MockOCIComputeClient)(nil).TerminateInstance), arg0, arg1)
	return &MockOCIComputeClientTerminateInstanceCall{Call: call}
}

// MockOCIComputeClientTerminateInstanceCall wrap *gomock.Call
type MockOCIComputeClientTerminateInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOCIComputeClientTerminateInstanceCall) Return(arg0 core.TerminateInstanceResponse, arg1 error) *MockOCIComputeClientTerminateInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOCIComputeClientTerminateInstanceCall) Do(f func(context.Context, core.TerminateInstanceRequest) (core.TerminateInstanceResponse, error)) *MockOCIComputeClientTerminateInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOCIComputeClientTerminateInstanceCall) DoAndReturn(f func(context.Context, core.TerminateInstanceRequest) (core.TerminateInstanceResponse, error)) *MockOCIComputeClientTerminateInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
