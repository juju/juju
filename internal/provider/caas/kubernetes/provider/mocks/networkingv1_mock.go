// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/networking/v1 (interfaces: NetworkingV1Interface,IngressInterface,IngressClassInterface)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/networkingv1_mock.go -mock_names=IngressInterface=MockIngressV1Interface k8s.io/client-go/kubernetes/typed/networking/v1 NetworkingV1Interface,IngressInterface,IngressClassInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/networking/v1"
	v12 "k8s.io/client-go/kubernetes/typed/networking/v1"
	rest "k8s.io/client-go/rest"
)

// MockNetworkingV1Interface is a mock of NetworkingV1Interface interface.
type MockNetworkingV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingV1InterfaceMockRecorder
}

// MockNetworkingV1InterfaceMockRecorder is the mock recorder for MockNetworkingV1Interface.
type MockNetworkingV1InterfaceMockRecorder struct {
	mock *MockNetworkingV1Interface
}

// NewMockNetworkingV1Interface creates a new mock instance.
func NewMockNetworkingV1Interface(ctrl *gomock.Controller) *MockNetworkingV1Interface {
	mock := &MockNetworkingV1Interface{ctrl: ctrl}
	mock.recorder = &MockNetworkingV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingV1Interface) EXPECT() *MockNetworkingV1InterfaceMockRecorder {
	return m.recorder
}

// IngressClasses mocks base method.
func (m *MockNetworkingV1Interface) IngressClasses() v12.IngressClassInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngressClasses")
	ret0, _ := ret[0].(v12.IngressClassInterface)
	return ret0
}

// IngressClasses indicates an expected call of IngressClasses.
func (mr *MockNetworkingV1InterfaceMockRecorder) IngressClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngressClasses", reflect.TypeOf((*MockNetworkingV1Interface)(nil).IngressClasses))
}

// Ingresses mocks base method.
func (m *MockNetworkingV1Interface) Ingresses(arg0 string) v12.IngressInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingresses", arg0)
	ret0, _ := ret[0].(v12.IngressInterface)
	return ret0
}

// Ingresses indicates an expected call of Ingresses.
func (mr *MockNetworkingV1InterfaceMockRecorder) Ingresses(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingresses", reflect.TypeOf((*MockNetworkingV1Interface)(nil).Ingresses), arg0)
}

// NetworkPolicies mocks base method.
func (m *MockNetworkingV1Interface) NetworkPolicies(arg0 string) v12.NetworkPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkPolicies", arg0)
	ret0, _ := ret[0].(v12.NetworkPolicyInterface)
	return ret0
}

// NetworkPolicies indicates an expected call of NetworkPolicies.
func (mr *MockNetworkingV1InterfaceMockRecorder) NetworkPolicies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkPolicies", reflect.TypeOf((*MockNetworkingV1Interface)(nil).NetworkPolicies), arg0)
}

// RESTClient mocks base method.
func (m *MockNetworkingV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockNetworkingV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockNetworkingV1Interface)(nil).RESTClient))
}

// MockIngressV1Interface is a mock of IngressInterface interface.
type MockIngressV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockIngressV1InterfaceMockRecorder
}

// MockIngressV1InterfaceMockRecorder is the mock recorder for MockIngressV1Interface.
type MockIngressV1InterfaceMockRecorder struct {
	mock *MockIngressV1Interface
}

// NewMockIngressV1Interface creates a new mock instance.
func NewMockIngressV1Interface(ctrl *gomock.Controller) *MockIngressV1Interface {
	mock := &MockIngressV1Interface{ctrl: ctrl}
	mock.recorder = &MockIngressV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngressV1Interface) EXPECT() *MockIngressV1InterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockIngressV1Interface) Apply(arg0 context.Context, arg1 *v11.IngressApplyConfiguration, arg2 v10.ApplyOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockIngressV1InterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockIngressV1Interface)(nil).Apply), arg0, arg1, arg2)
}

// ApplyStatus mocks base method.
func (m *MockIngressV1Interface) ApplyStatus(arg0 context.Context, arg1 *v11.IngressApplyConfiguration, arg2 v10.ApplyOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockIngressV1InterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockIngressV1Interface)(nil).ApplyStatus), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockIngressV1Interface) Create(arg0 context.Context, arg1 *v1.Ingress, arg2 v10.CreateOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIngressV1InterfaceMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngressV1Interface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockIngressV1Interface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIngressV1InterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIngressV1Interface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockIngressV1Interface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockIngressV1InterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockIngressV1Interface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockIngressV1Interface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIngressV1InterfaceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIngressV1Interface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockIngressV1Interface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.IngressList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.IngressList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngressV1InterfaceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngressV1Interface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockIngressV1Interface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockIngressV1InterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockIngressV1Interface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockIngressV1Interface) Update(arg0 context.Context, arg1 *v1.Ingress, arg2 v10.UpdateOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIngressV1InterfaceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngressV1Interface)(nil).Update), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockIngressV1Interface) UpdateStatus(arg0 context.Context, arg1 *v1.Ingress, arg2 v10.UpdateOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIngressV1InterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIngressV1Interface)(nil).UpdateStatus), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockIngressV1Interface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockIngressV1InterfaceMockRecorder) Watch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockIngressV1Interface)(nil).Watch), arg0, arg1)
}

// MockIngressClassInterface is a mock of IngressClassInterface interface.
type MockIngressClassInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIngressClassInterfaceMockRecorder
}

// MockIngressClassInterfaceMockRecorder is the mock recorder for MockIngressClassInterface.
type MockIngressClassInterfaceMockRecorder struct {
	mock *MockIngressClassInterface
}

// NewMockIngressClassInterface creates a new mock instance.
func NewMockIngressClassInterface(ctrl *gomock.Controller) *MockIngressClassInterface {
	mock := &MockIngressClassInterface{ctrl: ctrl}
	mock.recorder = &MockIngressClassInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngressClassInterface) EXPECT() *MockIngressClassInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockIngressClassInterface) Apply(arg0 context.Context, arg1 *v11.IngressClassApplyConfiguration, arg2 v10.ApplyOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockIngressClassInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockIngressClassInterface)(nil).Apply), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockIngressClassInterface) Create(arg0 context.Context, arg1 *v1.IngressClass, arg2 v10.CreateOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIngressClassInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngressClassInterface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockIngressClassInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIngressClassInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIngressClassInterface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockIngressClassInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockIngressClassInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockIngressClassInterface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockIngressClassInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIngressClassInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIngressClassInterface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockIngressClassInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.IngressClassList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.IngressClassList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngressClassInterfaceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngressClassInterface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockIngressClassInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockIngressClassInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockIngressClassInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockIngressClassInterface) Update(arg0 context.Context, arg1 *v1.IngressClass, arg2 v10.UpdateOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIngressClassInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngressClassInterface)(nil).Update), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockIngressClassInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockIngressClassInterfaceMockRecorder) Watch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockIngressClassInterface)(nil).Watch), arg0, arg1)
}
