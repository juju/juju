// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-goose/goose/v5/client (interfaces: AuthenticatingClient)
//
// Generated by this command:
//
//	mockgen -typed -package openstack -destination goose_mock_test.go github.com/go-goose/goose/v5/client AuthenticatingClient
//

// Package openstack is a generated GoMock package.
package openstack

import (
	reflect "reflect"

	http "github.com/go-goose/goose/v5/http"
	identity "github.com/go-goose/goose/v5/identity"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticatingClient is a mock of AuthenticatingClient interface.
type MockAuthenticatingClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatingClientMockRecorder
}

// MockAuthenticatingClientMockRecorder is the mock recorder for MockAuthenticatingClient.
type MockAuthenticatingClientMockRecorder struct {
	mock *MockAuthenticatingClient
}

// NewMockAuthenticatingClient creates a new mock instance.
func NewMockAuthenticatingClient(ctrl *gomock.Controller) *MockAuthenticatingClient {
	mock := &MockAuthenticatingClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticatingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatingClient) EXPECT() *MockAuthenticatingClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAuthenticatingClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Authenticate mocks base method.
func (m *MockAuthenticatingClient) Authenticate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatingClientMockRecorder) Authenticate() *MockAuthenticatingClientAuthenticateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticatingClient)(nil).Authenticate))
	return &MockAuthenticatingClientAuthenticateCall{Call: call}
}

// MockAuthenticatingClientAuthenticateCall wrap *gomock.Call
type MockAuthenticatingClientAuthenticateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientAuthenticateCall) Return(arg0 error) *MockAuthenticatingClientAuthenticateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientAuthenticateCall) Do(f func() error) *MockAuthenticatingClientAuthenticateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientAuthenticateCall) DoAndReturn(f func() error) *MockAuthenticatingClientAuthenticateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndpointsForRegion mocks base method.
func (m *MockAuthenticatingClient) EndpointsForRegion(arg0 string) identity.ServiceURLs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsForRegion", arg0)
	ret0, _ := ret[0].(identity.ServiceURLs)
	return ret0
}

// EndpointsForRegion indicates an expected call of EndpointsForRegion.
func (mr *MockAuthenticatingClientMockRecorder) EndpointsForRegion(arg0 any) *MockAuthenticatingClientEndpointsForRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsForRegion", reflect.TypeOf((*MockAuthenticatingClient)(nil).EndpointsForRegion), arg0)
	return &MockAuthenticatingClientEndpointsForRegionCall{Call: call}
}

// MockAuthenticatingClientEndpointsForRegionCall wrap *gomock.Call
type MockAuthenticatingClientEndpointsForRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientEndpointsForRegionCall) Return(arg0 identity.ServiceURLs) *MockAuthenticatingClientEndpointsForRegionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientEndpointsForRegionCall) Do(f func(string) identity.ServiceURLs) *MockAuthenticatingClientEndpointsForRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientEndpointsForRegionCall) DoAndReturn(f func(string) identity.ServiceURLs) *MockAuthenticatingClientEndpointsForRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IdentityAuthOptions mocks base method.
func (m *MockAuthenticatingClient) IdentityAuthOptions() (identity.AuthOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentityAuthOptions")
	ret0, _ := ret[0].(identity.AuthOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentityAuthOptions indicates an expected call of IdentityAuthOptions.
func (mr *MockAuthenticatingClientMockRecorder) IdentityAuthOptions() *MockAuthenticatingClientIdentityAuthOptionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityAuthOptions", reflect.TypeOf((*MockAuthenticatingClient)(nil).IdentityAuthOptions))
	return &MockAuthenticatingClientIdentityAuthOptionsCall{Call: call}
}

// MockAuthenticatingClientIdentityAuthOptionsCall wrap *gomock.Call
type MockAuthenticatingClientIdentityAuthOptionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientIdentityAuthOptionsCall) Return(arg0 identity.AuthOptions, arg1 error) *MockAuthenticatingClientIdentityAuthOptionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientIdentityAuthOptionsCall) Do(f func() (identity.AuthOptions, error)) *MockAuthenticatingClientIdentityAuthOptionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientIdentityAuthOptionsCall) DoAndReturn(f func() (identity.AuthOptions, error)) *MockAuthenticatingClientIdentityAuthOptionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsAuthenticated mocks base method.
func (m *MockAuthenticatingClient) IsAuthenticated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockAuthenticatingClientMockRecorder) IsAuthenticated() *MockAuthenticatingClientIsAuthenticatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockAuthenticatingClient)(nil).IsAuthenticated))
	return &MockAuthenticatingClientIsAuthenticatedCall{Call: call}
}

// MockAuthenticatingClientIsAuthenticatedCall wrap *gomock.Call
type MockAuthenticatingClientIsAuthenticatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientIsAuthenticatedCall) Return(arg0 bool) *MockAuthenticatingClientIsAuthenticatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientIsAuthenticatedCall) Do(f func() bool) *MockAuthenticatingClientIsAuthenticatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientIsAuthenticatedCall) DoAndReturn(f func() bool) *MockAuthenticatingClientIsAuthenticatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeServiceURL mocks base method.
func (m *MockAuthenticatingClient) MakeServiceURL(arg0, arg1 string, arg2 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeServiceURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeServiceURL indicates an expected call of MakeServiceURL.
func (mr *MockAuthenticatingClientMockRecorder) MakeServiceURL(arg0, arg1, arg2 any) *MockAuthenticatingClientMakeServiceURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeServiceURL", reflect.TypeOf((*MockAuthenticatingClient)(nil).MakeServiceURL), arg0, arg1, arg2)
	return &MockAuthenticatingClientMakeServiceURLCall{Call: call}
}

// MockAuthenticatingClientMakeServiceURLCall wrap *gomock.Call
type MockAuthenticatingClientMakeServiceURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientMakeServiceURLCall) Return(arg0 string, arg1 error) *MockAuthenticatingClientMakeServiceURLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientMakeServiceURLCall) Do(f func(string, string, []string) (string, error)) *MockAuthenticatingClientMakeServiceURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientMakeServiceURLCall) DoAndReturn(f func(string, string, []string) (string, error)) *MockAuthenticatingClientMakeServiceURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendRequest mocks base method.
func (m *MockAuthenticatingClient) SendRequest(arg0, arg1, arg2, arg3 string, arg4 *http.RequestData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockAuthenticatingClientMockRecorder) SendRequest(arg0, arg1, arg2, arg3, arg4 any) *MockAuthenticatingClientSendRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockAuthenticatingClient)(nil).SendRequest), arg0, arg1, arg2, arg3, arg4)
	return &MockAuthenticatingClientSendRequestCall{Call: call}
}

// MockAuthenticatingClientSendRequestCall wrap *gomock.Call
type MockAuthenticatingClientSendRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientSendRequestCall) Return(arg0 error) *MockAuthenticatingClientSendRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientSendRequestCall) Do(f func(string, string, string, string, *http.RequestData) error) *MockAuthenticatingClientSendRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientSendRequestCall) DoAndReturn(f func(string, string, string, string, *http.RequestData) error) *MockAuthenticatingClientSendRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRequiredServiceTypes mocks base method.
func (m *MockAuthenticatingClient) SetRequiredServiceTypes(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequiredServiceTypes", arg0)
}

// SetRequiredServiceTypes indicates an expected call of SetRequiredServiceTypes.
func (mr *MockAuthenticatingClientMockRecorder) SetRequiredServiceTypes(arg0 any) *MockAuthenticatingClientSetRequiredServiceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequiredServiceTypes", reflect.TypeOf((*MockAuthenticatingClient)(nil).SetRequiredServiceTypes), arg0)
	return &MockAuthenticatingClientSetRequiredServiceTypesCall{Call: call}
}

// MockAuthenticatingClientSetRequiredServiceTypesCall wrap *gomock.Call
type MockAuthenticatingClientSetRequiredServiceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientSetRequiredServiceTypesCall) Return() *MockAuthenticatingClientSetRequiredServiceTypesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientSetRequiredServiceTypesCall) Do(f func([]string)) *MockAuthenticatingClientSetRequiredServiceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientSetRequiredServiceTypesCall) DoAndReturn(f func([]string)) *MockAuthenticatingClientSetRequiredServiceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVersionDiscoveryDisabled mocks base method.
func (m *MockAuthenticatingClient) SetVersionDiscoveryDisabled(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersionDiscoveryDisabled", arg0, arg1)
}

// SetVersionDiscoveryDisabled indicates an expected call of SetVersionDiscoveryDisabled.
func (mr *MockAuthenticatingClientMockRecorder) SetVersionDiscoveryDisabled(arg0, arg1 any) *MockAuthenticatingClientSetVersionDiscoveryDisabledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersionDiscoveryDisabled", reflect.TypeOf((*MockAuthenticatingClient)(nil).SetVersionDiscoveryDisabled), arg0, arg1)
	return &MockAuthenticatingClientSetVersionDiscoveryDisabledCall{Call: call}
}

// MockAuthenticatingClientSetVersionDiscoveryDisabledCall wrap *gomock.Call
type MockAuthenticatingClientSetVersionDiscoveryDisabledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientSetVersionDiscoveryDisabledCall) Return() *MockAuthenticatingClientSetVersionDiscoveryDisabledCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientSetVersionDiscoveryDisabledCall) Do(f func(string, bool)) *MockAuthenticatingClientSetVersionDiscoveryDisabledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientSetVersionDiscoveryDisabledCall) DoAndReturn(f func(string, bool)) *MockAuthenticatingClientSetVersionDiscoveryDisabledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TenantId mocks base method.
func (m *MockAuthenticatingClient) TenantId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantId")
	ret0, _ := ret[0].(string)
	return ret0
}

// TenantId indicates an expected call of TenantId.
func (mr *MockAuthenticatingClientMockRecorder) TenantId() *MockAuthenticatingClientTenantIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantId", reflect.TypeOf((*MockAuthenticatingClient)(nil).TenantId))
	return &MockAuthenticatingClientTenantIdCall{Call: call}
}

// MockAuthenticatingClientTenantIdCall wrap *gomock.Call
type MockAuthenticatingClientTenantIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientTenantIdCall) Return(arg0 string) *MockAuthenticatingClientTenantIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientTenantIdCall) Do(f func() string) *MockAuthenticatingClientTenantIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientTenantIdCall) DoAndReturn(f func() string) *MockAuthenticatingClientTenantIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Token mocks base method.
func (m *MockAuthenticatingClient) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockAuthenticatingClientMockRecorder) Token() *MockAuthenticatingClientTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockAuthenticatingClient)(nil).Token))
	return &MockAuthenticatingClientTokenCall{Call: call}
}

// MockAuthenticatingClientTokenCall wrap *gomock.Call
type MockAuthenticatingClientTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientTokenCall) Return(arg0 string) *MockAuthenticatingClientTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientTokenCall) Do(f func() string) *MockAuthenticatingClientTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientTokenCall) DoAndReturn(f func() string) *MockAuthenticatingClientTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UserId mocks base method.
func (m *MockAuthenticatingClient) UserId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserId")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserId indicates an expected call of UserId.
func (mr *MockAuthenticatingClientMockRecorder) UserId() *MockAuthenticatingClientUserIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserId", reflect.TypeOf((*MockAuthenticatingClient)(nil).UserId))
	return &MockAuthenticatingClientUserIdCall{Call: call}
}

// MockAuthenticatingClientUserIdCall wrap *gomock.Call
type MockAuthenticatingClientUserIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthenticatingClientUserIdCall) Return(arg0 string) *MockAuthenticatingClientUserIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthenticatingClientUserIdCall) Do(f func() string) *MockAuthenticatingClientUserIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthenticatingClientUserIdCall) DoAndReturn(f func() string) *MockAuthenticatingClientUserIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
