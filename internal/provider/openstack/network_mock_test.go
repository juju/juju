// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/openstack (interfaces: SSLHostnameConfig,Networking,NetworkingBase,NetworkingNeutron,NetworkingAuthenticatingClient,NetworkingNova,NetworkingEnvironConfig)
//
// Generated by this command:
//
//	mockgen -typed -package openstack -destination network_mock_test.go github.com/juju/juju/internal/provider/openstack SSLHostnameConfig,Networking,NetworkingBase,NetworkingNeutron,NetworkingAuthenticatingClient,NetworkingNova,NetworkingEnvironConfig
//

// Package openstack is a generated GoMock package.
package openstack

import (
	reflect "reflect"

	neutron "github.com/go-goose/goose/v5/neutron"
	nova "github.com/go-goose/goose/v5/nova"
	set "github.com/juju/collections/set"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	gomock "go.uber.org/mock/gomock"
)

// MockSSLHostnameConfig is a mock of SSLHostnameConfig interface.
type MockSSLHostnameConfig struct {
	ctrl     *gomock.Controller
	recorder *MockSSLHostnameConfigMockRecorder
}

// MockSSLHostnameConfigMockRecorder is the mock recorder for MockSSLHostnameConfig.
type MockSSLHostnameConfigMockRecorder struct {
	mock *MockSSLHostnameConfig
}

// NewMockSSLHostnameConfig creates a new mock instance.
func NewMockSSLHostnameConfig(ctrl *gomock.Controller) *MockSSLHostnameConfig {
	mock := &MockSSLHostnameConfig{ctrl: ctrl}
	mock.recorder = &MockSSLHostnameConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSLHostnameConfig) EXPECT() *MockSSLHostnameConfigMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSSLHostnameConfig) ISGOMOCK() struct{} {
	return struct{}{}
}

// SSLHostnameVerification mocks base method.
func (m *MockSSLHostnameConfig) SSLHostnameVerification() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSLHostnameVerification")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SSLHostnameVerification indicates an expected call of SSLHostnameVerification.
func (mr *MockSSLHostnameConfigMockRecorder) SSLHostnameVerification() *MockSSLHostnameConfigSSLHostnameVerificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSLHostnameVerification", reflect.TypeOf((*MockSSLHostnameConfig)(nil).SSLHostnameVerification))
	return &MockSSLHostnameConfigSSLHostnameVerificationCall{Call: call}
}

// MockSSLHostnameConfigSSLHostnameVerificationCall wrap *gomock.Call
type MockSSLHostnameConfigSSLHostnameVerificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSLHostnameConfigSSLHostnameVerificationCall) Return(arg0 bool) *MockSSLHostnameConfigSSLHostnameVerificationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSLHostnameConfigSSLHostnameVerificationCall) Do(f func() bool) *MockSSLHostnameConfigSSLHostnameVerificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSLHostnameConfigSSLHostnameVerificationCall) DoAndReturn(f func() bool) *MockSSLHostnameConfigSSLHostnameVerificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworking is a mock of Networking interface.
type MockNetworking struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingMockRecorder
}

// MockNetworkingMockRecorder is the mock recorder for MockNetworking.
type MockNetworkingMockRecorder struct {
	mock *MockNetworking
}

// NewMockNetworking creates a new mock instance.
func NewMockNetworking(ctrl *gomock.Controller) *MockNetworking {
	mock := &MockNetworking{ctrl: ctrl}
	mock.recorder = &MockNetworkingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworking) EXPECT() *MockNetworkingMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworking) ISGOMOCK() struct{} {
	return struct{}{}
}

// AllocatePublicIP mocks base method.
func (m *MockNetworking) AllocatePublicIP(arg0 instance.Id) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePublicIP", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePublicIP indicates an expected call of AllocatePublicIP.
func (mr *MockNetworkingMockRecorder) AllocatePublicIP(arg0 any) *MockNetworkingAllocatePublicIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePublicIP", reflect.TypeOf((*MockNetworking)(nil).AllocatePublicIP), arg0)
	return &MockNetworkingAllocatePublicIPCall{Call: call}
}

// MockNetworkingAllocatePublicIPCall wrap *gomock.Call
type MockNetworkingAllocatePublicIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingAllocatePublicIPCall) Return(arg0 *string, arg1 error) *MockNetworkingAllocatePublicIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingAllocatePublicIPCall) Do(f func(instance.Id) (*string, error)) *MockNetworkingAllocatePublicIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingAllocatePublicIPCall) DoAndReturn(f func(instance.Id) (*string, error)) *MockNetworkingAllocatePublicIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePort mocks base method.
func (m *MockNetworking) CreatePort(arg0, arg1 string, arg2 network.Id) (*neutron.PortV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePort", arg0, arg1, arg2)
	ret0, _ := ret[0].(*neutron.PortV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePort indicates an expected call of CreatePort.
func (mr *MockNetworkingMockRecorder) CreatePort(arg0, arg1, arg2 any) *MockNetworkingCreatePortCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePort", reflect.TypeOf((*MockNetworking)(nil).CreatePort), arg0, arg1, arg2)
	return &MockNetworkingCreatePortCall{Call: call}
}

// MockNetworkingCreatePortCall wrap *gomock.Call
type MockNetworkingCreatePortCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingCreatePortCall) Return(arg0 *neutron.PortV2, arg1 error) *MockNetworkingCreatePortCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingCreatePortCall) Do(f func(string, string, network.Id) (*neutron.PortV2, error)) *MockNetworkingCreatePortCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingCreatePortCall) DoAndReturn(f func(string, string, network.Id) (*neutron.PortV2, error)) *MockNetworkingCreatePortCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePortByID mocks base method.
func (m *MockNetworking) DeletePortByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortByID indicates an expected call of DeletePortByID.
func (mr *MockNetworkingMockRecorder) DeletePortByID(arg0 any) *MockNetworkingDeletePortByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortByID", reflect.TypeOf((*MockNetworking)(nil).DeletePortByID), arg0)
	return &MockNetworkingDeletePortByIDCall{Call: call}
}

// MockNetworkingDeletePortByIDCall wrap *gomock.Call
type MockNetworkingDeletePortByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingDeletePortByIDCall) Return(arg0 error) *MockNetworkingDeletePortByIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingDeletePortByIDCall) Do(f func(string) error) *MockNetworkingDeletePortByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingDeletePortByIDCall) DoAndReturn(f func(string) error) *MockNetworkingDeletePortByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindNetworks mocks base method.
func (m *MockNetworking) FindNetworks(arg0 bool) (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNetworks", arg0)
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNetworks indicates an expected call of FindNetworks.
func (mr *MockNetworkingMockRecorder) FindNetworks(arg0 any) *MockNetworkingFindNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNetworks", reflect.TypeOf((*MockNetworking)(nil).FindNetworks), arg0)
	return &MockNetworkingFindNetworksCall{Call: call}
}

// MockNetworkingFindNetworksCall wrap *gomock.Call
type MockNetworkingFindNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingFindNetworksCall) Return(arg0 set.Strings, arg1 error) *MockNetworkingFindNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingFindNetworksCall) Do(f func(bool) (set.Strings, error)) *MockNetworkingFindNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingFindNetworksCall) DoAndReturn(f func(bool) (set.Strings, error)) *MockNetworkingFindNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NetworkInterfaces mocks base method.
func (m *MockNetworking) NetworkInterfaces(arg0 []instance.Id) ([]network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInterfaces", arg0)
	ret0, _ := ret[0].([]network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInterfaces indicates an expected call of NetworkInterfaces.
func (mr *MockNetworkingMockRecorder) NetworkInterfaces(arg0 any) *MockNetworkingNetworkInterfacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInterfaces", reflect.TypeOf((*MockNetworking)(nil).NetworkInterfaces), arg0)
	return &MockNetworkingNetworkInterfacesCall{Call: call}
}

// MockNetworkingNetworkInterfacesCall wrap *gomock.Call
type MockNetworkingNetworkInterfacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNetworkInterfacesCall) Return(arg0 []network.InterfaceInfos, arg1 error) *MockNetworkingNetworkInterfacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNetworkInterfacesCall) Do(f func([]instance.Id) ([]network.InterfaceInfos, error)) *MockNetworkingNetworkInterfacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNetworkInterfacesCall) DoAndReturn(f func([]instance.Id) ([]network.InterfaceInfos, error)) *MockNetworkingNetworkInterfacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveNetworks mocks base method.
func (m *MockNetworking) ResolveNetworks(arg0 string, arg1 bool) ([]neutron.NetworkV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNetworks", arg0, arg1)
	ret0, _ := ret[0].([]neutron.NetworkV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveNetworks indicates an expected call of ResolveNetworks.
func (mr *MockNetworkingMockRecorder) ResolveNetworks(arg0, arg1 any) *MockNetworkingResolveNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNetworks", reflect.TypeOf((*MockNetworking)(nil).ResolveNetworks), arg0, arg1)
	return &MockNetworkingResolveNetworksCall{Call: call}
}

// MockNetworkingResolveNetworksCall wrap *gomock.Call
type MockNetworkingResolveNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingResolveNetworksCall) Return(arg0 []neutron.NetworkV2, arg1 error) *MockNetworkingResolveNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingResolveNetworksCall) Do(f func(string, bool) ([]neutron.NetworkV2, error)) *MockNetworkingResolveNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingResolveNetworksCall) DoAndReturn(f func(string, bool) ([]neutron.NetworkV2, error)) *MockNetworkingResolveNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subnets mocks base method.
func (m *MockNetworking) Subnets(arg0 instance.Id, arg1 []network.Id) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets", arg0, arg1)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnets indicates an expected call of Subnets.
func (mr *MockNetworkingMockRecorder) Subnets(arg0, arg1 any) *MockNetworkingSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockNetworking)(nil).Subnets), arg0, arg1)
	return &MockNetworkingSubnetsCall{Call: call}
}

// MockNetworkingSubnetsCall wrap *gomock.Call
type MockNetworkingSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingSubnetsCall) Return(arg0 []network.SubnetInfo, arg1 error) *MockNetworkingSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingSubnetsCall) Do(f func(instance.Id, []network.Id) ([]network.SubnetInfo, error)) *MockNetworkingSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingSubnetsCall) DoAndReturn(f func(instance.Id, []network.Id) ([]network.SubnetInfo, error)) *MockNetworkingSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkingBase is a mock of NetworkingBase interface.
type MockNetworkingBase struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingBaseMockRecorder
}

// MockNetworkingBaseMockRecorder is the mock recorder for MockNetworkingBase.
type MockNetworkingBaseMockRecorder struct {
	mock *MockNetworkingBase
}

// NewMockNetworkingBase creates a new mock instance.
func NewMockNetworkingBase(ctrl *gomock.Controller) *MockNetworkingBase {
	mock := &MockNetworkingBase{ctrl: ctrl}
	mock.recorder = &MockNetworkingBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingBase) EXPECT() *MockNetworkingBaseMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingBase) ISGOMOCK() struct{} {
	return struct{}{}
}

// client mocks base method.
func (m *MockNetworkingBase) client() NetworkingAuthenticatingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "client")
	ret0, _ := ret[0].(NetworkingAuthenticatingClient)
	return ret0
}

// client indicates an expected call of client.
func (mr *MockNetworkingBaseMockRecorder) client() *MockNetworkingBaseclientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "client", reflect.TypeOf((*MockNetworkingBase)(nil).client))
	return &MockNetworkingBaseclientCall{Call: call}
}

// MockNetworkingBaseclientCall wrap *gomock.Call
type MockNetworkingBaseclientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingBaseclientCall) Return(arg0 NetworkingAuthenticatingClient) *MockNetworkingBaseclientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingBaseclientCall) Do(f func() NetworkingAuthenticatingClient) *MockNetworkingBaseclientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingBaseclientCall) DoAndReturn(f func() NetworkingAuthenticatingClient) *MockNetworkingBaseclientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ecfg mocks base method.
func (m *MockNetworkingBase) ecfg() NetworkingEnvironConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ecfg")
	ret0, _ := ret[0].(NetworkingEnvironConfig)
	return ret0
}

// ecfg indicates an expected call of ecfg.
func (mr *MockNetworkingBaseMockRecorder) ecfg() *MockNetworkingBaseecfgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ecfg", reflect.TypeOf((*MockNetworkingBase)(nil).ecfg))
	return &MockNetworkingBaseecfgCall{Call: call}
}

// MockNetworkingBaseecfgCall wrap *gomock.Call
type MockNetworkingBaseecfgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingBaseecfgCall) Return(arg0 NetworkingEnvironConfig) *MockNetworkingBaseecfgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingBaseecfgCall) Do(f func() NetworkingEnvironConfig) *MockNetworkingBaseecfgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingBaseecfgCall) DoAndReturn(f func() NetworkingEnvironConfig) *MockNetworkingBaseecfgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// neutron mocks base method.
func (m *MockNetworkingBase) neutron() NetworkingNeutron {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "neutron")
	ret0, _ := ret[0].(NetworkingNeutron)
	return ret0
}

// neutron indicates an expected call of neutron.
func (mr *MockNetworkingBaseMockRecorder) neutron() *MockNetworkingBaseneutronCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "neutron", reflect.TypeOf((*MockNetworkingBase)(nil).neutron))
	return &MockNetworkingBaseneutronCall{Call: call}
}

// MockNetworkingBaseneutronCall wrap *gomock.Call
type MockNetworkingBaseneutronCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingBaseneutronCall) Return(arg0 NetworkingNeutron) *MockNetworkingBaseneutronCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingBaseneutronCall) Do(f func() NetworkingNeutron) *MockNetworkingBaseneutronCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingBaseneutronCall) DoAndReturn(f func() NetworkingNeutron) *MockNetworkingBaseneutronCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// nova mocks base method.
func (m *MockNetworkingBase) nova() NetworkingNova {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nova")
	ret0, _ := ret[0].(NetworkingNova)
	return ret0
}

// nova indicates an expected call of nova.
func (mr *MockNetworkingBaseMockRecorder) nova() *MockNetworkingBasenovaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nova", reflect.TypeOf((*MockNetworkingBase)(nil).nova))
	return &MockNetworkingBasenovaCall{Call: call}
}

// MockNetworkingBasenovaCall wrap *gomock.Call
type MockNetworkingBasenovaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingBasenovaCall) Return(arg0 NetworkingNova) *MockNetworkingBasenovaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingBasenovaCall) Do(f func() NetworkingNova) *MockNetworkingBasenovaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingBasenovaCall) DoAndReturn(f func() NetworkingNova) *MockNetworkingBasenovaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkingNeutron is a mock of NetworkingNeutron interface.
type MockNetworkingNeutron struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingNeutronMockRecorder
}

// MockNetworkingNeutronMockRecorder is the mock recorder for MockNetworkingNeutron.
type MockNetworkingNeutronMockRecorder struct {
	mock *MockNetworkingNeutron
}

// NewMockNetworkingNeutron creates a new mock instance.
func NewMockNetworkingNeutron(ctrl *gomock.Controller) *MockNetworkingNeutron {
	mock := &MockNetworkingNeutron{ctrl: ctrl}
	mock.recorder = &MockNetworkingNeutronMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingNeutron) EXPECT() *MockNetworkingNeutronMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingNeutron) ISGOMOCK() struct{} {
	return struct{}{}
}

// AllocateFloatingIPV2 mocks base method.
func (m *MockNetworkingNeutron) AllocateFloatingIPV2(arg0 string) (*neutron.FloatingIPV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateFloatingIPV2", arg0)
	ret0, _ := ret[0].(*neutron.FloatingIPV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateFloatingIPV2 indicates an expected call of AllocateFloatingIPV2.
func (mr *MockNetworkingNeutronMockRecorder) AllocateFloatingIPV2(arg0 any) *MockNetworkingNeutronAllocateFloatingIPV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateFloatingIPV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).AllocateFloatingIPV2), arg0)
	return &MockNetworkingNeutronAllocateFloatingIPV2Call{Call: call}
}

// MockNetworkingNeutronAllocateFloatingIPV2Call wrap *gomock.Call
type MockNetworkingNeutronAllocateFloatingIPV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronAllocateFloatingIPV2Call) Return(arg0 *neutron.FloatingIPV2, arg1 error) *MockNetworkingNeutronAllocateFloatingIPV2Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronAllocateFloatingIPV2Call) Do(f func(string) (*neutron.FloatingIPV2, error)) *MockNetworkingNeutronAllocateFloatingIPV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronAllocateFloatingIPV2Call) DoAndReturn(f func(string) (*neutron.FloatingIPV2, error)) *MockNetworkingNeutronAllocateFloatingIPV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePortV2 mocks base method.
func (m *MockNetworkingNeutron) CreatePortV2(arg0 neutron.PortV2) (*neutron.PortV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortV2", arg0)
	ret0, _ := ret[0].(*neutron.PortV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortV2 indicates an expected call of CreatePortV2.
func (mr *MockNetworkingNeutronMockRecorder) CreatePortV2(arg0 any) *MockNetworkingNeutronCreatePortV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).CreatePortV2), arg0)
	return &MockNetworkingNeutronCreatePortV2Call{Call: call}
}

// MockNetworkingNeutronCreatePortV2Call wrap *gomock.Call
type MockNetworkingNeutronCreatePortV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronCreatePortV2Call) Return(arg0 *neutron.PortV2, arg1 error) *MockNetworkingNeutronCreatePortV2Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronCreatePortV2Call) Do(f func(neutron.PortV2) (*neutron.PortV2, error)) *MockNetworkingNeutronCreatePortV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronCreatePortV2Call) DoAndReturn(f func(neutron.PortV2) (*neutron.PortV2, error)) *MockNetworkingNeutronCreatePortV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePortV2 mocks base method.
func (m *MockNetworkingNeutron) DeletePortV2(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortV2", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePortV2 indicates an expected call of DeletePortV2.
func (mr *MockNetworkingNeutronMockRecorder) DeletePortV2(arg0 any) *MockNetworkingNeutronDeletePortV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).DeletePortV2), arg0)
	return &MockNetworkingNeutronDeletePortV2Call{Call: call}
}

// MockNetworkingNeutronDeletePortV2Call wrap *gomock.Call
type MockNetworkingNeutronDeletePortV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronDeletePortV2Call) Return(arg0 error) *MockNetworkingNeutronDeletePortV2Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronDeletePortV2Call) Do(f func(string) error) *MockNetworkingNeutronDeletePortV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronDeletePortV2Call) DoAndReturn(f func(string) error) *MockNetworkingNeutronDeletePortV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkV2 mocks base method.
func (m *MockNetworkingNeutron) GetNetworkV2(arg0 string) (*neutron.NetworkV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkV2", arg0)
	ret0, _ := ret[0].(*neutron.NetworkV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkV2 indicates an expected call of GetNetworkV2.
func (mr *MockNetworkingNeutronMockRecorder) GetNetworkV2(arg0 any) *MockNetworkingNeutronGetNetworkV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).GetNetworkV2), arg0)
	return &MockNetworkingNeutronGetNetworkV2Call{Call: call}
}

// MockNetworkingNeutronGetNetworkV2Call wrap *gomock.Call
type MockNetworkingNeutronGetNetworkV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronGetNetworkV2Call) Return(arg0 *neutron.NetworkV2, arg1 error) *MockNetworkingNeutronGetNetworkV2Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronGetNetworkV2Call) Do(f func(string) (*neutron.NetworkV2, error)) *MockNetworkingNeutronGetNetworkV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronGetNetworkV2Call) DoAndReturn(f func(string) (*neutron.NetworkV2, error)) *MockNetworkingNeutronGetNetworkV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFloatingIPsV2 mocks base method.
func (m *MockNetworkingNeutron) ListFloatingIPsV2(arg0 ...*neutron.Filter) ([]neutron.FloatingIPV2, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFloatingIPsV2", varargs...)
	ret0, _ := ret[0].([]neutron.FloatingIPV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFloatingIPsV2 indicates an expected call of ListFloatingIPsV2.
func (mr *MockNetworkingNeutronMockRecorder) ListFloatingIPsV2(arg0 ...any) *MockNetworkingNeutronListFloatingIPsV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFloatingIPsV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).ListFloatingIPsV2), arg0...)
	return &MockNetworkingNeutronListFloatingIPsV2Call{Call: call}
}

// MockNetworkingNeutronListFloatingIPsV2Call wrap *gomock.Call
type MockNetworkingNeutronListFloatingIPsV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronListFloatingIPsV2Call) Return(arg0 []neutron.FloatingIPV2, arg1 error) *MockNetworkingNeutronListFloatingIPsV2Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronListFloatingIPsV2Call) Do(f func(...*neutron.Filter) ([]neutron.FloatingIPV2, error)) *MockNetworkingNeutronListFloatingIPsV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronListFloatingIPsV2Call) DoAndReturn(f func(...*neutron.Filter) ([]neutron.FloatingIPV2, error)) *MockNetworkingNeutronListFloatingIPsV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListNetworksV2 mocks base method.
func (m *MockNetworkingNeutron) ListNetworksV2(arg0 ...*neutron.Filter) ([]neutron.NetworkV2, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworksV2", varargs...)
	ret0, _ := ret[0].([]neutron.NetworkV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworksV2 indicates an expected call of ListNetworksV2.
func (mr *MockNetworkingNeutronMockRecorder) ListNetworksV2(arg0 ...any) *MockNetworkingNeutronListNetworksV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworksV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).ListNetworksV2), arg0...)
	return &MockNetworkingNeutronListNetworksV2Call{Call: call}
}

// MockNetworkingNeutronListNetworksV2Call wrap *gomock.Call
type MockNetworkingNeutronListNetworksV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronListNetworksV2Call) Return(arg0 []neutron.NetworkV2, arg1 error) *MockNetworkingNeutronListNetworksV2Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronListNetworksV2Call) Do(f func(...*neutron.Filter) ([]neutron.NetworkV2, error)) *MockNetworkingNeutronListNetworksV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronListNetworksV2Call) DoAndReturn(f func(...*neutron.Filter) ([]neutron.NetworkV2, error)) *MockNetworkingNeutronListNetworksV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPortsV2 mocks base method.
func (m *MockNetworkingNeutron) ListPortsV2(arg0 ...*neutron.Filter) ([]neutron.PortV2, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortsV2", varargs...)
	ret0, _ := ret[0].([]neutron.PortV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortsV2 indicates an expected call of ListPortsV2.
func (mr *MockNetworkingNeutronMockRecorder) ListPortsV2(arg0 ...any) *MockNetworkingNeutronListPortsV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortsV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).ListPortsV2), arg0...)
	return &MockNetworkingNeutronListPortsV2Call{Call: call}
}

// MockNetworkingNeutronListPortsV2Call wrap *gomock.Call
type MockNetworkingNeutronListPortsV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronListPortsV2Call) Return(arg0 []neutron.PortV2, arg1 error) *MockNetworkingNeutronListPortsV2Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronListPortsV2Call) Do(f func(...*neutron.Filter) ([]neutron.PortV2, error)) *MockNetworkingNeutronListPortsV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronListPortsV2Call) DoAndReturn(f func(...*neutron.Filter) ([]neutron.PortV2, error)) *MockNetworkingNeutronListPortsV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSubnetsV2 mocks base method.
func (m *MockNetworkingNeutron) ListSubnetsV2() ([]neutron.SubnetV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnetsV2")
	ret0, _ := ret[0].([]neutron.SubnetV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnetsV2 indicates an expected call of ListSubnetsV2.
func (mr *MockNetworkingNeutronMockRecorder) ListSubnetsV2() *MockNetworkingNeutronListSubnetsV2Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnetsV2", reflect.TypeOf((*MockNetworkingNeutron)(nil).ListSubnetsV2))
	return &MockNetworkingNeutronListSubnetsV2Call{Call: call}
}

// MockNetworkingNeutronListSubnetsV2Call wrap *gomock.Call
type MockNetworkingNeutronListSubnetsV2Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNeutronListSubnetsV2Call) Return(arg0 []neutron.SubnetV2, arg1 error) *MockNetworkingNeutronListSubnetsV2Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNeutronListSubnetsV2Call) Do(f func() ([]neutron.SubnetV2, error)) *MockNetworkingNeutronListSubnetsV2Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNeutronListSubnetsV2Call) DoAndReturn(f func() ([]neutron.SubnetV2, error)) *MockNetworkingNeutronListSubnetsV2Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkingAuthenticatingClient is a mock of NetworkingAuthenticatingClient interface.
type MockNetworkingAuthenticatingClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingAuthenticatingClientMockRecorder
}

// MockNetworkingAuthenticatingClientMockRecorder is the mock recorder for MockNetworkingAuthenticatingClient.
type MockNetworkingAuthenticatingClientMockRecorder struct {
	mock *MockNetworkingAuthenticatingClient
}

// NewMockNetworkingAuthenticatingClient creates a new mock instance.
func NewMockNetworkingAuthenticatingClient(ctrl *gomock.Controller) *MockNetworkingAuthenticatingClient {
	mock := &MockNetworkingAuthenticatingClient{ctrl: ctrl}
	mock.recorder = &MockNetworkingAuthenticatingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingAuthenticatingClient) EXPECT() *MockNetworkingAuthenticatingClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingAuthenticatingClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// TenantId mocks base method.
func (m *MockNetworkingAuthenticatingClient) TenantId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantId")
	ret0, _ := ret[0].(string)
	return ret0
}

// TenantId indicates an expected call of TenantId.
func (mr *MockNetworkingAuthenticatingClientMockRecorder) TenantId() *MockNetworkingAuthenticatingClientTenantIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantId", reflect.TypeOf((*MockNetworkingAuthenticatingClient)(nil).TenantId))
	return &MockNetworkingAuthenticatingClientTenantIdCall{Call: call}
}

// MockNetworkingAuthenticatingClientTenantIdCall wrap *gomock.Call
type MockNetworkingAuthenticatingClientTenantIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingAuthenticatingClientTenantIdCall) Return(arg0 string) *MockNetworkingAuthenticatingClientTenantIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingAuthenticatingClientTenantIdCall) Do(f func() string) *MockNetworkingAuthenticatingClientTenantIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingAuthenticatingClientTenantIdCall) DoAndReturn(f func() string) *MockNetworkingAuthenticatingClientTenantIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkingNova is a mock of NetworkingNova interface.
type MockNetworkingNova struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingNovaMockRecorder
}

// MockNetworkingNovaMockRecorder is the mock recorder for MockNetworkingNova.
type MockNetworkingNovaMockRecorder struct {
	mock *MockNetworkingNova
}

// NewMockNetworkingNova creates a new mock instance.
func NewMockNetworkingNova(ctrl *gomock.Controller) *MockNetworkingNova {
	mock := &MockNetworkingNova{ctrl: ctrl}
	mock.recorder = &MockNetworkingNovaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingNova) EXPECT() *MockNetworkingNovaMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingNova) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetServer mocks base method.
func (m *MockNetworkingNova) GetServer(arg0 string) (*nova.ServerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", arg0)
	ret0, _ := ret[0].(*nova.ServerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockNetworkingNovaMockRecorder) GetServer(arg0 any) *MockNetworkingNovaGetServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockNetworkingNova)(nil).GetServer), arg0)
	return &MockNetworkingNovaGetServerCall{Call: call}
}

// MockNetworkingNovaGetServerCall wrap *gomock.Call
type MockNetworkingNovaGetServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingNovaGetServerCall) Return(arg0 *nova.ServerDetail, arg1 error) *MockNetworkingNovaGetServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingNovaGetServerCall) Do(f func(string) (*nova.ServerDetail, error)) *MockNetworkingNovaGetServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingNovaGetServerCall) DoAndReturn(f func(string) (*nova.ServerDetail, error)) *MockNetworkingNovaGetServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkingEnvironConfig is a mock of NetworkingEnvironConfig interface.
type MockNetworkingEnvironConfig struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingEnvironConfigMockRecorder
}

// MockNetworkingEnvironConfigMockRecorder is the mock recorder for MockNetworkingEnvironConfig.
type MockNetworkingEnvironConfigMockRecorder struct {
	mock *MockNetworkingEnvironConfig
}

// NewMockNetworkingEnvironConfig creates a new mock instance.
func NewMockNetworkingEnvironConfig(ctrl *gomock.Controller) *MockNetworkingEnvironConfig {
	mock := &MockNetworkingEnvironConfig{ctrl: ctrl}
	mock.recorder = &MockNetworkingEnvironConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingEnvironConfig) EXPECT() *MockNetworkingEnvironConfigMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingEnvironConfig) ISGOMOCK() struct{} {
	return struct{}{}
}

// externalNetwork mocks base method.
func (m *MockNetworkingEnvironConfig) externalNetwork() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "externalNetwork")
	ret0, _ := ret[0].(string)
	return ret0
}

// externalNetwork indicates an expected call of externalNetwork.
func (mr *MockNetworkingEnvironConfigMockRecorder) externalNetwork() *MockNetworkingEnvironConfigexternalNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "externalNetwork", reflect.TypeOf((*MockNetworkingEnvironConfig)(nil).externalNetwork))
	return &MockNetworkingEnvironConfigexternalNetworkCall{Call: call}
}

// MockNetworkingEnvironConfigexternalNetworkCall wrap *gomock.Call
type MockNetworkingEnvironConfigexternalNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironConfigexternalNetworkCall) Return(arg0 string) *MockNetworkingEnvironConfigexternalNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironConfigexternalNetworkCall) Do(f func() string) *MockNetworkingEnvironConfigexternalNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironConfigexternalNetworkCall) DoAndReturn(f func() string) *MockNetworkingEnvironConfigexternalNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// networks mocks base method.
func (m *MockNetworkingEnvironConfig) networks() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "networks")
	ret0, _ := ret[0].([]string)
	return ret0
}

// networks indicates an expected call of networks.
func (mr *MockNetworkingEnvironConfigMockRecorder) networks() *MockNetworkingEnvironConfignetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "networks", reflect.TypeOf((*MockNetworkingEnvironConfig)(nil).networks))
	return &MockNetworkingEnvironConfignetworksCall{Call: call}
}

// MockNetworkingEnvironConfignetworksCall wrap *gomock.Call
type MockNetworkingEnvironConfignetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironConfignetworksCall) Return(arg0 []string) *MockNetworkingEnvironConfignetworksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironConfignetworksCall) Do(f func() []string) *MockNetworkingEnvironConfignetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironConfignetworksCall) DoAndReturn(f func() []string) *MockNetworkingEnvironConfignetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
