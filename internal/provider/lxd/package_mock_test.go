// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/provider/lxd (interfaces: Server,ServerFactory,InterfaceAddress,CertificateReadWriter,CertificateGenerator,LXCConfigReader)
//
// Generated by this command:
//
//	mockgen -typed -package lxd -destination package_mock_test.go github.com/juju/juju/internal/provider/lxd Server,ServerFactory,InterfaceAddress,CertificateReadWriter,CertificateGenerator,LXCConfigReader
//

// Package lxd is a generated GoMock package.
package lxd

import (
	context "context"
	reflect "reflect"

	lxd "github.com/canonical/lxd/client"
	api "github.com/canonical/lxd/shared/api"
	base "github.com/juju/juju/core/base"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	environs "github.com/juju/juju/environs"
	lxd0 "github.com/juju/juju/internal/container/lxd"
	gomock "go.uber.org/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// AliveContainers mocks base method.
func (m *MockServer) AliveContainers(arg0 string) ([]lxd0.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AliveContainers", arg0)
	ret0, _ := ret[0].([]lxd0.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AliveContainers indicates an expected call of AliveContainers.
func (mr *MockServerMockRecorder) AliveContainers(arg0 any) *MockServerAliveContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AliveContainers", reflect.TypeOf((*MockServer)(nil).AliveContainers), arg0)
	return &MockServerAliveContainersCall{Call: call}
}

// MockServerAliveContainersCall wrap *gomock.Call
type MockServerAliveContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerAliveContainersCall) Return(arg0 []lxd0.Container, arg1 error) *MockServerAliveContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerAliveContainersCall) Do(f func(string) ([]lxd0.Container, error)) *MockServerAliveContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerAliveContainersCall) DoAndReturn(f func(string) ([]lxd0.Container, error)) *MockServerAliveContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerAddresses mocks base method.
func (m *MockServer) ContainerAddresses(arg0 string) ([]network.ProviderAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerAddresses", arg0)
	ret0, _ := ret[0].([]network.ProviderAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerAddresses indicates an expected call of ContainerAddresses.
func (mr *MockServerMockRecorder) ContainerAddresses(arg0 any) *MockServerContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerAddresses", reflect.TypeOf((*MockServer)(nil).ContainerAddresses), arg0)
	return &MockServerContainerAddressesCall{Call: call}
}

// MockServerContainerAddressesCall wrap *gomock.Call
type MockServerContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerContainerAddressesCall) Return(arg0 []network.ProviderAddress, arg1 error) *MockServerContainerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerContainerAddressesCall) Do(f func(string) ([]network.ProviderAddress, error)) *MockServerContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerContainerAddressesCall) DoAndReturn(f func(string) ([]network.ProviderAddress, error)) *MockServerContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCertificate mocks base method.
func (m *MockServer) CreateCertificate(arg0 api.CertificatesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockServerMockRecorder) CreateCertificate(arg0 any) *MockServerCreateCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockServer)(nil).CreateCertificate), arg0)
	return &MockServerCreateCertificateCall{Call: call}
}

// MockServerCreateCertificateCall wrap *gomock.Call
type MockServerCreateCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerCreateCertificateCall) Return(arg0 error) *MockServerCreateCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerCreateCertificateCall) Do(f func(api.CertificatesPost) error) *MockServerCreateCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerCreateCertificateCall) DoAndReturn(f func(api.CertificatesPost) error) *MockServerCreateCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateClientCertificate mocks base method.
func (m *MockServer) CreateClientCertificate(arg0 *lxd0.Certificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientCertificate indicates an expected call of CreateClientCertificate.
func (mr *MockServerMockRecorder) CreateClientCertificate(arg0 any) *MockServerCreateClientCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientCertificate", reflect.TypeOf((*MockServer)(nil).CreateClientCertificate), arg0)
	return &MockServerCreateClientCertificateCall{Call: call}
}

// MockServerCreateClientCertificateCall wrap *gomock.Call
type MockServerCreateClientCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerCreateClientCertificateCall) Return(arg0 error) *MockServerCreateClientCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerCreateClientCertificateCall) Do(f func(*lxd0.Certificate) error) *MockServerCreateClientCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerCreateClientCertificateCall) DoAndReturn(f func(*lxd0.Certificate) error) *MockServerCreateClientCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainerFromSpec mocks base method.
func (m *MockServer) CreateContainerFromSpec(arg0 lxd0.ContainerSpec) (*lxd0.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromSpec", arg0)
	ret0, _ := ret[0].(*lxd0.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromSpec indicates an expected call of CreateContainerFromSpec.
func (mr *MockServerMockRecorder) CreateContainerFromSpec(arg0 any) *MockServerCreateContainerFromSpecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromSpec", reflect.TypeOf((*MockServer)(nil).CreateContainerFromSpec), arg0)
	return &MockServerCreateContainerFromSpecCall{Call: call}
}

// MockServerCreateContainerFromSpecCall wrap *gomock.Call
type MockServerCreateContainerFromSpecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerCreateContainerFromSpecCall) Return(arg0 *lxd0.Container, arg1 error) *MockServerCreateContainerFromSpecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerCreateContainerFromSpecCall) Do(f func(lxd0.ContainerSpec) (*lxd0.Container, error)) *MockServerCreateContainerFromSpecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerCreateContainerFromSpecCall) DoAndReturn(f func(lxd0.ContainerSpec) (*lxd0.Container, error)) *MockServerCreateContainerFromSpecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePool mocks base method.
func (m *MockServer) CreatePool(arg0, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockServerMockRecorder) CreatePool(arg0, arg1, arg2 any) *MockServerCreatePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockServer)(nil).CreatePool), arg0, arg1, arg2)
	return &MockServerCreatePoolCall{Call: call}
}

// MockServerCreatePoolCall wrap *gomock.Call
type MockServerCreatePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerCreatePoolCall) Return(arg0 error) *MockServerCreatePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerCreatePoolCall) Do(f func(string, string, map[string]string) error) *MockServerCreatePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerCreatePoolCall) DoAndReturn(f func(string, string, map[string]string) error) *MockServerCreatePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateProfile mocks base method.
func (m *MockServer) CreateProfile(arg0 api.ProfilesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockServerMockRecorder) CreateProfile(arg0 any) *MockServerCreateProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockServer)(nil).CreateProfile), arg0)
	return &MockServerCreateProfileCall{Call: call}
}

// MockServerCreateProfileCall wrap *gomock.Call
type MockServerCreateProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerCreateProfileCall) Return(arg0 error) *MockServerCreateProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerCreateProfileCall) Do(f func(api.ProfilesPost) error) *MockServerCreateProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerCreateProfileCall) DoAndReturn(f func(api.ProfilesPost) error) *MockServerCreateProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateProfileWithConfig mocks base method.
func (m *MockServer) CreateProfileWithConfig(arg0 string, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileWithConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfileWithConfig indicates an expected call of CreateProfileWithConfig.
func (mr *MockServerMockRecorder) CreateProfileWithConfig(arg0, arg1 any) *MockServerCreateProfileWithConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileWithConfig", reflect.TypeOf((*MockServer)(nil).CreateProfileWithConfig), arg0, arg1)
	return &MockServerCreateProfileWithConfigCall{Call: call}
}

// MockServerCreateProfileWithConfigCall wrap *gomock.Call
type MockServerCreateProfileWithConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerCreateProfileWithConfigCall) Return(arg0 error) *MockServerCreateProfileWithConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerCreateProfileWithConfigCall) Do(f func(string, map[string]string) error) *MockServerCreateProfileWithConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerCreateProfileWithConfigCall) DoAndReturn(f func(string, map[string]string) error) *MockServerCreateProfileWithConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVolume mocks base method.
func (m *MockServer) CreateVolume(arg0, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockServerMockRecorder) CreateVolume(arg0, arg1, arg2 any) *MockServerCreateVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockServer)(nil).CreateVolume), arg0, arg1, arg2)
	return &MockServerCreateVolumeCall{Call: call}
}

// MockServerCreateVolumeCall wrap *gomock.Call
type MockServerCreateVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerCreateVolumeCall) Return(arg0 error) *MockServerCreateVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerCreateVolumeCall) Do(f func(string, string, map[string]string) error) *MockServerCreateVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerCreateVolumeCall) DoAndReturn(f func(string, string, map[string]string) error) *MockServerCreateVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCertificate mocks base method.
func (m *MockServer) DeleteCertificate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockServerMockRecorder) DeleteCertificate(arg0 any) *MockServerDeleteCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockServer)(nil).DeleteCertificate), arg0)
	return &MockServerDeleteCertificateCall{Call: call}
}

// MockServerDeleteCertificateCall wrap *gomock.Call
type MockServerDeleteCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerDeleteCertificateCall) Return(arg0 error) *MockServerDeleteCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerDeleteCertificateCall) Do(f func(string) error) *MockServerDeleteCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerDeleteCertificateCall) DoAndReturn(f func(string) error) *MockServerDeleteCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProfile mocks base method.
func (m *MockServer) DeleteProfile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockServerMockRecorder) DeleteProfile(arg0 any) *MockServerDeleteProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockServer)(nil).DeleteProfile), arg0)
	return &MockServerDeleteProfileCall{Call: call}
}

// MockServerDeleteProfileCall wrap *gomock.Call
type MockServerDeleteProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerDeleteProfileCall) Return(arg0 error) *MockServerDeleteProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerDeleteProfileCall) Do(f func(string) error) *MockServerDeleteProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerDeleteProfileCall) DoAndReturn(f func(string) error) *MockServerDeleteProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePoolVolume mocks base method.
func (m *MockServer) DeleteStoragePoolVolume(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolVolume indicates an expected call of DeleteStoragePoolVolume.
func (mr *MockServerMockRecorder) DeleteStoragePoolVolume(arg0, arg1, arg2 any) *MockServerDeleteStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolume", reflect.TypeOf((*MockServer)(nil).DeleteStoragePoolVolume), arg0, arg1, arg2)
	return &MockServerDeleteStoragePoolVolumeCall{Call: call}
}

// MockServerDeleteStoragePoolVolumeCall wrap *gomock.Call
type MockServerDeleteStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerDeleteStoragePoolVolumeCall) Return(arg0 error) *MockServerDeleteStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerDeleteStoragePoolVolumeCall) Do(f func(string, string, string) error) *MockServerDeleteStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerDeleteStoragePoolVolumeCall) DoAndReturn(f func(string, string, string) error) *MockServerDeleteStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableHTTPSListener mocks base method.
func (m *MockServer) EnableHTTPSListener() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableHTTPSListener")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableHTTPSListener indicates an expected call of EnableHTTPSListener.
func (mr *MockServerMockRecorder) EnableHTTPSListener() *MockServerEnableHTTPSListenerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableHTTPSListener", reflect.TypeOf((*MockServer)(nil).EnableHTTPSListener))
	return &MockServerEnableHTTPSListenerCall{Call: call}
}

// MockServerEnableHTTPSListenerCall wrap *gomock.Call
type MockServerEnableHTTPSListenerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerEnableHTTPSListenerCall) Return(arg0 error) *MockServerEnableHTTPSListenerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerEnableHTTPSListenerCall) Do(f func() error) *MockServerEnableHTTPSListenerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerEnableHTTPSListenerCall) DoAndReturn(f func() error) *MockServerEnableHTTPSListenerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureDefaultStorage mocks base method.
func (m *MockServer) EnsureDefaultStorage(arg0 *api.Profile, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDefaultStorage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDefaultStorage indicates an expected call of EnsureDefaultStorage.
func (mr *MockServerMockRecorder) EnsureDefaultStorage(arg0, arg1 any) *MockServerEnsureDefaultStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDefaultStorage", reflect.TypeOf((*MockServer)(nil).EnsureDefaultStorage), arg0, arg1)
	return &MockServerEnsureDefaultStorageCall{Call: call}
}

// MockServerEnsureDefaultStorageCall wrap *gomock.Call
type MockServerEnsureDefaultStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerEnsureDefaultStorageCall) Return(arg0 error) *MockServerEnsureDefaultStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerEnsureDefaultStorageCall) Do(f func(*api.Profile, string) error) *MockServerEnsureDefaultStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerEnsureDefaultStorageCall) DoAndReturn(f func(*api.Profile, string) error) *MockServerEnsureDefaultStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindImage mocks base method.
func (m *MockServer) FindImage(arg0 context.Context, arg1 base.Base, arg2 string, arg3 instance.VirtType, arg4 []lxd0.ServerSpec, arg5 bool, arg6 environs.StatusCallbackFunc) (lxd0.SourcedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindImage", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(lxd0.SourcedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindImage indicates an expected call of FindImage.
func (mr *MockServerMockRecorder) FindImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockServerFindImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindImage", reflect.TypeOf((*MockServer)(nil).FindImage), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockServerFindImageCall{Call: call}
}

// MockServerFindImageCall wrap *gomock.Call
type MockServerFindImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerFindImageCall) Return(arg0 lxd0.SourcedImage, arg1 error) *MockServerFindImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerFindImageCall) Do(f func(context.Context, base.Base, string, instance.VirtType, []lxd0.ServerSpec, bool, environs.StatusCallbackFunc) (lxd0.SourcedImage, error)) *MockServerFindImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerFindImageCall) DoAndReturn(f func(context.Context, base.Base, string, instance.VirtType, []lxd0.ServerSpec, bool, environs.StatusCallbackFunc) (lxd0.SourcedImage, error)) *MockServerFindImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCertificate mocks base method.
func (m *MockServer) GetCertificate(arg0 string) (*api.Certificate, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", arg0)
	ret0, _ := ret[0].(*api.Certificate)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockServerMockRecorder) GetCertificate(arg0 any) *MockServerGetCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockServer)(nil).GetCertificate), arg0)
	return &MockServerGetCertificateCall{Call: call}
}

// MockServerGetCertificateCall wrap *gomock.Call
type MockServerGetCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetCertificateCall) Return(arg0 *api.Certificate, arg1 string, arg2 error) *MockServerGetCertificateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetCertificateCall) Do(f func(string) (*api.Certificate, string, error)) *MockServerGetCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetCertificateCall) DoAndReturn(f func(string) (*api.Certificate, string, error)) *MockServerGetCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterMembers mocks base method.
func (m *MockServer) GetClusterMembers() ([]api.ClusterMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers")
	ret0, _ := ret[0].([]api.ClusterMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers.
func (mr *MockServerMockRecorder) GetClusterMembers() *MockServerGetClusterMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockServer)(nil).GetClusterMembers))
	return &MockServerGetClusterMembersCall{Call: call}
}

// MockServerGetClusterMembersCall wrap *gomock.Call
type MockServerGetClusterMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetClusterMembersCall) Return(arg0 []api.ClusterMember, arg1 error) *MockServerGetClusterMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetClusterMembersCall) Do(f func() ([]api.ClusterMember, error)) *MockServerGetClusterMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetClusterMembersCall) DoAndReturn(f func() ([]api.ClusterMember, error)) *MockServerGetClusterMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConnectionInfo mocks base method.
func (m *MockServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockServerMockRecorder) GetConnectionInfo() *MockServerGetConnectionInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockServer)(nil).GetConnectionInfo))
	return &MockServerGetConnectionInfoCall{Call: call}
}

// MockServerGetConnectionInfoCall wrap *gomock.Call
type MockServerGetConnectionInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetConnectionInfoCall) Return(arg0 *lxd.ConnectionInfo, arg1 error) *MockServerGetConnectionInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetConnectionInfoCall) Do(f func() (*lxd.ConnectionInfo, error)) *MockServerGetConnectionInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetConnectionInfoCall) DoAndReturn(f func() (*lxd.ConnectionInfo, error)) *MockServerGetConnectionInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerProfiles mocks base method.
func (m *MockServer) GetContainerProfiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerProfiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerProfiles indicates an expected call of GetContainerProfiles.
func (mr *MockServerMockRecorder) GetContainerProfiles(arg0 any) *MockServerGetContainerProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerProfiles", reflect.TypeOf((*MockServer)(nil).GetContainerProfiles), arg0)
	return &MockServerGetContainerProfilesCall{Call: call}
}

// MockServerGetContainerProfilesCall wrap *gomock.Call
type MockServerGetContainerProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetContainerProfilesCall) Return(arg0 []string, arg1 error) *MockServerGetContainerProfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetContainerProfilesCall) Do(f func(string) ([]string, error)) *MockServerGetContainerProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetContainerProfilesCall) DoAndReturn(f func(string) ([]string, error)) *MockServerGetContainerProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstance mocks base method.
func (m *MockServer) GetInstance(arg0 string) (*api.Instance, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(*api.Instance)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockServerMockRecorder) GetInstance(arg0 any) *MockServerGetInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockServer)(nil).GetInstance), arg0)
	return &MockServerGetInstanceCall{Call: call}
}

// MockServerGetInstanceCall wrap *gomock.Call
type MockServerGetInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetInstanceCall) Return(arg0 *api.Instance, arg1 string, arg2 error) *MockServerGetInstanceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetInstanceCall) Do(f func(string) (*api.Instance, string, error)) *MockServerGetInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetInstanceCall) DoAndReturn(f func(string) (*api.Instance, string, error)) *MockServerGetInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceState mocks base method.
func (m *MockServer) GetInstanceState(arg0 string) (*api.InstanceState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceState", arg0)
	ret0, _ := ret[0].(*api.InstanceState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceState indicates an expected call of GetInstanceState.
func (mr *MockServerMockRecorder) GetInstanceState(arg0 any) *MockServerGetInstanceStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockServer)(nil).GetInstanceState), arg0)
	return &MockServerGetInstanceStateCall{Call: call}
}

// MockServerGetInstanceStateCall wrap *gomock.Call
type MockServerGetInstanceStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetInstanceStateCall) Return(arg0 *api.InstanceState, arg1 string, arg2 error) *MockServerGetInstanceStateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetInstanceStateCall) Do(f func(string) (*api.InstanceState, string, error)) *MockServerGetInstanceStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetInstanceStateCall) DoAndReturn(f func(string) (*api.InstanceState, string, error)) *MockServerGetInstanceStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNICsFromProfile mocks base method.
func (m *MockServer) GetNICsFromProfile(arg0 string) (map[string]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNICsFromProfile", arg0)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNICsFromProfile indicates an expected call of GetNICsFromProfile.
func (mr *MockServerMockRecorder) GetNICsFromProfile(arg0 any) *MockServerGetNICsFromProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNICsFromProfile", reflect.TypeOf((*MockServer)(nil).GetNICsFromProfile), arg0)
	return &MockServerGetNICsFromProfileCall{Call: call}
}

// MockServerGetNICsFromProfileCall wrap *gomock.Call
type MockServerGetNICsFromProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetNICsFromProfileCall) Return(arg0 map[string]map[string]string, arg1 error) *MockServerGetNICsFromProfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetNICsFromProfileCall) Do(f func(string) (map[string]map[string]string, error)) *MockServerGetNICsFromProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetNICsFromProfileCall) DoAndReturn(f func(string) (map[string]map[string]string, error)) *MockServerGetNICsFromProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkState mocks base method.
func (m *MockServer) GetNetworkState(arg0 string) (*api.NetworkState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkState", arg0)
	ret0, _ := ret[0].(*api.NetworkState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkState indicates an expected call of GetNetworkState.
func (mr *MockServerMockRecorder) GetNetworkState(arg0 any) *MockServerGetNetworkStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkState", reflect.TypeOf((*MockServer)(nil).GetNetworkState), arg0)
	return &MockServerGetNetworkStateCall{Call: call}
}

// MockServerGetNetworkStateCall wrap *gomock.Call
type MockServerGetNetworkStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetNetworkStateCall) Return(arg0 *api.NetworkState, arg1 error) *MockServerGetNetworkStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetNetworkStateCall) Do(f func(string) (*api.NetworkState, error)) *MockServerGetNetworkStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetNetworkStateCall) DoAndReturn(f func(string) (*api.NetworkState, error)) *MockServerGetNetworkStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworks mocks base method.
func (m *MockServer) GetNetworks() ([]api.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks")
	ret0, _ := ret[0].([]api.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks.
func (mr *MockServerMockRecorder) GetNetworks() *MockServerGetNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockServer)(nil).GetNetworks))
	return &MockServerGetNetworksCall{Call: call}
}

// MockServerGetNetworksCall wrap *gomock.Call
type MockServerGetNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetNetworksCall) Return(arg0 []api.Network, arg1 error) *MockServerGetNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetNetworksCall) Do(f func() ([]api.Network, error)) *MockServerGetNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetNetworksCall) DoAndReturn(f func() ([]api.Network, error)) *MockServerGetNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProfile mocks base method.
func (m *MockServer) GetProfile(arg0 string) (*api.Profile, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*api.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockServerMockRecorder) GetProfile(arg0 any) *MockServerGetProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockServer)(nil).GetProfile), arg0)
	return &MockServerGetProfileCall{Call: call}
}

// MockServerGetProfileCall wrap *gomock.Call
type MockServerGetProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetProfileCall) Return(arg0 *api.Profile, arg1 string, arg2 error) *MockServerGetProfileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetProfileCall) Do(f func(string) (*api.Profile, string, error)) *MockServerGetProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetProfileCall) DoAndReturn(f func(string) (*api.Profile, string, error)) *MockServerGetProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProfileNames mocks base method.
func (m *MockServer) GetProfileNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNames indicates an expected call of GetProfileNames.
func (mr *MockServerMockRecorder) GetProfileNames() *MockServerGetProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNames", reflect.TypeOf((*MockServer)(nil).GetProfileNames))
	return &MockServerGetProfileNamesCall{Call: call}
}

// MockServerGetProfileNamesCall wrap *gomock.Call
type MockServerGetProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetProfileNamesCall) Return(arg0 []string, arg1 error) *MockServerGetProfileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetProfileNamesCall) Do(f func() ([]string, error)) *MockServerGetProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetProfileNamesCall) DoAndReturn(f func() ([]string, error)) *MockServerGetProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetServer mocks base method.
func (m *MockServer) GetServer() (*api.Server, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*api.Server)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServer indicates an expected call of GetServer.
func (mr *MockServerMockRecorder) GetServer() *MockServerGetServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockServer)(nil).GetServer))
	return &MockServerGetServerCall{Call: call}
}

// MockServerGetServerCall wrap *gomock.Call
type MockServerGetServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetServerCall) Return(arg0 *api.Server, arg1 string, arg2 error) *MockServerGetServerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetServerCall) Do(f func() (*api.Server, string, error)) *MockServerGetServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetServerCall) DoAndReturn(f func() (*api.Server, string, error)) *MockServerGetServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePool mocks base method.
func (m *MockServer) GetStoragePool(arg0 string) (*api.StoragePool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", arg0)
	ret0, _ := ret[0].(*api.StoragePool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePool indicates an expected call of GetStoragePool.
func (mr *MockServerMockRecorder) GetStoragePool(arg0 any) *MockServerGetStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockServer)(nil).GetStoragePool), arg0)
	return &MockServerGetStoragePoolCall{Call: call}
}

// MockServerGetStoragePoolCall wrap *gomock.Call
type MockServerGetStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetStoragePoolCall) Return(arg0 *api.StoragePool, arg1 string, arg2 error) *MockServerGetStoragePoolCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetStoragePoolCall) Do(f func(string) (*api.StoragePool, string, error)) *MockServerGetStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetStoragePoolCall) DoAndReturn(f func(string) (*api.StoragePool, string, error)) *MockServerGetStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolume mocks base method.
func (m *MockServer) GetStoragePoolVolume(arg0, arg1, arg2 string) (*api.StorageVolume, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageVolume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolume indicates an expected call of GetStoragePoolVolume.
func (mr *MockServerMockRecorder) GetStoragePoolVolume(arg0, arg1, arg2 any) *MockServerGetStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolume", reflect.TypeOf((*MockServer)(nil).GetStoragePoolVolume), arg0, arg1, arg2)
	return &MockServerGetStoragePoolVolumeCall{Call: call}
}

// MockServerGetStoragePoolVolumeCall wrap *gomock.Call
type MockServerGetStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetStoragePoolVolumeCall) Return(arg0 *api.StorageVolume, arg1 string, arg2 error) *MockServerGetStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetStoragePoolVolumeCall) Do(f func(string, string, string) (*api.StorageVolume, string, error)) *MockServerGetStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetStoragePoolVolumeCall) DoAndReturn(f func(string, string, string) (*api.StorageVolume, string, error)) *MockServerGetStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumes mocks base method.
func (m *MockServer) GetStoragePoolVolumes(arg0 string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumes", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumes indicates an expected call of GetStoragePoolVolumes.
func (mr *MockServerMockRecorder) GetStoragePoolVolumes(arg0 any) *MockServerGetStoragePoolVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumes", reflect.TypeOf((*MockServer)(nil).GetStoragePoolVolumes), arg0)
	return &MockServerGetStoragePoolVolumesCall{Call: call}
}

// MockServerGetStoragePoolVolumesCall wrap *gomock.Call
type MockServerGetStoragePoolVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetStoragePoolVolumesCall) Return(arg0 []api.StorageVolume, arg1 error) *MockServerGetStoragePoolVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetStoragePoolVolumesCall) Do(f func(string) ([]api.StorageVolume, error)) *MockServerGetStoragePoolVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetStoragePoolVolumesCall) DoAndReturn(f func(string) ([]api.StorageVolume, error)) *MockServerGetStoragePoolVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePools mocks base method.
func (m *MockServer) GetStoragePools() ([]api.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePools")
	ret0, _ := ret[0].([]api.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePools indicates an expected call of GetStoragePools.
func (mr *MockServerMockRecorder) GetStoragePools() *MockServerGetStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePools", reflect.TypeOf((*MockServer)(nil).GetStoragePools))
	return &MockServerGetStoragePoolsCall{Call: call}
}

// MockServerGetStoragePoolsCall wrap *gomock.Call
type MockServerGetStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetStoragePoolsCall) Return(arg0 []api.StoragePool, arg1 error) *MockServerGetStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetStoragePoolsCall) Do(f func() ([]api.StoragePool, error)) *MockServerGetStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetStoragePoolsCall) DoAndReturn(f func() ([]api.StoragePool, error)) *MockServerGetStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasExtension mocks base method.
func (m *MockServer) HasExtension(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExtension", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExtension indicates an expected call of HasExtension.
func (mr *MockServerMockRecorder) HasExtension(arg0 any) *MockServerHasExtensionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExtension", reflect.TypeOf((*MockServer)(nil).HasExtension), arg0)
	return &MockServerHasExtensionCall{Call: call}
}

// MockServerHasExtensionCall wrap *gomock.Call
type MockServerHasExtensionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerHasExtensionCall) Return(arg0 bool) *MockServerHasExtensionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerHasExtensionCall) Do(f func(string) bool) *MockServerHasExtensionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerHasExtensionCall) DoAndReturn(f func(string) bool) *MockServerHasExtensionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasProfile mocks base method.
func (m *MockServer) HasProfile(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProfile", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasProfile indicates an expected call of HasProfile.
func (mr *MockServerMockRecorder) HasProfile(arg0 any) *MockServerHasProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProfile", reflect.TypeOf((*MockServer)(nil).HasProfile), arg0)
	return &MockServerHasProfileCall{Call: call}
}

// MockServerHasProfileCall wrap *gomock.Call
type MockServerHasProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerHasProfileCall) Return(arg0 bool, arg1 error) *MockServerHasProfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerHasProfileCall) Do(f func(string) (bool, error)) *MockServerHasProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerHasProfileCall) DoAndReturn(f func(string) (bool, error)) *MockServerHasProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HostArch mocks base method.
func (m *MockServer) HostArch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostArch")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostArch indicates an expected call of HostArch.
func (mr *MockServerMockRecorder) HostArch() *MockServerHostArchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostArch", reflect.TypeOf((*MockServer)(nil).HostArch))
	return &MockServerHostArchCall{Call: call}
}

// MockServerHostArchCall wrap *gomock.Call
type MockServerHostArchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerHostArchCall) Return(arg0 string) *MockServerHostArchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerHostArchCall) Do(f func() string) *MockServerHostArchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerHostArchCall) DoAndReturn(f func() string) *MockServerHostArchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsClustered mocks base method.
func (m *MockServer) IsClustered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClustered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClustered indicates an expected call of IsClustered.
func (mr *MockServerMockRecorder) IsClustered() *MockServerIsClusteredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClustered", reflect.TypeOf((*MockServer)(nil).IsClustered))
	return &MockServerIsClusteredCall{Call: call}
}

// MockServerIsClusteredCall wrap *gomock.Call
type MockServerIsClusteredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerIsClusteredCall) Return(arg0 bool) *MockServerIsClusteredCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerIsClusteredCall) Do(f func() bool) *MockServerIsClusteredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerIsClusteredCall) DoAndReturn(f func() bool) *MockServerIsClusteredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocalBridgeName mocks base method.
func (m *MockServer) LocalBridgeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalBridgeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// LocalBridgeName indicates an expected call of LocalBridgeName.
func (mr *MockServerMockRecorder) LocalBridgeName() *MockServerLocalBridgeNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalBridgeName", reflect.TypeOf((*MockServer)(nil).LocalBridgeName))
	return &MockServerLocalBridgeNameCall{Call: call}
}

// MockServerLocalBridgeNameCall wrap *gomock.Call
type MockServerLocalBridgeNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerLocalBridgeNameCall) Return(arg0 string) *MockServerLocalBridgeNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerLocalBridgeNameCall) Do(f func() string) *MockServerLocalBridgeNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerLocalBridgeNameCall) DoAndReturn(f func() string) *MockServerLocalBridgeNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockServer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServerMockRecorder) Name() *MockServerNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServer)(nil).Name))
	return &MockServerNameCall{Call: call}
}

// MockServerNameCall wrap *gomock.Call
type MockServerNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerNameCall) Return(arg0 string) *MockServerNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerNameCall) Do(f func() string) *MockServerNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerNameCall) DoAndReturn(f func() string) *MockServerNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveContainer mocks base method.
func (m *MockServer) RemoveContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockServerMockRecorder) RemoveContainer(arg0 any) *MockServerRemoveContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockServer)(nil).RemoveContainer), arg0)
	return &MockServerRemoveContainerCall{Call: call}
}

// MockServerRemoveContainerCall wrap *gomock.Call
type MockServerRemoveContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerRemoveContainerCall) Return(arg0 error) *MockServerRemoveContainerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerRemoveContainerCall) Do(f func(string) error) *MockServerRemoveContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerRemoveContainerCall) DoAndReturn(f func(string) error) *MockServerRemoveContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveContainers mocks base method.
func (m *MockServer) RemoveContainers(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainers indicates an expected call of RemoveContainers.
func (mr *MockServerMockRecorder) RemoveContainers(arg0 any) *MockServerRemoveContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainers", reflect.TypeOf((*MockServer)(nil).RemoveContainers), arg0)
	return &MockServerRemoveContainersCall{Call: call}
}

// MockServerRemoveContainersCall wrap *gomock.Call
type MockServerRemoveContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerRemoveContainersCall) Return(arg0 error) *MockServerRemoveContainersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerRemoveContainersCall) Do(f func([]string) error) *MockServerRemoveContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerRemoveContainersCall) DoAndReturn(f func([]string) error) *MockServerRemoveContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplaceOrAddContainerProfile mocks base method.
func (m *MockServer) ReplaceOrAddContainerProfile(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOrAddContainerProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceOrAddContainerProfile indicates an expected call of ReplaceOrAddContainerProfile.
func (mr *MockServerMockRecorder) ReplaceOrAddContainerProfile(arg0, arg1, arg2 any) *MockServerReplaceOrAddContainerProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOrAddContainerProfile", reflect.TypeOf((*MockServer)(nil).ReplaceOrAddContainerProfile), arg0, arg1, arg2)
	return &MockServerReplaceOrAddContainerProfileCall{Call: call}
}

// MockServerReplaceOrAddContainerProfileCall wrap *gomock.Call
type MockServerReplaceOrAddContainerProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerReplaceOrAddContainerProfileCall) Return(arg0 error) *MockServerReplaceOrAddContainerProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerReplaceOrAddContainerProfileCall) Do(f func(string, string, string) error) *MockServerReplaceOrAddContainerProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerReplaceOrAddContainerProfileCall) DoAndReturn(f func(string, string, string) error) *MockServerReplaceOrAddContainerProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerCertificate mocks base method.
func (m *MockServer) ServerCertificate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerCertificate")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerCertificate indicates an expected call of ServerCertificate.
func (mr *MockServerMockRecorder) ServerCertificate() *MockServerServerCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerCertificate", reflect.TypeOf((*MockServer)(nil).ServerCertificate))
	return &MockServerServerCertificateCall{Call: call}
}

// MockServerServerCertificateCall wrap *gomock.Call
type MockServerServerCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerServerCertificateCall) Return(arg0 string) *MockServerServerCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerServerCertificateCall) Do(f func() string) *MockServerServerCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerServerCertificateCall) DoAndReturn(f func() string) *MockServerServerCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerVersion mocks base method.
func (m *MockServer) ServerVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockServerMockRecorder) ServerVersion() *MockServerServerVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockServer)(nil).ServerVersion))
	return &MockServerServerVersionCall{Call: call}
}

// MockServerServerVersionCall wrap *gomock.Call
type MockServerServerVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerServerVersionCall) Return(arg0 string) *MockServerServerVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerServerVersionCall) Do(f func() string) *MockServerServerVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerServerVersionCall) DoAndReturn(f func() string) *MockServerServerVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageSupported mocks base method.
func (m *MockServer) StorageSupported() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageSupported")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StorageSupported indicates an expected call of StorageSupported.
func (mr *MockServerMockRecorder) StorageSupported() *MockServerStorageSupportedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageSupported", reflect.TypeOf((*MockServer)(nil).StorageSupported))
	return &MockServerStorageSupportedCall{Call: call}
}

// MockServerStorageSupportedCall wrap *gomock.Call
type MockServerStorageSupportedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerStorageSupportedCall) Return(arg0 bool) *MockServerStorageSupportedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerStorageSupportedCall) Do(f func() bool) *MockServerStorageSupportedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerStorageSupportedCall) DoAndReturn(f func() bool) *MockServerStorageSupportedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportedArches mocks base method.
func (m *MockServer) SupportedArches() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedArches")
	ret0, _ := ret[0].([]string)
	return ret0
}

// SupportedArches indicates an expected call of SupportedArches.
func (mr *MockServerMockRecorder) SupportedArches() *MockServerSupportedArchesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedArches", reflect.TypeOf((*MockServer)(nil).SupportedArches))
	return &MockServerSupportedArchesCall{Call: call}
}

// MockServerSupportedArchesCall wrap *gomock.Call
type MockServerSupportedArchesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerSupportedArchesCall) Return(arg0 []string) *MockServerSupportedArchesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerSupportedArchesCall) Do(f func() []string) *MockServerSupportedArchesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerSupportedArchesCall) DoAndReturn(f func() []string) *MockServerSupportedArchesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContainerConfig mocks base method.
func (m *MockServer) UpdateContainerConfig(arg0 string, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerConfig indicates an expected call of UpdateContainerConfig.
func (mr *MockServerMockRecorder) UpdateContainerConfig(arg0, arg1 any) *MockServerUpdateContainerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerConfig", reflect.TypeOf((*MockServer)(nil).UpdateContainerConfig), arg0, arg1)
	return &MockServerUpdateContainerConfigCall{Call: call}
}

// MockServerUpdateContainerConfigCall wrap *gomock.Call
type MockServerUpdateContainerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerUpdateContainerConfigCall) Return(arg0 error) *MockServerUpdateContainerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerUpdateContainerConfigCall) Do(f func(string, map[string]string) error) *MockServerUpdateContainerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerUpdateContainerConfigCall) DoAndReturn(f func(string, map[string]string) error) *MockServerUpdateContainerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContainerProfiles mocks base method.
func (m *MockServer) UpdateContainerProfiles(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerProfiles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerProfiles indicates an expected call of UpdateContainerProfiles.
func (mr *MockServerMockRecorder) UpdateContainerProfiles(arg0, arg1 any) *MockServerUpdateContainerProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerProfiles", reflect.TypeOf((*MockServer)(nil).UpdateContainerProfiles), arg0, arg1)
	return &MockServerUpdateContainerProfilesCall{Call: call}
}

// MockServerUpdateContainerProfilesCall wrap *gomock.Call
type MockServerUpdateContainerProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerUpdateContainerProfilesCall) Return(arg0 error) *MockServerUpdateContainerProfilesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerUpdateContainerProfilesCall) Do(f func(string, []string) error) *MockServerUpdateContainerProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerUpdateContainerProfilesCall) DoAndReturn(f func(string, []string) error) *MockServerUpdateContainerProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateServerConfig mocks base method.
func (m *MockServer) UpdateServerConfig(arg0 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServerConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServerConfig indicates an expected call of UpdateServerConfig.
func (mr *MockServerMockRecorder) UpdateServerConfig(arg0 any) *MockServerUpdateServerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServerConfig", reflect.TypeOf((*MockServer)(nil).UpdateServerConfig), arg0)
	return &MockServerUpdateServerConfigCall{Call: call}
}

// MockServerUpdateServerConfigCall wrap *gomock.Call
type MockServerUpdateServerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerUpdateServerConfigCall) Return(arg0 error) *MockServerUpdateServerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerUpdateServerConfigCall) Do(f func(map[string]string) error) *MockServerUpdateServerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerUpdateServerConfigCall) DoAndReturn(f func(map[string]string) error) *MockServerUpdateServerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStoragePoolVolume mocks base method.
func (m *MockServer) UpdateStoragePoolVolume(arg0, arg1, arg2 string, arg3 api.StorageVolumePut, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolume indicates an expected call of UpdateStoragePoolVolume.
func (mr *MockServerMockRecorder) UpdateStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 any) *MockServerUpdateStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolume", reflect.TypeOf((*MockServer)(nil).UpdateStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
	return &MockServerUpdateStoragePoolVolumeCall{Call: call}
}

// MockServerUpdateStoragePoolVolumeCall wrap *gomock.Call
type MockServerUpdateStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerUpdateStoragePoolVolumeCall) Return(arg0 error) *MockServerUpdateStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerUpdateStoragePoolVolumeCall) Do(f func(string, string, string, api.StorageVolumePut, string) error) *MockServerUpdateStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerUpdateStoragePoolVolumeCall) DoAndReturn(f func(string, string, string, api.StorageVolumePut, string) error) *MockServerUpdateStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UseProject mocks base method.
func (m *MockServer) UseProject(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseProject", arg0)
}

// UseProject indicates an expected call of UseProject.
func (mr *MockServerMockRecorder) UseProject(arg0 any) *MockServerUseProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseProject", reflect.TypeOf((*MockServer)(nil).UseProject), arg0)
	return &MockServerUseProjectCall{Call: call}
}

// MockServerUseProjectCall wrap *gomock.Call
type MockServerUseProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerUseProjectCall) Return() *MockServerUseProjectCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerUseProjectCall) Do(f func(string)) *MockServerUseProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerUseProjectCall) DoAndReturn(f func(string)) *MockServerUseProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UseTargetServer mocks base method.
func (m *MockServer) UseTargetServer(arg0 context.Context, arg1 string) (*lxd0.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTargetServer", arg0, arg1)
	ret0, _ := ret[0].(*lxd0.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseTargetServer indicates an expected call of UseTargetServer.
func (mr *MockServerMockRecorder) UseTargetServer(arg0, arg1 any) *MockServerUseTargetServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTargetServer", reflect.TypeOf((*MockServer)(nil).UseTargetServer), arg0, arg1)
	return &MockServerUseTargetServerCall{Call: call}
}

// MockServerUseTargetServerCall wrap *gomock.Call
type MockServerUseTargetServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerUseTargetServerCall) Return(arg0 *lxd0.Server, arg1 error) *MockServerUseTargetServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerUseTargetServerCall) Do(f func(context.Context, string) (*lxd0.Server, error)) *MockServerUseTargetServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerUseTargetServerCall) DoAndReturn(f func(context.Context, string) (*lxd0.Server, error)) *MockServerUseTargetServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VerifyNetworkDevice mocks base method.
func (m *MockServer) VerifyNetworkDevice(arg0 *api.Profile, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyNetworkDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyNetworkDevice indicates an expected call of VerifyNetworkDevice.
func (mr *MockServerMockRecorder) VerifyNetworkDevice(arg0, arg1 any) *MockServerVerifyNetworkDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyNetworkDevice", reflect.TypeOf((*MockServer)(nil).VerifyNetworkDevice), arg0, arg1)
	return &MockServerVerifyNetworkDeviceCall{Call: call}
}

// MockServerVerifyNetworkDeviceCall wrap *gomock.Call
type MockServerVerifyNetworkDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerVerifyNetworkDeviceCall) Return(arg0 error) *MockServerVerifyNetworkDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerVerifyNetworkDeviceCall) Do(f func(*api.Profile, string) error) *MockServerVerifyNetworkDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerVerifyNetworkDeviceCall) DoAndReturn(f func(*api.Profile, string) error) *MockServerVerifyNetworkDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteContainer mocks base method.
func (m *MockServer) WriteContainer(arg0 *lxd0.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteContainer indicates an expected call of WriteContainer.
func (mr *MockServerMockRecorder) WriteContainer(arg0 any) *MockServerWriteContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteContainer", reflect.TypeOf((*MockServer)(nil).WriteContainer), arg0)
	return &MockServerWriteContainerCall{Call: call}
}

// MockServerWriteContainerCall wrap *gomock.Call
type MockServerWriteContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerWriteContainerCall) Return(arg0 error) *MockServerWriteContainerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerWriteContainerCall) Do(f func(*lxd0.Container) error) *MockServerWriteContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerWriteContainerCall) DoAndReturn(f func(*lxd0.Container) error) *MockServerWriteContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServerFactory is a mock of ServerFactory interface.
type MockServerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServerFactoryMockRecorder
}

// MockServerFactoryMockRecorder is the mock recorder for MockServerFactory.
type MockServerFactoryMockRecorder struct {
	mock *MockServerFactory
}

// NewMockServerFactory creates a new mock instance.
func NewMockServerFactory(ctrl *gomock.Controller) *MockServerFactory {
	mock := &MockServerFactory{ctrl: ctrl}
	mock.recorder = &MockServerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerFactory) EXPECT() *MockServerFactoryMockRecorder {
	return m.recorder
}

// InsecureRemoteServer mocks base method.
func (m *MockServerFactory) InsecureRemoteServer(arg0 CloudSpec) (Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsecureRemoteServer", arg0)
	ret0, _ := ret[0].(Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsecureRemoteServer indicates an expected call of InsecureRemoteServer.
func (mr *MockServerFactoryMockRecorder) InsecureRemoteServer(arg0 any) *MockServerFactoryInsecureRemoteServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsecureRemoteServer", reflect.TypeOf((*MockServerFactory)(nil).InsecureRemoteServer), arg0)
	return &MockServerFactoryInsecureRemoteServerCall{Call: call}
}

// MockServerFactoryInsecureRemoteServerCall wrap *gomock.Call
type MockServerFactoryInsecureRemoteServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerFactoryInsecureRemoteServerCall) Return(arg0 Server, arg1 error) *MockServerFactoryInsecureRemoteServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerFactoryInsecureRemoteServerCall) Do(f func(CloudSpec) (Server, error)) *MockServerFactoryInsecureRemoteServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerFactoryInsecureRemoteServerCall) DoAndReturn(f func(CloudSpec) (Server, error)) *MockServerFactoryInsecureRemoteServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocalServer mocks base method.
func (m *MockServerFactory) LocalServer() (Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalServer")
	ret0, _ := ret[0].(Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalServer indicates an expected call of LocalServer.
func (mr *MockServerFactoryMockRecorder) LocalServer() *MockServerFactoryLocalServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalServer", reflect.TypeOf((*MockServerFactory)(nil).LocalServer))
	return &MockServerFactoryLocalServerCall{Call: call}
}

// MockServerFactoryLocalServerCall wrap *gomock.Call
type MockServerFactoryLocalServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerFactoryLocalServerCall) Return(arg0 Server, arg1 error) *MockServerFactoryLocalServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerFactoryLocalServerCall) Do(f func() (Server, error)) *MockServerFactoryLocalServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerFactoryLocalServerCall) DoAndReturn(f func() (Server, error)) *MockServerFactoryLocalServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LocalServerAddress mocks base method.
func (m *MockServerFactory) LocalServerAddress() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalServerAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalServerAddress indicates an expected call of LocalServerAddress.
func (mr *MockServerFactoryMockRecorder) LocalServerAddress() *MockServerFactoryLocalServerAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalServerAddress", reflect.TypeOf((*MockServerFactory)(nil).LocalServerAddress))
	return &MockServerFactoryLocalServerAddressCall{Call: call}
}

// MockServerFactoryLocalServerAddressCall wrap *gomock.Call
type MockServerFactoryLocalServerAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerFactoryLocalServerAddressCall) Return(arg0 string, arg1 error) *MockServerFactoryLocalServerAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerFactoryLocalServerAddressCall) Do(f func() (string, error)) *MockServerFactoryLocalServerAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerFactoryLocalServerAddressCall) DoAndReturn(f func() (string, error)) *MockServerFactoryLocalServerAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteServer mocks base method.
func (m *MockServerFactory) RemoteServer(arg0 CloudSpec) (Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteServer", arg0)
	ret0, _ := ret[0].(Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteServer indicates an expected call of RemoteServer.
func (mr *MockServerFactoryMockRecorder) RemoteServer(arg0 any) *MockServerFactoryRemoteServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteServer", reflect.TypeOf((*MockServerFactory)(nil).RemoteServer), arg0)
	return &MockServerFactoryRemoteServerCall{Call: call}
}

// MockServerFactoryRemoteServerCall wrap *gomock.Call
type MockServerFactoryRemoteServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerFactoryRemoteServerCall) Return(arg0 Server, arg1 error) *MockServerFactoryRemoteServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerFactoryRemoteServerCall) Do(f func(CloudSpec) (Server, error)) *MockServerFactoryRemoteServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerFactoryRemoteServerCall) DoAndReturn(f func(CloudSpec) (Server, error)) *MockServerFactoryRemoteServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInterfaceAddress is a mock of InterfaceAddress interface.
type MockInterfaceAddress struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceAddressMockRecorder
}

// MockInterfaceAddressMockRecorder is the mock recorder for MockInterfaceAddress.
type MockInterfaceAddressMockRecorder struct {
	mock *MockInterfaceAddress
}

// NewMockInterfaceAddress creates a new mock instance.
func NewMockInterfaceAddress(ctrl *gomock.Controller) *MockInterfaceAddress {
	mock := &MockInterfaceAddress{ctrl: ctrl}
	mock.recorder = &MockInterfaceAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceAddress) EXPECT() *MockInterfaceAddressMockRecorder {
	return m.recorder
}

// InterfaceAddress mocks base method.
func (m *MockInterfaceAddress) InterfaceAddress(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterfaceAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceAddress indicates an expected call of InterfaceAddress.
func (mr *MockInterfaceAddressMockRecorder) InterfaceAddress(arg0 any) *MockInterfaceAddressInterfaceAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceAddress", reflect.TypeOf((*MockInterfaceAddress)(nil).InterfaceAddress), arg0)
	return &MockInterfaceAddressInterfaceAddressCall{Call: call}
}

// MockInterfaceAddressInterfaceAddressCall wrap *gomock.Call
type MockInterfaceAddressInterfaceAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceAddressInterfaceAddressCall) Return(arg0 string, arg1 error) *MockInterfaceAddressInterfaceAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceAddressInterfaceAddressCall) Do(f func(string) (string, error)) *MockInterfaceAddressInterfaceAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceAddressInterfaceAddressCall) DoAndReturn(f func(string) (string, error)) *MockInterfaceAddressInterfaceAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCertificateReadWriter is a mock of CertificateReadWriter interface.
type MockCertificateReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateReadWriterMockRecorder
}

// MockCertificateReadWriterMockRecorder is the mock recorder for MockCertificateReadWriter.
type MockCertificateReadWriterMockRecorder struct {
	mock *MockCertificateReadWriter
}

// NewMockCertificateReadWriter creates a new mock instance.
func NewMockCertificateReadWriter(ctrl *gomock.Controller) *MockCertificateReadWriter {
	mock := &MockCertificateReadWriter{ctrl: ctrl}
	mock.recorder = &MockCertificateReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateReadWriter) EXPECT() *MockCertificateReadWriterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCertificateReadWriter) Read(arg0 string) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockCertificateReadWriterMockRecorder) Read(arg0 any) *MockCertificateReadWriterReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCertificateReadWriter)(nil).Read), arg0)
	return &MockCertificateReadWriterReadCall{Call: call}
}

// MockCertificateReadWriterReadCall wrap *gomock.Call
type MockCertificateReadWriterReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCertificateReadWriterReadCall) Return(arg0, arg1 []byte, arg2 error) *MockCertificateReadWriterReadCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCertificateReadWriterReadCall) Do(f func(string) ([]byte, []byte, error)) *MockCertificateReadWriterReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCertificateReadWriterReadCall) DoAndReturn(f func(string) ([]byte, []byte, error)) *MockCertificateReadWriterReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockCertificateReadWriter) Write(arg0 string, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCertificateReadWriterMockRecorder) Write(arg0, arg1, arg2 any) *MockCertificateReadWriterWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCertificateReadWriter)(nil).Write), arg0, arg1, arg2)
	return &MockCertificateReadWriterWriteCall{Call: call}
}

// MockCertificateReadWriterWriteCall wrap *gomock.Call
type MockCertificateReadWriterWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCertificateReadWriterWriteCall) Return(arg0 error) *MockCertificateReadWriterWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCertificateReadWriterWriteCall) Do(f func(string, []byte, []byte) error) *MockCertificateReadWriterWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCertificateReadWriterWriteCall) DoAndReturn(f func(string, []byte, []byte) error) *MockCertificateReadWriterWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCertificateGenerator is a mock of CertificateGenerator interface.
type MockCertificateGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateGeneratorMockRecorder
}

// MockCertificateGeneratorMockRecorder is the mock recorder for MockCertificateGenerator.
type MockCertificateGeneratorMockRecorder struct {
	mock *MockCertificateGenerator
}

// NewMockCertificateGenerator creates a new mock instance.
func NewMockCertificateGenerator(ctrl *gomock.Controller) *MockCertificateGenerator {
	mock := &MockCertificateGenerator{ctrl: ctrl}
	mock.recorder = &MockCertificateGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateGenerator) EXPECT() *MockCertificateGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockCertificateGenerator) Generate(arg0, arg1 bool) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Generate indicates an expected call of Generate.
func (mr *MockCertificateGeneratorMockRecorder) Generate(arg0, arg1 any) *MockCertificateGeneratorGenerateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCertificateGenerator)(nil).Generate), arg0, arg1)
	return &MockCertificateGeneratorGenerateCall{Call: call}
}

// MockCertificateGeneratorGenerateCall wrap *gomock.Call
type MockCertificateGeneratorGenerateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCertificateGeneratorGenerateCall) Return(arg0, arg1 []byte, arg2 error) *MockCertificateGeneratorGenerateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCertificateGeneratorGenerateCall) Do(f func(bool, bool) ([]byte, []byte, error)) *MockCertificateGeneratorGenerateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCertificateGeneratorGenerateCall) DoAndReturn(f func(bool, bool) ([]byte, []byte, error)) *MockCertificateGeneratorGenerateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLXCConfigReader is a mock of LXCConfigReader interface.
type MockLXCConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockLXCConfigReaderMockRecorder
}

// MockLXCConfigReaderMockRecorder is the mock recorder for MockLXCConfigReader.
type MockLXCConfigReaderMockRecorder struct {
	mock *MockLXCConfigReader
}

// NewMockLXCConfigReader creates a new mock instance.
func NewMockLXCConfigReader(ctrl *gomock.Controller) *MockLXCConfigReader {
	mock := &MockLXCConfigReader{ctrl: ctrl}
	mock.recorder = &MockLXCConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLXCConfigReader) EXPECT() *MockLXCConfigReaderMockRecorder {
	return m.recorder
}

// ReadCert mocks base method.
func (m *MockLXCConfigReader) ReadCert(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCert", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCert indicates an expected call of ReadCert.
func (mr *MockLXCConfigReaderMockRecorder) ReadCert(arg0 any) *MockLXCConfigReaderReadCertCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCert", reflect.TypeOf((*MockLXCConfigReader)(nil).ReadCert), arg0)
	return &MockLXCConfigReaderReadCertCall{Call: call}
}

// MockLXCConfigReaderReadCertCall wrap *gomock.Call
type MockLXCConfigReaderReadCertCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLXCConfigReaderReadCertCall) Return(arg0 []byte, arg1 error) *MockLXCConfigReaderReadCertCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLXCConfigReaderReadCertCall) Do(f func(string) ([]byte, error)) *MockLXCConfigReaderReadCertCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLXCConfigReaderReadCertCall) DoAndReturn(f func(string) ([]byte, error)) *MockLXCConfigReaderReadCertCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadConfig mocks base method.
func (m *MockLXCConfigReader) ReadConfig(arg0 string) (LXCConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig", arg0)
	ret0, _ := ret[0].(LXCConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockLXCConfigReaderMockRecorder) ReadConfig(arg0 any) *MockLXCConfigReaderReadConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockLXCConfigReader)(nil).ReadConfig), arg0)
	return &MockLXCConfigReaderReadConfigCall{Call: call}
}

// MockLXCConfigReaderReadConfigCall wrap *gomock.Call
type MockLXCConfigReaderReadConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLXCConfigReaderReadConfigCall) Return(arg0 LXCConfig, arg1 error) *MockLXCConfigReaderReadConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLXCConfigReaderReadConfigCall) Do(f func(string) (LXCConfig, error)) *MockLXCConfigReaderReadConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLXCConfigReaderReadConfigCall) DoAndReturn(f func(string) (LXCConfig, error)) *MockLXCConfigReaderReadConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
