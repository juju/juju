// Code generated by MockGen. DO NOT EDIT.
// Source: net (interfaces: Addr)
//
// Generated by this command:
//
//	mockgen -typed -package lxd -destination net_mock_test.go net Addr
//

// Package lxd is a generated GoMock package.
package lxd

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAddr is a mock of Addr interface.
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
}

// MockAddrMockRecorder is the mock recorder for MockAddr.
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance.
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAddr) ISGOMOCK() struct{} {
	return struct{}{}
}

// Network mocks base method.
func (m *MockAddr) Network() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(string)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockAddrMockRecorder) Network() *MockAddrNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockAddr)(nil).Network))
	return &MockAddrNetworkCall{Call: call}
}

// MockAddrNetworkCall wrap *gomock.Call
type MockAddrNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddrNetworkCall) Return(arg0 string) *MockAddrNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddrNetworkCall) Do(f func() string) *MockAddrNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddrNetworkCall) DoAndReturn(f func() string) *MockAddrNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAddrMockRecorder) String() *MockAddrStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAddr)(nil).String))
	return &MockAddrStringCall{Call: call}
}

// MockAddrStringCall wrap *gomock.Call
type MockAddrStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddrStringCall) Return(arg0 string) *MockAddrStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddrStringCall) Do(f func() string) *MockAddrStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddrStringCall) DoAndReturn(f func() string) *MockAddrStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
