// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/network/containerizer (interfaces: Container,Address,Subnet,LinkLayerDevice)
//
// Generated by this command:
//
//	mockgen -typed -package containerizer -destination bridgepolicy_mock_test.go github.com/juju/juju/internal/network/containerizer Container,Address,Subnet,LinkLayerDevice
//

// Package containerizer is a generated GoMock package.
package containerizer

import (
	reflect "reflect"

	set "github.com/juju/collections/set"
	constraints "github.com/juju/juju/core/constraints"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockContainer is a mock of Container interface.
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer.
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance.
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContainer) ISGOMOCK() struct{} {
	return struct{}{}
}

// AllDeviceAddresses mocks base method.
func (m *MockContainer) AllDeviceAddresses() ([]Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDeviceAddresses")
	ret0, _ := ret[0].([]Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllDeviceAddresses indicates an expected call of AllDeviceAddresses.
func (mr *MockContainerMockRecorder) AllDeviceAddresses() *MockContainerAllDeviceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDeviceAddresses", reflect.TypeOf((*MockContainer)(nil).AllDeviceAddresses))
	return &MockContainerAllDeviceAddressesCall{Call: call}
}

// MockContainerAllDeviceAddressesCall wrap *gomock.Call
type MockContainerAllDeviceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerAllDeviceAddressesCall) Return(arg0 []Address, arg1 error) *MockContainerAllDeviceAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerAllDeviceAddressesCall) Do(f func() ([]Address, error)) *MockContainerAllDeviceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerAllDeviceAddressesCall) DoAndReturn(f func() ([]Address, error)) *MockContainerAllDeviceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllLinkLayerDevices mocks base method.
func (m *MockContainer) AllLinkLayerDevices() ([]LinkLayerDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllLinkLayerDevices")
	ret0, _ := ret[0].([]LinkLayerDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllLinkLayerDevices indicates an expected call of AllLinkLayerDevices.
func (mr *MockContainerMockRecorder) AllLinkLayerDevices() *MockContainerAllLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllLinkLayerDevices", reflect.TypeOf((*MockContainer)(nil).AllLinkLayerDevices))
	return &MockContainerAllLinkLayerDevicesCall{Call: call}
}

// MockContainerAllLinkLayerDevicesCall wrap *gomock.Call
type MockContainerAllLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerAllLinkLayerDevicesCall) Return(arg0 []LinkLayerDevice, arg1 error) *MockContainerAllLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerAllLinkLayerDevicesCall) Do(f func() ([]LinkLayerDevice, error)) *MockContainerAllLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerAllLinkLayerDevicesCall) DoAndReturn(f func() ([]LinkLayerDevice, error)) *MockContainerAllLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllSpaces mocks base method.
func (m *MockContainer) AllSpaces(arg0 network.SubnetInfos) (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSpaces", arg0)
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSpaces indicates an expected call of AllSpaces.
func (mr *MockContainerMockRecorder) AllSpaces(arg0 any) *MockContainerAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSpaces", reflect.TypeOf((*MockContainer)(nil).AllSpaces), arg0)
	return &MockContainerAllSpacesCall{Call: call}
}

// MockContainerAllSpacesCall wrap *gomock.Call
type MockContainerAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerAllSpacesCall) Return(arg0 set.Strings, arg1 error) *MockContainerAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerAllSpacesCall) Do(f func(network.SubnetInfos) (set.Strings, error)) *MockContainerAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerAllSpacesCall) DoAndReturn(f func(network.SubnetInfos) (set.Strings, error)) *MockContainerAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Constraints mocks base method.
func (m *MockContainer) Constraints() (constraints.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Constraints")
	ret0, _ := ret[0].(constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Constraints indicates an expected call of Constraints.
func (mr *MockContainerMockRecorder) Constraints() *MockContainerConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Constraints", reflect.TypeOf((*MockContainer)(nil).Constraints))
	return &MockContainerConstraintsCall{Call: call}
}

// MockContainerConstraintsCall wrap *gomock.Call
type MockContainerConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerConstraintsCall) Return(arg0 constraints.Value, arg1 error) *MockContainerConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerConstraintsCall) Do(f func() (constraints.Value, error)) *MockContainerConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerConstraintsCall) DoAndReturn(f func() (constraints.Value, error)) *MockContainerConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerType mocks base method.
func (m *MockContainer) ContainerType() instance.ContainerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(instance.ContainerType)
	return ret0
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockContainerMockRecorder) ContainerType() *MockContainerContainerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockContainer)(nil).ContainerType))
	return &MockContainerContainerTypeCall{Call: call}
}

// MockContainerContainerTypeCall wrap *gomock.Call
type MockContainerContainerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerContainerTypeCall) Return(arg0 instance.ContainerType) *MockContainerContainerTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerContainerTypeCall) Do(f func() instance.ContainerType) *MockContainerContainerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerContainerTypeCall) DoAndReturn(f func() instance.ContainerType) *MockContainerContainerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockContainer) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockContainerMockRecorder) Id() *MockContainerIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockContainer)(nil).Id))
	return &MockContainerIdCall{Call: call}
}

// MockContainerIdCall wrap *gomock.Call
type MockContainerIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerIdCall) Return(arg0 string) *MockContainerIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerIdCall) Do(f func() string) *MockContainerIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerIdCall) DoAndReturn(f func() string) *MockContainerIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Raw mocks base method.
func (m *MockContainer) Raw() *state.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(*state.Machine)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockContainerMockRecorder) Raw() *MockContainerRawCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockContainer)(nil).Raw))
	return &MockContainerRawCall{Call: call}
}

// MockContainerRawCall wrap *gomock.Call
type MockContainerRawCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerRawCall) Return(arg0 *state.Machine) *MockContainerRawCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerRawCall) Do(f func() *state.Machine) *MockContainerRawCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerRawCall) DoAndReturn(f func() *state.Machine) *MockContainerRawCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAllAddresses mocks base method.
func (m *MockContainer) RemoveAllAddresses() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllAddresses")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllAddresses indicates an expected call of RemoveAllAddresses.
func (mr *MockContainerMockRecorder) RemoveAllAddresses() *MockContainerRemoveAllAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllAddresses", reflect.TypeOf((*MockContainer)(nil).RemoveAllAddresses))
	return &MockContainerRemoveAllAddressesCall{Call: call}
}

// MockContainerRemoveAllAddressesCall wrap *gomock.Call
type MockContainerRemoveAllAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerRemoveAllAddressesCall) Return(arg0 error) *MockContainerRemoveAllAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerRemoveAllAddressesCall) Do(f func() error) *MockContainerRemoveAllAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerRemoveAllAddressesCall) DoAndReturn(f func() error) *MockContainerRemoveAllAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConstraints mocks base method.
func (m *MockContainer) SetConstraints(arg0 constraints.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConstraints", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockContainerMockRecorder) SetConstraints(arg0 any) *MockContainerSetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockContainer)(nil).SetConstraints), arg0)
	return &MockContainerSetConstraintsCall{Call: call}
}

// MockContainerSetConstraintsCall wrap *gomock.Call
type MockContainerSetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerSetConstraintsCall) Return(arg0 error) *MockContainerSetConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerSetConstraintsCall) Do(f func(constraints.Value) error) *MockContainerSetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerSetConstraintsCall) DoAndReturn(f func(constraints.Value) error) *MockContainerSetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetDevicesAddresses mocks base method.
func (m *MockContainer) SetDevicesAddresses(arg0 ...state.LinkLayerDeviceAddress) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDevicesAddresses", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevicesAddresses indicates an expected call of SetDevicesAddresses.
func (mr *MockContainerMockRecorder) SetDevicesAddresses(arg0 ...any) *MockContainerSetDevicesAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevicesAddresses", reflect.TypeOf((*MockContainer)(nil).SetDevicesAddresses), arg0...)
	return &MockContainerSetDevicesAddressesCall{Call: call}
}

// MockContainerSetDevicesAddressesCall wrap *gomock.Call
type MockContainerSetDevicesAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerSetDevicesAddressesCall) Return(arg0 error) *MockContainerSetDevicesAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerSetDevicesAddressesCall) Do(f func(...state.LinkLayerDeviceAddress) error) *MockContainerSetDevicesAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerSetDevicesAddressesCall) DoAndReturn(f func(...state.LinkLayerDeviceAddress) error) *MockContainerSetDevicesAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLinkLayerDevices mocks base method.
func (m *MockContainer) SetLinkLayerDevices(arg0 ...state.LinkLayerDeviceArgs) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLinkLayerDevices", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLinkLayerDevices indicates an expected call of SetLinkLayerDevices.
func (mr *MockContainerMockRecorder) SetLinkLayerDevices(arg0 ...any) *MockContainerSetLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLinkLayerDevices", reflect.TypeOf((*MockContainer)(nil).SetLinkLayerDevices), arg0...)
	return &MockContainerSetLinkLayerDevicesCall{Call: call}
}

// MockContainerSetLinkLayerDevicesCall wrap *gomock.Call
type MockContainerSetLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContainerSetLinkLayerDevicesCall) Return(arg0 error) *MockContainerSetLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContainerSetLinkLayerDevicesCall) Do(f func(...state.LinkLayerDeviceArgs) error) *MockContainerSetLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContainerSetLinkLayerDevicesCall) DoAndReturn(f func(...state.LinkLayerDeviceArgs) error) *MockContainerSetLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAddress is a mock of Address interface.
type MockAddress struct {
	ctrl     *gomock.Controller
	recorder *MockAddressMockRecorder
}

// MockAddressMockRecorder is the mock recorder for MockAddress.
type MockAddressMockRecorder struct {
	mock *MockAddress
}

// NewMockAddress creates a new mock instance.
func NewMockAddress(ctrl *gomock.Controller) *MockAddress {
	mock := &MockAddress{ctrl: ctrl}
	mock.recorder = &MockAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddress) EXPECT() *MockAddressMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAddress) ISGOMOCK() struct{} {
	return struct{}{}
}

// DeviceName mocks base method.
func (m *MockAddress) DeviceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DeviceName indicates an expected call of DeviceName.
func (mr *MockAddressMockRecorder) DeviceName() *MockAddressDeviceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceName", reflect.TypeOf((*MockAddress)(nil).DeviceName))
	return &MockAddressDeviceNameCall{Call: call}
}

// MockAddressDeviceNameCall wrap *gomock.Call
type MockAddressDeviceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddressDeviceNameCall) Return(arg0 string) *MockAddressDeviceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddressDeviceNameCall) Do(f func() string) *MockAddressDeviceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddressDeviceNameCall) DoAndReturn(f func() string) *MockAddressDeviceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubnetCIDR mocks base method.
func (m *MockAddress) SubnetCIDR() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetCIDR")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubnetCIDR indicates an expected call of SubnetCIDR.
func (mr *MockAddressMockRecorder) SubnetCIDR() *MockAddressSubnetCIDRCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetCIDR", reflect.TypeOf((*MockAddress)(nil).SubnetCIDR))
	return &MockAddressSubnetCIDRCall{Call: call}
}

// MockAddressSubnetCIDRCall wrap *gomock.Call
type MockAddressSubnetCIDRCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddressSubnetCIDRCall) Return(arg0 string) *MockAddressSubnetCIDRCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddressSubnetCIDRCall) Do(f func() string) *MockAddressSubnetCIDRCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddressSubnetCIDRCall) DoAndReturn(f func() string) *MockAddressSubnetCIDRCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSubnet is a mock of Subnet interface.
type MockSubnet struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetMockRecorder
}

// MockSubnetMockRecorder is the mock recorder for MockSubnet.
type MockSubnetMockRecorder struct {
	mock *MockSubnet
}

// NewMockSubnet creates a new mock instance.
func NewMockSubnet(ctrl *gomock.Controller) *MockSubnet {
	mock := &MockSubnet{ctrl: ctrl}
	mock.recorder = &MockSubnetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnet) EXPECT() *MockSubnetMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSubnet) ISGOMOCK() struct{} {
	return struct{}{}
}

// SpaceID mocks base method.
func (m *MockSubnet) SpaceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SpaceID indicates an expected call of SpaceID.
func (mr *MockSubnetMockRecorder) SpaceID() *MockSubnetSpaceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceID", reflect.TypeOf((*MockSubnet)(nil).SpaceID))
	return &MockSubnetSpaceIDCall{Call: call}
}

// MockSubnetSpaceIDCall wrap *gomock.Call
type MockSubnetSpaceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubnetSpaceIDCall) Return(arg0 string) *MockSubnetSpaceIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubnetSpaceIDCall) Do(f func() string) *MockSubnetSpaceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubnetSpaceIDCall) DoAndReturn(f func() string) *MockSubnetSpaceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLinkLayerDevice is a mock of LinkLayerDevice interface.
type MockLinkLayerDevice struct {
	ctrl     *gomock.Controller
	recorder *MockLinkLayerDeviceMockRecorder
}

// MockLinkLayerDeviceMockRecorder is the mock recorder for MockLinkLayerDevice.
type MockLinkLayerDeviceMockRecorder struct {
	mock *MockLinkLayerDevice
}

// NewMockLinkLayerDevice creates a new mock instance.
func NewMockLinkLayerDevice(ctrl *gomock.Controller) *MockLinkLayerDevice {
	mock := &MockLinkLayerDevice{ctrl: ctrl}
	mock.recorder = &MockLinkLayerDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkLayerDevice) EXPECT() *MockLinkLayerDeviceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinkLayerDevice) ISGOMOCK() struct{} {
	return struct{}{}
}

// Addresses mocks base method.
func (m *MockLinkLayerDevice) Addresses() ([]*state.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses")
	ret0, _ := ret[0].([]*state.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Addresses indicates an expected call of Addresses.
func (mr *MockLinkLayerDeviceMockRecorder) Addresses() *MockLinkLayerDeviceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockLinkLayerDevice)(nil).Addresses))
	return &MockLinkLayerDeviceAddressesCall{Call: call}
}

// MockLinkLayerDeviceAddressesCall wrap *gomock.Call
type MockLinkLayerDeviceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceAddressesCall) Return(arg0 []*state.Address, arg1 error) *MockLinkLayerDeviceAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceAddressesCall) Do(f func() ([]*state.Address, error)) *MockLinkLayerDeviceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceAddressesCall) DoAndReturn(f func() ([]*state.Address, error)) *MockLinkLayerDeviceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EthernetDeviceForBridge mocks base method.
func (m *MockLinkLayerDevice) EthernetDeviceForBridge(arg0 string, arg1 bool, arg2 network.SubnetInfos) (network.InterfaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthernetDeviceForBridge", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.InterfaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthernetDeviceForBridge indicates an expected call of EthernetDeviceForBridge.
func (mr *MockLinkLayerDeviceMockRecorder) EthernetDeviceForBridge(arg0, arg1, arg2 any) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthernetDeviceForBridge", reflect.TypeOf((*MockLinkLayerDevice)(nil).EthernetDeviceForBridge), arg0, arg1, arg2)
	return &MockLinkLayerDeviceEthernetDeviceForBridgeCall{Call: call}
}

// MockLinkLayerDeviceEthernetDeviceForBridgeCall wrap *gomock.Call
type MockLinkLayerDeviceEthernetDeviceForBridgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceEthernetDeviceForBridgeCall) Return(arg0 network.InterfaceInfo, arg1 error) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceEthernetDeviceForBridgeCall) Do(f func(string, bool, network.SubnetInfos) (network.InterfaceInfo, error)) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceEthernetDeviceForBridgeCall) DoAndReturn(f func(string, bool, network.SubnetInfos) (network.InterfaceInfo, error)) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsAutoStart mocks base method.
func (m *MockLinkLayerDevice) IsAutoStart() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoStart")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAutoStart indicates an expected call of IsAutoStart.
func (mr *MockLinkLayerDeviceMockRecorder) IsAutoStart() *MockLinkLayerDeviceIsAutoStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoStart", reflect.TypeOf((*MockLinkLayerDevice)(nil).IsAutoStart))
	return &MockLinkLayerDeviceIsAutoStartCall{Call: call}
}

// MockLinkLayerDeviceIsAutoStartCall wrap *gomock.Call
type MockLinkLayerDeviceIsAutoStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceIsAutoStartCall) Return(arg0 bool) *MockLinkLayerDeviceIsAutoStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceIsAutoStartCall) Do(f func() bool) *MockLinkLayerDeviceIsAutoStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceIsAutoStartCall) DoAndReturn(f func() bool) *MockLinkLayerDeviceIsAutoStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsUp mocks base method.
func (m *MockLinkLayerDevice) IsUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUp indicates an expected call of IsUp.
func (mr *MockLinkLayerDeviceMockRecorder) IsUp() *MockLinkLayerDeviceIsUpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUp", reflect.TypeOf((*MockLinkLayerDevice)(nil).IsUp))
	return &MockLinkLayerDeviceIsUpCall{Call: call}
}

// MockLinkLayerDeviceIsUpCall wrap *gomock.Call
type MockLinkLayerDeviceIsUpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceIsUpCall) Return(arg0 bool) *MockLinkLayerDeviceIsUpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceIsUpCall) Do(f func() bool) *MockLinkLayerDeviceIsUpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceIsUpCall) DoAndReturn(f func() bool) *MockLinkLayerDeviceIsUpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MACAddress mocks base method.
func (m *MockLinkLayerDevice) MACAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MACAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// MACAddress indicates an expected call of MACAddress.
func (mr *MockLinkLayerDeviceMockRecorder) MACAddress() *MockLinkLayerDeviceMACAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MACAddress", reflect.TypeOf((*MockLinkLayerDevice)(nil).MACAddress))
	return &MockLinkLayerDeviceMACAddressCall{Call: call}
}

// MockLinkLayerDeviceMACAddressCall wrap *gomock.Call
type MockLinkLayerDeviceMACAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceMACAddressCall) Return(arg0 string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceMACAddressCall) Do(f func() string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceMACAddressCall) DoAndReturn(f func() string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MTU mocks base method.
func (m *MockLinkLayerDevice) MTU() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MTU")
	ret0, _ := ret[0].(uint)
	return ret0
}

// MTU indicates an expected call of MTU.
func (mr *MockLinkLayerDeviceMockRecorder) MTU() *MockLinkLayerDeviceMTUCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MTU", reflect.TypeOf((*MockLinkLayerDevice)(nil).MTU))
	return &MockLinkLayerDeviceMTUCall{Call: call}
}

// MockLinkLayerDeviceMTUCall wrap *gomock.Call
type MockLinkLayerDeviceMTUCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceMTUCall) Return(arg0 uint) *MockLinkLayerDeviceMTUCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceMTUCall) Do(f func() uint) *MockLinkLayerDeviceMTUCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceMTUCall) DoAndReturn(f func() uint) *MockLinkLayerDeviceMTUCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockLinkLayerDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLinkLayerDeviceMockRecorder) Name() *MockLinkLayerDeviceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLinkLayerDevice)(nil).Name))
	return &MockLinkLayerDeviceNameCall{Call: call}
}

// MockLinkLayerDeviceNameCall wrap *gomock.Call
type MockLinkLayerDeviceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceNameCall) Return(arg0 string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceNameCall) Do(f func() string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceNameCall) DoAndReturn(f func() string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ParentDevice mocks base method.
func (m *MockLinkLayerDevice) ParentDevice() (LinkLayerDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentDevice")
	ret0, _ := ret[0].(LinkLayerDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParentDevice indicates an expected call of ParentDevice.
func (mr *MockLinkLayerDeviceMockRecorder) ParentDevice() *MockLinkLayerDeviceParentDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentDevice", reflect.TypeOf((*MockLinkLayerDevice)(nil).ParentDevice))
	return &MockLinkLayerDeviceParentDeviceCall{Call: call}
}

// MockLinkLayerDeviceParentDeviceCall wrap *gomock.Call
type MockLinkLayerDeviceParentDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceParentDeviceCall) Return(arg0 LinkLayerDevice, arg1 error) *MockLinkLayerDeviceParentDeviceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceParentDeviceCall) Do(f func() (LinkLayerDevice, error)) *MockLinkLayerDeviceParentDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceParentDeviceCall) DoAndReturn(f func() (LinkLayerDevice, error)) *MockLinkLayerDeviceParentDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ParentName mocks base method.
func (m *MockLinkLayerDevice) ParentName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ParentName indicates an expected call of ParentName.
func (mr *MockLinkLayerDeviceMockRecorder) ParentName() *MockLinkLayerDeviceParentNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentName", reflect.TypeOf((*MockLinkLayerDevice)(nil).ParentName))
	return &MockLinkLayerDeviceParentNameCall{Call: call}
}

// MockLinkLayerDeviceParentNameCall wrap *gomock.Call
type MockLinkLayerDeviceParentNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceParentNameCall) Return(arg0 string) *MockLinkLayerDeviceParentNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceParentNameCall) Do(f func() string) *MockLinkLayerDeviceParentNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceParentNameCall) DoAndReturn(f func() string) *MockLinkLayerDeviceParentNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockLinkLayerDevice) Type() network.LinkLayerDeviceType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(network.LinkLayerDeviceType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockLinkLayerDeviceMockRecorder) Type() *MockLinkLayerDeviceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockLinkLayerDevice)(nil).Type))
	return &MockLinkLayerDeviceTypeCall{Call: call}
}

// MockLinkLayerDeviceTypeCall wrap *gomock.Call
type MockLinkLayerDeviceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceTypeCall) Return(arg0 network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceTypeCall) Do(f func() network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceTypeCall) DoAndReturn(f func() network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VirtualPortType mocks base method.
func (m *MockLinkLayerDevice) VirtualPortType() network.VirtualPortType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualPortType")
	ret0, _ := ret[0].(network.VirtualPortType)
	return ret0
}

// VirtualPortType indicates an expected call of VirtualPortType.
func (mr *MockLinkLayerDeviceMockRecorder) VirtualPortType() *MockLinkLayerDeviceVirtualPortTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualPortType", reflect.TypeOf((*MockLinkLayerDevice)(nil).VirtualPortType))
	return &MockLinkLayerDeviceVirtualPortTypeCall{Call: call}
}

// MockLinkLayerDeviceVirtualPortTypeCall wrap *gomock.Call
type MockLinkLayerDeviceVirtualPortTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceVirtualPortTypeCall) Return(arg0 network.VirtualPortType) *MockLinkLayerDeviceVirtualPortTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceVirtualPortTypeCall) Do(f func() network.VirtualPortType) *MockLinkLayerDeviceVirtualPortTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceVirtualPortTypeCall) DoAndReturn(f func() network.VirtualPortType) *MockLinkLayerDeviceVirtualPortTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
