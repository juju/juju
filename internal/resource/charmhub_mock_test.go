// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/resource/charmhub (interfaces: ResourceClient,CharmHub)
//
// Generated by this command:
//
//	mockgen -typed -package resource -destination charmhub_mock_test.go github.com/juju/juju/internal/resource/charmhub ResourceClient,CharmHub
//

// Package resource is a generated GoMock package.
package resource

import (
	context "context"
	url "net/url"
	reflect "reflect"

	charmhub "github.com/juju/juju/internal/charmhub"
	transport "github.com/juju/juju/internal/charmhub/transport"
	charmhub0 "github.com/juju/juju/internal/resource/charmhub"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceClient is a mock of ResourceClient interface.
type MockResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceClientMockRecorder
}

// MockResourceClientMockRecorder is the mock recorder for MockResourceClient.
type MockResourceClientMockRecorder struct {
	mock *MockResourceClient
}

// NewMockResourceClient creates a new mock instance.
func NewMockResourceClient(ctrl *gomock.Controller) *MockResourceClient {
	mock := &MockResourceClient{ctrl: ctrl}
	mock.recorder = &MockResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceClient) EXPECT() *MockResourceClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockResourceClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetResource mocks base method.
func (m *MockResourceClient) GetResource(arg0 context.Context, arg1 charmhub0.ResourceRequest) (charmhub0.ResourceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(charmhub0.ResourceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourceClientMockRecorder) GetResource(arg0, arg1 any) *MockResourceClientGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourceClient)(nil).GetResource), arg0, arg1)
	return &MockResourceClientGetResourceCall{Call: call}
}

// MockResourceClientGetResourceCall wrap *gomock.Call
type MockResourceClientGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceClientGetResourceCall) Return(arg0 charmhub0.ResourceData, arg1 error) *MockResourceClientGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceClientGetResourceCall) Do(f func(context.Context, charmhub0.ResourceRequest) (charmhub0.ResourceData, error)) *MockResourceClientGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceClientGetResourceCall) DoAndReturn(f func(context.Context, charmhub0.ResourceRequest) (charmhub0.ResourceData, error)) *MockResourceClientGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmHub is a mock of CharmHub interface.
type MockCharmHub struct {
	ctrl     *gomock.Controller
	recorder *MockCharmHubMockRecorder
}

// MockCharmHubMockRecorder is the mock recorder for MockCharmHub.
type MockCharmHubMockRecorder struct {
	mock *MockCharmHub
}

// NewMockCharmHub creates a new mock instance.
func NewMockCharmHub(ctrl *gomock.Controller) *MockCharmHub {
	mock := &MockCharmHub{ctrl: ctrl}
	mock.recorder = &MockCharmHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmHub) EXPECT() *MockCharmHubMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmHub) ISGOMOCK() struct{} {
	return struct{}{}
}

// Download mocks base method.
func (m *MockCharmHub) Download(arg0 context.Context, arg1 *url.URL, arg2 string, arg3 ...charmhub.DownloadOption) (*charmhub.Digest, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Download", varargs...)
	ret0, _ := ret[0].(*charmhub.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockCharmHubMockRecorder) Download(arg0, arg1, arg2 any, arg3 ...any) *MockCharmHubDownloadCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockCharmHub)(nil).Download), varargs...)
	return &MockCharmHubDownloadCall{Call: call}
}

// MockCharmHubDownloadCall wrap *gomock.Call
type MockCharmHubDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmHubDownloadCall) Return(arg0 *charmhub.Digest, arg1 error) *MockCharmHubDownloadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmHubDownloadCall) Do(f func(context.Context, *url.URL, string, ...charmhub.DownloadOption) (*charmhub.Digest, error)) *MockCharmHubDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmHubDownloadCall) DoAndReturn(f func(context.Context, *url.URL, string, ...charmhub.DownloadOption) (*charmhub.Digest, error)) *MockCharmHubDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockCharmHub) Refresh(arg0 context.Context, arg1 charmhub.RefreshConfig) ([]transport.RefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0, arg1)
	ret0, _ := ret[0].([]transport.RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockCharmHubMockRecorder) Refresh(arg0, arg1 any) *MockCharmHubRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockCharmHub)(nil).Refresh), arg0, arg1)
	return &MockCharmHubRefreshCall{Call: call}
}

// MockCharmHubRefreshCall wrap *gomock.Call
type MockCharmHubRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmHubRefreshCall) Return(arg0 []transport.RefreshResponse, arg1 error) *MockCharmHubRefreshCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmHubRefreshCall) Do(f func(context.Context, charmhub.RefreshConfig) ([]transport.RefreshResponse, error)) *MockCharmHubRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmHubRefreshCall) DoAndReturn(f func(context.Context, charmhub.RefreshConfig) ([]transport.RefreshResponse, error)) *MockCharmHubRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
