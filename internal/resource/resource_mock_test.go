// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/resource (interfaces: ResourceService,ApplicationService,ResourceDownloadLock,ResourceClientGetter)
//
// Generated by this command:
//
//	mockgen -typed -package resource -destination resource_mock_test.go github.com/juju/juju/internal/resource ResourceService,ApplicationService,ResourceDownloadLock,ResourceClientGetter
//

// Package resource is a generated GoMock package.
package resource

import (
	context "context"
	io "io"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	logger "github.com/juju/juju/core/logger"
	resource "github.com/juju/juju/core/resource"
	unit "github.com/juju/juju/core/unit"
	application0 "github.com/juju/juju/domain/application"
	charm "github.com/juju/juju/domain/application/charm"
	resource0 "github.com/juju/juju/domain/resource"
	charmhub "github.com/juju/juju/internal/resource/charmhub"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// GetApplicationResourceID mocks base method.
func (m *MockResourceService) GetApplicationResourceID(arg0 context.Context, arg1 resource0.GetApplicationResourceIDArgs) (resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationResourceID", arg0, arg1)
	ret0, _ := ret[0].(resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationResourceID indicates an expected call of GetApplicationResourceID.
func (mr *MockResourceServiceMockRecorder) GetApplicationResourceID(arg0, arg1 any) *MockResourceServiceGetApplicationResourceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationResourceID", reflect.TypeOf((*MockResourceService)(nil).GetApplicationResourceID), arg0, arg1)
	return &MockResourceServiceGetApplicationResourceIDCall{Call: call}
}

// MockResourceServiceGetApplicationResourceIDCall wrap *gomock.Call
type MockResourceServiceGetApplicationResourceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceGetApplicationResourceIDCall) Return(arg0 resource.UUID, arg1 error) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceGetApplicationResourceIDCall) Do(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceGetApplicationResourceIDCall) DoAndReturn(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResource mocks base method.
func (m *MockResourceService) GetResource(arg0 context.Context, arg1 resource.UUID) (resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourceServiceMockRecorder) GetResource(arg0, arg1 any) *MockResourceServiceGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourceService)(nil).GetResource), arg0, arg1)
	return &MockResourceServiceGetResourceCall{Call: call}
}

// MockResourceServiceGetResourceCall wrap *gomock.Call
type MockResourceServiceGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceGetResourceCall) Return(arg0 resource.Resource, arg1 error) *MockResourceServiceGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceGetResourceCall) Do(f func(context.Context, resource.UUID) (resource.Resource, error)) *MockResourceServiceGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceGetResourceCall) DoAndReturn(f func(context.Context, resource.UUID) (resource.Resource, error)) *MockResourceServiceGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResource mocks base method.
func (m *MockResourceService) OpenResource(arg0 context.Context, arg1 resource.UUID) (resource.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResource", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResource indicates an expected call of OpenResource.
func (mr *MockResourceServiceMockRecorder) OpenResource(arg0, arg1 any) *MockResourceServiceOpenResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResource", reflect.TypeOf((*MockResourceService)(nil).OpenResource), arg0, arg1)
	return &MockResourceServiceOpenResourceCall{Call: call}
}

// MockResourceServiceOpenResourceCall wrap *gomock.Call
type MockResourceServiceOpenResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceOpenResourceCall) Return(arg0 resource.Resource, arg1 io.ReadCloser, arg2 error) *MockResourceServiceOpenResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceOpenResourceCall) Do(f func(context.Context, resource.UUID) (resource.Resource, io.ReadCloser, error)) *MockResourceServiceOpenResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceOpenResourceCall) DoAndReturn(f func(context.Context, resource.UUID) (resource.Resource, io.ReadCloser, error)) *MockResourceServiceOpenResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitResource mocks base method.
func (m *MockResourceService) SetUnitResource(arg0 context.Context, arg1 resource.UUID, arg2 unit.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitResource indicates an expected call of SetUnitResource.
func (mr *MockResourceServiceMockRecorder) SetUnitResource(arg0, arg1, arg2 any) *MockResourceServiceSetUnitResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitResource", reflect.TypeOf((*MockResourceService)(nil).SetUnitResource), arg0, arg1, arg2)
	return &MockResourceServiceSetUnitResourceCall{Call: call}
}

// MockResourceServiceSetUnitResourceCall wrap *gomock.Call
type MockResourceServiceSetUnitResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceSetUnitResourceCall) Return(arg0 error) *MockResourceServiceSetUnitResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceSetUnitResourceCall) Do(f func(context.Context, resource.UUID, unit.UUID) error) *MockResourceServiceSetUnitResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceSetUnitResourceCall) DoAndReturn(f func(context.Context, resource.UUID, unit.UUID) error) *MockResourceServiceSetUnitResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreResource mocks base method.
func (m *MockResourceService) StoreResource(arg0 context.Context, arg1 resource0.StoreResourceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreResource indicates an expected call of StoreResource.
func (mr *MockResourceServiceMockRecorder) StoreResource(arg0, arg1 any) *MockResourceServiceStoreResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreResource", reflect.TypeOf((*MockResourceService)(nil).StoreResource), arg0, arg1)
	return &MockResourceServiceStoreResourceCall{Call: call}
}

// MockResourceServiceStoreResourceCall wrap *gomock.Call
type MockResourceServiceStoreResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceStoreResourceCall) Return(arg0 error) *MockResourceServiceStoreResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceStoreResourceCall) Do(f func(context.Context, resource0.StoreResourceArgs) error) *MockResourceServiceStoreResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceStoreResourceCall) DoAndReturn(f func(context.Context, resource0.StoreResourceArgs) error) *MockResourceServiceStoreResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetApplicationCharmOrigin mocks base method.
func (m *MockApplicationService) GetApplicationCharmOrigin(arg0 context.Context, arg1 string) (application0.CharmOrigin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationCharmOrigin", arg0, arg1)
	ret0, _ := ret[0].(application0.CharmOrigin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationCharmOrigin indicates an expected call of GetApplicationCharmOrigin.
func (mr *MockApplicationServiceMockRecorder) GetApplicationCharmOrigin(arg0, arg1 any) *MockApplicationServiceGetApplicationCharmOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationCharmOrigin", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationCharmOrigin), arg0, arg1)
	return &MockApplicationServiceGetApplicationCharmOriginCall{Call: call}
}

// MockApplicationServiceGetApplicationCharmOriginCall wrap *gomock.Call
type MockApplicationServiceGetApplicationCharmOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationCharmOriginCall) Return(arg0 application0.CharmOrigin, arg1 error) *MockApplicationServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationCharmOriginCall) Do(f func(context.Context, string) (application0.CharmOrigin, error)) *MockApplicationServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationCharmOriginCall) DoAndReturn(f func(context.Context, string) (application0.CharmOrigin, error)) *MockApplicationServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByName mocks base method.
func (m *MockApplicationService) GetApplicationIDByName(arg0 context.Context, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByUnitName mocks base method.
func (m *MockApplicationService) GetApplicationIDByUnitName(arg0 context.Context, arg1 unit.Name) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByUnitName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByUnitName indicates an expected call of GetApplicationIDByUnitName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByUnitName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByUnitName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByUnitName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByUnitNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByUnitNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLocatorByApplicationName mocks base method.
func (m *MockApplicationService) GetCharmLocatorByApplicationName(arg0 context.Context, arg1 string) (charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLocatorByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmLocatorByApplicationName indicates an expected call of GetCharmLocatorByApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetCharmLocatorByApplicationName(arg0, arg1 any) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLocatorByApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLocatorByApplicationName), arg0, arg1)
	return &MockApplicationServiceGetCharmLocatorByApplicationNameCall{Call: call}
}

// MockApplicationServiceGetCharmLocatorByApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmLocatorByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Return(arg0 charm.CharmLocator, arg1 error) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Do(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceDownloadLock is a mock of ResourceDownloadLock interface.
type MockResourceDownloadLock struct {
	ctrl     *gomock.Controller
	recorder *MockResourceDownloadLockMockRecorder
}

// MockResourceDownloadLockMockRecorder is the mock recorder for MockResourceDownloadLock.
type MockResourceDownloadLockMockRecorder struct {
	mock *MockResourceDownloadLock
}

// NewMockResourceDownloadLock creates a new mock instance.
func NewMockResourceDownloadLock(ctrl *gomock.Controller) *MockResourceDownloadLock {
	mock := &MockResourceDownloadLock{ctrl: ctrl}
	mock.recorder = &MockResourceDownloadLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceDownloadLock) EXPECT() *MockResourceDownloadLockMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockResourceDownloadLock) Acquire(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockResourceDownloadLockMockRecorder) Acquire(arg0, arg1 any) *MockResourceDownloadLockAcquireCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockResourceDownloadLock)(nil).Acquire), arg0, arg1)
	return &MockResourceDownloadLockAcquireCall{Call: call}
}

// MockResourceDownloadLockAcquireCall wrap *gomock.Call
type MockResourceDownloadLockAcquireCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceDownloadLockAcquireCall) Return(arg0 error) *MockResourceDownloadLockAcquireCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceDownloadLockAcquireCall) Do(f func(context.Context, string) error) *MockResourceDownloadLockAcquireCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceDownloadLockAcquireCall) DoAndReturn(f func(context.Context, string) error) *MockResourceDownloadLockAcquireCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Release mocks base method.
func (m *MockResourceDownloadLock) Release(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", arg0)
}

// Release indicates an expected call of Release.
func (mr *MockResourceDownloadLockMockRecorder) Release(arg0 any) *MockResourceDownloadLockReleaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockResourceDownloadLock)(nil).Release), arg0)
	return &MockResourceDownloadLockReleaseCall{Call: call}
}

// MockResourceDownloadLockReleaseCall wrap *gomock.Call
type MockResourceDownloadLockReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceDownloadLockReleaseCall) Return() *MockResourceDownloadLockReleaseCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceDownloadLockReleaseCall) Do(f func(string)) *MockResourceDownloadLockReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceDownloadLockReleaseCall) DoAndReturn(f func(string)) *MockResourceDownloadLockReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceClientGetter is a mock of ResourceClientGetter interface.
type MockResourceClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockResourceClientGetterMockRecorder
}

// MockResourceClientGetterMockRecorder is the mock recorder for MockResourceClientGetter.
type MockResourceClientGetterMockRecorder struct {
	mock *MockResourceClientGetter
}

// NewMockResourceClientGetter creates a new mock instance.
func NewMockResourceClientGetter(ctrl *gomock.Controller) *MockResourceClientGetter {
	mock := &MockResourceClientGetter{ctrl: ctrl}
	mock.recorder = &MockResourceClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceClientGetter) EXPECT() *MockResourceClientGetterMockRecorder {
	return m.recorder
}

// GetResourceClient mocks base method.
func (m *MockResourceClientGetter) GetResourceClient(arg0 context.Context, arg1 logger.Logger) (charmhub.ResourceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceClient", arg0, arg1)
	ret0, _ := ret[0].(charmhub.ResourceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceClient indicates an expected call of GetResourceClient.
func (mr *MockResourceClientGetterMockRecorder) GetResourceClient(arg0, arg1 any) *MockResourceClientGetterGetResourceClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceClient", reflect.TypeOf((*MockResourceClientGetter)(nil).GetResourceClient), arg0, arg1)
	return &MockResourceClientGetterGetResourceClientCall{Call: call}
}

// MockResourceClientGetterGetResourceClientCall wrap *gomock.Call
type MockResourceClientGetterGetResourceClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceClientGetterGetResourceClientCall) Return(arg0 charmhub.ResourceClient, arg1 error) *MockResourceClientGetterGetResourceClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceClientGetterGetResourceClientCall) Do(f func(context.Context, logger.Logger) (charmhub.ResourceClient, error)) *MockResourceClientGetterGetResourceClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceClientGetterGetResourceClientCall) DoAndReturn(f func(context.Context, logger.Logger) (charmhub.ResourceClient, error)) *MockResourceClientGetterGetResourceClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
