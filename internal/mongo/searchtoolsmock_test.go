// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/mongo (interfaces: SearchTools)
//
// Generated by this command:
//
//	mockgen -typed -package mongo -destination searchtoolsmock_test.go github.com/juju/juju/internal/mongo SearchTools
//

// Package mongo is a generated GoMock package.
package mongo

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSearchTools is a mock of SearchTools interface.
type MockSearchTools struct {
	ctrl     *gomock.Controller
	recorder *MockSearchToolsMockRecorder
}

// MockSearchToolsMockRecorder is the mock recorder for MockSearchTools.
type MockSearchToolsMockRecorder struct {
	mock *MockSearchTools
}

// NewMockSearchTools creates a new mock instance.
func NewMockSearchTools(ctrl *gomock.Controller) *MockSearchTools {
	mock := &MockSearchTools{ctrl: ctrl}
	mock.recorder = &MockSearchToolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchTools) EXPECT() *MockSearchToolsMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSearchTools) ISGOMOCK() struct{} {
	return struct{}{}
}

// Exists mocks base method.
func (m *MockSearchTools) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockSearchToolsMockRecorder) Exists(arg0 any) *MockSearchToolsExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSearchTools)(nil).Exists), arg0)
	return &MockSearchToolsExistsCall{Call: call}
}

// MockSearchToolsExistsCall wrap *gomock.Call
type MockSearchToolsExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSearchToolsExistsCall) Return(arg0 bool) *MockSearchToolsExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSearchToolsExistsCall) Do(f func(string) bool) *MockSearchToolsExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSearchToolsExistsCall) DoAndReturn(f func(string) bool) *MockSearchToolsExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCommandOutput mocks base method.
func (m *MockSearchTools) GetCommandOutput(arg0 string, arg1 ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommandOutput", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandOutput indicates an expected call of GetCommandOutput.
func (mr *MockSearchToolsMockRecorder) GetCommandOutput(arg0 any, arg1 ...any) *MockSearchToolsGetCommandOutputCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandOutput", reflect.TypeOf((*MockSearchTools)(nil).GetCommandOutput), varargs...)
	return &MockSearchToolsGetCommandOutputCall{Call: call}
}

// MockSearchToolsGetCommandOutputCall wrap *gomock.Call
type MockSearchToolsGetCommandOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSearchToolsGetCommandOutputCall) Return(arg0 string, arg1 error) *MockSearchToolsGetCommandOutputCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSearchToolsGetCommandOutputCall) Do(f func(string, ...string) (string, error)) *MockSearchToolsGetCommandOutputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSearchToolsGetCommandOutputCall) DoAndReturn(f func(string, ...string) (string, error)) *MockSearchToolsGetCommandOutputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
