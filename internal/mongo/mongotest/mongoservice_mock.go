// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/mongo (interfaces: MongoSnapService)
//
// Generated by this command:
//
//	mockgen -typed -package mongotest -destination mongotest/mongoservice_mock.go github.com/juju/juju/internal/mongo MongoSnapService
//

// Package mongotest is a generated GoMock package.
package mongotest

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMongoSnapService is a mock of MongoSnapService interface.
type MockMongoSnapService struct {
	ctrl     *gomock.Controller
	recorder *MockMongoSnapServiceMockRecorder
}

// MockMongoSnapServiceMockRecorder is the mock recorder for MockMongoSnapService.
type MockMongoSnapServiceMockRecorder struct {
	mock *MockMongoSnapService
}

// NewMockMongoSnapService creates a new mock instance.
func NewMockMongoSnapService(ctrl *gomock.Controller) *MockMongoSnapService {
	mock := &MockMongoSnapService{ctrl: ctrl}
	mock.recorder = &MockMongoSnapServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoSnapService) EXPECT() *MockMongoSnapServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockMongoSnapService) ISGOMOCK() struct{} {
	return struct{}{}
}

// ConfigOverride mocks base method.
func (m *MockMongoSnapService) ConfigOverride() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigOverride")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigOverride indicates an expected call of ConfigOverride.
func (mr *MockMongoSnapServiceMockRecorder) ConfigOverride() *MockMongoSnapServiceConfigOverrideCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigOverride", reflect.TypeOf((*MockMongoSnapService)(nil).ConfigOverride))
	return &MockMongoSnapServiceConfigOverrideCall{Call: call}
}

// MockMongoSnapServiceConfigOverrideCall wrap *gomock.Call
type MockMongoSnapServiceConfigOverrideCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceConfigOverrideCall) Return(arg0 error) *MockMongoSnapServiceConfigOverrideCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceConfigOverrideCall) Do(f func() error) *MockMongoSnapServiceConfigOverrideCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceConfigOverrideCall) DoAndReturn(f func() error) *MockMongoSnapServiceConfigOverrideCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exists mocks base method.
func (m *MockMongoSnapService) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockMongoSnapServiceMockRecorder) Exists() *MockMongoSnapServiceExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockMongoSnapService)(nil).Exists))
	return &MockMongoSnapServiceExistsCall{Call: call}
}

// MockMongoSnapServiceExistsCall wrap *gomock.Call
type MockMongoSnapServiceExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceExistsCall) Return(arg0 bool, arg1 error) *MockMongoSnapServiceExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceExistsCall) Do(f func() (bool, error)) *MockMongoSnapServiceExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceExistsCall) DoAndReturn(f func() (bool, error)) *MockMongoSnapServiceExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Install mocks base method.
func (m *MockMongoSnapService) Install() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install")
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockMongoSnapServiceMockRecorder) Install() *MockMongoSnapServiceInstallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockMongoSnapService)(nil).Install))
	return &MockMongoSnapServiceInstallCall{Call: call}
}

// MockMongoSnapServiceInstallCall wrap *gomock.Call
type MockMongoSnapServiceInstallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceInstallCall) Return(arg0 error) *MockMongoSnapServiceInstallCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceInstallCall) Do(f func() error) *MockMongoSnapServiceInstallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceInstallCall) DoAndReturn(f func() error) *MockMongoSnapServiceInstallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Installed mocks base method.
func (m *MockMongoSnapService) Installed() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Installed")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Installed indicates an expected call of Installed.
func (mr *MockMongoSnapServiceMockRecorder) Installed() *MockMongoSnapServiceInstalledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Installed", reflect.TypeOf((*MockMongoSnapService)(nil).Installed))
	return &MockMongoSnapServiceInstalledCall{Call: call}
}

// MockMongoSnapServiceInstalledCall wrap *gomock.Call
type MockMongoSnapServiceInstalledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceInstalledCall) Return(arg0 bool, arg1 error) *MockMongoSnapServiceInstalledCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceInstalledCall) Do(f func() (bool, error)) *MockMongoSnapServiceInstalledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceInstalledCall) DoAndReturn(f func() (bool, error)) *MockMongoSnapServiceInstalledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsLocal mocks base method.
func (m *MockMongoSnapService) IsLocal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocal indicates an expected call of IsLocal.
func (mr *MockMongoSnapServiceMockRecorder) IsLocal() *MockMongoSnapServiceIsLocalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocal", reflect.TypeOf((*MockMongoSnapService)(nil).IsLocal))
	return &MockMongoSnapServiceIsLocalCall{Call: call}
}

// MockMongoSnapServiceIsLocalCall wrap *gomock.Call
type MockMongoSnapServiceIsLocalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceIsLocalCall) Return(arg0 bool) *MockMongoSnapServiceIsLocalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceIsLocalCall) Do(f func() bool) *MockMongoSnapServiceIsLocalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceIsLocalCall) DoAndReturn(f func() bool) *MockMongoSnapServiceIsLocalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockMongoSnapService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockMongoSnapServiceMockRecorder) Name() *MockMongoSnapServiceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMongoSnapService)(nil).Name))
	return &MockMongoSnapServiceNameCall{Call: call}
}

// MockMongoSnapServiceNameCall wrap *gomock.Call
type MockMongoSnapServiceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceNameCall) Return(arg0 string) *MockMongoSnapServiceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceNameCall) Do(f func() string) *MockMongoSnapServiceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceNameCall) DoAndReturn(f func() string) *MockMongoSnapServiceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Restart mocks base method.
func (m *MockMongoSnapService) Restart() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart")
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockMongoSnapServiceMockRecorder) Restart() *MockMongoSnapServiceRestartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockMongoSnapService)(nil).Restart))
	return &MockMongoSnapServiceRestartCall{Call: call}
}

// MockMongoSnapServiceRestartCall wrap *gomock.Call
type MockMongoSnapServiceRestartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceRestartCall) Return(arg0 error) *MockMongoSnapServiceRestartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceRestartCall) Do(f func() error) *MockMongoSnapServiceRestartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceRestartCall) DoAndReturn(f func() error) *MockMongoSnapServiceRestartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Running mocks base method.
func (m *MockMongoSnapService) Running() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Running indicates an expected call of Running.
func (mr *MockMongoSnapServiceMockRecorder) Running() *MockMongoSnapServiceRunningCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockMongoSnapService)(nil).Running))
	return &MockMongoSnapServiceRunningCall{Call: call}
}

// MockMongoSnapServiceRunningCall wrap *gomock.Call
type MockMongoSnapServiceRunningCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceRunningCall) Return(arg0 bool, arg1 error) *MockMongoSnapServiceRunningCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceRunningCall) Do(f func() (bool, error)) *MockMongoSnapServiceRunningCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceRunningCall) DoAndReturn(f func() (bool, error)) *MockMongoSnapServiceRunningCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockMongoSnapService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMongoSnapServiceMockRecorder) Start() *MockMongoSnapServiceStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMongoSnapService)(nil).Start))
	return &MockMongoSnapServiceStartCall{Call: call}
}

// MockMongoSnapServiceStartCall wrap *gomock.Call
type MockMongoSnapServiceStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMongoSnapServiceStartCall) Return(arg0 error) *MockMongoSnapServiceStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMongoSnapServiceStartCall) Do(f func() error) *MockMongoSnapServiceStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMongoSnapServiceStartCall) DoAndReturn(f func() error) *MockMongoSnapServiceStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
