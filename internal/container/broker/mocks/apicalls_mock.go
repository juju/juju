// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/container/broker (interfaces: APICalls)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/apicalls_mock.go github.com/juju/juju/internal/container/broker APICalls
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	provisioner "github.com/juju/juju/api/agent/provisioner"
	network "github.com/juju/juju/core/network"
	network0 "github.com/juju/juju/domain/network"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockAPICalls is a mock of APICalls interface.
type MockAPICalls struct {
	ctrl     *gomock.Controller
	recorder *MockAPICallsMockRecorder
}

// MockAPICallsMockRecorder is the mock recorder for MockAPICalls.
type MockAPICallsMockRecorder struct {
	mock *MockAPICalls
}

// NewMockAPICalls creates a new mock instance.
func NewMockAPICalls(ctrl *gomock.Controller) *MockAPICalls {
	mock := &MockAPICalls{ctrl: ctrl}
	mock.recorder = &MockAPICallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPICalls) EXPECT() *MockAPICallsMockRecorder {
	return m.recorder
}

// ContainerConfig mocks base method.
func (m *MockAPICalls) ContainerConfig(arg0 context.Context) (params.ContainerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerConfig", arg0)
	ret0, _ := ret[0].(params.ContainerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerConfig indicates an expected call of ContainerConfig.
func (mr *MockAPICallsMockRecorder) ContainerConfig(arg0 any) *MockAPICallsContainerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerConfig", reflect.TypeOf((*MockAPICalls)(nil).ContainerConfig), arg0)
	return &MockAPICallsContainerConfigCall{Call: call}
}

// MockAPICallsContainerConfigCall wrap *gomock.Call
type MockAPICallsContainerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPICallsContainerConfigCall) Return(arg0 params.ContainerConfig, arg1 error) *MockAPICallsContainerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPICallsContainerConfigCall) Do(f func(context.Context) (params.ContainerConfig, error)) *MockAPICallsContainerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPICallsContainerConfigCall) DoAndReturn(f func(context.Context) (params.ContainerConfig, error)) *MockAPICallsContainerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerProfileInfo mocks base method.
func (m *MockAPICalls) GetContainerProfileInfo(arg0 context.Context, arg1 names.MachineTag) ([]*provisioner.LXDProfileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerProfileInfo", arg0, arg1)
	ret0, _ := ret[0].([]*provisioner.LXDProfileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerProfileInfo indicates an expected call of GetContainerProfileInfo.
func (mr *MockAPICallsMockRecorder) GetContainerProfileInfo(arg0, arg1 any) *MockAPICallsGetContainerProfileInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerProfileInfo", reflect.TypeOf((*MockAPICalls)(nil).GetContainerProfileInfo), arg0, arg1)
	return &MockAPICallsGetContainerProfileInfoCall{Call: call}
}

// MockAPICallsGetContainerProfileInfoCall wrap *gomock.Call
type MockAPICallsGetContainerProfileInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPICallsGetContainerProfileInfoCall) Return(arg0 []*provisioner.LXDProfileResult, arg1 error) *MockAPICallsGetContainerProfileInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPICallsGetContainerProfileInfoCall) Do(f func(context.Context, names.MachineTag) ([]*provisioner.LXDProfileResult, error)) *MockAPICallsGetContainerProfileInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPICallsGetContainerProfileInfoCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]*provisioner.LXDProfileResult, error)) *MockAPICallsGetContainerProfileInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HostChangesForContainer mocks base method.
func (m *MockAPICalls) HostChangesForContainer(arg0 context.Context, arg1 names.MachineTag) ([]network0.DeviceToBridge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostChangesForContainer", arg0, arg1)
	ret0, _ := ret[0].([]network0.DeviceToBridge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostChangesForContainer indicates an expected call of HostChangesForContainer.
func (mr *MockAPICallsMockRecorder) HostChangesForContainer(arg0, arg1 any) *MockAPICallsHostChangesForContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostChangesForContainer", reflect.TypeOf((*MockAPICalls)(nil).HostChangesForContainer), arg0, arg1)
	return &MockAPICallsHostChangesForContainerCall{Call: call}
}

// MockAPICallsHostChangesForContainerCall wrap *gomock.Call
type MockAPICallsHostChangesForContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPICallsHostChangesForContainerCall) Return(arg0 []network0.DeviceToBridge, arg1 error) *MockAPICallsHostChangesForContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPICallsHostChangesForContainerCall) Do(f func(context.Context, names.MachineTag) ([]network0.DeviceToBridge, error)) *MockAPICallsHostChangesForContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPICallsHostChangesForContainerCall) DoAndReturn(f func(context.Context, names.MachineTag) ([]network0.DeviceToBridge, error)) *MockAPICallsHostChangesForContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareContainerInterfaceInfo mocks base method.
func (m *MockAPICalls) PrepareContainerInterfaceInfo(arg0 context.Context, arg1 names.MachineTag) (network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContainerInterfaceInfo", arg0, arg1)
	ret0, _ := ret[0].(network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContainerInterfaceInfo indicates an expected call of PrepareContainerInterfaceInfo.
func (mr *MockAPICallsMockRecorder) PrepareContainerInterfaceInfo(arg0, arg1 any) *MockAPICallsPrepareContainerInterfaceInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContainerInterfaceInfo", reflect.TypeOf((*MockAPICalls)(nil).PrepareContainerInterfaceInfo), arg0, arg1)
	return &MockAPICallsPrepareContainerInterfaceInfoCall{Call: call}
}

// MockAPICallsPrepareContainerInterfaceInfoCall wrap *gomock.Call
type MockAPICallsPrepareContainerInterfaceInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPICallsPrepareContainerInterfaceInfoCall) Return(arg0 network.InterfaceInfos, arg1 error) *MockAPICallsPrepareContainerInterfaceInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPICallsPrepareContainerInterfaceInfoCall) Do(f func(context.Context, names.MachineTag) (network.InterfaceInfos, error)) *MockAPICallsPrepareContainerInterfaceInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPICallsPrepareContainerInterfaceInfoCall) DoAndReturn(f func(context.Context, names.MachineTag) (network.InterfaceInfos, error)) *MockAPICallsPrepareContainerInterfaceInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseContainerAddresses mocks base method.
func (m *MockAPICalls) ReleaseContainerAddresses(arg0 context.Context, arg1 names.MachineTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerAddresses indicates an expected call of ReleaseContainerAddresses.
func (mr *MockAPICallsMockRecorder) ReleaseContainerAddresses(arg0, arg1 any) *MockAPICallsReleaseContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerAddresses", reflect.TypeOf((*MockAPICalls)(nil).ReleaseContainerAddresses), arg0, arg1)
	return &MockAPICallsReleaseContainerAddressesCall{Call: call}
}

// MockAPICallsReleaseContainerAddressesCall wrap *gomock.Call
type MockAPICallsReleaseContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPICallsReleaseContainerAddressesCall) Return(arg0 error) *MockAPICallsReleaseContainerAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPICallsReleaseContainerAddressesCall) Do(f func(context.Context, names.MachineTag) error) *MockAPICallsReleaseContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPICallsReleaseContainerAddressesCall) DoAndReturn(f func(context.Context, names.MachineTag) error) *MockAPICallsReleaseContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHostMachineNetworkConfig mocks base method.
func (m *MockAPICalls) SetHostMachineNetworkConfig(arg0 context.Context, arg1 names.MachineTag, arg2 []params.NetworkConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHostMachineNetworkConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHostMachineNetworkConfig indicates an expected call of SetHostMachineNetworkConfig.
func (mr *MockAPICallsMockRecorder) SetHostMachineNetworkConfig(arg0, arg1, arg2 any) *MockAPICallsSetHostMachineNetworkConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHostMachineNetworkConfig", reflect.TypeOf((*MockAPICalls)(nil).SetHostMachineNetworkConfig), arg0, arg1, arg2)
	return &MockAPICallsSetHostMachineNetworkConfigCall{Call: call}
}

// MockAPICallsSetHostMachineNetworkConfigCall wrap *gomock.Call
type MockAPICallsSetHostMachineNetworkConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPICallsSetHostMachineNetworkConfigCall) Return(arg0 error) *MockAPICallsSetHostMachineNetworkConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPICallsSetHostMachineNetworkConfigCall) Do(f func(context.Context, names.MachineTag, []params.NetworkConfig) error) *MockAPICallsSetHostMachineNetworkConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPICallsSetHostMachineNetworkConfigCall) DoAndReturn(f func(context.Context, names.MachineTag, []params.NetworkConfig) error) *MockAPICallsSetHostMachineNetworkConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
