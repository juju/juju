// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/canonical/lxd/client (interfaces: Operation,RemoteOperation,Server,ImageServer,InstanceServer)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination lxd_mock.go -write_package_comment=false github.com/canonical/lxd/client Operation,RemoteOperation,Server,ImageServer,InstanceServer
//

package testing

import (
	context "context"
	io "io"
	net "net"
	http "net/http"
	reflect "reflect"

	lxd "github.com/canonical/lxd/client"
	api "github.com/canonical/lxd/shared/api"
	websocket "github.com/gorilla/websocket"
	sftp "github.com/pkg/sftp"
	gomock "go.uber.org/mock/gomock"
)

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockOperation) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddHandler mocks base method.
func (m *MockOperation) AddHandler(arg0 func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", arg0)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockOperationMockRecorder) AddHandler(arg0 any) *MockOperationAddHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockOperation)(nil).AddHandler), arg0)
	return &MockOperationAddHandlerCall{Call: call}
}

// MockOperationAddHandlerCall wrap *gomock.Call
type MockOperationAddHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationAddHandlerCall) Return(arg0 *lxd.EventTarget, arg1 error) *MockOperationAddHandlerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationAddHandlerCall) Do(f func(func(api.Operation)) (*lxd.EventTarget, error)) *MockOperationAddHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationAddHandlerCall) DoAndReturn(f func(func(api.Operation)) (*lxd.EventTarget, error)) *MockOperationAddHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cancel mocks base method.
func (m *MockOperation) Cancel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockOperationMockRecorder) Cancel() *MockOperationCancelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOperation)(nil).Cancel))
	return &MockOperationCancelCall{Call: call}
}

// MockOperationCancelCall wrap *gomock.Call
type MockOperationCancelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationCancelCall) Return(arg0 error) *MockOperationCancelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationCancelCall) Do(f func() error) *MockOperationCancelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationCancelCall) DoAndReturn(f func() error) *MockOperationCancelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockOperation) Get() api.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(api.Operation)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockOperationMockRecorder) Get() *MockOperationGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperation)(nil).Get))
	return &MockOperationGetCall{Call: call}
}

// MockOperationGetCall wrap *gomock.Call
type MockOperationGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationGetCall) Return(arg0 api.Operation) *MockOperationGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationGetCall) Do(f func() api.Operation) *MockOperationGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationGetCall) DoAndReturn(f func() api.Operation) *MockOperationGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWebsocket mocks base method.
func (m *MockOperation) GetWebsocket(arg0 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebsocket", arg0)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebsocket indicates an expected call of GetWebsocket.
func (mr *MockOperationMockRecorder) GetWebsocket(arg0 any) *MockOperationGetWebsocketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebsocket", reflect.TypeOf((*MockOperation)(nil).GetWebsocket), arg0)
	return &MockOperationGetWebsocketCall{Call: call}
}

// MockOperationGetWebsocketCall wrap *gomock.Call
type MockOperationGetWebsocketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationGetWebsocketCall) Return(arg0 *websocket.Conn, arg1 error) *MockOperationGetWebsocketCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationGetWebsocketCall) Do(f func(string) (*websocket.Conn, error)) *MockOperationGetWebsocketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationGetWebsocketCall) DoAndReturn(f func(string) (*websocket.Conn, error)) *MockOperationGetWebsocketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockOperation) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockOperationMockRecorder) Refresh() *MockOperationRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockOperation)(nil).Refresh))
	return &MockOperationRefreshCall{Call: call}
}

// MockOperationRefreshCall wrap *gomock.Call
type MockOperationRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationRefreshCall) Return(arg0 error) *MockOperationRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationRefreshCall) Do(f func() error) *MockOperationRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationRefreshCall) DoAndReturn(f func() error) *MockOperationRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveHandler mocks base method.
func (m *MockOperation) RemoveHandler(arg0 *lxd.EventTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockOperationMockRecorder) RemoveHandler(arg0 any) *MockOperationRemoveHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockOperation)(nil).RemoveHandler), arg0)
	return &MockOperationRemoveHandlerCall{Call: call}
}

// MockOperationRemoveHandlerCall wrap *gomock.Call
type MockOperationRemoveHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationRemoveHandlerCall) Return(arg0 error) *MockOperationRemoveHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationRemoveHandlerCall) Do(f func(*lxd.EventTarget) error) *MockOperationRemoveHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationRemoveHandlerCall) DoAndReturn(f func(*lxd.EventTarget) error) *MockOperationRemoveHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockOperationMockRecorder) Wait() *MockOperationWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockOperation)(nil).Wait))
	return &MockOperationWaitCall{Call: call}
}

// MockOperationWaitCall wrap *gomock.Call
type MockOperationWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationWaitCall) Return(arg0 error) *MockOperationWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationWaitCall) Do(f func() error) *MockOperationWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationWaitCall) DoAndReturn(f func() error) *MockOperationWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitContext mocks base method.
func (m *MockOperation) WaitContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitContext indicates an expected call of WaitContext.
func (mr *MockOperationMockRecorder) WaitContext(arg0 any) *MockOperationWaitContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitContext", reflect.TypeOf((*MockOperation)(nil).WaitContext), arg0)
	return &MockOperationWaitContextCall{Call: call}
}

// MockOperationWaitContextCall wrap *gomock.Call
type MockOperationWaitContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationWaitContextCall) Return(arg0 error) *MockOperationWaitContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationWaitContextCall) Do(f func(context.Context) error) *MockOperationWaitContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationWaitContextCall) DoAndReturn(f func(context.Context) error) *MockOperationWaitContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteOperation is a mock of RemoteOperation interface.
type MockRemoteOperation struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteOperationMockRecorder
}

// MockRemoteOperationMockRecorder is the mock recorder for MockRemoteOperation.
type MockRemoteOperationMockRecorder struct {
	mock *MockRemoteOperation
}

// NewMockRemoteOperation creates a new mock instance.
func NewMockRemoteOperation(ctrl *gomock.Controller) *MockRemoteOperation {
	mock := &MockRemoteOperation{ctrl: ctrl}
	mock.recorder = &MockRemoteOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteOperation) EXPECT() *MockRemoteOperationMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRemoteOperation) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddHandler mocks base method.
func (m *MockRemoteOperation) AddHandler(arg0 func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", arg0)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockRemoteOperationMockRecorder) AddHandler(arg0 any) *MockRemoteOperationAddHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockRemoteOperation)(nil).AddHandler), arg0)
	return &MockRemoteOperationAddHandlerCall{Call: call}
}

// MockRemoteOperationAddHandlerCall wrap *gomock.Call
type MockRemoteOperationAddHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteOperationAddHandlerCall) Return(arg0 *lxd.EventTarget, arg1 error) *MockRemoteOperationAddHandlerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteOperationAddHandlerCall) Do(f func(func(api.Operation)) (*lxd.EventTarget, error)) *MockRemoteOperationAddHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteOperationAddHandlerCall) DoAndReturn(f func(func(api.Operation)) (*lxd.EventTarget, error)) *MockRemoteOperationAddHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CancelTarget mocks base method.
func (m *MockRemoteOperation) CancelTarget() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTarget")
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTarget indicates an expected call of CancelTarget.
func (mr *MockRemoteOperationMockRecorder) CancelTarget() *MockRemoteOperationCancelTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTarget", reflect.TypeOf((*MockRemoteOperation)(nil).CancelTarget))
	return &MockRemoteOperationCancelTargetCall{Call: call}
}

// MockRemoteOperationCancelTargetCall wrap *gomock.Call
type MockRemoteOperationCancelTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteOperationCancelTargetCall) Return(arg0 error) *MockRemoteOperationCancelTargetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteOperationCancelTargetCall) Do(f func() error) *MockRemoteOperationCancelTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteOperationCancelTargetCall) DoAndReturn(f func() error) *MockRemoteOperationCancelTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTarget mocks base method.
func (m *MockRemoteOperation) GetTarget() (*api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTarget")
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTarget indicates an expected call of GetTarget.
func (mr *MockRemoteOperationMockRecorder) GetTarget() *MockRemoteOperationGetTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTarget", reflect.TypeOf((*MockRemoteOperation)(nil).GetTarget))
	return &MockRemoteOperationGetTargetCall{Call: call}
}

// MockRemoteOperationGetTargetCall wrap *gomock.Call
type MockRemoteOperationGetTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteOperationGetTargetCall) Return(arg0 *api.Operation, arg1 error) *MockRemoteOperationGetTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteOperationGetTargetCall) Do(f func() (*api.Operation, error)) *MockRemoteOperationGetTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteOperationGetTargetCall) DoAndReturn(f func() (*api.Operation, error)) *MockRemoteOperationGetTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockRemoteOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRemoteOperationMockRecorder) Wait() *MockRemoteOperationWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRemoteOperation)(nil).Wait))
	return &MockRemoteOperationWaitCall{Call: call}
}

// MockRemoteOperationWaitCall wrap *gomock.Call
type MockRemoteOperationWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteOperationWaitCall) Return(arg0 error) *MockRemoteOperationWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteOperationWaitCall) Do(f func() error) *MockRemoteOperationWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteOperationWaitCall) DoAndReturn(f func() error) *MockRemoteOperationWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockServer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Disconnect mocks base method.
func (m *MockServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockServerMockRecorder) Disconnect() *MockServerDisconnectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockServer)(nil).Disconnect))
	return &MockServerDisconnectCall{Call: call}
}

// MockServerDisconnectCall wrap *gomock.Call
type MockServerDisconnectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerDisconnectCall) Return() *MockServerDisconnectCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerDisconnectCall) Do(f func()) *MockServerDisconnectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerDisconnectCall) DoAndReturn(f func()) *MockServerDisconnectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DoHTTP mocks base method.
func (m *MockServer) DoHTTP(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockServerMockRecorder) DoHTTP(arg0 any) *MockServerDoHTTPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockServer)(nil).DoHTTP), arg0)
	return &MockServerDoHTTPCall{Call: call}
}

// MockServerDoHTTPCall wrap *gomock.Call
type MockServerDoHTTPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerDoHTTPCall) Return(arg0 *http.Response, arg1 error) *MockServerDoHTTPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerDoHTTPCall) Do(f func(*http.Request) (*http.Response, error)) *MockServerDoHTTPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerDoHTTPCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockServerDoHTTPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConnectionInfo mocks base method.
func (m *MockServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockServerMockRecorder) GetConnectionInfo() *MockServerGetConnectionInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockServer)(nil).GetConnectionInfo))
	return &MockServerGetConnectionInfoCall{Call: call}
}

// MockServerGetConnectionInfoCall wrap *gomock.Call
type MockServerGetConnectionInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetConnectionInfoCall) Return(arg0 *lxd.ConnectionInfo, arg1 error) *MockServerGetConnectionInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetConnectionInfoCall) Do(f func() (*lxd.ConnectionInfo, error)) *MockServerGetConnectionInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetConnectionInfoCall) DoAndReturn(f func() (*lxd.ConnectionInfo, error)) *MockServerGetConnectionInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHTTPClient mocks base method.
func (m *MockServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockServerMockRecorder) GetHTTPClient() *MockServerGetHTTPClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockServer)(nil).GetHTTPClient))
	return &MockServerGetHTTPClientCall{Call: call}
}

// MockServerGetHTTPClientCall wrap *gomock.Call
type MockServerGetHTTPClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerGetHTTPClientCall) Return(arg0 *http.Client, arg1 error) *MockServerGetHTTPClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerGetHTTPClientCall) Do(f func() (*http.Client, error)) *MockServerGetHTTPClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerGetHTTPClientCall) DoAndReturn(f func() (*http.Client, error)) *MockServerGetHTTPClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockImageServer is a mock of ImageServer interface.
type MockImageServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServerMockRecorder
}

// MockImageServerMockRecorder is the mock recorder for MockImageServer.
type MockImageServerMockRecorder struct {
	mock *MockImageServer
}

// NewMockImageServer creates a new mock instance.
func NewMockImageServer(ctrl *gomock.Controller) *MockImageServer {
	mock := &MockImageServer{ctrl: ctrl}
	mock.recorder = &MockImageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServer) EXPECT() *MockImageServerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockImageServer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Disconnect mocks base method.
func (m *MockImageServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockImageServerMockRecorder) Disconnect() *MockImageServerDisconnectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockImageServer)(nil).Disconnect))
	return &MockImageServerDisconnectCall{Call: call}
}

// MockImageServerDisconnectCall wrap *gomock.Call
type MockImageServerDisconnectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerDisconnectCall) Return() *MockImageServerDisconnectCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerDisconnectCall) Do(f func()) *MockImageServerDisconnectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerDisconnectCall) DoAndReturn(f func()) *MockImageServerDisconnectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DoHTTP mocks base method.
func (m *MockImageServer) DoHTTP(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockImageServerMockRecorder) DoHTTP(arg0 any) *MockImageServerDoHTTPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockImageServer)(nil).DoHTTP), arg0)
	return &MockImageServerDoHTTPCall{Call: call}
}

// MockImageServerDoHTTPCall wrap *gomock.Call
type MockImageServerDoHTTPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerDoHTTPCall) Return(arg0 *http.Response, arg1 error) *MockImageServerDoHTTPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerDoHTTPCall) Do(f func(*http.Request) (*http.Response, error)) *MockImageServerDoHTTPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerDoHTTPCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockImageServerDoHTTPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportImage mocks base method.
func (m *MockImageServer) ExportImage(arg0 string, arg1 api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage.
func (mr *MockImageServerMockRecorder) ExportImage(arg0, arg1 any) *MockImageServerExportImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockImageServer)(nil).ExportImage), arg0, arg1)
	return &MockImageServerExportImageCall{Call: call}
}

// MockImageServerExportImageCall wrap *gomock.Call
type MockImageServerExportImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerExportImageCall) Return(arg0 lxd.Operation, arg1 error) *MockImageServerExportImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerExportImageCall) Do(f func(string, api.ImageExportPost) (lxd.Operation, error)) *MockImageServerExportImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerExportImageCall) DoAndReturn(f func(string, api.ImageExportPost) (lxd.Operation, error)) *MockImageServerExportImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConnectionInfo mocks base method.
func (m *MockImageServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockImageServerMockRecorder) GetConnectionInfo() *MockImageServerGetConnectionInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockImageServer)(nil).GetConnectionInfo))
	return &MockImageServerGetConnectionInfoCall{Call: call}
}

// MockImageServerGetConnectionInfoCall wrap *gomock.Call
type MockImageServerGetConnectionInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetConnectionInfoCall) Return(arg0 *lxd.ConnectionInfo, arg1 error) *MockImageServerGetConnectionInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetConnectionInfoCall) Do(f func() (*lxd.ConnectionInfo, error)) *MockImageServerGetConnectionInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetConnectionInfoCall) DoAndReturn(f func() (*lxd.ConnectionInfo, error)) *MockImageServerGetConnectionInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHTTPClient mocks base method.
func (m *MockImageServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockImageServerMockRecorder) GetHTTPClient() *MockImageServerGetHTTPClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockImageServer)(nil).GetHTTPClient))
	return &MockImageServerGetHTTPClientCall{Call: call}
}

// MockImageServerGetHTTPClientCall wrap *gomock.Call
type MockImageServerGetHTTPClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetHTTPClientCall) Return(arg0 *http.Client, arg1 error) *MockImageServerGetHTTPClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetHTTPClientCall) Do(f func() (*http.Client, error)) *MockImageServerGetHTTPClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetHTTPClientCall) DoAndReturn(f func() (*http.Client, error)) *MockImageServerGetHTTPClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImage mocks base method.
func (m *MockImageServer) GetImage(arg0 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageServerMockRecorder) GetImage(arg0 any) *MockImageServerGetImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageServer)(nil).GetImage), arg0)
	return &MockImageServerGetImageCall{Call: call}
}

// MockImageServerGetImageCall wrap *gomock.Call
type MockImageServerGetImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageCall) Return(arg0 *api.Image, arg1 string, arg2 error) *MockImageServerGetImageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageCall) Do(f func(string) (*api.Image, string, error)) *MockImageServerGetImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageCall) DoAndReturn(f func(string) (*api.Image, string, error)) *MockImageServerGetImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAlias mocks base method.
func (m *MockImageServer) GetImageAlias(arg0 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", arg0)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias.
func (mr *MockImageServerMockRecorder) GetImageAlias(arg0 any) *MockImageServerGetImageAliasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockImageServer)(nil).GetImageAlias), arg0)
	return &MockImageServerGetImageAliasCall{Call: call}
}

// MockImageServerGetImageAliasCall wrap *gomock.Call
type MockImageServerGetImageAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageAliasCall) Return(arg0 *api.ImageAliasesEntry, arg1 string, arg2 error) *MockImageServerGetImageAliasCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageAliasCall) Do(f func(string) (*api.ImageAliasesEntry, string, error)) *MockImageServerGetImageAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageAliasCall) DoAndReturn(f func(string) (*api.ImageAliasesEntry, string, error)) *MockImageServerGetImageAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliasArchitectures mocks base method.
func (m *MockImageServer) GetImageAliasArchitectures(arg0, arg1 string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", arg0, arg1)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures.
func (mr *MockImageServerMockRecorder) GetImageAliasArchitectures(arg0, arg1 any) *MockImageServerGetImageAliasArchitecturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasArchitectures), arg0, arg1)
	return &MockImageServerGetImageAliasArchitecturesCall{Call: call}
}

// MockImageServerGetImageAliasArchitecturesCall wrap *gomock.Call
type MockImageServerGetImageAliasArchitecturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageAliasArchitecturesCall) Return(arg0 map[string]*api.ImageAliasesEntry, arg1 error) *MockImageServerGetImageAliasArchitecturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageAliasArchitecturesCall) Do(f func(string, string) (map[string]*api.ImageAliasesEntry, error)) *MockImageServerGetImageAliasArchitecturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageAliasArchitecturesCall) DoAndReturn(f func(string, string) (map[string]*api.ImageAliasesEntry, error)) *MockImageServerGetImageAliasArchitecturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliasNames mocks base method.
func (m *MockImageServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames.
func (mr *MockImageServerMockRecorder) GetImageAliasNames() *MockImageServerGetImageAliasNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasNames))
	return &MockImageServerGetImageAliasNamesCall{Call: call}
}

// MockImageServerGetImageAliasNamesCall wrap *gomock.Call
type MockImageServerGetImageAliasNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageAliasNamesCall) Return(arg0 []string, arg1 error) *MockImageServerGetImageAliasNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageAliasNamesCall) Do(f func() ([]string, error)) *MockImageServerGetImageAliasNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageAliasNamesCall) DoAndReturn(f func() ([]string, error)) *MockImageServerGetImageAliasNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliasType mocks base method.
func (m *MockImageServer) GetImageAliasType(arg0, arg1 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", arg0, arg1)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType.
func (mr *MockImageServerMockRecorder) GetImageAliasType(arg0, arg1 any) *MockImageServerGetImageAliasTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasType), arg0, arg1)
	return &MockImageServerGetImageAliasTypeCall{Call: call}
}

// MockImageServerGetImageAliasTypeCall wrap *gomock.Call
type MockImageServerGetImageAliasTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageAliasTypeCall) Return(arg0 *api.ImageAliasesEntry, arg1 string, arg2 error) *MockImageServerGetImageAliasTypeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageAliasTypeCall) Do(f func(string, string) (*api.ImageAliasesEntry, string, error)) *MockImageServerGetImageAliasTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageAliasTypeCall) DoAndReturn(f func(string, string) (*api.ImageAliasesEntry, string, error)) *MockImageServerGetImageAliasTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliases mocks base method.
func (m *MockImageServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases.
func (mr *MockImageServerMockRecorder) GetImageAliases() *MockImageServerGetImageAliasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockImageServer)(nil).GetImageAliases))
	return &MockImageServerGetImageAliasesCall{Call: call}
}

// MockImageServerGetImageAliasesCall wrap *gomock.Call
type MockImageServerGetImageAliasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageAliasesCall) Return(arg0 []api.ImageAliasesEntry, arg1 error) *MockImageServerGetImageAliasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageAliasesCall) Do(f func() ([]api.ImageAliasesEntry, error)) *MockImageServerGetImageAliasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageAliasesCall) DoAndReturn(f func() ([]api.ImageAliasesEntry, error)) *MockImageServerGetImageAliasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageFile mocks base method.
func (m *MockImageServer) GetImageFile(arg0 string, arg1 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", arg0, arg1)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile.
func (mr *MockImageServerMockRecorder) GetImageFile(arg0, arg1 any) *MockImageServerGetImageFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockImageServer)(nil).GetImageFile), arg0, arg1)
	return &MockImageServerGetImageFileCall{Call: call}
}

// MockImageServerGetImageFileCall wrap *gomock.Call
type MockImageServerGetImageFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageFileCall) Return(arg0 *lxd.ImageFileResponse, arg1 error) *MockImageServerGetImageFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageFileCall) Do(f func(string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockImageServerGetImageFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageFileCall) DoAndReturn(f func(string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockImageServerGetImageFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageFingerprints mocks base method.
func (m *MockImageServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints.
func (mr *MockImageServerMockRecorder) GetImageFingerprints() *MockImageServerGetImageFingerprintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockImageServer)(nil).GetImageFingerprints))
	return &MockImageServerGetImageFingerprintsCall{Call: call}
}

// MockImageServerGetImageFingerprintsCall wrap *gomock.Call
type MockImageServerGetImageFingerprintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageFingerprintsCall) Return(arg0 []string, arg1 error) *MockImageServerGetImageFingerprintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageFingerprintsCall) Do(f func() ([]string, error)) *MockImageServerGetImageFingerprintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageFingerprintsCall) DoAndReturn(f func() ([]string, error)) *MockImageServerGetImageFingerprintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageSecret mocks base method.
func (m *MockImageServer) GetImageSecret(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret.
func (mr *MockImageServerMockRecorder) GetImageSecret(arg0 any) *MockImageServerGetImageSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockImageServer)(nil).GetImageSecret), arg0)
	return &MockImageServerGetImageSecretCall{Call: call}
}

// MockImageServerGetImageSecretCall wrap *gomock.Call
type MockImageServerGetImageSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImageSecretCall) Return(arg0 string, arg1 error) *MockImageServerGetImageSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImageSecretCall) Do(f func(string) (string, error)) *MockImageServerGetImageSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImageSecretCall) DoAndReturn(f func(string) (string, error)) *MockImageServerGetImageSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImages mocks base method.
func (m *MockImageServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockImageServerMockRecorder) GetImages() *MockImageServerGetImagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockImageServer)(nil).GetImages))
	return &MockImageServerGetImagesCall{Call: call}
}

// MockImageServerGetImagesCall wrap *gomock.Call
type MockImageServerGetImagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImagesCall) Return(arg0 []api.Image, arg1 error) *MockImageServerGetImagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImagesCall) Do(f func() ([]api.Image, error)) *MockImageServerGetImagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImagesCall) DoAndReturn(f func() ([]api.Image, error)) *MockImageServerGetImagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImagesWithFilter mocks base method.
func (m *MockImageServer) GetImagesWithFilter(arg0 []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesWithFilter", arg0)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesWithFilter indicates an expected call of GetImagesWithFilter.
func (mr *MockImageServerMockRecorder) GetImagesWithFilter(arg0 any) *MockImageServerGetImagesWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesWithFilter", reflect.TypeOf((*MockImageServer)(nil).GetImagesWithFilter), arg0)
	return &MockImageServerGetImagesWithFilterCall{Call: call}
}

// MockImageServerGetImagesWithFilterCall wrap *gomock.Call
type MockImageServerGetImagesWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetImagesWithFilterCall) Return(arg0 []api.Image, arg1 error) *MockImageServerGetImagesWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetImagesWithFilterCall) Do(f func([]string) ([]api.Image, error)) *MockImageServerGetImagesWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetImagesWithFilterCall) DoAndReturn(f func([]string) ([]api.Image, error)) *MockImageServerGetImagesWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrivateImage mocks base method.
func (m *MockImageServer) GetPrivateImage(arg0, arg1 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage.
func (mr *MockImageServerMockRecorder) GetPrivateImage(arg0, arg1 any) *MockImageServerGetPrivateImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImage), arg0, arg1)
	return &MockImageServerGetPrivateImageCall{Call: call}
}

// MockImageServerGetPrivateImageCall wrap *gomock.Call
type MockImageServerGetPrivateImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetPrivateImageCall) Return(arg0 *api.Image, arg1 string, arg2 error) *MockImageServerGetPrivateImageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetPrivateImageCall) Do(f func(string, string) (*api.Image, string, error)) *MockImageServerGetPrivateImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetPrivateImageCall) DoAndReturn(f func(string, string) (*api.Image, string, error)) *MockImageServerGetPrivateImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrivateImageFile mocks base method.
func (m *MockImageServer) GetPrivateImageFile(arg0, arg1 string, arg2 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile.
func (mr *MockImageServerMockRecorder) GetPrivateImageFile(arg0, arg1, arg2 any) *MockImageServerGetPrivateImageFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImageFile), arg0, arg1, arg2)
	return &MockImageServerGetPrivateImageFileCall{Call: call}
}

// MockImageServerGetPrivateImageFileCall wrap *gomock.Call
type MockImageServerGetPrivateImageFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImageServerGetPrivateImageFileCall) Return(arg0 *lxd.ImageFileResponse, arg1 error) *MockImageServerGetPrivateImageFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImageServerGetPrivateImageFileCall) Do(f func(string, string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockImageServerGetPrivateImageFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImageServerGetPrivateImageFileCall) DoAndReturn(f func(string, string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockImageServerGetPrivateImageFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstanceServer is a mock of InstanceServer interface.
type MockInstanceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServerMockRecorder
}

// MockInstanceServerMockRecorder is the mock recorder for MockInstanceServer.
type MockInstanceServerMockRecorder struct {
	mock *MockInstanceServer
}

// NewMockInstanceServer creates a new mock instance.
func NewMockInstanceServer(ctrl *gomock.Controller) *MockInstanceServer {
	mock := &MockInstanceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceServer) EXPECT() *MockInstanceServerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstanceServer) ISGOMOCK() struct{} {
	return struct{}{}
}

// ConsoleContainer mocks base method.
func (m *MockInstanceServer) ConsoleContainer(arg0 string, arg1 api.ContainerConsolePost, arg2 *lxd.ContainerConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleContainer indicates an expected call of ConsoleContainer.
func (mr *MockInstanceServerMockRecorder) ConsoleContainer(arg0, arg1, arg2 any) *MockInstanceServerConsoleContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleContainer", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleContainer), arg0, arg1, arg2)
	return &MockInstanceServerConsoleContainerCall{Call: call}
}

// MockInstanceServerConsoleContainerCall wrap *gomock.Call
type MockInstanceServerConsoleContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerConsoleContainerCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerConsoleContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerConsoleContainerCall) Do(f func(string, api.ContainerConsolePost, *lxd.ContainerConsoleArgs) (lxd.Operation, error)) *MockInstanceServerConsoleContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerConsoleContainerCall) DoAndReturn(f func(string, api.ContainerConsolePost, *lxd.ContainerConsoleArgs) (lxd.Operation, error)) *MockInstanceServerConsoleContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsoleInstance mocks base method.
func (m *MockInstanceServer) ConsoleInstance(arg0 string, arg1 api.InstanceConsolePost, arg2 *lxd.InstanceConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleInstance indicates an expected call of ConsoleInstance.
func (mr *MockInstanceServerMockRecorder) ConsoleInstance(arg0, arg1, arg2 any) *MockInstanceServerConsoleInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstance", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstance), arg0, arg1, arg2)
	return &MockInstanceServerConsoleInstanceCall{Call: call}
}

// MockInstanceServerConsoleInstanceCall wrap *gomock.Call
type MockInstanceServerConsoleInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerConsoleInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerConsoleInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerConsoleInstanceCall) Do(f func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) (lxd.Operation, error)) *MockInstanceServerConsoleInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerConsoleInstanceCall) DoAndReturn(f func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) (lxd.Operation, error)) *MockInstanceServerConsoleInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsoleInstanceDynamic mocks base method.
func (m *MockInstanceServer) ConsoleInstanceDynamic(arg0 string, arg1 api.InstanceConsolePost, arg2 *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstanceDynamic", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(func(io.ReadWriteCloser) error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConsoleInstanceDynamic indicates an expected call of ConsoleInstanceDynamic.
func (mr *MockInstanceServerMockRecorder) ConsoleInstanceDynamic(arg0, arg1, arg2 any) *MockInstanceServerConsoleInstanceDynamicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstanceDynamic", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstanceDynamic), arg0, arg1, arg2)
	return &MockInstanceServerConsoleInstanceDynamicCall{Call: call}
}

// MockInstanceServerConsoleInstanceDynamicCall wrap *gomock.Call
type MockInstanceServerConsoleInstanceDynamicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerConsoleInstanceDynamicCall) Return(arg0 lxd.Operation, arg1 func(io.ReadWriteCloser) error, arg2 error) *MockInstanceServerConsoleInstanceDynamicCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerConsoleInstanceDynamicCall) Do(f func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error)) *MockInstanceServerConsoleInstanceDynamicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerConsoleInstanceDynamicCall) DoAndReturn(f func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error)) *MockInstanceServerConsoleInstanceDynamicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyContainer mocks base method.
func (m *MockInstanceServer) CopyContainer(arg0 lxd.InstanceServer, arg1 api.Container, arg2 *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainer indicates an expected call of CopyContainer.
func (mr *MockInstanceServerMockRecorder) CopyContainer(arg0, arg1, arg2 any) *MockInstanceServerCopyContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainer", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainer), arg0, arg1, arg2)
	return &MockInstanceServerCopyContainerCall{Call: call}
}

// MockInstanceServerCopyContainerCall wrap *gomock.Call
type MockInstanceServerCopyContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCopyContainerCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCopyContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCopyContainerCall) Do(f func(lxd.InstanceServer, api.Container, *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCopyContainerCall) DoAndReturn(f func(lxd.InstanceServer, api.Container, *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyContainerSnapshot mocks base method.
func (m *MockInstanceServer) CopyContainerSnapshot(arg0 lxd.InstanceServer, arg1 string, arg2 api.ContainerSnapshot, arg3 *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainerSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainerSnapshot indicates an expected call of CopyContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) CopyContainerSnapshot(arg0, arg1, arg2, arg3 any) *MockInstanceServerCopyContainerSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainerSnapshot), arg0, arg1, arg2, arg3)
	return &MockInstanceServerCopyContainerSnapshotCall{Call: call}
}

// MockInstanceServerCopyContainerSnapshotCall wrap *gomock.Call
type MockInstanceServerCopyContainerSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCopyContainerSnapshotCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCopyContainerSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCopyContainerSnapshotCall) Do(f func(lxd.InstanceServer, string, api.ContainerSnapshot, *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyContainerSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCopyContainerSnapshotCall) DoAndReturn(f func(lxd.InstanceServer, string, api.ContainerSnapshot, *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyContainerSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyImage mocks base method.
func (m *MockInstanceServer) CopyImage(arg0 lxd.ImageServer, arg1 api.Image, arg2 *lxd.ImageCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImage indicates an expected call of CopyImage.
func (mr *MockInstanceServerMockRecorder) CopyImage(arg0, arg1, arg2 any) *MockInstanceServerCopyImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImage", reflect.TypeOf((*MockInstanceServer)(nil).CopyImage), arg0, arg1, arg2)
	return &MockInstanceServerCopyImageCall{Call: call}
}

// MockInstanceServerCopyImageCall wrap *gomock.Call
type MockInstanceServerCopyImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCopyImageCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCopyImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCopyImageCall) Do(f func(lxd.ImageServer, api.Image, *lxd.ImageCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCopyImageCall) DoAndReturn(f func(lxd.ImageServer, api.Image, *lxd.ImageCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyInstance mocks base method.
func (m *MockInstanceServer) CopyInstance(arg0 lxd.InstanceServer, arg1 api.Instance, arg2 *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstance indicates an expected call of CopyInstance.
func (mr *MockInstanceServerMockRecorder) CopyInstance(arg0, arg1, arg2 any) *MockInstanceServerCopyInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstance", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstance), arg0, arg1, arg2)
	return &MockInstanceServerCopyInstanceCall{Call: call}
}

// MockInstanceServerCopyInstanceCall wrap *gomock.Call
type MockInstanceServerCopyInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCopyInstanceCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCopyInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCopyInstanceCall) Do(f func(lxd.InstanceServer, api.Instance, *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCopyInstanceCall) DoAndReturn(f func(lxd.InstanceServer, api.Instance, *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyInstanceSnapshot mocks base method.
func (m *MockInstanceServer) CopyInstanceSnapshot(arg0 lxd.InstanceServer, arg1 string, arg2 api.InstanceSnapshot, arg3 *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstanceSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstanceSnapshot indicates an expected call of CopyInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) CopyInstanceSnapshot(arg0, arg1, arg2, arg3 any) *MockInstanceServerCopyInstanceSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstanceSnapshot), arg0, arg1, arg2, arg3)
	return &MockInstanceServerCopyInstanceSnapshotCall{Call: call}
}

// MockInstanceServerCopyInstanceSnapshotCall wrap *gomock.Call
type MockInstanceServerCopyInstanceSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCopyInstanceSnapshotCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCopyInstanceSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCopyInstanceSnapshotCall) Do(f func(lxd.InstanceServer, string, api.InstanceSnapshot, *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyInstanceSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCopyInstanceSnapshotCall) DoAndReturn(f func(lxd.InstanceServer, string, api.InstanceSnapshot, *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyInstanceSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyStoragePoolVolume mocks base method.
func (m *MockInstanceServer) CopyStoragePoolVolume(arg0 string, arg1 lxd.InstanceServer, arg2 string, arg3 api.StorageVolume, arg4 *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyStoragePoolVolume indicates an expected call of CopyStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) CopyStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 any) *MockInstanceServerCopyStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CopyStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
	return &MockInstanceServerCopyStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerCopyStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerCopyStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCopyStoragePoolVolumeCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCopyStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCopyStoragePoolVolumeCall) Do(f func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCopyStoragePoolVolumeCall) DoAndReturn(f func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error)) *MockInstanceServerCopyStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateAuthGroup mocks base method.
func (m *MockInstanceServer) CreateAuthGroup(arg0 api.AuthGroupsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthGroup indicates an expected call of CreateAuthGroup.
func (mr *MockInstanceServerMockRecorder) CreateAuthGroup(arg0 any) *MockInstanceServerCreateAuthGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).CreateAuthGroup), arg0)
	return &MockInstanceServerCreateAuthGroupCall{Call: call}
}

// MockInstanceServerCreateAuthGroupCall wrap *gomock.Call
type MockInstanceServerCreateAuthGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateAuthGroupCall) Return(arg0 error) *MockInstanceServerCreateAuthGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateAuthGroupCall) Do(f func(api.AuthGroupsPost) error) *MockInstanceServerCreateAuthGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateAuthGroupCall) DoAndReturn(f func(api.AuthGroupsPost) error) *MockInstanceServerCreateAuthGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCertificate mocks base method.
func (m *MockInstanceServer) CreateCertificate(arg0 api.CertificatesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockInstanceServerMockRecorder) CreateCertificate(arg0 any) *MockInstanceServerCreateCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificate), arg0)
	return &MockInstanceServerCreateCertificateCall{Call: call}
}

// MockInstanceServerCreateCertificateCall wrap *gomock.Call
type MockInstanceServerCreateCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateCertificateCall) Return(arg0 error) *MockInstanceServerCreateCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateCertificateCall) Do(f func(api.CertificatesPost) error) *MockInstanceServerCreateCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateCertificateCall) DoAndReturn(f func(api.CertificatesPost) error) *MockInstanceServerCreateCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCertificateToken mocks base method.
func (m *MockInstanceServer) CreateCertificateToken(arg0 api.CertificatesPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateToken", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateToken indicates an expected call of CreateCertificateToken.
func (mr *MockInstanceServerMockRecorder) CreateCertificateToken(arg0 any) *MockInstanceServerCreateCertificateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateToken", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificateToken), arg0)
	return &MockInstanceServerCreateCertificateTokenCall{Call: call}
}

// MockInstanceServerCreateCertificateTokenCall wrap *gomock.Call
type MockInstanceServerCreateCertificateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateCertificateTokenCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateCertificateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateCertificateTokenCall) Do(f func(api.CertificatesPost) (lxd.Operation, error)) *MockInstanceServerCreateCertificateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateCertificateTokenCall) DoAndReturn(f func(api.CertificatesPost) (lxd.Operation, error)) *MockInstanceServerCreateCertificateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateClusterGroup mocks base method.
func (m *MockInstanceServer) CreateClusterGroup(arg0 api.ClusterGroupsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterGroup indicates an expected call of CreateClusterGroup.
func (mr *MockInstanceServerMockRecorder) CreateClusterGroup(arg0 any) *MockInstanceServerCreateClusterGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).CreateClusterGroup), arg0)
	return &MockInstanceServerCreateClusterGroupCall{Call: call}
}

// MockInstanceServerCreateClusterGroupCall wrap *gomock.Call
type MockInstanceServerCreateClusterGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateClusterGroupCall) Return(arg0 error) *MockInstanceServerCreateClusterGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateClusterGroupCall) Do(f func(api.ClusterGroupsPost) error) *MockInstanceServerCreateClusterGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateClusterGroupCall) DoAndReturn(f func(api.ClusterGroupsPost) error) *MockInstanceServerCreateClusterGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateClusterMember mocks base method.
func (m *MockInstanceServer) CreateClusterMember(arg0 api.ClusterMembersPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterMember", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterMember indicates an expected call of CreateClusterMember.
func (mr *MockInstanceServerMockRecorder) CreateClusterMember(arg0 any) *MockInstanceServerCreateClusterMemberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).CreateClusterMember), arg0)
	return &MockInstanceServerCreateClusterMemberCall{Call: call}
}

// MockInstanceServerCreateClusterMemberCall wrap *gomock.Call
type MockInstanceServerCreateClusterMemberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateClusterMemberCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateClusterMemberCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateClusterMemberCall) Do(f func(api.ClusterMembersPost) (lxd.Operation, error)) *MockInstanceServerCreateClusterMemberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateClusterMemberCall) DoAndReturn(f func(api.ClusterMembersPost) (lxd.Operation, error)) *MockInstanceServerCreateClusterMemberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainer mocks base method.
func (m *MockInstanceServer) CreateContainer(arg0 api.ContainersPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockInstanceServerMockRecorder) CreateContainer(arg0 any) *MockInstanceServerCreateContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainer), arg0)
	return &MockInstanceServerCreateContainerCall{Call: call}
}

// MockInstanceServerCreateContainerCall wrap *gomock.Call
type MockInstanceServerCreateContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateContainerCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateContainerCall) Do(f func(api.ContainersPost) (lxd.Operation, error)) *MockInstanceServerCreateContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateContainerCall) DoAndReturn(f func(api.ContainersPost) (lxd.Operation, error)) *MockInstanceServerCreateContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainerBackup mocks base method.
func (m *MockInstanceServer) CreateContainerBackup(arg0 string, arg1 api.ContainerBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerBackup indicates an expected call of CreateContainerBackup.
func (mr *MockInstanceServerMockRecorder) CreateContainerBackup(arg0, arg1 any) *MockInstanceServerCreateContainerBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerBackup), arg0, arg1)
	return &MockInstanceServerCreateContainerBackupCall{Call: call}
}

// MockInstanceServerCreateContainerBackupCall wrap *gomock.Call
type MockInstanceServerCreateContainerBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateContainerBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateContainerBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateContainerBackupCall) Do(f func(string, api.ContainerBackupsPost) (lxd.Operation, error)) *MockInstanceServerCreateContainerBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateContainerBackupCall) DoAndReturn(f func(string, api.ContainerBackupsPost) (lxd.Operation, error)) *MockInstanceServerCreateContainerBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainerFile mocks base method.
func (m *MockInstanceServer) CreateContainerFile(arg0, arg1 string, arg2 lxd.ContainerFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerFile indicates an expected call of CreateContainerFile.
func (mr *MockInstanceServerMockRecorder) CreateContainerFile(arg0, arg1, arg2 any) *MockInstanceServerCreateContainerFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFile), arg0, arg1, arg2)
	return &MockInstanceServerCreateContainerFileCall{Call: call}
}

// MockInstanceServerCreateContainerFileCall wrap *gomock.Call
type MockInstanceServerCreateContainerFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateContainerFileCall) Return(arg0 error) *MockInstanceServerCreateContainerFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateContainerFileCall) Do(f func(string, string, lxd.ContainerFileArgs) error) *MockInstanceServerCreateContainerFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateContainerFileCall) DoAndReturn(f func(string, string, lxd.ContainerFileArgs) error) *MockInstanceServerCreateContainerFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainerFromBackup mocks base method.
func (m *MockInstanceServer) CreateContainerFromBackup(arg0 lxd.ContainerBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromBackup", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromBackup indicates an expected call of CreateContainerFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateContainerFromBackup(arg0 any) *MockInstanceServerCreateContainerFromBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromBackup), arg0)
	return &MockInstanceServerCreateContainerFromBackupCall{Call: call}
}

// MockInstanceServerCreateContainerFromBackupCall wrap *gomock.Call
type MockInstanceServerCreateContainerFromBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateContainerFromBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateContainerFromBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateContainerFromBackupCall) Do(f func(lxd.ContainerBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateContainerFromBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateContainerFromBackupCall) DoAndReturn(f func(lxd.ContainerBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateContainerFromBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainerFromImage mocks base method.
func (m *MockInstanceServer) CreateContainerFromImage(arg0 lxd.ImageServer, arg1 api.Image, arg2 api.ContainersPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromImage indicates an expected call of CreateContainerFromImage.
func (mr *MockInstanceServerMockRecorder) CreateContainerFromImage(arg0, arg1, arg2 any) *MockInstanceServerCreateContainerFromImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromImage), arg0, arg1, arg2)
	return &MockInstanceServerCreateContainerFromImageCall{Call: call}
}

// MockInstanceServerCreateContainerFromImageCall wrap *gomock.Call
type MockInstanceServerCreateContainerFromImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateContainerFromImageCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCreateContainerFromImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateContainerFromImageCall) Do(f func(lxd.ImageServer, api.Image, api.ContainersPost) (lxd.RemoteOperation, error)) *MockInstanceServerCreateContainerFromImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateContainerFromImageCall) DoAndReturn(f func(lxd.ImageServer, api.Image, api.ContainersPost) (lxd.RemoteOperation, error)) *MockInstanceServerCreateContainerFromImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainerSnapshot mocks base method.
func (m *MockInstanceServer) CreateContainerSnapshot(arg0 string, arg1 api.ContainerSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerSnapshot indicates an expected call of CreateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateContainerSnapshot(arg0, arg1 any) *MockInstanceServerCreateContainerSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerSnapshot), arg0, arg1)
	return &MockInstanceServerCreateContainerSnapshotCall{Call: call}
}

// MockInstanceServerCreateContainerSnapshotCall wrap *gomock.Call
type MockInstanceServerCreateContainerSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateContainerSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateContainerSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateContainerSnapshotCall) Do(f func(string, api.ContainerSnapshotsPost) (lxd.Operation, error)) *MockInstanceServerCreateContainerSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateContainerSnapshotCall) DoAndReturn(f func(string, api.ContainerSnapshotsPost) (lxd.Operation, error)) *MockInstanceServerCreateContainerSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainerTemplateFile mocks base method.
func (m *MockInstanceServer) CreateContainerTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerTemplateFile indicates an expected call of CreateContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) CreateContainerTemplateFile(arg0, arg1, arg2 any) *MockInstanceServerCreateContainerTemplateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerTemplateFile), arg0, arg1, arg2)
	return &MockInstanceServerCreateContainerTemplateFileCall{Call: call}
}

// MockInstanceServerCreateContainerTemplateFileCall wrap *gomock.Call
type MockInstanceServerCreateContainerTemplateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateContainerTemplateFileCall) Return(arg0 error) *MockInstanceServerCreateContainerTemplateFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateContainerTemplateFileCall) Do(f func(string, string, io.ReadSeeker) error) *MockInstanceServerCreateContainerTemplateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateContainerTemplateFileCall) DoAndReturn(f func(string, string, io.ReadSeeker) error) *MockInstanceServerCreateContainerTemplateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) CreateIdentityProviderGroup(arg0 api.IdentityProviderGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProviderGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentityProviderGroup indicates an expected call of CreateIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) CreateIdentityProviderGroup(arg0 any) *MockInstanceServerCreateIdentityProviderGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).CreateIdentityProviderGroup), arg0)
	return &MockInstanceServerCreateIdentityProviderGroupCall{Call: call}
}

// MockInstanceServerCreateIdentityProviderGroupCall wrap *gomock.Call
type MockInstanceServerCreateIdentityProviderGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateIdentityProviderGroupCall) Return(arg0 error) *MockInstanceServerCreateIdentityProviderGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateIdentityProviderGroupCall) Do(f func(api.IdentityProviderGroup) error) *MockInstanceServerCreateIdentityProviderGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateIdentityProviderGroupCall) DoAndReturn(f func(api.IdentityProviderGroup) error) *MockInstanceServerCreateIdentityProviderGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateImage mocks base method.
func (m *MockInstanceServer) CreateImage(arg0 api.ImagesPost, arg1 *lxd.ImageCreateArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockInstanceServerMockRecorder) CreateImage(arg0, arg1 any) *MockInstanceServerCreateImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateImage), arg0, arg1)
	return &MockInstanceServerCreateImageCall{Call: call}
}

// MockInstanceServerCreateImageCall wrap *gomock.Call
type MockInstanceServerCreateImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateImageCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateImageCall) Do(f func(api.ImagesPost, *lxd.ImageCreateArgs) (lxd.Operation, error)) *MockInstanceServerCreateImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateImageCall) DoAndReturn(f func(api.ImagesPost, *lxd.ImageCreateArgs) (lxd.Operation, error)) *MockInstanceServerCreateImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateImageAlias mocks base method.
func (m *MockInstanceServer) CreateImageAlias(arg0 api.ImageAliasesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlias", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlias indicates an expected call of CreateImageAlias.
func (mr *MockInstanceServerMockRecorder) CreateImageAlias(arg0 any) *MockInstanceServerCreateImageAliasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageAlias), arg0)
	return &MockInstanceServerCreateImageAliasCall{Call: call}
}

// MockInstanceServerCreateImageAliasCall wrap *gomock.Call
type MockInstanceServerCreateImageAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateImageAliasCall) Return(arg0 error) *MockInstanceServerCreateImageAliasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateImageAliasCall) Do(f func(api.ImageAliasesPost) error) *MockInstanceServerCreateImageAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateImageAliasCall) DoAndReturn(f func(api.ImageAliasesPost) error) *MockInstanceServerCreateImageAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateImageSecret mocks base method.
func (m *MockInstanceServer) CreateImageSecret(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageSecret", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageSecret indicates an expected call of CreateImageSecret.
func (mr *MockInstanceServerMockRecorder) CreateImageSecret(arg0 any) *MockInstanceServerCreateImageSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageSecret), arg0)
	return &MockInstanceServerCreateImageSecretCall{Call: call}
}

// MockInstanceServerCreateImageSecretCall wrap *gomock.Call
type MockInstanceServerCreateImageSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateImageSecretCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateImageSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateImageSecretCall) Do(f func(string) (lxd.Operation, error)) *MockInstanceServerCreateImageSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateImageSecretCall) DoAndReturn(f func(string) (lxd.Operation, error)) *MockInstanceServerCreateImageSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInstance mocks base method.
func (m *MockInstanceServer) CreateInstance(arg0 api.InstancesPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockInstanceServerMockRecorder) CreateInstance(arg0 any) *MockInstanceServerCreateInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstance), arg0)
	return &MockInstanceServerCreateInstanceCall{Call: call}
}

// MockInstanceServerCreateInstanceCall wrap *gomock.Call
type MockInstanceServerCreateInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateInstanceCall) Do(f func(api.InstancesPost) (lxd.Operation, error)) *MockInstanceServerCreateInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateInstanceCall) DoAndReturn(f func(api.InstancesPost) (lxd.Operation, error)) *MockInstanceServerCreateInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInstanceBackup mocks base method.
func (m *MockInstanceServer) CreateInstanceBackup(arg0 string, arg1 api.InstanceBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceBackup indicates an expected call of CreateInstanceBackup.
func (mr *MockInstanceServerMockRecorder) CreateInstanceBackup(arg0, arg1 any) *MockInstanceServerCreateInstanceBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceBackup), arg0, arg1)
	return &MockInstanceServerCreateInstanceBackupCall{Call: call}
}

// MockInstanceServerCreateInstanceBackupCall wrap *gomock.Call
type MockInstanceServerCreateInstanceBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateInstanceBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateInstanceBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateInstanceBackupCall) Do(f func(string, api.InstanceBackupsPost) (lxd.Operation, error)) *MockInstanceServerCreateInstanceBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateInstanceBackupCall) DoAndReturn(f func(string, api.InstanceBackupsPost) (lxd.Operation, error)) *MockInstanceServerCreateInstanceBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInstanceFile mocks base method.
func (m *MockInstanceServer) CreateInstanceFile(arg0, arg1 string, arg2 lxd.InstanceFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceFile indicates an expected call of CreateInstanceFile.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFile(arg0, arg1, arg2 any) *MockInstanceServerCreateInstanceFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFile), arg0, arg1, arg2)
	return &MockInstanceServerCreateInstanceFileCall{Call: call}
}

// MockInstanceServerCreateInstanceFileCall wrap *gomock.Call
type MockInstanceServerCreateInstanceFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateInstanceFileCall) Return(arg0 error) *MockInstanceServerCreateInstanceFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateInstanceFileCall) Do(f func(string, string, lxd.InstanceFileArgs) error) *MockInstanceServerCreateInstanceFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateInstanceFileCall) DoAndReturn(f func(string, string, lxd.InstanceFileArgs) error) *MockInstanceServerCreateInstanceFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInstanceFromBackup mocks base method.
func (m *MockInstanceServer) CreateInstanceFromBackup(arg0 lxd.InstanceBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromBackup", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromBackup indicates an expected call of CreateInstanceFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromBackup(arg0 any) *MockInstanceServerCreateInstanceFromBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromBackup), arg0)
	return &MockInstanceServerCreateInstanceFromBackupCall{Call: call}
}

// MockInstanceServerCreateInstanceFromBackupCall wrap *gomock.Call
type MockInstanceServerCreateInstanceFromBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateInstanceFromBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateInstanceFromBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateInstanceFromBackupCall) Do(f func(lxd.InstanceBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateInstanceFromBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateInstanceFromBackupCall) DoAndReturn(f func(lxd.InstanceBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateInstanceFromBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInstanceFromImage mocks base method.
func (m *MockInstanceServer) CreateInstanceFromImage(arg0 lxd.ImageServer, arg1 api.Image, arg2 api.InstancesPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromImage indicates an expected call of CreateInstanceFromImage.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromImage(arg0, arg1, arg2 any) *MockInstanceServerCreateInstanceFromImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromImage), arg0, arg1, arg2)
	return &MockInstanceServerCreateInstanceFromImageCall{Call: call}
}

// MockInstanceServerCreateInstanceFromImageCall wrap *gomock.Call
type MockInstanceServerCreateInstanceFromImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateInstanceFromImageCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerCreateInstanceFromImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateInstanceFromImageCall) Do(f func(lxd.ImageServer, api.Image, api.InstancesPost) (lxd.RemoteOperation, error)) *MockInstanceServerCreateInstanceFromImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateInstanceFromImageCall) DoAndReturn(f func(lxd.ImageServer, api.Image, api.InstancesPost) (lxd.RemoteOperation, error)) *MockInstanceServerCreateInstanceFromImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) CreateInstanceSnapshot(arg0 string, arg1 api.InstanceSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceSnapshot indicates an expected call of CreateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateInstanceSnapshot(arg0, arg1 any) *MockInstanceServerCreateInstanceSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceSnapshot), arg0, arg1)
	return &MockInstanceServerCreateInstanceSnapshotCall{Call: call}
}

// MockInstanceServerCreateInstanceSnapshotCall wrap *gomock.Call
type MockInstanceServerCreateInstanceSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateInstanceSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateInstanceSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateInstanceSnapshotCall) Do(f func(string, api.InstanceSnapshotsPost) (lxd.Operation, error)) *MockInstanceServerCreateInstanceSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateInstanceSnapshotCall) DoAndReturn(f func(string, api.InstanceSnapshotsPost) (lxd.Operation, error)) *MockInstanceServerCreateInstanceSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) CreateInstanceTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceTemplateFile indicates an expected call of CreateInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) CreateInstanceTemplateFile(arg0, arg1, arg2 any) *MockInstanceServerCreateInstanceTemplateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceTemplateFile), arg0, arg1, arg2)
	return &MockInstanceServerCreateInstanceTemplateFileCall{Call: call}
}

// MockInstanceServerCreateInstanceTemplateFileCall wrap *gomock.Call
type MockInstanceServerCreateInstanceTemplateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateInstanceTemplateFileCall) Return(arg0 error) *MockInstanceServerCreateInstanceTemplateFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateInstanceTemplateFileCall) Do(f func(string, string, io.ReadSeeker) error) *MockInstanceServerCreateInstanceTemplateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateInstanceTemplateFileCall) DoAndReturn(f func(string, string, io.ReadSeeker) error) *MockInstanceServerCreateInstanceTemplateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNetwork mocks base method.
func (m *MockInstanceServer) CreateNetwork(arg0 api.NetworksPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockInstanceServerMockRecorder) CreateNetwork(arg0 any) *MockInstanceServerCreateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetwork), arg0)
	return &MockInstanceServerCreateNetworkCall{Call: call}
}

// MockInstanceServerCreateNetworkCall wrap *gomock.Call
type MockInstanceServerCreateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateNetworkCall) Return(arg0 error) *MockInstanceServerCreateNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateNetworkCall) Do(f func(api.NetworksPost) error) *MockInstanceServerCreateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateNetworkCall) DoAndReturn(f func(api.NetworksPost) error) *MockInstanceServerCreateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNetworkACL mocks base method.
func (m *MockInstanceServer) CreateNetworkACL(arg0 api.NetworkACLsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkACL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkACL indicates an expected call of CreateNetworkACL.
func (mr *MockInstanceServerMockRecorder) CreateNetworkACL(arg0 any) *MockInstanceServerCreateNetworkACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkACL), arg0)
	return &MockInstanceServerCreateNetworkACLCall{Call: call}
}

// MockInstanceServerCreateNetworkACLCall wrap *gomock.Call
type MockInstanceServerCreateNetworkACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateNetworkACLCall) Return(arg0 error) *MockInstanceServerCreateNetworkACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateNetworkACLCall) Do(f func(api.NetworkACLsPost) error) *MockInstanceServerCreateNetworkACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateNetworkACLCall) DoAndReturn(f func(api.NetworkACLsPost) error) *MockInstanceServerCreateNetworkACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNetworkForward mocks base method.
func (m *MockInstanceServer) CreateNetworkForward(arg0 string, arg1 api.NetworkForwardsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkForward", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkForward indicates an expected call of CreateNetworkForward.
func (mr *MockInstanceServerMockRecorder) CreateNetworkForward(arg0, arg1 any) *MockInstanceServerCreateNetworkForwardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkForward), arg0, arg1)
	return &MockInstanceServerCreateNetworkForwardCall{Call: call}
}

// MockInstanceServerCreateNetworkForwardCall wrap *gomock.Call
type MockInstanceServerCreateNetworkForwardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateNetworkForwardCall) Return(arg0 error) *MockInstanceServerCreateNetworkForwardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateNetworkForwardCall) Do(f func(string, api.NetworkForwardsPost) error) *MockInstanceServerCreateNetworkForwardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateNetworkForwardCall) DoAndReturn(f func(string, api.NetworkForwardsPost) error) *MockInstanceServerCreateNetworkForwardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) CreateNetworkLoadBalancer(arg0 string, arg1 api.NetworkLoadBalancersPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkLoadBalancer indicates an expected call of CreateNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) CreateNetworkLoadBalancer(arg0, arg1 any) *MockInstanceServerCreateNetworkLoadBalancerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkLoadBalancer), arg0, arg1)
	return &MockInstanceServerCreateNetworkLoadBalancerCall{Call: call}
}

// MockInstanceServerCreateNetworkLoadBalancerCall wrap *gomock.Call
type MockInstanceServerCreateNetworkLoadBalancerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateNetworkLoadBalancerCall) Return(arg0 error) *MockInstanceServerCreateNetworkLoadBalancerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateNetworkLoadBalancerCall) Do(f func(string, api.NetworkLoadBalancersPost) error) *MockInstanceServerCreateNetworkLoadBalancerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateNetworkLoadBalancerCall) DoAndReturn(f func(string, api.NetworkLoadBalancersPost) error) *MockInstanceServerCreateNetworkLoadBalancerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNetworkPeer mocks base method.
func (m *MockInstanceServer) CreateNetworkPeer(arg0 string, arg1 api.NetworkPeersPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkPeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkPeer indicates an expected call of CreateNetworkPeer.
func (mr *MockInstanceServerMockRecorder) CreateNetworkPeer(arg0, arg1 any) *MockInstanceServerCreateNetworkPeerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkPeer), arg0, arg1)
	return &MockInstanceServerCreateNetworkPeerCall{Call: call}
}

// MockInstanceServerCreateNetworkPeerCall wrap *gomock.Call
type MockInstanceServerCreateNetworkPeerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateNetworkPeerCall) Return(arg0 error) *MockInstanceServerCreateNetworkPeerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateNetworkPeerCall) Do(f func(string, api.NetworkPeersPost) error) *MockInstanceServerCreateNetworkPeerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateNetworkPeerCall) DoAndReturn(f func(string, api.NetworkPeersPost) error) *MockInstanceServerCreateNetworkPeerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNetworkZone mocks base method.
func (m *MockInstanceServer) CreateNetworkZone(arg0 api.NetworkZonesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkZone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkZone indicates an expected call of CreateNetworkZone.
func (mr *MockInstanceServerMockRecorder) CreateNetworkZone(arg0 any) *MockInstanceServerCreateNetworkZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkZone), arg0)
	return &MockInstanceServerCreateNetworkZoneCall{Call: call}
}

// MockInstanceServerCreateNetworkZoneCall wrap *gomock.Call
type MockInstanceServerCreateNetworkZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateNetworkZoneCall) Return(arg0 error) *MockInstanceServerCreateNetworkZoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateNetworkZoneCall) Do(f func(api.NetworkZonesPost) error) *MockInstanceServerCreateNetworkZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateNetworkZoneCall) DoAndReturn(f func(api.NetworkZonesPost) error) *MockInstanceServerCreateNetworkZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) CreateNetworkZoneRecord(arg0 string, arg1 api.NetworkZoneRecordsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkZoneRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkZoneRecord indicates an expected call of CreateNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) CreateNetworkZoneRecord(arg0, arg1 any) *MockInstanceServerCreateNetworkZoneRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkZoneRecord), arg0, arg1)
	return &MockInstanceServerCreateNetworkZoneRecordCall{Call: call}
}

// MockInstanceServerCreateNetworkZoneRecordCall wrap *gomock.Call
type MockInstanceServerCreateNetworkZoneRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateNetworkZoneRecordCall) Return(arg0 error) *MockInstanceServerCreateNetworkZoneRecordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateNetworkZoneRecordCall) Do(f func(string, api.NetworkZoneRecordsPost) error) *MockInstanceServerCreateNetworkZoneRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateNetworkZoneRecordCall) DoAndReturn(f func(string, api.NetworkZoneRecordsPost) error) *MockInstanceServerCreateNetworkZoneRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateProfile mocks base method.
func (m *MockInstanceServer) CreateProfile(arg0 api.ProfilesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockInstanceServerMockRecorder) CreateProfile(arg0 any) *MockInstanceServerCreateProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockInstanceServer)(nil).CreateProfile), arg0)
	return &MockInstanceServerCreateProfileCall{Call: call}
}

// MockInstanceServerCreateProfileCall wrap *gomock.Call
type MockInstanceServerCreateProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateProfileCall) Return(arg0 error) *MockInstanceServerCreateProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateProfileCall) Do(f func(api.ProfilesPost) error) *MockInstanceServerCreateProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateProfileCall) DoAndReturn(f func(api.ProfilesPost) error) *MockInstanceServerCreateProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateProject mocks base method.
func (m *MockInstanceServer) CreateProject(arg0 api.ProjectsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockInstanceServerMockRecorder) CreateProject(arg0 any) *MockInstanceServerCreateProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockInstanceServer)(nil).CreateProject), arg0)
	return &MockInstanceServerCreateProjectCall{Call: call}
}

// MockInstanceServerCreateProjectCall wrap *gomock.Call
type MockInstanceServerCreateProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateProjectCall) Return(arg0 error) *MockInstanceServerCreateProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateProjectCall) Do(f func(api.ProjectsPost) error) *MockInstanceServerCreateProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateProjectCall) DoAndReturn(f func(api.ProjectsPost) error) *MockInstanceServerCreateProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePool mocks base method.
func (m *MockInstanceServer) CreateStoragePool(arg0 api.StoragePoolsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockInstanceServerMockRecorder) CreateStoragePool(arg0 any) *MockInstanceServerCreateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePool), arg0)
	return &MockInstanceServerCreateStoragePoolCall{Call: call}
}

// MockInstanceServerCreateStoragePoolCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolCall) Return(arg0 error) *MockInstanceServerCreateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolCall) Do(f func(api.StoragePoolsPost) error) *MockInstanceServerCreateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolCall) DoAndReturn(f func(api.StoragePoolsPost) error) *MockInstanceServerCreateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePoolBucket mocks base method.
func (m *MockInstanceServer) CreateStoragePoolBucket(arg0 string, arg1 api.StorageBucketsPost) (*api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolBucket", arg0, arg1)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolBucket indicates an expected call of CreateStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolBucket(arg0, arg1 any) *MockInstanceServerCreateStoragePoolBucketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolBucket), arg0, arg1)
	return &MockInstanceServerCreateStoragePoolBucketCall{Call: call}
}

// MockInstanceServerCreateStoragePoolBucketCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolBucketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolBucketCall) Return(arg0 *api.StorageBucketKey, arg1 error) *MockInstanceServerCreateStoragePoolBucketCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolBucketCall) Do(f func(string, api.StorageBucketsPost) (*api.StorageBucketKey, error)) *MockInstanceServerCreateStoragePoolBucketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolBucketCall) DoAndReturn(f func(string, api.StorageBucketsPost) (*api.StorageBucketKey, error)) *MockInstanceServerCreateStoragePoolBucketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) CreateStoragePoolBucketKey(arg0, arg1 string, arg2 api.StorageBucketKeysPost) (*api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolBucketKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolBucketKey indicates an expected call of CreateStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolBucketKey(arg0, arg1, arg2 any) *MockInstanceServerCreateStoragePoolBucketKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolBucketKey), arg0, arg1, arg2)
	return &MockInstanceServerCreateStoragePoolBucketKeyCall{Call: call}
}

// MockInstanceServerCreateStoragePoolBucketKeyCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolBucketKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolBucketKeyCall) Return(arg0 *api.StorageBucketKey, arg1 error) *MockInstanceServerCreateStoragePoolBucketKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolBucketKeyCall) Do(f func(string, string, api.StorageBucketKeysPost) (*api.StorageBucketKey, error)) *MockInstanceServerCreateStoragePoolBucketKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolBucketKeyCall) DoAndReturn(f func(string, string, api.StorageBucketKeysPost) (*api.StorageBucketKey, error)) *MockInstanceServerCreateStoragePoolBucketKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolume(arg0 string, arg1 api.StorageVolumesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePoolVolume indicates an expected call of CreateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolume(arg0, arg1 any) *MockInstanceServerCreateStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolume), arg0, arg1)
	return &MockInstanceServerCreateStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerCreateStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolVolumeCall) Return(arg0 error) *MockInstanceServerCreateStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolVolumeCall) Do(f func(string, api.StorageVolumesPost) error) *MockInstanceServerCreateStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolVolumeCall) DoAndReturn(f func(string, api.StorageVolumesPost) error) *MockInstanceServerCreateStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeBackup(arg0, arg1 string, arg2 api.StoragePoolVolumeBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeBackup indicates an expected call of CreateStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeBackup(arg0, arg1, arg2 any) *MockInstanceServerCreateStoragePoolVolumeBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeBackup), arg0, arg1, arg2)
	return &MockInstanceServerCreateStoragePoolVolumeBackupCall{Call: call}
}

// MockInstanceServerCreateStoragePoolVolumeBackupCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolVolumeBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolVolumeBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateStoragePoolVolumeBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolVolumeBackupCall) Do(f func(string, string, api.StoragePoolVolumeBackupsPost) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolVolumeBackupCall) DoAndReturn(f func(string, string, api.StoragePoolVolumeBackupsPost) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePoolVolumeFromBackup mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeFromBackup(arg0 string, arg1 lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeFromBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeFromBackup indicates an expected call of CreateStoragePoolVolumeFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeFromBackup(arg0, arg1 any) *MockInstanceServerCreateStoragePoolVolumeFromBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeFromBackup), arg0, arg1)
	return &MockInstanceServerCreateStoragePoolVolumeFromBackupCall{Call: call}
}

// MockInstanceServerCreateStoragePoolVolumeFromBackupCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolVolumeFromBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolVolumeFromBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateStoragePoolVolumeFromBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolVolumeFromBackupCall) Do(f func(string, lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeFromBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolVolumeFromBackupCall) DoAndReturn(f func(string, lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeFromBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePoolVolumeFromISO mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeFromISO(arg0 string, arg1 lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeFromISO", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeFromISO indicates an expected call of CreateStoragePoolVolumeFromISO.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeFromISO(arg0, arg1 any) *MockInstanceServerCreateStoragePoolVolumeFromISOCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeFromISO", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeFromISO), arg0, arg1)
	return &MockInstanceServerCreateStoragePoolVolumeFromISOCall{Call: call}
}

// MockInstanceServerCreateStoragePoolVolumeFromISOCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolVolumeFromISOCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolVolumeFromISOCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateStoragePoolVolumeFromISOCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolVolumeFromISOCall) Do(f func(string, lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeFromISOCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolVolumeFromISOCall) DoAndReturn(f func(string, lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeFromISOCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeSnapshot(arg0, arg1, arg2 string, arg3 api.StorageVolumeSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeSnapshot indicates an expected call of CreateStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 any) *MockInstanceServerCreateStoragePoolVolumeSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
	return &MockInstanceServerCreateStoragePoolVolumeSnapshotCall{Call: call}
}

// MockInstanceServerCreateStoragePoolVolumeSnapshotCall wrap *gomock.Call
type MockInstanceServerCreateStoragePoolVolumeSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerCreateStoragePoolVolumeSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerCreateStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerCreateStoragePoolVolumeSnapshotCall) Do(f func(string, string, string, api.StorageVolumeSnapshotsPost) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerCreateStoragePoolVolumeSnapshotCall) DoAndReturn(f func(string, string, string, api.StorageVolumeSnapshotsPost) (lxd.Operation, error)) *MockInstanceServerCreateStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAuthGroup mocks base method.
func (m *MockInstanceServer) DeleteAuthGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthGroup indicates an expected call of DeleteAuthGroup.
func (mr *MockInstanceServerMockRecorder) DeleteAuthGroup(arg0 any) *MockInstanceServerDeleteAuthGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteAuthGroup), arg0)
	return &MockInstanceServerDeleteAuthGroupCall{Call: call}
}

// MockInstanceServerDeleteAuthGroupCall wrap *gomock.Call
type MockInstanceServerDeleteAuthGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteAuthGroupCall) Return(arg0 error) *MockInstanceServerDeleteAuthGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteAuthGroupCall) Do(f func(string) error) *MockInstanceServerDeleteAuthGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteAuthGroupCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteAuthGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCertificate mocks base method.
func (m *MockInstanceServer) DeleteCertificate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockInstanceServerMockRecorder) DeleteCertificate(arg0 any) *MockInstanceServerDeleteCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockInstanceServer)(nil).DeleteCertificate), arg0)
	return &MockInstanceServerDeleteCertificateCall{Call: call}
}

// MockInstanceServerDeleteCertificateCall wrap *gomock.Call
type MockInstanceServerDeleteCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteCertificateCall) Return(arg0 error) *MockInstanceServerDeleteCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteCertificateCall) Do(f func(string) error) *MockInstanceServerDeleteCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteCertificateCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteClusterGroup mocks base method.
func (m *MockInstanceServer) DeleteClusterGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterGroup indicates an expected call of DeleteClusterGroup.
func (mr *MockInstanceServerMockRecorder) DeleteClusterGroup(arg0 any) *MockInstanceServerDeleteClusterGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterGroup), arg0)
	return &MockInstanceServerDeleteClusterGroupCall{Call: call}
}

// MockInstanceServerDeleteClusterGroupCall wrap *gomock.Call
type MockInstanceServerDeleteClusterGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteClusterGroupCall) Return(arg0 error) *MockInstanceServerDeleteClusterGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteClusterGroupCall) Do(f func(string) error) *MockInstanceServerDeleteClusterGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteClusterGroupCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteClusterGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteClusterMember mocks base method.
func (m *MockInstanceServer) DeleteClusterMember(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterMember indicates an expected call of DeleteClusterMember.
func (mr *MockInstanceServerMockRecorder) DeleteClusterMember(arg0, arg1 any) *MockInstanceServerDeleteClusterMemberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterMember), arg0, arg1)
	return &MockInstanceServerDeleteClusterMemberCall{Call: call}
}

// MockInstanceServerDeleteClusterMemberCall wrap *gomock.Call
type MockInstanceServerDeleteClusterMemberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteClusterMemberCall) Return(arg0 error) *MockInstanceServerDeleteClusterMemberCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteClusterMemberCall) Do(f func(string, bool) error) *MockInstanceServerDeleteClusterMemberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteClusterMemberCall) DoAndReturn(f func(string, bool) error) *MockInstanceServerDeleteClusterMemberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContainer mocks base method.
func (m *MockInstanceServer) DeleteContainer(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockInstanceServerMockRecorder) DeleteContainer(arg0 any) *MockInstanceServerDeleteContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainer), arg0)
	return &MockInstanceServerDeleteContainerCall{Call: call}
}

// MockInstanceServerDeleteContainerCall wrap *gomock.Call
type MockInstanceServerDeleteContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteContainerCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteContainerCall) Do(f func(string) (lxd.Operation, error)) *MockInstanceServerDeleteContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteContainerCall) DoAndReturn(f func(string) (lxd.Operation, error)) *MockInstanceServerDeleteContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContainerBackup mocks base method.
func (m *MockInstanceServer) DeleteContainerBackup(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerBackup indicates an expected call of DeleteContainerBackup.
func (mr *MockInstanceServerMockRecorder) DeleteContainerBackup(arg0, arg1 any) *MockInstanceServerDeleteContainerBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerBackup), arg0, arg1)
	return &MockInstanceServerDeleteContainerBackupCall{Call: call}
}

// MockInstanceServerDeleteContainerBackupCall wrap *gomock.Call
type MockInstanceServerDeleteContainerBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteContainerBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteContainerBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteContainerBackupCall) Do(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteContainerBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteContainerBackupCall) DoAndReturn(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteContainerBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContainerConsoleLog mocks base method.
func (m *MockInstanceServer) DeleteContainerConsoleLog(arg0 string, arg1 *lxd.ContainerConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerConsoleLog indicates an expected call of DeleteContainerConsoleLog.
func (mr *MockInstanceServerMockRecorder) DeleteContainerConsoleLog(arg0, arg1 any) *MockInstanceServerDeleteContainerConsoleLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerConsoleLog), arg0, arg1)
	return &MockInstanceServerDeleteContainerConsoleLogCall{Call: call}
}

// MockInstanceServerDeleteContainerConsoleLogCall wrap *gomock.Call
type MockInstanceServerDeleteContainerConsoleLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteContainerConsoleLogCall) Return(arg0 error) *MockInstanceServerDeleteContainerConsoleLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteContainerConsoleLogCall) Do(f func(string, *lxd.ContainerConsoleLogArgs) error) *MockInstanceServerDeleteContainerConsoleLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteContainerConsoleLogCall) DoAndReturn(f func(string, *lxd.ContainerConsoleLogArgs) error) *MockInstanceServerDeleteContainerConsoleLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContainerFile mocks base method.
func (m *MockInstanceServer) DeleteContainerFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerFile indicates an expected call of DeleteContainerFile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerFile(arg0, arg1 any) *MockInstanceServerDeleteContainerFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerFile), arg0, arg1)
	return &MockInstanceServerDeleteContainerFileCall{Call: call}
}

// MockInstanceServerDeleteContainerFileCall wrap *gomock.Call
type MockInstanceServerDeleteContainerFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteContainerFileCall) Return(arg0 error) *MockInstanceServerDeleteContainerFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteContainerFileCall) Do(f func(string, string) error) *MockInstanceServerDeleteContainerFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteContainerFileCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteContainerFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContainerLogfile mocks base method.
func (m *MockInstanceServer) DeleteContainerLogfile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerLogfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerLogfile indicates an expected call of DeleteContainerLogfile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerLogfile(arg0, arg1 any) *MockInstanceServerDeleteContainerLogfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerLogfile), arg0, arg1)
	return &MockInstanceServerDeleteContainerLogfileCall{Call: call}
}

// MockInstanceServerDeleteContainerLogfileCall wrap *gomock.Call
type MockInstanceServerDeleteContainerLogfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteContainerLogfileCall) Return(arg0 error) *MockInstanceServerDeleteContainerLogfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteContainerLogfileCall) Do(f func(string, string) error) *MockInstanceServerDeleteContainerLogfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteContainerLogfileCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteContainerLogfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContainerSnapshot mocks base method.
func (m *MockInstanceServer) DeleteContainerSnapshot(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerSnapshot indicates an expected call of DeleteContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteContainerSnapshot(arg0, arg1 any) *MockInstanceServerDeleteContainerSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerSnapshot), arg0, arg1)
	return &MockInstanceServerDeleteContainerSnapshotCall{Call: call}
}

// MockInstanceServerDeleteContainerSnapshotCall wrap *gomock.Call
type MockInstanceServerDeleteContainerSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteContainerSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteContainerSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteContainerSnapshotCall) Do(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteContainerSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteContainerSnapshotCall) DoAndReturn(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteContainerSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContainerTemplateFile mocks base method.
func (m *MockInstanceServer) DeleteContainerTemplateFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerTemplateFile indicates an expected call of DeleteContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerTemplateFile(arg0, arg1 any) *MockInstanceServerDeleteContainerTemplateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerTemplateFile), arg0, arg1)
	return &MockInstanceServerDeleteContainerTemplateFileCall{Call: call}
}

// MockInstanceServerDeleteContainerTemplateFileCall wrap *gomock.Call
type MockInstanceServerDeleteContainerTemplateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteContainerTemplateFileCall) Return(arg0 error) *MockInstanceServerDeleteContainerTemplateFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteContainerTemplateFileCall) Do(f func(string, string) error) *MockInstanceServerDeleteContainerTemplateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteContainerTemplateFileCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteContainerTemplateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) DeleteIdentityProviderGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProviderGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProviderGroup indicates an expected call of DeleteIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) DeleteIdentityProviderGroup(arg0 any) *MockInstanceServerDeleteIdentityProviderGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteIdentityProviderGroup), arg0)
	return &MockInstanceServerDeleteIdentityProviderGroupCall{Call: call}
}

// MockInstanceServerDeleteIdentityProviderGroupCall wrap *gomock.Call
type MockInstanceServerDeleteIdentityProviderGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteIdentityProviderGroupCall) Return(arg0 error) *MockInstanceServerDeleteIdentityProviderGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteIdentityProviderGroupCall) Do(f func(string) error) *MockInstanceServerDeleteIdentityProviderGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteIdentityProviderGroupCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteIdentityProviderGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteImage mocks base method.
func (m *MockInstanceServer) DeleteImage(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockInstanceServerMockRecorder) DeleteImage(arg0 any) *MockInstanceServerDeleteImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImage), arg0)
	return &MockInstanceServerDeleteImageCall{Call: call}
}

// MockInstanceServerDeleteImageCall wrap *gomock.Call
type MockInstanceServerDeleteImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteImageCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteImageCall) Do(f func(string) (lxd.Operation, error)) *MockInstanceServerDeleteImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteImageCall) DoAndReturn(f func(string) (lxd.Operation, error)) *MockInstanceServerDeleteImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteImageAlias mocks base method.
func (m *MockInstanceServer) DeleteImageAlias(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageAlias", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageAlias indicates an expected call of DeleteImageAlias.
func (mr *MockInstanceServerMockRecorder) DeleteImageAlias(arg0 any) *MockInstanceServerDeleteImageAliasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImageAlias), arg0)
	return &MockInstanceServerDeleteImageAliasCall{Call: call}
}

// MockInstanceServerDeleteImageAliasCall wrap *gomock.Call
type MockInstanceServerDeleteImageAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteImageAliasCall) Return(arg0 error) *MockInstanceServerDeleteImageAliasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteImageAliasCall) Do(f func(string) error) *MockInstanceServerDeleteImageAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteImageAliasCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteImageAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstance mocks base method.
func (m *MockInstanceServer) DeleteInstance(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockInstanceServerMockRecorder) DeleteInstance(arg0 any) *MockInstanceServerDeleteInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstance), arg0)
	return &MockInstanceServerDeleteInstanceCall{Call: call}
}

// MockInstanceServerDeleteInstanceCall wrap *gomock.Call
type MockInstanceServerDeleteInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteInstanceCall) Do(f func(string) (lxd.Operation, error)) *MockInstanceServerDeleteInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteInstanceCall) DoAndReturn(f func(string) (lxd.Operation, error)) *MockInstanceServerDeleteInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceBackup mocks base method.
func (m *MockInstanceServer) DeleteInstanceBackup(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceBackup indicates an expected call of DeleteInstanceBackup.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceBackup(arg0, arg1 any) *MockInstanceServerDeleteInstanceBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceBackup), arg0, arg1)
	return &MockInstanceServerDeleteInstanceBackupCall{Call: call}
}

// MockInstanceServerDeleteInstanceBackupCall wrap *gomock.Call
type MockInstanceServerDeleteInstanceBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteInstanceBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteInstanceBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteInstanceBackupCall) Do(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteInstanceBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteInstanceBackupCall) DoAndReturn(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteInstanceBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceConsoleLog mocks base method.
func (m *MockInstanceServer) DeleteInstanceConsoleLog(arg0 string, arg1 *lxd.InstanceConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceConsoleLog indicates an expected call of DeleteInstanceConsoleLog.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceConsoleLog(arg0, arg1 any) *MockInstanceServerDeleteInstanceConsoleLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceConsoleLog), arg0, arg1)
	return &MockInstanceServerDeleteInstanceConsoleLogCall{Call: call}
}

// MockInstanceServerDeleteInstanceConsoleLogCall wrap *gomock.Call
type MockInstanceServerDeleteInstanceConsoleLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteInstanceConsoleLogCall) Return(arg0 error) *MockInstanceServerDeleteInstanceConsoleLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteInstanceConsoleLogCall) Do(f func(string, *lxd.InstanceConsoleLogArgs) error) *MockInstanceServerDeleteInstanceConsoleLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteInstanceConsoleLogCall) DoAndReturn(f func(string, *lxd.InstanceConsoleLogArgs) error) *MockInstanceServerDeleteInstanceConsoleLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceFile mocks base method.
func (m *MockInstanceServer) DeleteInstanceFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceFile indicates an expected call of DeleteInstanceFile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceFile(arg0, arg1 any) *MockInstanceServerDeleteInstanceFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceFile), arg0, arg1)
	return &MockInstanceServerDeleteInstanceFileCall{Call: call}
}

// MockInstanceServerDeleteInstanceFileCall wrap *gomock.Call
type MockInstanceServerDeleteInstanceFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteInstanceFileCall) Return(arg0 error) *MockInstanceServerDeleteInstanceFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteInstanceFileCall) Do(f func(string, string) error) *MockInstanceServerDeleteInstanceFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteInstanceFileCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteInstanceFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceLogfile mocks base method.
func (m *MockInstanceServer) DeleteInstanceLogfile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceLogfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceLogfile indicates an expected call of DeleteInstanceLogfile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceLogfile(arg0, arg1 any) *MockInstanceServerDeleteInstanceLogfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceLogfile), arg0, arg1)
	return &MockInstanceServerDeleteInstanceLogfileCall{Call: call}
}

// MockInstanceServerDeleteInstanceLogfileCall wrap *gomock.Call
type MockInstanceServerDeleteInstanceLogfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteInstanceLogfileCall) Return(arg0 error) *MockInstanceServerDeleteInstanceLogfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteInstanceLogfileCall) Do(f func(string, string) error) *MockInstanceServerDeleteInstanceLogfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteInstanceLogfileCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteInstanceLogfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceSnapshot mocks base method.
func (m *MockInstanceServer) DeleteInstanceSnapshot(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSnapshot indicates an expected call of DeleteInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceSnapshot(arg0, arg1 any) *MockInstanceServerDeleteInstanceSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceSnapshot), arg0, arg1)
	return &MockInstanceServerDeleteInstanceSnapshotCall{Call: call}
}

// MockInstanceServerDeleteInstanceSnapshotCall wrap *gomock.Call
type MockInstanceServerDeleteInstanceSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteInstanceSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteInstanceSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteInstanceSnapshotCall) Do(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteInstanceSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteInstanceSnapshotCall) DoAndReturn(f func(string, string) (lxd.Operation, error)) *MockInstanceServerDeleteInstanceSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) DeleteInstanceTemplateFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceTemplateFile indicates an expected call of DeleteInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceTemplateFile(arg0, arg1 any) *MockInstanceServerDeleteInstanceTemplateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceTemplateFile), arg0, arg1)
	return &MockInstanceServerDeleteInstanceTemplateFileCall{Call: call}
}

// MockInstanceServerDeleteInstanceTemplateFileCall wrap *gomock.Call
type MockInstanceServerDeleteInstanceTemplateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteInstanceTemplateFileCall) Return(arg0 error) *MockInstanceServerDeleteInstanceTemplateFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteInstanceTemplateFileCall) Do(f func(string, string) error) *MockInstanceServerDeleteInstanceTemplateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteInstanceTemplateFileCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteInstanceTemplateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNetwork mocks base method.
func (m *MockInstanceServer) DeleteNetwork(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockInstanceServerMockRecorder) DeleteNetwork(arg0 any) *MockInstanceServerDeleteNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetwork), arg0)
	return &MockInstanceServerDeleteNetworkCall{Call: call}
}

// MockInstanceServerDeleteNetworkCall wrap *gomock.Call
type MockInstanceServerDeleteNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteNetworkCall) Return(arg0 error) *MockInstanceServerDeleteNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteNetworkCall) Do(f func(string) error) *MockInstanceServerDeleteNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteNetworkCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNetworkACL mocks base method.
func (m *MockInstanceServer) DeleteNetworkACL(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkACL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkACL indicates an expected call of DeleteNetworkACL.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkACL(arg0 any) *MockInstanceServerDeleteNetworkACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkACL), arg0)
	return &MockInstanceServerDeleteNetworkACLCall{Call: call}
}

// MockInstanceServerDeleteNetworkACLCall wrap *gomock.Call
type MockInstanceServerDeleteNetworkACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteNetworkACLCall) Return(arg0 error) *MockInstanceServerDeleteNetworkACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteNetworkACLCall) Do(f func(string) error) *MockInstanceServerDeleteNetworkACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteNetworkACLCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteNetworkACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNetworkForward mocks base method.
func (m *MockInstanceServer) DeleteNetworkForward(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkForward", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkForward indicates an expected call of DeleteNetworkForward.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkForward(arg0, arg1 any) *MockInstanceServerDeleteNetworkForwardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkForward), arg0, arg1)
	return &MockInstanceServerDeleteNetworkForwardCall{Call: call}
}

// MockInstanceServerDeleteNetworkForwardCall wrap *gomock.Call
type MockInstanceServerDeleteNetworkForwardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteNetworkForwardCall) Return(arg0 error) *MockInstanceServerDeleteNetworkForwardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteNetworkForwardCall) Do(f func(string, string) error) *MockInstanceServerDeleteNetworkForwardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteNetworkForwardCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteNetworkForwardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) DeleteNetworkLoadBalancer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkLoadBalancer indicates an expected call of DeleteNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkLoadBalancer(arg0, arg1 any) *MockInstanceServerDeleteNetworkLoadBalancerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkLoadBalancer), arg0, arg1)
	return &MockInstanceServerDeleteNetworkLoadBalancerCall{Call: call}
}

// MockInstanceServerDeleteNetworkLoadBalancerCall wrap *gomock.Call
type MockInstanceServerDeleteNetworkLoadBalancerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteNetworkLoadBalancerCall) Return(arg0 error) *MockInstanceServerDeleteNetworkLoadBalancerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteNetworkLoadBalancerCall) Do(f func(string, string) error) *MockInstanceServerDeleteNetworkLoadBalancerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteNetworkLoadBalancerCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteNetworkLoadBalancerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNetworkPeer mocks base method.
func (m *MockInstanceServer) DeleteNetworkPeer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkPeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkPeer indicates an expected call of DeleteNetworkPeer.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkPeer(arg0, arg1 any) *MockInstanceServerDeleteNetworkPeerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkPeer), arg0, arg1)
	return &MockInstanceServerDeleteNetworkPeerCall{Call: call}
}

// MockInstanceServerDeleteNetworkPeerCall wrap *gomock.Call
type MockInstanceServerDeleteNetworkPeerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteNetworkPeerCall) Return(arg0 error) *MockInstanceServerDeleteNetworkPeerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteNetworkPeerCall) Do(f func(string, string) error) *MockInstanceServerDeleteNetworkPeerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteNetworkPeerCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteNetworkPeerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNetworkZone mocks base method.
func (m *MockInstanceServer) DeleteNetworkZone(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkZone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkZone indicates an expected call of DeleteNetworkZone.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkZone(arg0 any) *MockInstanceServerDeleteNetworkZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkZone), arg0)
	return &MockInstanceServerDeleteNetworkZoneCall{Call: call}
}

// MockInstanceServerDeleteNetworkZoneCall wrap *gomock.Call
type MockInstanceServerDeleteNetworkZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteNetworkZoneCall) Return(arg0 error) *MockInstanceServerDeleteNetworkZoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteNetworkZoneCall) Do(f func(string) error) *MockInstanceServerDeleteNetworkZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteNetworkZoneCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteNetworkZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) DeleteNetworkZoneRecord(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkZoneRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkZoneRecord indicates an expected call of DeleteNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkZoneRecord(arg0, arg1 any) *MockInstanceServerDeleteNetworkZoneRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkZoneRecord), arg0, arg1)
	return &MockInstanceServerDeleteNetworkZoneRecordCall{Call: call}
}

// MockInstanceServerDeleteNetworkZoneRecordCall wrap *gomock.Call
type MockInstanceServerDeleteNetworkZoneRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteNetworkZoneRecordCall) Return(arg0 error) *MockInstanceServerDeleteNetworkZoneRecordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteNetworkZoneRecordCall) Do(f func(string, string) error) *MockInstanceServerDeleteNetworkZoneRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteNetworkZoneRecordCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteNetworkZoneRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOperation mocks base method.
func (m *MockInstanceServer) DeleteOperation(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation.
func (mr *MockInstanceServerMockRecorder) DeleteOperation(arg0 any) *MockInstanceServerDeleteOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockInstanceServer)(nil).DeleteOperation), arg0)
	return &MockInstanceServerDeleteOperationCall{Call: call}
}

// MockInstanceServerDeleteOperationCall wrap *gomock.Call
type MockInstanceServerDeleteOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteOperationCall) Return(arg0 error) *MockInstanceServerDeleteOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteOperationCall) Do(f func(string) error) *MockInstanceServerDeleteOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteOperationCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProfile mocks base method.
func (m *MockInstanceServer) DeleteProfile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockInstanceServerMockRecorder) DeleteProfile(arg0 any) *MockInstanceServerDeleteProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProfile), arg0)
	return &MockInstanceServerDeleteProfileCall{Call: call}
}

// MockInstanceServerDeleteProfileCall wrap *gomock.Call
type MockInstanceServerDeleteProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteProfileCall) Return(arg0 error) *MockInstanceServerDeleteProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteProfileCall) Do(f func(string) error) *MockInstanceServerDeleteProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteProfileCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProject mocks base method.
func (m *MockInstanceServer) DeleteProject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockInstanceServerMockRecorder) DeleteProject(arg0 any) *MockInstanceServerDeleteProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProject), arg0)
	return &MockInstanceServerDeleteProjectCall{Call: call}
}

// MockInstanceServerDeleteProjectCall wrap *gomock.Call
type MockInstanceServerDeleteProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteProjectCall) Return(arg0 error) *MockInstanceServerDeleteProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteProjectCall) Do(f func(string) error) *MockInstanceServerDeleteProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteProjectCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePool mocks base method.
func (m *MockInstanceServer) DeleteStoragePool(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePool(arg0 any) *MockInstanceServerDeleteStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePool), arg0)
	return &MockInstanceServerDeleteStoragePoolCall{Call: call}
}

// MockInstanceServerDeleteStoragePoolCall wrap *gomock.Call
type MockInstanceServerDeleteStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteStoragePoolCall) Return(arg0 error) *MockInstanceServerDeleteStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteStoragePoolCall) Do(f func(string) error) *MockInstanceServerDeleteStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteStoragePoolCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePoolBucket mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolBucket(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolBucket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolBucket indicates an expected call of DeleteStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolBucket(arg0, arg1 any) *MockInstanceServerDeleteStoragePoolBucketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolBucket), arg0, arg1)
	return &MockInstanceServerDeleteStoragePoolBucketCall{Call: call}
}

// MockInstanceServerDeleteStoragePoolBucketCall wrap *gomock.Call
type MockInstanceServerDeleteStoragePoolBucketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteStoragePoolBucketCall) Return(arg0 error) *MockInstanceServerDeleteStoragePoolBucketCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteStoragePoolBucketCall) Do(f func(string, string) error) *MockInstanceServerDeleteStoragePoolBucketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteStoragePoolBucketCall) DoAndReturn(f func(string, string) error) *MockInstanceServerDeleteStoragePoolBucketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolBucketKey(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolBucketKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolBucketKey indicates an expected call of DeleteStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolBucketKey(arg0, arg1, arg2 any) *MockInstanceServerDeleteStoragePoolBucketKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolBucketKey), arg0, arg1, arg2)
	return &MockInstanceServerDeleteStoragePoolBucketKeyCall{Call: call}
}

// MockInstanceServerDeleteStoragePoolBucketKeyCall wrap *gomock.Call
type MockInstanceServerDeleteStoragePoolBucketKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteStoragePoolBucketKeyCall) Return(arg0 error) *MockInstanceServerDeleteStoragePoolBucketKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteStoragePoolBucketKeyCall) Do(f func(string, string, string) error) *MockInstanceServerDeleteStoragePoolBucketKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteStoragePoolBucketKeyCall) DoAndReturn(f func(string, string, string) error) *MockInstanceServerDeleteStoragePoolBucketKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePoolVolume mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolume(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolVolume indicates an expected call of DeleteStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolume(arg0, arg1, arg2 any) *MockInstanceServerDeleteStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolume), arg0, arg1, arg2)
	return &MockInstanceServerDeleteStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerDeleteStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerDeleteStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteStoragePoolVolumeCall) Return(arg0 error) *MockInstanceServerDeleteStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteStoragePoolVolumeCall) Do(f func(string, string, string) error) *MockInstanceServerDeleteStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteStoragePoolVolumeCall) DoAndReturn(f func(string, string, string) error) *MockInstanceServerDeleteStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolumeBackup(arg0, arg1, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeBackup indicates an expected call of DeleteStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeBackup(arg0, arg1, arg2 any) *MockInstanceServerDeleteStoragePoolVolumeBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeBackup), arg0, arg1, arg2)
	return &MockInstanceServerDeleteStoragePoolVolumeBackupCall{Call: call}
}

// MockInstanceServerDeleteStoragePoolVolumeBackupCall wrap *gomock.Call
type MockInstanceServerDeleteStoragePoolVolumeBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteStoragePoolVolumeBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteStoragePoolVolumeBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteStoragePoolVolumeBackupCall) Do(f func(string, string, string) (lxd.Operation, error)) *MockInstanceServerDeleteStoragePoolVolumeBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteStoragePoolVolumeBackupCall) DoAndReturn(f func(string, string, string) (lxd.Operation, error)) *MockInstanceServerDeleteStoragePoolVolumeBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeSnapshot indicates an expected call of DeleteStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 any) *MockInstanceServerDeleteStoragePoolVolumeSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
	return &MockInstanceServerDeleteStoragePoolVolumeSnapshotCall{Call: call}
}

// MockInstanceServerDeleteStoragePoolVolumeSnapshotCall wrap *gomock.Call
type MockInstanceServerDeleteStoragePoolVolumeSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteStoragePoolVolumeSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerDeleteStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteStoragePoolVolumeSnapshotCall) Do(f func(string, string, string, string) (lxd.Operation, error)) *MockInstanceServerDeleteStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteStoragePoolVolumeSnapshotCall) DoAndReturn(f func(string, string, string, string) (lxd.Operation, error)) *MockInstanceServerDeleteStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteWarning mocks base method.
func (m *MockInstanceServer) DeleteWarning(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarning indicates an expected call of DeleteWarning.
func (mr *MockInstanceServerMockRecorder) DeleteWarning(arg0 any) *MockInstanceServerDeleteWarningCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarning", reflect.TypeOf((*MockInstanceServer)(nil).DeleteWarning), arg0)
	return &MockInstanceServerDeleteWarningCall{Call: call}
}

// MockInstanceServerDeleteWarningCall wrap *gomock.Call
type MockInstanceServerDeleteWarningCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDeleteWarningCall) Return(arg0 error) *MockInstanceServerDeleteWarningCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDeleteWarningCall) Do(f func(string) error) *MockInstanceServerDeleteWarningCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDeleteWarningCall) DoAndReturn(f func(string) error) *MockInstanceServerDeleteWarningCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Disconnect mocks base method.
func (m *MockInstanceServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockInstanceServerMockRecorder) Disconnect() *MockInstanceServerDisconnectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockInstanceServer)(nil).Disconnect))
	return &MockInstanceServerDisconnectCall{Call: call}
}

// MockInstanceServerDisconnectCall wrap *gomock.Call
type MockInstanceServerDisconnectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDisconnectCall) Return() *MockInstanceServerDisconnectCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDisconnectCall) Do(f func()) *MockInstanceServerDisconnectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDisconnectCall) DoAndReturn(f func()) *MockInstanceServerDisconnectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DoHTTP mocks base method.
func (m *MockInstanceServer) DoHTTP(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockInstanceServerMockRecorder) DoHTTP(arg0 any) *MockInstanceServerDoHTTPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockInstanceServer)(nil).DoHTTP), arg0)
	return &MockInstanceServerDoHTTPCall{Call: call}
}

// MockInstanceServerDoHTTPCall wrap *gomock.Call
type MockInstanceServerDoHTTPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerDoHTTPCall) Return(arg0 *http.Response, arg1 error) *MockInstanceServerDoHTTPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerDoHTTPCall) Do(f func(*http.Request) (*http.Response, error)) *MockInstanceServerDoHTTPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerDoHTTPCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockInstanceServerDoHTTPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecContainer mocks base method.
func (m *MockInstanceServer) ExecContainer(arg0 string, arg1 api.ContainerExecPost, arg2 *lxd.ContainerExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContainer indicates an expected call of ExecContainer.
func (mr *MockInstanceServerMockRecorder) ExecContainer(arg0, arg1, arg2 any) *MockInstanceServerExecContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContainer", reflect.TypeOf((*MockInstanceServer)(nil).ExecContainer), arg0, arg1, arg2)
	return &MockInstanceServerExecContainerCall{Call: call}
}

// MockInstanceServerExecContainerCall wrap *gomock.Call
type MockInstanceServerExecContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerExecContainerCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerExecContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerExecContainerCall) Do(f func(string, api.ContainerExecPost, *lxd.ContainerExecArgs) (lxd.Operation, error)) *MockInstanceServerExecContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerExecContainerCall) DoAndReturn(f func(string, api.ContainerExecPost, *lxd.ContainerExecArgs) (lxd.Operation, error)) *MockInstanceServerExecContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecInstance mocks base method.
func (m *MockInstanceServer) ExecInstance(arg0 string, arg1 api.InstanceExecPost, arg2 *lxd.InstanceExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecInstance indicates an expected call of ExecInstance.
func (mr *MockInstanceServerMockRecorder) ExecInstance(arg0, arg1, arg2 any) *MockInstanceServerExecInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecInstance", reflect.TypeOf((*MockInstanceServer)(nil).ExecInstance), arg0, arg1, arg2)
	return &MockInstanceServerExecInstanceCall{Call: call}
}

// MockInstanceServerExecInstanceCall wrap *gomock.Call
type MockInstanceServerExecInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerExecInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerExecInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerExecInstanceCall) Do(f func(string, api.InstanceExecPost, *lxd.InstanceExecArgs) (lxd.Operation, error)) *MockInstanceServerExecInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerExecInstanceCall) DoAndReturn(f func(string, api.InstanceExecPost, *lxd.InstanceExecArgs) (lxd.Operation, error)) *MockInstanceServerExecInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportImage mocks base method.
func (m *MockInstanceServer) ExportImage(arg0 string, arg1 api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage.
func (mr *MockInstanceServerMockRecorder) ExportImage(arg0, arg1 any) *MockInstanceServerExportImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockInstanceServer)(nil).ExportImage), arg0, arg1)
	return &MockInstanceServerExportImageCall{Call: call}
}

// MockInstanceServerExportImageCall wrap *gomock.Call
type MockInstanceServerExportImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerExportImageCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerExportImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerExportImageCall) Do(f func(string, api.ImageExportPost) (lxd.Operation, error)) *MockInstanceServerExportImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerExportImageCall) DoAndReturn(f func(string, api.ImageExportPost) (lxd.Operation, error)) *MockInstanceServerExportImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAuthGroup mocks base method.
func (m *MockInstanceServer) GetAuthGroup(arg0 string) (*api.AuthGroup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthGroup", arg0)
	ret0, _ := ret[0].(*api.AuthGroup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuthGroup indicates an expected call of GetAuthGroup.
func (mr *MockInstanceServerMockRecorder) GetAuthGroup(arg0 any) *MockInstanceServerGetAuthGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).GetAuthGroup), arg0)
	return &MockInstanceServerGetAuthGroupCall{Call: call}
}

// MockInstanceServerGetAuthGroupCall wrap *gomock.Call
type MockInstanceServerGetAuthGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetAuthGroupCall) Return(arg0 *api.AuthGroup, arg1 string, arg2 error) *MockInstanceServerGetAuthGroupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetAuthGroupCall) Do(f func(string) (*api.AuthGroup, string, error)) *MockInstanceServerGetAuthGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetAuthGroupCall) DoAndReturn(f func(string) (*api.AuthGroup, string, error)) *MockInstanceServerGetAuthGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAuthGroupNames mocks base method.
func (m *MockInstanceServer) GetAuthGroupNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthGroupNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthGroupNames indicates an expected call of GetAuthGroupNames.
func (mr *MockInstanceServerMockRecorder) GetAuthGroupNames() *MockInstanceServerGetAuthGroupNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthGroupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetAuthGroupNames))
	return &MockInstanceServerGetAuthGroupNamesCall{Call: call}
}

// MockInstanceServerGetAuthGroupNamesCall wrap *gomock.Call
type MockInstanceServerGetAuthGroupNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetAuthGroupNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetAuthGroupNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetAuthGroupNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetAuthGroupNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetAuthGroupNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetAuthGroupNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAuthGroups mocks base method.
func (m *MockInstanceServer) GetAuthGroups() ([]api.AuthGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthGroups")
	ret0, _ := ret[0].([]api.AuthGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthGroups indicates an expected call of GetAuthGroups.
func (mr *MockInstanceServerMockRecorder) GetAuthGroups() *MockInstanceServerGetAuthGroupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthGroups", reflect.TypeOf((*MockInstanceServer)(nil).GetAuthGroups))
	return &MockInstanceServerGetAuthGroupsCall{Call: call}
}

// MockInstanceServerGetAuthGroupsCall wrap *gomock.Call
type MockInstanceServerGetAuthGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetAuthGroupsCall) Return(arg0 []api.AuthGroup, arg1 error) *MockInstanceServerGetAuthGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetAuthGroupsCall) Do(f func() ([]api.AuthGroup, error)) *MockInstanceServerGetAuthGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetAuthGroupsCall) DoAndReturn(f func() ([]api.AuthGroup, error)) *MockInstanceServerGetAuthGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCertificate mocks base method.
func (m *MockInstanceServer) GetCertificate(arg0 string) (*api.Certificate, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", arg0)
	ret0, _ := ret[0].(*api.Certificate)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockInstanceServerMockRecorder) GetCertificate(arg0 any) *MockInstanceServerGetCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificate), arg0)
	return &MockInstanceServerGetCertificateCall{Call: call}
}

// MockInstanceServerGetCertificateCall wrap *gomock.Call
type MockInstanceServerGetCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetCertificateCall) Return(arg0 *api.Certificate, arg1 string, arg2 error) *MockInstanceServerGetCertificateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetCertificateCall) Do(f func(string) (*api.Certificate, string, error)) *MockInstanceServerGetCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetCertificateCall) DoAndReturn(f func(string) (*api.Certificate, string, error)) *MockInstanceServerGetCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCertificateFingerprints mocks base method.
func (m *MockInstanceServer) GetCertificateFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFingerprints indicates an expected call of GetCertificateFingerprints.
func (mr *MockInstanceServerMockRecorder) GetCertificateFingerprints() *MockInstanceServerGetCertificateFingerprintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificateFingerprints))
	return &MockInstanceServerGetCertificateFingerprintsCall{Call: call}
}

// MockInstanceServerGetCertificateFingerprintsCall wrap *gomock.Call
type MockInstanceServerGetCertificateFingerprintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetCertificateFingerprintsCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetCertificateFingerprintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetCertificateFingerprintsCall) Do(f func() ([]string, error)) *MockInstanceServerGetCertificateFingerprintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetCertificateFingerprintsCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetCertificateFingerprintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCertificates mocks base method.
func (m *MockInstanceServer) GetCertificates() ([]api.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].([]api.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockInstanceServerMockRecorder) GetCertificates() *MockInstanceServerGetCertificatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificates))
	return &MockInstanceServerGetCertificatesCall{Call: call}
}

// MockInstanceServerGetCertificatesCall wrap *gomock.Call
type MockInstanceServerGetCertificatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetCertificatesCall) Return(arg0 []api.Certificate, arg1 error) *MockInstanceServerGetCertificatesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetCertificatesCall) Do(f func() ([]api.Certificate, error)) *MockInstanceServerGetCertificatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetCertificatesCall) DoAndReturn(f func() ([]api.Certificate, error)) *MockInstanceServerGetCertificatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCluster mocks base method.
func (m *MockInstanceServer) GetCluster() (*api.Cluster, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster")
	ret0, _ := ret[0].(*api.Cluster)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInstanceServerMockRecorder) GetCluster() *MockInstanceServerGetClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInstanceServer)(nil).GetCluster))
	return &MockInstanceServerGetClusterCall{Call: call}
}

// MockInstanceServerGetClusterCall wrap *gomock.Call
type MockInstanceServerGetClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterCall) Return(arg0 *api.Cluster, arg1 string, arg2 error) *MockInstanceServerGetClusterCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterCall) Do(f func() (*api.Cluster, string, error)) *MockInstanceServerGetClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterCall) DoAndReturn(f func() (*api.Cluster, string, error)) *MockInstanceServerGetClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterGroup mocks base method.
func (m *MockInstanceServer) GetClusterGroup(arg0 string) (*api.ClusterGroup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroup", arg0)
	ret0, _ := ret[0].(*api.ClusterGroup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterGroup indicates an expected call of GetClusterGroup.
func (mr *MockInstanceServerMockRecorder) GetClusterGroup(arg0 any) *MockInstanceServerGetClusterGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroup), arg0)
	return &MockInstanceServerGetClusterGroupCall{Call: call}
}

// MockInstanceServerGetClusterGroupCall wrap *gomock.Call
type MockInstanceServerGetClusterGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterGroupCall) Return(arg0 *api.ClusterGroup, arg1 string, arg2 error) *MockInstanceServerGetClusterGroupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterGroupCall) Do(f func(string) (*api.ClusterGroup, string, error)) *MockInstanceServerGetClusterGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterGroupCall) DoAndReturn(f func(string) (*api.ClusterGroup, string, error)) *MockInstanceServerGetClusterGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterGroupNames mocks base method.
func (m *MockInstanceServer) GetClusterGroupNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroupNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterGroupNames indicates an expected call of GetClusterGroupNames.
func (mr *MockInstanceServerMockRecorder) GetClusterGroupNames() *MockInstanceServerGetClusterGroupNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroupNames))
	return &MockInstanceServerGetClusterGroupNamesCall{Call: call}
}

// MockInstanceServerGetClusterGroupNamesCall wrap *gomock.Call
type MockInstanceServerGetClusterGroupNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterGroupNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetClusterGroupNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterGroupNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetClusterGroupNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterGroupNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetClusterGroupNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterGroups mocks base method.
func (m *MockInstanceServer) GetClusterGroups() ([]api.ClusterGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroups")
	ret0, _ := ret[0].([]api.ClusterGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterGroups indicates an expected call of GetClusterGroups.
func (mr *MockInstanceServerMockRecorder) GetClusterGroups() *MockInstanceServerGetClusterGroupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroups", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroups))
	return &MockInstanceServerGetClusterGroupsCall{Call: call}
}

// MockInstanceServerGetClusterGroupsCall wrap *gomock.Call
type MockInstanceServerGetClusterGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterGroupsCall) Return(arg0 []api.ClusterGroup, arg1 error) *MockInstanceServerGetClusterGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterGroupsCall) Do(f func() ([]api.ClusterGroup, error)) *MockInstanceServerGetClusterGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterGroupsCall) DoAndReturn(f func() ([]api.ClusterGroup, error)) *MockInstanceServerGetClusterGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterMember mocks base method.
func (m *MockInstanceServer) GetClusterMember(arg0 string) (*api.ClusterMember, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMember", arg0)
	ret0, _ := ret[0].(*api.ClusterMember)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMember indicates an expected call of GetClusterMember.
func (mr *MockInstanceServerMockRecorder) GetClusterMember(arg0 any) *MockInstanceServerGetClusterMemberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMember), arg0)
	return &MockInstanceServerGetClusterMemberCall{Call: call}
}

// MockInstanceServerGetClusterMemberCall wrap *gomock.Call
type MockInstanceServerGetClusterMemberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterMemberCall) Return(arg0 *api.ClusterMember, arg1 string, arg2 error) *MockInstanceServerGetClusterMemberCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterMemberCall) Do(f func(string) (*api.ClusterMember, string, error)) *MockInstanceServerGetClusterMemberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterMemberCall) DoAndReturn(f func(string) (*api.ClusterMember, string, error)) *MockInstanceServerGetClusterMemberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterMemberNames mocks base method.
func (m *MockInstanceServer) GetClusterMemberNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMemberNames indicates an expected call of GetClusterMemberNames.
func (mr *MockInstanceServerMockRecorder) GetClusterMemberNames() *MockInstanceServerGetClusterMemberNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberNames))
	return &MockInstanceServerGetClusterMemberNamesCall{Call: call}
}

// MockInstanceServerGetClusterMemberNamesCall wrap *gomock.Call
type MockInstanceServerGetClusterMemberNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterMemberNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetClusterMemberNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterMemberNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetClusterMemberNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterMemberNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetClusterMemberNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterMemberState mocks base method.
func (m *MockInstanceServer) GetClusterMemberState(arg0 string) (*api.ClusterMemberState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberState", arg0)
	ret0, _ := ret[0].(*api.ClusterMemberState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMemberState indicates an expected call of GetClusterMemberState.
func (mr *MockInstanceServerMockRecorder) GetClusterMemberState(arg0 any) *MockInstanceServerGetClusterMemberStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberState", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberState), arg0)
	return &MockInstanceServerGetClusterMemberStateCall{Call: call}
}

// MockInstanceServerGetClusterMemberStateCall wrap *gomock.Call
type MockInstanceServerGetClusterMemberStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterMemberStateCall) Return(arg0 *api.ClusterMemberState, arg1 string, arg2 error) *MockInstanceServerGetClusterMemberStateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterMemberStateCall) Do(f func(string) (*api.ClusterMemberState, string, error)) *MockInstanceServerGetClusterMemberStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterMemberStateCall) DoAndReturn(f func(string) (*api.ClusterMemberState, string, error)) *MockInstanceServerGetClusterMemberStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterMembers mocks base method.
func (m *MockInstanceServer) GetClusterMembers() ([]api.ClusterMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers")
	ret0, _ := ret[0].([]api.ClusterMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers.
func (mr *MockInstanceServerMockRecorder) GetClusterMembers() *MockInstanceServerGetClusterMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMembers))
	return &MockInstanceServerGetClusterMembersCall{Call: call}
}

// MockInstanceServerGetClusterMembersCall wrap *gomock.Call
type MockInstanceServerGetClusterMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetClusterMembersCall) Return(arg0 []api.ClusterMember, arg1 error) *MockInstanceServerGetClusterMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetClusterMembersCall) Do(f func() ([]api.ClusterMember, error)) *MockInstanceServerGetClusterMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetClusterMembersCall) DoAndReturn(f func() ([]api.ClusterMember, error)) *MockInstanceServerGetClusterMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConnectionInfo mocks base method.
func (m *MockInstanceServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockInstanceServerMockRecorder) GetConnectionInfo() *MockInstanceServerGetConnectionInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetConnectionInfo))
	return &MockInstanceServerGetConnectionInfoCall{Call: call}
}

// MockInstanceServerGetConnectionInfoCall wrap *gomock.Call
type MockInstanceServerGetConnectionInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetConnectionInfoCall) Return(arg0 *lxd.ConnectionInfo, arg1 error) *MockInstanceServerGetConnectionInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetConnectionInfoCall) Do(f func() (*lxd.ConnectionInfo, error)) *MockInstanceServerGetConnectionInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetConnectionInfoCall) DoAndReturn(f func() (*lxd.ConnectionInfo, error)) *MockInstanceServerGetConnectionInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainer mocks base method.
func (m *MockInstanceServer) GetContainer(arg0 string) (*api.Container, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", arg0)
	ret0, _ := ret[0].(*api.Container)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockInstanceServerMockRecorder) GetContainer(arg0 any) *MockInstanceServerGetContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockInstanceServer)(nil).GetContainer), arg0)
	return &MockInstanceServerGetContainerCall{Call: call}
}

// MockInstanceServerGetContainerCall wrap *gomock.Call
type MockInstanceServerGetContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerCall) Return(arg0 *api.Container, arg1 string, arg2 error) *MockInstanceServerGetContainerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerCall) Do(f func(string) (*api.Container, string, error)) *MockInstanceServerGetContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerCall) DoAndReturn(f func(string) (*api.Container, string, error)) *MockInstanceServerGetContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerBackup mocks base method.
func (m *MockInstanceServer) GetContainerBackup(arg0, arg1 string) (*api.ContainerBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(*api.ContainerBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerBackup indicates an expected call of GetContainerBackup.
func (mr *MockInstanceServerMockRecorder) GetContainerBackup(arg0, arg1 any) *MockInstanceServerGetContainerBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackup), arg0, arg1)
	return &MockInstanceServerGetContainerBackupCall{Call: call}
}

// MockInstanceServerGetContainerBackupCall wrap *gomock.Call
type MockInstanceServerGetContainerBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerBackupCall) Return(arg0 *api.ContainerBackup, arg1 string, arg2 error) *MockInstanceServerGetContainerBackupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerBackupCall) Do(f func(string, string) (*api.ContainerBackup, string, error)) *MockInstanceServerGetContainerBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerBackupCall) DoAndReturn(f func(string, string) (*api.ContainerBackup, string, error)) *MockInstanceServerGetContainerBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerBackupFile mocks base method.
func (m *MockInstanceServer) GetContainerBackupFile(arg0, arg1 string, arg2 *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupFile indicates an expected call of GetContainerBackupFile.
func (mr *MockInstanceServerMockRecorder) GetContainerBackupFile(arg0, arg1, arg2 any) *MockInstanceServerGetContainerBackupFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupFile), arg0, arg1, arg2)
	return &MockInstanceServerGetContainerBackupFileCall{Call: call}
}

// MockInstanceServerGetContainerBackupFileCall wrap *gomock.Call
type MockInstanceServerGetContainerBackupFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerBackupFileCall) Return(arg0 *lxd.BackupFileResponse, arg1 error) *MockInstanceServerGetContainerBackupFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerBackupFileCall) Do(f func(string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)) *MockInstanceServerGetContainerBackupFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerBackupFileCall) DoAndReturn(f func(string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)) *MockInstanceServerGetContainerBackupFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerBackupNames mocks base method.
func (m *MockInstanceServer) GetContainerBackupNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupNames indicates an expected call of GetContainerBackupNames.
func (mr *MockInstanceServerMockRecorder) GetContainerBackupNames(arg0 any) *MockInstanceServerGetContainerBackupNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupNames), arg0)
	return &MockInstanceServerGetContainerBackupNamesCall{Call: call}
}

// MockInstanceServerGetContainerBackupNamesCall wrap *gomock.Call
type MockInstanceServerGetContainerBackupNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerBackupNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetContainerBackupNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerBackupNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetContainerBackupNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerBackupNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetContainerBackupNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerBackups mocks base method.
func (m *MockInstanceServer) GetContainerBackups(arg0 string) ([]api.ContainerBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackups", arg0)
	ret0, _ := ret[0].([]api.ContainerBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackups indicates an expected call of GetContainerBackups.
func (mr *MockInstanceServerMockRecorder) GetContainerBackups(arg0 any) *MockInstanceServerGetContainerBackupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackups), arg0)
	return &MockInstanceServerGetContainerBackupsCall{Call: call}
}

// MockInstanceServerGetContainerBackupsCall wrap *gomock.Call
type MockInstanceServerGetContainerBackupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerBackupsCall) Return(arg0 []api.ContainerBackup, arg1 error) *MockInstanceServerGetContainerBackupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerBackupsCall) Do(f func(string) ([]api.ContainerBackup, error)) *MockInstanceServerGetContainerBackupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerBackupsCall) DoAndReturn(f func(string) ([]api.ContainerBackup, error)) *MockInstanceServerGetContainerBackupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerConsoleLog mocks base method.
func (m *MockInstanceServer) GetContainerConsoleLog(arg0 string, arg1 *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerConsoleLog indicates an expected call of GetContainerConsoleLog.
func (mr *MockInstanceServerMockRecorder) GetContainerConsoleLog(arg0, arg1 any) *MockInstanceServerGetContainerConsoleLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerConsoleLog), arg0, arg1)
	return &MockInstanceServerGetContainerConsoleLogCall{Call: call}
}

// MockInstanceServerGetContainerConsoleLogCall wrap *gomock.Call
type MockInstanceServerGetContainerConsoleLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerConsoleLogCall) Return(arg0 io.ReadCloser, arg1 error) *MockInstanceServerGetContainerConsoleLogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerConsoleLogCall) Do(f func(string, *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error)) *MockInstanceServerGetContainerConsoleLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerConsoleLogCall) DoAndReturn(f func(string, *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error)) *MockInstanceServerGetContainerConsoleLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerFile mocks base method.
func (m *MockInstanceServer) GetContainerFile(arg0, arg1 string) (io.ReadCloser, *lxd.ContainerFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.ContainerFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerFile indicates an expected call of GetContainerFile.
func (mr *MockInstanceServerMockRecorder) GetContainerFile(arg0, arg1 any) *MockInstanceServerGetContainerFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerFile), arg0, arg1)
	return &MockInstanceServerGetContainerFileCall{Call: call}
}

// MockInstanceServerGetContainerFileCall wrap *gomock.Call
type MockInstanceServerGetContainerFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerFileCall) Return(arg0 io.ReadCloser, arg1 *lxd.ContainerFileResponse, arg2 error) *MockInstanceServerGetContainerFileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerFileCall) Do(f func(string, string) (io.ReadCloser, *lxd.ContainerFileResponse, error)) *MockInstanceServerGetContainerFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerFileCall) DoAndReturn(f func(string, string) (io.ReadCloser, *lxd.ContainerFileResponse, error)) *MockInstanceServerGetContainerFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerLogfile mocks base method.
func (m *MockInstanceServer) GetContainerLogfile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfile indicates an expected call of GetContainerLogfile.
func (mr *MockInstanceServerMockRecorder) GetContainerLogfile(arg0, arg1 any) *MockInstanceServerGetContainerLogfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfile), arg0, arg1)
	return &MockInstanceServerGetContainerLogfileCall{Call: call}
}

// MockInstanceServerGetContainerLogfileCall wrap *gomock.Call
type MockInstanceServerGetContainerLogfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerLogfileCall) Return(arg0 io.ReadCloser, arg1 error) *MockInstanceServerGetContainerLogfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerLogfileCall) Do(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetContainerLogfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerLogfileCall) DoAndReturn(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetContainerLogfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerLogfiles mocks base method.
func (m *MockInstanceServer) GetContainerLogfiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfiles indicates an expected call of GetContainerLogfiles.
func (mr *MockInstanceServerMockRecorder) GetContainerLogfiles(arg0 any) *MockInstanceServerGetContainerLogfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfiles), arg0)
	return &MockInstanceServerGetContainerLogfilesCall{Call: call}
}

// MockInstanceServerGetContainerLogfilesCall wrap *gomock.Call
type MockInstanceServerGetContainerLogfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerLogfilesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetContainerLogfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerLogfilesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetContainerLogfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerLogfilesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetContainerLogfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerMetadata mocks base method.
func (m *MockInstanceServer) GetContainerMetadata(arg0 string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetadata", arg0)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerMetadata indicates an expected call of GetContainerMetadata.
func (mr *MockInstanceServerMockRecorder) GetContainerMetadata(arg0 any) *MockInstanceServerGetContainerMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerMetadata), arg0)
	return &MockInstanceServerGetContainerMetadataCall{Call: call}
}

// MockInstanceServerGetContainerMetadataCall wrap *gomock.Call
type MockInstanceServerGetContainerMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerMetadataCall) Return(arg0 *api.ImageMetadata, arg1 string, arg2 error) *MockInstanceServerGetContainerMetadataCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerMetadataCall) Do(f func(string) (*api.ImageMetadata, string, error)) *MockInstanceServerGetContainerMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerMetadataCall) DoAndReturn(f func(string) (*api.ImageMetadata, string, error)) *MockInstanceServerGetContainerMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerNames mocks base method.
func (m *MockInstanceServer) GetContainerNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerNames indicates an expected call of GetContainerNames.
func (mr *MockInstanceServerMockRecorder) GetContainerNames() *MockInstanceServerGetContainerNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerNames))
	return &MockInstanceServerGetContainerNamesCall{Call: call}
}

// MockInstanceServerGetContainerNamesCall wrap *gomock.Call
type MockInstanceServerGetContainerNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetContainerNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetContainerNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetContainerNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerSnapshot mocks base method.
func (m *MockInstanceServer) GetContainerSnapshot(arg0, arg1 string) (*api.ContainerSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*api.ContainerSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerSnapshot indicates an expected call of GetContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshot(arg0, arg1 any) *MockInstanceServerGetContainerSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshot), arg0, arg1)
	return &MockInstanceServerGetContainerSnapshotCall{Call: call}
}

// MockInstanceServerGetContainerSnapshotCall wrap *gomock.Call
type MockInstanceServerGetContainerSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerSnapshotCall) Return(arg0 *api.ContainerSnapshot, arg1 string, arg2 error) *MockInstanceServerGetContainerSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerSnapshotCall) Do(f func(string, string) (*api.ContainerSnapshot, string, error)) *MockInstanceServerGetContainerSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerSnapshotCall) DoAndReturn(f func(string, string) (*api.ContainerSnapshot, string, error)) *MockInstanceServerGetContainerSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerSnapshotNames mocks base method.
func (m *MockInstanceServer) GetContainerSnapshotNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshotNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshotNames indicates an expected call of GetContainerSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshotNames(arg0 any) *MockInstanceServerGetContainerSnapshotNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshotNames), arg0)
	return &MockInstanceServerGetContainerSnapshotNamesCall{Call: call}
}

// MockInstanceServerGetContainerSnapshotNamesCall wrap *gomock.Call
type MockInstanceServerGetContainerSnapshotNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerSnapshotNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetContainerSnapshotNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerSnapshotNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetContainerSnapshotNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerSnapshotNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetContainerSnapshotNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerSnapshots mocks base method.
func (m *MockInstanceServer) GetContainerSnapshots(arg0 string) ([]api.ContainerSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshots", arg0)
	ret0, _ := ret[0].([]api.ContainerSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshots indicates an expected call of GetContainerSnapshots.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshots(arg0 any) *MockInstanceServerGetContainerSnapshotsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshots), arg0)
	return &MockInstanceServerGetContainerSnapshotsCall{Call: call}
}

// MockInstanceServerGetContainerSnapshotsCall wrap *gomock.Call
type MockInstanceServerGetContainerSnapshotsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerSnapshotsCall) Return(arg0 []api.ContainerSnapshot, arg1 error) *MockInstanceServerGetContainerSnapshotsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerSnapshotsCall) Do(f func(string) ([]api.ContainerSnapshot, error)) *MockInstanceServerGetContainerSnapshotsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerSnapshotsCall) DoAndReturn(f func(string) ([]api.ContainerSnapshot, error)) *MockInstanceServerGetContainerSnapshotsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerState mocks base method.
func (m *MockInstanceServer) GetContainerState(arg0 string) (*api.ContainerState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerState", arg0)
	ret0, _ := ret[0].(*api.ContainerState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerState indicates an expected call of GetContainerState.
func (mr *MockInstanceServerMockRecorder) GetContainerState(arg0 any) *MockInstanceServerGetContainerStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerState", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerState), arg0)
	return &MockInstanceServerGetContainerStateCall{Call: call}
}

// MockInstanceServerGetContainerStateCall wrap *gomock.Call
type MockInstanceServerGetContainerStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerStateCall) Return(arg0 *api.ContainerState, arg1 string, arg2 error) *MockInstanceServerGetContainerStateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerStateCall) Do(f func(string) (*api.ContainerState, string, error)) *MockInstanceServerGetContainerStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerStateCall) DoAndReturn(f func(string) (*api.ContainerState, string, error)) *MockInstanceServerGetContainerStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerTemplateFile mocks base method.
func (m *MockInstanceServer) GetContainerTemplateFile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFile indicates an expected call of GetContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFile(arg0, arg1 any) *MockInstanceServerGetContainerTemplateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFile), arg0, arg1)
	return &MockInstanceServerGetContainerTemplateFileCall{Call: call}
}

// MockInstanceServerGetContainerTemplateFileCall wrap *gomock.Call
type MockInstanceServerGetContainerTemplateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerTemplateFileCall) Return(arg0 io.ReadCloser, arg1 error) *MockInstanceServerGetContainerTemplateFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerTemplateFileCall) Do(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetContainerTemplateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerTemplateFileCall) DoAndReturn(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetContainerTemplateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerTemplateFiles mocks base method.
func (m *MockInstanceServer) GetContainerTemplateFiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFiles indicates an expected call of GetContainerTemplateFiles.
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFiles(arg0 any) *MockInstanceServerGetContainerTemplateFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFiles), arg0)
	return &MockInstanceServerGetContainerTemplateFilesCall{Call: call}
}

// MockInstanceServerGetContainerTemplateFilesCall wrap *gomock.Call
type MockInstanceServerGetContainerTemplateFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainerTemplateFilesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetContainerTemplateFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainerTemplateFilesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetContainerTemplateFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainerTemplateFilesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetContainerTemplateFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainers mocks base method.
func (m *MockInstanceServer) GetContainers() ([]api.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]api.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockInstanceServerMockRecorder) GetContainers() *MockInstanceServerGetContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockInstanceServer)(nil).GetContainers))
	return &MockInstanceServerGetContainersCall{Call: call}
}

// MockInstanceServerGetContainersCall wrap *gomock.Call
type MockInstanceServerGetContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainersCall) Return(arg0 []api.Container, arg1 error) *MockInstanceServerGetContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainersCall) Do(f func() ([]api.Container, error)) *MockInstanceServerGetContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainersCall) DoAndReturn(f func() ([]api.Container, error)) *MockInstanceServerGetContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainersFull mocks base method.
func (m *MockInstanceServer) GetContainersFull() ([]api.ContainerFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainersFull")
	ret0, _ := ret[0].([]api.ContainerFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainersFull indicates an expected call of GetContainersFull.
func (mr *MockInstanceServerMockRecorder) GetContainersFull() *MockInstanceServerGetContainersFullCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainersFull", reflect.TypeOf((*MockInstanceServer)(nil).GetContainersFull))
	return &MockInstanceServerGetContainersFullCall{Call: call}
}

// MockInstanceServerGetContainersFullCall wrap *gomock.Call
type MockInstanceServerGetContainersFullCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetContainersFullCall) Return(arg0 []api.ContainerFull, arg1 error) *MockInstanceServerGetContainersFullCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetContainersFullCall) Do(f func() ([]api.ContainerFull, error)) *MockInstanceServerGetContainersFullCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetContainersFullCall) DoAndReturn(f func() ([]api.ContainerFull, error)) *MockInstanceServerGetContainersFullCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCurrentIdentityInfo mocks base method.
func (m *MockInstanceServer) GetCurrentIdentityInfo() (*api.IdentityInfo, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentIdentityInfo")
	ret0, _ := ret[0].(*api.IdentityInfo)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrentIdentityInfo indicates an expected call of GetCurrentIdentityInfo.
func (mr *MockInstanceServerMockRecorder) GetCurrentIdentityInfo() *MockInstanceServerGetCurrentIdentityInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentIdentityInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetCurrentIdentityInfo))
	return &MockInstanceServerGetCurrentIdentityInfoCall{Call: call}
}

// MockInstanceServerGetCurrentIdentityInfoCall wrap *gomock.Call
type MockInstanceServerGetCurrentIdentityInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetCurrentIdentityInfoCall) Return(arg0 *api.IdentityInfo, arg1 string, arg2 error) *MockInstanceServerGetCurrentIdentityInfoCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetCurrentIdentityInfoCall) Do(f func() (*api.IdentityInfo, string, error)) *MockInstanceServerGetCurrentIdentityInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetCurrentIdentityInfoCall) DoAndReturn(f func() (*api.IdentityInfo, string, error)) *MockInstanceServerGetCurrentIdentityInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEvents mocks base method.
func (m *MockInstanceServer) GetEvents() (*lxd.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].(*lxd.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockInstanceServerMockRecorder) GetEvents() *MockInstanceServerGetEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockInstanceServer)(nil).GetEvents))
	return &MockInstanceServerGetEventsCall{Call: call}
}

// MockInstanceServerGetEventsCall wrap *gomock.Call
type MockInstanceServerGetEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetEventsCall) Return(arg0 *lxd.EventListener, arg1 error) *MockInstanceServerGetEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetEventsCall) Do(f func() (*lxd.EventListener, error)) *MockInstanceServerGetEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetEventsCall) DoAndReturn(f func() (*lxd.EventListener, error)) *MockInstanceServerGetEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEventsAllProjects mocks base method.
func (m *MockInstanceServer) GetEventsAllProjects() (*lxd.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsAllProjects")
	ret0, _ := ret[0].(*lxd.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsAllProjects indicates an expected call of GetEventsAllProjects.
func (mr *MockInstanceServerMockRecorder) GetEventsAllProjects() *MockInstanceServerGetEventsAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetEventsAllProjects))
	return &MockInstanceServerGetEventsAllProjectsCall{Call: call}
}

// MockInstanceServerGetEventsAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetEventsAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetEventsAllProjectsCall) Return(arg0 *lxd.EventListener, arg1 error) *MockInstanceServerGetEventsAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetEventsAllProjectsCall) Do(f func() (*lxd.EventListener, error)) *MockInstanceServerGetEventsAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetEventsAllProjectsCall) DoAndReturn(f func() (*lxd.EventListener, error)) *MockInstanceServerGetEventsAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHTTPClient mocks base method.
func (m *MockInstanceServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockInstanceServerMockRecorder) GetHTTPClient() *MockInstanceServerGetHTTPClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockInstanceServer)(nil).GetHTTPClient))
	return &MockInstanceServerGetHTTPClientCall{Call: call}
}

// MockInstanceServerGetHTTPClientCall wrap *gomock.Call
type MockInstanceServerGetHTTPClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetHTTPClientCall) Return(arg0 *http.Client, arg1 error) *MockInstanceServerGetHTTPClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetHTTPClientCall) Do(f func() (*http.Client, error)) *MockInstanceServerGetHTTPClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetHTTPClientCall) DoAndReturn(f func() (*http.Client, error)) *MockInstanceServerGetHTTPClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentities mocks base method.
func (m *MockInstanceServer) GetIdentities() ([]api.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentities")
	ret0, _ := ret[0].([]api.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentities indicates an expected call of GetIdentities.
func (mr *MockInstanceServerMockRecorder) GetIdentities() *MockInstanceServerGetIdentitiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentities", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentities))
	return &MockInstanceServerGetIdentitiesCall{Call: call}
}

// MockInstanceServerGetIdentitiesCall wrap *gomock.Call
type MockInstanceServerGetIdentitiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentitiesCall) Return(arg0 []api.Identity, arg1 error) *MockInstanceServerGetIdentitiesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentitiesCall) Do(f func() ([]api.Identity, error)) *MockInstanceServerGetIdentitiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentitiesCall) DoAndReturn(f func() ([]api.Identity, error)) *MockInstanceServerGetIdentitiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentitiesByAuthenticationMethod mocks base method.
func (m *MockInstanceServer) GetIdentitiesByAuthenticationMethod(arg0 string) ([]api.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentitiesByAuthenticationMethod", arg0)
	ret0, _ := ret[0].([]api.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentitiesByAuthenticationMethod indicates an expected call of GetIdentitiesByAuthenticationMethod.
func (mr *MockInstanceServerMockRecorder) GetIdentitiesByAuthenticationMethod(arg0 any) *MockInstanceServerGetIdentitiesByAuthenticationMethodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentitiesByAuthenticationMethod", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentitiesByAuthenticationMethod), arg0)
	return &MockInstanceServerGetIdentitiesByAuthenticationMethodCall{Call: call}
}

// MockInstanceServerGetIdentitiesByAuthenticationMethodCall wrap *gomock.Call
type MockInstanceServerGetIdentitiesByAuthenticationMethodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentitiesByAuthenticationMethodCall) Return(arg0 []api.Identity, arg1 error) *MockInstanceServerGetIdentitiesByAuthenticationMethodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentitiesByAuthenticationMethodCall) Do(f func(string) ([]api.Identity, error)) *MockInstanceServerGetIdentitiesByAuthenticationMethodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentitiesByAuthenticationMethodCall) DoAndReturn(f func(string) ([]api.Identity, error)) *MockInstanceServerGetIdentitiesByAuthenticationMethodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentity mocks base method.
func (m *MockInstanceServer) GetIdentity(arg0, arg1 string) (*api.Identity, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", arg0, arg1)
	ret0, _ := ret[0].(*api.Identity)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockInstanceServerMockRecorder) GetIdentity(arg0, arg1 any) *MockInstanceServerGetIdentityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentity), arg0, arg1)
	return &MockInstanceServerGetIdentityCall{Call: call}
}

// MockInstanceServerGetIdentityCall wrap *gomock.Call
type MockInstanceServerGetIdentityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentityCall) Return(arg0 *api.Identity, arg1 string, arg2 error) *MockInstanceServerGetIdentityCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentityCall) Do(f func(string, string) (*api.Identity, string, error)) *MockInstanceServerGetIdentityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentityCall) DoAndReturn(f func(string, string) (*api.Identity, string, error)) *MockInstanceServerGetIdentityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentityAuthenticationMethodsIdentifiers mocks base method.
func (m *MockInstanceServer) GetIdentityAuthenticationMethodsIdentifiers() (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityAuthenticationMethodsIdentifiers")
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityAuthenticationMethodsIdentifiers indicates an expected call of GetIdentityAuthenticationMethodsIdentifiers.
func (mr *MockInstanceServerMockRecorder) GetIdentityAuthenticationMethodsIdentifiers() *MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityAuthenticationMethodsIdentifiers", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityAuthenticationMethodsIdentifiers))
	return &MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall{Call: call}
}

// MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall wrap *gomock.Call
type MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall) Return(arg0 map[string][]string, arg1 error) *MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall) Do(f func() (map[string][]string, error)) *MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall) DoAndReturn(f func() (map[string][]string, error)) *MockInstanceServerGetIdentityAuthenticationMethodsIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentityIdentifiersByAuthenticationMethod mocks base method.
func (m *MockInstanceServer) GetIdentityIdentifiersByAuthenticationMethod(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityIdentifiersByAuthenticationMethod", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityIdentifiersByAuthenticationMethod indicates an expected call of GetIdentityIdentifiersByAuthenticationMethod.
func (mr *MockInstanceServerMockRecorder) GetIdentityIdentifiersByAuthenticationMethod(arg0 any) *MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityIdentifiersByAuthenticationMethod", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityIdentifiersByAuthenticationMethod), arg0)
	return &MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall{Call: call}
}

// MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall wrap *gomock.Call
type MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetIdentityIdentifiersByAuthenticationMethodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) GetIdentityProviderGroup(arg0 string) (*api.IdentityProviderGroup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderGroup", arg0)
	ret0, _ := ret[0].(*api.IdentityProviderGroup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIdentityProviderGroup indicates an expected call of GetIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) GetIdentityProviderGroup(arg0 any) *MockInstanceServerGetIdentityProviderGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityProviderGroup), arg0)
	return &MockInstanceServerGetIdentityProviderGroupCall{Call: call}
}

// MockInstanceServerGetIdentityProviderGroupCall wrap *gomock.Call
type MockInstanceServerGetIdentityProviderGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentityProviderGroupCall) Return(arg0 *api.IdentityProviderGroup, arg1 string, arg2 error) *MockInstanceServerGetIdentityProviderGroupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentityProviderGroupCall) Do(f func(string) (*api.IdentityProviderGroup, string, error)) *MockInstanceServerGetIdentityProviderGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentityProviderGroupCall) DoAndReturn(f func(string) (*api.IdentityProviderGroup, string, error)) *MockInstanceServerGetIdentityProviderGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentityProviderGroupNames mocks base method.
func (m *MockInstanceServer) GetIdentityProviderGroupNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderGroupNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderGroupNames indicates an expected call of GetIdentityProviderGroupNames.
func (mr *MockInstanceServerMockRecorder) GetIdentityProviderGroupNames() *MockInstanceServerGetIdentityProviderGroupNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderGroupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityProviderGroupNames))
	return &MockInstanceServerGetIdentityProviderGroupNamesCall{Call: call}
}

// MockInstanceServerGetIdentityProviderGroupNamesCall wrap *gomock.Call
type MockInstanceServerGetIdentityProviderGroupNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentityProviderGroupNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetIdentityProviderGroupNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentityProviderGroupNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetIdentityProviderGroupNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentityProviderGroupNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetIdentityProviderGroupNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIdentityProviderGroups mocks base method.
func (m *MockInstanceServer) GetIdentityProviderGroups() ([]api.IdentityProviderGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderGroups")
	ret0, _ := ret[0].([]api.IdentityProviderGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderGroups indicates an expected call of GetIdentityProviderGroups.
func (mr *MockInstanceServerMockRecorder) GetIdentityProviderGroups() *MockInstanceServerGetIdentityProviderGroupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderGroups", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityProviderGroups))
	return &MockInstanceServerGetIdentityProviderGroupsCall{Call: call}
}

// MockInstanceServerGetIdentityProviderGroupsCall wrap *gomock.Call
type MockInstanceServerGetIdentityProviderGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetIdentityProviderGroupsCall) Return(arg0 []api.IdentityProviderGroup, arg1 error) *MockInstanceServerGetIdentityProviderGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetIdentityProviderGroupsCall) Do(f func() ([]api.IdentityProviderGroup, error)) *MockInstanceServerGetIdentityProviderGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetIdentityProviderGroupsCall) DoAndReturn(f func() ([]api.IdentityProviderGroup, error)) *MockInstanceServerGetIdentityProviderGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImage mocks base method.
func (m *MockInstanceServer) GetImage(arg0 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage.
func (mr *MockInstanceServerMockRecorder) GetImage(arg0 any) *MockInstanceServerGetImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockInstanceServer)(nil).GetImage), arg0)
	return &MockInstanceServerGetImageCall{Call: call}
}

// MockInstanceServerGetImageCall wrap *gomock.Call
type MockInstanceServerGetImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageCall) Return(arg0 *api.Image, arg1 string, arg2 error) *MockInstanceServerGetImageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageCall) Do(f func(string) (*api.Image, string, error)) *MockInstanceServerGetImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageCall) DoAndReturn(f func(string) (*api.Image, string, error)) *MockInstanceServerGetImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAlias mocks base method.
func (m *MockInstanceServer) GetImageAlias(arg0 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", arg0)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias.
func (mr *MockInstanceServerMockRecorder) GetImageAlias(arg0 any) *MockInstanceServerGetImageAliasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAlias), arg0)
	return &MockInstanceServerGetImageAliasCall{Call: call}
}

// MockInstanceServerGetImageAliasCall wrap *gomock.Call
type MockInstanceServerGetImageAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageAliasCall) Return(arg0 *api.ImageAliasesEntry, arg1 string, arg2 error) *MockInstanceServerGetImageAliasCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageAliasCall) Do(f func(string) (*api.ImageAliasesEntry, string, error)) *MockInstanceServerGetImageAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageAliasCall) DoAndReturn(f func(string) (*api.ImageAliasesEntry, string, error)) *MockInstanceServerGetImageAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliasArchitectures mocks base method.
func (m *MockInstanceServer) GetImageAliasArchitectures(arg0, arg1 string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", arg0, arg1)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures.
func (mr *MockInstanceServerMockRecorder) GetImageAliasArchitectures(arg0, arg1 any) *MockInstanceServerGetImageAliasArchitecturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasArchitectures), arg0, arg1)
	return &MockInstanceServerGetImageAliasArchitecturesCall{Call: call}
}

// MockInstanceServerGetImageAliasArchitecturesCall wrap *gomock.Call
type MockInstanceServerGetImageAliasArchitecturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageAliasArchitecturesCall) Return(arg0 map[string]*api.ImageAliasesEntry, arg1 error) *MockInstanceServerGetImageAliasArchitecturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageAliasArchitecturesCall) Do(f func(string, string) (map[string]*api.ImageAliasesEntry, error)) *MockInstanceServerGetImageAliasArchitecturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageAliasArchitecturesCall) DoAndReturn(f func(string, string) (map[string]*api.ImageAliasesEntry, error)) *MockInstanceServerGetImageAliasArchitecturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliasNames mocks base method.
func (m *MockInstanceServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames.
func (mr *MockInstanceServerMockRecorder) GetImageAliasNames() *MockInstanceServerGetImageAliasNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasNames))
	return &MockInstanceServerGetImageAliasNamesCall{Call: call}
}

// MockInstanceServerGetImageAliasNamesCall wrap *gomock.Call
type MockInstanceServerGetImageAliasNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageAliasNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetImageAliasNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageAliasNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetImageAliasNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageAliasNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetImageAliasNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliasType mocks base method.
func (m *MockInstanceServer) GetImageAliasType(arg0, arg1 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", arg0, arg1)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType.
func (mr *MockInstanceServerMockRecorder) GetImageAliasType(arg0, arg1 any) *MockInstanceServerGetImageAliasTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasType), arg0, arg1)
	return &MockInstanceServerGetImageAliasTypeCall{Call: call}
}

// MockInstanceServerGetImageAliasTypeCall wrap *gomock.Call
type MockInstanceServerGetImageAliasTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageAliasTypeCall) Return(arg0 *api.ImageAliasesEntry, arg1 string, arg2 error) *MockInstanceServerGetImageAliasTypeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageAliasTypeCall) Do(f func(string, string) (*api.ImageAliasesEntry, string, error)) *MockInstanceServerGetImageAliasTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageAliasTypeCall) DoAndReturn(f func(string, string) (*api.ImageAliasesEntry, string, error)) *MockInstanceServerGetImageAliasTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageAliases mocks base method.
func (m *MockInstanceServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases.
func (mr *MockInstanceServerMockRecorder) GetImageAliases() *MockInstanceServerGetImageAliasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliases))
	return &MockInstanceServerGetImageAliasesCall{Call: call}
}

// MockInstanceServerGetImageAliasesCall wrap *gomock.Call
type MockInstanceServerGetImageAliasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageAliasesCall) Return(arg0 []api.ImageAliasesEntry, arg1 error) *MockInstanceServerGetImageAliasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageAliasesCall) Do(f func() ([]api.ImageAliasesEntry, error)) *MockInstanceServerGetImageAliasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageAliasesCall) DoAndReturn(f func() ([]api.ImageAliasesEntry, error)) *MockInstanceServerGetImageAliasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageFile mocks base method.
func (m *MockInstanceServer) GetImageFile(arg0 string, arg1 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", arg0, arg1)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile.
func (mr *MockInstanceServerMockRecorder) GetImageFile(arg0, arg1 any) *MockInstanceServerGetImageFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFile), arg0, arg1)
	return &MockInstanceServerGetImageFileCall{Call: call}
}

// MockInstanceServerGetImageFileCall wrap *gomock.Call
type MockInstanceServerGetImageFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageFileCall) Return(arg0 *lxd.ImageFileResponse, arg1 error) *MockInstanceServerGetImageFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageFileCall) Do(f func(string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockInstanceServerGetImageFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageFileCall) DoAndReturn(f func(string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockInstanceServerGetImageFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageFingerprints mocks base method.
func (m *MockInstanceServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints.
func (mr *MockInstanceServerMockRecorder) GetImageFingerprints() *MockInstanceServerGetImageFingerprintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFingerprints))
	return &MockInstanceServerGetImageFingerprintsCall{Call: call}
}

// MockInstanceServerGetImageFingerprintsCall wrap *gomock.Call
type MockInstanceServerGetImageFingerprintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageFingerprintsCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetImageFingerprintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageFingerprintsCall) Do(f func() ([]string, error)) *MockInstanceServerGetImageFingerprintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageFingerprintsCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetImageFingerprintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImageSecret mocks base method.
func (m *MockInstanceServer) GetImageSecret(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret.
func (mr *MockInstanceServerMockRecorder) GetImageSecret(arg0 any) *MockInstanceServerGetImageSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetImageSecret), arg0)
	return &MockInstanceServerGetImageSecretCall{Call: call}
}

// MockInstanceServerGetImageSecretCall wrap *gomock.Call
type MockInstanceServerGetImageSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImageSecretCall) Return(arg0 string, arg1 error) *MockInstanceServerGetImageSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImageSecretCall) Do(f func(string) (string, error)) *MockInstanceServerGetImageSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImageSecretCall) DoAndReturn(f func(string) (string, error)) *MockInstanceServerGetImageSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImages mocks base method.
func (m *MockInstanceServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockInstanceServerMockRecorder) GetImages() *MockInstanceServerGetImagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockInstanceServer)(nil).GetImages))
	return &MockInstanceServerGetImagesCall{Call: call}
}

// MockInstanceServerGetImagesCall wrap *gomock.Call
type MockInstanceServerGetImagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImagesCall) Return(arg0 []api.Image, arg1 error) *MockInstanceServerGetImagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImagesCall) Do(f func() ([]api.Image, error)) *MockInstanceServerGetImagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImagesCall) DoAndReturn(f func() ([]api.Image, error)) *MockInstanceServerGetImagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImagesWithFilter mocks base method.
func (m *MockInstanceServer) GetImagesWithFilter(arg0 []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesWithFilter", arg0)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesWithFilter indicates an expected call of GetImagesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetImagesWithFilter(arg0 any) *MockInstanceServerGetImagesWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetImagesWithFilter), arg0)
	return &MockInstanceServerGetImagesWithFilterCall{Call: call}
}

// MockInstanceServerGetImagesWithFilterCall wrap *gomock.Call
type MockInstanceServerGetImagesWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetImagesWithFilterCall) Return(arg0 []api.Image, arg1 error) *MockInstanceServerGetImagesWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetImagesWithFilterCall) Do(f func([]string) ([]api.Image, error)) *MockInstanceServerGetImagesWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetImagesWithFilterCall) DoAndReturn(f func([]string) ([]api.Image, error)) *MockInstanceServerGetImagesWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstance mocks base method.
func (m *MockInstanceServer) GetInstance(arg0 string) (*api.Instance, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(*api.Instance)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockInstanceServerMockRecorder) GetInstance(arg0 any) *MockInstanceServerGetInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceServer)(nil).GetInstance), arg0)
	return &MockInstanceServerGetInstanceCall{Call: call}
}

// MockInstanceServerGetInstanceCall wrap *gomock.Call
type MockInstanceServerGetInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceCall) Return(arg0 *api.Instance, arg1 string, arg2 error) *MockInstanceServerGetInstanceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceCall) Do(f func(string) (*api.Instance, string, error)) *MockInstanceServerGetInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceCall) DoAndReturn(f func(string) (*api.Instance, string, error)) *MockInstanceServerGetInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceBackup mocks base method.
func (m *MockInstanceServer) GetInstanceBackup(arg0, arg1 string) (*api.InstanceBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceBackup indicates an expected call of GetInstanceBackup.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackup(arg0, arg1 any) *MockInstanceServerGetInstanceBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackup), arg0, arg1)
	return &MockInstanceServerGetInstanceBackupCall{Call: call}
}

// MockInstanceServerGetInstanceBackupCall wrap *gomock.Call
type MockInstanceServerGetInstanceBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceBackupCall) Return(arg0 *api.InstanceBackup, arg1 string, arg2 error) *MockInstanceServerGetInstanceBackupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceBackupCall) Do(f func(string, string) (*api.InstanceBackup, string, error)) *MockInstanceServerGetInstanceBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceBackupCall) DoAndReturn(f func(string, string) (*api.InstanceBackup, string, error)) *MockInstanceServerGetInstanceBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceBackupFile mocks base method.
func (m *MockInstanceServer) GetInstanceBackupFile(arg0, arg1 string, arg2 *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupFile indicates an expected call of GetInstanceBackupFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupFile(arg0, arg1, arg2 any) *MockInstanceServerGetInstanceBackupFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupFile), arg0, arg1, arg2)
	return &MockInstanceServerGetInstanceBackupFileCall{Call: call}
}

// MockInstanceServerGetInstanceBackupFileCall wrap *gomock.Call
type MockInstanceServerGetInstanceBackupFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceBackupFileCall) Return(arg0 *lxd.BackupFileResponse, arg1 error) *MockInstanceServerGetInstanceBackupFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceBackupFileCall) Do(f func(string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)) *MockInstanceServerGetInstanceBackupFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceBackupFileCall) DoAndReturn(f func(string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)) *MockInstanceServerGetInstanceBackupFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceBackupNames mocks base method.
func (m *MockInstanceServer) GetInstanceBackupNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupNames indicates an expected call of GetInstanceBackupNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupNames(arg0 any) *MockInstanceServerGetInstanceBackupNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupNames), arg0)
	return &MockInstanceServerGetInstanceBackupNamesCall{Call: call}
}

// MockInstanceServerGetInstanceBackupNamesCall wrap *gomock.Call
type MockInstanceServerGetInstanceBackupNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceBackupNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetInstanceBackupNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceBackupNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetInstanceBackupNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceBackupNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetInstanceBackupNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceBackups mocks base method.
func (m *MockInstanceServer) GetInstanceBackups(arg0 string) ([]api.InstanceBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackups", arg0)
	ret0, _ := ret[0].([]api.InstanceBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackups indicates an expected call of GetInstanceBackups.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackups(arg0 any) *MockInstanceServerGetInstanceBackupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackups), arg0)
	return &MockInstanceServerGetInstanceBackupsCall{Call: call}
}

// MockInstanceServerGetInstanceBackupsCall wrap *gomock.Call
type MockInstanceServerGetInstanceBackupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceBackupsCall) Return(arg0 []api.InstanceBackup, arg1 error) *MockInstanceServerGetInstanceBackupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceBackupsCall) Do(f func(string) ([]api.InstanceBackup, error)) *MockInstanceServerGetInstanceBackupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceBackupsCall) DoAndReturn(f func(string) ([]api.InstanceBackup, error)) *MockInstanceServerGetInstanceBackupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceConsoleLog mocks base method.
func (m *MockInstanceServer) GetInstanceConsoleLog(arg0 string, arg1 *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceConsoleLog indicates an expected call of GetInstanceConsoleLog.
func (mr *MockInstanceServerMockRecorder) GetInstanceConsoleLog(arg0, arg1 any) *MockInstanceServerGetInstanceConsoleLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceConsoleLog), arg0, arg1)
	return &MockInstanceServerGetInstanceConsoleLogCall{Call: call}
}

// MockInstanceServerGetInstanceConsoleLogCall wrap *gomock.Call
type MockInstanceServerGetInstanceConsoleLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceConsoleLogCall) Return(arg0 io.ReadCloser, arg1 error) *MockInstanceServerGetInstanceConsoleLogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceConsoleLogCall) Do(f func(string, *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error)) *MockInstanceServerGetInstanceConsoleLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceConsoleLogCall) DoAndReturn(f func(string, *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error)) *MockInstanceServerGetInstanceConsoleLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceFile mocks base method.
func (m *MockInstanceServer) GetInstanceFile(arg0, arg1 string) (io.ReadCloser, *lxd.InstanceFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.InstanceFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFile indicates an expected call of GetInstanceFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceFile(arg0, arg1 any) *MockInstanceServerGetInstanceFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFile), arg0, arg1)
	return &MockInstanceServerGetInstanceFileCall{Call: call}
}

// MockInstanceServerGetInstanceFileCall wrap *gomock.Call
type MockInstanceServerGetInstanceFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceFileCall) Return(arg0 io.ReadCloser, arg1 *lxd.InstanceFileResponse, arg2 error) *MockInstanceServerGetInstanceFileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceFileCall) Do(f func(string, string) (io.ReadCloser, *lxd.InstanceFileResponse, error)) *MockInstanceServerGetInstanceFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceFileCall) DoAndReturn(f func(string, string) (io.ReadCloser, *lxd.InstanceFileResponse, error)) *MockInstanceServerGetInstanceFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceFileSFTP mocks base method.
func (m *MockInstanceServer) GetInstanceFileSFTP(arg0 string) (*sftp.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFileSFTP", arg0)
	ret0, _ := ret[0].(*sftp.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFileSFTP indicates an expected call of GetInstanceFileSFTP.
func (mr *MockInstanceServerMockRecorder) GetInstanceFileSFTP(arg0 any) *MockInstanceServerGetInstanceFileSFTPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFileSFTP", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFileSFTP), arg0)
	return &MockInstanceServerGetInstanceFileSFTPCall{Call: call}
}

// MockInstanceServerGetInstanceFileSFTPCall wrap *gomock.Call
type MockInstanceServerGetInstanceFileSFTPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceFileSFTPCall) Return(arg0 *sftp.Client, arg1 error) *MockInstanceServerGetInstanceFileSFTPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceFileSFTPCall) Do(f func(string) (*sftp.Client, error)) *MockInstanceServerGetInstanceFileSFTPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceFileSFTPCall) DoAndReturn(f func(string) (*sftp.Client, error)) *MockInstanceServerGetInstanceFileSFTPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceFileSFTPConn mocks base method.
func (m *MockInstanceServer) GetInstanceFileSFTPConn(arg0 string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFileSFTPConn", arg0)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFileSFTPConn indicates an expected call of GetInstanceFileSFTPConn.
func (mr *MockInstanceServerMockRecorder) GetInstanceFileSFTPConn(arg0 any) *MockInstanceServerGetInstanceFileSFTPConnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFileSFTPConn", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFileSFTPConn), arg0)
	return &MockInstanceServerGetInstanceFileSFTPConnCall{Call: call}
}

// MockInstanceServerGetInstanceFileSFTPConnCall wrap *gomock.Call
type MockInstanceServerGetInstanceFileSFTPConnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceFileSFTPConnCall) Return(arg0 net.Conn, arg1 error) *MockInstanceServerGetInstanceFileSFTPConnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceFileSFTPConnCall) Do(f func(string) (net.Conn, error)) *MockInstanceServerGetInstanceFileSFTPConnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceFileSFTPConnCall) DoAndReturn(f func(string) (net.Conn, error)) *MockInstanceServerGetInstanceFileSFTPConnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceFull mocks base method.
func (m *MockInstanceServer) GetInstanceFull(arg0 string) (*api.InstanceFull, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFull", arg0)
	ret0, _ := ret[0].(*api.InstanceFull)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFull indicates an expected call of GetInstanceFull.
func (mr *MockInstanceServerMockRecorder) GetInstanceFull(arg0 any) *MockInstanceServerGetInstanceFullCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFull), arg0)
	return &MockInstanceServerGetInstanceFullCall{Call: call}
}

// MockInstanceServerGetInstanceFullCall wrap *gomock.Call
type MockInstanceServerGetInstanceFullCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceFullCall) Return(arg0 *api.InstanceFull, arg1 string, arg2 error) *MockInstanceServerGetInstanceFullCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceFullCall) Do(f func(string) (*api.InstanceFull, string, error)) *MockInstanceServerGetInstanceFullCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceFullCall) DoAndReturn(f func(string) (*api.InstanceFull, string, error)) *MockInstanceServerGetInstanceFullCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceLogfile mocks base method.
func (m *MockInstanceServer) GetInstanceLogfile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfile indicates an expected call of GetInstanceLogfile.
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfile(arg0, arg1 any) *MockInstanceServerGetInstanceLogfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfile), arg0, arg1)
	return &MockInstanceServerGetInstanceLogfileCall{Call: call}
}

// MockInstanceServerGetInstanceLogfileCall wrap *gomock.Call
type MockInstanceServerGetInstanceLogfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceLogfileCall) Return(arg0 io.ReadCloser, arg1 error) *MockInstanceServerGetInstanceLogfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceLogfileCall) Do(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetInstanceLogfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceLogfileCall) DoAndReturn(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetInstanceLogfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceLogfiles mocks base method.
func (m *MockInstanceServer) GetInstanceLogfiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfiles indicates an expected call of GetInstanceLogfiles.
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfiles(arg0 any) *MockInstanceServerGetInstanceLogfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfiles), arg0)
	return &MockInstanceServerGetInstanceLogfilesCall{Call: call}
}

// MockInstanceServerGetInstanceLogfilesCall wrap *gomock.Call
type MockInstanceServerGetInstanceLogfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceLogfilesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetInstanceLogfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceLogfilesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetInstanceLogfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceLogfilesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetInstanceLogfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceMetadata mocks base method.
func (m *MockInstanceServer) GetInstanceMetadata(arg0 string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetadata", arg0)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceMetadata indicates an expected call of GetInstanceMetadata.
func (mr *MockInstanceServerMockRecorder) GetInstanceMetadata(arg0 any) *MockInstanceServerGetInstanceMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceMetadata), arg0)
	return &MockInstanceServerGetInstanceMetadataCall{Call: call}
}

// MockInstanceServerGetInstanceMetadataCall wrap *gomock.Call
type MockInstanceServerGetInstanceMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceMetadataCall) Return(arg0 *api.ImageMetadata, arg1 string, arg2 error) *MockInstanceServerGetInstanceMetadataCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceMetadataCall) Do(f func(string) (*api.ImageMetadata, string, error)) *MockInstanceServerGetInstanceMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceMetadataCall) DoAndReturn(f func(string) (*api.ImageMetadata, string, error)) *MockInstanceServerGetInstanceMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceNames mocks base method.
func (m *MockInstanceServer) GetInstanceNames(arg0 api.InstanceType) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNames indicates an expected call of GetInstanceNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceNames(arg0 any) *MockInstanceServerGetInstanceNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNames), arg0)
	return &MockInstanceServerGetInstanceNamesCall{Call: call}
}

// MockInstanceServerGetInstanceNamesCall wrap *gomock.Call
type MockInstanceServerGetInstanceNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetInstanceNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceNamesCall) Do(f func(api.InstanceType) ([]string, error)) *MockInstanceServerGetInstanceNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceNamesCall) DoAndReturn(f func(api.InstanceType) ([]string, error)) *MockInstanceServerGetInstanceNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceNamesAllProjects mocks base method.
func (m *MockInstanceServer) GetInstanceNamesAllProjects(arg0 api.InstanceType) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNamesAllProjects", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNamesAllProjects indicates an expected call of GetInstanceNamesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstanceNamesAllProjects(arg0 any) *MockInstanceServerGetInstanceNamesAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNamesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNamesAllProjects), arg0)
	return &MockInstanceServerGetInstanceNamesAllProjectsCall{Call: call}
}

// MockInstanceServerGetInstanceNamesAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetInstanceNamesAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceNamesAllProjectsCall) Return(arg0 map[string][]string, arg1 error) *MockInstanceServerGetInstanceNamesAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceNamesAllProjectsCall) Do(f func(api.InstanceType) (map[string][]string, error)) *MockInstanceServerGetInstanceNamesAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceNamesAllProjectsCall) DoAndReturn(f func(api.InstanceType) (map[string][]string, error)) *MockInstanceServerGetInstanceNamesAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceSnapshot mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshot(arg0, arg1 string) (*api.InstanceSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceSnapshot indicates an expected call of GetInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshot(arg0, arg1 any) *MockInstanceServerGetInstanceSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshot), arg0, arg1)
	return &MockInstanceServerGetInstanceSnapshotCall{Call: call}
}

// MockInstanceServerGetInstanceSnapshotCall wrap *gomock.Call
type MockInstanceServerGetInstanceSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceSnapshotCall) Return(arg0 *api.InstanceSnapshot, arg1 string, arg2 error) *MockInstanceServerGetInstanceSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceSnapshotCall) Do(f func(string, string) (*api.InstanceSnapshot, string, error)) *MockInstanceServerGetInstanceSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceSnapshotCall) DoAndReturn(f func(string, string) (*api.InstanceSnapshot, string, error)) *MockInstanceServerGetInstanceSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceSnapshotNames mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshotNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshotNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshotNames indicates an expected call of GetInstanceSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshotNames(arg0 any) *MockInstanceServerGetInstanceSnapshotNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshotNames), arg0)
	return &MockInstanceServerGetInstanceSnapshotNamesCall{Call: call}
}

// MockInstanceServerGetInstanceSnapshotNamesCall wrap *gomock.Call
type MockInstanceServerGetInstanceSnapshotNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceSnapshotNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetInstanceSnapshotNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceSnapshotNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetInstanceSnapshotNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceSnapshotNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetInstanceSnapshotNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceSnapshots mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshots(arg0 string) ([]api.InstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshots", arg0)
	ret0, _ := ret[0].([]api.InstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshots indicates an expected call of GetInstanceSnapshots.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshots(arg0 any) *MockInstanceServerGetInstanceSnapshotsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshots), arg0)
	return &MockInstanceServerGetInstanceSnapshotsCall{Call: call}
}

// MockInstanceServerGetInstanceSnapshotsCall wrap *gomock.Call
type MockInstanceServerGetInstanceSnapshotsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceSnapshotsCall) Return(arg0 []api.InstanceSnapshot, arg1 error) *MockInstanceServerGetInstanceSnapshotsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceSnapshotsCall) Do(f func(string) ([]api.InstanceSnapshot, error)) *MockInstanceServerGetInstanceSnapshotsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceSnapshotsCall) DoAndReturn(f func(string) ([]api.InstanceSnapshot, error)) *MockInstanceServerGetInstanceSnapshotsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceState mocks base method.
func (m *MockInstanceServer) GetInstanceState(arg0 string) (*api.InstanceState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceState", arg0)
	ret0, _ := ret[0].(*api.InstanceState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceState indicates an expected call of GetInstanceState.
func (mr *MockInstanceServerMockRecorder) GetInstanceState(arg0 any) *MockInstanceServerGetInstanceStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceState), arg0)
	return &MockInstanceServerGetInstanceStateCall{Call: call}
}

// MockInstanceServerGetInstanceStateCall wrap *gomock.Call
type MockInstanceServerGetInstanceStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceStateCall) Return(arg0 *api.InstanceState, arg1 string, arg2 error) *MockInstanceServerGetInstanceStateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceStateCall) Do(f func(string) (*api.InstanceState, string, error)) *MockInstanceServerGetInstanceStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceStateCall) DoAndReturn(f func(string) (*api.InstanceState, string, error)) *MockInstanceServerGetInstanceStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) GetInstanceTemplateFile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFile indicates an expected call of GetInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFile(arg0, arg1 any) *MockInstanceServerGetInstanceTemplateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFile), arg0, arg1)
	return &MockInstanceServerGetInstanceTemplateFileCall{Call: call}
}

// MockInstanceServerGetInstanceTemplateFileCall wrap *gomock.Call
type MockInstanceServerGetInstanceTemplateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceTemplateFileCall) Return(arg0 io.ReadCloser, arg1 error) *MockInstanceServerGetInstanceTemplateFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceTemplateFileCall) Do(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetInstanceTemplateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceTemplateFileCall) DoAndReturn(f func(string, string) (io.ReadCloser, error)) *MockInstanceServerGetInstanceTemplateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceTemplateFiles mocks base method.
func (m *MockInstanceServer) GetInstanceTemplateFiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFiles indicates an expected call of GetInstanceTemplateFiles.
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFiles(arg0 any) *MockInstanceServerGetInstanceTemplateFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFiles), arg0)
	return &MockInstanceServerGetInstanceTemplateFilesCall{Call: call}
}

// MockInstanceServerGetInstanceTemplateFilesCall wrap *gomock.Call
type MockInstanceServerGetInstanceTemplateFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceTemplateFilesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetInstanceTemplateFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceTemplateFilesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetInstanceTemplateFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceTemplateFilesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetInstanceTemplateFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceUEFIVars mocks base method.
func (m *MockInstanceServer) GetInstanceUEFIVars(arg0 string) (*api.InstanceUEFIVars, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceUEFIVars", arg0)
	ret0, _ := ret[0].(*api.InstanceUEFIVars)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceUEFIVars indicates an expected call of GetInstanceUEFIVars.
func (mr *MockInstanceServerMockRecorder) GetInstanceUEFIVars(arg0 any) *MockInstanceServerGetInstanceUEFIVarsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceUEFIVars", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceUEFIVars), arg0)
	return &MockInstanceServerGetInstanceUEFIVarsCall{Call: call}
}

// MockInstanceServerGetInstanceUEFIVarsCall wrap *gomock.Call
type MockInstanceServerGetInstanceUEFIVarsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstanceUEFIVarsCall) Return(arg0 *api.InstanceUEFIVars, arg1 string, arg2 error) *MockInstanceServerGetInstanceUEFIVarsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstanceUEFIVarsCall) Do(f func(string) (*api.InstanceUEFIVars, string, error)) *MockInstanceServerGetInstanceUEFIVarsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstanceUEFIVarsCall) DoAndReturn(f func(string) (*api.InstanceUEFIVars, string, error)) *MockInstanceServerGetInstanceUEFIVarsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstances mocks base method.
func (m *MockInstanceServer) GetInstances(arg0 api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", arg0)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockInstanceServerMockRecorder) GetInstances(arg0 any) *MockInstanceServerGetInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockInstanceServer)(nil).GetInstances), arg0)
	return &MockInstanceServerGetInstancesCall{Call: call}
}

// MockInstanceServerGetInstancesCall wrap *gomock.Call
type MockInstanceServerGetInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesCall) Return(arg0 []api.Instance, arg1 error) *MockInstanceServerGetInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesCall) Do(f func(api.InstanceType) ([]api.Instance, error)) *MockInstanceServerGetInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesCall) DoAndReturn(f func(api.InstanceType) ([]api.Instance, error)) *MockInstanceServerGetInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstancesAllProjects mocks base method.
func (m *MockInstanceServer) GetInstancesAllProjects(arg0 api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesAllProjects", arg0)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesAllProjects indicates an expected call of GetInstancesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstancesAllProjects(arg0 any) *MockInstanceServerGetInstancesAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesAllProjects), arg0)
	return &MockInstanceServerGetInstancesAllProjectsCall{Call: call}
}

// MockInstanceServerGetInstancesAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetInstancesAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesAllProjectsCall) Return(arg0 []api.Instance, arg1 error) *MockInstanceServerGetInstancesAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesAllProjectsCall) Do(f func(api.InstanceType) ([]api.Instance, error)) *MockInstanceServerGetInstancesAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesAllProjectsCall) DoAndReturn(f func(api.InstanceType) ([]api.Instance, error)) *MockInstanceServerGetInstancesAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstancesAllProjectsWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesAllProjectsWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesAllProjectsWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesAllProjectsWithFilter indicates an expected call of GetInstancesAllProjectsWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesAllProjectsWithFilter(arg0, arg1 any) *MockInstanceServerGetInstancesAllProjectsWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesAllProjectsWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesAllProjectsWithFilter), arg0, arg1)
	return &MockInstanceServerGetInstancesAllProjectsWithFilterCall{Call: call}
}

// MockInstanceServerGetInstancesAllProjectsWithFilterCall wrap *gomock.Call
type MockInstanceServerGetInstancesAllProjectsWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesAllProjectsWithFilterCall) Return(arg0 []api.Instance, arg1 error) *MockInstanceServerGetInstancesAllProjectsWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesAllProjectsWithFilterCall) Do(f func(api.InstanceType, []string) ([]api.Instance, error)) *MockInstanceServerGetInstancesAllProjectsWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesAllProjectsWithFilterCall) DoAndReturn(f func(api.InstanceType, []string) ([]api.Instance, error)) *MockInstanceServerGetInstancesAllProjectsWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstancesFull mocks base method.
func (m *MockInstanceServer) GetInstancesFull(arg0 api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFull", arg0)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFull indicates an expected call of GetInstancesFull.
func (mr *MockInstanceServerMockRecorder) GetInstancesFull(arg0 any) *MockInstanceServerGetInstancesFullCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFull), arg0)
	return &MockInstanceServerGetInstancesFullCall{Call: call}
}

// MockInstanceServerGetInstancesFullCall wrap *gomock.Call
type MockInstanceServerGetInstancesFullCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesFullCall) Return(arg0 []api.InstanceFull, arg1 error) *MockInstanceServerGetInstancesFullCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesFullCall) Do(f func(api.InstanceType) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesFullCall) DoAndReturn(f func(api.InstanceType) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstancesFullAllProjects mocks base method.
func (m *MockInstanceServer) GetInstancesFullAllProjects(arg0 api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullAllProjects", arg0)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullAllProjects indicates an expected call of GetInstancesFullAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullAllProjects(arg0 any) *MockInstanceServerGetInstancesFullAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullAllProjects), arg0)
	return &MockInstanceServerGetInstancesFullAllProjectsCall{Call: call}
}

// MockInstanceServerGetInstancesFullAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetInstancesFullAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesFullAllProjectsCall) Return(arg0 []api.InstanceFull, arg1 error) *MockInstanceServerGetInstancesFullAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesFullAllProjectsCall) Do(f func(api.InstanceType) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesFullAllProjectsCall) DoAndReturn(f func(api.InstanceType) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstancesFullAllProjectsWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesFullAllProjectsWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullAllProjectsWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullAllProjectsWithFilter indicates an expected call of GetInstancesFullAllProjectsWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullAllProjectsWithFilter(arg0, arg1 any) *MockInstanceServerGetInstancesFullAllProjectsWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullAllProjectsWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullAllProjectsWithFilter), arg0, arg1)
	return &MockInstanceServerGetInstancesFullAllProjectsWithFilterCall{Call: call}
}

// MockInstanceServerGetInstancesFullAllProjectsWithFilterCall wrap *gomock.Call
type MockInstanceServerGetInstancesFullAllProjectsWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesFullAllProjectsWithFilterCall) Return(arg0 []api.InstanceFull, arg1 error) *MockInstanceServerGetInstancesFullAllProjectsWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesFullAllProjectsWithFilterCall) Do(f func(api.InstanceType, []string) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullAllProjectsWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesFullAllProjectsWithFilterCall) DoAndReturn(f func(api.InstanceType, []string) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullAllProjectsWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstancesFullWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesFullWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullWithFilter indicates an expected call of GetInstancesFullWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullWithFilter(arg0, arg1 any) *MockInstanceServerGetInstancesFullWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullWithFilter), arg0, arg1)
	return &MockInstanceServerGetInstancesFullWithFilterCall{Call: call}
}

// MockInstanceServerGetInstancesFullWithFilterCall wrap *gomock.Call
type MockInstanceServerGetInstancesFullWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesFullWithFilterCall) Return(arg0 []api.InstanceFull, arg1 error) *MockInstanceServerGetInstancesFullWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesFullWithFilterCall) Do(f func(api.InstanceType, []string) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesFullWithFilterCall) DoAndReturn(f func(api.InstanceType, []string) ([]api.InstanceFull, error)) *MockInstanceServerGetInstancesFullWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstancesWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesWithFilter indicates an expected call of GetInstancesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesWithFilter(arg0, arg1 any) *MockInstanceServerGetInstancesWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesWithFilter), arg0, arg1)
	return &MockInstanceServerGetInstancesWithFilterCall{Call: call}
}

// MockInstanceServerGetInstancesWithFilterCall wrap *gomock.Call
type MockInstanceServerGetInstancesWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetInstancesWithFilterCall) Return(arg0 []api.Instance, arg1 error) *MockInstanceServerGetInstancesWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetInstancesWithFilterCall) Do(f func(api.InstanceType, []string) ([]api.Instance, error)) *MockInstanceServerGetInstancesWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetInstancesWithFilterCall) DoAndReturn(f func(api.InstanceType, []string) ([]api.Instance, error)) *MockInstanceServerGetInstancesWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMetrics mocks base method.
func (m *MockInstanceServer) GetMetrics() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockInstanceServerMockRecorder) GetMetrics() *MockInstanceServerGetMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockInstanceServer)(nil).GetMetrics))
	return &MockInstanceServerGetMetricsCall{Call: call}
}

// MockInstanceServerGetMetricsCall wrap *gomock.Call
type MockInstanceServerGetMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetMetricsCall) Return(arg0 string, arg1 error) *MockInstanceServerGetMetricsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetMetricsCall) Do(f func() (string, error)) *MockInstanceServerGetMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetMetricsCall) DoAndReturn(f func() (string, error)) *MockInstanceServerGetMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetwork mocks base method.
func (m *MockInstanceServer) GetNetwork(arg0 string) (*api.Network, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0)
	ret0, _ := ret[0].(*api.Network)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockInstanceServerMockRecorder) GetNetwork(arg0 any) *MockInstanceServerGetNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockInstanceServer)(nil).GetNetwork), arg0)
	return &MockInstanceServerGetNetworkCall{Call: call}
}

// MockInstanceServerGetNetworkCall wrap *gomock.Call
type MockInstanceServerGetNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkCall) Return(arg0 *api.Network, arg1 string, arg2 error) *MockInstanceServerGetNetworkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkCall) Do(f func(string) (*api.Network, string, error)) *MockInstanceServerGetNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkCall) DoAndReturn(f func(string) (*api.Network, string, error)) *MockInstanceServerGetNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkACL mocks base method.
func (m *MockInstanceServer) GetNetworkACL(arg0 string) (*api.NetworkACL, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACL", arg0)
	ret0, _ := ret[0].(*api.NetworkACL)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkACL indicates an expected call of GetNetworkACL.
func (mr *MockInstanceServerMockRecorder) GetNetworkACL(arg0 any) *MockInstanceServerGetNetworkACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACL), arg0)
	return &MockInstanceServerGetNetworkACLCall{Call: call}
}

// MockInstanceServerGetNetworkACLCall wrap *gomock.Call
type MockInstanceServerGetNetworkACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkACLCall) Return(arg0 *api.NetworkACL, arg1 string, arg2 error) *MockInstanceServerGetNetworkACLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkACLCall) Do(f func(string) (*api.NetworkACL, string, error)) *MockInstanceServerGetNetworkACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkACLCall) DoAndReturn(f func(string) (*api.NetworkACL, string, error)) *MockInstanceServerGetNetworkACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkACLLogfile mocks base method.
func (m *MockInstanceServer) GetNetworkACLLogfile(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLLogfile", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLLogfile indicates an expected call of GetNetworkACLLogfile.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLLogfile(arg0 any) *MockInstanceServerGetNetworkACLLogfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLLogfile), arg0)
	return &MockInstanceServerGetNetworkACLLogfileCall{Call: call}
}

// MockInstanceServerGetNetworkACLLogfileCall wrap *gomock.Call
type MockInstanceServerGetNetworkACLLogfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkACLLogfileCall) Return(arg0 io.ReadCloser, arg1 error) *MockInstanceServerGetNetworkACLLogfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkACLLogfileCall) Do(f func(string) (io.ReadCloser, error)) *MockInstanceServerGetNetworkACLLogfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkACLLogfileCall) DoAndReturn(f func(string) (io.ReadCloser, error)) *MockInstanceServerGetNetworkACLLogfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkACLNames mocks base method.
func (m *MockInstanceServer) GetNetworkACLNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLNames indicates an expected call of GetNetworkACLNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLNames() *MockInstanceServerGetNetworkACLNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLNames))
	return &MockInstanceServerGetNetworkACLNamesCall{Call: call}
}

// MockInstanceServerGetNetworkACLNamesCall wrap *gomock.Call
type MockInstanceServerGetNetworkACLNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkACLNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetNetworkACLNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkACLNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetNetworkACLNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkACLNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetNetworkACLNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkACLs mocks base method.
func (m *MockInstanceServer) GetNetworkACLs() ([]api.NetworkACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLs")
	ret0, _ := ret[0].([]api.NetworkACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLs indicates an expected call of GetNetworkACLs.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLs() *MockInstanceServerGetNetworkACLsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLs", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLs))
	return &MockInstanceServerGetNetworkACLsCall{Call: call}
}

// MockInstanceServerGetNetworkACLsCall wrap *gomock.Call
type MockInstanceServerGetNetworkACLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkACLsCall) Return(arg0 []api.NetworkACL, arg1 error) *MockInstanceServerGetNetworkACLsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkACLsCall) Do(f func() ([]api.NetworkACL, error)) *MockInstanceServerGetNetworkACLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkACLsCall) DoAndReturn(f func() ([]api.NetworkACL, error)) *MockInstanceServerGetNetworkACLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkAllocations mocks base method.
func (m *MockInstanceServer) GetNetworkAllocations(arg0 bool) ([]api.NetworkAllocations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAllocations", arg0)
	ret0, _ := ret[0].([]api.NetworkAllocations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAllocations indicates an expected call of GetNetworkAllocations.
func (mr *MockInstanceServerMockRecorder) GetNetworkAllocations(arg0 any) *MockInstanceServerGetNetworkAllocationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAllocations", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkAllocations), arg0)
	return &MockInstanceServerGetNetworkAllocationsCall{Call: call}
}

// MockInstanceServerGetNetworkAllocationsCall wrap *gomock.Call
type MockInstanceServerGetNetworkAllocationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkAllocationsCall) Return(arg0 []api.NetworkAllocations, arg1 error) *MockInstanceServerGetNetworkAllocationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkAllocationsCall) Do(f func(bool) ([]api.NetworkAllocations, error)) *MockInstanceServerGetNetworkAllocationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkAllocationsCall) DoAndReturn(f func(bool) ([]api.NetworkAllocations, error)) *MockInstanceServerGetNetworkAllocationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkForward mocks base method.
func (m *MockInstanceServer) GetNetworkForward(arg0, arg1 string) (*api.NetworkForward, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForward", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkForward)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkForward indicates an expected call of GetNetworkForward.
func (mr *MockInstanceServerMockRecorder) GetNetworkForward(arg0, arg1 any) *MockInstanceServerGetNetworkForwardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForward), arg0, arg1)
	return &MockInstanceServerGetNetworkForwardCall{Call: call}
}

// MockInstanceServerGetNetworkForwardCall wrap *gomock.Call
type MockInstanceServerGetNetworkForwardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkForwardCall) Return(arg0 *api.NetworkForward, arg1 string, arg2 error) *MockInstanceServerGetNetworkForwardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkForwardCall) Do(f func(string, string) (*api.NetworkForward, string, error)) *MockInstanceServerGetNetworkForwardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkForwardCall) DoAndReturn(f func(string, string) (*api.NetworkForward, string, error)) *MockInstanceServerGetNetworkForwardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkForwardAddresses mocks base method.
func (m *MockInstanceServer) GetNetworkForwardAddresses(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForwardAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkForwardAddresses indicates an expected call of GetNetworkForwardAddresses.
func (mr *MockInstanceServerMockRecorder) GetNetworkForwardAddresses(arg0 any) *MockInstanceServerGetNetworkForwardAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForwardAddresses", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForwardAddresses), arg0)
	return &MockInstanceServerGetNetworkForwardAddressesCall{Call: call}
}

// MockInstanceServerGetNetworkForwardAddressesCall wrap *gomock.Call
type MockInstanceServerGetNetworkForwardAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkForwardAddressesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetNetworkForwardAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkForwardAddressesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetNetworkForwardAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkForwardAddressesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetNetworkForwardAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkForwards mocks base method.
func (m *MockInstanceServer) GetNetworkForwards(arg0 string) ([]api.NetworkForward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForwards", arg0)
	ret0, _ := ret[0].([]api.NetworkForward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkForwards indicates an expected call of GetNetworkForwards.
func (mr *MockInstanceServerMockRecorder) GetNetworkForwards(arg0 any) *MockInstanceServerGetNetworkForwardsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForwards", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForwards), arg0)
	return &MockInstanceServerGetNetworkForwardsCall{Call: call}
}

// MockInstanceServerGetNetworkForwardsCall wrap *gomock.Call
type MockInstanceServerGetNetworkForwardsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkForwardsCall) Return(arg0 []api.NetworkForward, arg1 error) *MockInstanceServerGetNetworkForwardsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkForwardsCall) Do(f func(string) ([]api.NetworkForward, error)) *MockInstanceServerGetNetworkForwardsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkForwardsCall) DoAndReturn(f func(string) ([]api.NetworkForward, error)) *MockInstanceServerGetNetworkForwardsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkLeases mocks base method.
func (m *MockInstanceServer) GetNetworkLeases(arg0 string) ([]api.NetworkLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLeases", arg0)
	ret0, _ := ret[0].([]api.NetworkLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLeases indicates an expected call of GetNetworkLeases.
func (mr *MockInstanceServerMockRecorder) GetNetworkLeases(arg0 any) *MockInstanceServerGetNetworkLeasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLeases", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLeases), arg0)
	return &MockInstanceServerGetNetworkLeasesCall{Call: call}
}

// MockInstanceServerGetNetworkLeasesCall wrap *gomock.Call
type MockInstanceServerGetNetworkLeasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkLeasesCall) Return(arg0 []api.NetworkLease, arg1 error) *MockInstanceServerGetNetworkLeasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkLeasesCall) Do(f func(string) ([]api.NetworkLease, error)) *MockInstanceServerGetNetworkLeasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkLeasesCall) DoAndReturn(f func(string) ([]api.NetworkLease, error)) *MockInstanceServerGetNetworkLeasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancer(arg0, arg1 string) (*api.NetworkLoadBalancer, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkLoadBalancer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkLoadBalancer indicates an expected call of GetNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancer(arg0, arg1 any) *MockInstanceServerGetNetworkLoadBalancerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancer), arg0, arg1)
	return &MockInstanceServerGetNetworkLoadBalancerCall{Call: call}
}

// MockInstanceServerGetNetworkLoadBalancerCall wrap *gomock.Call
type MockInstanceServerGetNetworkLoadBalancerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkLoadBalancerCall) Return(arg0 *api.NetworkLoadBalancer, arg1 string, arg2 error) *MockInstanceServerGetNetworkLoadBalancerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkLoadBalancerCall) Do(f func(string, string) (*api.NetworkLoadBalancer, string, error)) *MockInstanceServerGetNetworkLoadBalancerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkLoadBalancerCall) DoAndReturn(f func(string, string) (*api.NetworkLoadBalancer, string, error)) *MockInstanceServerGetNetworkLoadBalancerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkLoadBalancerAddresses mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancerAddresses(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancerAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLoadBalancerAddresses indicates an expected call of GetNetworkLoadBalancerAddresses.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancerAddresses(arg0 any) *MockInstanceServerGetNetworkLoadBalancerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancerAddresses", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancerAddresses), arg0)
	return &MockInstanceServerGetNetworkLoadBalancerAddressesCall{Call: call}
}

// MockInstanceServerGetNetworkLoadBalancerAddressesCall wrap *gomock.Call
type MockInstanceServerGetNetworkLoadBalancerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkLoadBalancerAddressesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetNetworkLoadBalancerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkLoadBalancerAddressesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetNetworkLoadBalancerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkLoadBalancerAddressesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetNetworkLoadBalancerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkLoadBalancers mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancers(arg0 string) ([]api.NetworkLoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancers", arg0)
	ret0, _ := ret[0].([]api.NetworkLoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLoadBalancers indicates an expected call of GetNetworkLoadBalancers.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancers(arg0 any) *MockInstanceServerGetNetworkLoadBalancersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancers", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancers), arg0)
	return &MockInstanceServerGetNetworkLoadBalancersCall{Call: call}
}

// MockInstanceServerGetNetworkLoadBalancersCall wrap *gomock.Call
type MockInstanceServerGetNetworkLoadBalancersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkLoadBalancersCall) Return(arg0 []api.NetworkLoadBalancer, arg1 error) *MockInstanceServerGetNetworkLoadBalancersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkLoadBalancersCall) Do(f func(string) ([]api.NetworkLoadBalancer, error)) *MockInstanceServerGetNetworkLoadBalancersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkLoadBalancersCall) DoAndReturn(f func(string) ([]api.NetworkLoadBalancer, error)) *MockInstanceServerGetNetworkLoadBalancersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkNames mocks base method.
func (m *MockInstanceServer) GetNetworkNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNames indicates an expected call of GetNetworkNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkNames() *MockInstanceServerGetNetworkNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkNames))
	return &MockInstanceServerGetNetworkNamesCall{Call: call}
}

// MockInstanceServerGetNetworkNamesCall wrap *gomock.Call
type MockInstanceServerGetNetworkNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetNetworkNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetNetworkNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetNetworkNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkPeer mocks base method.
func (m *MockInstanceServer) GetNetworkPeer(arg0, arg1 string) (*api.NetworkPeer, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeer", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkPeer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkPeer indicates an expected call of GetNetworkPeer.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeer(arg0, arg1 any) *MockInstanceServerGetNetworkPeerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeer), arg0, arg1)
	return &MockInstanceServerGetNetworkPeerCall{Call: call}
}

// MockInstanceServerGetNetworkPeerCall wrap *gomock.Call
type MockInstanceServerGetNetworkPeerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkPeerCall) Return(arg0 *api.NetworkPeer, arg1 string, arg2 error) *MockInstanceServerGetNetworkPeerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkPeerCall) Do(f func(string, string) (*api.NetworkPeer, string, error)) *MockInstanceServerGetNetworkPeerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkPeerCall) DoAndReturn(f func(string, string) (*api.NetworkPeer, string, error)) *MockInstanceServerGetNetworkPeerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkPeerNames mocks base method.
func (m *MockInstanceServer) GetNetworkPeerNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeerNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPeerNames indicates an expected call of GetNetworkPeerNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeerNames(arg0 any) *MockInstanceServerGetNetworkPeerNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeerNames), arg0)
	return &MockInstanceServerGetNetworkPeerNamesCall{Call: call}
}

// MockInstanceServerGetNetworkPeerNamesCall wrap *gomock.Call
type MockInstanceServerGetNetworkPeerNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkPeerNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetNetworkPeerNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkPeerNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetNetworkPeerNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkPeerNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetNetworkPeerNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkPeers mocks base method.
func (m *MockInstanceServer) GetNetworkPeers(arg0 string) ([]api.NetworkPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeers", arg0)
	ret0, _ := ret[0].([]api.NetworkPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPeers indicates an expected call of GetNetworkPeers.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeers(arg0 any) *MockInstanceServerGetNetworkPeersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeers", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeers), arg0)
	return &MockInstanceServerGetNetworkPeersCall{Call: call}
}

// MockInstanceServerGetNetworkPeersCall wrap *gomock.Call
type MockInstanceServerGetNetworkPeersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkPeersCall) Return(arg0 []api.NetworkPeer, arg1 error) *MockInstanceServerGetNetworkPeersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkPeersCall) Do(f func(string) ([]api.NetworkPeer, error)) *MockInstanceServerGetNetworkPeersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkPeersCall) DoAndReturn(f func(string) ([]api.NetworkPeer, error)) *MockInstanceServerGetNetworkPeersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkState mocks base method.
func (m *MockInstanceServer) GetNetworkState(arg0 string) (*api.NetworkState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkState", arg0)
	ret0, _ := ret[0].(*api.NetworkState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkState indicates an expected call of GetNetworkState.
func (mr *MockInstanceServerMockRecorder) GetNetworkState(arg0 any) *MockInstanceServerGetNetworkStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkState", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkState), arg0)
	return &MockInstanceServerGetNetworkStateCall{Call: call}
}

// MockInstanceServerGetNetworkStateCall wrap *gomock.Call
type MockInstanceServerGetNetworkStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkStateCall) Return(arg0 *api.NetworkState, arg1 error) *MockInstanceServerGetNetworkStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkStateCall) Do(f func(string) (*api.NetworkState, error)) *MockInstanceServerGetNetworkStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkStateCall) DoAndReturn(f func(string) (*api.NetworkState, error)) *MockInstanceServerGetNetworkStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkZone mocks base method.
func (m *MockInstanceServer) GetNetworkZone(arg0 string) (*api.NetworkZone, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZone", arg0)
	ret0, _ := ret[0].(*api.NetworkZone)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkZone indicates an expected call of GetNetworkZone.
func (mr *MockInstanceServerMockRecorder) GetNetworkZone(arg0 any) *MockInstanceServerGetNetworkZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZone), arg0)
	return &MockInstanceServerGetNetworkZoneCall{Call: call}
}

// MockInstanceServerGetNetworkZoneCall wrap *gomock.Call
type MockInstanceServerGetNetworkZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkZoneCall) Return(arg0 *api.NetworkZone, arg1 string, arg2 error) *MockInstanceServerGetNetworkZoneCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkZoneCall) Do(f func(string) (*api.NetworkZone, string, error)) *MockInstanceServerGetNetworkZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkZoneCall) DoAndReturn(f func(string) (*api.NetworkZone, string, error)) *MockInstanceServerGetNetworkZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkZoneNames mocks base method.
func (m *MockInstanceServer) GetNetworkZoneNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneNames indicates an expected call of GetNetworkZoneNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneNames() *MockInstanceServerGetNetworkZoneNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneNames))
	return &MockInstanceServerGetNetworkZoneNamesCall{Call: call}
}

// MockInstanceServerGetNetworkZoneNamesCall wrap *gomock.Call
type MockInstanceServerGetNetworkZoneNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkZoneNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetNetworkZoneNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkZoneNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetNetworkZoneNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkZoneNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetNetworkZoneNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecord(arg0, arg1 string) (*api.NetworkZoneRecord, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecord", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkZoneRecord)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkZoneRecord indicates an expected call of GetNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecord(arg0, arg1 any) *MockInstanceServerGetNetworkZoneRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecord), arg0, arg1)
	return &MockInstanceServerGetNetworkZoneRecordCall{Call: call}
}

// MockInstanceServerGetNetworkZoneRecordCall wrap *gomock.Call
type MockInstanceServerGetNetworkZoneRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkZoneRecordCall) Return(arg0 *api.NetworkZoneRecord, arg1 string, arg2 error) *MockInstanceServerGetNetworkZoneRecordCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkZoneRecordCall) Do(f func(string, string) (*api.NetworkZoneRecord, string, error)) *MockInstanceServerGetNetworkZoneRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkZoneRecordCall) DoAndReturn(f func(string, string) (*api.NetworkZoneRecord, string, error)) *MockInstanceServerGetNetworkZoneRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkZoneRecordNames mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecordNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecordNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneRecordNames indicates an expected call of GetNetworkZoneRecordNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecordNames(arg0 any) *MockInstanceServerGetNetworkZoneRecordNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecordNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecordNames), arg0)
	return &MockInstanceServerGetNetworkZoneRecordNamesCall{Call: call}
}

// MockInstanceServerGetNetworkZoneRecordNamesCall wrap *gomock.Call
type MockInstanceServerGetNetworkZoneRecordNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkZoneRecordNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetNetworkZoneRecordNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkZoneRecordNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetNetworkZoneRecordNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkZoneRecordNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetNetworkZoneRecordNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkZoneRecords mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecords(arg0 string) ([]api.NetworkZoneRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecords", arg0)
	ret0, _ := ret[0].([]api.NetworkZoneRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneRecords indicates an expected call of GetNetworkZoneRecords.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecords(arg0 any) *MockInstanceServerGetNetworkZoneRecordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecords", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecords), arg0)
	return &MockInstanceServerGetNetworkZoneRecordsCall{Call: call}
}

// MockInstanceServerGetNetworkZoneRecordsCall wrap *gomock.Call
type MockInstanceServerGetNetworkZoneRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkZoneRecordsCall) Return(arg0 []api.NetworkZoneRecord, arg1 error) *MockInstanceServerGetNetworkZoneRecordsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkZoneRecordsCall) Do(f func(string) ([]api.NetworkZoneRecord, error)) *MockInstanceServerGetNetworkZoneRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkZoneRecordsCall) DoAndReturn(f func(string) ([]api.NetworkZoneRecord, error)) *MockInstanceServerGetNetworkZoneRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworkZones mocks base method.
func (m *MockInstanceServer) GetNetworkZones() ([]api.NetworkZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZones")
	ret0, _ := ret[0].([]api.NetworkZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZones indicates an expected call of GetNetworkZones.
func (mr *MockInstanceServerMockRecorder) GetNetworkZones() *MockInstanceServerGetNetworkZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZones", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZones))
	return &MockInstanceServerGetNetworkZonesCall{Call: call}
}

// MockInstanceServerGetNetworkZonesCall wrap *gomock.Call
type MockInstanceServerGetNetworkZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworkZonesCall) Return(arg0 []api.NetworkZone, arg1 error) *MockInstanceServerGetNetworkZonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworkZonesCall) Do(f func() ([]api.NetworkZone, error)) *MockInstanceServerGetNetworkZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworkZonesCall) DoAndReturn(f func() ([]api.NetworkZone, error)) *MockInstanceServerGetNetworkZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNetworks mocks base method.
func (m *MockInstanceServer) GetNetworks() ([]api.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks")
	ret0, _ := ret[0].([]api.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks.
func (mr *MockInstanceServerMockRecorder) GetNetworks() *MockInstanceServerGetNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworks))
	return &MockInstanceServerGetNetworksCall{Call: call}
}

// MockInstanceServerGetNetworksCall wrap *gomock.Call
type MockInstanceServerGetNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetNetworksCall) Return(arg0 []api.Network, arg1 error) *MockInstanceServerGetNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetNetworksCall) Do(f func() ([]api.Network, error)) *MockInstanceServerGetNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetNetworksCall) DoAndReturn(f func() ([]api.Network, error)) *MockInstanceServerGetNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockInstanceServer) GetOperation(arg0 string) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockInstanceServerMockRecorder) GetOperation(arg0 any) *MockInstanceServerGetOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockInstanceServer)(nil).GetOperation), arg0)
	return &MockInstanceServerGetOperationCall{Call: call}
}

// MockInstanceServerGetOperationCall wrap *gomock.Call
type MockInstanceServerGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetOperationCall) Return(arg0 *api.Operation, arg1 string, arg2 error) *MockInstanceServerGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetOperationCall) Do(f func(string) (*api.Operation, string, error)) *MockInstanceServerGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetOperationCall) DoAndReturn(f func(string) (*api.Operation, string, error)) *MockInstanceServerGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationUUIDs mocks base method.
func (m *MockInstanceServer) GetOperationUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationUUIDs indicates an expected call of GetOperationUUIDs.
func (mr *MockInstanceServerMockRecorder) GetOperationUUIDs() *MockInstanceServerGetOperationUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationUUIDs))
	return &MockInstanceServerGetOperationUUIDsCall{Call: call}
}

// MockInstanceServerGetOperationUUIDsCall wrap *gomock.Call
type MockInstanceServerGetOperationUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetOperationUUIDsCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetOperationUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetOperationUUIDsCall) Do(f func() ([]string, error)) *MockInstanceServerGetOperationUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetOperationUUIDsCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetOperationUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationWait mocks base method.
func (m *MockInstanceServer) GetOperationWait(arg0 string, arg1 int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWait", arg0, arg1)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWait indicates an expected call of GetOperationWait.
func (mr *MockInstanceServerMockRecorder) GetOperationWait(arg0, arg1 any) *MockInstanceServerGetOperationWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWait", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWait), arg0, arg1)
	return &MockInstanceServerGetOperationWaitCall{Call: call}
}

// MockInstanceServerGetOperationWaitCall wrap *gomock.Call
type MockInstanceServerGetOperationWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetOperationWaitCall) Return(arg0 *api.Operation, arg1 string, arg2 error) *MockInstanceServerGetOperationWaitCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetOperationWaitCall) Do(f func(string, int) (*api.Operation, string, error)) *MockInstanceServerGetOperationWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetOperationWaitCall) DoAndReturn(f func(string, int) (*api.Operation, string, error)) *MockInstanceServerGetOperationWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationWaitSecret mocks base method.
func (m *MockInstanceServer) GetOperationWaitSecret(arg0, arg1 string, arg2 int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWaitSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWaitSecret indicates an expected call of GetOperationWaitSecret.
func (mr *MockInstanceServerMockRecorder) GetOperationWaitSecret(arg0, arg1, arg2 any) *MockInstanceServerGetOperationWaitSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWaitSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWaitSecret), arg0, arg1, arg2)
	return &MockInstanceServerGetOperationWaitSecretCall{Call: call}
}

// MockInstanceServerGetOperationWaitSecretCall wrap *gomock.Call
type MockInstanceServerGetOperationWaitSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetOperationWaitSecretCall) Return(arg0 *api.Operation, arg1 string, arg2 error) *MockInstanceServerGetOperationWaitSecretCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetOperationWaitSecretCall) Do(f func(string, string, int) (*api.Operation, string, error)) *MockInstanceServerGetOperationWaitSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetOperationWaitSecretCall) DoAndReturn(f func(string, string, int) (*api.Operation, string, error)) *MockInstanceServerGetOperationWaitSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationWebsocket mocks base method.
func (m *MockInstanceServer) GetOperationWebsocket(arg0, arg1 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWebsocket", arg0, arg1)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWebsocket indicates an expected call of GetOperationWebsocket.
func (mr *MockInstanceServerMockRecorder) GetOperationWebsocket(arg0, arg1 any) *MockInstanceServerGetOperationWebsocketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWebsocket), arg0, arg1)
	return &MockInstanceServerGetOperationWebsocketCall{Call: call}
}

// MockInstanceServerGetOperationWebsocketCall wrap *gomock.Call
type MockInstanceServerGetOperationWebsocketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetOperationWebsocketCall) Return(arg0 *websocket.Conn, arg1 error) *MockInstanceServerGetOperationWebsocketCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetOperationWebsocketCall) Do(f func(string, string) (*websocket.Conn, error)) *MockInstanceServerGetOperationWebsocketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetOperationWebsocketCall) DoAndReturn(f func(string, string) (*websocket.Conn, error)) *MockInstanceServerGetOperationWebsocketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperations mocks base method.
func (m *MockInstanceServer) GetOperations() ([]api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations")
	ret0, _ := ret[0].([]api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockInstanceServerMockRecorder) GetOperations() *MockInstanceServerGetOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockInstanceServer)(nil).GetOperations))
	return &MockInstanceServerGetOperationsCall{Call: call}
}

// MockInstanceServerGetOperationsCall wrap *gomock.Call
type MockInstanceServerGetOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetOperationsCall) Return(arg0 []api.Operation, arg1 error) *MockInstanceServerGetOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetOperationsCall) Do(f func() ([]api.Operation, error)) *MockInstanceServerGetOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetOperationsCall) DoAndReturn(f func() ([]api.Operation, error)) *MockInstanceServerGetOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationsAllProjects mocks base method.
func (m *MockInstanceServer) GetOperationsAllProjects() ([]api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsAllProjects")
	ret0, _ := ret[0].([]api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsAllProjects indicates an expected call of GetOperationsAllProjects.
func (mr *MockInstanceServerMockRecorder) GetOperationsAllProjects() *MockInstanceServerGetOperationsAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationsAllProjects))
	return &MockInstanceServerGetOperationsAllProjectsCall{Call: call}
}

// MockInstanceServerGetOperationsAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetOperationsAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetOperationsAllProjectsCall) Return(arg0 []api.Operation, arg1 error) *MockInstanceServerGetOperationsAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetOperationsAllProjectsCall) Do(f func() ([]api.Operation, error)) *MockInstanceServerGetOperationsAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetOperationsAllProjectsCall) DoAndReturn(f func() ([]api.Operation, error)) *MockInstanceServerGetOperationsAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPermissions mocks base method.
func (m *MockInstanceServer) GetPermissions(arg0 lxd.GetPermissionsArgs) ([]api.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", arg0)
	ret0, _ := ret[0].([]api.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockInstanceServerMockRecorder) GetPermissions(arg0 any) *MockInstanceServerGetPermissionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockInstanceServer)(nil).GetPermissions), arg0)
	return &MockInstanceServerGetPermissionsCall{Call: call}
}

// MockInstanceServerGetPermissionsCall wrap *gomock.Call
type MockInstanceServerGetPermissionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetPermissionsCall) Return(arg0 []api.Permission, arg1 error) *MockInstanceServerGetPermissionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetPermissionsCall) Do(f func(lxd.GetPermissionsArgs) ([]api.Permission, error)) *MockInstanceServerGetPermissionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetPermissionsCall) DoAndReturn(f func(lxd.GetPermissionsArgs) ([]api.Permission, error)) *MockInstanceServerGetPermissionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPermissionsInfo mocks base method.
func (m *MockInstanceServer) GetPermissionsInfo(arg0 lxd.GetPermissionsArgs) ([]api.PermissionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsInfo", arg0)
	ret0, _ := ret[0].([]api.PermissionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsInfo indicates an expected call of GetPermissionsInfo.
func (mr *MockInstanceServerMockRecorder) GetPermissionsInfo(arg0 any) *MockInstanceServerGetPermissionsInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetPermissionsInfo), arg0)
	return &MockInstanceServerGetPermissionsInfoCall{Call: call}
}

// MockInstanceServerGetPermissionsInfoCall wrap *gomock.Call
type MockInstanceServerGetPermissionsInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetPermissionsInfoCall) Return(arg0 []api.PermissionInfo, arg1 error) *MockInstanceServerGetPermissionsInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetPermissionsInfoCall) Do(f func(lxd.GetPermissionsArgs) ([]api.PermissionInfo, error)) *MockInstanceServerGetPermissionsInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetPermissionsInfoCall) DoAndReturn(f func(lxd.GetPermissionsArgs) ([]api.PermissionInfo, error)) *MockInstanceServerGetPermissionsInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrivateImage mocks base method.
func (m *MockInstanceServer) GetPrivateImage(arg0, arg1 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage.
func (mr *MockInstanceServerMockRecorder) GetPrivateImage(arg0, arg1 any) *MockInstanceServerGetPrivateImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImage), arg0, arg1)
	return &MockInstanceServerGetPrivateImageCall{Call: call}
}

// MockInstanceServerGetPrivateImageCall wrap *gomock.Call
type MockInstanceServerGetPrivateImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetPrivateImageCall) Return(arg0 *api.Image, arg1 string, arg2 error) *MockInstanceServerGetPrivateImageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetPrivateImageCall) Do(f func(string, string) (*api.Image, string, error)) *MockInstanceServerGetPrivateImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetPrivateImageCall) DoAndReturn(f func(string, string) (*api.Image, string, error)) *MockInstanceServerGetPrivateImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrivateImageFile mocks base method.
func (m *MockInstanceServer) GetPrivateImageFile(arg0, arg1 string, arg2 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile.
func (mr *MockInstanceServerMockRecorder) GetPrivateImageFile(arg0, arg1, arg2 any) *MockInstanceServerGetPrivateImageFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImageFile), arg0, arg1, arg2)
	return &MockInstanceServerGetPrivateImageFileCall{Call: call}
}

// MockInstanceServerGetPrivateImageFileCall wrap *gomock.Call
type MockInstanceServerGetPrivateImageFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetPrivateImageFileCall) Return(arg0 *lxd.ImageFileResponse, arg1 error) *MockInstanceServerGetPrivateImageFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetPrivateImageFileCall) Do(f func(string, string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockInstanceServerGetPrivateImageFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetPrivateImageFileCall) DoAndReturn(f func(string, string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)) *MockInstanceServerGetPrivateImageFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProfile mocks base method.
func (m *MockInstanceServer) GetProfile(arg0 string) (*api.Profile, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*api.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockInstanceServerMockRecorder) GetProfile(arg0 any) *MockInstanceServerGetProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockInstanceServer)(nil).GetProfile), arg0)
	return &MockInstanceServerGetProfileCall{Call: call}
}

// MockInstanceServerGetProfileCall wrap *gomock.Call
type MockInstanceServerGetProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetProfileCall) Return(arg0 *api.Profile, arg1 string, arg2 error) *MockInstanceServerGetProfileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetProfileCall) Do(f func(string) (*api.Profile, string, error)) *MockInstanceServerGetProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetProfileCall) DoAndReturn(f func(string) (*api.Profile, string, error)) *MockInstanceServerGetProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProfileNames mocks base method.
func (m *MockInstanceServer) GetProfileNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNames indicates an expected call of GetProfileNames.
func (mr *MockInstanceServerMockRecorder) GetProfileNames() *MockInstanceServerGetProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProfileNames))
	return &MockInstanceServerGetProfileNamesCall{Call: call}
}

// MockInstanceServerGetProfileNamesCall wrap *gomock.Call
type MockInstanceServerGetProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetProfileNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetProfileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetProfileNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetProfileNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProfiles mocks base method.
func (m *MockInstanceServer) GetProfiles() ([]api.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles")
	ret0, _ := ret[0].([]api.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles.
func (mr *MockInstanceServerMockRecorder) GetProfiles() *MockInstanceServerGetProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetProfiles))
	return &MockInstanceServerGetProfilesCall{Call: call}
}

// MockInstanceServerGetProfilesCall wrap *gomock.Call
type MockInstanceServerGetProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetProfilesCall) Return(arg0 []api.Profile, arg1 error) *MockInstanceServerGetProfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetProfilesCall) Do(f func() ([]api.Profile, error)) *MockInstanceServerGetProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetProfilesCall) DoAndReturn(f func() ([]api.Profile, error)) *MockInstanceServerGetProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProject mocks base method.
func (m *MockInstanceServer) GetProject(arg0 string) (*api.Project, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0)
	ret0, _ := ret[0].(*api.Project)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockInstanceServerMockRecorder) GetProject(arg0 any) *MockInstanceServerGetProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockInstanceServer)(nil).GetProject), arg0)
	return &MockInstanceServerGetProjectCall{Call: call}
}

// MockInstanceServerGetProjectCall wrap *gomock.Call
type MockInstanceServerGetProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetProjectCall) Return(arg0 *api.Project, arg1 string, arg2 error) *MockInstanceServerGetProjectCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetProjectCall) Do(f func(string) (*api.Project, string, error)) *MockInstanceServerGetProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetProjectCall) DoAndReturn(f func(string) (*api.Project, string, error)) *MockInstanceServerGetProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectNames mocks base method.
func (m *MockInstanceServer) GetProjectNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectNames indicates an expected call of GetProjectNames.
func (mr *MockInstanceServerMockRecorder) GetProjectNames() *MockInstanceServerGetProjectNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectNames))
	return &MockInstanceServerGetProjectNamesCall{Call: call}
}

// MockInstanceServerGetProjectNamesCall wrap *gomock.Call
type MockInstanceServerGetProjectNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetProjectNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetProjectNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetProjectNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetProjectNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetProjectNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetProjectNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectState mocks base method.
func (m *MockInstanceServer) GetProjectState(arg0 string) (*api.ProjectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectState", arg0)
	ret0, _ := ret[0].(*api.ProjectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectState indicates an expected call of GetProjectState.
func (mr *MockInstanceServerMockRecorder) GetProjectState(arg0 any) *MockInstanceServerGetProjectStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectState", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectState), arg0)
	return &MockInstanceServerGetProjectStateCall{Call: call}
}

// MockInstanceServerGetProjectStateCall wrap *gomock.Call
type MockInstanceServerGetProjectStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetProjectStateCall) Return(arg0 *api.ProjectState, arg1 error) *MockInstanceServerGetProjectStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetProjectStateCall) Do(f func(string) (*api.ProjectState, error)) *MockInstanceServerGetProjectStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetProjectStateCall) DoAndReturn(f func(string) (*api.ProjectState, error)) *MockInstanceServerGetProjectStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjects mocks base method.
func (m *MockInstanceServer) GetProjects() ([]api.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].([]api.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockInstanceServerMockRecorder) GetProjects() *MockInstanceServerGetProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetProjects))
	return &MockInstanceServerGetProjectsCall{Call: call}
}

// MockInstanceServerGetProjectsCall wrap *gomock.Call
type MockInstanceServerGetProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetProjectsCall) Return(arg0 []api.Project, arg1 error) *MockInstanceServerGetProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetProjectsCall) Do(f func() ([]api.Project, error)) *MockInstanceServerGetProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetProjectsCall) DoAndReturn(f func() ([]api.Project, error)) *MockInstanceServerGetProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetServer mocks base method.
func (m *MockInstanceServer) GetServer() (*api.Server, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*api.Server)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServer indicates an expected call of GetServer.
func (mr *MockInstanceServerMockRecorder) GetServer() *MockInstanceServerGetServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInstanceServer)(nil).GetServer))
	return &MockInstanceServerGetServerCall{Call: call}
}

// MockInstanceServerGetServerCall wrap *gomock.Call
type MockInstanceServerGetServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetServerCall) Return(arg0 *api.Server, arg1 string, arg2 error) *MockInstanceServerGetServerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetServerCall) Do(f func() (*api.Server, string, error)) *MockInstanceServerGetServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetServerCall) DoAndReturn(f func() (*api.Server, string, error)) *MockInstanceServerGetServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetServerResources mocks base method.
func (m *MockInstanceServer) GetServerResources() (*api.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerResources")
	ret0, _ := ret[0].(*api.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerResources indicates an expected call of GetServerResources.
func (mr *MockInstanceServerMockRecorder) GetServerResources() *MockInstanceServerGetServerResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerResources", reflect.TypeOf((*MockInstanceServer)(nil).GetServerResources))
	return &MockInstanceServerGetServerResourcesCall{Call: call}
}

// MockInstanceServerGetServerResourcesCall wrap *gomock.Call
type MockInstanceServerGetServerResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetServerResourcesCall) Return(arg0 *api.Resources, arg1 error) *MockInstanceServerGetServerResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetServerResourcesCall) Do(f func() (*api.Resources, error)) *MockInstanceServerGetServerResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetServerResourcesCall) DoAndReturn(f func() (*api.Resources, error)) *MockInstanceServerGetServerResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePool mocks base method.
func (m *MockInstanceServer) GetStoragePool(arg0 string) (*api.StoragePool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", arg0)
	ret0, _ := ret[0].(*api.StoragePool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePool indicates an expected call of GetStoragePool.
func (mr *MockInstanceServerMockRecorder) GetStoragePool(arg0 any) *MockInstanceServerGetStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePool), arg0)
	return &MockInstanceServerGetStoragePoolCall{Call: call}
}

// MockInstanceServerGetStoragePoolCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolCall) Return(arg0 *api.StoragePool, arg1 string, arg2 error) *MockInstanceServerGetStoragePoolCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolCall) Do(f func(string) (*api.StoragePool, string, error)) *MockInstanceServerGetStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolCall) DoAndReturn(f func(string) (*api.StoragePool, string, error)) *MockInstanceServerGetStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolBucket mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucket(arg0, arg1 string) (*api.StorageBucket, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucket", arg0, arg1)
	ret0, _ := ret[0].(*api.StorageBucket)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolBucket indicates an expected call of GetStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucket(arg0, arg1 any) *MockInstanceServerGetStoragePoolBucketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucket), arg0, arg1)
	return &MockInstanceServerGetStoragePoolBucketCall{Call: call}
}

// MockInstanceServerGetStoragePoolBucketCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolBucketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolBucketCall) Return(arg0 *api.StorageBucket, arg1 string, arg2 error) *MockInstanceServerGetStoragePoolBucketCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolBucketCall) Do(f func(string, string) (*api.StorageBucket, string, error)) *MockInstanceServerGetStoragePoolBucketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolBucketCall) DoAndReturn(f func(string, string) (*api.StorageBucket, string, error)) *MockInstanceServerGetStoragePoolBucketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKey(arg0, arg1, arg2 string) (*api.StorageBucketKey, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolBucketKey indicates an expected call of GetStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKey(arg0, arg1, arg2 any) *MockInstanceServerGetStoragePoolBucketKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKey), arg0, arg1, arg2)
	return &MockInstanceServerGetStoragePoolBucketKeyCall{Call: call}
}

// MockInstanceServerGetStoragePoolBucketKeyCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolBucketKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolBucketKeyCall) Return(arg0 *api.StorageBucketKey, arg1 string, arg2 error) *MockInstanceServerGetStoragePoolBucketKeyCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolBucketKeyCall) Do(f func(string, string, string) (*api.StorageBucketKey, string, error)) *MockInstanceServerGetStoragePoolBucketKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolBucketKeyCall) DoAndReturn(f func(string, string, string) (*api.StorageBucketKey, string, error)) *MockInstanceServerGetStoragePoolBucketKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolBucketKeyNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKeyNames(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKeyNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketKeyNames indicates an expected call of GetStoragePoolBucketKeyNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKeyNames(arg0, arg1 any) *MockInstanceServerGetStoragePoolBucketKeyNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKeyNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKeyNames), arg0, arg1)
	return &MockInstanceServerGetStoragePoolBucketKeyNamesCall{Call: call}
}

// MockInstanceServerGetStoragePoolBucketKeyNamesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolBucketKeyNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolBucketKeyNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetStoragePoolBucketKeyNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolBucketKeyNamesCall) Do(f func(string, string) ([]string, error)) *MockInstanceServerGetStoragePoolBucketKeyNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolBucketKeyNamesCall) DoAndReturn(f func(string, string) ([]string, error)) *MockInstanceServerGetStoragePoolBucketKeyNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolBucketKeys mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKeys(arg0, arg1 string) ([]api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKeys", arg0, arg1)
	ret0, _ := ret[0].([]api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketKeys indicates an expected call of GetStoragePoolBucketKeys.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKeys(arg0, arg1 any) *MockInstanceServerGetStoragePoolBucketKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKeys", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKeys), arg0, arg1)
	return &MockInstanceServerGetStoragePoolBucketKeysCall{Call: call}
}

// MockInstanceServerGetStoragePoolBucketKeysCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolBucketKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolBucketKeysCall) Return(arg0 []api.StorageBucketKey, arg1 error) *MockInstanceServerGetStoragePoolBucketKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolBucketKeysCall) Do(f func(string, string) ([]api.StorageBucketKey, error)) *MockInstanceServerGetStoragePoolBucketKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolBucketKeysCall) DoAndReturn(f func(string, string) ([]api.StorageBucketKey, error)) *MockInstanceServerGetStoragePoolBucketKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolBucketNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketNames indicates an expected call of GetStoragePoolBucketNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketNames(arg0 any) *MockInstanceServerGetStoragePoolBucketNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketNames), arg0)
	return &MockInstanceServerGetStoragePoolBucketNamesCall{Call: call}
}

// MockInstanceServerGetStoragePoolBucketNamesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolBucketNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolBucketNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetStoragePoolBucketNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolBucketNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetStoragePoolBucketNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolBucketNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetStoragePoolBucketNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolBuckets mocks base method.
func (m *MockInstanceServer) GetStoragePoolBuckets(arg0 string) ([]api.StorageBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBuckets", arg0)
	ret0, _ := ret[0].([]api.StorageBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBuckets indicates an expected call of GetStoragePoolBuckets.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBuckets(arg0 any) *MockInstanceServerGetStoragePoolBucketsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBuckets", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBuckets), arg0)
	return &MockInstanceServerGetStoragePoolBucketsCall{Call: call}
}

// MockInstanceServerGetStoragePoolBucketsCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolBucketsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolBucketsCall) Return(arg0 []api.StorageBucket, arg1 error) *MockInstanceServerGetStoragePoolBucketsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolBucketsCall) Do(f func(string) ([]api.StorageBucket, error)) *MockInstanceServerGetStoragePoolBucketsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolBucketsCall) DoAndReturn(f func(string) ([]api.StorageBucket, error)) *MockInstanceServerGetStoragePoolBucketsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolNames indicates an expected call of GetStoragePoolNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolNames() *MockInstanceServerGetStoragePoolNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolNames))
	return &MockInstanceServerGetStoragePoolNamesCall{Call: call}
}

// MockInstanceServerGetStoragePoolNamesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetStoragePoolNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolNamesCall) Do(f func() ([]string, error)) *MockInstanceServerGetStoragePoolNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolNamesCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetStoragePoolNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolResources mocks base method.
func (m *MockInstanceServer) GetStoragePoolResources(arg0 string) (*api.ResourcesStoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolResources", arg0)
	ret0, _ := ret[0].(*api.ResourcesStoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolResources indicates an expected call of GetStoragePoolResources.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolResources(arg0 any) *MockInstanceServerGetStoragePoolResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolResources", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolResources), arg0)
	return &MockInstanceServerGetStoragePoolResourcesCall{Call: call}
}

// MockInstanceServerGetStoragePoolResourcesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolResourcesCall) Return(arg0 *api.ResourcesStoragePool, arg1 error) *MockInstanceServerGetStoragePoolResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolResourcesCall) Do(f func(string) (*api.ResourcesStoragePool, error)) *MockInstanceServerGetStoragePoolResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolResourcesCall) DoAndReturn(f func(string) (*api.ResourcesStoragePool, error)) *MockInstanceServerGetStoragePoolResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolume mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolume(arg0, arg1, arg2 string) (*api.StorageVolume, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageVolume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolume indicates an expected call of GetStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolume(arg0, arg1, arg2 any) *MockInstanceServerGetStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolume), arg0, arg1, arg2)
	return &MockInstanceServerGetStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeCall) Return(arg0 *api.StorageVolume, arg1 string, arg2 error) *MockInstanceServerGetStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeCall) Do(f func(string, string, string) (*api.StorageVolume, string, error)) *MockInstanceServerGetStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeCall) DoAndReturn(f func(string, string, string) (*api.StorageVolume, string, error)) *MockInstanceServerGetStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackup(arg0, arg1, arg2 string) (*api.StoragePoolVolumeBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeBackup indicates an expected call of GetStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackup(arg0, arg1, arg2 any) *MockInstanceServerGetStoragePoolVolumeBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackup), arg0, arg1, arg2)
	return &MockInstanceServerGetStoragePoolVolumeBackupCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeBackupCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeBackupCall) Return(arg0 *api.StoragePoolVolumeBackup, arg1 string, arg2 error) *MockInstanceServerGetStoragePoolVolumeBackupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeBackupCall) Do(f func(string, string, string) (*api.StoragePoolVolumeBackup, string, error)) *MockInstanceServerGetStoragePoolVolumeBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeBackupCall) DoAndReturn(f func(string, string, string) (*api.StoragePoolVolumeBackup, string, error)) *MockInstanceServerGetStoragePoolVolumeBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeBackupFile mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackupFile(arg0, arg1, arg2 string, arg3 *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupFile indicates an expected call of GetStoragePoolVolumeBackupFile.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupFile(arg0, arg1, arg2, arg3 any) *MockInstanceServerGetStoragePoolVolumeBackupFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupFile), arg0, arg1, arg2, arg3)
	return &MockInstanceServerGetStoragePoolVolumeBackupFileCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeBackupFileCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeBackupFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeBackupFileCall) Return(arg0 *lxd.BackupFileResponse, arg1 error) *MockInstanceServerGetStoragePoolVolumeBackupFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeBackupFileCall) Do(f func(string, string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)) *MockInstanceServerGetStoragePoolVolumeBackupFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeBackupFileCall) DoAndReturn(f func(string, string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)) *MockInstanceServerGetStoragePoolVolumeBackupFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeBackupNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackupNames(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupNames indicates an expected call of GetStoragePoolVolumeBackupNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupNames(arg0, arg1 any) *MockInstanceServerGetStoragePoolVolumeBackupNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupNames), arg0, arg1)
	return &MockInstanceServerGetStoragePoolVolumeBackupNamesCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeBackupNamesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeBackupNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeBackupNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetStoragePoolVolumeBackupNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeBackupNamesCall) Do(f func(string, string) ([]string, error)) *MockInstanceServerGetStoragePoolVolumeBackupNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeBackupNamesCall) DoAndReturn(f func(string, string) ([]string, error)) *MockInstanceServerGetStoragePoolVolumeBackupNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeBackups mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackups(arg0, arg1 string) ([]api.StoragePoolVolumeBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackups", arg0, arg1)
	ret0, _ := ret[0].([]api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackups indicates an expected call of GetStoragePoolVolumeBackups.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackups(arg0, arg1 any) *MockInstanceServerGetStoragePoolVolumeBackupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackups), arg0, arg1)
	return &MockInstanceServerGetStoragePoolVolumeBackupsCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeBackupsCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeBackupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeBackupsCall) Return(arg0 []api.StoragePoolVolumeBackup, arg1 error) *MockInstanceServerGetStoragePoolVolumeBackupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeBackupsCall) Do(f func(string, string) ([]api.StoragePoolVolumeBackup, error)) *MockInstanceServerGetStoragePoolVolumeBackupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeBackupsCall) DoAndReturn(f func(string, string) ([]api.StoragePoolVolumeBackup, error)) *MockInstanceServerGetStoragePoolVolumeBackupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNames indicates an expected call of GetStoragePoolVolumeNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNames(arg0 any) *MockInstanceServerGetStoragePoolVolumeNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNames), arg0)
	return &MockInstanceServerGetStoragePoolVolumeNamesCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeNamesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetStoragePoolVolumeNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeNamesCall) Do(f func(string) ([]string, error)) *MockInstanceServerGetStoragePoolVolumeNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockInstanceServerGetStoragePoolVolumeNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeNamesAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeNamesAllProjects(arg0 string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNamesAllProjects", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNamesAllProjects indicates an expected call of GetStoragePoolVolumeNamesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNamesAllProjects(arg0 any) *MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNamesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNamesAllProjects), arg0)
	return &MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall) Return(arg0 map[string][]string, arg1 error) *MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall) Do(f func(string) (map[string][]string, error)) *MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall) DoAndReturn(f func(string) (map[string][]string, error)) *MockInstanceServerGetStoragePoolVolumeNamesAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string) (*api.StorageVolumeSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeSnapshot indicates an expected call of GetStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 any) *MockInstanceServerGetStoragePoolVolumeSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
	return &MockInstanceServerGetStoragePoolVolumeSnapshotCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeSnapshotCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotCall) Return(arg0 *api.StorageVolumeSnapshot, arg1 string, arg2 error) *MockInstanceServerGetStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotCall) Do(f func(string, string, string, string) (*api.StorageVolumeSnapshot, string, error)) *MockInstanceServerGetStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotCall) DoAndReturn(f func(string, string, string, string) (*api.StorageVolumeSnapshot, string, error)) *MockInstanceServerGetStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeSnapshotNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshotNames(arg0, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshotNames", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshotNames indicates an expected call of GetStoragePoolVolumeSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshotNames(arg0, arg1, arg2 any) *MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshotNames), arg0, arg1, arg2)
	return &MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall) Do(f func(string, string, string) ([]string, error)) *MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall) DoAndReturn(f func(string, string, string) ([]string, error)) *MockInstanceServerGetStoragePoolVolumeSnapshotNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeSnapshots mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshots(arg0, arg1, arg2 string) ([]api.StorageVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshots indicates an expected call of GetStoragePoolVolumeSnapshots.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshots(arg0, arg1, arg2 any) *MockInstanceServerGetStoragePoolVolumeSnapshotsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshots), arg0, arg1, arg2)
	return &MockInstanceServerGetStoragePoolVolumeSnapshotsCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeSnapshotsCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeSnapshotsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotsCall) Return(arg0 []api.StorageVolumeSnapshot, arg1 error) *MockInstanceServerGetStoragePoolVolumeSnapshotsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotsCall) Do(f func(string, string, string) ([]api.StorageVolumeSnapshot, error)) *MockInstanceServerGetStoragePoolVolumeSnapshotsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeSnapshotsCall) DoAndReturn(f func(string, string, string) ([]api.StorageVolumeSnapshot, error)) *MockInstanceServerGetStoragePoolVolumeSnapshotsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumeState mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeState(arg0, arg1, arg2 string) (*api.StorageVolumeState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeState", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageVolumeState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeState indicates an expected call of GetStoragePoolVolumeState.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeState(arg0, arg1, arg2 any) *MockInstanceServerGetStoragePoolVolumeStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeState", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeState), arg0, arg1, arg2)
	return &MockInstanceServerGetStoragePoolVolumeStateCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumeStateCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumeStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumeStateCall) Return(arg0 *api.StorageVolumeState, arg1 error) *MockInstanceServerGetStoragePoolVolumeStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumeStateCall) Do(f func(string, string, string) (*api.StorageVolumeState, error)) *MockInstanceServerGetStoragePoolVolumeStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumeStateCall) DoAndReturn(f func(string, string, string) (*api.StorageVolumeState, error)) *MockInstanceServerGetStoragePoolVolumeStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumes mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumes(arg0 string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumes", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumes indicates an expected call of GetStoragePoolVolumes.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumes(arg0 any) *MockInstanceServerGetStoragePoolVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumes", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumes), arg0)
	return &MockInstanceServerGetStoragePoolVolumesCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumesCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumesCall) Return(arg0 []api.StorageVolume, arg1 error) *MockInstanceServerGetStoragePoolVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumesCall) Do(f func(string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumesCall) DoAndReturn(f func(string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumesAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesAllProjects(arg0 string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesAllProjects", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesAllProjects indicates an expected call of GetStoragePoolVolumesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesAllProjects(arg0 any) *MockInstanceServerGetStoragePoolVolumesAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesAllProjects), arg0)
	return &MockInstanceServerGetStoragePoolVolumesAllProjectsCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumesAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumesAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumesAllProjectsCall) Return(arg0 []api.StorageVolume, arg1 error) *MockInstanceServerGetStoragePoolVolumesAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumesAllProjectsCall) Do(f func(string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumesAllProjectsCall) DoAndReturn(f func(string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumesWithFilter mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesWithFilter(arg0 string, arg1 []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesWithFilter indicates an expected call of GetStoragePoolVolumesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesWithFilter(arg0, arg1 any) *MockInstanceServerGetStoragePoolVolumesWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesWithFilter), arg0, arg1)
	return &MockInstanceServerGetStoragePoolVolumesWithFilterCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumesWithFilterCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumesWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumesWithFilterCall) Return(arg0 []api.StorageVolume, arg1 error) *MockInstanceServerGetStoragePoolVolumesWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumesWithFilterCall) Do(f func(string, []string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumesWithFilterCall) DoAndReturn(f func(string, []string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolVolumesWithFilterAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesWithFilterAllProjects(arg0 string, arg1 []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesWithFilterAllProjects", arg0, arg1)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesWithFilterAllProjects indicates an expected call of GetStoragePoolVolumesWithFilterAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesWithFilterAllProjects(arg0, arg1 any) *MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesWithFilterAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesWithFilterAllProjects), arg0, arg1)
	return &MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall{Call: call}
}

// MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall) Return(arg0 []api.StorageVolume, arg1 error) *MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall) Do(f func(string, []string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall) DoAndReturn(f func(string, []string) ([]api.StorageVolume, error)) *MockInstanceServerGetStoragePoolVolumesWithFilterAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePools mocks base method.
func (m *MockInstanceServer) GetStoragePools() ([]api.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePools")
	ret0, _ := ret[0].([]api.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePools indicates an expected call of GetStoragePools.
func (mr *MockInstanceServerMockRecorder) GetStoragePools() *MockInstanceServerGetStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePools", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePools))
	return &MockInstanceServerGetStoragePoolsCall{Call: call}
}

// MockInstanceServerGetStoragePoolsCall wrap *gomock.Call
type MockInstanceServerGetStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetStoragePoolsCall) Return(arg0 []api.StoragePool, arg1 error) *MockInstanceServerGetStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetStoragePoolsCall) Do(f func() ([]api.StoragePool, error)) *MockInstanceServerGetStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetStoragePoolsCall) DoAndReturn(f func() ([]api.StoragePool, error)) *MockInstanceServerGetStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumesWithFilter mocks base method.
func (m *MockInstanceServer) GetVolumesWithFilter(arg0 []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesWithFilter", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesWithFilter indicates an expected call of GetVolumesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetVolumesWithFilter(arg0 any) *MockInstanceServerGetVolumesWithFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetVolumesWithFilter), arg0)
	return &MockInstanceServerGetVolumesWithFilterCall{Call: call}
}

// MockInstanceServerGetVolumesWithFilterCall wrap *gomock.Call
type MockInstanceServerGetVolumesWithFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetVolumesWithFilterCall) Return(arg0 []api.StorageVolume, arg1 error) *MockInstanceServerGetVolumesWithFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetVolumesWithFilterCall) Do(f func([]string) ([]api.StorageVolume, error)) *MockInstanceServerGetVolumesWithFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetVolumesWithFilterCall) DoAndReturn(f func([]string) ([]api.StorageVolume, error)) *MockInstanceServerGetVolumesWithFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumesWithFilterAllProjects mocks base method.
func (m *MockInstanceServer) GetVolumesWithFilterAllProjects(arg0 []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesWithFilterAllProjects", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesWithFilterAllProjects indicates an expected call of GetVolumesWithFilterAllProjects.
func (mr *MockInstanceServerMockRecorder) GetVolumesWithFilterAllProjects(arg0 any) *MockInstanceServerGetVolumesWithFilterAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesWithFilterAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetVolumesWithFilterAllProjects), arg0)
	return &MockInstanceServerGetVolumesWithFilterAllProjectsCall{Call: call}
}

// MockInstanceServerGetVolumesWithFilterAllProjectsCall wrap *gomock.Call
type MockInstanceServerGetVolumesWithFilterAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetVolumesWithFilterAllProjectsCall) Return(arg0 []api.StorageVolume, arg1 error) *MockInstanceServerGetVolumesWithFilterAllProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetVolumesWithFilterAllProjectsCall) Do(f func([]string) ([]api.StorageVolume, error)) *MockInstanceServerGetVolumesWithFilterAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetVolumesWithFilterAllProjectsCall) DoAndReturn(f func([]string) ([]api.StorageVolume, error)) *MockInstanceServerGetVolumesWithFilterAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWarning mocks base method.
func (m *MockInstanceServer) GetWarning(arg0 string) (*api.Warning, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarning", arg0)
	ret0, _ := ret[0].(*api.Warning)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWarning indicates an expected call of GetWarning.
func (mr *MockInstanceServerMockRecorder) GetWarning(arg0 any) *MockInstanceServerGetWarningCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarning", reflect.TypeOf((*MockInstanceServer)(nil).GetWarning), arg0)
	return &MockInstanceServerGetWarningCall{Call: call}
}

// MockInstanceServerGetWarningCall wrap *gomock.Call
type MockInstanceServerGetWarningCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetWarningCall) Return(arg0 *api.Warning, arg1 string, arg2 error) *MockInstanceServerGetWarningCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetWarningCall) Do(f func(string) (*api.Warning, string, error)) *MockInstanceServerGetWarningCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetWarningCall) DoAndReturn(f func(string) (*api.Warning, string, error)) *MockInstanceServerGetWarningCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWarningUUIDs mocks base method.
func (m *MockInstanceServer) GetWarningUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarningUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarningUUIDs indicates an expected call of GetWarningUUIDs.
func (mr *MockInstanceServerMockRecorder) GetWarningUUIDs() *MockInstanceServerGetWarningUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarningUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetWarningUUIDs))
	return &MockInstanceServerGetWarningUUIDsCall{Call: call}
}

// MockInstanceServerGetWarningUUIDsCall wrap *gomock.Call
type MockInstanceServerGetWarningUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetWarningUUIDsCall) Return(arg0 []string, arg1 error) *MockInstanceServerGetWarningUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetWarningUUIDsCall) Do(f func() ([]string, error)) *MockInstanceServerGetWarningUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetWarningUUIDsCall) DoAndReturn(f func() ([]string, error)) *MockInstanceServerGetWarningUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWarnings mocks base method.
func (m *MockInstanceServer) GetWarnings() ([]api.Warning, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarnings")
	ret0, _ := ret[0].([]api.Warning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarnings indicates an expected call of GetWarnings.
func (mr *MockInstanceServerMockRecorder) GetWarnings() *MockInstanceServerGetWarningsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarnings", reflect.TypeOf((*MockInstanceServer)(nil).GetWarnings))
	return &MockInstanceServerGetWarningsCall{Call: call}
}

// MockInstanceServerGetWarningsCall wrap *gomock.Call
type MockInstanceServerGetWarningsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerGetWarningsCall) Return(arg0 []api.Warning, arg1 error) *MockInstanceServerGetWarningsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerGetWarningsCall) Do(f func() ([]api.Warning, error)) *MockInstanceServerGetWarningsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerGetWarningsCall) DoAndReturn(f func() ([]api.Warning, error)) *MockInstanceServerGetWarningsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasExtension mocks base method.
func (m *MockInstanceServer) HasExtension(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExtension", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExtension indicates an expected call of HasExtension.
func (mr *MockInstanceServerMockRecorder) HasExtension(arg0 any) *MockInstanceServerHasExtensionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExtension", reflect.TypeOf((*MockInstanceServer)(nil).HasExtension), arg0)
	return &MockInstanceServerHasExtensionCall{Call: call}
}

// MockInstanceServerHasExtensionCall wrap *gomock.Call
type MockInstanceServerHasExtensionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerHasExtensionCall) Return(arg0 bool) *MockInstanceServerHasExtensionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerHasExtensionCall) Do(f func(string) bool) *MockInstanceServerHasExtensionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerHasExtensionCall) DoAndReturn(f func(string) bool) *MockInstanceServerHasExtensionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsClustered mocks base method.
func (m *MockInstanceServer) IsClustered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClustered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClustered indicates an expected call of IsClustered.
func (mr *MockInstanceServerMockRecorder) IsClustered() *MockInstanceServerIsClusteredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClustered", reflect.TypeOf((*MockInstanceServer)(nil).IsClustered))
	return &MockInstanceServerIsClusteredCall{Call: call}
}

// MockInstanceServerIsClusteredCall wrap *gomock.Call
type MockInstanceServerIsClusteredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerIsClusteredCall) Return(arg0 bool) *MockInstanceServerIsClusteredCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerIsClusteredCall) Do(f func() bool) *MockInstanceServerIsClusteredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerIsClusteredCall) DoAndReturn(f func() bool) *MockInstanceServerIsClusteredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateContainer mocks base method.
func (m *MockInstanceServer) MigrateContainer(arg0 string, arg1 api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainer", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainer indicates an expected call of MigrateContainer.
func (mr *MockInstanceServerMockRecorder) MigrateContainer(arg0, arg1 any) *MockInstanceServerMigrateContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainer", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainer), arg0, arg1)
	return &MockInstanceServerMigrateContainerCall{Call: call}
}

// MockInstanceServerMigrateContainerCall wrap *gomock.Call
type MockInstanceServerMigrateContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerMigrateContainerCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerMigrateContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerMigrateContainerCall) Do(f func(string, api.ContainerPost) (lxd.Operation, error)) *MockInstanceServerMigrateContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerMigrateContainerCall) DoAndReturn(f func(string, api.ContainerPost) (lxd.Operation, error)) *MockInstanceServerMigrateContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateContainerSnapshot mocks base method.
func (m *MockInstanceServer) MigrateContainerSnapshot(arg0, arg1 string, arg2 api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainerSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainerSnapshot indicates an expected call of MigrateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) MigrateContainerSnapshot(arg0, arg1, arg2 any) *MockInstanceServerMigrateContainerSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainerSnapshot), arg0, arg1, arg2)
	return &MockInstanceServerMigrateContainerSnapshotCall{Call: call}
}

// MockInstanceServerMigrateContainerSnapshotCall wrap *gomock.Call
type MockInstanceServerMigrateContainerSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerMigrateContainerSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerMigrateContainerSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerMigrateContainerSnapshotCall) Do(f func(string, string, api.ContainerSnapshotPost) (lxd.Operation, error)) *MockInstanceServerMigrateContainerSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerMigrateContainerSnapshotCall) DoAndReturn(f func(string, string, api.ContainerSnapshotPost) (lxd.Operation, error)) *MockInstanceServerMigrateContainerSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateInstance mocks base method.
func (m *MockInstanceServer) MigrateInstance(arg0 string, arg1 api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstance", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstance indicates an expected call of MigrateInstance.
func (mr *MockInstanceServerMockRecorder) MigrateInstance(arg0, arg1 any) *MockInstanceServerMigrateInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstance", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstance), arg0, arg1)
	return &MockInstanceServerMigrateInstanceCall{Call: call}
}

// MockInstanceServerMigrateInstanceCall wrap *gomock.Call
type MockInstanceServerMigrateInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerMigrateInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerMigrateInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerMigrateInstanceCall) Do(f func(string, api.InstancePost) (lxd.Operation, error)) *MockInstanceServerMigrateInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerMigrateInstanceCall) DoAndReturn(f func(string, api.InstancePost) (lxd.Operation, error)) *MockInstanceServerMigrateInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) MigrateInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstanceSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstanceSnapshot indicates an expected call of MigrateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) MigrateInstanceSnapshot(arg0, arg1, arg2 any) *MockInstanceServerMigrateInstanceSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstanceSnapshot), arg0, arg1, arg2)
	return &MockInstanceServerMigrateInstanceSnapshotCall{Call: call}
}

// MockInstanceServerMigrateInstanceSnapshotCall wrap *gomock.Call
type MockInstanceServerMigrateInstanceSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerMigrateInstanceSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerMigrateInstanceSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerMigrateInstanceSnapshotCall) Do(f func(string, string, api.InstanceSnapshotPost) (lxd.Operation, error)) *MockInstanceServerMigrateInstanceSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerMigrateInstanceSnapshotCall) DoAndReturn(f func(string, string, api.InstanceSnapshotPost) (lxd.Operation, error)) *MockInstanceServerMigrateInstanceSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) MigrateStoragePoolVolume(arg0 string, arg1 api.StorageVolumePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateStoragePoolVolume", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateStoragePoolVolume indicates an expected call of MigrateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) MigrateStoragePoolVolume(arg0, arg1 any) *MockInstanceServerMigrateStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MigrateStoragePoolVolume), arg0, arg1)
	return &MockInstanceServerMigrateStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerMigrateStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerMigrateStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerMigrateStoragePoolVolumeCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerMigrateStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerMigrateStoragePoolVolumeCall) Do(f func(string, api.StorageVolumePost) (lxd.Operation, error)) *MockInstanceServerMigrateStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerMigrateStoragePoolVolumeCall) DoAndReturn(f func(string, api.StorageVolumePost) (lxd.Operation, error)) *MockInstanceServerMigrateStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MoveStoragePoolVolume mocks base method.
func (m *MockInstanceServer) MoveStoragePoolVolume(arg0 string, arg1 lxd.InstanceServer, arg2 string, arg3 api.StorageVolume, arg4 *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveStoragePoolVolume indicates an expected call of MoveStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) MoveStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 any) *MockInstanceServerMoveStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MoveStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
	return &MockInstanceServerMoveStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerMoveStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerMoveStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerMoveStoragePoolVolumeCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerMoveStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerMoveStoragePoolVolumeCall) Do(f func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error)) *MockInstanceServerMoveStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerMoveStoragePoolVolumeCall) DoAndReturn(f func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error)) *MockInstanceServerMoveStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RawOperation mocks base method.
func (m *MockInstanceServer) RawOperation(arg0, arg1 string, arg2 any, arg3 string) (lxd.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawOperation indicates an expected call of RawOperation.
func (mr *MockInstanceServerMockRecorder) RawOperation(arg0, arg1, arg2, arg3 any) *MockInstanceServerRawOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawOperation", reflect.TypeOf((*MockInstanceServer)(nil).RawOperation), arg0, arg1, arg2, arg3)
	return &MockInstanceServerRawOperationCall{Call: call}
}

// MockInstanceServerRawOperationCall wrap *gomock.Call
type MockInstanceServerRawOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRawOperationCall) Return(arg0 lxd.Operation, arg1 string, arg2 error) *MockInstanceServerRawOperationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRawOperationCall) Do(f func(string, string, any, string) (lxd.Operation, string, error)) *MockInstanceServerRawOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRawOperationCall) DoAndReturn(f func(string, string, any, string) (lxd.Operation, string, error)) *MockInstanceServerRawOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RawQuery mocks base method.
func (m *MockInstanceServer) RawQuery(arg0, arg1 string, arg2 any, arg3 string) (*api.Response, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawQuery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawQuery indicates an expected call of RawQuery.
func (mr *MockInstanceServerMockRecorder) RawQuery(arg0, arg1, arg2, arg3 any) *MockInstanceServerRawQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawQuery", reflect.TypeOf((*MockInstanceServer)(nil).RawQuery), arg0, arg1, arg2, arg3)
	return &MockInstanceServerRawQueryCall{Call: call}
}

// MockInstanceServerRawQueryCall wrap *gomock.Call
type MockInstanceServerRawQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRawQueryCall) Return(arg0 *api.Response, arg1 string, arg2 error) *MockInstanceServerRawQueryCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRawQueryCall) Do(f func(string, string, any, string) (*api.Response, string, error)) *MockInstanceServerRawQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRawQueryCall) DoAndReturn(f func(string, string, any, string) (*api.Response, string, error)) *MockInstanceServerRawQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RawWebsocket mocks base method.
func (m *MockInstanceServer) RawWebsocket(arg0 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawWebsocket", arg0)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawWebsocket indicates an expected call of RawWebsocket.
func (mr *MockInstanceServerMockRecorder) RawWebsocket(arg0 any) *MockInstanceServerRawWebsocketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).RawWebsocket), arg0)
	return &MockInstanceServerRawWebsocketCall{Call: call}
}

// MockInstanceServerRawWebsocketCall wrap *gomock.Call
type MockInstanceServerRawWebsocketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRawWebsocketCall) Return(arg0 *websocket.Conn, arg1 error) *MockInstanceServerRawWebsocketCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRawWebsocketCall) Do(f func(string) (*websocket.Conn, error)) *MockInstanceServerRawWebsocketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRawWebsocketCall) DoAndReturn(f func(string) (*websocket.Conn, error)) *MockInstanceServerRawWebsocketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RebuildInstance mocks base method.
func (m *MockInstanceServer) RebuildInstance(arg0 string, arg1 api.InstanceRebuildPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildInstance", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildInstance indicates an expected call of RebuildInstance.
func (mr *MockInstanceServerMockRecorder) RebuildInstance(arg0, arg1 any) *MockInstanceServerRebuildInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildInstance", reflect.TypeOf((*MockInstanceServer)(nil).RebuildInstance), arg0, arg1)
	return &MockInstanceServerRebuildInstanceCall{Call: call}
}

// MockInstanceServerRebuildInstanceCall wrap *gomock.Call
type MockInstanceServerRebuildInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRebuildInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRebuildInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRebuildInstanceCall) Do(f func(string, api.InstanceRebuildPost) (lxd.Operation, error)) *MockInstanceServerRebuildInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRebuildInstanceCall) DoAndReturn(f func(string, api.InstanceRebuildPost) (lxd.Operation, error)) *MockInstanceServerRebuildInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RebuildInstanceFromImage mocks base method.
func (m *MockInstanceServer) RebuildInstanceFromImage(arg0 lxd.ImageServer, arg1 api.Image, arg2 string, arg3 api.InstanceRebuildPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildInstanceFromImage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildInstanceFromImage indicates an expected call of RebuildInstanceFromImage.
func (mr *MockInstanceServerMockRecorder) RebuildInstanceFromImage(arg0, arg1, arg2, arg3 any) *MockInstanceServerRebuildInstanceFromImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildInstanceFromImage", reflect.TypeOf((*MockInstanceServer)(nil).RebuildInstanceFromImage), arg0, arg1, arg2, arg3)
	return &MockInstanceServerRebuildInstanceFromImageCall{Call: call}
}

// MockInstanceServerRebuildInstanceFromImageCall wrap *gomock.Call
type MockInstanceServerRebuildInstanceFromImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRebuildInstanceFromImageCall) Return(arg0 lxd.RemoteOperation, arg1 error) *MockInstanceServerRebuildInstanceFromImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRebuildInstanceFromImageCall) Do(f func(lxd.ImageServer, api.Image, string, api.InstanceRebuildPost) (lxd.RemoteOperation, error)) *MockInstanceServerRebuildInstanceFromImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRebuildInstanceFromImageCall) DoAndReturn(f func(lxd.ImageServer, api.Image, string, api.InstanceRebuildPost) (lxd.RemoteOperation, error)) *MockInstanceServerRebuildInstanceFromImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RefreshImage mocks base method.
func (m *MockInstanceServer) RefreshImage(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshImage", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshImage indicates an expected call of RefreshImage.
func (mr *MockInstanceServerMockRecorder) RefreshImage(arg0 any) *MockInstanceServerRefreshImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshImage", reflect.TypeOf((*MockInstanceServer)(nil).RefreshImage), arg0)
	return &MockInstanceServerRefreshImageCall{Call: call}
}

// MockInstanceServerRefreshImageCall wrap *gomock.Call
type MockInstanceServerRefreshImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRefreshImageCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRefreshImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRefreshImageCall) Do(f func(string) (lxd.Operation, error)) *MockInstanceServerRefreshImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRefreshImageCall) DoAndReturn(f func(string) (lxd.Operation, error)) *MockInstanceServerRefreshImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameAuthGroup mocks base method.
func (m *MockInstanceServer) RenameAuthGroup(arg0 string, arg1 api.AuthGroupPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameAuthGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameAuthGroup indicates an expected call of RenameAuthGroup.
func (mr *MockInstanceServerMockRecorder) RenameAuthGroup(arg0, arg1 any) *MockInstanceServerRenameAuthGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).RenameAuthGroup), arg0, arg1)
	return &MockInstanceServerRenameAuthGroupCall{Call: call}
}

// MockInstanceServerRenameAuthGroupCall wrap *gomock.Call
type MockInstanceServerRenameAuthGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameAuthGroupCall) Return(arg0 error) *MockInstanceServerRenameAuthGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameAuthGroupCall) Do(f func(string, api.AuthGroupPost) error) *MockInstanceServerRenameAuthGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameAuthGroupCall) DoAndReturn(f func(string, api.AuthGroupPost) error) *MockInstanceServerRenameAuthGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameClusterGroup mocks base method.
func (m *MockInstanceServer) RenameClusterGroup(arg0 string, arg1 api.ClusterGroupPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterGroup indicates an expected call of RenameClusterGroup.
func (mr *MockInstanceServerMockRecorder) RenameClusterGroup(arg0, arg1 any) *MockInstanceServerRenameClusterGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterGroup), arg0, arg1)
	return &MockInstanceServerRenameClusterGroupCall{Call: call}
}

// MockInstanceServerRenameClusterGroupCall wrap *gomock.Call
type MockInstanceServerRenameClusterGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameClusterGroupCall) Return(arg0 error) *MockInstanceServerRenameClusterGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameClusterGroupCall) Do(f func(string, api.ClusterGroupPost) error) *MockInstanceServerRenameClusterGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameClusterGroupCall) DoAndReturn(f func(string, api.ClusterGroupPost) error) *MockInstanceServerRenameClusterGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameClusterMember mocks base method.
func (m *MockInstanceServer) RenameClusterMember(arg0 string, arg1 api.ClusterMemberPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterMember indicates an expected call of RenameClusterMember.
func (mr *MockInstanceServerMockRecorder) RenameClusterMember(arg0, arg1 any) *MockInstanceServerRenameClusterMemberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterMember), arg0, arg1)
	return &MockInstanceServerRenameClusterMemberCall{Call: call}
}

// MockInstanceServerRenameClusterMemberCall wrap *gomock.Call
type MockInstanceServerRenameClusterMemberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameClusterMemberCall) Return(arg0 error) *MockInstanceServerRenameClusterMemberCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameClusterMemberCall) Do(f func(string, api.ClusterMemberPost) error) *MockInstanceServerRenameClusterMemberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameClusterMemberCall) DoAndReturn(f func(string, api.ClusterMemberPost) error) *MockInstanceServerRenameClusterMemberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameContainer mocks base method.
func (m *MockInstanceServer) RenameContainer(arg0 string, arg1 api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainer", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainer indicates an expected call of RenameContainer.
func (mr *MockInstanceServerMockRecorder) RenameContainer(arg0, arg1 any) *MockInstanceServerRenameContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainer", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainer), arg0, arg1)
	return &MockInstanceServerRenameContainerCall{Call: call}
}

// MockInstanceServerRenameContainerCall wrap *gomock.Call
type MockInstanceServerRenameContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameContainerCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameContainerCall) Do(f func(string, api.ContainerPost) (lxd.Operation, error)) *MockInstanceServerRenameContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameContainerCall) DoAndReturn(f func(string, api.ContainerPost) (lxd.Operation, error)) *MockInstanceServerRenameContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameContainerBackup mocks base method.
func (m *MockInstanceServer) RenameContainerBackup(arg0, arg1 string, arg2 api.ContainerBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerBackup indicates an expected call of RenameContainerBackup.
func (mr *MockInstanceServerMockRecorder) RenameContainerBackup(arg0, arg1, arg2 any) *MockInstanceServerRenameContainerBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerBackup), arg0, arg1, arg2)
	return &MockInstanceServerRenameContainerBackupCall{Call: call}
}

// MockInstanceServerRenameContainerBackupCall wrap *gomock.Call
type MockInstanceServerRenameContainerBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameContainerBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameContainerBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameContainerBackupCall) Do(f func(string, string, api.ContainerBackupPost) (lxd.Operation, error)) *MockInstanceServerRenameContainerBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameContainerBackupCall) DoAndReturn(f func(string, string, api.ContainerBackupPost) (lxd.Operation, error)) *MockInstanceServerRenameContainerBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameContainerSnapshot mocks base method.
func (m *MockInstanceServer) RenameContainerSnapshot(arg0, arg1 string, arg2 api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerSnapshot indicates an expected call of RenameContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameContainerSnapshot(arg0, arg1, arg2 any) *MockInstanceServerRenameContainerSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerSnapshot), arg0, arg1, arg2)
	return &MockInstanceServerRenameContainerSnapshotCall{Call: call}
}

// MockInstanceServerRenameContainerSnapshotCall wrap *gomock.Call
type MockInstanceServerRenameContainerSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameContainerSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameContainerSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameContainerSnapshotCall) Do(f func(string, string, api.ContainerSnapshotPost) (lxd.Operation, error)) *MockInstanceServerRenameContainerSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameContainerSnapshotCall) DoAndReturn(f func(string, string, api.ContainerSnapshotPost) (lxd.Operation, error)) *MockInstanceServerRenameContainerSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) RenameIdentityProviderGroup(arg0 string, arg1 api.IdentityProviderGroupPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameIdentityProviderGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameIdentityProviderGroup indicates an expected call of RenameIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) RenameIdentityProviderGroup(arg0, arg1 any) *MockInstanceServerRenameIdentityProviderGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).RenameIdentityProviderGroup), arg0, arg1)
	return &MockInstanceServerRenameIdentityProviderGroupCall{Call: call}
}

// MockInstanceServerRenameIdentityProviderGroupCall wrap *gomock.Call
type MockInstanceServerRenameIdentityProviderGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameIdentityProviderGroupCall) Return(arg0 error) *MockInstanceServerRenameIdentityProviderGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameIdentityProviderGroupCall) Do(f func(string, api.IdentityProviderGroupPost) error) *MockInstanceServerRenameIdentityProviderGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameIdentityProviderGroupCall) DoAndReturn(f func(string, api.IdentityProviderGroupPost) error) *MockInstanceServerRenameIdentityProviderGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameImageAlias mocks base method.
func (m *MockInstanceServer) RenameImageAlias(arg0 string, arg1 api.ImageAliasesEntryPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameImageAlias", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameImageAlias indicates an expected call of RenameImageAlias.
func (mr *MockInstanceServerMockRecorder) RenameImageAlias(arg0, arg1 any) *MockInstanceServerRenameImageAliasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).RenameImageAlias), arg0, arg1)
	return &MockInstanceServerRenameImageAliasCall{Call: call}
}

// MockInstanceServerRenameImageAliasCall wrap *gomock.Call
type MockInstanceServerRenameImageAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameImageAliasCall) Return(arg0 error) *MockInstanceServerRenameImageAliasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameImageAliasCall) Do(f func(string, api.ImageAliasesEntryPost) error) *MockInstanceServerRenameImageAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameImageAliasCall) DoAndReturn(f func(string, api.ImageAliasesEntryPost) error) *MockInstanceServerRenameImageAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameInstance mocks base method.
func (m *MockInstanceServer) RenameInstance(arg0 string, arg1 api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstance", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstance indicates an expected call of RenameInstance.
func (mr *MockInstanceServerMockRecorder) RenameInstance(arg0, arg1 any) *MockInstanceServerRenameInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstance", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstance), arg0, arg1)
	return &MockInstanceServerRenameInstanceCall{Call: call}
}

// MockInstanceServerRenameInstanceCall wrap *gomock.Call
type MockInstanceServerRenameInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameInstanceCall) Do(f func(string, api.InstancePost) (lxd.Operation, error)) *MockInstanceServerRenameInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameInstanceCall) DoAndReturn(f func(string, api.InstancePost) (lxd.Operation, error)) *MockInstanceServerRenameInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameInstanceBackup mocks base method.
func (m *MockInstanceServer) RenameInstanceBackup(arg0, arg1 string, arg2 api.InstanceBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceBackup indicates an expected call of RenameInstanceBackup.
func (mr *MockInstanceServerMockRecorder) RenameInstanceBackup(arg0, arg1, arg2 any) *MockInstanceServerRenameInstanceBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceBackup), arg0, arg1, arg2)
	return &MockInstanceServerRenameInstanceBackupCall{Call: call}
}

// MockInstanceServerRenameInstanceBackupCall wrap *gomock.Call
type MockInstanceServerRenameInstanceBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameInstanceBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameInstanceBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameInstanceBackupCall) Do(f func(string, string, api.InstanceBackupPost) (lxd.Operation, error)) *MockInstanceServerRenameInstanceBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameInstanceBackupCall) DoAndReturn(f func(string, string, api.InstanceBackupPost) (lxd.Operation, error)) *MockInstanceServerRenameInstanceBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameInstanceSnapshot mocks base method.
func (m *MockInstanceServer) RenameInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceSnapshot indicates an expected call of RenameInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameInstanceSnapshot(arg0, arg1, arg2 any) *MockInstanceServerRenameInstanceSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceSnapshot), arg0, arg1, arg2)
	return &MockInstanceServerRenameInstanceSnapshotCall{Call: call}
}

// MockInstanceServerRenameInstanceSnapshotCall wrap *gomock.Call
type MockInstanceServerRenameInstanceSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameInstanceSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameInstanceSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameInstanceSnapshotCall) Do(f func(string, string, api.InstanceSnapshotPost) (lxd.Operation, error)) *MockInstanceServerRenameInstanceSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameInstanceSnapshotCall) DoAndReturn(f func(string, string, api.InstanceSnapshotPost) (lxd.Operation, error)) *MockInstanceServerRenameInstanceSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameNetwork mocks base method.
func (m *MockInstanceServer) RenameNetwork(arg0 string, arg1 api.NetworkPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetwork indicates an expected call of RenameNetwork.
func (mr *MockInstanceServerMockRecorder) RenameNetwork(arg0, arg1 any) *MockInstanceServerRenameNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetwork", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetwork), arg0, arg1)
	return &MockInstanceServerRenameNetworkCall{Call: call}
}

// MockInstanceServerRenameNetworkCall wrap *gomock.Call
type MockInstanceServerRenameNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameNetworkCall) Return(arg0 error) *MockInstanceServerRenameNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameNetworkCall) Do(f func(string, api.NetworkPost) error) *MockInstanceServerRenameNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameNetworkCall) DoAndReturn(f func(string, api.NetworkPost) error) *MockInstanceServerRenameNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameNetworkACL mocks base method.
func (m *MockInstanceServer) RenameNetworkACL(arg0 string, arg1 api.NetworkACLPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetworkACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetworkACL indicates an expected call of RenameNetworkACL.
func (mr *MockInstanceServerMockRecorder) RenameNetworkACL(arg0, arg1 any) *MockInstanceServerRenameNetworkACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetworkACL), arg0, arg1)
	return &MockInstanceServerRenameNetworkACLCall{Call: call}
}

// MockInstanceServerRenameNetworkACLCall wrap *gomock.Call
type MockInstanceServerRenameNetworkACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameNetworkACLCall) Return(arg0 error) *MockInstanceServerRenameNetworkACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameNetworkACLCall) Do(f func(string, api.NetworkACLPost) error) *MockInstanceServerRenameNetworkACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameNetworkACLCall) DoAndReturn(f func(string, api.NetworkACLPost) error) *MockInstanceServerRenameNetworkACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameProfile mocks base method.
func (m *MockInstanceServer) RenameProfile(arg0 string, arg1 api.ProfilePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameProfile indicates an expected call of RenameProfile.
func (mr *MockInstanceServerMockRecorder) RenameProfile(arg0, arg1 any) *MockInstanceServerRenameProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProfile", reflect.TypeOf((*MockInstanceServer)(nil).RenameProfile), arg0, arg1)
	return &MockInstanceServerRenameProfileCall{Call: call}
}

// MockInstanceServerRenameProfileCall wrap *gomock.Call
type MockInstanceServerRenameProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameProfileCall) Return(arg0 error) *MockInstanceServerRenameProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameProfileCall) Do(f func(string, api.ProfilePost) error) *MockInstanceServerRenameProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameProfileCall) DoAndReturn(f func(string, api.ProfilePost) error) *MockInstanceServerRenameProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameProject mocks base method.
func (m *MockInstanceServer) RenameProject(arg0 string, arg1 api.ProjectPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProject", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameProject indicates an expected call of RenameProject.
func (mr *MockInstanceServerMockRecorder) RenameProject(arg0, arg1 any) *MockInstanceServerRenameProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProject", reflect.TypeOf((*MockInstanceServer)(nil).RenameProject), arg0, arg1)
	return &MockInstanceServerRenameProjectCall{Call: call}
}

// MockInstanceServerRenameProjectCall wrap *gomock.Call
type MockInstanceServerRenameProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameProjectCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameProjectCall) Do(f func(string, api.ProjectPost) (lxd.Operation, error)) *MockInstanceServerRenameProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameProjectCall) DoAndReturn(f func(string, api.ProjectPost) (lxd.Operation, error)) *MockInstanceServerRenameProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameStoragePoolVolume mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolume(arg0, arg1, arg2 string, arg3 api.StorageVolumePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameStoragePoolVolume indicates an expected call of RenameStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolume(arg0, arg1, arg2, arg3 any) *MockInstanceServerRenameStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolume), arg0, arg1, arg2, arg3)
	return &MockInstanceServerRenameStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerRenameStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerRenameStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameStoragePoolVolumeCall) Return(arg0 error) *MockInstanceServerRenameStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameStoragePoolVolumeCall) Do(f func(string, string, string, api.StorageVolumePost) error) *MockInstanceServerRenameStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameStoragePoolVolumeCall) DoAndReturn(f func(string, string, string, api.StorageVolumePost) error) *MockInstanceServerRenameStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolumeBackup(arg0, arg1, arg2 string, arg3 api.StoragePoolVolumeBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeBackup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeBackup indicates an expected call of RenameStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeBackup(arg0, arg1, arg2, arg3 any) *MockInstanceServerRenameStoragePoolVolumeBackupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeBackup), arg0, arg1, arg2, arg3)
	return &MockInstanceServerRenameStoragePoolVolumeBackupCall{Call: call}
}

// MockInstanceServerRenameStoragePoolVolumeBackupCall wrap *gomock.Call
type MockInstanceServerRenameStoragePoolVolumeBackupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameStoragePoolVolumeBackupCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameStoragePoolVolumeBackupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameStoragePoolVolumeBackupCall) Do(f func(string, string, string, api.StoragePoolVolumeBackupPost) (lxd.Operation, error)) *MockInstanceServerRenameStoragePoolVolumeBackupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameStoragePoolVolumeBackupCall) DoAndReturn(f func(string, string, string, api.StoragePoolVolumeBackupPost) (lxd.Operation, error)) *MockInstanceServerRenameStoragePoolVolumeBackupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RenameStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string, arg4 api.StorageVolumeSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeSnapshot indicates an expected call of RenameStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3, arg4 any) *MockInstanceServerRenameStoragePoolVolumeSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3, arg4)
	return &MockInstanceServerRenameStoragePoolVolumeSnapshotCall{Call: call}
}

// MockInstanceServerRenameStoragePoolVolumeSnapshotCall wrap *gomock.Call
type MockInstanceServerRenameStoragePoolVolumeSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRenameStoragePoolVolumeSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerRenameStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRenameStoragePoolVolumeSnapshotCall) Do(f func(string, string, string, string, api.StorageVolumeSnapshotPost) (lxd.Operation, error)) *MockInstanceServerRenameStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRenameStoragePoolVolumeSnapshotCall) DoAndReturn(f func(string, string, string, string, api.StorageVolumeSnapshotPost) (lxd.Operation, error)) *MockInstanceServerRenameStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequireAuthenticated mocks base method.
func (m *MockInstanceServer) RequireAuthenticated(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequireAuthenticated", arg0)
}

// RequireAuthenticated indicates an expected call of RequireAuthenticated.
func (mr *MockInstanceServerMockRecorder) RequireAuthenticated(arg0 any) *MockInstanceServerRequireAuthenticatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthenticated", reflect.TypeOf((*MockInstanceServer)(nil).RequireAuthenticated), arg0)
	return &MockInstanceServerRequireAuthenticatedCall{Call: call}
}

// MockInstanceServerRequireAuthenticatedCall wrap *gomock.Call
type MockInstanceServerRequireAuthenticatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerRequireAuthenticatedCall) Return() *MockInstanceServerRequireAuthenticatedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerRequireAuthenticatedCall) Do(f func(bool)) *MockInstanceServerRequireAuthenticatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerRequireAuthenticatedCall) DoAndReturn(f func(bool)) *MockInstanceServerRequireAuthenticatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendEvent mocks base method.
func (m *MockInstanceServer) SendEvent(arg0 api.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockInstanceServerMockRecorder) SendEvent(arg0 any) *MockInstanceServerSendEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockInstanceServer)(nil).SendEvent), arg0)
	return &MockInstanceServerSendEventCall{Call: call}
}

// MockInstanceServerSendEventCall wrap *gomock.Call
type MockInstanceServerSendEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerSendEventCall) Return(arg0 error) *MockInstanceServerSendEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerSendEventCall) Do(f func(api.Event) error) *MockInstanceServerSendEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerSendEventCall) DoAndReturn(f func(api.Event) error) *MockInstanceServerSendEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetContainerMetadata mocks base method.
func (m *MockInstanceServer) SetContainerMetadata(arg0 string, arg1 api.ImageMetadata, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainerMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainerMetadata indicates an expected call of SetContainerMetadata.
func (mr *MockInstanceServerMockRecorder) SetContainerMetadata(arg0, arg1, arg2 any) *MockInstanceServerSetContainerMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).SetContainerMetadata), arg0, arg1, arg2)
	return &MockInstanceServerSetContainerMetadataCall{Call: call}
}

// MockInstanceServerSetContainerMetadataCall wrap *gomock.Call
type MockInstanceServerSetContainerMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerSetContainerMetadataCall) Return(arg0 error) *MockInstanceServerSetContainerMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerSetContainerMetadataCall) Do(f func(string, api.ImageMetadata, string) error) *MockInstanceServerSetContainerMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerSetContainerMetadataCall) DoAndReturn(f func(string, api.ImageMetadata, string) error) *MockInstanceServerSetContainerMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAuthGroup mocks base method.
func (m *MockInstanceServer) UpdateAuthGroup(arg0 string, arg1 api.AuthGroupPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthGroup indicates an expected call of UpdateAuthGroup.
func (mr *MockInstanceServerMockRecorder) UpdateAuthGroup(arg0, arg1, arg2 any) *MockInstanceServerUpdateAuthGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).UpdateAuthGroup), arg0, arg1, arg2)
	return &MockInstanceServerUpdateAuthGroupCall{Call: call}
}

// MockInstanceServerUpdateAuthGroupCall wrap *gomock.Call
type MockInstanceServerUpdateAuthGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateAuthGroupCall) Return(arg0 error) *MockInstanceServerUpdateAuthGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateAuthGroupCall) Do(f func(string, api.AuthGroupPut, string) error) *MockInstanceServerUpdateAuthGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateAuthGroupCall) DoAndReturn(f func(string, api.AuthGroupPut, string) error) *MockInstanceServerUpdateAuthGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCertificate mocks base method.
func (m *MockInstanceServer) UpdateCertificate(arg0 string, arg1 api.CertificatePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificate indicates an expected call of UpdateCertificate.
func (mr *MockInstanceServerMockRecorder) UpdateCertificate(arg0, arg1, arg2 any) *MockInstanceServerUpdateCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCertificate), arg0, arg1, arg2)
	return &MockInstanceServerUpdateCertificateCall{Call: call}
}

// MockInstanceServerUpdateCertificateCall wrap *gomock.Call
type MockInstanceServerUpdateCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateCertificateCall) Return(arg0 error) *MockInstanceServerUpdateCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateCertificateCall) Do(f func(string, api.CertificatePut, string) error) *MockInstanceServerUpdateCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateCertificateCall) DoAndReturn(f func(string, api.CertificatePut, string) error) *MockInstanceServerUpdateCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCluster mocks base method.
func (m *MockInstanceServer) UpdateCluster(arg0 api.ClusterPut, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockInstanceServerMockRecorder) UpdateCluster(arg0, arg1 any) *MockInstanceServerUpdateClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCluster), arg0, arg1)
	return &MockInstanceServerUpdateClusterCall{Call: call}
}

// MockInstanceServerUpdateClusterCall wrap *gomock.Call
type MockInstanceServerUpdateClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateClusterCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateClusterCall) Do(f func(api.ClusterPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateClusterCall) DoAndReturn(f func(api.ClusterPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateClusterCertificate mocks base method.
func (m *MockInstanceServer) UpdateClusterCertificate(arg0 api.ClusterCertificatePut, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterCertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterCertificate indicates an expected call of UpdateClusterCertificate.
func (mr *MockInstanceServerMockRecorder) UpdateClusterCertificate(arg0, arg1 any) *MockInstanceServerUpdateClusterCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterCertificate), arg0, arg1)
	return &MockInstanceServerUpdateClusterCertificateCall{Call: call}
}

// MockInstanceServerUpdateClusterCertificateCall wrap *gomock.Call
type MockInstanceServerUpdateClusterCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateClusterCertificateCall) Return(arg0 error) *MockInstanceServerUpdateClusterCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateClusterCertificateCall) Do(f func(api.ClusterCertificatePut, string) error) *MockInstanceServerUpdateClusterCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateClusterCertificateCall) DoAndReturn(f func(api.ClusterCertificatePut, string) error) *MockInstanceServerUpdateClusterCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateClusterGroup mocks base method.
func (m *MockInstanceServer) UpdateClusterGroup(arg0 string, arg1 api.ClusterGroupPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterGroup indicates an expected call of UpdateClusterGroup.
func (mr *MockInstanceServerMockRecorder) UpdateClusterGroup(arg0, arg1, arg2 any) *MockInstanceServerUpdateClusterGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterGroup), arg0, arg1, arg2)
	return &MockInstanceServerUpdateClusterGroupCall{Call: call}
}

// MockInstanceServerUpdateClusterGroupCall wrap *gomock.Call
type MockInstanceServerUpdateClusterGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateClusterGroupCall) Return(arg0 error) *MockInstanceServerUpdateClusterGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateClusterGroupCall) Do(f func(string, api.ClusterGroupPut, string) error) *MockInstanceServerUpdateClusterGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateClusterGroupCall) DoAndReturn(f func(string, api.ClusterGroupPut, string) error) *MockInstanceServerUpdateClusterGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateClusterMember mocks base method.
func (m *MockInstanceServer) UpdateClusterMember(arg0 string, arg1 api.ClusterMemberPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterMember indicates an expected call of UpdateClusterMember.
func (mr *MockInstanceServerMockRecorder) UpdateClusterMember(arg0, arg1, arg2 any) *MockInstanceServerUpdateClusterMemberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterMember), arg0, arg1, arg2)
	return &MockInstanceServerUpdateClusterMemberCall{Call: call}
}

// MockInstanceServerUpdateClusterMemberCall wrap *gomock.Call
type MockInstanceServerUpdateClusterMemberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateClusterMemberCall) Return(arg0 error) *MockInstanceServerUpdateClusterMemberCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateClusterMemberCall) Do(f func(string, api.ClusterMemberPut, string) error) *MockInstanceServerUpdateClusterMemberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateClusterMemberCall) DoAndReturn(f func(string, api.ClusterMemberPut, string) error) *MockInstanceServerUpdateClusterMemberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateClusterMemberState mocks base method.
func (m *MockInstanceServer) UpdateClusterMemberState(arg0 string, arg1 api.ClusterMemberStatePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterMemberState", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterMemberState indicates an expected call of UpdateClusterMemberState.
func (mr *MockInstanceServerMockRecorder) UpdateClusterMemberState(arg0, arg1 any) *MockInstanceServerUpdateClusterMemberStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterMemberState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterMemberState), arg0, arg1)
	return &MockInstanceServerUpdateClusterMemberStateCall{Call: call}
}

// MockInstanceServerUpdateClusterMemberStateCall wrap *gomock.Call
type MockInstanceServerUpdateClusterMemberStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateClusterMemberStateCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateClusterMemberStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateClusterMemberStateCall) Do(f func(string, api.ClusterMemberStatePost) (lxd.Operation, error)) *MockInstanceServerUpdateClusterMemberStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateClusterMemberStateCall) DoAndReturn(f func(string, api.ClusterMemberStatePost) (lxd.Operation, error)) *MockInstanceServerUpdateClusterMemberStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContainer mocks base method.
func (m *MockInstanceServer) UpdateContainer(arg0 string, arg1 api.ContainerPut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainer indicates an expected call of UpdateContainer.
func (mr *MockInstanceServerMockRecorder) UpdateContainer(arg0, arg1, arg2 any) *MockInstanceServerUpdateContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainer), arg0, arg1, arg2)
	return &MockInstanceServerUpdateContainerCall{Call: call}
}

// MockInstanceServerUpdateContainerCall wrap *gomock.Call
type MockInstanceServerUpdateContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateContainerCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateContainerCall) Do(f func(string, api.ContainerPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateContainerCall) DoAndReturn(f func(string, api.ContainerPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContainerSnapshot mocks base method.
func (m *MockInstanceServer) UpdateContainerSnapshot(arg0, arg1 string, arg2 api.ContainerSnapshotPut, arg3 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerSnapshot indicates an expected call of UpdateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateContainerSnapshot(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateContainerSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerSnapshot), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateContainerSnapshotCall{Call: call}
}

// MockInstanceServerUpdateContainerSnapshotCall wrap *gomock.Call
type MockInstanceServerUpdateContainerSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateContainerSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateContainerSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateContainerSnapshotCall) Do(f func(string, string, api.ContainerSnapshotPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateContainerSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateContainerSnapshotCall) DoAndReturn(f func(string, string, api.ContainerSnapshotPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateContainerSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContainerState mocks base method.
func (m *MockInstanceServer) UpdateContainerState(arg0 string, arg1 api.ContainerStatePut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerState", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerState indicates an expected call of UpdateContainerState.
func (mr *MockInstanceServerMockRecorder) UpdateContainerState(arg0, arg1, arg2 any) *MockInstanceServerUpdateContainerStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerState), arg0, arg1, arg2)
	return &MockInstanceServerUpdateContainerStateCall{Call: call}
}

// MockInstanceServerUpdateContainerStateCall wrap *gomock.Call
type MockInstanceServerUpdateContainerStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateContainerStateCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateContainerStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateContainerStateCall) Do(f func(string, api.ContainerStatePut, string) (lxd.Operation, error)) *MockInstanceServerUpdateContainerStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateContainerStateCall) DoAndReturn(f func(string, api.ContainerStatePut, string) (lxd.Operation, error)) *MockInstanceServerUpdateContainerStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateContainerTemplateFile mocks base method.
func (m *MockInstanceServer) UpdateContainerTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerTemplateFile indicates an expected call of UpdateContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) UpdateContainerTemplateFile(arg0, arg1, arg2 any) *MockInstanceServerUpdateContainerTemplateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerTemplateFile), arg0, arg1, arg2)
	return &MockInstanceServerUpdateContainerTemplateFileCall{Call: call}
}

// MockInstanceServerUpdateContainerTemplateFileCall wrap *gomock.Call
type MockInstanceServerUpdateContainerTemplateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateContainerTemplateFileCall) Return(arg0 error) *MockInstanceServerUpdateContainerTemplateFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateContainerTemplateFileCall) Do(f func(string, string, io.ReadSeeker) error) *MockInstanceServerUpdateContainerTemplateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateContainerTemplateFileCall) DoAndReturn(f func(string, string, io.ReadSeeker) error) *MockInstanceServerUpdateContainerTemplateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateIdentity mocks base method.
func (m *MockInstanceServer) UpdateIdentity(arg0, arg1 string, arg2 api.IdentityPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentity", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockInstanceServerMockRecorder) UpdateIdentity(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateIdentityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockInstanceServer)(nil).UpdateIdentity), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateIdentityCall{Call: call}
}

// MockInstanceServerUpdateIdentityCall wrap *gomock.Call
type MockInstanceServerUpdateIdentityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateIdentityCall) Return(arg0 error) *MockInstanceServerUpdateIdentityCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateIdentityCall) Do(f func(string, string, api.IdentityPut, string) error) *MockInstanceServerUpdateIdentityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateIdentityCall) DoAndReturn(f func(string, string, api.IdentityPut, string) error) *MockInstanceServerUpdateIdentityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) UpdateIdentityProviderGroup(arg0 string, arg1 api.IdentityProviderGroupPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProviderGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProviderGroup indicates an expected call of UpdateIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) UpdateIdentityProviderGroup(arg0, arg1, arg2 any) *MockInstanceServerUpdateIdentityProviderGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).UpdateIdentityProviderGroup), arg0, arg1, arg2)
	return &MockInstanceServerUpdateIdentityProviderGroupCall{Call: call}
}

// MockInstanceServerUpdateIdentityProviderGroupCall wrap *gomock.Call
type MockInstanceServerUpdateIdentityProviderGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateIdentityProviderGroupCall) Return(arg0 error) *MockInstanceServerUpdateIdentityProviderGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateIdentityProviderGroupCall) Do(f func(string, api.IdentityProviderGroupPut, string) error) *MockInstanceServerUpdateIdentityProviderGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateIdentityProviderGroupCall) DoAndReturn(f func(string, api.IdentityProviderGroupPut, string) error) *MockInstanceServerUpdateIdentityProviderGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateImage mocks base method.
func (m *MockInstanceServer) UpdateImage(arg0 string, arg1 api.ImagePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockInstanceServerMockRecorder) UpdateImage(arg0, arg1, arg2 any) *MockInstanceServerUpdateImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImage), arg0, arg1, arg2)
	return &MockInstanceServerUpdateImageCall{Call: call}
}

// MockInstanceServerUpdateImageCall wrap *gomock.Call
type MockInstanceServerUpdateImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateImageCall) Return(arg0 error) *MockInstanceServerUpdateImageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateImageCall) Do(f func(string, api.ImagePut, string) error) *MockInstanceServerUpdateImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateImageCall) DoAndReturn(f func(string, api.ImagePut, string) error) *MockInstanceServerUpdateImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateImageAlias mocks base method.
func (m *MockInstanceServer) UpdateImageAlias(arg0 string, arg1 api.ImageAliasesEntryPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageAlias indicates an expected call of UpdateImageAlias.
func (mr *MockInstanceServerMockRecorder) UpdateImageAlias(arg0, arg1, arg2 any) *MockInstanceServerUpdateImageAliasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImageAlias), arg0, arg1, arg2)
	return &MockInstanceServerUpdateImageAliasCall{Call: call}
}

// MockInstanceServerUpdateImageAliasCall wrap *gomock.Call
type MockInstanceServerUpdateImageAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateImageAliasCall) Return(arg0 error) *MockInstanceServerUpdateImageAliasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateImageAliasCall) Do(f func(string, api.ImageAliasesEntryPut, string) error) *MockInstanceServerUpdateImageAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateImageAliasCall) DoAndReturn(f func(string, api.ImageAliasesEntryPut, string) error) *MockInstanceServerUpdateImageAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstance mocks base method.
func (m *MockInstanceServer) UpdateInstance(arg0 string, arg1 api.InstancePut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockInstanceServerMockRecorder) UpdateInstance(arg0, arg1, arg2 any) *MockInstanceServerUpdateInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstance), arg0, arg1, arg2)
	return &MockInstanceServerUpdateInstanceCall{Call: call}
}

// MockInstanceServerUpdateInstanceCall wrap *gomock.Call
type MockInstanceServerUpdateInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateInstanceCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateInstanceCall) Do(f func(string, api.InstancePut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateInstanceCall) DoAndReturn(f func(string, api.InstancePut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstanceMetadata mocks base method.
func (m *MockInstanceServer) UpdateInstanceMetadata(arg0 string, arg1 api.ImageMetadata, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceMetadata indicates an expected call of UpdateInstanceMetadata.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceMetadata(arg0, arg1, arg2 any) *MockInstanceServerUpdateInstanceMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceMetadata), arg0, arg1, arg2)
	return &MockInstanceServerUpdateInstanceMetadataCall{Call: call}
}

// MockInstanceServerUpdateInstanceMetadataCall wrap *gomock.Call
type MockInstanceServerUpdateInstanceMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateInstanceMetadataCall) Return(arg0 error) *MockInstanceServerUpdateInstanceMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateInstanceMetadataCall) Do(f func(string, api.ImageMetadata, string) error) *MockInstanceServerUpdateInstanceMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateInstanceMetadataCall) DoAndReturn(f func(string, api.ImageMetadata, string) error) *MockInstanceServerUpdateInstanceMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) UpdateInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPut, arg3 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceSnapshot indicates an expected call of UpdateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceSnapshot(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateInstanceSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceSnapshot), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateInstanceSnapshotCall{Call: call}
}

// MockInstanceServerUpdateInstanceSnapshotCall wrap *gomock.Call
type MockInstanceServerUpdateInstanceSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateInstanceSnapshotCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateInstanceSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateInstanceSnapshotCall) Do(f func(string, string, api.InstanceSnapshotPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstanceSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateInstanceSnapshotCall) DoAndReturn(f func(string, string, api.InstanceSnapshotPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstanceSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstanceState mocks base method.
func (m *MockInstanceServer) UpdateInstanceState(arg0 string, arg1 api.InstanceStatePut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceState", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceState indicates an expected call of UpdateInstanceState.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceState(arg0, arg1, arg2 any) *MockInstanceServerUpdateInstanceStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceState), arg0, arg1, arg2)
	return &MockInstanceServerUpdateInstanceStateCall{Call: call}
}

// MockInstanceServerUpdateInstanceStateCall wrap *gomock.Call
type MockInstanceServerUpdateInstanceStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateInstanceStateCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateInstanceStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateInstanceStateCall) Do(f func(string, api.InstanceStatePut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstanceStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateInstanceStateCall) DoAndReturn(f func(string, api.InstanceStatePut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstanceStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstanceUEFIVars mocks base method.
func (m *MockInstanceServer) UpdateInstanceUEFIVars(arg0 string, arg1 api.InstanceUEFIVars, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceUEFIVars", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceUEFIVars indicates an expected call of UpdateInstanceUEFIVars.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceUEFIVars(arg0, arg1, arg2 any) *MockInstanceServerUpdateInstanceUEFIVarsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceUEFIVars", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceUEFIVars), arg0, arg1, arg2)
	return &MockInstanceServerUpdateInstanceUEFIVarsCall{Call: call}
}

// MockInstanceServerUpdateInstanceUEFIVarsCall wrap *gomock.Call
type MockInstanceServerUpdateInstanceUEFIVarsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateInstanceUEFIVarsCall) Return(arg0 error) *MockInstanceServerUpdateInstanceUEFIVarsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateInstanceUEFIVarsCall) Do(f func(string, api.InstanceUEFIVars, string) error) *MockInstanceServerUpdateInstanceUEFIVarsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateInstanceUEFIVarsCall) DoAndReturn(f func(string, api.InstanceUEFIVars, string) error) *MockInstanceServerUpdateInstanceUEFIVarsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstances mocks base method.
func (m *MockInstanceServer) UpdateInstances(arg0 api.InstancesPut, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstances", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstances indicates an expected call of UpdateInstances.
func (mr *MockInstanceServerMockRecorder) UpdateInstances(arg0, arg1 any) *MockInstanceServerUpdateInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstances", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstances), arg0, arg1)
	return &MockInstanceServerUpdateInstancesCall{Call: call}
}

// MockInstanceServerUpdateInstancesCall wrap *gomock.Call
type MockInstanceServerUpdateInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateInstancesCall) Return(arg0 lxd.Operation, arg1 error) *MockInstanceServerUpdateInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateInstancesCall) Do(f func(api.InstancesPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateInstancesCall) DoAndReturn(f func(api.InstancesPut, string) (lxd.Operation, error)) *MockInstanceServerUpdateInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNetwork mocks base method.
func (m *MockInstanceServer) UpdateNetwork(arg0 string, arg1 api.NetworkPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockInstanceServerMockRecorder) UpdateNetwork(arg0, arg1, arg2 any) *MockInstanceServerUpdateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetwork), arg0, arg1, arg2)
	return &MockInstanceServerUpdateNetworkCall{Call: call}
}

// MockInstanceServerUpdateNetworkCall wrap *gomock.Call
type MockInstanceServerUpdateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateNetworkCall) Return(arg0 error) *MockInstanceServerUpdateNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateNetworkCall) Do(f func(string, api.NetworkPut, string) error) *MockInstanceServerUpdateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateNetworkCall) DoAndReturn(f func(string, api.NetworkPut, string) error) *MockInstanceServerUpdateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNetworkACL mocks base method.
func (m *MockInstanceServer) UpdateNetworkACL(arg0 string, arg1 api.NetworkACLPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkACL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkACL indicates an expected call of UpdateNetworkACL.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkACL(arg0, arg1, arg2 any) *MockInstanceServerUpdateNetworkACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkACL), arg0, arg1, arg2)
	return &MockInstanceServerUpdateNetworkACLCall{Call: call}
}

// MockInstanceServerUpdateNetworkACLCall wrap *gomock.Call
type MockInstanceServerUpdateNetworkACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateNetworkACLCall) Return(arg0 error) *MockInstanceServerUpdateNetworkACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateNetworkACLCall) Do(f func(string, api.NetworkACLPut, string) error) *MockInstanceServerUpdateNetworkACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateNetworkACLCall) DoAndReturn(f func(string, api.NetworkACLPut, string) error) *MockInstanceServerUpdateNetworkACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNetworkForward mocks base method.
func (m *MockInstanceServer) UpdateNetworkForward(arg0, arg1 string, arg2 api.NetworkForwardPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkForward", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkForward indicates an expected call of UpdateNetworkForward.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkForward(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateNetworkForwardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkForward), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateNetworkForwardCall{Call: call}
}

// MockInstanceServerUpdateNetworkForwardCall wrap *gomock.Call
type MockInstanceServerUpdateNetworkForwardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateNetworkForwardCall) Return(arg0 error) *MockInstanceServerUpdateNetworkForwardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateNetworkForwardCall) Do(f func(string, string, api.NetworkForwardPut, string) error) *MockInstanceServerUpdateNetworkForwardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateNetworkForwardCall) DoAndReturn(f func(string, string, api.NetworkForwardPut, string) error) *MockInstanceServerUpdateNetworkForwardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) UpdateNetworkLoadBalancer(arg0, arg1 string, arg2 api.NetworkLoadBalancerPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkLoadBalancer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkLoadBalancer indicates an expected call of UpdateNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkLoadBalancer(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateNetworkLoadBalancerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkLoadBalancer), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateNetworkLoadBalancerCall{Call: call}
}

// MockInstanceServerUpdateNetworkLoadBalancerCall wrap *gomock.Call
type MockInstanceServerUpdateNetworkLoadBalancerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateNetworkLoadBalancerCall) Return(arg0 error) *MockInstanceServerUpdateNetworkLoadBalancerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateNetworkLoadBalancerCall) Do(f func(string, string, api.NetworkLoadBalancerPut, string) error) *MockInstanceServerUpdateNetworkLoadBalancerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateNetworkLoadBalancerCall) DoAndReturn(f func(string, string, api.NetworkLoadBalancerPut, string) error) *MockInstanceServerUpdateNetworkLoadBalancerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNetworkPeer mocks base method.
func (m *MockInstanceServer) UpdateNetworkPeer(arg0, arg1 string, arg2 api.NetworkPeerPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkPeer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPeer indicates an expected call of UpdateNetworkPeer.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkPeer(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateNetworkPeerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkPeer), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateNetworkPeerCall{Call: call}
}

// MockInstanceServerUpdateNetworkPeerCall wrap *gomock.Call
type MockInstanceServerUpdateNetworkPeerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateNetworkPeerCall) Return(arg0 error) *MockInstanceServerUpdateNetworkPeerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateNetworkPeerCall) Do(f func(string, string, api.NetworkPeerPut, string) error) *MockInstanceServerUpdateNetworkPeerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateNetworkPeerCall) DoAndReturn(f func(string, string, api.NetworkPeerPut, string) error) *MockInstanceServerUpdateNetworkPeerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNetworkZone mocks base method.
func (m *MockInstanceServer) UpdateNetworkZone(arg0 string, arg1 api.NetworkZonePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkZone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkZone indicates an expected call of UpdateNetworkZone.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkZone(arg0, arg1, arg2 any) *MockInstanceServerUpdateNetworkZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkZone), arg0, arg1, arg2)
	return &MockInstanceServerUpdateNetworkZoneCall{Call: call}
}

// MockInstanceServerUpdateNetworkZoneCall wrap *gomock.Call
type MockInstanceServerUpdateNetworkZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateNetworkZoneCall) Return(arg0 error) *MockInstanceServerUpdateNetworkZoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateNetworkZoneCall) Do(f func(string, api.NetworkZonePut, string) error) *MockInstanceServerUpdateNetworkZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateNetworkZoneCall) DoAndReturn(f func(string, api.NetworkZonePut, string) error) *MockInstanceServerUpdateNetworkZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) UpdateNetworkZoneRecord(arg0, arg1 string, arg2 api.NetworkZoneRecordPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkZoneRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkZoneRecord indicates an expected call of UpdateNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkZoneRecord(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateNetworkZoneRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkZoneRecord), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateNetworkZoneRecordCall{Call: call}
}

// MockInstanceServerUpdateNetworkZoneRecordCall wrap *gomock.Call
type MockInstanceServerUpdateNetworkZoneRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateNetworkZoneRecordCall) Return(arg0 error) *MockInstanceServerUpdateNetworkZoneRecordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateNetworkZoneRecordCall) Do(f func(string, string, api.NetworkZoneRecordPut, string) error) *MockInstanceServerUpdateNetworkZoneRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateNetworkZoneRecordCall) DoAndReturn(f func(string, string, api.NetworkZoneRecordPut, string) error) *MockInstanceServerUpdateNetworkZoneRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProfile mocks base method.
func (m *MockInstanceServer) UpdateProfile(arg0 string, arg1 api.ProfilePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockInstanceServerMockRecorder) UpdateProfile(arg0, arg1, arg2 any) *MockInstanceServerUpdateProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProfile), arg0, arg1, arg2)
	return &MockInstanceServerUpdateProfileCall{Call: call}
}

// MockInstanceServerUpdateProfileCall wrap *gomock.Call
type MockInstanceServerUpdateProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateProfileCall) Return(arg0 error) *MockInstanceServerUpdateProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateProfileCall) Do(f func(string, api.ProfilePut, string) error) *MockInstanceServerUpdateProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateProfileCall) DoAndReturn(f func(string, api.ProfilePut, string) error) *MockInstanceServerUpdateProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProject mocks base method.
func (m *MockInstanceServer) UpdateProject(arg0 string, arg1 api.ProjectPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockInstanceServerMockRecorder) UpdateProject(arg0, arg1, arg2 any) *MockInstanceServerUpdateProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProject), arg0, arg1, arg2)
	return &MockInstanceServerUpdateProjectCall{Call: call}
}

// MockInstanceServerUpdateProjectCall wrap *gomock.Call
type MockInstanceServerUpdateProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateProjectCall) Return(arg0 error) *MockInstanceServerUpdateProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateProjectCall) Do(f func(string, api.ProjectPut, string) error) *MockInstanceServerUpdateProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateProjectCall) DoAndReturn(f func(string, api.ProjectPut, string) error) *MockInstanceServerUpdateProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateServer mocks base method.
func (m *MockInstanceServer) UpdateServer(arg0 api.ServerPut, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockInstanceServerMockRecorder) UpdateServer(arg0, arg1 any) *MockInstanceServerUpdateServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateServer), arg0, arg1)
	return &MockInstanceServerUpdateServerCall{Call: call}
}

// MockInstanceServerUpdateServerCall wrap *gomock.Call
type MockInstanceServerUpdateServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateServerCall) Return(arg0 error) *MockInstanceServerUpdateServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateServerCall) Do(f func(api.ServerPut, string) error) *MockInstanceServerUpdateServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateServerCall) DoAndReturn(f func(api.ServerPut, string) error) *MockInstanceServerUpdateServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStoragePool mocks base method.
func (m *MockInstanceServer) UpdateStoragePool(arg0 string, arg1 api.StoragePoolPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePool", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePool indicates an expected call of UpdateStoragePool.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePool(arg0, arg1, arg2 any) *MockInstanceServerUpdateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePool), arg0, arg1, arg2)
	return &MockInstanceServerUpdateStoragePoolCall{Call: call}
}

// MockInstanceServerUpdateStoragePoolCall wrap *gomock.Call
type MockInstanceServerUpdateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateStoragePoolCall) Return(arg0 error) *MockInstanceServerUpdateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateStoragePoolCall) Do(f func(string, api.StoragePoolPut, string) error) *MockInstanceServerUpdateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateStoragePoolCall) DoAndReturn(f func(string, api.StoragePoolPut, string) error) *MockInstanceServerUpdateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStoragePoolBucket mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolBucket(arg0, arg1 string, arg2 api.StorageBucketPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolBucket", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolBucket indicates an expected call of UpdateStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolBucket(arg0, arg1, arg2, arg3 any) *MockInstanceServerUpdateStoragePoolBucketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolBucket), arg0, arg1, arg2, arg3)
	return &MockInstanceServerUpdateStoragePoolBucketCall{Call: call}
}

// MockInstanceServerUpdateStoragePoolBucketCall wrap *gomock.Call
type MockInstanceServerUpdateStoragePoolBucketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateStoragePoolBucketCall) Return(arg0 error) *MockInstanceServerUpdateStoragePoolBucketCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateStoragePoolBucketCall) Do(f func(string, string, api.StorageBucketPut, string) error) *MockInstanceServerUpdateStoragePoolBucketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateStoragePoolBucketCall) DoAndReturn(f func(string, string, api.StorageBucketPut, string) error) *MockInstanceServerUpdateStoragePoolBucketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolBucketKey(arg0, arg1, arg2 string, arg3 api.StorageBucketKeyPut, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolBucketKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolBucketKey indicates an expected call of UpdateStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolBucketKey(arg0, arg1, arg2, arg3, arg4 any) *MockInstanceServerUpdateStoragePoolBucketKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolBucketKey), arg0, arg1, arg2, arg3, arg4)
	return &MockInstanceServerUpdateStoragePoolBucketKeyCall{Call: call}
}

// MockInstanceServerUpdateStoragePoolBucketKeyCall wrap *gomock.Call
type MockInstanceServerUpdateStoragePoolBucketKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateStoragePoolBucketKeyCall) Return(arg0 error) *MockInstanceServerUpdateStoragePoolBucketKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateStoragePoolBucketKeyCall) Do(f func(string, string, string, api.StorageBucketKeyPut, string) error) *MockInstanceServerUpdateStoragePoolBucketKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateStoragePoolBucketKeyCall) DoAndReturn(f func(string, string, string, api.StorageBucketKeyPut, string) error) *MockInstanceServerUpdateStoragePoolBucketKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolVolume(arg0, arg1, arg2 string, arg3 api.StorageVolumePut, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolume indicates an expected call of UpdateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 any) *MockInstanceServerUpdateStoragePoolVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
	return &MockInstanceServerUpdateStoragePoolVolumeCall{Call: call}
}

// MockInstanceServerUpdateStoragePoolVolumeCall wrap *gomock.Call
type MockInstanceServerUpdateStoragePoolVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateStoragePoolVolumeCall) Return(arg0 error) *MockInstanceServerUpdateStoragePoolVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateStoragePoolVolumeCall) Do(f func(string, string, string, api.StorageVolumePut, string) error) *MockInstanceServerUpdateStoragePoolVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateStoragePoolVolumeCall) DoAndReturn(f func(string, string, string, api.StorageVolumePut, string) error) *MockInstanceServerUpdateStoragePoolVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string, arg4 api.StorageVolumeSnapshotPut, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolumeSnapshot indicates an expected call of UpdateStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockInstanceServerUpdateStoragePoolVolumeSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockInstanceServerUpdateStoragePoolVolumeSnapshotCall{Call: call}
}

// MockInstanceServerUpdateStoragePoolVolumeSnapshotCall wrap *gomock.Call
type MockInstanceServerUpdateStoragePoolVolumeSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateStoragePoolVolumeSnapshotCall) Return(arg0 error) *MockInstanceServerUpdateStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateStoragePoolVolumeSnapshotCall) Do(f func(string, string, string, string, api.StorageVolumeSnapshotPut, string) error) *MockInstanceServerUpdateStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateStoragePoolVolumeSnapshotCall) DoAndReturn(f func(string, string, string, string, api.StorageVolumeSnapshotPut, string) error) *MockInstanceServerUpdateStoragePoolVolumeSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWarning mocks base method.
func (m *MockInstanceServer) UpdateWarning(arg0 string, arg1 api.WarningPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarning", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarning indicates an expected call of UpdateWarning.
func (mr *MockInstanceServerMockRecorder) UpdateWarning(arg0, arg1, arg2 any) *MockInstanceServerUpdateWarningCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarning", reflect.TypeOf((*MockInstanceServer)(nil).UpdateWarning), arg0, arg1, arg2)
	return &MockInstanceServerUpdateWarningCall{Call: call}
}

// MockInstanceServerUpdateWarningCall wrap *gomock.Call
type MockInstanceServerUpdateWarningCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUpdateWarningCall) Return(arg0 error) *MockInstanceServerUpdateWarningCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUpdateWarningCall) Do(f func(string, api.WarningPut, string) error) *MockInstanceServerUpdateWarningCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUpdateWarningCall) DoAndReturn(f func(string, api.WarningPut, string) error) *MockInstanceServerUpdateWarningCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UseProject mocks base method.
func (m *MockInstanceServer) UseProject(arg0 string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseProject", arg0)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseProject indicates an expected call of UseProject.
func (mr *MockInstanceServerMockRecorder) UseProject(arg0 any) *MockInstanceServerUseProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseProject", reflect.TypeOf((*MockInstanceServer)(nil).UseProject), arg0)
	return &MockInstanceServerUseProjectCall{Call: call}
}

// MockInstanceServerUseProjectCall wrap *gomock.Call
type MockInstanceServerUseProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUseProjectCall) Return(arg0 lxd.InstanceServer) *MockInstanceServerUseProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUseProjectCall) Do(f func(string) lxd.InstanceServer) *MockInstanceServerUseProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUseProjectCall) DoAndReturn(f func(string) lxd.InstanceServer) *MockInstanceServerUseProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UseTarget mocks base method.
func (m *MockInstanceServer) UseTarget(arg0 string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTarget", arg0)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseTarget indicates an expected call of UseTarget.
func (mr *MockInstanceServerMockRecorder) UseTarget(arg0 any) *MockInstanceServerUseTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTarget", reflect.TypeOf((*MockInstanceServer)(nil).UseTarget), arg0)
	return &MockInstanceServerUseTargetCall{Call: call}
}

// MockInstanceServerUseTargetCall wrap *gomock.Call
type MockInstanceServerUseTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerUseTargetCall) Return(arg0 lxd.InstanceServer) *MockInstanceServerUseTargetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerUseTargetCall) Do(f func(string) lxd.InstanceServer) *MockInstanceServerUseTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerUseTargetCall) DoAndReturn(f func(string) lxd.InstanceServer) *MockInstanceServerUseTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
