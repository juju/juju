// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/container (interfaces: Manager,Initialiser)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination testing/package_mock.go -write_package_comment=false github.com/juju/juju/internal/container Manager,Initialiser
//

package testing

import (
	context "context"
	reflect "reflect"

	base "github.com/juju/juju/core/base"
	constraints "github.com/juju/juju/core/constraints"
	instance "github.com/juju/juju/core/instance"
	environs "github.com/juju/juju/environs"
	instances "github.com/juju/juju/environs/instances"
	instancecfg "github.com/juju/juju/internal/cloudconfig/instancecfg"
	container "github.com/juju/juju/internal/container"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockManager) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateContainer mocks base method.
func (m *MockManager) CreateContainer(arg0 context.Context, arg1 *instancecfg.InstanceConfig, arg2 constraints.Value, arg3 base.Base, arg4 *container.NetworkConfig, arg5 *container.StorageConfig, arg6 environs.StatusCallbackFunc) (instances.Instance, *instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(instances.Instance)
	ret1, _ := ret[1].(*instance.HardwareCharacteristics)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockManagerMockRecorder) CreateContainer(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockManagerCreateContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockManager)(nil).CreateContainer), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockManagerCreateContainerCall{Call: call}
}

// MockManagerCreateContainerCall wrap *gomock.Call
type MockManagerCreateContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerCreateContainerCall) Return(arg0 instances.Instance, arg1 *instance.HardwareCharacteristics, arg2 error) *MockManagerCreateContainerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerCreateContainerCall) Do(f func(context.Context, *instancecfg.InstanceConfig, constraints.Value, base.Base, *container.NetworkConfig, *container.StorageConfig, environs.StatusCallbackFunc) (instances.Instance, *instance.HardwareCharacteristics, error)) *MockManagerCreateContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerCreateContainerCall) DoAndReturn(f func(context.Context, *instancecfg.InstanceConfig, constraints.Value, base.Base, *container.NetworkConfig, *container.StorageConfig, environs.StatusCallbackFunc) (instances.Instance, *instance.HardwareCharacteristics, error)) *MockManagerCreateContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyContainer mocks base method.
func (m *MockManager) DestroyContainer(arg0 instance.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyContainer indicates an expected call of DestroyContainer.
func (mr *MockManagerMockRecorder) DestroyContainer(arg0 any) *MockManagerDestroyContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyContainer", reflect.TypeOf((*MockManager)(nil).DestroyContainer), arg0)
	return &MockManagerDestroyContainerCall{Call: call}
}

// MockManagerDestroyContainerCall wrap *gomock.Call
type MockManagerDestroyContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerDestroyContainerCall) Return(arg0 error) *MockManagerDestroyContainerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerDestroyContainerCall) Do(f func(instance.Id) error) *MockManagerDestroyContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerDestroyContainerCall) DoAndReturn(f func(instance.Id) error) *MockManagerDestroyContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsInitialized mocks base method.
func (m *MockManager) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockManagerMockRecorder) IsInitialized() *MockManagerIsInitializedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockManager)(nil).IsInitialized))
	return &MockManagerIsInitializedCall{Call: call}
}

// MockManagerIsInitializedCall wrap *gomock.Call
type MockManagerIsInitializedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerIsInitializedCall) Return(arg0 bool) *MockManagerIsInitializedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerIsInitializedCall) Do(f func() bool) *MockManagerIsInitializedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerIsInitializedCall) DoAndReturn(f func() bool) *MockManagerIsInitializedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListContainers mocks base method.
func (m *MockManager) ListContainers() ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers")
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockManagerMockRecorder) ListContainers() *MockManagerListContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockManager)(nil).ListContainers))
	return &MockManagerListContainersCall{Call: call}
}

// MockManagerListContainersCall wrap *gomock.Call
type MockManagerListContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerListContainersCall) Return(arg0 []instances.Instance, arg1 error) *MockManagerListContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerListContainersCall) Do(f func() ([]instances.Instance, error)) *MockManagerListContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerListContainersCall) DoAndReturn(f func() ([]instances.Instance, error)) *MockManagerListContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespace mocks base method.
func (m *MockManager) Namespace() instance.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(instance.Namespace)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockManagerMockRecorder) Namespace() *MockManagerNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockManager)(nil).Namespace))
	return &MockManagerNamespaceCall{Call: call}
}

// MockManagerNamespaceCall wrap *gomock.Call
type MockManagerNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerNamespaceCall) Return(arg0 instance.Namespace) *MockManagerNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerNamespaceCall) Do(f func() instance.Namespace) *MockManagerNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerNamespaceCall) DoAndReturn(f func() instance.Namespace) *MockManagerNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInitialiser is a mock of Initialiser interface.
type MockInitialiser struct {
	ctrl     *gomock.Controller
	recorder *MockInitialiserMockRecorder
}

// MockInitialiserMockRecorder is the mock recorder for MockInitialiser.
type MockInitialiserMockRecorder struct {
	mock *MockInitialiser
}

// NewMockInitialiser creates a new mock instance.
func NewMockInitialiser(ctrl *gomock.Controller) *MockInitialiser {
	mock := &MockInitialiser{ctrl: ctrl}
	mock.recorder = &MockInitialiserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitialiser) EXPECT() *MockInitialiserMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInitialiser) ISGOMOCK() struct{} {
	return struct{}{}
}

// Initialise mocks base method.
func (m *MockInitialiser) Initialise() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialise")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialise indicates an expected call of Initialise.
func (mr *MockInitialiserMockRecorder) Initialise() *MockInitialiserInitialiseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialise", reflect.TypeOf((*MockInitialiser)(nil).Initialise))
	return &MockInitialiserInitialiseCall{Call: call}
}

// MockInitialiserInitialiseCall wrap *gomock.Call
type MockInitialiserInitialiseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInitialiserInitialiseCall) Return(arg0 error) *MockInitialiserInitialiseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInitialiserInitialiseCall) Do(f func() error) *MockInitialiserInitialiseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInitialiserInitialiseCall) DoAndReturn(f func() error) *MockInitialiserInitialiseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
