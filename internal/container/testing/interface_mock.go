// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/container (interfaces: TestLXDManager)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination testing/interface_mock.go -write_package_comment=false github.com/juju/juju/internal/container TestLXDManager
//

package testing

import (
	context "context"
	reflect "reflect"

	base "github.com/juju/juju/core/base"
	constraints "github.com/juju/juju/core/constraints"
	instance "github.com/juju/juju/core/instance"
	lxdprofile "github.com/juju/juju/core/lxdprofile"
	environs "github.com/juju/juju/environs"
	instances "github.com/juju/juju/environs/instances"
	instancecfg "github.com/juju/juju/internal/cloudconfig/instancecfg"
	container "github.com/juju/juju/internal/container"
	gomock "go.uber.org/mock/gomock"
)

// MockTestLXDManager is a mock of TestLXDManager interface.
type MockTestLXDManager struct {
	ctrl     *gomock.Controller
	recorder *MockTestLXDManagerMockRecorder
}

// MockTestLXDManagerMockRecorder is the mock recorder for MockTestLXDManager.
type MockTestLXDManagerMockRecorder struct {
	mock *MockTestLXDManager
}

// NewMockTestLXDManager creates a new mock instance.
func NewMockTestLXDManager(ctrl *gomock.Controller) *MockTestLXDManager {
	mock := &MockTestLXDManager{ctrl: ctrl}
	mock.recorder = &MockTestLXDManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestLXDManager) EXPECT() *MockTestLXDManagerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockTestLXDManager) ISGOMOCK() struct{} {
	return struct{}{}
}

// AssignLXDProfiles mocks base method.
func (m *MockTestLXDManager) AssignLXDProfiles(arg0 string, arg1 []string, arg2 []lxdprofile.ProfilePost) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignLXDProfiles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignLXDProfiles indicates an expected call of AssignLXDProfiles.
func (mr *MockTestLXDManagerMockRecorder) AssignLXDProfiles(arg0, arg1, arg2 any) *MockTestLXDManagerAssignLXDProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignLXDProfiles", reflect.TypeOf((*MockTestLXDManager)(nil).AssignLXDProfiles), arg0, arg1, arg2)
	return &MockTestLXDManagerAssignLXDProfilesCall{Call: call}
}

// MockTestLXDManagerAssignLXDProfilesCall wrap *gomock.Call
type MockTestLXDManagerAssignLXDProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerAssignLXDProfilesCall) Return(arg0 []string, arg1 error) *MockTestLXDManagerAssignLXDProfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerAssignLXDProfilesCall) Do(f func(string, []string, []lxdprofile.ProfilePost) ([]string, error)) *MockTestLXDManagerAssignLXDProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerAssignLXDProfilesCall) DoAndReturn(f func(string, []string, []lxdprofile.ProfilePost) ([]string, error)) *MockTestLXDManagerAssignLXDProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateContainer mocks base method.
func (m *MockTestLXDManager) CreateContainer(arg0 context.Context, arg1 *instancecfg.InstanceConfig, arg2 constraints.Value, arg3 base.Base, arg4 *container.NetworkConfig, arg5 *container.StorageConfig, arg6 environs.StatusCallbackFunc) (instances.Instance, *instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(instances.Instance)
	ret1, _ := ret[1].(*instance.HardwareCharacteristics)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockTestLXDManagerMockRecorder) CreateContainer(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockTestLXDManagerCreateContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockTestLXDManager)(nil).CreateContainer), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockTestLXDManagerCreateContainerCall{Call: call}
}

// MockTestLXDManagerCreateContainerCall wrap *gomock.Call
type MockTestLXDManagerCreateContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerCreateContainerCall) Return(arg0 instances.Instance, arg1 *instance.HardwareCharacteristics, arg2 error) *MockTestLXDManagerCreateContainerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerCreateContainerCall) Do(f func(context.Context, *instancecfg.InstanceConfig, constraints.Value, base.Base, *container.NetworkConfig, *container.StorageConfig, environs.StatusCallbackFunc) (instances.Instance, *instance.HardwareCharacteristics, error)) *MockTestLXDManagerCreateContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerCreateContainerCall) DoAndReturn(f func(context.Context, *instancecfg.InstanceConfig, constraints.Value, base.Base, *container.NetworkConfig, *container.StorageConfig, environs.StatusCallbackFunc) (instances.Instance, *instance.HardwareCharacteristics, error)) *MockTestLXDManagerCreateContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyContainer mocks base method.
func (m *MockTestLXDManager) DestroyContainer(arg0 instance.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyContainer indicates an expected call of DestroyContainer.
func (mr *MockTestLXDManagerMockRecorder) DestroyContainer(arg0 any) *MockTestLXDManagerDestroyContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyContainer", reflect.TypeOf((*MockTestLXDManager)(nil).DestroyContainer), arg0)
	return &MockTestLXDManagerDestroyContainerCall{Call: call}
}

// MockTestLXDManagerDestroyContainerCall wrap *gomock.Call
type MockTestLXDManagerDestroyContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerDestroyContainerCall) Return(arg0 error) *MockTestLXDManagerDestroyContainerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerDestroyContainerCall) Do(f func(instance.Id) error) *MockTestLXDManagerDestroyContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerDestroyContainerCall) DoAndReturn(f func(instance.Id) error) *MockTestLXDManagerDestroyContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsInitialized mocks base method.
func (m *MockTestLXDManager) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockTestLXDManagerMockRecorder) IsInitialized() *MockTestLXDManagerIsInitializedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockTestLXDManager)(nil).IsInitialized))
	return &MockTestLXDManagerIsInitializedCall{Call: call}
}

// MockTestLXDManagerIsInitializedCall wrap *gomock.Call
type MockTestLXDManagerIsInitializedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerIsInitializedCall) Return(arg0 bool) *MockTestLXDManagerIsInitializedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerIsInitializedCall) Do(f func() bool) *MockTestLXDManagerIsInitializedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerIsInitializedCall) DoAndReturn(f func() bool) *MockTestLXDManagerIsInitializedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LXDProfileNames mocks base method.
func (m *MockTestLXDManager) LXDProfileNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfileNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LXDProfileNames indicates an expected call of LXDProfileNames.
func (mr *MockTestLXDManagerMockRecorder) LXDProfileNames(arg0 any) *MockTestLXDManagerLXDProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfileNames", reflect.TypeOf((*MockTestLXDManager)(nil).LXDProfileNames), arg0)
	return &MockTestLXDManagerLXDProfileNamesCall{Call: call}
}

// MockTestLXDManagerLXDProfileNamesCall wrap *gomock.Call
type MockTestLXDManagerLXDProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerLXDProfileNamesCall) Return(arg0 []string, arg1 error) *MockTestLXDManagerLXDProfileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerLXDProfileNamesCall) Do(f func(string) ([]string, error)) *MockTestLXDManagerLXDProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerLXDProfileNamesCall) DoAndReturn(f func(string) ([]string, error)) *MockTestLXDManagerLXDProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListContainers mocks base method.
func (m *MockTestLXDManager) ListContainers() ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers")
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockTestLXDManagerMockRecorder) ListContainers() *MockTestLXDManagerListContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockTestLXDManager)(nil).ListContainers))
	return &MockTestLXDManagerListContainersCall{Call: call}
}

// MockTestLXDManagerListContainersCall wrap *gomock.Call
type MockTestLXDManagerListContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerListContainersCall) Return(arg0 []instances.Instance, arg1 error) *MockTestLXDManagerListContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerListContainersCall) Do(f func() ([]instances.Instance, error)) *MockTestLXDManagerListContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerListContainersCall) DoAndReturn(f func() ([]instances.Instance, error)) *MockTestLXDManagerListContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MaybeWriteLXDProfile mocks base method.
func (m *MockTestLXDManager) MaybeWriteLXDProfile(arg0 string, arg1 lxdprofile.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaybeWriteLXDProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaybeWriteLXDProfile indicates an expected call of MaybeWriteLXDProfile.
func (mr *MockTestLXDManagerMockRecorder) MaybeWriteLXDProfile(arg0, arg1 any) *MockTestLXDManagerMaybeWriteLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeWriteLXDProfile", reflect.TypeOf((*MockTestLXDManager)(nil).MaybeWriteLXDProfile), arg0, arg1)
	return &MockTestLXDManagerMaybeWriteLXDProfileCall{Call: call}
}

// MockTestLXDManagerMaybeWriteLXDProfileCall wrap *gomock.Call
type MockTestLXDManagerMaybeWriteLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerMaybeWriteLXDProfileCall) Return(arg0 error) *MockTestLXDManagerMaybeWriteLXDProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerMaybeWriteLXDProfileCall) Do(f func(string, lxdprofile.Profile) error) *MockTestLXDManagerMaybeWriteLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerMaybeWriteLXDProfileCall) DoAndReturn(f func(string, lxdprofile.Profile) error) *MockTestLXDManagerMaybeWriteLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespace mocks base method.
func (m *MockTestLXDManager) Namespace() instance.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(instance.Namespace)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockTestLXDManagerMockRecorder) Namespace() *MockTestLXDManagerNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockTestLXDManager)(nil).Namespace))
	return &MockTestLXDManagerNamespaceCall{Call: call}
}

// MockTestLXDManagerNamespaceCall wrap *gomock.Call
type MockTestLXDManagerNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTestLXDManagerNamespaceCall) Return(arg0 instance.Namespace) *MockTestLXDManagerNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTestLXDManagerNamespaceCall) Do(f func() instance.Namespace) *MockTestLXDManagerNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTestLXDManagerNamespaceCall) DoAndReturn(f func() instance.Namespace) *MockTestLXDManagerNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
