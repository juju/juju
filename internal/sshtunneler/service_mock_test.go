// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/sshtunneler (interfaces: State,ControllerInfo,SSHDial)
//
// Generated by this command:
//
//	mockgen -typed -package sshtunneler -destination ./service_mock_test.go github.com/juju/juju/internal/sshtunneler State,ControllerInfo,SSHDial
//

// Package sshtunneler is a generated GoMock package.
package sshtunneler

import (
	net "net"
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
	ssh "golang.org/x/crypto/ssh"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// InsertSSHConnRequest mocks base method.
func (m *MockState) InsertSSHConnRequest(arg0 state.SSHConnRequestArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSSHConnRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSSHConnRequest indicates an expected call of InsertSSHConnRequest.
func (mr *MockStateMockRecorder) InsertSSHConnRequest(arg0 any) *MockStateInsertSSHConnRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSSHConnRequest", reflect.TypeOf((*MockState)(nil).InsertSSHConnRequest), arg0)
	return &MockStateInsertSSHConnRequestCall{Call: call}
}

// MockStateInsertSSHConnRequestCall wrap *gomock.Call
type MockStateInsertSSHConnRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInsertSSHConnRequestCall) Return(arg0 error) *MockStateInsertSSHConnRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInsertSSHConnRequestCall) Do(f func(state.SSHConnRequestArg) error) *MockStateInsertSSHConnRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInsertSSHConnRequestCall) DoAndReturn(f func(state.SSHConnRequestArg) error) *MockStateInsertSSHConnRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineHostKeys mocks base method.
func (m *MockState) MachineHostKeys(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineHostKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineHostKeys indicates an expected call of MachineHostKeys.
func (mr *MockStateMockRecorder) MachineHostKeys(arg0, arg1 any) *MockStateMachineHostKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineHostKeys", reflect.TypeOf((*MockState)(nil).MachineHostKeys), arg0, arg1)
	return &MockStateMachineHostKeysCall{Call: call}
}

// MockStateMachineHostKeysCall wrap *gomock.Call
type MockStateMachineHostKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMachineHostKeysCall) Return(arg0 []string, arg1 error) *MockStateMachineHostKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMachineHostKeysCall) Do(f func(string, string) ([]string, error)) *MockStateMachineHostKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMachineHostKeysCall) DoAndReturn(f func(string, string) ([]string, error)) *MockStateMachineHostKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerInfo is a mock of ControllerInfo interface.
type MockControllerInfo struct {
	ctrl     *gomock.Controller
	recorder *MockControllerInfoMockRecorder
}

// MockControllerInfoMockRecorder is the mock recorder for MockControllerInfo.
type MockControllerInfoMockRecorder struct {
	mock *MockControllerInfo
}

// NewMockControllerInfo creates a new mock instance.
func NewMockControllerInfo(ctrl *gomock.Controller) *MockControllerInfo {
	mock := &MockControllerInfo{ctrl: ctrl}
	mock.recorder = &MockControllerInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerInfo) EXPECT() *MockControllerInfoMockRecorder {
	return m.recorder
}

// Addresses mocks base method.
func (m *MockControllerInfo) Addresses() (network.SpaceAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses")
	ret0, _ := ret[0].(network.SpaceAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Addresses indicates an expected call of Addresses.
func (mr *MockControllerInfoMockRecorder) Addresses() *MockControllerInfoAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockControllerInfo)(nil).Addresses))
	return &MockControllerInfoAddressesCall{Call: call}
}

// MockControllerInfoAddressesCall wrap *gomock.Call
type MockControllerInfoAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerInfoAddressesCall) Return(arg0 network.SpaceAddresses, arg1 error) *MockControllerInfoAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerInfoAddressesCall) Do(f func() (network.SpaceAddresses, error)) *MockControllerInfoAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerInfoAddressesCall) DoAndReturn(f func() (network.SpaceAddresses, error)) *MockControllerInfoAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSSHDial is a mock of SSHDial interface.
type MockSSHDial struct {
	ctrl     *gomock.Controller
	recorder *MockSSHDialMockRecorder
}

// MockSSHDialMockRecorder is the mock recorder for MockSSHDial.
type MockSSHDialMockRecorder struct {
	mock *MockSSHDial
}

// NewMockSSHDial creates a new mock instance.
func NewMockSSHDial(ctrl *gomock.Controller) *MockSSHDial {
	mock := &MockSSHDial{ctrl: ctrl}
	mock.recorder = &MockSSHDialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHDial) EXPECT() *MockSSHDialMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockSSHDial) Dial(arg0 net.Conn, arg1 string, arg2 ssh.Signer, arg3 ssh.HostKeyCallback) (*ssh.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ssh.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockSSHDialMockRecorder) Dial(arg0, arg1, arg2, arg3 any) *MockSSHDialDialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockSSHDial)(nil).Dial), arg0, arg1, arg2, arg3)
	return &MockSSHDialDialCall{Call: call}
}

// MockSSHDialDialCall wrap *gomock.Call
type MockSSHDialDialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHDialDialCall) Return(arg0 *ssh.Client, arg1 error) *MockSSHDialDialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHDialDialCall) Do(f func(net.Conn, string, ssh.Signer, ssh.HostKeyCallback) (*ssh.Client, error)) *MockSSHDialDialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHDialDialCall) DoAndReturn(f func(net.Conn, string, ssh.Signer, ssh.HostKeyCallback) (*ssh.Client, error)) *MockSSHDialDialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
