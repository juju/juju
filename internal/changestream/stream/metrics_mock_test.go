// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/changestream/stream (interfaces: MetricsCollector)
//
// Generated by this command:
//
//	mockgen -typed -package stream -destination metrics_mock_test.go github.com/juju/juju/internal/changestream/stream MetricsCollector
//

// Package stream is a generated GoMock package.
package stream

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockMetricsCollector) ISGOMOCK() struct{} {
	return struct{}{}
}

// ChangesCountObserve mocks base method.
func (m *MockMetricsCollector) ChangesCountObserve(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangesCountObserve", arg0)
}

// ChangesCountObserve indicates an expected call of ChangesCountObserve.
func (mr *MockMetricsCollectorMockRecorder) ChangesCountObserve(arg0 any) *MockMetricsCollectorChangesCountObserveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesCountObserve", reflect.TypeOf((*MockMetricsCollector)(nil).ChangesCountObserve), arg0)
	return &MockMetricsCollectorChangesCountObserveCall{Call: call}
}

// MockMetricsCollectorChangesCountObserveCall wrap *gomock.Call
type MockMetricsCollectorChangesCountObserveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorChangesCountObserveCall) Return() *MockMetricsCollectorChangesCountObserveCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorChangesCountObserveCall) Do(f func(int)) *MockMetricsCollectorChangesCountObserveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorChangesCountObserveCall) DoAndReturn(f func(int)) *MockMetricsCollectorChangesCountObserveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChangesRequestDurationObserve mocks base method.
func (m *MockMetricsCollector) ChangesRequestDurationObserve(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangesRequestDurationObserve", arg0)
}

// ChangesRequestDurationObserve indicates an expected call of ChangesRequestDurationObserve.
func (mr *MockMetricsCollectorMockRecorder) ChangesRequestDurationObserve(arg0 any) *MockMetricsCollectorChangesRequestDurationObserveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesRequestDurationObserve", reflect.TypeOf((*MockMetricsCollector)(nil).ChangesRequestDurationObserve), arg0)
	return &MockMetricsCollectorChangesRequestDurationObserveCall{Call: call}
}

// MockMetricsCollectorChangesRequestDurationObserveCall wrap *gomock.Call
type MockMetricsCollectorChangesRequestDurationObserveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorChangesRequestDurationObserveCall) Return() *MockMetricsCollectorChangesRequestDurationObserveCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorChangesRequestDurationObserveCall) Do(f func(float64)) *MockMetricsCollectorChangesRequestDurationObserveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorChangesRequestDurationObserveCall) DoAndReturn(f func(float64)) *MockMetricsCollectorChangesRequestDurationObserveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatermarkInsertsInc mocks base method.
func (m *MockMetricsCollector) WatermarkInsertsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatermarkInsertsInc")
}

// WatermarkInsertsInc indicates an expected call of WatermarkInsertsInc.
func (mr *MockMetricsCollectorMockRecorder) WatermarkInsertsInc() *MockMetricsCollectorWatermarkInsertsIncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatermarkInsertsInc", reflect.TypeOf((*MockMetricsCollector)(nil).WatermarkInsertsInc))
	return &MockMetricsCollectorWatermarkInsertsIncCall{Call: call}
}

// MockMetricsCollectorWatermarkInsertsIncCall wrap *gomock.Call
type MockMetricsCollectorWatermarkInsertsIncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorWatermarkInsertsIncCall) Return() *MockMetricsCollectorWatermarkInsertsIncCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorWatermarkInsertsIncCall) Do(f func()) *MockMetricsCollectorWatermarkInsertsIncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorWatermarkInsertsIncCall) DoAndReturn(f func()) *MockMetricsCollectorWatermarkInsertsIncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatermarkRetriesInc mocks base method.
func (m *MockMetricsCollector) WatermarkRetriesInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatermarkRetriesInc")
}

// WatermarkRetriesInc indicates an expected call of WatermarkRetriesInc.
func (mr *MockMetricsCollectorMockRecorder) WatermarkRetriesInc() *MockMetricsCollectorWatermarkRetriesIncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatermarkRetriesInc", reflect.TypeOf((*MockMetricsCollector)(nil).WatermarkRetriesInc))
	return &MockMetricsCollectorWatermarkRetriesIncCall{Call: call}
}

// MockMetricsCollectorWatermarkRetriesIncCall wrap *gomock.Call
type MockMetricsCollectorWatermarkRetriesIncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorWatermarkRetriesIncCall) Return() *MockMetricsCollectorWatermarkRetriesIncCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorWatermarkRetriesIncCall) Do(f func()) *MockMetricsCollectorWatermarkRetriesIncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorWatermarkRetriesIncCall) DoAndReturn(f func()) *MockMetricsCollectorWatermarkRetriesIncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
