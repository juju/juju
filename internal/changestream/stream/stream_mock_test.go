// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/changestream/stream (interfaces: FileNotifier)
//
// Generated by this command:
//
//	mockgen -typed -package stream -destination stream_mock_test.go github.com/juju/juju/internal/changestream/stream FileNotifier
//

// Package stream is a generated GoMock package.
package stream

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileNotifier is a mock of FileNotifier interface.
type MockFileNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockFileNotifierMockRecorder
}

// MockFileNotifierMockRecorder is the mock recorder for MockFileNotifier.
type MockFileNotifierMockRecorder struct {
	mock *MockFileNotifier
}

// NewMockFileNotifier creates a new mock instance.
func NewMockFileNotifier(ctrl *gomock.Controller) *MockFileNotifier {
	mock := &MockFileNotifier{ctrl: ctrl}
	mock.recorder = &MockFileNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileNotifier) EXPECT() *MockFileNotifierMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFileNotifier) ISGOMOCK() struct{} {
	return struct{}{}
}

// Changes mocks base method.
func (m *MockFileNotifier) Changes() (<-chan bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Changes indicates an expected call of Changes.
func (mr *MockFileNotifierMockRecorder) Changes() *MockFileNotifierChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockFileNotifier)(nil).Changes))
	return &MockFileNotifierChangesCall{Call: call}
}

// MockFileNotifierChangesCall wrap *gomock.Call
type MockFileNotifierChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileNotifierChangesCall) Return(arg0 <-chan bool, arg1 error) *MockFileNotifierChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileNotifierChangesCall) Do(f func() (<-chan bool, error)) *MockFileNotifierChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileNotifierChangesCall) DoAndReturn(f func() (<-chan bool, error)) *MockFileNotifierChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
