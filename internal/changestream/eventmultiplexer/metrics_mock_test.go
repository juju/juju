// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/changestream/eventmultiplexer (interfaces: MetricsCollector)
//
// Generated by this command:
//
//	mockgen -typed -package eventmultiplexer -destination metrics_mock_test.go github.com/juju/juju/internal/changestream/eventmultiplexer MetricsCollector
//

// Package eventmultiplexer is a generated GoMock package.
package eventmultiplexer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockMetricsCollector) ISGOMOCK() struct{} {
	return struct{}{}
}

// DispatchDurationObserve mocks base method.
func (m *MockMetricsCollector) DispatchDurationObserve(arg0 float64, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DispatchDurationObserve", arg0, arg1)
}

// DispatchDurationObserve indicates an expected call of DispatchDurationObserve.
func (mr *MockMetricsCollectorMockRecorder) DispatchDurationObserve(arg0, arg1 any) *MockMetricsCollectorDispatchDurationObserveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchDurationObserve", reflect.TypeOf((*MockMetricsCollector)(nil).DispatchDurationObserve), arg0, arg1)
	return &MockMetricsCollectorDispatchDurationObserveCall{Call: call}
}

// MockMetricsCollectorDispatchDurationObserveCall wrap *gomock.Call
type MockMetricsCollectorDispatchDurationObserveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorDispatchDurationObserveCall) Return() *MockMetricsCollectorDispatchDurationObserveCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorDispatchDurationObserveCall) Do(f func(float64, bool)) *MockMetricsCollectorDispatchDurationObserveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorDispatchDurationObserveCall) DoAndReturn(f func(float64, bool)) *MockMetricsCollectorDispatchDurationObserveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscriptionsDec mocks base method.
func (m *MockMetricsCollector) SubscriptionsDec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscriptionsDec")
}

// SubscriptionsDec indicates an expected call of SubscriptionsDec.
func (mr *MockMetricsCollectorMockRecorder) SubscriptionsDec() *MockMetricsCollectorSubscriptionsDecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionsDec", reflect.TypeOf((*MockMetricsCollector)(nil).SubscriptionsDec))
	return &MockMetricsCollectorSubscriptionsDecCall{Call: call}
}

// MockMetricsCollectorSubscriptionsDecCall wrap *gomock.Call
type MockMetricsCollectorSubscriptionsDecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorSubscriptionsDecCall) Return() *MockMetricsCollectorSubscriptionsDecCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorSubscriptionsDecCall) Do(f func()) *MockMetricsCollectorSubscriptionsDecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorSubscriptionsDecCall) DoAndReturn(f func()) *MockMetricsCollectorSubscriptionsDecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscriptionsInc mocks base method.
func (m *MockMetricsCollector) SubscriptionsInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscriptionsInc")
}

// SubscriptionsInc indicates an expected call of SubscriptionsInc.
func (mr *MockMetricsCollectorMockRecorder) SubscriptionsInc() *MockMetricsCollectorSubscriptionsIncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionsInc", reflect.TypeOf((*MockMetricsCollector)(nil).SubscriptionsInc))
	return &MockMetricsCollectorSubscriptionsIncCall{Call: call}
}

// MockMetricsCollectorSubscriptionsIncCall wrap *gomock.Call
type MockMetricsCollectorSubscriptionsIncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorSubscriptionsIncCall) Return() *MockMetricsCollectorSubscriptionsIncCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorSubscriptionsIncCall) Do(f func()) *MockMetricsCollectorSubscriptionsIncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorSubscriptionsIncCall) DoAndReturn(f func()) *MockMetricsCollectorSubscriptionsIncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
