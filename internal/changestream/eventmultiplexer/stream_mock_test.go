// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/changestream/eventmultiplexer (interfaces: Stream)
//
// Generated by this command:
//
//	mockgen -typed -package eventmultiplexer -destination stream_mock_test.go github.com/juju/juju/internal/changestream/eventmultiplexer Stream
//

// Package eventmultiplexer is a generated GoMock package.
package eventmultiplexer

import (
	reflect "reflect"

	changestream "github.com/juju/juju/core/changestream"
	gomock "go.uber.org/mock/gomock"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStream) ISGOMOCK() struct{} {
	return struct{}{}
}

// Dying mocks base method.
func (m *MockStream) Dying() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dying")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Dying indicates an expected call of Dying.
func (mr *MockStreamMockRecorder) Dying() *MockStreamDyingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dying", reflect.TypeOf((*MockStream)(nil).Dying))
	return &MockStreamDyingCall{Call: call}
}

// MockStreamDyingCall wrap *gomock.Call
type MockStreamDyingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamDyingCall) Return(arg0 <-chan struct{}) *MockStreamDyingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamDyingCall) Do(f func() <-chan struct{}) *MockStreamDyingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamDyingCall) DoAndReturn(f func() <-chan struct{}) *MockStreamDyingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Terms mocks base method.
func (m *MockStream) Terms() <-chan changestream.Term {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terms")
	ret0, _ := ret[0].(<-chan changestream.Term)
	return ret0
}

// Terms indicates an expected call of Terms.
func (mr *MockStreamMockRecorder) Terms() *MockStreamTermsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terms", reflect.TypeOf((*MockStream)(nil).Terms))
	return &MockStreamTermsCall{Call: call}
}

// MockStreamTermsCall wrap *gomock.Call
type MockStreamTermsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamTermsCall) Return(arg0 <-chan changestream.Term) *MockStreamTermsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamTermsCall) Do(f func() <-chan changestream.Term) *MockStreamTermsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamTermsCall) DoAndReturn(f func() <-chan changestream.Term) *MockStreamTermsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
