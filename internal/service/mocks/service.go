// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/service (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/service.go github.com/juju/juju/internal/service Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/juju/juju/internal/service/common"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Conf mocks base method.
func (m *MockService) Conf() common.Conf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conf")
	ret0, _ := ret[0].(common.Conf)
	return ret0
}

// Conf indicates an expected call of Conf.
func (mr *MockServiceMockRecorder) Conf() *MockServiceConfCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conf", reflect.TypeOf((*MockService)(nil).Conf))
	return &MockServiceConfCall{Call: call}
}

// MockServiceConfCall wrap *gomock.Call
type MockServiceConfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceConfCall) Return(arg0 common.Conf) *MockServiceConfCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceConfCall) Do(f func() common.Conf) *MockServiceConfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceConfCall) DoAndReturn(f func() common.Conf) *MockServiceConfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exists mocks base method.
func (m *MockService) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceMockRecorder) Exists() *MockServiceExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockService)(nil).Exists))
	return &MockServiceExistsCall{Call: call}
}

// MockServiceExistsCall wrap *gomock.Call
type MockServiceExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceExistsCall) Return(arg0 bool, arg1 error) *MockServiceExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceExistsCall) Do(f func() (bool, error)) *MockServiceExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceExistsCall) DoAndReturn(f func() (bool, error)) *MockServiceExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Install mocks base method.
func (m *MockService) Install() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install")
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockServiceMockRecorder) Install() *MockServiceInstallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockService)(nil).Install))
	return &MockServiceInstallCall{Call: call}
}

// MockServiceInstallCall wrap *gomock.Call
type MockServiceInstallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInstallCall) Return(arg0 error) *MockServiceInstallCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInstallCall) Do(f func() error) *MockServiceInstallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInstallCall) DoAndReturn(f func() error) *MockServiceInstallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstallCommands mocks base method.
func (m *MockService) InstallCommands() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallCommands")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallCommands indicates an expected call of InstallCommands.
func (mr *MockServiceMockRecorder) InstallCommands() *MockServiceInstallCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallCommands", reflect.TypeOf((*MockService)(nil).InstallCommands))
	return &MockServiceInstallCommandsCall{Call: call}
}

// MockServiceInstallCommandsCall wrap *gomock.Call
type MockServiceInstallCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInstallCommandsCall) Return(arg0 []string, arg1 error) *MockServiceInstallCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInstallCommandsCall) Do(f func() ([]string, error)) *MockServiceInstallCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInstallCommandsCall) DoAndReturn(f func() ([]string, error)) *MockServiceInstallCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Installed mocks base method.
func (m *MockService) Installed() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Installed")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Installed indicates an expected call of Installed.
func (mr *MockServiceMockRecorder) Installed() *MockServiceInstalledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Installed", reflect.TypeOf((*MockService)(nil).Installed))
	return &MockServiceInstalledCall{Call: call}
}

// MockServiceInstalledCall wrap *gomock.Call
type MockServiceInstalledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInstalledCall) Return(arg0 bool, arg1 error) *MockServiceInstalledCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInstalledCall) Do(f func() (bool, error)) *MockServiceInstalledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInstalledCall) DoAndReturn(f func() (bool, error)) *MockServiceInstalledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *MockServiceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
	return &MockServiceNameCall{Call: call}
}

// MockServiceNameCall wrap *gomock.Call
type MockServiceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceNameCall) Return(arg0 string) *MockServiceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceNameCall) Do(f func() string) *MockServiceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceNameCall) DoAndReturn(f func() string) *MockServiceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockService) Remove() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockServiceMockRecorder) Remove() *MockServiceRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockService)(nil).Remove))
	return &MockServiceRemoveCall{Call: call}
}

// MockServiceRemoveCall wrap *gomock.Call
type MockServiceRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRemoveCall) Return(arg0 error) *MockServiceRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRemoveCall) Do(f func() error) *MockServiceRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRemoveCall) DoAndReturn(f func() error) *MockServiceRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Running mocks base method.
func (m *MockService) Running() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Running indicates an expected call of Running.
func (mr *MockServiceMockRecorder) Running() *MockServiceRunningCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockService)(nil).Running))
	return &MockServiceRunningCall{Call: call}
}

// MockServiceRunningCall wrap *gomock.Call
type MockServiceRunningCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRunningCall) Return(arg0 bool, arg1 error) *MockServiceRunningCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRunningCall) Do(f func() (bool, error)) *MockServiceRunningCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRunningCall) DoAndReturn(f func() (bool, error)) *MockServiceRunningCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start() *MockServiceStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start))
	return &MockServiceStartCall{Call: call}
}

// MockServiceStartCall wrap *gomock.Call
type MockServiceStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceStartCall) Return(arg0 error) *MockServiceStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceStartCall) Do(f func() error) *MockServiceStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceStartCall) DoAndReturn(f func() error) *MockServiceStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartCommands mocks base method.
func (m *MockService) StartCommands() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCommands")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCommands indicates an expected call of StartCommands.
func (mr *MockServiceMockRecorder) StartCommands() *MockServiceStartCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCommands", reflect.TypeOf((*MockService)(nil).StartCommands))
	return &MockServiceStartCommandsCall{Call: call}
}

// MockServiceStartCommandsCall wrap *gomock.Call
type MockServiceStartCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceStartCommandsCall) Return(arg0 []string, arg1 error) *MockServiceStartCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceStartCommandsCall) Do(f func() ([]string, error)) *MockServiceStartCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceStartCommandsCall) DoAndReturn(f func() ([]string, error)) *MockServiceStartCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop() *MockServiceStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop))
	return &MockServiceStopCall{Call: call}
}

// MockServiceStopCall wrap *gomock.Call
type MockServiceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceStopCall) Return(arg0 error) *MockServiceStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceStopCall) Do(f func() error) *MockServiceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceStopCall) DoAndReturn(f func() error) *MockServiceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteService mocks base method.
func (m *MockService) WriteService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteService")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteService indicates an expected call of WriteService.
func (mr *MockServiceMockRecorder) WriteService() *MockServiceWriteServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteService", reflect.TypeOf((*MockService)(nil).WriteService))
	return &MockServiceWriteServiceCall{Call: call}
}

// MockServiceWriteServiceCall wrap *gomock.Call
type MockServiceWriteServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceWriteServiceCall) Return(arg0 error) *MockServiceWriteServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceWriteServiceCall) Do(f func() error) *MockServiceWriteServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceWriteServiceCall) DoAndReturn(f func() error) *MockServiceWriteServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
