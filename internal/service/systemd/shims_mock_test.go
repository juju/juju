// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/service/systemd (interfaces: ShimExec)
//
// Generated by this command:
//
//	mockgen -typed -package systemd -destination shims_mock_test.go github.com/juju/juju/internal/service/systemd ShimExec
//

// Package systemd is a generated GoMock package.
package systemd

import (
	reflect "reflect"

	exec "github.com/juju/utils/v4/exec"
	gomock "go.uber.org/mock/gomock"
)

// MockShimExec is a mock of ShimExec interface.
type MockShimExec struct {
	ctrl     *gomock.Controller
	recorder *MockShimExecMockRecorder
}

// MockShimExecMockRecorder is the mock recorder for MockShimExec.
type MockShimExecMockRecorder struct {
	mock *MockShimExec
}

// NewMockShimExec creates a new mock instance.
func NewMockShimExec(ctrl *gomock.Controller) *MockShimExec {
	mock := &MockShimExec{ctrl: ctrl}
	mock.recorder = &MockShimExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShimExec) EXPECT() *MockShimExecMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockShimExec) ISGOMOCK() struct{} {
	return struct{}{}
}

// RunCommands mocks base method.
func (m *MockShimExec) RunCommands(arg0 exec.RunParams) (*exec.ExecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommands", arg0)
	ret0, _ := ret[0].(*exec.ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommands indicates an expected call of RunCommands.
func (mr *MockShimExecMockRecorder) RunCommands(arg0 any) *MockShimExecRunCommandsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommands", reflect.TypeOf((*MockShimExec)(nil).RunCommands), arg0)
	return &MockShimExecRunCommandsCall{Call: call}
}

// MockShimExecRunCommandsCall wrap *gomock.Call
type MockShimExecRunCommandsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockShimExecRunCommandsCall) Return(arg0 *exec.ExecResponse, arg1 error) *MockShimExecRunCommandsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockShimExecRunCommandsCall) Do(f func(exec.RunParams) (*exec.ExecResponse, error)) *MockShimExecRunCommandsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockShimExecRunCommandsCall) DoAndReturn(f func(exec.RunParams) (*exec.ExecResponse, error)) *MockShimExecRunCommandsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
