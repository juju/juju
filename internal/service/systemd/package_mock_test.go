// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/service/systemd (interfaces: DBusAPI,FileSystemOps)
//
// Generated by this command:
//
//	mockgen -typed -package systemd_test -destination package_mock_test.go github.com/juju/juju/internal/service/systemd DBusAPI,FileSystemOps
//

// Package systemd_test is a generated GoMock package.
package systemd_test

import (
	fs "io/fs"
	reflect "reflect"

	dbus "github.com/coreos/go-systemd/v22/dbus"
	gomock "go.uber.org/mock/gomock"
)

// MockDBusAPI is a mock of DBusAPI interface.
type MockDBusAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDBusAPIMockRecorder
}

// MockDBusAPIMockRecorder is the mock recorder for MockDBusAPI.
type MockDBusAPIMockRecorder struct {
	mock *MockDBusAPI
}

// NewMockDBusAPI creates a new mock instance.
func NewMockDBusAPI(ctrl *gomock.Controller) *MockDBusAPI {
	mock := &MockDBusAPI{ctrl: ctrl}
	mock.recorder = &MockDBusAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBusAPI) EXPECT() *MockDBusAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDBusAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockDBusAPI) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBusAPIMockRecorder) Close() *MockDBusAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBusAPI)(nil).Close))
	return &MockDBusAPICloseCall{Call: call}
}

// MockDBusAPICloseCall wrap *gomock.Call
type MockDBusAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPICloseCall) Return() *MockDBusAPICloseCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPICloseCall) Do(f func()) *MockDBusAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPICloseCall) DoAndReturn(f func()) *MockDBusAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableUnitFiles mocks base method.
func (m *MockDBusAPI) DisableUnitFiles(arg0 []string, arg1 bool) ([]dbus.DisableUnitFileChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUnitFiles", arg0, arg1)
	ret0, _ := ret[0].([]dbus.DisableUnitFileChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableUnitFiles indicates an expected call of DisableUnitFiles.
func (mr *MockDBusAPIMockRecorder) DisableUnitFiles(arg0, arg1 any) *MockDBusAPIDisableUnitFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUnitFiles", reflect.TypeOf((*MockDBusAPI)(nil).DisableUnitFiles), arg0, arg1)
	return &MockDBusAPIDisableUnitFilesCall{Call: call}
}

// MockDBusAPIDisableUnitFilesCall wrap *gomock.Call
type MockDBusAPIDisableUnitFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIDisableUnitFilesCall) Return(arg0 []dbus.DisableUnitFileChange, arg1 error) *MockDBusAPIDisableUnitFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIDisableUnitFilesCall) Do(f func([]string, bool) ([]dbus.DisableUnitFileChange, error)) *MockDBusAPIDisableUnitFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIDisableUnitFilesCall) DoAndReturn(f func([]string, bool) ([]dbus.DisableUnitFileChange, error)) *MockDBusAPIDisableUnitFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableUnitFiles mocks base method.
func (m *MockDBusAPI) EnableUnitFiles(arg0 []string, arg1, arg2 bool) (bool, []dbus.EnableUnitFileChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUnitFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]dbus.EnableUnitFileChange)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableUnitFiles indicates an expected call of EnableUnitFiles.
func (mr *MockDBusAPIMockRecorder) EnableUnitFiles(arg0, arg1, arg2 any) *MockDBusAPIEnableUnitFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUnitFiles", reflect.TypeOf((*MockDBusAPI)(nil).EnableUnitFiles), arg0, arg1, arg2)
	return &MockDBusAPIEnableUnitFilesCall{Call: call}
}

// MockDBusAPIEnableUnitFilesCall wrap *gomock.Call
type MockDBusAPIEnableUnitFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIEnableUnitFilesCall) Return(arg0 bool, arg1 []dbus.EnableUnitFileChange, arg2 error) *MockDBusAPIEnableUnitFilesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIEnableUnitFilesCall) Do(f func([]string, bool, bool) (bool, []dbus.EnableUnitFileChange, error)) *MockDBusAPIEnableUnitFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIEnableUnitFilesCall) DoAndReturn(f func([]string, bool, bool) (bool, []dbus.EnableUnitFileChange, error)) *MockDBusAPIEnableUnitFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitProperties mocks base method.
func (m *MockDBusAPI) GetUnitProperties(arg0 string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitProperties", arg0)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitProperties indicates an expected call of GetUnitProperties.
func (mr *MockDBusAPIMockRecorder) GetUnitProperties(arg0 any) *MockDBusAPIGetUnitPropertiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitProperties", reflect.TypeOf((*MockDBusAPI)(nil).GetUnitProperties), arg0)
	return &MockDBusAPIGetUnitPropertiesCall{Call: call}
}

// MockDBusAPIGetUnitPropertiesCall wrap *gomock.Call
type MockDBusAPIGetUnitPropertiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIGetUnitPropertiesCall) Return(arg0 map[string]any, arg1 error) *MockDBusAPIGetUnitPropertiesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIGetUnitPropertiesCall) Do(f func(string) (map[string]any, error)) *MockDBusAPIGetUnitPropertiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIGetUnitPropertiesCall) DoAndReturn(f func(string) (map[string]any, error)) *MockDBusAPIGetUnitPropertiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitTypeProperties mocks base method.
func (m *MockDBusAPI) GetUnitTypeProperties(arg0, arg1 string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTypeProperties", arg0, arg1)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTypeProperties indicates an expected call of GetUnitTypeProperties.
func (mr *MockDBusAPIMockRecorder) GetUnitTypeProperties(arg0, arg1 any) *MockDBusAPIGetUnitTypePropertiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTypeProperties", reflect.TypeOf((*MockDBusAPI)(nil).GetUnitTypeProperties), arg0, arg1)
	return &MockDBusAPIGetUnitTypePropertiesCall{Call: call}
}

// MockDBusAPIGetUnitTypePropertiesCall wrap *gomock.Call
type MockDBusAPIGetUnitTypePropertiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIGetUnitTypePropertiesCall) Return(arg0 map[string]any, arg1 error) *MockDBusAPIGetUnitTypePropertiesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIGetUnitTypePropertiesCall) Do(f func(string, string) (map[string]any, error)) *MockDBusAPIGetUnitTypePropertiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIGetUnitTypePropertiesCall) DoAndReturn(f func(string, string) (map[string]any, error)) *MockDBusAPIGetUnitTypePropertiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LinkUnitFiles mocks base method.
func (m *MockDBusAPI) LinkUnitFiles(arg0 []string, arg1, arg2 bool) ([]dbus.LinkUnitFileChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkUnitFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dbus.LinkUnitFileChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkUnitFiles indicates an expected call of LinkUnitFiles.
func (mr *MockDBusAPIMockRecorder) LinkUnitFiles(arg0, arg1, arg2 any) *MockDBusAPILinkUnitFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkUnitFiles", reflect.TypeOf((*MockDBusAPI)(nil).LinkUnitFiles), arg0, arg1, arg2)
	return &MockDBusAPILinkUnitFilesCall{Call: call}
}

// MockDBusAPILinkUnitFilesCall wrap *gomock.Call
type MockDBusAPILinkUnitFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPILinkUnitFilesCall) Return(arg0 []dbus.LinkUnitFileChange, arg1 error) *MockDBusAPILinkUnitFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPILinkUnitFilesCall) Do(f func([]string, bool, bool) ([]dbus.LinkUnitFileChange, error)) *MockDBusAPILinkUnitFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPILinkUnitFilesCall) DoAndReturn(f func([]string, bool, bool) ([]dbus.LinkUnitFileChange, error)) *MockDBusAPILinkUnitFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUnits mocks base method.
func (m *MockDBusAPI) ListUnits() ([]dbus.UnitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnits")
	ret0, _ := ret[0].([]dbus.UnitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnits indicates an expected call of ListUnits.
func (mr *MockDBusAPIMockRecorder) ListUnits() *MockDBusAPIListUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnits", reflect.TypeOf((*MockDBusAPI)(nil).ListUnits))
	return &MockDBusAPIListUnitsCall{Call: call}
}

// MockDBusAPIListUnitsCall wrap *gomock.Call
type MockDBusAPIListUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIListUnitsCall) Return(arg0 []dbus.UnitStatus, arg1 error) *MockDBusAPIListUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIListUnitsCall) Do(f func() ([]dbus.UnitStatus, error)) *MockDBusAPIListUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIListUnitsCall) DoAndReturn(f func() ([]dbus.UnitStatus, error)) *MockDBusAPIListUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reload mocks base method.
func (m *MockDBusAPI) Reload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockDBusAPIMockRecorder) Reload() *MockDBusAPIReloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockDBusAPI)(nil).Reload))
	return &MockDBusAPIReloadCall{Call: call}
}

// MockDBusAPIReloadCall wrap *gomock.Call
type MockDBusAPIReloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIReloadCall) Return(arg0 error) *MockDBusAPIReloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIReloadCall) Do(f func() error) *MockDBusAPIReloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIReloadCall) DoAndReturn(f func() error) *MockDBusAPIReloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartUnit mocks base method.
func (m *MockDBusAPI) StartUnit(arg0, arg1 string, arg2 chan<- string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartUnit indicates an expected call of StartUnit.
func (mr *MockDBusAPIMockRecorder) StartUnit(arg0, arg1, arg2 any) *MockDBusAPIStartUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUnit", reflect.TypeOf((*MockDBusAPI)(nil).StartUnit), arg0, arg1, arg2)
	return &MockDBusAPIStartUnitCall{Call: call}
}

// MockDBusAPIStartUnitCall wrap *gomock.Call
type MockDBusAPIStartUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIStartUnitCall) Return(arg0 int, arg1 error) *MockDBusAPIStartUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIStartUnitCall) Do(f func(string, string, chan<- string) (int, error)) *MockDBusAPIStartUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIStartUnitCall) DoAndReturn(f func(string, string, chan<- string) (int, error)) *MockDBusAPIStartUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopUnit mocks base method.
func (m *MockDBusAPI) StopUnit(arg0, arg1 string, arg2 chan<- string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopUnit indicates an expected call of StopUnit.
func (mr *MockDBusAPIMockRecorder) StopUnit(arg0, arg1, arg2 any) *MockDBusAPIStopUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopUnit", reflect.TypeOf((*MockDBusAPI)(nil).StopUnit), arg0, arg1, arg2)
	return &MockDBusAPIStopUnitCall{Call: call}
}

// MockDBusAPIStopUnitCall wrap *gomock.Call
type MockDBusAPIStopUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBusAPIStopUnitCall) Return(arg0 int, arg1 error) *MockDBusAPIStopUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBusAPIStopUnitCall) Do(f func(string, string, chan<- string) (int, error)) *MockDBusAPIStopUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBusAPIStopUnitCall) DoAndReturn(f func(string, string, chan<- string) (int, error)) *MockDBusAPIStopUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFileSystemOps is a mock of FileSystemOps interface.
type MockFileSystemOps struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemOpsMockRecorder
}

// MockFileSystemOpsMockRecorder is the mock recorder for MockFileSystemOps.
type MockFileSystemOpsMockRecorder struct {
	mock *MockFileSystemOps
}

// NewMockFileSystemOps creates a new mock instance.
func NewMockFileSystemOps(ctrl *gomock.Controller) *MockFileSystemOps {
	mock := &MockFileSystemOps{ctrl: ctrl}
	mock.recorder = &MockFileSystemOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemOps) EXPECT() *MockFileSystemOpsMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFileSystemOps) ISGOMOCK() struct{} {
	return struct{}{}
}

// Remove mocks base method.
func (m *MockFileSystemOps) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileSystemOpsMockRecorder) Remove(arg0 any) *MockFileSystemOpsRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileSystemOps)(nil).Remove), arg0)
	return &MockFileSystemOpsRemoveCall{Call: call}
}

// MockFileSystemOpsRemoveCall wrap *gomock.Call
type MockFileSystemOpsRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemOpsRemoveCall) Return(arg0 error) *MockFileSystemOpsRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemOpsRemoveCall) Do(f func(string) error) *MockFileSystemOpsRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemOpsRemoveCall) DoAndReturn(f func(string) error) *MockFileSystemOpsRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAll mocks base method.
func (m *MockFileSystemOps) RemoveAll(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileSystemOpsMockRecorder) RemoveAll(arg0 any) *MockFileSystemOpsRemoveAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileSystemOps)(nil).RemoveAll), arg0)
	return &MockFileSystemOpsRemoveAllCall{Call: call}
}

// MockFileSystemOpsRemoveAllCall wrap *gomock.Call
type MockFileSystemOpsRemoveAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemOpsRemoveAllCall) Return(arg0 error) *MockFileSystemOpsRemoveAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemOpsRemoveAllCall) Do(f func(string) error) *MockFileSystemOpsRemoveAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemOpsRemoveAllCall) DoAndReturn(f func(string) error) *MockFileSystemOpsRemoveAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteFile mocks base method.
func (m *MockFileSystemOps) WriteFile(arg0 string, arg1 []byte, arg2 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileSystemOpsMockRecorder) WriteFile(arg0, arg1, arg2 any) *MockFileSystemOpsWriteFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileSystemOps)(nil).WriteFile), arg0, arg1, arg2)
	return &MockFileSystemOpsWriteFileCall{Call: call}
}

// MockFileSystemOpsWriteFileCall wrap *gomock.Call
type MockFileSystemOpsWriteFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemOpsWriteFileCall) Return(arg0 error) *MockFileSystemOpsWriteFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemOpsWriteFileCall) Do(f func(string, []byte, fs.FileMode) error) *MockFileSystemOpsWriteFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemOpsWriteFileCall) DoAndReturn(f func(string, []byte, fs.FileMode) error) *MockFileSystemOpsWriteFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
