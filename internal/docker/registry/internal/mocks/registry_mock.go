// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/docker/registry/internal (interfaces: Initializer)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/registry_mock.go github.com/juju/juju/internal/docker/registry/internal Initializer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	internal "github.com/juju/juju/internal/docker/registry/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockInitializer is a mock of Initializer interface.
type MockInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockInitializerMockRecorder
}

// MockInitializerMockRecorder is the mock recorder for MockInitializer.
type MockInitializerMockRecorder struct {
	mock *MockInitializer
}

// NewMockInitializer creates a new mock instance.
func NewMockInitializer(ctrl *gomock.Controller) *MockInitializer {
	mock := &MockInitializer{ctrl: ctrl}
	mock.recorder = &MockInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitializer) EXPECT() *MockInitializerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInitializer) ISGOMOCK() struct{} {
	return struct{}{}
}

// DecideBaseURL mocks base method.
func (m *MockInitializer) DecideBaseURL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecideBaseURL")
	ret0, _ := ret[0].(error)
	return ret0
}

// DecideBaseURL indicates an expected call of DecideBaseURL.
func (mr *MockInitializerMockRecorder) DecideBaseURL() *MockInitializerDecideBaseURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecideBaseURL", reflect.TypeOf((*MockInitializer)(nil).DecideBaseURL))
	return &MockInitializerDecideBaseURLCall{Call: call}
}

// MockInitializerDecideBaseURLCall wrap *gomock.Call
type MockInitializerDecideBaseURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInitializerDecideBaseURLCall) Return(arg0 error) *MockInitializerDecideBaseURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInitializerDecideBaseURLCall) Do(f func() error) *MockInitializerDecideBaseURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInitializerDecideBaseURLCall) DoAndReturn(f func() error) *MockInitializerDecideBaseURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WrapTransport mocks base method.
func (m *MockInitializer) WrapTransport(arg0 ...internal.TransportWrapper) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WrapTransport", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WrapTransport indicates an expected call of WrapTransport.
func (mr *MockInitializerMockRecorder) WrapTransport(arg0 ...any) *MockInitializerWrapTransportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapTransport", reflect.TypeOf((*MockInitializer)(nil).WrapTransport), arg0...)
	return &MockInitializerWrapTransportCall{Call: call}
}

// MockInitializerWrapTransportCall wrap *gomock.Call
type MockInitializerWrapTransportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInitializerWrapTransportCall) Return(arg0 error) *MockInitializerWrapTransportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInitializerWrapTransportCall) Do(f func(...internal.TransportWrapper) error) *MockInitializerWrapTransportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInitializerWrapTransportCall) DoAndReturn(f func(...internal.TransportWrapper) error) *MockInitializerWrapTransportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
