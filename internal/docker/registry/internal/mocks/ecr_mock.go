// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/docker/registry/internal (interfaces: ECRInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/ecr_mock.go github.com/juju/juju/internal/docker/registry/internal ECRInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ecr "github.com/aws/aws-sdk-go-v2/service/ecr"
	gomock "go.uber.org/mock/gomock"
)

// MockECRInterface is a mock of ECRInterface interface.
type MockECRInterface struct {
	ctrl     *gomock.Controller
	recorder *MockECRInterfaceMockRecorder
}

// MockECRInterfaceMockRecorder is the mock recorder for MockECRInterface.
type MockECRInterfaceMockRecorder struct {
	mock *MockECRInterface
}

// NewMockECRInterface creates a new mock instance.
func NewMockECRInterface(ctrl *gomock.Controller) *MockECRInterface {
	mock := &MockECRInterface{ctrl: ctrl}
	mock.recorder = &MockECRInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRInterface) EXPECT() *MockECRInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockECRInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetAuthorizationToken mocks base method.
func (m *MockECRInterface) GetAuthorizationToken(arg0 context.Context, arg1 *ecr.GetAuthorizationTokenInput, arg2 ...func(*ecr.Options)) (*ecr.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizationToken", varargs...)
	ret0, _ := ret[0].(*ecr.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationToken indicates an expected call of GetAuthorizationToken.
func (mr *MockECRInterfaceMockRecorder) GetAuthorizationToken(arg0, arg1 any, arg2 ...any) *MockECRInterfaceGetAuthorizationTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationToken", reflect.TypeOf((*MockECRInterface)(nil).GetAuthorizationToken), varargs...)
	return &MockECRInterfaceGetAuthorizationTokenCall{Call: call}
}

// MockECRInterfaceGetAuthorizationTokenCall wrap *gomock.Call
type MockECRInterfaceGetAuthorizationTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockECRInterfaceGetAuthorizationTokenCall) Return(arg0 *ecr.GetAuthorizationTokenOutput, arg1 error) *MockECRInterfaceGetAuthorizationTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockECRInterfaceGetAuthorizationTokenCall) Do(f func(context.Context, *ecr.GetAuthorizationTokenInput, ...func(*ecr.Options)) (*ecr.GetAuthorizationTokenOutput, error)) *MockECRInterfaceGetAuthorizationTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockECRInterfaceGetAuthorizationTokenCall) DoAndReturn(f func(context.Context, *ecr.GetAuthorizationTokenInput, ...func(*ecr.Options)) (*ecr.GetAuthorizationTokenOutput, error)) *MockECRInterfaceGetAuthorizationTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
