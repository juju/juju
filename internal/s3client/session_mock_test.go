// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/s3client (interfaces: Session)
//
// Generated by this command:
//
//	mockgen -typed -package s3client -destination session_mock_test.go github.com/juju/juju/internal/s3client Session
//

// Package s3client is a generated GoMock package.
package s3client

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockSession) GetObject(arg0 context.Context, arg1, arg2 string) (io.ReadCloser, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetObject indicates an expected call of GetObject.
func (mr *MockSessionMockRecorder) GetObject(arg0, arg1, arg2 any) *MockSessionGetObjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockSession)(nil).GetObject), arg0, arg1, arg2)
	return &MockSessionGetObjectCall{Call: call}
}

// MockSessionGetObjectCall wrap *gomock.Call
type MockSessionGetObjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionGetObjectCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 string, arg3 error) *MockSessionGetObjectCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionGetObjectCall) Do(f func(context.Context, string, string) (io.ReadCloser, int64, string, error)) *MockSessionGetObjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionGetObjectCall) DoAndReturn(f func(context.Context, string, string) (io.ReadCloser, int64, string, error)) *MockSessionGetObjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
