// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lxc/lxd/client (interfaces: Operation,RemoteOperation,Server,ImageServer,InstanceServer)

package testing

import (
	context "context"
	io "io"
	net "net"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	lxd "github.com/lxc/lxd/client"
	api "github.com/lxc/lxd/shared/api"
	sftp "github.com/pkg/sftp"
)

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockOperation) AddHandler(arg0 func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", arg0)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockOperationMockRecorder) AddHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockOperation)(nil).AddHandler), arg0)
}

// Cancel mocks base method.
func (m *MockOperation) Cancel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockOperationMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOperation)(nil).Cancel))
}

// Get mocks base method.
func (m *MockOperation) Get() api.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(api.Operation)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockOperationMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperation)(nil).Get))
}

// GetWebsocket mocks base method.
func (m *MockOperation) GetWebsocket(arg0 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebsocket", arg0)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebsocket indicates an expected call of GetWebsocket.
func (mr *MockOperationMockRecorder) GetWebsocket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebsocket", reflect.TypeOf((*MockOperation)(nil).GetWebsocket), arg0)
}

// Refresh mocks base method.
func (m *MockOperation) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockOperationMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockOperation)(nil).Refresh))
}

// RemoveHandler mocks base method.
func (m *MockOperation) RemoveHandler(arg0 *lxd.EventTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockOperationMockRecorder) RemoveHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockOperation)(nil).RemoveHandler), arg0)
}

// Wait mocks base method.
func (m *MockOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockOperationMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockOperation)(nil).Wait))
}

// WaitContext mocks base method.
func (m *MockOperation) WaitContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitContext indicates an expected call of WaitContext.
func (mr *MockOperationMockRecorder) WaitContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitContext", reflect.TypeOf((*MockOperation)(nil).WaitContext), arg0)
}

// MockRemoteOperation is a mock of RemoteOperation interface.
type MockRemoteOperation struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteOperationMockRecorder
}

// MockRemoteOperationMockRecorder is the mock recorder for MockRemoteOperation.
type MockRemoteOperationMockRecorder struct {
	mock *MockRemoteOperation
}

// NewMockRemoteOperation creates a new mock instance.
func NewMockRemoteOperation(ctrl *gomock.Controller) *MockRemoteOperation {
	mock := &MockRemoteOperation{ctrl: ctrl}
	mock.recorder = &MockRemoteOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteOperation) EXPECT() *MockRemoteOperationMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockRemoteOperation) AddHandler(arg0 func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", arg0)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockRemoteOperationMockRecorder) AddHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockRemoteOperation)(nil).AddHandler), arg0)
}

// CancelTarget mocks base method.
func (m *MockRemoteOperation) CancelTarget() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTarget")
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTarget indicates an expected call of CancelTarget.
func (mr *MockRemoteOperationMockRecorder) CancelTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTarget", reflect.TypeOf((*MockRemoteOperation)(nil).CancelTarget))
}

// GetTarget mocks base method.
func (m *MockRemoteOperation) GetTarget() (*api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTarget")
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTarget indicates an expected call of GetTarget.
func (mr *MockRemoteOperationMockRecorder) GetTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTarget", reflect.TypeOf((*MockRemoteOperation)(nil).GetTarget))
}

// Wait mocks base method.
func (m *MockRemoteOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRemoteOperationMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRemoteOperation)(nil).Wait))
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockServer)(nil).Disconnect))
}

// DoHTTP mocks base method.
func (m *MockServer) DoHTTP(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockServerMockRecorder) DoHTTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockServer)(nil).DoHTTP), arg0)
}

// GetConnectionInfo mocks base method.
func (m *MockServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockServer)(nil).GetConnectionInfo))
}

// GetHTTPClient mocks base method.
func (m *MockServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockServer)(nil).GetHTTPClient))
}

// MockImageServer is a mock of ImageServer interface.
type MockImageServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServerMockRecorder
}

// MockImageServerMockRecorder is the mock recorder for MockImageServer.
type MockImageServerMockRecorder struct {
	mock *MockImageServer
}

// NewMockImageServer creates a new mock instance.
func NewMockImageServer(ctrl *gomock.Controller) *MockImageServer {
	mock := &MockImageServer{ctrl: ctrl}
	mock.recorder = &MockImageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServer) EXPECT() *MockImageServerMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockImageServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockImageServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockImageServer)(nil).Disconnect))
}

// DoHTTP mocks base method.
func (m *MockImageServer) DoHTTP(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockImageServerMockRecorder) DoHTTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockImageServer)(nil).DoHTTP), arg0)
}

// ExportImage mocks base method.
func (m *MockImageServer) ExportImage(arg0 string, arg1 api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage.
func (mr *MockImageServerMockRecorder) ExportImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockImageServer)(nil).ExportImage), arg0, arg1)
}

// GetConnectionInfo mocks base method.
func (m *MockImageServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockImageServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockImageServer)(nil).GetConnectionInfo))
}

// GetHTTPClient mocks base method.
func (m *MockImageServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockImageServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockImageServer)(nil).GetHTTPClient))
}

// GetImage mocks base method.
func (m *MockImageServer) GetImage(arg0 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageServerMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageServer)(nil).GetImage), arg0)
}

// GetImageAlias mocks base method.
func (m *MockImageServer) GetImageAlias(arg0 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", arg0)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias.
func (mr *MockImageServerMockRecorder) GetImageAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockImageServer)(nil).GetImageAlias), arg0)
}

// GetImageAliasArchitectures mocks base method.
func (m *MockImageServer) GetImageAliasArchitectures(arg0, arg1 string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", arg0, arg1)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures.
func (mr *MockImageServerMockRecorder) GetImageAliasArchitectures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasArchitectures), arg0, arg1)
}

// GetImageAliasNames mocks base method.
func (m *MockImageServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames.
func (mr *MockImageServerMockRecorder) GetImageAliasNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasNames))
}

// GetImageAliasType mocks base method.
func (m *MockImageServer) GetImageAliasType(arg0, arg1 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", arg0, arg1)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType.
func (mr *MockImageServerMockRecorder) GetImageAliasType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasType), arg0, arg1)
}

// GetImageAliases mocks base method.
func (m *MockImageServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases.
func (mr *MockImageServerMockRecorder) GetImageAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockImageServer)(nil).GetImageAliases))
}

// GetImageFile mocks base method.
func (m *MockImageServer) GetImageFile(arg0 string, arg1 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", arg0, arg1)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile.
func (mr *MockImageServerMockRecorder) GetImageFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockImageServer)(nil).GetImageFile), arg0, arg1)
}

// GetImageFingerprints mocks base method.
func (m *MockImageServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints.
func (mr *MockImageServerMockRecorder) GetImageFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockImageServer)(nil).GetImageFingerprints))
}

// GetImageSecret mocks base method.
func (m *MockImageServer) GetImageSecret(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret.
func (mr *MockImageServerMockRecorder) GetImageSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockImageServer)(nil).GetImageSecret), arg0)
}

// GetImages mocks base method.
func (m *MockImageServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockImageServerMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockImageServer)(nil).GetImages))
}

// GetImagesWithFilter mocks base method.
func (m *MockImageServer) GetImagesWithFilter(arg0 []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesWithFilter", arg0)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesWithFilter indicates an expected call of GetImagesWithFilter.
func (mr *MockImageServerMockRecorder) GetImagesWithFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesWithFilter", reflect.TypeOf((*MockImageServer)(nil).GetImagesWithFilter), arg0)
}

// GetPrivateImage mocks base method.
func (m *MockImageServer) GetPrivateImage(arg0, arg1 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage.
func (mr *MockImageServerMockRecorder) GetPrivateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImage), arg0, arg1)
}

// GetPrivateImageFile mocks base method.
func (m *MockImageServer) GetPrivateImageFile(arg0, arg1 string, arg2 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile.
func (mr *MockImageServerMockRecorder) GetPrivateImageFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImageFile), arg0, arg1, arg2)
}

// MockInstanceServer is a mock of InstanceServer interface.
type MockInstanceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServerMockRecorder
}

// MockInstanceServerMockRecorder is the mock recorder for MockInstanceServer.
type MockInstanceServerMockRecorder struct {
	mock *MockInstanceServer
}

// NewMockInstanceServer creates a new mock instance.
func NewMockInstanceServer(ctrl *gomock.Controller) *MockInstanceServer {
	mock := &MockInstanceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceServer) EXPECT() *MockInstanceServerMockRecorder {
	return m.recorder
}

// ConsoleContainer mocks base method.
func (m *MockInstanceServer) ConsoleContainer(arg0 string, arg1 api.ContainerConsolePost, arg2 *lxd.ContainerConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleContainer indicates an expected call of ConsoleContainer.
func (mr *MockInstanceServerMockRecorder) ConsoleContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleContainer", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleContainer), arg0, arg1, arg2)
}

// ConsoleInstance mocks base method.
func (m *MockInstanceServer) ConsoleInstance(arg0 string, arg1 api.InstanceConsolePost, arg2 *lxd.InstanceConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleInstance indicates an expected call of ConsoleInstance.
func (mr *MockInstanceServerMockRecorder) ConsoleInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstance", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstance), arg0, arg1, arg2)
}

// ConsoleInstanceDynamic mocks base method.
func (m *MockInstanceServer) ConsoleInstanceDynamic(arg0 string, arg1 api.InstanceConsolePost, arg2 *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstanceDynamic", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(func(io.ReadWriteCloser) error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConsoleInstanceDynamic indicates an expected call of ConsoleInstanceDynamic.
func (mr *MockInstanceServerMockRecorder) ConsoleInstanceDynamic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstanceDynamic", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstanceDynamic), arg0, arg1, arg2)
}

// CopyContainer mocks base method.
func (m *MockInstanceServer) CopyContainer(arg0 lxd.InstanceServer, arg1 api.Container, arg2 *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainer indicates an expected call of CopyContainer.
func (mr *MockInstanceServerMockRecorder) CopyContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainer", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainer), arg0, arg1, arg2)
}

// CopyContainerSnapshot mocks base method.
func (m *MockInstanceServer) CopyContainerSnapshot(arg0 lxd.InstanceServer, arg1 string, arg2 api.ContainerSnapshot, arg3 *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainerSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainerSnapshot indicates an expected call of CopyContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) CopyContainerSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainerSnapshot), arg0, arg1, arg2, arg3)
}

// CopyImage mocks base method.
func (m *MockInstanceServer) CopyImage(arg0 lxd.ImageServer, arg1 api.Image, arg2 *lxd.ImageCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImage indicates an expected call of CopyImage.
func (mr *MockInstanceServerMockRecorder) CopyImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImage", reflect.TypeOf((*MockInstanceServer)(nil).CopyImage), arg0, arg1, arg2)
}

// CopyInstance mocks base method.
func (m *MockInstanceServer) CopyInstance(arg0 lxd.InstanceServer, arg1 api.Instance, arg2 *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstance indicates an expected call of CopyInstance.
func (mr *MockInstanceServerMockRecorder) CopyInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstance", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstance), arg0, arg1, arg2)
}

// CopyInstanceSnapshot mocks base method.
func (m *MockInstanceServer) CopyInstanceSnapshot(arg0 lxd.InstanceServer, arg1 string, arg2 api.InstanceSnapshot, arg3 *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstanceSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstanceSnapshot indicates an expected call of CopyInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) CopyInstanceSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstanceSnapshot), arg0, arg1, arg2, arg3)
}

// CopyStoragePoolVolume mocks base method.
func (m *MockInstanceServer) CopyStoragePoolVolume(arg0 string, arg1 lxd.InstanceServer, arg2 string, arg3 api.StorageVolume, arg4 *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyStoragePoolVolume indicates an expected call of CopyStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) CopyStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CopyStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
}

// CreateCertificate mocks base method.
func (m *MockInstanceServer) CreateCertificate(arg0 api.CertificatesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockInstanceServerMockRecorder) CreateCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificate), arg0)
}

// CreateCertificateToken mocks base method.
func (m *MockInstanceServer) CreateCertificateToken(arg0 api.CertificatesPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateToken", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateToken indicates an expected call of CreateCertificateToken.
func (mr *MockInstanceServerMockRecorder) CreateCertificateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateToken", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificateToken), arg0)
}

// CreateClusterGroup mocks base method.
func (m *MockInstanceServer) CreateClusterGroup(arg0 api.ClusterGroupsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterGroup indicates an expected call of CreateClusterGroup.
func (mr *MockInstanceServerMockRecorder) CreateClusterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).CreateClusterGroup), arg0)
}

// CreateClusterMember mocks base method.
func (m *MockInstanceServer) CreateClusterMember(arg0 api.ClusterMembersPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterMember", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterMember indicates an expected call of CreateClusterMember.
func (mr *MockInstanceServerMockRecorder) CreateClusterMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).CreateClusterMember), arg0)
}

// CreateContainer mocks base method.
func (m *MockInstanceServer) CreateContainer(arg0 api.ContainersPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockInstanceServerMockRecorder) CreateContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainer), arg0)
}

// CreateContainerBackup mocks base method.
func (m *MockInstanceServer) CreateContainerBackup(arg0 string, arg1 api.ContainerBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerBackup indicates an expected call of CreateContainerBackup.
func (mr *MockInstanceServerMockRecorder) CreateContainerBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerBackup), arg0, arg1)
}

// CreateContainerFile mocks base method.
func (m *MockInstanceServer) CreateContainerFile(arg0, arg1 string, arg2 lxd.ContainerFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerFile indicates an expected call of CreateContainerFile.
func (mr *MockInstanceServerMockRecorder) CreateContainerFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFile), arg0, arg1, arg2)
}

// CreateContainerFromBackup mocks base method.
func (m *MockInstanceServer) CreateContainerFromBackup(arg0 lxd.ContainerBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromBackup", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromBackup indicates an expected call of CreateContainerFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateContainerFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromBackup), arg0)
}

// CreateContainerFromImage mocks base method.
func (m *MockInstanceServer) CreateContainerFromImage(arg0 lxd.ImageServer, arg1 api.Image, arg2 api.ContainersPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromImage indicates an expected call of CreateContainerFromImage.
func (mr *MockInstanceServerMockRecorder) CreateContainerFromImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromImage), arg0, arg1, arg2)
}

// CreateContainerSnapshot mocks base method.
func (m *MockInstanceServer) CreateContainerSnapshot(arg0 string, arg1 api.ContainerSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerSnapshot indicates an expected call of CreateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateContainerSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerSnapshot), arg0, arg1)
}

// CreateContainerTemplateFile mocks base method.
func (m *MockInstanceServer) CreateContainerTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerTemplateFile indicates an expected call of CreateContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) CreateContainerTemplateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerTemplateFile), arg0, arg1, arg2)
}

// CreateImage mocks base method.
func (m *MockInstanceServer) CreateImage(arg0 api.ImagesPost, arg1 *lxd.ImageCreateArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockInstanceServerMockRecorder) CreateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateImage), arg0, arg1)
}

// CreateImageAlias mocks base method.
func (m *MockInstanceServer) CreateImageAlias(arg0 api.ImageAliasesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlias", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlias indicates an expected call of CreateImageAlias.
func (mr *MockInstanceServerMockRecorder) CreateImageAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageAlias), arg0)
}

// CreateImageSecret mocks base method.
func (m *MockInstanceServer) CreateImageSecret(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageSecret", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageSecret indicates an expected call of CreateImageSecret.
func (mr *MockInstanceServerMockRecorder) CreateImageSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageSecret), arg0)
}

// CreateInstance mocks base method.
func (m *MockInstanceServer) CreateInstance(arg0 api.InstancesPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockInstanceServerMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstance), arg0)
}

// CreateInstanceBackup mocks base method.
func (m *MockInstanceServer) CreateInstanceBackup(arg0 string, arg1 api.InstanceBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceBackup indicates an expected call of CreateInstanceBackup.
func (mr *MockInstanceServerMockRecorder) CreateInstanceBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceBackup), arg0, arg1)
}

// CreateInstanceFile mocks base method.
func (m *MockInstanceServer) CreateInstanceFile(arg0, arg1 string, arg2 lxd.InstanceFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceFile indicates an expected call of CreateInstanceFile.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFile), arg0, arg1, arg2)
}

// CreateInstanceFromBackup mocks base method.
func (m *MockInstanceServer) CreateInstanceFromBackup(arg0 lxd.InstanceBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromBackup", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromBackup indicates an expected call of CreateInstanceFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromBackup), arg0)
}

// CreateInstanceFromImage mocks base method.
func (m *MockInstanceServer) CreateInstanceFromImage(arg0 lxd.ImageServer, arg1 api.Image, arg2 api.InstancesPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromImage indicates an expected call of CreateInstanceFromImage.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromImage), arg0, arg1, arg2)
}

// CreateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) CreateInstanceSnapshot(arg0 string, arg1 api.InstanceSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceSnapshot indicates an expected call of CreateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateInstanceSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceSnapshot), arg0, arg1)
}

// CreateInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) CreateInstanceTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceTemplateFile indicates an expected call of CreateInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) CreateInstanceTemplateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceTemplateFile), arg0, arg1, arg2)
}

// CreateNetwork mocks base method.
func (m *MockInstanceServer) CreateNetwork(arg0 api.NetworksPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockInstanceServerMockRecorder) CreateNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetwork), arg0)
}

// CreateNetworkACL mocks base method.
func (m *MockInstanceServer) CreateNetworkACL(arg0 api.NetworkACLsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkACL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkACL indicates an expected call of CreateNetworkACL.
func (mr *MockInstanceServerMockRecorder) CreateNetworkACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkACL), arg0)
}

// CreateNetworkForward mocks base method.
func (m *MockInstanceServer) CreateNetworkForward(arg0 string, arg1 api.NetworkForwardsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkForward", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkForward indicates an expected call of CreateNetworkForward.
func (mr *MockInstanceServerMockRecorder) CreateNetworkForward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkForward), arg0, arg1)
}

// CreateNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) CreateNetworkLoadBalancer(arg0 string, arg1 api.NetworkLoadBalancersPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkLoadBalancer indicates an expected call of CreateNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) CreateNetworkLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkLoadBalancer), arg0, arg1)
}

// CreateNetworkPeer mocks base method.
func (m *MockInstanceServer) CreateNetworkPeer(arg0 string, arg1 api.NetworkPeersPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkPeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkPeer indicates an expected call of CreateNetworkPeer.
func (mr *MockInstanceServerMockRecorder) CreateNetworkPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkPeer), arg0, arg1)
}

// CreateNetworkZone mocks base method.
func (m *MockInstanceServer) CreateNetworkZone(arg0 api.NetworkZonesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkZone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkZone indicates an expected call of CreateNetworkZone.
func (mr *MockInstanceServerMockRecorder) CreateNetworkZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkZone), arg0)
}

// CreateNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) CreateNetworkZoneRecord(arg0 string, arg1 api.NetworkZoneRecordsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkZoneRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkZoneRecord indicates an expected call of CreateNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) CreateNetworkZoneRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkZoneRecord), arg0, arg1)
}

// CreateProfile mocks base method.
func (m *MockInstanceServer) CreateProfile(arg0 api.ProfilesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockInstanceServerMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockInstanceServer)(nil).CreateProfile), arg0)
}

// CreateProject mocks base method.
func (m *MockInstanceServer) CreateProject(arg0 api.ProjectsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockInstanceServerMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockInstanceServer)(nil).CreateProject), arg0)
}

// CreateStoragePool mocks base method.
func (m *MockInstanceServer) CreateStoragePool(arg0 api.StoragePoolsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockInstanceServerMockRecorder) CreateStoragePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePool), arg0)
}

// CreateStoragePoolBucket mocks base method.
func (m *MockInstanceServer) CreateStoragePoolBucket(arg0 string, arg1 api.StorageBucketsPost) (*api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolBucket", arg0, arg1)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolBucket indicates an expected call of CreateStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolBucket), arg0, arg1)
}

// CreateStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) CreateStoragePoolBucketKey(arg0, arg1 string, arg2 api.StorageBucketKeysPost) (*api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolBucketKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolBucketKey indicates an expected call of CreateStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolBucketKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolBucketKey), arg0, arg1, arg2)
}

// CreateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolume(arg0 string, arg1 api.StorageVolumesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePoolVolume indicates an expected call of CreateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolume), arg0, arg1)
}

// CreateStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeBackup(arg0, arg1 string, arg2 api.StoragePoolVolumeBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeBackup indicates an expected call of CreateStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeBackup), arg0, arg1, arg2)
}

// CreateStoragePoolVolumeFromBackup mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeFromBackup(arg0 string, arg1 lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeFromBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeFromBackup indicates an expected call of CreateStoragePoolVolumeFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeFromBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeFromBackup), arg0, arg1)
}

// CreateStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeSnapshot(arg0, arg1, arg2 string, arg3 api.StorageVolumeSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeSnapshot indicates an expected call of CreateStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
}

// DeleteCertificate mocks base method.
func (m *MockInstanceServer) DeleteCertificate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockInstanceServerMockRecorder) DeleteCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockInstanceServer)(nil).DeleteCertificate), arg0)
}

// DeleteClusterGroup mocks base method.
func (m *MockInstanceServer) DeleteClusterGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterGroup indicates an expected call of DeleteClusterGroup.
func (mr *MockInstanceServerMockRecorder) DeleteClusterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterGroup), arg0)
}

// DeleteClusterMember mocks base method.
func (m *MockInstanceServer) DeleteClusterMember(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterMember indicates an expected call of DeleteClusterMember.
func (mr *MockInstanceServerMockRecorder) DeleteClusterMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterMember), arg0, arg1)
}

// DeleteContainer mocks base method.
func (m *MockInstanceServer) DeleteContainer(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockInstanceServerMockRecorder) DeleteContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainer), arg0)
}

// DeleteContainerBackup mocks base method.
func (m *MockInstanceServer) DeleteContainerBackup(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerBackup indicates an expected call of DeleteContainerBackup.
func (mr *MockInstanceServerMockRecorder) DeleteContainerBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerBackup), arg0, arg1)
}

// DeleteContainerConsoleLog mocks base method.
func (m *MockInstanceServer) DeleteContainerConsoleLog(arg0 string, arg1 *lxd.ContainerConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerConsoleLog indicates an expected call of DeleteContainerConsoleLog.
func (mr *MockInstanceServerMockRecorder) DeleteContainerConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerConsoleLog), arg0, arg1)
}

// DeleteContainerFile mocks base method.
func (m *MockInstanceServer) DeleteContainerFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerFile indicates an expected call of DeleteContainerFile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerFile), arg0, arg1)
}

// DeleteContainerLogfile mocks base method.
func (m *MockInstanceServer) DeleteContainerLogfile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerLogfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerLogfile indicates an expected call of DeleteContainerLogfile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerLogfile), arg0, arg1)
}

// DeleteContainerSnapshot mocks base method.
func (m *MockInstanceServer) DeleteContainerSnapshot(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerSnapshot indicates an expected call of DeleteContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteContainerSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerSnapshot), arg0, arg1)
}

// DeleteContainerTemplateFile mocks base method.
func (m *MockInstanceServer) DeleteContainerTemplateFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerTemplateFile indicates an expected call of DeleteContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerTemplateFile), arg0, arg1)
}

// DeleteImage mocks base method.
func (m *MockInstanceServer) DeleteImage(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockInstanceServerMockRecorder) DeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImage), arg0)
}

// DeleteImageAlias mocks base method.
func (m *MockInstanceServer) DeleteImageAlias(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageAlias", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageAlias indicates an expected call of DeleteImageAlias.
func (mr *MockInstanceServerMockRecorder) DeleteImageAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImageAlias), arg0)
}

// DeleteInstance mocks base method.
func (m *MockInstanceServer) DeleteInstance(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockInstanceServerMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstance), arg0)
}

// DeleteInstanceBackup mocks base method.
func (m *MockInstanceServer) DeleteInstanceBackup(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceBackup indicates an expected call of DeleteInstanceBackup.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceBackup), arg0, arg1)
}

// DeleteInstanceConsoleLog mocks base method.
func (m *MockInstanceServer) DeleteInstanceConsoleLog(arg0 string, arg1 *lxd.InstanceConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceConsoleLog indicates an expected call of DeleteInstanceConsoleLog.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceConsoleLog), arg0, arg1)
}

// DeleteInstanceFile mocks base method.
func (m *MockInstanceServer) DeleteInstanceFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceFile indicates an expected call of DeleteInstanceFile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceFile), arg0, arg1)
}

// DeleteInstanceLogfile mocks base method.
func (m *MockInstanceServer) DeleteInstanceLogfile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceLogfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceLogfile indicates an expected call of DeleteInstanceLogfile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceLogfile), arg0, arg1)
}

// DeleteInstanceSnapshot mocks base method.
func (m *MockInstanceServer) DeleteInstanceSnapshot(arg0, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSnapshot indicates an expected call of DeleteInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceSnapshot), arg0, arg1)
}

// DeleteInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) DeleteInstanceTemplateFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceTemplateFile indicates an expected call of DeleteInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceTemplateFile), arg0, arg1)
}

// DeleteNetwork mocks base method.
func (m *MockInstanceServer) DeleteNetwork(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockInstanceServerMockRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetwork), arg0)
}

// DeleteNetworkACL mocks base method.
func (m *MockInstanceServer) DeleteNetworkACL(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkACL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkACL indicates an expected call of DeleteNetworkACL.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkACL), arg0)
}

// DeleteNetworkForward mocks base method.
func (m *MockInstanceServer) DeleteNetworkForward(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkForward", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkForward indicates an expected call of DeleteNetworkForward.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkForward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkForward), arg0, arg1)
}

// DeleteNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) DeleteNetworkLoadBalancer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkLoadBalancer indicates an expected call of DeleteNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkLoadBalancer), arg0, arg1)
}

// DeleteNetworkPeer mocks base method.
func (m *MockInstanceServer) DeleteNetworkPeer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkPeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkPeer indicates an expected call of DeleteNetworkPeer.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkPeer), arg0, arg1)
}

// DeleteNetworkZone mocks base method.
func (m *MockInstanceServer) DeleteNetworkZone(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkZone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkZone indicates an expected call of DeleteNetworkZone.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkZone), arg0)
}

// DeleteNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) DeleteNetworkZoneRecord(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkZoneRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkZoneRecord indicates an expected call of DeleteNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkZoneRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkZoneRecord), arg0, arg1)
}

// DeleteOperation mocks base method.
func (m *MockInstanceServer) DeleteOperation(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation.
func (mr *MockInstanceServerMockRecorder) DeleteOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockInstanceServer)(nil).DeleteOperation), arg0)
}

// DeleteProfile mocks base method.
func (m *MockInstanceServer) DeleteProfile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockInstanceServerMockRecorder) DeleteProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProfile), arg0)
}

// DeleteProject mocks base method.
func (m *MockInstanceServer) DeleteProject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockInstanceServerMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProject), arg0)
}

// DeleteStoragePool mocks base method.
func (m *MockInstanceServer) DeleteStoragePool(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePool), arg0)
}

// DeleteStoragePoolBucket mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolBucket(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolBucket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolBucket indicates an expected call of DeleteStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolBucket), arg0, arg1)
}

// DeleteStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolBucketKey(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolBucketKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolBucketKey indicates an expected call of DeleteStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolBucketKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolBucketKey), arg0, arg1, arg2)
}

// DeleteStoragePoolVolume mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolume(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolVolume indicates an expected call of DeleteStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolume), arg0, arg1, arg2)
}

// DeleteStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolumeBackup(arg0, arg1, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeBackup indicates an expected call of DeleteStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeBackup), arg0, arg1, arg2)
}

// DeleteStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeSnapshot indicates an expected call of DeleteStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
}

// DeleteWarning mocks base method.
func (m *MockInstanceServer) DeleteWarning(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarning indicates an expected call of DeleteWarning.
func (mr *MockInstanceServerMockRecorder) DeleteWarning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarning", reflect.TypeOf((*MockInstanceServer)(nil).DeleteWarning), arg0)
}

// Disconnect mocks base method.
func (m *MockInstanceServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockInstanceServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockInstanceServer)(nil).Disconnect))
}

// DoHTTP mocks base method.
func (m *MockInstanceServer) DoHTTP(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockInstanceServerMockRecorder) DoHTTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockInstanceServer)(nil).DoHTTP), arg0)
}

// ExecContainer mocks base method.
func (m *MockInstanceServer) ExecContainer(arg0 string, arg1 api.ContainerExecPost, arg2 *lxd.ContainerExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContainer indicates an expected call of ExecContainer.
func (mr *MockInstanceServerMockRecorder) ExecContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContainer", reflect.TypeOf((*MockInstanceServer)(nil).ExecContainer), arg0, arg1, arg2)
}

// ExecInstance mocks base method.
func (m *MockInstanceServer) ExecInstance(arg0 string, arg1 api.InstanceExecPost, arg2 *lxd.InstanceExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecInstance indicates an expected call of ExecInstance.
func (mr *MockInstanceServerMockRecorder) ExecInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecInstance", reflect.TypeOf((*MockInstanceServer)(nil).ExecInstance), arg0, arg1, arg2)
}

// ExportImage mocks base method.
func (m *MockInstanceServer) ExportImage(arg0 string, arg1 api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage.
func (mr *MockInstanceServerMockRecorder) ExportImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockInstanceServer)(nil).ExportImage), arg0, arg1)
}

// GetCertificate mocks base method.
func (m *MockInstanceServer) GetCertificate(arg0 string) (*api.Certificate, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", arg0)
	ret0, _ := ret[0].(*api.Certificate)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockInstanceServerMockRecorder) GetCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificate), arg0)
}

// GetCertificateFingerprints mocks base method.
func (m *MockInstanceServer) GetCertificateFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFingerprints indicates an expected call of GetCertificateFingerprints.
func (mr *MockInstanceServerMockRecorder) GetCertificateFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificateFingerprints))
}

// GetCertificates mocks base method.
func (m *MockInstanceServer) GetCertificates() ([]api.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].([]api.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockInstanceServerMockRecorder) GetCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificates))
}

// GetCluster mocks base method.
func (m *MockInstanceServer) GetCluster() (*api.Cluster, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster")
	ret0, _ := ret[0].(*api.Cluster)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInstanceServerMockRecorder) GetCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInstanceServer)(nil).GetCluster))
}

// GetClusterGroup mocks base method.
func (m *MockInstanceServer) GetClusterGroup(arg0 string) (*api.ClusterGroup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroup", arg0)
	ret0, _ := ret[0].(*api.ClusterGroup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterGroup indicates an expected call of GetClusterGroup.
func (mr *MockInstanceServerMockRecorder) GetClusterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroup), arg0)
}

// GetClusterGroupNames mocks base method.
func (m *MockInstanceServer) GetClusterGroupNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroupNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterGroupNames indicates an expected call of GetClusterGroupNames.
func (mr *MockInstanceServerMockRecorder) GetClusterGroupNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroupNames))
}

// GetClusterGroups mocks base method.
func (m *MockInstanceServer) GetClusterGroups() ([]api.ClusterGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroups")
	ret0, _ := ret[0].([]api.ClusterGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterGroups indicates an expected call of GetClusterGroups.
func (mr *MockInstanceServerMockRecorder) GetClusterGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroups", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroups))
}

// GetClusterMember mocks base method.
func (m *MockInstanceServer) GetClusterMember(arg0 string) (*api.ClusterMember, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMember", arg0)
	ret0, _ := ret[0].(*api.ClusterMember)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMember indicates an expected call of GetClusterMember.
func (mr *MockInstanceServerMockRecorder) GetClusterMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMember), arg0)
}

// GetClusterMemberNames mocks base method.
func (m *MockInstanceServer) GetClusterMemberNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMemberNames indicates an expected call of GetClusterMemberNames.
func (mr *MockInstanceServerMockRecorder) GetClusterMemberNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberNames))
}

// GetClusterMemberState mocks base method.
func (m *MockInstanceServer) GetClusterMemberState(arg0 string) (*api.ClusterMemberState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberState", arg0)
	ret0, _ := ret[0].(*api.ClusterMemberState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMemberState indicates an expected call of GetClusterMemberState.
func (mr *MockInstanceServerMockRecorder) GetClusterMemberState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberState", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberState), arg0)
}

// GetClusterMembers mocks base method.
func (m *MockInstanceServer) GetClusterMembers() ([]api.ClusterMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers")
	ret0, _ := ret[0].([]api.ClusterMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers.
func (mr *MockInstanceServerMockRecorder) GetClusterMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMembers))
}

// GetConnectionInfo mocks base method.
func (m *MockInstanceServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockInstanceServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetConnectionInfo))
}

// GetContainer mocks base method.
func (m *MockInstanceServer) GetContainer(arg0 string) (*api.Container, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", arg0)
	ret0, _ := ret[0].(*api.Container)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockInstanceServerMockRecorder) GetContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockInstanceServer)(nil).GetContainer), arg0)
}

// GetContainerBackup mocks base method.
func (m *MockInstanceServer) GetContainerBackup(arg0, arg1 string) (*api.ContainerBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(*api.ContainerBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerBackup indicates an expected call of GetContainerBackup.
func (mr *MockInstanceServerMockRecorder) GetContainerBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackup), arg0, arg1)
}

// GetContainerBackupFile mocks base method.
func (m *MockInstanceServer) GetContainerBackupFile(arg0, arg1 string, arg2 *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupFile indicates an expected call of GetContainerBackupFile.
func (mr *MockInstanceServerMockRecorder) GetContainerBackupFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupFile), arg0, arg1, arg2)
}

// GetContainerBackupNames mocks base method.
func (m *MockInstanceServer) GetContainerBackupNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupNames indicates an expected call of GetContainerBackupNames.
func (mr *MockInstanceServerMockRecorder) GetContainerBackupNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupNames), arg0)
}

// GetContainerBackups mocks base method.
func (m *MockInstanceServer) GetContainerBackups(arg0 string) ([]api.ContainerBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackups", arg0)
	ret0, _ := ret[0].([]api.ContainerBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackups indicates an expected call of GetContainerBackups.
func (mr *MockInstanceServerMockRecorder) GetContainerBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackups), arg0)
}

// GetContainerConsoleLog mocks base method.
func (m *MockInstanceServer) GetContainerConsoleLog(arg0 string, arg1 *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerConsoleLog indicates an expected call of GetContainerConsoleLog.
func (mr *MockInstanceServerMockRecorder) GetContainerConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerConsoleLog), arg0, arg1)
}

// GetContainerFile mocks base method.
func (m *MockInstanceServer) GetContainerFile(arg0, arg1 string) (io.ReadCloser, *lxd.ContainerFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.ContainerFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerFile indicates an expected call of GetContainerFile.
func (mr *MockInstanceServerMockRecorder) GetContainerFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerFile), arg0, arg1)
}

// GetContainerLogfile mocks base method.
func (m *MockInstanceServer) GetContainerLogfile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfile indicates an expected call of GetContainerLogfile.
func (mr *MockInstanceServerMockRecorder) GetContainerLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfile), arg0, arg1)
}

// GetContainerLogfiles mocks base method.
func (m *MockInstanceServer) GetContainerLogfiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfiles indicates an expected call of GetContainerLogfiles.
func (mr *MockInstanceServerMockRecorder) GetContainerLogfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfiles), arg0)
}

// GetContainerMetadata mocks base method.
func (m *MockInstanceServer) GetContainerMetadata(arg0 string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetadata", arg0)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerMetadata indicates an expected call of GetContainerMetadata.
func (mr *MockInstanceServerMockRecorder) GetContainerMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerMetadata), arg0)
}

// GetContainerNames mocks base method.
func (m *MockInstanceServer) GetContainerNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerNames indicates an expected call of GetContainerNames.
func (mr *MockInstanceServerMockRecorder) GetContainerNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerNames))
}

// GetContainerSnapshot mocks base method.
func (m *MockInstanceServer) GetContainerSnapshot(arg0, arg1 string) (*api.ContainerSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*api.ContainerSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerSnapshot indicates an expected call of GetContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshot), arg0, arg1)
}

// GetContainerSnapshotNames mocks base method.
func (m *MockInstanceServer) GetContainerSnapshotNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshotNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshotNames indicates an expected call of GetContainerSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshotNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshotNames), arg0)
}

// GetContainerSnapshots mocks base method.
func (m *MockInstanceServer) GetContainerSnapshots(arg0 string) ([]api.ContainerSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshots", arg0)
	ret0, _ := ret[0].([]api.ContainerSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshots indicates an expected call of GetContainerSnapshots.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshots), arg0)
}

// GetContainerState mocks base method.
func (m *MockInstanceServer) GetContainerState(arg0 string) (*api.ContainerState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerState", arg0)
	ret0, _ := ret[0].(*api.ContainerState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerState indicates an expected call of GetContainerState.
func (mr *MockInstanceServerMockRecorder) GetContainerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerState", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerState), arg0)
}

// GetContainerTemplateFile mocks base method.
func (m *MockInstanceServer) GetContainerTemplateFile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFile indicates an expected call of GetContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFile), arg0, arg1)
}

// GetContainerTemplateFiles mocks base method.
func (m *MockInstanceServer) GetContainerTemplateFiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFiles indicates an expected call of GetContainerTemplateFiles.
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFiles), arg0)
}

// GetContainers mocks base method.
func (m *MockInstanceServer) GetContainers() ([]api.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]api.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockInstanceServerMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockInstanceServer)(nil).GetContainers))
}

// GetContainersFull mocks base method.
func (m *MockInstanceServer) GetContainersFull() ([]api.ContainerFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainersFull")
	ret0, _ := ret[0].([]api.ContainerFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainersFull indicates an expected call of GetContainersFull.
func (mr *MockInstanceServerMockRecorder) GetContainersFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainersFull", reflect.TypeOf((*MockInstanceServer)(nil).GetContainersFull))
}

// GetEvents mocks base method.
func (m *MockInstanceServer) GetEvents() (*lxd.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].(*lxd.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockInstanceServerMockRecorder) GetEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockInstanceServer)(nil).GetEvents))
}

// GetEventsAllProjects mocks base method.
func (m *MockInstanceServer) GetEventsAllProjects() (*lxd.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsAllProjects")
	ret0, _ := ret[0].(*lxd.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsAllProjects indicates an expected call of GetEventsAllProjects.
func (mr *MockInstanceServerMockRecorder) GetEventsAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetEventsAllProjects))
}

// GetHTTPClient mocks base method.
func (m *MockInstanceServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockInstanceServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockInstanceServer)(nil).GetHTTPClient))
}

// GetImage mocks base method.
func (m *MockInstanceServer) GetImage(arg0 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage.
func (mr *MockInstanceServerMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockInstanceServer)(nil).GetImage), arg0)
}

// GetImageAlias mocks base method.
func (m *MockInstanceServer) GetImageAlias(arg0 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", arg0)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias.
func (mr *MockInstanceServerMockRecorder) GetImageAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAlias), arg0)
}

// GetImageAliasArchitectures mocks base method.
func (m *MockInstanceServer) GetImageAliasArchitectures(arg0, arg1 string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", arg0, arg1)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures.
func (mr *MockInstanceServerMockRecorder) GetImageAliasArchitectures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasArchitectures), arg0, arg1)
}

// GetImageAliasNames mocks base method.
func (m *MockInstanceServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames.
func (mr *MockInstanceServerMockRecorder) GetImageAliasNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasNames))
}

// GetImageAliasType mocks base method.
func (m *MockInstanceServer) GetImageAliasType(arg0, arg1 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", arg0, arg1)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType.
func (mr *MockInstanceServerMockRecorder) GetImageAliasType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasType), arg0, arg1)
}

// GetImageAliases mocks base method.
func (m *MockInstanceServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases.
func (mr *MockInstanceServerMockRecorder) GetImageAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliases))
}

// GetImageFile mocks base method.
func (m *MockInstanceServer) GetImageFile(arg0 string, arg1 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", arg0, arg1)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile.
func (mr *MockInstanceServerMockRecorder) GetImageFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFile), arg0, arg1)
}

// GetImageFingerprints mocks base method.
func (m *MockInstanceServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints.
func (mr *MockInstanceServerMockRecorder) GetImageFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFingerprints))
}

// GetImageSecret mocks base method.
func (m *MockInstanceServer) GetImageSecret(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret.
func (mr *MockInstanceServerMockRecorder) GetImageSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetImageSecret), arg0)
}

// GetImages mocks base method.
func (m *MockInstanceServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockInstanceServerMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockInstanceServer)(nil).GetImages))
}

// GetImagesWithFilter mocks base method.
func (m *MockInstanceServer) GetImagesWithFilter(arg0 []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesWithFilter", arg0)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesWithFilter indicates an expected call of GetImagesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetImagesWithFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetImagesWithFilter), arg0)
}

// GetInstance mocks base method.
func (m *MockInstanceServer) GetInstance(arg0 string) (*api.Instance, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(*api.Instance)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockInstanceServerMockRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceServer)(nil).GetInstance), arg0)
}

// GetInstanceBackup mocks base method.
func (m *MockInstanceServer) GetInstanceBackup(arg0, arg1 string) (*api.InstanceBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceBackup indicates an expected call of GetInstanceBackup.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackup), arg0, arg1)
}

// GetInstanceBackupFile mocks base method.
func (m *MockInstanceServer) GetInstanceBackupFile(arg0, arg1 string, arg2 *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupFile indicates an expected call of GetInstanceBackupFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupFile), arg0, arg1, arg2)
}

// GetInstanceBackupNames mocks base method.
func (m *MockInstanceServer) GetInstanceBackupNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupNames indicates an expected call of GetInstanceBackupNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupNames), arg0)
}

// GetInstanceBackups mocks base method.
func (m *MockInstanceServer) GetInstanceBackups(arg0 string) ([]api.InstanceBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackups", arg0)
	ret0, _ := ret[0].([]api.InstanceBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackups indicates an expected call of GetInstanceBackups.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackups), arg0)
}

// GetInstanceConsoleLog mocks base method.
func (m *MockInstanceServer) GetInstanceConsoleLog(arg0 string, arg1 *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceConsoleLog indicates an expected call of GetInstanceConsoleLog.
func (mr *MockInstanceServerMockRecorder) GetInstanceConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceConsoleLog), arg0, arg1)
}

// GetInstanceFile mocks base method.
func (m *MockInstanceServer) GetInstanceFile(arg0, arg1 string) (io.ReadCloser, *lxd.InstanceFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.InstanceFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFile indicates an expected call of GetInstanceFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFile), arg0, arg1)
}

// GetInstanceFileSFTP mocks base method.
func (m *MockInstanceServer) GetInstanceFileSFTP(arg0 string) (*sftp.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFileSFTP", arg0)
	ret0, _ := ret[0].(*sftp.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFileSFTP indicates an expected call of GetInstanceFileSFTP.
func (mr *MockInstanceServerMockRecorder) GetInstanceFileSFTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFileSFTP", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFileSFTP), arg0)
}

// GetInstanceFileSFTPConn mocks base method.
func (m *MockInstanceServer) GetInstanceFileSFTPConn(arg0 string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFileSFTPConn", arg0)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFileSFTPConn indicates an expected call of GetInstanceFileSFTPConn.
func (mr *MockInstanceServerMockRecorder) GetInstanceFileSFTPConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFileSFTPConn", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFileSFTPConn), arg0)
}

// GetInstanceFull mocks base method.
func (m *MockInstanceServer) GetInstanceFull(arg0 string) (*api.InstanceFull, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFull", arg0)
	ret0, _ := ret[0].(*api.InstanceFull)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFull indicates an expected call of GetInstanceFull.
func (mr *MockInstanceServerMockRecorder) GetInstanceFull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFull), arg0)
}

// GetInstanceLogfile mocks base method.
func (m *MockInstanceServer) GetInstanceLogfile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfile indicates an expected call of GetInstanceLogfile.
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfile), arg0, arg1)
}

// GetInstanceLogfiles mocks base method.
func (m *MockInstanceServer) GetInstanceLogfiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfiles indicates an expected call of GetInstanceLogfiles.
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfiles), arg0)
}

// GetInstanceMetadata mocks base method.
func (m *MockInstanceServer) GetInstanceMetadata(arg0 string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetadata", arg0)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceMetadata indicates an expected call of GetInstanceMetadata.
func (mr *MockInstanceServerMockRecorder) GetInstanceMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceMetadata), arg0)
}

// GetInstanceNames mocks base method.
func (m *MockInstanceServer) GetInstanceNames(arg0 api.InstanceType) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNames indicates an expected call of GetInstanceNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNames), arg0)
}

// GetInstanceNamesAllProjects mocks base method.
func (m *MockInstanceServer) GetInstanceNamesAllProjects(arg0 api.InstanceType) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNamesAllProjects", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNamesAllProjects indicates an expected call of GetInstanceNamesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstanceNamesAllProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNamesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNamesAllProjects), arg0)
}

// GetInstanceSnapshot mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshot(arg0, arg1 string) (*api.InstanceSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceSnapshot indicates an expected call of GetInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshot), arg0, arg1)
}

// GetInstanceSnapshotNames mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshotNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshotNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshotNames indicates an expected call of GetInstanceSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshotNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshotNames), arg0)
}

// GetInstanceSnapshots mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshots(arg0 string) ([]api.InstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshots", arg0)
	ret0, _ := ret[0].([]api.InstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshots indicates an expected call of GetInstanceSnapshots.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshots), arg0)
}

// GetInstanceState mocks base method.
func (m *MockInstanceServer) GetInstanceState(arg0 string) (*api.InstanceState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceState", arg0)
	ret0, _ := ret[0].(*api.InstanceState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceState indicates an expected call of GetInstanceState.
func (mr *MockInstanceServerMockRecorder) GetInstanceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceState), arg0)
}

// GetInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) GetInstanceTemplateFile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFile indicates an expected call of GetInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFile), arg0, arg1)
}

// GetInstanceTemplateFiles mocks base method.
func (m *MockInstanceServer) GetInstanceTemplateFiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFiles indicates an expected call of GetInstanceTemplateFiles.
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFiles), arg0)
}

// GetInstances mocks base method.
func (m *MockInstanceServer) GetInstances(arg0 api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", arg0)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockInstanceServerMockRecorder) GetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockInstanceServer)(nil).GetInstances), arg0)
}

// GetInstancesAllProjects mocks base method.
func (m *MockInstanceServer) GetInstancesAllProjects(arg0 api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesAllProjects", arg0)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesAllProjects indicates an expected call of GetInstancesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstancesAllProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesAllProjects), arg0)
}

// GetInstancesAllProjectsWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesAllProjectsWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesAllProjectsWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesAllProjectsWithFilter indicates an expected call of GetInstancesAllProjectsWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesAllProjectsWithFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesAllProjectsWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesAllProjectsWithFilter), arg0, arg1)
}

// GetInstancesFull mocks base method.
func (m *MockInstanceServer) GetInstancesFull(arg0 api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFull", arg0)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFull indicates an expected call of GetInstancesFull.
func (mr *MockInstanceServerMockRecorder) GetInstancesFull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFull), arg0)
}

// GetInstancesFullAllProjects mocks base method.
func (m *MockInstanceServer) GetInstancesFullAllProjects(arg0 api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullAllProjects", arg0)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullAllProjects indicates an expected call of GetInstancesFullAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullAllProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullAllProjects), arg0)
}

// GetInstancesFullAllProjectsWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesFullAllProjectsWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullAllProjectsWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullAllProjectsWithFilter indicates an expected call of GetInstancesFullAllProjectsWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullAllProjectsWithFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullAllProjectsWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullAllProjectsWithFilter), arg0, arg1)
}

// GetInstancesFullWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesFullWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullWithFilter indicates an expected call of GetInstancesFullWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullWithFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullWithFilter), arg0, arg1)
}

// GetInstancesWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesWithFilter(arg0 api.InstanceType, arg1 []string) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesWithFilter indicates an expected call of GetInstancesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesWithFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesWithFilter), arg0, arg1)
}

// GetMetrics mocks base method.
func (m *MockInstanceServer) GetMetrics() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockInstanceServerMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockInstanceServer)(nil).GetMetrics))
}

// GetNetwork mocks base method.
func (m *MockInstanceServer) GetNetwork(arg0 string) (*api.Network, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0)
	ret0, _ := ret[0].(*api.Network)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockInstanceServerMockRecorder) GetNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockInstanceServer)(nil).GetNetwork), arg0)
}

// GetNetworkACL mocks base method.
func (m *MockInstanceServer) GetNetworkACL(arg0 string) (*api.NetworkACL, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACL", arg0)
	ret0, _ := ret[0].(*api.NetworkACL)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkACL indicates an expected call of GetNetworkACL.
func (mr *MockInstanceServerMockRecorder) GetNetworkACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACL), arg0)
}

// GetNetworkACLLogfile mocks base method.
func (m *MockInstanceServer) GetNetworkACLLogfile(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLLogfile", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLLogfile indicates an expected call of GetNetworkACLLogfile.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLLogfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLLogfile), arg0)
}

// GetNetworkACLNames mocks base method.
func (m *MockInstanceServer) GetNetworkACLNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLNames indicates an expected call of GetNetworkACLNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLNames))
}

// GetNetworkACLs mocks base method.
func (m *MockInstanceServer) GetNetworkACLs() ([]api.NetworkACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLs")
	ret0, _ := ret[0].([]api.NetworkACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLs indicates an expected call of GetNetworkACLs.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLs", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLs))
}

// GetNetworkForward mocks base method.
func (m *MockInstanceServer) GetNetworkForward(arg0, arg1 string) (*api.NetworkForward, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForward", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkForward)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkForward indicates an expected call of GetNetworkForward.
func (mr *MockInstanceServerMockRecorder) GetNetworkForward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForward), arg0, arg1)
}

// GetNetworkForwardAddresses mocks base method.
func (m *MockInstanceServer) GetNetworkForwardAddresses(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForwardAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkForwardAddresses indicates an expected call of GetNetworkForwardAddresses.
func (mr *MockInstanceServerMockRecorder) GetNetworkForwardAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForwardAddresses", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForwardAddresses), arg0)
}

// GetNetworkForwards mocks base method.
func (m *MockInstanceServer) GetNetworkForwards(arg0 string) ([]api.NetworkForward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForwards", arg0)
	ret0, _ := ret[0].([]api.NetworkForward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkForwards indicates an expected call of GetNetworkForwards.
func (mr *MockInstanceServerMockRecorder) GetNetworkForwards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForwards", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForwards), arg0)
}

// GetNetworkLeases mocks base method.
func (m *MockInstanceServer) GetNetworkLeases(arg0 string) ([]api.NetworkLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLeases", arg0)
	ret0, _ := ret[0].([]api.NetworkLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLeases indicates an expected call of GetNetworkLeases.
func (mr *MockInstanceServerMockRecorder) GetNetworkLeases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLeases", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLeases), arg0)
}

// GetNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancer(arg0, arg1 string) (*api.NetworkLoadBalancer, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkLoadBalancer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkLoadBalancer indicates an expected call of GetNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancer), arg0, arg1)
}

// GetNetworkLoadBalancerAddresses mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancerAddresses(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancerAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLoadBalancerAddresses indicates an expected call of GetNetworkLoadBalancerAddresses.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancerAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancerAddresses", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancerAddresses), arg0)
}

// GetNetworkLoadBalancers mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancers(arg0 string) ([]api.NetworkLoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancers", arg0)
	ret0, _ := ret[0].([]api.NetworkLoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLoadBalancers indicates an expected call of GetNetworkLoadBalancers.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancers", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancers), arg0)
}

// GetNetworkNames mocks base method.
func (m *MockInstanceServer) GetNetworkNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNames indicates an expected call of GetNetworkNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkNames))
}

// GetNetworkPeer mocks base method.
func (m *MockInstanceServer) GetNetworkPeer(arg0, arg1 string) (*api.NetworkPeer, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeer", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkPeer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkPeer indicates an expected call of GetNetworkPeer.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeer), arg0, arg1)
}

// GetNetworkPeerNames mocks base method.
func (m *MockInstanceServer) GetNetworkPeerNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeerNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPeerNames indicates an expected call of GetNetworkPeerNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeerNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeerNames), arg0)
}

// GetNetworkPeers mocks base method.
func (m *MockInstanceServer) GetNetworkPeers(arg0 string) ([]api.NetworkPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeers", arg0)
	ret0, _ := ret[0].([]api.NetworkPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPeers indicates an expected call of GetNetworkPeers.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeers", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeers), arg0)
}

// GetNetworkState mocks base method.
func (m *MockInstanceServer) GetNetworkState(arg0 string) (*api.NetworkState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkState", arg0)
	ret0, _ := ret[0].(*api.NetworkState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkState indicates an expected call of GetNetworkState.
func (mr *MockInstanceServerMockRecorder) GetNetworkState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkState", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkState), arg0)
}

// GetNetworkZone mocks base method.
func (m *MockInstanceServer) GetNetworkZone(arg0 string) (*api.NetworkZone, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZone", arg0)
	ret0, _ := ret[0].(*api.NetworkZone)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkZone indicates an expected call of GetNetworkZone.
func (mr *MockInstanceServerMockRecorder) GetNetworkZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZone), arg0)
}

// GetNetworkZoneNames mocks base method.
func (m *MockInstanceServer) GetNetworkZoneNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneNames indicates an expected call of GetNetworkZoneNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneNames))
}

// GetNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecord(arg0, arg1 string) (*api.NetworkZoneRecord, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecord", arg0, arg1)
	ret0, _ := ret[0].(*api.NetworkZoneRecord)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkZoneRecord indicates an expected call of GetNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecord), arg0, arg1)
}

// GetNetworkZoneRecordNames mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecordNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecordNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneRecordNames indicates an expected call of GetNetworkZoneRecordNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecordNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecordNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecordNames), arg0)
}

// GetNetworkZoneRecords mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecords(arg0 string) ([]api.NetworkZoneRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecords", arg0)
	ret0, _ := ret[0].([]api.NetworkZoneRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneRecords indicates an expected call of GetNetworkZoneRecords.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecords", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecords), arg0)
}

// GetNetworkZones mocks base method.
func (m *MockInstanceServer) GetNetworkZones() ([]api.NetworkZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZones")
	ret0, _ := ret[0].([]api.NetworkZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZones indicates an expected call of GetNetworkZones.
func (mr *MockInstanceServerMockRecorder) GetNetworkZones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZones", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZones))
}

// GetNetworks mocks base method.
func (m *MockInstanceServer) GetNetworks() ([]api.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks")
	ret0, _ := ret[0].([]api.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks.
func (mr *MockInstanceServerMockRecorder) GetNetworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworks))
}

// GetOperation mocks base method.
func (m *MockInstanceServer) GetOperation(arg0 string) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockInstanceServerMockRecorder) GetOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockInstanceServer)(nil).GetOperation), arg0)
}

// GetOperationUUIDs mocks base method.
func (m *MockInstanceServer) GetOperationUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationUUIDs indicates an expected call of GetOperationUUIDs.
func (mr *MockInstanceServerMockRecorder) GetOperationUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationUUIDs))
}

// GetOperationWait mocks base method.
func (m *MockInstanceServer) GetOperationWait(arg0 string, arg1 int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWait", arg0, arg1)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWait indicates an expected call of GetOperationWait.
func (mr *MockInstanceServerMockRecorder) GetOperationWait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWait", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWait), arg0, arg1)
}

// GetOperationWaitSecret mocks base method.
func (m *MockInstanceServer) GetOperationWaitSecret(arg0, arg1 string, arg2 int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWaitSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWaitSecret indicates an expected call of GetOperationWaitSecret.
func (mr *MockInstanceServerMockRecorder) GetOperationWaitSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWaitSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWaitSecret), arg0, arg1, arg2)
}

// GetOperationWebsocket mocks base method.
func (m *MockInstanceServer) GetOperationWebsocket(arg0, arg1 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWebsocket", arg0, arg1)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWebsocket indicates an expected call of GetOperationWebsocket.
func (mr *MockInstanceServerMockRecorder) GetOperationWebsocket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWebsocket), arg0, arg1)
}

// GetOperations mocks base method.
func (m *MockInstanceServer) GetOperations() ([]api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations")
	ret0, _ := ret[0].([]api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockInstanceServerMockRecorder) GetOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockInstanceServer)(nil).GetOperations))
}

// GetPrivateImage mocks base method.
func (m *MockInstanceServer) GetPrivateImage(arg0, arg1 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage.
func (mr *MockInstanceServerMockRecorder) GetPrivateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImage), arg0, arg1)
}

// GetPrivateImageFile mocks base method.
func (m *MockInstanceServer) GetPrivateImageFile(arg0, arg1 string, arg2 lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile.
func (mr *MockInstanceServerMockRecorder) GetPrivateImageFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImageFile), arg0, arg1, arg2)
}

// GetProfile mocks base method.
func (m *MockInstanceServer) GetProfile(arg0 string) (*api.Profile, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*api.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockInstanceServerMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockInstanceServer)(nil).GetProfile), arg0)
}

// GetProfileNames mocks base method.
func (m *MockInstanceServer) GetProfileNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNames indicates an expected call of GetProfileNames.
func (mr *MockInstanceServerMockRecorder) GetProfileNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProfileNames))
}

// GetProfiles mocks base method.
func (m *MockInstanceServer) GetProfiles() ([]api.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles")
	ret0, _ := ret[0].([]api.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles.
func (mr *MockInstanceServerMockRecorder) GetProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetProfiles))
}

// GetProject mocks base method.
func (m *MockInstanceServer) GetProject(arg0 string) (*api.Project, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0)
	ret0, _ := ret[0].(*api.Project)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockInstanceServerMockRecorder) GetProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockInstanceServer)(nil).GetProject), arg0)
}

// GetProjectNames mocks base method.
func (m *MockInstanceServer) GetProjectNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectNames indicates an expected call of GetProjectNames.
func (mr *MockInstanceServerMockRecorder) GetProjectNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectNames))
}

// GetProjectState mocks base method.
func (m *MockInstanceServer) GetProjectState(arg0 string) (*api.ProjectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectState", arg0)
	ret0, _ := ret[0].(*api.ProjectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectState indicates an expected call of GetProjectState.
func (mr *MockInstanceServerMockRecorder) GetProjectState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectState", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectState), arg0)
}

// GetProjects mocks base method.
func (m *MockInstanceServer) GetProjects() ([]api.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].([]api.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockInstanceServerMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetProjects))
}

// GetServer mocks base method.
func (m *MockInstanceServer) GetServer() (*api.Server, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*api.Server)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServer indicates an expected call of GetServer.
func (mr *MockInstanceServerMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInstanceServer)(nil).GetServer))
}

// GetServerResources mocks base method.
func (m *MockInstanceServer) GetServerResources() (*api.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerResources")
	ret0, _ := ret[0].(*api.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerResources indicates an expected call of GetServerResources.
func (mr *MockInstanceServerMockRecorder) GetServerResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerResources", reflect.TypeOf((*MockInstanceServer)(nil).GetServerResources))
}

// GetStoragePool mocks base method.
func (m *MockInstanceServer) GetStoragePool(arg0 string) (*api.StoragePool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", arg0)
	ret0, _ := ret[0].(*api.StoragePool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePool indicates an expected call of GetStoragePool.
func (mr *MockInstanceServerMockRecorder) GetStoragePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePool), arg0)
}

// GetStoragePoolBucket mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucket(arg0, arg1 string) (*api.StorageBucket, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucket", arg0, arg1)
	ret0, _ := ret[0].(*api.StorageBucket)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolBucket indicates an expected call of GetStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucket), arg0, arg1)
}

// GetStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKey(arg0, arg1, arg2 string) (*api.StorageBucketKey, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolBucketKey indicates an expected call of GetStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKey), arg0, arg1, arg2)
}

// GetStoragePoolBucketKeyNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKeyNames(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKeyNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketKeyNames indicates an expected call of GetStoragePoolBucketKeyNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKeyNames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKeyNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKeyNames), arg0, arg1)
}

// GetStoragePoolBucketKeys mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKeys(arg0, arg1 string) ([]api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKeys", arg0, arg1)
	ret0, _ := ret[0].([]api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketKeys indicates an expected call of GetStoragePoolBucketKeys.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKeys", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKeys), arg0, arg1)
}

// GetStoragePoolBucketNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketNames indicates an expected call of GetStoragePoolBucketNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketNames), arg0)
}

// GetStoragePoolBuckets mocks base method.
func (m *MockInstanceServer) GetStoragePoolBuckets(arg0 string) ([]api.StorageBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBuckets", arg0)
	ret0, _ := ret[0].([]api.StorageBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBuckets indicates an expected call of GetStoragePoolBuckets.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBuckets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBuckets", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBuckets), arg0)
}

// GetStoragePoolNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolNames indicates an expected call of GetStoragePoolNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolNames))
}

// GetStoragePoolResources mocks base method.
func (m *MockInstanceServer) GetStoragePoolResources(arg0 string) (*api.ResourcesStoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolResources", arg0)
	ret0, _ := ret[0].(*api.ResourcesStoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolResources indicates an expected call of GetStoragePoolResources.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolResources", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolResources), arg0)
}

// GetStoragePoolVolume mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolume(arg0, arg1, arg2 string) (*api.StorageVolume, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageVolume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolume indicates an expected call of GetStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolume), arg0, arg1, arg2)
}

// GetStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackup(arg0, arg1, arg2 string) (*api.StoragePoolVolumeBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeBackup indicates an expected call of GetStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackup), arg0, arg1, arg2)
}

// GetStoragePoolVolumeBackupFile mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackupFile(arg0, arg1, arg2 string, arg3 *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupFile indicates an expected call of GetStoragePoolVolumeBackupFile.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupFile), arg0, arg1, arg2, arg3)
}

// GetStoragePoolVolumeBackupNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackupNames(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupNames indicates an expected call of GetStoragePoolVolumeBackupNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupNames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupNames), arg0, arg1)
}

// GetStoragePoolVolumeBackups mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackups(arg0, arg1 string) ([]api.StoragePoolVolumeBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackups", arg0, arg1)
	ret0, _ := ret[0].([]api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackups indicates an expected call of GetStoragePoolVolumeBackups.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackups), arg0, arg1)
}

// GetStoragePoolVolumeNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNames indicates an expected call of GetStoragePoolVolumeNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNames), arg0)
}

// GetStoragePoolVolumeNamesAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeNamesAllProjects(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNamesAllProjects", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNamesAllProjects indicates an expected call of GetStoragePoolVolumeNamesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNamesAllProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNamesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNamesAllProjects), arg0)
}

// GetStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string) (*api.StorageVolumeSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeSnapshot indicates an expected call of GetStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
}

// GetStoragePoolVolumeSnapshotNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshotNames(arg0, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshotNames", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshotNames indicates an expected call of GetStoragePoolVolumeSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshotNames(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshotNames), arg0, arg1, arg2)
}

// GetStoragePoolVolumeSnapshots mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshots(arg0, arg1, arg2 string) ([]api.StorageVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshots indicates an expected call of GetStoragePoolVolumeSnapshots.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshots), arg0, arg1, arg2)
}

// GetStoragePoolVolumeState mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeState(arg0, arg1, arg2 string) (*api.StorageVolumeState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeState", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageVolumeState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeState indicates an expected call of GetStoragePoolVolumeState.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeState", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeState), arg0, arg1, arg2)
}

// GetStoragePoolVolumes mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumes(arg0 string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumes", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumes indicates an expected call of GetStoragePoolVolumes.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumes", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumes), arg0)
}

// GetStoragePoolVolumesAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesAllProjects(arg0 string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesAllProjects", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesAllProjects indicates an expected call of GetStoragePoolVolumesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesAllProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesAllProjects), arg0)
}

// GetStoragePoolVolumesWithFilter mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesWithFilter(arg0 string, arg1 []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesWithFilter", arg0, arg1)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesWithFilter indicates an expected call of GetStoragePoolVolumesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesWithFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesWithFilter), arg0, arg1)
}

// GetStoragePoolVolumesWithFilterAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesWithFilterAllProjects(arg0 string, arg1 []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesWithFilterAllProjects", arg0, arg1)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesWithFilterAllProjects indicates an expected call of GetStoragePoolVolumesWithFilterAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesWithFilterAllProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesWithFilterAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesWithFilterAllProjects), arg0, arg1)
}

// GetStoragePools mocks base method.
func (m *MockInstanceServer) GetStoragePools() ([]api.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePools")
	ret0, _ := ret[0].([]api.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePools indicates an expected call of GetStoragePools.
func (mr *MockInstanceServerMockRecorder) GetStoragePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePools", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePools))
}

// GetWarning mocks base method.
func (m *MockInstanceServer) GetWarning(arg0 string) (*api.Warning, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarning", arg0)
	ret0, _ := ret[0].(*api.Warning)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWarning indicates an expected call of GetWarning.
func (mr *MockInstanceServerMockRecorder) GetWarning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarning", reflect.TypeOf((*MockInstanceServer)(nil).GetWarning), arg0)
}

// GetWarningUUIDs mocks base method.
func (m *MockInstanceServer) GetWarningUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarningUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarningUUIDs indicates an expected call of GetWarningUUIDs.
func (mr *MockInstanceServerMockRecorder) GetWarningUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarningUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetWarningUUIDs))
}

// GetWarnings mocks base method.
func (m *MockInstanceServer) GetWarnings() ([]api.Warning, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarnings")
	ret0, _ := ret[0].([]api.Warning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarnings indicates an expected call of GetWarnings.
func (mr *MockInstanceServerMockRecorder) GetWarnings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarnings", reflect.TypeOf((*MockInstanceServer)(nil).GetWarnings))
}

// HasExtension mocks base method.
func (m *MockInstanceServer) HasExtension(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExtension", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExtension indicates an expected call of HasExtension.
func (mr *MockInstanceServerMockRecorder) HasExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExtension", reflect.TypeOf((*MockInstanceServer)(nil).HasExtension), arg0)
}

// IsClustered mocks base method.
func (m *MockInstanceServer) IsClustered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClustered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClustered indicates an expected call of IsClustered.
func (mr *MockInstanceServerMockRecorder) IsClustered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClustered", reflect.TypeOf((*MockInstanceServer)(nil).IsClustered))
}

// MigrateContainer mocks base method.
func (m *MockInstanceServer) MigrateContainer(arg0 string, arg1 api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainer", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainer indicates an expected call of MigrateContainer.
func (mr *MockInstanceServerMockRecorder) MigrateContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainer", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainer), arg0, arg1)
}

// MigrateContainerSnapshot mocks base method.
func (m *MockInstanceServer) MigrateContainerSnapshot(arg0, arg1 string, arg2 api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainerSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainerSnapshot indicates an expected call of MigrateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) MigrateContainerSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainerSnapshot), arg0, arg1, arg2)
}

// MigrateInstance mocks base method.
func (m *MockInstanceServer) MigrateInstance(arg0 string, arg1 api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstance", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstance indicates an expected call of MigrateInstance.
func (mr *MockInstanceServerMockRecorder) MigrateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstance", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstance), arg0, arg1)
}

// MigrateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) MigrateInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstanceSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstanceSnapshot indicates an expected call of MigrateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) MigrateInstanceSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstanceSnapshot), arg0, arg1, arg2)
}

// MigrateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) MigrateStoragePoolVolume(arg0 string, arg1 api.StorageVolumePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateStoragePoolVolume", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateStoragePoolVolume indicates an expected call of MigrateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) MigrateStoragePoolVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MigrateStoragePoolVolume), arg0, arg1)
}

// MoveStoragePoolVolume mocks base method.
func (m *MockInstanceServer) MoveStoragePoolVolume(arg0 string, arg1 lxd.InstanceServer, arg2 string, arg3 api.StorageVolume, arg4 *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveStoragePoolVolume indicates an expected call of MoveStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) MoveStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MoveStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
}

// RawOperation mocks base method.
func (m *MockInstanceServer) RawOperation(arg0, arg1 string, arg2 interface{}, arg3 string) (lxd.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawOperation indicates an expected call of RawOperation.
func (mr *MockInstanceServerMockRecorder) RawOperation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawOperation", reflect.TypeOf((*MockInstanceServer)(nil).RawOperation), arg0, arg1, arg2, arg3)
}

// RawQuery mocks base method.
func (m *MockInstanceServer) RawQuery(arg0, arg1 string, arg2 interface{}, arg3 string) (*api.Response, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawQuery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawQuery indicates an expected call of RawQuery.
func (mr *MockInstanceServerMockRecorder) RawQuery(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawQuery", reflect.TypeOf((*MockInstanceServer)(nil).RawQuery), arg0, arg1, arg2, arg3)
}

// RawWebsocket mocks base method.
func (m *MockInstanceServer) RawWebsocket(arg0 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawWebsocket", arg0)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawWebsocket indicates an expected call of RawWebsocket.
func (mr *MockInstanceServerMockRecorder) RawWebsocket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).RawWebsocket), arg0)
}

// RefreshImage mocks base method.
func (m *MockInstanceServer) RefreshImage(arg0 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshImage", arg0)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshImage indicates an expected call of RefreshImage.
func (mr *MockInstanceServerMockRecorder) RefreshImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshImage", reflect.TypeOf((*MockInstanceServer)(nil).RefreshImage), arg0)
}

// RenameClusterGroup mocks base method.
func (m *MockInstanceServer) RenameClusterGroup(arg0 string, arg1 api.ClusterGroupPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterGroup indicates an expected call of RenameClusterGroup.
func (mr *MockInstanceServerMockRecorder) RenameClusterGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterGroup), arg0, arg1)
}

// RenameClusterMember mocks base method.
func (m *MockInstanceServer) RenameClusterMember(arg0 string, arg1 api.ClusterMemberPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterMember indicates an expected call of RenameClusterMember.
func (mr *MockInstanceServerMockRecorder) RenameClusterMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterMember), arg0, arg1)
}

// RenameContainer mocks base method.
func (m *MockInstanceServer) RenameContainer(arg0 string, arg1 api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainer", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainer indicates an expected call of RenameContainer.
func (mr *MockInstanceServerMockRecorder) RenameContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainer", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainer), arg0, arg1)
}

// RenameContainerBackup mocks base method.
func (m *MockInstanceServer) RenameContainerBackup(arg0, arg1 string, arg2 api.ContainerBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerBackup indicates an expected call of RenameContainerBackup.
func (mr *MockInstanceServerMockRecorder) RenameContainerBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerBackup), arg0, arg1, arg2)
}

// RenameContainerSnapshot mocks base method.
func (m *MockInstanceServer) RenameContainerSnapshot(arg0, arg1 string, arg2 api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerSnapshot indicates an expected call of RenameContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameContainerSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerSnapshot), arg0, arg1, arg2)
}

// RenameImageAlias mocks base method.
func (m *MockInstanceServer) RenameImageAlias(arg0 string, arg1 api.ImageAliasesEntryPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameImageAlias", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameImageAlias indicates an expected call of RenameImageAlias.
func (mr *MockInstanceServerMockRecorder) RenameImageAlias(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).RenameImageAlias), arg0, arg1)
}

// RenameInstance mocks base method.
func (m *MockInstanceServer) RenameInstance(arg0 string, arg1 api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstance", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstance indicates an expected call of RenameInstance.
func (mr *MockInstanceServerMockRecorder) RenameInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstance", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstance), arg0, arg1)
}

// RenameInstanceBackup mocks base method.
func (m *MockInstanceServer) RenameInstanceBackup(arg0, arg1 string, arg2 api.InstanceBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceBackup indicates an expected call of RenameInstanceBackup.
func (mr *MockInstanceServerMockRecorder) RenameInstanceBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceBackup), arg0, arg1, arg2)
}

// RenameInstanceSnapshot mocks base method.
func (m *MockInstanceServer) RenameInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceSnapshot indicates an expected call of RenameInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameInstanceSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceSnapshot), arg0, arg1, arg2)
}

// RenameNetwork mocks base method.
func (m *MockInstanceServer) RenameNetwork(arg0 string, arg1 api.NetworkPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetwork indicates an expected call of RenameNetwork.
func (mr *MockInstanceServerMockRecorder) RenameNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetwork", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetwork), arg0, arg1)
}

// RenameNetworkACL mocks base method.
func (m *MockInstanceServer) RenameNetworkACL(arg0 string, arg1 api.NetworkACLPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetworkACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetworkACL indicates an expected call of RenameNetworkACL.
func (mr *MockInstanceServerMockRecorder) RenameNetworkACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetworkACL), arg0, arg1)
}

// RenameProfile mocks base method.
func (m *MockInstanceServer) RenameProfile(arg0 string, arg1 api.ProfilePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameProfile indicates an expected call of RenameProfile.
func (mr *MockInstanceServerMockRecorder) RenameProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProfile", reflect.TypeOf((*MockInstanceServer)(nil).RenameProfile), arg0, arg1)
}

// RenameProject mocks base method.
func (m *MockInstanceServer) RenameProject(arg0 string, arg1 api.ProjectPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProject", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameProject indicates an expected call of RenameProject.
func (mr *MockInstanceServerMockRecorder) RenameProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProject", reflect.TypeOf((*MockInstanceServer)(nil).RenameProject), arg0, arg1)
}

// RenameStoragePoolVolume mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolume(arg0, arg1, arg2 string, arg3 api.StorageVolumePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameStoragePoolVolume indicates an expected call of RenameStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolume(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolume), arg0, arg1, arg2, arg3)
}

// RenameStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolumeBackup(arg0, arg1, arg2 string, arg3 api.StoragePoolVolumeBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeBackup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeBackup indicates an expected call of RenameStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeBackup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeBackup), arg0, arg1, arg2, arg3)
}

// RenameStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string, arg4 api.StorageVolumeSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeSnapshot indicates an expected call of RenameStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3, arg4)
}

// RequireAuthenticated mocks base method.
func (m *MockInstanceServer) RequireAuthenticated(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequireAuthenticated", arg0)
}

// RequireAuthenticated indicates an expected call of RequireAuthenticated.
func (mr *MockInstanceServerMockRecorder) RequireAuthenticated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthenticated", reflect.TypeOf((*MockInstanceServer)(nil).RequireAuthenticated), arg0)
}

// SendEvent mocks base method.
func (m *MockInstanceServer) SendEvent(arg0 api.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockInstanceServerMockRecorder) SendEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockInstanceServer)(nil).SendEvent), arg0)
}

// SetContainerMetadata mocks base method.
func (m *MockInstanceServer) SetContainerMetadata(arg0 string, arg1 api.ImageMetadata, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainerMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainerMetadata indicates an expected call of SetContainerMetadata.
func (mr *MockInstanceServerMockRecorder) SetContainerMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).SetContainerMetadata), arg0, arg1, arg2)
}

// UpdateCertificate mocks base method.
func (m *MockInstanceServer) UpdateCertificate(arg0 string, arg1 api.CertificatePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificate indicates an expected call of UpdateCertificate.
func (mr *MockInstanceServerMockRecorder) UpdateCertificate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCertificate), arg0, arg1, arg2)
}

// UpdateCluster mocks base method.
func (m *MockInstanceServer) UpdateCluster(arg0 api.ClusterPut, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockInstanceServerMockRecorder) UpdateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCluster), arg0, arg1)
}

// UpdateClusterCertificate mocks base method.
func (m *MockInstanceServer) UpdateClusterCertificate(arg0 api.ClusterCertificatePut, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterCertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterCertificate indicates an expected call of UpdateClusterCertificate.
func (mr *MockInstanceServerMockRecorder) UpdateClusterCertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterCertificate), arg0, arg1)
}

// UpdateClusterGroup mocks base method.
func (m *MockInstanceServer) UpdateClusterGroup(arg0 string, arg1 api.ClusterGroupPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterGroup indicates an expected call of UpdateClusterGroup.
func (mr *MockInstanceServerMockRecorder) UpdateClusterGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterGroup), arg0, arg1, arg2)
}

// UpdateClusterMember mocks base method.
func (m *MockInstanceServer) UpdateClusterMember(arg0 string, arg1 api.ClusterMemberPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterMember indicates an expected call of UpdateClusterMember.
func (mr *MockInstanceServerMockRecorder) UpdateClusterMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterMember), arg0, arg1, arg2)
}

// UpdateClusterMemberState mocks base method.
func (m *MockInstanceServer) UpdateClusterMemberState(arg0 string, arg1 api.ClusterMemberStatePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterMemberState", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterMemberState indicates an expected call of UpdateClusterMemberState.
func (mr *MockInstanceServerMockRecorder) UpdateClusterMemberState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterMemberState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterMemberState), arg0, arg1)
}

// UpdateContainer mocks base method.
func (m *MockInstanceServer) UpdateContainer(arg0 string, arg1 api.ContainerPut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainer indicates an expected call of UpdateContainer.
func (mr *MockInstanceServerMockRecorder) UpdateContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainer), arg0, arg1, arg2)
}

// UpdateContainerSnapshot mocks base method.
func (m *MockInstanceServer) UpdateContainerSnapshot(arg0, arg1 string, arg2 api.ContainerSnapshotPut, arg3 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerSnapshot indicates an expected call of UpdateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateContainerSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerSnapshot), arg0, arg1, arg2, arg3)
}

// UpdateContainerState mocks base method.
func (m *MockInstanceServer) UpdateContainerState(arg0 string, arg1 api.ContainerStatePut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerState", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerState indicates an expected call of UpdateContainerState.
func (mr *MockInstanceServerMockRecorder) UpdateContainerState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerState), arg0, arg1, arg2)
}

// UpdateContainerTemplateFile mocks base method.
func (m *MockInstanceServer) UpdateContainerTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerTemplateFile indicates an expected call of UpdateContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) UpdateContainerTemplateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerTemplateFile), arg0, arg1, arg2)
}

// UpdateImage mocks base method.
func (m *MockInstanceServer) UpdateImage(arg0 string, arg1 api.ImagePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockInstanceServerMockRecorder) UpdateImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImage), arg0, arg1, arg2)
}

// UpdateImageAlias mocks base method.
func (m *MockInstanceServer) UpdateImageAlias(arg0 string, arg1 api.ImageAliasesEntryPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageAlias indicates an expected call of UpdateImageAlias.
func (mr *MockInstanceServerMockRecorder) UpdateImageAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImageAlias), arg0, arg1, arg2)
}

// UpdateInstance mocks base method.
func (m *MockInstanceServer) UpdateInstance(arg0 string, arg1 api.InstancePut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockInstanceServerMockRecorder) UpdateInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstance), arg0, arg1, arg2)
}

// UpdateInstanceMetadata mocks base method.
func (m *MockInstanceServer) UpdateInstanceMetadata(arg0 string, arg1 api.ImageMetadata, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceMetadata indicates an expected call of UpdateInstanceMetadata.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceMetadata), arg0, arg1, arg2)
}

// UpdateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) UpdateInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPut, arg3 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceSnapshot indicates an expected call of UpdateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceSnapshot), arg0, arg1, arg2, arg3)
}

// UpdateInstanceState mocks base method.
func (m *MockInstanceServer) UpdateInstanceState(arg0 string, arg1 api.InstanceStatePut, arg2 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceState", arg0, arg1, arg2)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceState indicates an expected call of UpdateInstanceState.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceState), arg0, arg1, arg2)
}

// UpdateInstances mocks base method.
func (m *MockInstanceServer) UpdateInstances(arg0 api.InstancesPut, arg1 string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstances", arg0, arg1)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstances indicates an expected call of UpdateInstances.
func (mr *MockInstanceServerMockRecorder) UpdateInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstances", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstances), arg0, arg1)
}

// UpdateNetwork mocks base method.
func (m *MockInstanceServer) UpdateNetwork(arg0 string, arg1 api.NetworkPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockInstanceServerMockRecorder) UpdateNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetwork), arg0, arg1, arg2)
}

// UpdateNetworkACL mocks base method.
func (m *MockInstanceServer) UpdateNetworkACL(arg0 string, arg1 api.NetworkACLPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkACL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkACL indicates an expected call of UpdateNetworkACL.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkACL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkACL), arg0, arg1, arg2)
}

// UpdateNetworkForward mocks base method.
func (m *MockInstanceServer) UpdateNetworkForward(arg0, arg1 string, arg2 api.NetworkForwardPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkForward", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkForward indicates an expected call of UpdateNetworkForward.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkForward(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkForward), arg0, arg1, arg2, arg3)
}

// UpdateNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) UpdateNetworkLoadBalancer(arg0, arg1 string, arg2 api.NetworkLoadBalancerPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkLoadBalancer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkLoadBalancer indicates an expected call of UpdateNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkLoadBalancer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkLoadBalancer), arg0, arg1, arg2, arg3)
}

// UpdateNetworkPeer mocks base method.
func (m *MockInstanceServer) UpdateNetworkPeer(arg0, arg1 string, arg2 api.NetworkPeerPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkPeer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPeer indicates an expected call of UpdateNetworkPeer.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkPeer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkPeer), arg0, arg1, arg2, arg3)
}

// UpdateNetworkZone mocks base method.
func (m *MockInstanceServer) UpdateNetworkZone(arg0 string, arg1 api.NetworkZonePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkZone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkZone indicates an expected call of UpdateNetworkZone.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkZone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkZone), arg0, arg1, arg2)
}

// UpdateNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) UpdateNetworkZoneRecord(arg0, arg1 string, arg2 api.NetworkZoneRecordPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkZoneRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkZoneRecord indicates an expected call of UpdateNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkZoneRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkZoneRecord), arg0, arg1, arg2, arg3)
}

// UpdateProfile mocks base method.
func (m *MockInstanceServer) UpdateProfile(arg0 string, arg1 api.ProfilePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockInstanceServerMockRecorder) UpdateProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProfile), arg0, arg1, arg2)
}

// UpdateProject mocks base method.
func (m *MockInstanceServer) UpdateProject(arg0 string, arg1 api.ProjectPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockInstanceServerMockRecorder) UpdateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProject), arg0, arg1, arg2)
}

// UpdateServer mocks base method.
func (m *MockInstanceServer) UpdateServer(arg0 api.ServerPut, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockInstanceServerMockRecorder) UpdateServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateServer), arg0, arg1)
}

// UpdateStoragePool mocks base method.
func (m *MockInstanceServer) UpdateStoragePool(arg0 string, arg1 api.StoragePoolPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePool", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePool indicates an expected call of UpdateStoragePool.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePool(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePool), arg0, arg1, arg2)
}

// UpdateStoragePoolBucket mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolBucket(arg0, arg1 string, arg2 api.StorageBucketPut, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolBucket", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolBucket indicates an expected call of UpdateStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolBucket(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolBucket), arg0, arg1, arg2, arg3)
}

// UpdateStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolBucketKey(arg0, arg1, arg2 string, arg3 api.StorageBucketKeyPut, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolBucketKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolBucketKey indicates an expected call of UpdateStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolBucketKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolBucketKey), arg0, arg1, arg2, arg3, arg4)
}

// UpdateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolVolume(arg0, arg1, arg2 string, arg3 api.StorageVolumePut, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolume indicates an expected call of UpdateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
}

// UpdateStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string, arg4 api.StorageVolumeSnapshotPut, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolumeSnapshot indicates an expected call of UpdateStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateWarning mocks base method.
func (m *MockInstanceServer) UpdateWarning(arg0 string, arg1 api.WarningPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarning", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarning indicates an expected call of UpdateWarning.
func (mr *MockInstanceServerMockRecorder) UpdateWarning(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarning", reflect.TypeOf((*MockInstanceServer)(nil).UpdateWarning), arg0, arg1, arg2)
}

// UseProject mocks base method.
func (m *MockInstanceServer) UseProject(arg0 string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseProject", arg0)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseProject indicates an expected call of UseProject.
func (mr *MockInstanceServerMockRecorder) UseProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseProject", reflect.TypeOf((*MockInstanceServer)(nil).UseProject), arg0)
}

// UseTarget mocks base method.
func (m *MockInstanceServer) UseTarget(arg0 string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTarget", arg0)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseTarget indicates an expected call of UseTarget.
func (mr *MockInstanceServerMockRecorder) UseTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTarget", reflect.TypeOf((*MockInstanceServer)(nil).UseTarget), arg0)
}
