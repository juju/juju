name: "Smoke"
on:
  push:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

jobs:

  smoke:
    name: Smoke
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:

    - name: Install Dependencies
      shell: bash
      run: |
        set -euxo pipefail
        sudo apt-get remove lxd lxd-client
        sudo snap install snapcraft --classic
        sudo snap install lxd
        sudo lxd waitready
        sudo lxd init --auto
        sudo chmod a+wr /var/snap/lxd/common/lxd/unix.socket
        echo "/snap/bin" >> $GITHUB_PATH
        lxc network set lxdbr0 ipv6.address none

    - name: Checkout
      uses: actions/checkout@v3

    - name: Find required go version
      id: go-version
      run: |
        set -euxo pipefail
        echo "::set-output name=version::$(grep '^go ' go.mod | awk '{print $2}')"

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ steps.go-version.outputs.version }}
      id: go

    - name: Build snap
      shell: bash
      run: |
        set -euxo pipefail
        snapcraft --use-lxd

    - name: Install snap
      shell: bash
      run: |
        set -euxo pipefail
        sudo snap install *.snap --dangerous
        # Since we're installing dangerously, we need to
        # manually grant permissions to juju
        sudo snap connect juju:lxd lxd
        sudo snap connect juju:dot-local-share-juju
        sudo snap connect juju:ssh-public-keys
        snap connections juju

    - name: Smoke Test
      shell: bash
      run: |
        cd tests
        ./main.sh -v smoke

  Upgrade:
    name: Upgrade
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        snap_version: ["3.0/stable"]
        model_type: ["localhost", "microk8s"]
    env:
      CHARM_localhost: apache2
      CHARM_microk8s: elasticsearch-k8s
      DOCKER_REGISTRY: 10.152.183.69

    steps:

    - name: PreCheck
      shell: bash
      run: |
        set -ux
        set +e
        OUT=$(snap info juju | grep -E "${{ matrix.snap_version }}:[[:space:]]+\^" || echo "NOT FOUND")
        set -e
        if [ "$OUT" = "NOT FOUND" ]; then
          echo "RUN_TEST=NO_BASE_VERSION" >> $GITHUB_ENV
        else
          echo "RUN_TEST=RUN" >> $GITHUB_ENV
        fi

    - name: Install Dependencies
      if: env.RUN_TEST == 'RUN'
      shell: bash
      run: |
        set -euxo pipefail
        sudo apt-get remove lxd lxd-client
        sudo snap install snapcraft --classic
        sudo snap install lxd
        sudo snap install yq
        sudo snap install juju --classic --channel=${{ matrix.snap_version }}

        sudo lxd waitready
        sudo lxd init --auto
        sudo chmod a+wr /var/snap/lxd/common/lxd/unix.socket
        lxc network set lxdbr0 ipv6.address none
        echo "/snap/bin" >> $GITHUB_PATH

    - name: Checkout
      if: env.RUN_TEST == 'RUN'
      uses: actions/checkout@v3

    - name: Set some variables
      if: env.RUN_TEST == 'RUN'
      run: |
        set -euxo pipefail

        echo "::set-output name=go-version::$(grep '^go ' go.mod | awk '{print $2}')"
        echo "::set-output name=base-juju-version::$(juju version | cut -d '-' -f 1)"
        upstreamJujuVersion=$(grep -r "const version =" version/version.go | sed -r 's/^const version = \"(.*)\"$/\1/')
        echo "::set-output name=upstream-juju-version::${upstreamJujuVersion}"
        currentStableChannel="$(echo $upstreamJujuVersion | cut -d'.' -f1,2)/stable"
        currentStableVersion=$(snap info juju | yq ".channels[\"$currentStableChannel\"]" | cut -d' ' -f1)
        echo "::set-output name=current-stable-juju-version::$currentStableVersion"
        echo "::set-output name=juju-db-version::4.0"
      id: vars

    - name: Set up Go
      if: env.RUN_TEST == 'RUN'
      uses: actions/setup-go@v3
      with:
        go-version: ${{ steps.vars.outputs.go-version }}

    - name: Setup k8s
      if: env.RUN_TEST == 'RUN' && matrix.model_type == 'microk8s'
      uses: balchua/microk8s-actions@v0.2.2
      with:
        channel: "1.23/stable"
        addons: '["dns", "storage"]'

    - name: Setup local caas registry
      if: env.RUN_TEST == 'RUN' && matrix.model_type == 'microk8s'
      run: |
        set -euxo pipefail

        # Become a CA
        mkdir ~/certs
        sudo cp /var/snap/microk8s/current/certs/ca.crt ~/certs/
        sudo cp /var/snap/microk8s/current/certs/ca.key ~/certs/
        sudo chmod a+wr ~/certs/ca.crt
        sudo chmod a+wr ~/certs/ca.key

        # Recognise CA
        sudo cp ~/certs/ca.crt /usr/local/share/ca-certificates
        sudo update-ca-certificates

        sudo mkdir -p /etc/docker/certs.d/${DOCKER_REGISTRY}/
        sudo cp ~/certs/ca.crt /etc/docker/certs.d/${DOCKER_REGISTRY}/

        # Generate certs
        openssl req -nodes -newkey rsa:2048 -keyout ~/certs/registry.key -out ~/certs/registry.csr -subj "/CN=registry"

        openssl x509 -req -in ~/certs/registry.csr -CA ~/certs/ca.crt -CAkey ~/certs/ca.key \
          -out ~/certs/registry.crt -CAcreateserial -days 365 -sha256 -extfile .github/registry.ext

        # Deploy registry
        sg microk8s "microk8s kubectl create -f .github/reg.yml"

        # TODO:(jack-w-shaw) Figure out why we need this and do something nicer
        sudo microk8s refresh-certs --cert ca.crt
        sudo microk8s refresh-certs --cert server.crt

        # Wait for registry
        sg microk8s "microk8s kubectl wait --for condition=available deployment registry -n container-registry --timeout 180s" || true
        sg microk8s "microk8s kubectl describe pod -n container-registry"
        curl https://${DOCKER_REGISTRY}/v2/

    - name: Mirror docker images required for juju bootstrap
      if: env.RUN_TEST == 'RUN' && matrix.model_type == 'microk8s'
      env:
        BASE_JUJU_TAG: ${{ steps.vars.outputs.base-juju-version }}
        JUJU_DB_TAG: ${{ steps.vars.outputs.juju-db-version }}
      run: |
        set -euxo pipefail

        # Shim in recognition for our CA to jujud-operator
        cat >~/Dockerfile <<EOL
          FROM jujusolutions/jujud-operator:${BASE_JUJU_TAG}

          COPY certs/ca.crt /usr/local/share/ca-certificates/ca.crt

          RUN update-ca-certificates
        EOL
        docker build ~ -t ${DOCKER_REGISTRY}/test-repo/jujud-operator:${BASE_JUJU_TAG}
        docker push ${DOCKER_REGISTRY}/test-repo/jujud-operator:${BASE_JUJU_TAG}

        docker pull jujusolutions/juju-db:${JUJU_DB_TAG}
        docker tag jujusolutions/juju-db:${JUJU_DB_TAG} ${DOCKER_REGISTRY}/test-repo/juju-db:${JUJU_DB_TAG}
        docker push ${DOCKER_REGISTRY}/test-repo/juju-db:${JUJU_DB_TAG}

    - name: Bootstrap Juju - localhost
      if: env.RUN_TEST == 'RUN' && matrix.model_type == 'localhost'
      shell: bash
      run: |
        set -euxo pipefail

        juju bootstrap localhost c
        juju add-model m

        juju status
        juju version

    - name: Bootstrap Juju - microk8s
      if: env.RUN_TEST == 'RUN' && matrix.model_type == 'microk8s'
      env:
        JUJU_DB_TAG: ${{ steps.vars.outputs.juju-db-version }}

      # TODO: Enabling developer-mode is a bit of a hack to get this working for now.
      # Ideally, we would mock our own simplestream, similar to Jenkins, to select
      # and filter with as standard, instead of skipping over them with this flag
      run: |
        set -euxo pipefail

        sg microk8s <<EOF
          juju bootstrap microk8s c \
            --config caas-image-repo="${DOCKER_REGISTRY}/test-repo" \
            --config features="[developer-mode]"
        EOF
        juju add-model m

        juju status
        juju version

    # The `wait-for` plugin is used after deploying an application
    # This was added in Juju 2.9, so it's not installed by the 2.8 snap
    # However we just need to install the `wait-for` binary ourselves,
    # and then Juju 2.8 can use it (amazing!)
    - name: Add `wait-for` plugin
      if: env.RUN_TEST == 'RUN'
      shell: bash
      run: |
        # Download a stable version of Juju
        curl -L -O https://github.com/juju/juju/archive/refs/tags/juju-2.9.29.tar.gz
        tar -xf juju-2.9.29.tar.gz
        cd juju-juju-2.9.29/
        go install github.com/juju/juju/cmd/plugins/juju-wait-for
        cd ..

    - name: Deploy some applications
      if: env.RUN_TEST == 'RUN'
      shell: bash
      run: |
        set -euxo pipefail

        # Required for elasticsearch
        sudo sysctl -w vm.max_map_count=262144

        juju deploy ${CHARM_${{ matrix.model_type }}}

        juju wait-for application ${CHARM_${{ matrix.model_type }}}

        .github/verify-${CHARM_${{ matrix.model_type }}}.sh 30

    - name: Build snap
      if: env.RUN_TEST == 'RUN'
      shell: bash
      run: |
        set -euxo pipefail
        snapcraft --use-lxd

    - name: Install snap
      if: env.RUN_TEST == 'RUN'
      shell: bash
      run: |
        set -euxo pipefail
        sudo snap install juju*.snap --dangerous --classic

    - name: Build jujud image
      if: env.RUN_TEST == 'RUN' && matrix.model_type == 'microk8s'
      env:
        UPSTREAM_JUJU_TAG: ${{ steps.vars.outputs.upstream-juju-version }}
        CURRENT_STABLE_JUJU_TAG: ${{ steps.vars.outputs.current-stable-juju-version }}
      run: |
        set -euxo pipefail

        make operator-image

        # Shim in recognition for our CA to jujud-operator
        cat >~/Dockerfile <<EOL
          FROM jujusolutions/jujud-operator:${UPSTREAM_JUJU_TAG}

          COPY certs/ca.crt /usr/local/share/ca-certificates/ca.crt

          RUN update-ca-certificates
        EOL
        docker build ~ -t ${DOCKER_REGISTRY}/test-repo/jujud-operator:${UPSTREAM_JUJU_TAG}
        docker push ${DOCKER_REGISTRY}/test-repo/jujud-operator:${UPSTREAM_JUJU_TAG}
        
        cat >~/Dockerfile <<EOL
          FROM jujusolutions/jujud-operator:${CURRENT_STABLE_JUJU_TAG}

          COPY certs/ca.crt /usr/local/share/ca-certificates/ca.crt

          RUN update-ca-certificates
        EOL
        docker build ~ -t ${DOCKER_REGISTRY}/test-repo/jujud-operator:${CURRENT_STABLE_JUJU_TAG}
        docker push ${DOCKER_REGISTRY}/test-repo/jujud-operator:${CURRENT_STABLE_JUJU_TAG}

    - name: Preflight
      if: env.RUN_TEST == 'RUN'
      shell: bash
      run: |
        set -euxo pipefail
        juju status
        juju version

    - name: Test upgrade controller
      if: env.RUN_TEST == 'RUN'
      shell: bash
      env:
        UPSTREAM_JUJU_TAG: ${{ steps.vars.outputs.upstream-juju-version }}
        CURRENT_STABLE_JUJU_TAG: ${{ steps.vars.outputs.current-stable-juju-version }}
        UPGRADE_PARAMS_localhost: ""
        UPGRADE_PARAMS_microk8s: "--agent-stream=develop --debug"
      run: |
        set -euxo pipefail

        # Upgrade to the latest stable.
        juju upgrade-controller --debug
        
        attempt=0
        while true; do
          UPDATED=$((juju show-controller --format=json || echo "") | jq -r '.c.details."agent-version"')
          if [[ $UPDATED == $CURRENT_STABLE_JUJU_TAG* ]]; then
              break
          fi
          sleep 10
          attempt=$((attempt+1))
          if [ "$attempt" -eq 48 ]; then
              echo "Upgrade controller timed out"
              exit 1
          fi
        done
        
        # Upgrade to local built version.
        juju upgrade-controller ${UPGRADE_PARAMS_${{ matrix.model_type }}}

        attempt=0
        while true; do
          UPDATED=$((juju show-controller --format=json || echo "") | jq -r '.c.details."agent-version"')
          if [[ $UPDATED == $UPSTREAM_JUJU_TAG* ]]; then
              break
          fi
          sleep 10
          attempt=$((attempt+1))
          if [ "$attempt" -eq 48 ]; then
              echo "Upgrade controller timed out"
              exit 1
          fi
        done

        PANIC=$(juju debug-log --replay --no-tail -m controller | grep "panic" || true)
        if [ "$PANIC" != "" ]; then
            echo "Panic found:"
            juju debug-log --replay --no-tail -m controller
            exit 1
        fi

        .github/verify-${CHARM_${{ matrix.model_type }}}.sh 30

    - name: Test upgrade model
      if: env.RUN_TEST == 'RUN'
      shell: bash
      env:
        UPSTREAM_JUJU_TAG: ${{ steps.vars.outputs.upstream-juju-version }}
      run: |
        set -euxo pipefail

        while true; do
          juju upgrade-model 2>&1 | tee output.log || true
          RES=$(cat output.log | grep "upgrade in progress" || echo "NOT-UPGRADING")
          if [ "$RES" = "NOT-UPGRADING" ]; then
            break
          fi
        done

        attempt=0
        while true; do
          UPDATED=$((juju show-model m --format=json || echo "") | jq -r '.m."agent-version"')
          if [[ $UPDATED == $UPSTREAM_JUJU_TAG* ]]; then
            break
          fi
          sleep 10
          attempt=$((attempt+1))
          if [ "$attempt" -eq 48 ]; then
            echo "Upgrade model timed out"
            exit 1
          fi
        done

        PANIC=$(juju debug-log --replay --no-tail | grep "panic" || true)
        if [ "$PANIC" != "" ]; then
          echo "Panic found:"
          juju debug-log --replay --no-tail
          exit 1
        fi

        .github/verify-${CHARM_${{ matrix.model_type }}}.sh 30

    - name: Wrap up
      if: env.RUN_TEST == 'RUN'
      run: |
        set -euxo pipefail

        juju version
        juju status

        sg microk8s "microk8s kubectl get all -A" || true
        lxc ls || true
