name: "Client Tests"
on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  test-client:
    name: "Client Tests"
    runs-on: [self-hosted, linux, "${{ matrix.platform.host_arch }}", aws, xxlarge]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { os: linux, arch: amd64, host_arch: x64 }
          - { os: darwin, arch: arm64, host_arch: arm64 }

    steps:
    - name: "Checkout"
      uses: actions/checkout@v4

    - name: "Set up Go"
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: "Install musl & dqlite (Ubuntu)"
      if: (matrix.platform.os == 'linux')
      shell: bash
      run: |
        go version
        make MUSL_CROSS_COMPILE=0 musl-install dqlite-install
    
    - name: "Install dependencies (Ubuntu)"
      if: (matrix.platform.os == 'linux')
      shell: bash
      run: |
        sudo make install-mongo-dependencies install-sqlite3-dependencies

    - name: "Install go dependencies (Ubuntu)"
      if: (matrix.platform.os == 'linux')
      shell: bash
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@v0.5.1
        go install github.com/axw/gocov/gocov@v1.1.0
        go install github.com/AlekSi/gocov-xml@v1.1.0

    - name: "Test client (Ubuntu)"
      if: (matrix.platform.os == 'linux')
      shell: bash
      run: |
        COVERAGE_CHECK=1 TEST_TIMEOUT="30m" make run-go-tests
        gocov convert coverage.txt > coverage.json
        # Annoyingly, the coverage.xml file needs to be in a .coverage folder.
        mkdir .coverage
        gocov-xml < coverage.json > .coverage/coverage.xml

    - name: "TICS (Ubuntu)"
      if: (matrix.platform.os == 'linux')
      uses: tiobe/tics-github-action@v3
      continue-on-error: true
      with:
        mode: qserver
        viewerUrl: https://canonical.tiobe.com/tiobeweb/TICS/api/cfg?name=default
        ticsAuthToken: ${{ secrets.TICSAUTHTOKEN }}
        project: juju
        installTics: true
        branchname: main

    - name: "Test client (macOS)"
      if: (matrix.platform.os == 'darwin')
      shell: bash
      run: |
        go test -race -v ./cmd/juju/... -check.v -coverprofile=coverage.txt -covermode=atomic -timeout=15m
        go test -race -v ./cmd/plugins/... -check.v -coverprofile=coverage.txt -covermode=atomic -timeout=15m
