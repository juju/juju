name: "Client Tests"
on:
  push:
    paths-ignore:
      - 'acceptancetests/**'
      - 'doc/**'
      - 'snap/**'
      - 'testcharms/**'
      - 'testing/**'
      - 'tests/**'
  pull_request:
    paths-ignore:
      - 'acceptancetests/**'
      - 'doc/**'
      - 'snap/**'
      - 'testcharms/**'
      - 'testing/**'
      - 'tests/**'

jobs:

  test-client-ubuntu:
    name: "Client Tests"
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        # windows tests is disabled because we require a certain version of
        # mongo (that's actually going away now though), and choclately was
        # failing to install it correctly.
        # os: [ubuntu-latest, macOS-latest, windows-latest]
        os: [ubuntu-latest, macOS-latest]

    steps:

    - name: Checkout
      uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3

    - name: Find required go version
      id: go-version
      run: |
        set -euxo pipefail
        echo "::set-output name=version::$(grep '^go ' go.mod | awk '{print $2}')"

    - name: Set up Go
      uses: actions/setup-go@f6164bd8c8acb4a71fb2791a8b6c4024ff038dab # v3
      with:
        go-version: ${{ steps.go-version.outputs.version }}
      id: go

    - name: "Install Mongo Dependencies: ubuntu-latest"
      if: (matrix.os == 'ubuntu-latest')
      run: |
        make install-mongo-dependencies

    - name: "Remove Mongo Dependencies: windows-latest"
      if: (matrix.os == 'windows-latest')
      uses: crazy-max/ghaction-chocolatey@e80bd39bb49cae70b67ea53d52d00833a7255c21 # v1
      with:
        args: uninstall mongodb mongodb.install -y --all-versions

    - name: "Install Mongo Dependencies: windows-latest"
      if: (matrix.os == 'windows-latest')
      uses: crazy-max/ghaction-chocolatey@e80bd39bb49cae70b67ea53d52d00833a7255c21 # v1
      with:
        args: install mongodb.install --version=4.4.11 --allow-downgrade

    - name: "Test client: macOS-latest"
      if: (matrix.os == 'macOS-latest')
      run: |
        # There is a concurrency issue with macos setup for the "./cmd/juju/..." packages.
        # So we have to limit amount of used CPUs and therefore parallelization
        go test -v -p 1 ./cmd/juju/... -check.v
        go test -v  ./cmd/plugins/... -check.v
      shell: bash

    - name: "Test client: ubuntu-latest"
      if: (matrix.os == 'ubuntu-latest')
      run: |
        # Jenkins can perform the full jujud testing.
        go test -v ./cmd/juju/... -check.v -coverprofile=coverage.txt -covermode=atomic
        go test -v ./cmd/plugins/... -check.v
      shell: bash
