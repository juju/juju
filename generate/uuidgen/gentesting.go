// Copyright 2025 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

package main

import (
	"os"
	"path"
	"strings"

	"github.com/juju/collections/transform"
)

// GenUUIDType represents metadata for generating UUID types in the context of
// file generation and testing.
type GenUUIDType struct {
	UUIDType
	Package string
}

// GenHeaderParams represents metadata for generating the header of the
// generated file.
type GenHeaderParams struct {
	UUIDPackage string
	mainparams  FileParams
}

// HeaderData implements [renderable]
func (g GenHeaderParams) HeaderData() GenHeaderParams {
	return g
}

// SubDatas implements [renderable]
func (g GenHeaderParams) SubDatas() []GenUUIDType {
	return transform.Slice(g.mainparams.types,
		func(uuidType UUIDType) GenUUIDType {
			return GenUUIDType{UUIDType: uuidType, Package: g.mainparams.Package}
		})
}

// Template for the generated file header.
const genHeaderTemplate = `// Code generated by generate/uuidgen; DO NOT EDIT.
// Copyright 2025 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

package testing

import (
	"github.com/juju/tc"

	"github.com/juju/juju/{{.UUIDPackage}}"
)
`

// Template for the generated file methods.
const genMethodTemplate = `

// Gen{{.TypeName}} can be used in testing for generating a {{.Description}} UUID
// that is checked for subsequent errors using the test suit's go check
// instance.
func Gen{{.TypeName}}(c *tc.C) {{.Package}}.{{.TypeName}} {
	id, err := {{.Package}}.New{{.TypeName}}()
	c.Assert(err, tc.ErrorIsNil)
	return id
}
`

// generateTestGenFile generates a test utility file for UUID types based on the
// provided parameters and writes it to disk.
// Arguments:
//   - outputFile: The path where the generated test file will be created.
//   - params: Contains the package information and a list of UUID types with
//     their names and descriptions.
func generateTestGenFile(outputFile string, params FileParams) {
	// Compute generated uuid package
	uuidPackage := findUUIDPackage()

	outputFile = path.Join(path.Dir(outputFile), "testing", path.Base(outputFile))
	render := newRenderer[GenHeaderParams, GenUUIDType](genHeaderTemplate,
		genMethodTemplate)
	render(outputFile, GenHeaderParams{UUIDPackage: uuidPackage, mainparams: params})
}

// findUUIDPackage returns the name of the uuid package related to this helper.
func findUUIDPackage() string {

	fullPath, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	// Find the last occurrence of "/juju/"
	lastJujuIndex := strings.LastIndex(fullPath, "juju/")
	if lastJujuIndex == -1 {
		panic("unexpected file path (should be a subdirectory of a juju project): " + fullPath)
	}

	// Extract everything after the last "juju/"
	return fullPath[lastJujuIndex+5:] // +5 to skip "juju/"
}
