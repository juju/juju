// Copyright 2025 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

package main

import (
	"path"
	"strings"

	"github.com/juju/collections/transform"
)

// TestUUIDType represents metadata for generating test for UUID types
type TestUUIDType struct {
	UUIDType
	TypeNameLowerCase string
}

// TestHeaderParams represents metadata for generating the header of the
// generated test file.
type TestHeaderParams FileParams

// HeaderData implements [renderable]
func (g TestHeaderParams) HeaderData() TestHeaderParams {
	return g
}

// SubDatas implements [renderable]
func (g TestHeaderParams) SubDatas() []TestUUIDType {
	lower := func(s string) string {
		if strings.HasPrefix(s, "UUID") {
			return strings.ToLower(s[:4]) + s[4:]
		}
		return strings.ToLower(s[:1]) + s[1:]
	}
	return transform.Slice(g.types,
		func(uuidType UUIDType) TestUUIDType {
			return TestUUIDType{
				UUIDType:          uuidType,
				TypeNameLowerCase: lower(uuidType.TypeName),
			}
		})
}

// Template for the generated test file header.
const testHeaderTemplate = `// Code generated by generate/uuidgen; DO NOT EDIT.
// Copyright 2025 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

package {{.Package}}

import (
	"github.com/juju/tc"

	"github.com/juju/juju/core/errors"
	"github.com/juju/juju/internal/testhelpers"
	"github.com/juju/juju/internal/uuid"
)
`

// Template for the generated file types.
const testUUIDTypeTemplate = `
type {{.TypeNameLowerCase}}Suite struct {
	testhelpers.IsolationSuite
}

var _ = tc.Suite(&{{.TypeNameLowerCase}}Suite{})

func (*{{.TypeNameLowerCase}}Suite) TestValidate(c *tc.C) {
	// Test that the uuid.Validate method succeeds and
	// fails as expected.
	tests := []struct {
		uuid string
		err  error
	}{
		{
			uuid: "",
			err:  errors.NotValid,
		},
		{
			uuid: "invalid",
			err:  errors.NotValid,
		},
		{
			uuid: uuid.MustNewUUID().String(),
		},
	}

	for i, test := range tests {
		c.Logf("test %d: %q", i, test.uuid)
		err := {{.TypeName}}(test.uuid).Validate()

		if test.err == nil {
			c.Check(err, tc.IsNil)
			continue
		}

		c.Check(err, tc.ErrorIs, test.err)
	}
}
`

func generateTestTypeFile(outputFile string, params FileParams) {
	ext := path.Ext(outputFile)
	outputFile = outputFile[:len(outputFile)-len(ext)] + "_test" + ext
	render := newRenderer[TestHeaderParams, TestUUIDType](testHeaderTemplate,
		testUUIDTypeTemplate)
	render(outputFile, TestHeaderParams(params))
}
