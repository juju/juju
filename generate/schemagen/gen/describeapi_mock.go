// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/generate/schemagen/gen (interfaces: APIServer,Registry,PackageRegistry,Linker)
//
// Generated by this command:
//
//	mockgen -typed -package gen -destination describeapi_mock.go -write_package_comment=false github.com/juju/juju/generate/schemagen/gen APIServer,Registry,PackageRegistry,Linker
//

package gen

import (
	reflect "reflect"

	facade "github.com/juju/juju/apiserver/facade"
	gomock "go.uber.org/mock/gomock"
	packages "golang.org/x/tools/go/packages"
)

// MockAPIServer is a mock of APIServer interface.
type MockAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockAPIServerMockRecorder
}

// MockAPIServerMockRecorder is the mock recorder for MockAPIServer.
type MockAPIServerMockRecorder struct {
	mock *MockAPIServer
}

// NewMockAPIServer creates a new mock instance.
func NewMockAPIServer(ctrl *gomock.Controller) *MockAPIServer {
	mock := &MockAPIServer{ctrl: ctrl}
	mock.recorder = &MockAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIServer) EXPECT() *MockAPIServerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAPIServer) ISGOMOCK() struct{} {
	return struct{}{}
}

// AdminFacadeDetails mocks base method.
func (m *MockAPIServer) AdminFacadeDetails() []facade.Details {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminFacadeDetails")
	ret0, _ := ret[0].([]facade.Details)
	return ret0
}

// AdminFacadeDetails indicates an expected call of AdminFacadeDetails.
func (mr *MockAPIServerMockRecorder) AdminFacadeDetails() *MockAPIServerAdminFacadeDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminFacadeDetails", reflect.TypeOf((*MockAPIServer)(nil).AdminFacadeDetails))
	return &MockAPIServerAdminFacadeDetailsCall{Call: call}
}

// MockAPIServerAdminFacadeDetailsCall wrap *gomock.Call
type MockAPIServerAdminFacadeDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIServerAdminFacadeDetailsCall) Return(arg0 []facade.Details) *MockAPIServerAdminFacadeDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIServerAdminFacadeDetailsCall) Do(f func() []facade.Details) *MockAPIServerAdminFacadeDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIServerAdminFacadeDetailsCall) DoAndReturn(f func() []facade.Details) *MockAPIServerAdminFacadeDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllFacades mocks base method.
func (m *MockAPIServer) AllFacades() Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllFacades")
	ret0, _ := ret[0].(Registry)
	return ret0
}

// AllFacades indicates an expected call of AllFacades.
func (mr *MockAPIServerMockRecorder) AllFacades() *MockAPIServerAllFacadesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFacades", reflect.TypeOf((*MockAPIServer)(nil).AllFacades))
	return &MockAPIServerAllFacadesCall{Call: call}
}

// MockAPIServerAllFacadesCall wrap *gomock.Call
type MockAPIServerAllFacadesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIServerAllFacadesCall) Return(arg0 Registry) *MockAPIServerAllFacadesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIServerAllFacadesCall) Do(f func() Registry) *MockAPIServerAllFacadesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIServerAllFacadesCall) DoAndReturn(f func() Registry) *MockAPIServerAllFacadesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRegistry) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetType mocks base method.
func (m *MockRegistry) GetType(arg0 string, arg1 int) (reflect.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType", arg0, arg1)
	ret0, _ := ret[0].(reflect.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetType indicates an expected call of GetType.
func (mr *MockRegistryMockRecorder) GetType(arg0, arg1 any) *MockRegistryGetTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockRegistry)(nil).GetType), arg0, arg1)
	return &MockRegistryGetTypeCall{Call: call}
}

// MockRegistryGetTypeCall wrap *gomock.Call
type MockRegistryGetTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryGetTypeCall) Return(arg0 reflect.Type, arg1 error) *MockRegistryGetTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryGetTypeCall) Do(f func(string, int) (reflect.Type, error)) *MockRegistryGetTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryGetTypeCall) DoAndReturn(f func(string, int) (reflect.Type, error)) *MockRegistryGetTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockRegistry) List() []facade.Description {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]facade.Description)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRegistryMockRecorder) List() *MockRegistryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistry)(nil).List))
	return &MockRegistryListCall{Call: call}
}

// MockRegistryListCall wrap *gomock.Call
type MockRegistryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryListCall) Return(arg0 []facade.Description) *MockRegistryListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryListCall) Do(f func() []facade.Description) *MockRegistryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryListCall) DoAndReturn(f func() []facade.Description) *MockRegistryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDetails mocks base method.
func (m *MockRegistry) ListDetails() []facade.Details {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDetails")
	ret0, _ := ret[0].([]facade.Details)
	return ret0
}

// ListDetails indicates an expected call of ListDetails.
func (mr *MockRegistryMockRecorder) ListDetails() *MockRegistryListDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetails", reflect.TypeOf((*MockRegistry)(nil).ListDetails))
	return &MockRegistryListDetailsCall{Call: call}
}

// MockRegistryListDetailsCall wrap *gomock.Call
type MockRegistryListDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryListDetailsCall) Return(arg0 []facade.Details) *MockRegistryListDetailsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryListDetailsCall) Do(f func() []facade.Details) *MockRegistryListDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryListDetailsCall) DoAndReturn(f func() []facade.Details) *MockRegistryListDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPackageRegistry is a mock of PackageRegistry interface.
type MockPackageRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockPackageRegistryMockRecorder
}

// MockPackageRegistryMockRecorder is the mock recorder for MockPackageRegistry.
type MockPackageRegistryMockRecorder struct {
	mock *MockPackageRegistry
}

// NewMockPackageRegistry creates a new mock instance.
func NewMockPackageRegistry(ctrl *gomock.Controller) *MockPackageRegistry {
	mock := &MockPackageRegistry{ctrl: ctrl}
	mock.recorder = &MockPackageRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageRegistry) EXPECT() *MockPackageRegistryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockPackageRegistry) ISGOMOCK() struct{} {
	return struct{}{}
}

// LoadPackage mocks base method.
func (m *MockPackageRegistry) LoadPackage() (*packages.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPackage")
	ret0, _ := ret[0].(*packages.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPackage indicates an expected call of LoadPackage.
func (mr *MockPackageRegistryMockRecorder) LoadPackage() *MockPackageRegistryLoadPackageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPackage", reflect.TypeOf((*MockPackageRegistry)(nil).LoadPackage))
	return &MockPackageRegistryLoadPackageCall{Call: call}
}

// MockPackageRegistryLoadPackageCall wrap *gomock.Call
type MockPackageRegistryLoadPackageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPackageRegistryLoadPackageCall) Return(arg0 *packages.Package, arg1 error) *MockPackageRegistryLoadPackageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPackageRegistryLoadPackageCall) Do(f func() (*packages.Package, error)) *MockPackageRegistryLoadPackageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPackageRegistryLoadPackageCall) DoAndReturn(f func() (*packages.Package, error)) *MockPackageRegistryLoadPackageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLinker is a mock of Linker interface.
type MockLinker struct {
	ctrl     *gomock.Controller
	recorder *MockLinkerMockRecorder
}

// MockLinkerMockRecorder is the mock recorder for MockLinker.
type MockLinkerMockRecorder struct {
	mock *MockLinker
}

// NewMockLinker creates a new mock instance.
func NewMockLinker(ctrl *gomock.Controller) *MockLinker {
	mock := &MockLinker{ctrl: ctrl}
	mock.recorder = &MockLinkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinker) EXPECT() *MockLinkerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinker) ISGOMOCK() struct{} {
	return struct{}{}
}

// Links mocks base method.
func (m *MockLinker) Links(arg0 string, arg1 facade.MultiModelFactory) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Links", arg0, arg1)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Links indicates an expected call of Links.
func (mr *MockLinkerMockRecorder) Links(arg0, arg1 any) *MockLinkerLinksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Links", reflect.TypeOf((*MockLinker)(nil).Links), arg0, arg1)
	return &MockLinkerLinksCall{Call: call}
}

// MockLinkerLinksCall wrap *gomock.Call
type MockLinkerLinksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkerLinksCall) Return(arg0 []string) *MockLinkerLinksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkerLinksCall) Do(f func(string, facade.MultiModelFactory) []string) *MockLinkerLinksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkerLinksCall) DoAndReturn(f func(string, facade.MultiModelFactory) []string) *MockLinkerLinksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
