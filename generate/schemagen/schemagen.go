// Copyright 2019 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"os"
	"time"

	"github.com/juju/juju/apiserver"
	"github.com/juju/juju/generate/schemagen/gen"
)

var fileTemplate = `
// Code generated by schemagen. DO NOT EDIT.
// Copyright {{.CopyrightYear}} Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

package {{.Pkgname}}

// Generated code - do not edit.
const {{.ConstName}} = `

func main() {
	result, err := gen.Generate(apiServerShim{})
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	jsonSchema, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	t, err := template.New("").Parse(fileTemplate)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	year, _, _ := time.Now().Date()

	var buf bytes.Buffer
	content := struct {
		ConstName     string
		CopyrightYear string
		Pkgname       string
	}{
		ConstName:     os.Args[1],
		CopyrightYear: fmt.Sprintf("%d", year),
		Pkgname:       os.Args[2],
	}

	t.Execute(&buf, content)

	jsonContent := fmt.Sprintf("`%s\n`\n", jsonSchema)
	if _, err := buf.Write([]byte(jsonContent)); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	err = ioutil.WriteFile(os.Args[3], buf.Bytes(), 0644)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

type apiServerShim struct{}

func (apiServerShim) AllFacades() gen.Registry {
	return apiserver.AllFacades()
}
