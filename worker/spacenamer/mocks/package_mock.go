// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/spacenamer (interfaces: SpaceNamerAPI,Logger)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	watcher "github.com/juju/juju/core/watcher"
	reflect "reflect"
)

// MockSpaceNamerAPI is a mock of SpaceNamerAPI interface
type MockSpaceNamerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceNamerAPIMockRecorder
}

// MockSpaceNamerAPIMockRecorder is the mock recorder for MockSpaceNamerAPI
type MockSpaceNamerAPIMockRecorder struct {
	mock *MockSpaceNamerAPI
}

// NewMockSpaceNamerAPI creates a new mock instance
func NewMockSpaceNamerAPI(ctrl *gomock.Controller) *MockSpaceNamerAPI {
	mock := &MockSpaceNamerAPI{ctrl: ctrl}
	mock.recorder = &MockSpaceNamerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpaceNamerAPI) EXPECT() *MockSpaceNamerAPIMockRecorder {
	return m.recorder
}

// SetDefaultSpaceName mocks base method
func (m *MockSpaceNamerAPI) SetDefaultSpaceName() error {
	ret := m.ctrl.Call(m, "SetDefaultSpaceName")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultSpaceName indicates an expected call of SetDefaultSpaceName
func (mr *MockSpaceNamerAPIMockRecorder) SetDefaultSpaceName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultSpaceName", reflect.TypeOf((*MockSpaceNamerAPI)(nil).SetDefaultSpaceName))
}

// WatchDefaultSpaceConfig mocks base method
func (m *MockSpaceNamerAPI) WatchDefaultSpaceConfig() (watcher.NotifyWatcher, error) {
	ret := m.ctrl.Call(m, "WatchDefaultSpaceConfig")
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchDefaultSpaceConfig indicates an expected call of WatchDefaultSpaceConfig
func (mr *MockSpaceNamerAPIMockRecorder) WatchDefaultSpaceConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDefaultSpaceConfig", reflect.TypeOf((*MockSpaceNamerAPI)(nil).WatchDefaultSpaceConfig))
}

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method
func (m *MockLogger) Debugf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf
func (mr *MockLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method
func (m *MockLogger) Errorf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf
func (mr *MockLoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Infof mocks base method
func (m *MockLogger) Infof(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof
func (mr *MockLoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Warningf mocks base method
func (m *MockLogger) Warningf(arg0 string, arg1 ...interface{}) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf
func (mr *MockLoggerMockRecorder) Warningf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockLogger)(nil).Warningf), varargs...)
}
