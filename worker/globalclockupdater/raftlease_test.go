// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/raftlease (interfaces: ReadOnlyClock,FSMResponse)

// Package globalclockupdater is a generated GoMock package.
package globalclockupdater

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockReadOnlyClock is a mock of ReadOnlyClock interface.
type MockReadOnlyClock struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyClockMockRecorder
}

// MockReadOnlyClockMockRecorder is the mock recorder for MockReadOnlyClock.
type MockReadOnlyClockMockRecorder struct {
	mock *MockReadOnlyClock
}

// NewMockReadOnlyClock creates a new mock instance.
func NewMockReadOnlyClock(ctrl *gomock.Controller) *MockReadOnlyClock {
	mock := &MockReadOnlyClock{ctrl: ctrl}
	mock.recorder = &MockReadOnlyClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOnlyClock) EXPECT() *MockReadOnlyClockMockRecorder {
	return m.recorder
}

// GlobalTime mocks base method.
func (m *MockReadOnlyClock) GlobalTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GlobalTime indicates an expected call of GlobalTime.
func (mr *MockReadOnlyClockMockRecorder) GlobalTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalTime", reflect.TypeOf((*MockReadOnlyClock)(nil).GlobalTime))
}

// MockFSMResponse is a mock of FSMResponse interface.
type MockFSMResponse struct {
	ctrl     *gomock.Controller
	recorder *MockFSMResponseMockRecorder
}

// MockFSMResponseMockRecorder is the mock recorder for MockFSMResponse.
type MockFSMResponseMockRecorder struct {
	mock *MockFSMResponse
}

// NewMockFSMResponse creates a new mock instance.
func NewMockFSMResponse(ctrl *gomock.Controller) *MockFSMResponse {
	mock := &MockFSMResponse{ctrl: ctrl}
	mock.recorder = &MockFSMResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSMResponse) EXPECT() *MockFSMResponseMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockFSMResponse) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockFSMResponseMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockFSMResponse)(nil).Error))
}
