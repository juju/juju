// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/raftlease (interfaces: NotifyTarget,FSMResponse)

// Package raft is a generated GoMock package.
package raft

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lease "github.com/juju/juju/core/lease"
	raftlease "github.com/juju/juju/core/raftlease"
)

// MockNotifyTarget is a mock of NotifyTarget interface.
type MockNotifyTarget struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyTargetMockRecorder
}

// MockNotifyTargetMockRecorder is the mock recorder for MockNotifyTarget.
type MockNotifyTargetMockRecorder struct {
	mock *MockNotifyTarget
}

// NewMockNotifyTarget creates a new mock instance.
func NewMockNotifyTarget(ctrl *gomock.Controller) *MockNotifyTarget {
	mock := &MockNotifyTarget{ctrl: ctrl}
	mock.recorder = &MockNotifyTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyTarget) EXPECT() *MockNotifyTargetMockRecorder {
	return m.recorder
}

// Claimed mocks base method.
func (m *MockNotifyTarget) Claimed(arg0 lease.Key, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claimed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Claimed indicates an expected call of Claimed.
func (mr *MockNotifyTargetMockRecorder) Claimed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claimed", reflect.TypeOf((*MockNotifyTarget)(nil).Claimed), arg0, arg1)
}

// Expiries mocks base method.
func (m *MockNotifyTarget) Expiries(arg0 []raftlease.Expired) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expiries", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expiries indicates an expected call of Expiries.
func (mr *MockNotifyTargetMockRecorder) Expiries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expiries", reflect.TypeOf((*MockNotifyTarget)(nil).Expiries), arg0)
}

// MockFSMResponse is a mock of FSMResponse interface.
type MockFSMResponse struct {
	ctrl     *gomock.Controller
	recorder *MockFSMResponseMockRecorder
}

// MockFSMResponseMockRecorder is the mock recorder for MockFSMResponse.
type MockFSMResponseMockRecorder struct {
	mock *MockFSMResponse
}

// NewMockFSMResponse creates a new mock instance.
func NewMockFSMResponse(ctrl *gomock.Controller) *MockFSMResponse {
	mock := &MockFSMResponse{ctrl: ctrl}
	mock.recorder = &MockFSMResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSMResponse) EXPECT() *MockFSMResponseMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockFSMResponse) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockFSMResponseMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockFSMResponse)(nil).Error))
}

// Notify mocks base method.
func (m *MockFSMResponse) Notify(arg0 raftlease.NotifyTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockFSMResponseMockRecorder) Notify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockFSMResponse)(nil).Notify), arg0)
}
