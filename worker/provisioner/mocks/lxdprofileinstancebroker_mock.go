// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/provisioner (interfaces: LXDProfileInstanceBroker)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	environs "github.com/juju/juju/environs"
	context "github.com/juju/juju/environs/context"
	instance "github.com/juju/juju/instance"
	charm_v6 "gopkg.in/juju/charm.v6"
	reflect "reflect"
)

// MockLXDProfileInstanceBroker is a mock of LXDProfileInstanceBroker interface
type MockLXDProfileInstanceBroker struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileInstanceBrokerMockRecorder
}

// MockLXDProfileInstanceBrokerMockRecorder is the mock recorder for MockLXDProfileInstanceBroker
type MockLXDProfileInstanceBrokerMockRecorder struct {
	mock *MockLXDProfileInstanceBroker
}

// NewMockLXDProfileInstanceBroker creates a new mock instance
func NewMockLXDProfileInstanceBroker(ctrl *gomock.Controller) *MockLXDProfileInstanceBroker {
	mock := &MockLXDProfileInstanceBroker{ctrl: ctrl}
	mock.recorder = &MockLXDProfileInstanceBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileInstanceBroker) EXPECT() *MockLXDProfileInstanceBrokerMockRecorder {
	return m.recorder
}

// AllInstances mocks base method
func (m *MockLXDProfileInstanceBroker) AllInstances(arg0 context.ProviderCallContext) ([]instance.Instance, error) {
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instance.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances
func (mr *MockLXDProfileInstanceBrokerMockRecorder) AllInstances(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockLXDProfileInstanceBroker)(nil).AllInstances), arg0)
}

// LXDProfileNames mocks base method
func (m *MockLXDProfileInstanceBroker) LXDProfileNames(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "LXDProfileNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LXDProfileNames indicates an expected call of LXDProfileNames
func (mr *MockLXDProfileInstanceBrokerMockRecorder) LXDProfileNames(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfileNames", reflect.TypeOf((*MockLXDProfileInstanceBroker)(nil).LXDProfileNames), arg0)
}

// MaintainInstance mocks base method
func (m *MockLXDProfileInstanceBroker) MaintainInstance(arg0 context.ProviderCallContext, arg1 environs.StartInstanceParams) error {
	ret := m.ctrl.Call(m, "MaintainInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaintainInstance indicates an expected call of MaintainInstance
func (mr *MockLXDProfileInstanceBrokerMockRecorder) MaintainInstance(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintainInstance", reflect.TypeOf((*MockLXDProfileInstanceBroker)(nil).MaintainInstance), arg0, arg1)
}

// MaybeWriteLXDProfile mocks base method
func (m *MockLXDProfileInstanceBroker) MaybeWriteLXDProfile(arg0 string, arg1 *charm_v6.LXDProfile) error {
	ret := m.ctrl.Call(m, "MaybeWriteLXDProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaybeWriteLXDProfile indicates an expected call of MaybeWriteLXDProfile
func (mr *MockLXDProfileInstanceBrokerMockRecorder) MaybeWriteLXDProfile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeWriteLXDProfile", reflect.TypeOf((*MockLXDProfileInstanceBroker)(nil).MaybeWriteLXDProfile), arg0, arg1)
}

// ReplaceOrAddInstanceProfile mocks base method
func (m *MockLXDProfileInstanceBroker) ReplaceOrAddInstanceProfile(arg0, arg1, arg2 string, arg3 *charm_v6.LXDProfile) ([]string, error) {
	ret := m.ctrl.Call(m, "ReplaceOrAddInstanceProfile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceOrAddInstanceProfile indicates an expected call of ReplaceOrAddInstanceProfile
func (mr *MockLXDProfileInstanceBrokerMockRecorder) ReplaceOrAddInstanceProfile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOrAddInstanceProfile", reflect.TypeOf((*MockLXDProfileInstanceBroker)(nil).ReplaceOrAddInstanceProfile), arg0, arg1, arg2, arg3)
}

// StartInstance mocks base method
func (m *MockLXDProfileInstanceBroker) StartInstance(arg0 context.ProviderCallContext, arg1 environs.StartInstanceParams) (*environs.StartInstanceResult, error) {
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1)
	ret0, _ := ret[0].(*environs.StartInstanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance
func (mr *MockLXDProfileInstanceBrokerMockRecorder) StartInstance(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockLXDProfileInstanceBroker)(nil).StartInstance), arg0, arg1)
}

// StopInstances mocks base method
func (m *MockLXDProfileInstanceBroker) StopInstances(arg0 context.ProviderCallContext, arg1 ...instance.Id) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstances indicates an expected call of StopInstances
func (mr *MockLXDProfileInstanceBrokerMockRecorder) StopInstances(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockLXDProfileInstanceBroker)(nil).StopInstances), varargs...)
}
