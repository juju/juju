// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/db (interfaces: TrackedDB)

// Package manifold_test is a generated GoMock package.
package manifold_test

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTrackedDB is a mock of TrackedDB interface.
type MockTrackedDB struct {
	ctrl     *gomock.Controller
	recorder *MockTrackedDBMockRecorder
}

// MockTrackedDBMockRecorder is the mock recorder for MockTrackedDB.
type MockTrackedDBMockRecorder struct {
	mock *MockTrackedDB
}

// NewMockTrackedDB creates a new mock instance.
func NewMockTrackedDB(ctrl *gomock.Controller) *MockTrackedDB {
	mock := &MockTrackedDB{ctrl: ctrl}
	mock.recorder = &MockTrackedDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackedDB) EXPECT() *MockTrackedDBMockRecorder {
	return m.recorder
}

// DB mocks base method.
func (m *MockTrackedDB) DB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockTrackedDBMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockTrackedDB)(nil).DB))
}

// Err mocks base method.
func (m *MockTrackedDB) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockTrackedDBMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockTrackedDB)(nil).Err))
}
