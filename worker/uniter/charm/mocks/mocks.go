// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/charm (interfaces: BundleReader,BundleInfo,Bundle)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	charm "github.com/juju/charm/v8"
	set "github.com/juju/collections/set"
	charm0 "github.com/juju/juju/worker/uniter/charm"
)

// MockBundleReader is a mock of BundleReader interface.
type MockBundleReader struct {
	ctrl     *gomock.Controller
	recorder *MockBundleReaderMockRecorder
}

// MockBundleReaderMockRecorder is the mock recorder for MockBundleReader.
type MockBundleReaderMockRecorder struct {
	mock *MockBundleReader
}

// NewMockBundleReader creates a new mock instance.
func NewMockBundleReader(ctrl *gomock.Controller) *MockBundleReader {
	mock := &MockBundleReader{ctrl: ctrl}
	mock.recorder = &MockBundleReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundleReader) EXPECT() *MockBundleReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBundleReader) Read(arg0 charm0.BundleInfo, arg1 <-chan struct{}) (charm0.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(charm0.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBundleReaderMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBundleReader)(nil).Read), arg0, arg1)
}

// MockBundleInfo is a mock of BundleInfo interface.
type MockBundleInfo struct {
	ctrl     *gomock.Controller
	recorder *MockBundleInfoMockRecorder
}

// MockBundleInfoMockRecorder is the mock recorder for MockBundleInfo.
type MockBundleInfoMockRecorder struct {
	mock *MockBundleInfo
}

// NewMockBundleInfo creates a new mock instance.
func NewMockBundleInfo(ctrl *gomock.Controller) *MockBundleInfo {
	mock := &MockBundleInfo{ctrl: ctrl}
	mock.recorder = &MockBundleInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundleInfo) EXPECT() *MockBundleInfoMockRecorder {
	return m.recorder
}

// ArchiveSha256 mocks base method.
func (m *MockBundleInfo) ArchiveSha256() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveSha256")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveSha256 indicates an expected call of ArchiveSha256.
func (mr *MockBundleInfoMockRecorder) ArchiveSha256() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveSha256", reflect.TypeOf((*MockBundleInfo)(nil).ArchiveSha256))
}

// URL mocks base method.
func (m *MockBundleInfo) URL() *charm.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(*charm.URL)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockBundleInfoMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockBundleInfo)(nil).URL))
}

// MockBundle is a mock of Bundle interface.
type MockBundle struct {
	ctrl     *gomock.Controller
	recorder *MockBundleMockRecorder
}

// MockBundleMockRecorder is the mock recorder for MockBundle.
type MockBundleMockRecorder struct {
	mock *MockBundle
}

// NewMockBundle creates a new mock instance.
func NewMockBundle(ctrl *gomock.Controller) *MockBundle {
	mock := &MockBundle{ctrl: ctrl}
	mock.recorder = &MockBundleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundle) EXPECT() *MockBundleMockRecorder {
	return m.recorder
}

// ArchiveMembers mocks base method.
func (m *MockBundle) ArchiveMembers() (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveMembers")
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveMembers indicates an expected call of ArchiveMembers.
func (mr *MockBundleMockRecorder) ArchiveMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveMembers", reflect.TypeOf((*MockBundle)(nil).ArchiveMembers))
}

// ExpandTo mocks base method.
func (m *MockBundle) ExpandTo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpandTo indicates an expected call of ExpandTo.
func (mr *MockBundleMockRecorder) ExpandTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandTo", reflect.TypeOf((*MockBundle)(nil).ExpandTo), arg0)
}
