// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/runner (interfaces: Factory,Runner)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uniter "github.com/juju/juju/api/agent/uniter"
	hook "github.com/juju/juju/worker/uniter/hook"
	runner "github.com/juju/juju/worker/uniter/runner"
	context "github.com/juju/juju/worker/uniter/runner/context"
	exec "github.com/juju/utils/v3/exec"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewActionRunner mocks base method.
func (m *MockFactory) NewActionRunner(arg0 *uniter.Action, arg1 <-chan struct{}) (runner.Runner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewActionRunner", arg0, arg1)
	ret0, _ := ret[0].(runner.Runner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewActionRunner indicates an expected call of NewActionRunner.
func (mr *MockFactoryMockRecorder) NewActionRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewActionRunner", reflect.TypeOf((*MockFactory)(nil).NewActionRunner), arg0, arg1)
}

// NewCommandRunner mocks base method.
func (m *MockFactory) NewCommandRunner(arg0 context.CommandInfo) (runner.Runner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommandRunner", arg0)
	ret0, _ := ret[0].(runner.Runner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCommandRunner indicates an expected call of NewCommandRunner.
func (mr *MockFactoryMockRecorder) NewCommandRunner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommandRunner", reflect.TypeOf((*MockFactory)(nil).NewCommandRunner), arg0)
}

// NewHookRunner mocks base method.
func (m *MockFactory) NewHookRunner(arg0 hook.Info) (runner.Runner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHookRunner", arg0)
	ret0, _ := ret[0].(runner.Runner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHookRunner indicates an expected call of NewHookRunner.
func (mr *MockFactoryMockRecorder) NewHookRunner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHookRunner", reflect.TypeOf((*MockFactory)(nil).NewHookRunner), arg0)
}

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRunner) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRunnerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRunner)(nil).Context))
}

// RunAction mocks base method.
func (m *MockRunner) RunAction(arg0 string) (runner.HookHandlerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAction", arg0)
	ret0, _ := ret[0].(runner.HookHandlerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAction indicates an expected call of RunAction.
func (mr *MockRunnerMockRecorder) RunAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAction", reflect.TypeOf((*MockRunner)(nil).RunAction), arg0)
}

// RunCommands mocks base method.
func (m *MockRunner) RunCommands(arg0 string, arg1 runner.RunLocation) (*exec.ExecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommands", arg0, arg1)
	ret0, _ := ret[0].(*exec.ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommands indicates an expected call of RunCommands.
func (mr *MockRunnerMockRecorder) RunCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommands", reflect.TypeOf((*MockRunner)(nil).RunCommands), arg0, arg1)
}

// RunHook mocks base method.
func (m *MockRunner) RunHook(arg0 string) (runner.HookHandlerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHook", arg0)
	ret0, _ := ret[0].(runner.HookHandlerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHook indicates an expected call of RunHook.
func (mr *MockRunnerMockRecorder) RunHook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHook", reflect.TypeOf((*MockRunner)(nil).RunHook), arg0)
}
