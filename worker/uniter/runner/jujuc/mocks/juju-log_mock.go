// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/runner/jujuc (interfaces: JujuLogCommandLogger,JujuLogCommandLoggerFactory,JujuLogContext)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	jujuc "github.com/juju/juju/worker/uniter/runner/jujuc"
	loggo "github.com/juju/loggo/v2"
	reflect "reflect"
)

// MockJujuLogCommandLogger is a mock of JujuLogCommandLogger interface
type MockJujuLogCommandLogger struct {
	ctrl     *gomock.Controller
	recorder *MockJujuLogCommandLoggerMockRecorder
}

// MockJujuLogCommandLoggerMockRecorder is the mock recorder for MockJujuLogCommandLogger
type MockJujuLogCommandLoggerMockRecorder struct {
	mock *MockJujuLogCommandLogger
}

// NewMockJujuLogCommandLogger creates a new mock instance
func NewMockJujuLogCommandLogger(ctrl *gomock.Controller) *MockJujuLogCommandLogger {
	mock := &MockJujuLogCommandLogger{ctrl: ctrl}
	mock.recorder = &MockJujuLogCommandLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJujuLogCommandLogger) EXPECT() *MockJujuLogCommandLoggerMockRecorder {
	return m.recorder
}

// Logf mocks base method
func (m *MockJujuLogCommandLogger) Logf(arg0 loggo.Level, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf
func (mr *MockJujuLogCommandLoggerMockRecorder) Logf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockJujuLogCommandLogger)(nil).Logf), varargs...)
}

// Warningf mocks base method
func (m *MockJujuLogCommandLogger) Warningf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf
func (mr *MockJujuLogCommandLoggerMockRecorder) Warningf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockJujuLogCommandLogger)(nil).Warningf), varargs...)
}

// MockJujuLogCommandLoggerFactory is a mock of JujuLogCommandLoggerFactory interface
type MockJujuLogCommandLoggerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockJujuLogCommandLoggerFactoryMockRecorder
}

// MockJujuLogCommandLoggerFactoryMockRecorder is the mock recorder for MockJujuLogCommandLoggerFactory
type MockJujuLogCommandLoggerFactoryMockRecorder struct {
	mock *MockJujuLogCommandLoggerFactory
}

// NewMockJujuLogCommandLoggerFactory creates a new mock instance
func NewMockJujuLogCommandLoggerFactory(ctrl *gomock.Controller) *MockJujuLogCommandLoggerFactory {
	mock := &MockJujuLogCommandLoggerFactory{ctrl: ctrl}
	mock.recorder = &MockJujuLogCommandLoggerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJujuLogCommandLoggerFactory) EXPECT() *MockJujuLogCommandLoggerFactoryMockRecorder {
	return m.recorder
}

// GetLogger mocks base method
func (m *MockJujuLogCommandLoggerFactory) GetLogger(arg0 string) jujuc.JujuLogCommandLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger", arg0)
	ret0, _ := ret[0].(jujuc.JujuLogCommandLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger
func (mr *MockJujuLogCommandLoggerFactoryMockRecorder) GetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockJujuLogCommandLoggerFactory)(nil).GetLogger), arg0)
}

// MockJujuLogContext is a mock of JujuLogContext interface
type MockJujuLogContext struct {
	ctrl     *gomock.Controller
	recorder *MockJujuLogContextMockRecorder
}

// MockJujuLogContextMockRecorder is the mock recorder for MockJujuLogContext
type MockJujuLogContextMockRecorder struct {
	mock *MockJujuLogContext
}

// NewMockJujuLogContext creates a new mock instance
func NewMockJujuLogContext(ctrl *gomock.Controller) *MockJujuLogContext {
	mock := &MockJujuLogContext{ctrl: ctrl}
	mock.recorder = &MockJujuLogContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJujuLogContext) EXPECT() *MockJujuLogContextMockRecorder {
	return m.recorder
}

// HookRelation mocks base method
func (m *MockJujuLogContext) HookRelation() (jujuc.ContextRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HookRelation")
	ret0, _ := ret[0].(jujuc.ContextRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HookRelation indicates an expected call of HookRelation
func (mr *MockJujuLogContextMockRecorder) HookRelation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookRelation", reflect.TypeOf((*MockJujuLogContext)(nil).HookRelation))
}

// UnitName mocks base method
func (m *MockJujuLogContext) UnitName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UnitName indicates an expected call of UnitName
func (mr *MockJujuLogContextMockRecorder) UnitName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitName", reflect.TypeOf((*MockJujuLogContext)(nil).UnitName))
}
