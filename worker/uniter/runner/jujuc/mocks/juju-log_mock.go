// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/runner/jujuc (interfaces: JujuLogContext)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jujuc "github.com/juju/juju/v2/worker/uniter/runner/jujuc"
	loggo "github.com/juju/loggo"
)

// MockJujuLogContext is a mock of JujuLogContext interface.
type MockJujuLogContext struct {
	ctrl     *gomock.Controller
	recorder *MockJujuLogContextMockRecorder
}

// MockJujuLogContextMockRecorder is the mock recorder for MockJujuLogContext.
type MockJujuLogContextMockRecorder struct {
	mock *MockJujuLogContext
}

// NewMockJujuLogContext creates a new mock instance.
func NewMockJujuLogContext(ctrl *gomock.Controller) *MockJujuLogContext {
	mock := &MockJujuLogContext{ctrl: ctrl}
	mock.recorder = &MockJujuLogContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJujuLogContext) EXPECT() *MockJujuLogContextMockRecorder {
	return m.recorder
}

// GetLogger mocks base method.
func (m *MockJujuLogContext) GetLogger(arg0 string) loggo.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger", arg0)
	ret0, _ := ret[0].(loggo.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockJujuLogContextMockRecorder) GetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockJujuLogContext)(nil).GetLogger), arg0)
}

// HookRelation mocks base method.
func (m *MockJujuLogContext) HookRelation() (jujuc.ContextRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HookRelation")
	ret0, _ := ret[0].(jujuc.ContextRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HookRelation indicates an expected call of HookRelation.
func (mr *MockJujuLogContextMockRecorder) HookRelation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookRelation", reflect.TypeOf((*MockJujuLogContext)(nil).HookRelation))
}

// UnitName mocks base method.
func (m *MockJujuLogContext) UnitName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UnitName indicates an expected call of UnitName.
func (mr *MockJujuLogContextMockRecorder) UnitName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitName", reflect.TypeOf((*MockJujuLogContext)(nil).UnitName))
}
