// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/runner/context (interfaces: LeadershipContext)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLeadershipContext is a mock of LeadershipContext interface
type MockLeadershipContext struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipContextMockRecorder
}

// MockLeadershipContextMockRecorder is the mock recorder for MockLeadershipContext
type MockLeadershipContextMockRecorder struct {
	mock *MockLeadershipContext
}

// NewMockLeadershipContext creates a new mock instance
func NewMockLeadershipContext(ctrl *gomock.Controller) *MockLeadershipContext {
	mock := &MockLeadershipContext{ctrl: ctrl}
	mock.recorder = &MockLeadershipContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLeadershipContext) EXPECT() *MockLeadershipContextMockRecorder {
	return m.recorder
}

// IsLeader mocks base method
func (m *MockLeadershipContext) IsLeader() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeader")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeader indicates an expected call of IsLeader
func (mr *MockLeadershipContextMockRecorder) IsLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeader", reflect.TypeOf((*MockLeadershipContext)(nil).IsLeader))
}

// LeaderSettings mocks base method
func (m *MockLeadershipContext) LeaderSettings() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderSettings")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaderSettings indicates an expected call of LeaderSettings
func (mr *MockLeadershipContextMockRecorder) LeaderSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderSettings", reflect.TypeOf((*MockLeadershipContext)(nil).LeaderSettings))
}

// WriteLeaderSettings mocks base method
func (m *MockLeadershipContext) WriteLeaderSettings(arg0 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLeaderSettings", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLeaderSettings indicates an expected call of WriteLeaderSettings
func (mr *MockLeadershipContextMockRecorder) WriteLeaderSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLeaderSettings", reflect.TypeOf((*MockLeadershipContext)(nil).WriteLeaderSettings), arg0)
}
