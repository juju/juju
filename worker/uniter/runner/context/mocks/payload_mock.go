// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/runner/context/payloads (interfaces: PayloadAPIClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payloads "github.com/juju/juju/core/payloads"
)

// MockPayloadAPIClient is a mock of PayloadAPIClient interface.
type MockPayloadAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadAPIClientMockRecorder
}

// MockPayloadAPIClientMockRecorder is the mock recorder for MockPayloadAPIClient.
type MockPayloadAPIClientMockRecorder struct {
	mock *MockPayloadAPIClient
}

// NewMockPayloadAPIClient creates a new mock instance.
func NewMockPayloadAPIClient(ctrl *gomock.Controller) *MockPayloadAPIClient {
	mock := &MockPayloadAPIClient{ctrl: ctrl}
	mock.recorder = &MockPayloadAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadAPIClient) EXPECT() *MockPayloadAPIClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPayloadAPIClient) List(arg0 ...string) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPayloadAPIClientMockRecorder) List(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPayloadAPIClient)(nil).List), arg0...)
}

// SetStatus mocks base method.
func (m *MockPayloadAPIClient) SetStatus(arg0 string, arg1 ...string) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStatus", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockPayloadAPIClientMockRecorder) SetStatus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockPayloadAPIClient)(nil).SetStatus), varargs...)
}

// Track mocks base method.
func (m *MockPayloadAPIClient) Track(arg0 ...payloads.Payload) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Track", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Track indicates an expected call of Track.
func (mr *MockPayloadAPIClientMockRecorder) Track(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockPayloadAPIClient)(nil).Track), arg0...)
}

// Untrack mocks base method.
func (m *MockPayloadAPIClient) Untrack(arg0 ...string) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Untrack", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Untrack indicates an expected call of Untrack.
func (mr *MockPayloadAPIClientMockRecorder) Untrack(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrack", reflect.TypeOf((*MockPayloadAPIClient)(nil).Untrack), arg0...)
}
