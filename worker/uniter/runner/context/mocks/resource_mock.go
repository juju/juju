// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/runner/context/resources (interfaces: OpenedResourceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/juju/juju/v2/core/resources"
)

// MockOpenedResourceClient is a mock of OpenedResourceClient interface.
type MockOpenedResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenedResourceClientMockRecorder
}

// MockOpenedResourceClientMockRecorder is the mock recorder for MockOpenedResourceClient.
type MockOpenedResourceClientMockRecorder struct {
	mock *MockOpenedResourceClient
}

// NewMockOpenedResourceClient creates a new mock instance.
func NewMockOpenedResourceClient(ctrl *gomock.Controller) *MockOpenedResourceClient {
	mock := &MockOpenedResourceClient{ctrl: ctrl}
	mock.recorder = &MockOpenedResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenedResourceClient) EXPECT() *MockOpenedResourceClientMockRecorder {
	return m.recorder
}

// GetResource mocks base method.
func (m *MockOpenedResourceClient) GetResource(arg0 string) (resources.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResource indicates an expected call of GetResource.
func (mr *MockOpenedResourceClientMockRecorder) GetResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockOpenedResourceClient)(nil).GetResource), arg0)
}
