// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/secretdrainworker (interfaces: Logger,SecretsDrainFacade)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	secretsdrain "github.com/juju/juju/api/agent/secretsdrain"
	secrets "github.com/juju/juju/core/secrets"
	watcher "github.com/juju/juju/core/watcher"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Warningf mocks base method.
func (m *MockLogger) Warningf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf.
func (mr *MockLoggerMockRecorder) Warningf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockLogger)(nil).Warningf), varargs...)
}

// MockSecretsDrainFacade is a mock of SecretsDrainFacade interface.
type MockSecretsDrainFacade struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsDrainFacadeMockRecorder
}

// MockSecretsDrainFacadeMockRecorder is the mock recorder for MockSecretsDrainFacade.
type MockSecretsDrainFacadeMockRecorder struct {
	mock *MockSecretsDrainFacade
}

// NewMockSecretsDrainFacade creates a new mock instance.
func NewMockSecretsDrainFacade(ctrl *gomock.Controller) *MockSecretsDrainFacade {
	mock := &MockSecretsDrainFacade{ctrl: ctrl}
	mock.recorder = &MockSecretsDrainFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsDrainFacade) EXPECT() *MockSecretsDrainFacadeMockRecorder {
	return m.recorder
}

// ChangeSecretBackend mocks base method.
func (m *MockSecretsDrainFacade) ChangeSecretBackend(arg0 []secretsdrain.ChangeSecretBackendArg) (secretsdrain.ChangeSecretBackendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSecretBackend", arg0)
	ret0, _ := ret[0].(secretsdrain.ChangeSecretBackendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSecretBackend indicates an expected call of ChangeSecretBackend.
func (mr *MockSecretsDrainFacadeMockRecorder) ChangeSecretBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSecretBackend", reflect.TypeOf((*MockSecretsDrainFacade)(nil).ChangeSecretBackend), arg0)
}

// GetSecretsToDrain mocks base method.
func (m *MockSecretsDrainFacade) GetSecretsToDrain() ([]secrets.SecretMetadataForDrain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsToDrain")
	ret0, _ := ret[0].([]secrets.SecretMetadataForDrain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsToDrain indicates an expected call of GetSecretsToDrain.
func (mr *MockSecretsDrainFacadeMockRecorder) GetSecretsToDrain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsToDrain", reflect.TypeOf((*MockSecretsDrainFacade)(nil).GetSecretsToDrain))
}

// WatchSecretBackendChanged mocks base method.
func (m *MockSecretsDrainFacade) WatchSecretBackendChanged() (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSecretBackendChanged")
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretBackendChanged indicates an expected call of WatchSecretBackendChanged.
func (mr *MockSecretsDrainFacadeMockRecorder) WatchSecretBackendChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretBackendChanged", reflect.TypeOf((*MockSecretsDrainFacade)(nil).WatchSecretBackendChanged))
}
