// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter (interfaces: ProviderIDGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProviderIDGetter is a mock of ProviderIDGetter interface.
type MockProviderIDGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProviderIDGetterMockRecorder
}

// MockProviderIDGetterMockRecorder is the mock recorder for MockProviderIDGetter.
type MockProviderIDGetterMockRecorder struct {
	mock *MockProviderIDGetter
}

// NewMockProviderIDGetter creates a new mock instance.
func NewMockProviderIDGetter(ctrl *gomock.Controller) *MockProviderIDGetter {
	mock := &MockProviderIDGetter{ctrl: ctrl}
	mock.recorder = &MockProviderIDGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderIDGetter) EXPECT() *MockProviderIDGetterMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockProviderIDGetter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProviderIDGetterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProviderIDGetter)(nil).Name))
}

// ProviderID mocks base method.
func (m *MockProviderIDGetter) ProviderID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProviderID indicates an expected call of ProviderID.
func (mr *MockProviderIDGetterMockRecorder) ProviderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderID", reflect.TypeOf((*MockProviderIDGetter)(nil).ProviderID))
}

// Refresh mocks base method.
func (m *MockProviderIDGetter) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockProviderIDGetterMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockProviderIDGetter)(nil).Refresh))
}
