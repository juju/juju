// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/charm/repository (interfaces: CharmStoreClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	charm "github.com/juju/charm/v9"
	params "github.com/juju/charmrepo/v7/csclient/params"
)

// MockCharmStoreClient is a mock of CharmStoreClient interface.
type MockCharmStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharmStoreClientMockRecorder
}

// MockCharmStoreClientMockRecorder is the mock recorder for MockCharmStoreClient.
type MockCharmStoreClientMockRecorder struct {
	mock *MockCharmStoreClient
}

// NewMockCharmStoreClient creates a new mock instance.
func NewMockCharmStoreClient(ctrl *gomock.Controller) *MockCharmStoreClient {
	mock := &MockCharmStoreClient{ctrl: ctrl}
	mock.recorder = &MockCharmStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmStoreClient) EXPECT() *MockCharmStoreClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCharmStoreClient) Get(arg0 *charm.URL, arg1 string) (*charm.CharmArchive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*charm.CharmArchive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCharmStoreClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCharmStoreClient)(nil).Get), arg0, arg1)
}

// GetFileFromArchive mocks base method.
func (m *MockCharmStoreClient) GetFileFromArchive(arg0 *charm.URL, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromArchive", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromArchive indicates an expected call of GetFileFromArchive.
func (mr *MockCharmStoreClientMockRecorder) GetFileFromArchive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromArchive", reflect.TypeOf((*MockCharmStoreClient)(nil).GetFileFromArchive), arg0, arg1)
}

// Meta mocks base method.
func (m *MockCharmStoreClient) Meta(arg0 *charm.URL, arg1 interface{}) (*charm.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta", arg0, arg1)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Meta indicates an expected call of Meta.
func (mr *MockCharmStoreClientMockRecorder) Meta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockCharmStoreClient)(nil).Meta), arg0, arg1)
}

// ResolveWithPreferredChannel mocks base method.
func (m *MockCharmStoreClient) ResolveWithPreferredChannel(arg0 *charm.URL, arg1 params.Channel) (*charm.URL, params.Channel, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveWithPreferredChannel", arg0, arg1)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(params.Channel)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ResolveWithPreferredChannel indicates an expected call of ResolveWithPreferredChannel.
func (mr *MockCharmStoreClientMockRecorder) ResolveWithPreferredChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveWithPreferredChannel", reflect.TypeOf((*MockCharmStoreClient)(nil).ResolveWithPreferredChannel), arg0, arg1)
}
