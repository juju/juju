// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/charm (interfaces: CharmMeta)
//
// Generated by this command:
//
//	mockgen -typed -package charm -destination charm_mock_test.go github.com/juju/juju/internal/charm CharmMeta
//

// Package charm is a generated GoMock package.
package charm

import (
	reflect "reflect"

	charm "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmMeta is a mock of CharmMeta interface.
type MockCharmMeta struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetaMockRecorder
}

// MockCharmMetaMockRecorder is the mock recorder for MockCharmMeta.
type MockCharmMetaMockRecorder struct {
	mock *MockCharmMeta
}

// NewMockCharmMeta creates a new mock instance.
func NewMockCharmMeta(ctrl *gomock.Controller) *MockCharmMeta {
	mock := &MockCharmMeta{ctrl: ctrl}
	mock.recorder = &MockCharmMetaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMeta) EXPECT() *MockCharmMetaMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmMeta) ISGOMOCK() struct{} {
	return struct{}{}
}

// Manifest mocks base method.
func (m *MockCharmMeta) Manifest() *charm.Manifest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifest")
	ret0, _ := ret[0].(*charm.Manifest)
	return ret0
}

// Manifest indicates an expected call of Manifest.
func (mr *MockCharmMetaMockRecorder) Manifest() *MockCharmMetaManifestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifest", reflect.TypeOf((*MockCharmMeta)(nil).Manifest))
	return &MockCharmMetaManifestCall{Call: call}
}

// MockCharmMetaManifestCall wrap *gomock.Call
type MockCharmMetaManifestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetaManifestCall) Return(arg0 *charm.Manifest) *MockCharmMetaManifestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetaManifestCall) Do(f func() *charm.Manifest) *MockCharmMetaManifestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetaManifestCall) DoAndReturn(f func() *charm.Manifest) *MockCharmMetaManifestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Meta mocks base method.
func (m *MockCharmMeta) Meta() *charm.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*charm.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockCharmMetaMockRecorder) Meta() *MockCharmMetaMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockCharmMeta)(nil).Meta))
	return &MockCharmMetaMetaCall{Call: call}
}

// MockCharmMetaMetaCall wrap *gomock.Call
type MockCharmMetaMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetaMetaCall) Return(arg0 *charm.Meta) *MockCharmMetaMetaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetaMetaCall) Do(f func() *charm.Meta) *MockCharmMetaMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetaMetaCall) DoAndReturn(f func() *charm.Meta) *MockCharmMetaMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
