// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/leadership (interfaces: Pinner)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/leadership_mock.go github.com/juju/juju/core/leadership Pinner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPinner is a mock of Pinner interface.
type MockPinner struct {
	ctrl     *gomock.Controller
	recorder *MockPinnerMockRecorder
}

// MockPinnerMockRecorder is the mock recorder for MockPinner.
type MockPinnerMockRecorder struct {
	mock *MockPinner
}

// NewMockPinner creates a new mock instance.
func NewMockPinner(ctrl *gomock.Controller) *MockPinner {
	mock := &MockPinner{ctrl: ctrl}
	mock.recorder = &MockPinnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinner) EXPECT() *MockPinnerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockPinner) ISGOMOCK() struct{} {
	return struct{}{}
}

// PinLeadership mocks base method.
func (m *MockPinner) PinLeadership(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinLeadership", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PinLeadership indicates an expected call of PinLeadership.
func (mr *MockPinnerMockRecorder) PinLeadership(arg0, arg1 any) *MockPinnerPinLeadershipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinLeadership", reflect.TypeOf((*MockPinner)(nil).PinLeadership), arg0, arg1)
	return &MockPinnerPinLeadershipCall{Call: call}
}

// MockPinnerPinLeadershipCall wrap *gomock.Call
type MockPinnerPinLeadershipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPinnerPinLeadershipCall) Return(arg0 error) *MockPinnerPinLeadershipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPinnerPinLeadershipCall) Do(f func(string, string) error) *MockPinnerPinLeadershipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPinnerPinLeadershipCall) DoAndReturn(f func(string, string) error) *MockPinnerPinLeadershipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PinnedLeadership mocks base method.
func (m *MockPinner) PinnedLeadership() (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinnedLeadership")
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PinnedLeadership indicates an expected call of PinnedLeadership.
func (mr *MockPinnerMockRecorder) PinnedLeadership() *MockPinnerPinnedLeadershipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinnedLeadership", reflect.TypeOf((*MockPinner)(nil).PinnedLeadership))
	return &MockPinnerPinnedLeadershipCall{Call: call}
}

// MockPinnerPinnedLeadershipCall wrap *gomock.Call
type MockPinnerPinnedLeadershipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPinnerPinnedLeadershipCall) Return(arg0 map[string][]string, arg1 error) *MockPinnerPinnedLeadershipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPinnerPinnedLeadershipCall) Do(f func() (map[string][]string, error)) *MockPinnerPinnedLeadershipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPinnerPinnedLeadershipCall) DoAndReturn(f func() (map[string][]string, error)) *MockPinnerPinnedLeadershipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnpinLeadership mocks base method.
func (m *MockPinner) UnpinLeadership(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinLeadership", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpinLeadership indicates an expected call of UnpinLeadership.
func (mr *MockPinnerMockRecorder) UnpinLeadership(arg0, arg1 any) *MockPinnerUnpinLeadershipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinLeadership", reflect.TypeOf((*MockPinner)(nil).UnpinLeadership), arg0, arg1)
	return &MockPinnerUnpinLeadershipCall{Call: call}
}

// MockPinnerUnpinLeadershipCall wrap *gomock.Call
type MockPinnerUnpinLeadershipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPinnerUnpinLeadershipCall) Return(arg0 error) *MockPinnerUnpinLeadershipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPinnerUnpinLeadershipCall) Do(f func(string, string) error) *MockPinnerUnpinLeadershipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPinnerUnpinLeadershipCall) DoAndReturn(f func(string, string) error) *MockPinnerUnpinLeadershipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
