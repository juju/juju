// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/description/v8 (interfaces: Model)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination description_mock_test.go github.com/juju/description/v8 Model
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	reflect "reflect"

	description "github.com/juju/description/v8"
	names "github.com/juju/names/v5"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockModel) Actions() []description.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].([]description.Action)
	return ret0
}

// Actions indicates an expected call of Actions.
func (mr *MockModelMockRecorder) Actions() *MockModelActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockModel)(nil).Actions))
	return &MockModelActionsCall{Call: call}
}

// MockModelActionsCall wrap *gomock.Call
type MockModelActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelActionsCall) Return(arg0 []description.Action) *MockModelActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelActionsCall) Do(f func() []description.Action) *MockModelActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelActionsCall) DoAndReturn(f func() []description.Action) *MockModelActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddAction mocks base method.
func (m *MockModel) AddAction(arg0 description.ActionArgs) description.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAction", arg0)
	ret0, _ := ret[0].(description.Action)
	return ret0
}

// AddAction indicates an expected call of AddAction.
func (mr *MockModelMockRecorder) AddAction(arg0 any) *MockModelAddActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAction", reflect.TypeOf((*MockModel)(nil).AddAction), arg0)
	return &MockModelAddActionCall{Call: call}
}

// MockModelAddActionCall wrap *gomock.Call
type MockModelAddActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddActionCall) Return(arg0 description.Action) *MockModelAddActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddActionCall) Do(f func(description.ActionArgs) description.Action) *MockModelAddActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddActionCall) DoAndReturn(f func(description.ActionArgs) description.Action) *MockModelAddActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddApplication mocks base method.
func (m *MockModel) AddApplication(arg0 description.ApplicationArgs) description.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplication", arg0)
	ret0, _ := ret[0].(description.Application)
	return ret0
}

// AddApplication indicates an expected call of AddApplication.
func (mr *MockModelMockRecorder) AddApplication(arg0 any) *MockModelAddApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplication", reflect.TypeOf((*MockModel)(nil).AddApplication), arg0)
	return &MockModelAddApplicationCall{Call: call}
}

// MockModelAddApplicationCall wrap *gomock.Call
type MockModelAddApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddApplicationCall) Return(arg0 description.Application) *MockModelAddApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddApplicationCall) Do(f func(description.ApplicationArgs) description.Application) *MockModelAddApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddApplicationCall) DoAndReturn(f func(description.ApplicationArgs) description.Application) *MockModelAddApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddBlockDevice mocks base method.
func (m *MockModel) AddBlockDevice(arg0 string, arg1 description.BlockDeviceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlockDevice indicates an expected call of AddBlockDevice.
func (mr *MockModelMockRecorder) AddBlockDevice(arg0, arg1 any) *MockModelAddBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockDevice", reflect.TypeOf((*MockModel)(nil).AddBlockDevice), arg0, arg1)
	return &MockModelAddBlockDeviceCall{Call: call}
}

// MockModelAddBlockDeviceCall wrap *gomock.Call
type MockModelAddBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddBlockDeviceCall) Return(arg0 error) *MockModelAddBlockDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddBlockDeviceCall) Do(f func(string, description.BlockDeviceArgs) error) *MockModelAddBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddBlockDeviceCall) DoAndReturn(f func(string, description.BlockDeviceArgs) error) *MockModelAddBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddCloudImageMetadata mocks base method.
func (m *MockModel) AddCloudImageMetadata(arg0 description.CloudImageMetadataArgs) description.CloudImageMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloudImageMetadata", arg0)
	ret0, _ := ret[0].(description.CloudImageMetadata)
	return ret0
}

// AddCloudImageMetadata indicates an expected call of AddCloudImageMetadata.
func (mr *MockModelMockRecorder) AddCloudImageMetadata(arg0 any) *MockModelAddCloudImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloudImageMetadata", reflect.TypeOf((*MockModel)(nil).AddCloudImageMetadata), arg0)
	return &MockModelAddCloudImageMetadataCall{Call: call}
}

// MockModelAddCloudImageMetadataCall wrap *gomock.Call
type MockModelAddCloudImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddCloudImageMetadataCall) Return(arg0 description.CloudImageMetadata) *MockModelAddCloudImageMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddCloudImageMetadataCall) Do(f func(description.CloudImageMetadataArgs) description.CloudImageMetadata) *MockModelAddCloudImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddCloudImageMetadataCall) DoAndReturn(f func(description.CloudImageMetadataArgs) description.CloudImageMetadata) *MockModelAddCloudImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddExternalController mocks base method.
func (m *MockModel) AddExternalController(arg0 description.ExternalControllerArgs) description.ExternalController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalController", arg0)
	ret0, _ := ret[0].(description.ExternalController)
	return ret0
}

// AddExternalController indicates an expected call of AddExternalController.
func (mr *MockModelMockRecorder) AddExternalController(arg0 any) *MockModelAddExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalController", reflect.TypeOf((*MockModel)(nil).AddExternalController), arg0)
	return &MockModelAddExternalControllerCall{Call: call}
}

// MockModelAddExternalControllerCall wrap *gomock.Call
type MockModelAddExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddExternalControllerCall) Return(arg0 description.ExternalController) *MockModelAddExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddExternalControllerCall) Do(f func(description.ExternalControllerArgs) description.ExternalController) *MockModelAddExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddExternalControllerCall) DoAndReturn(f func(description.ExternalControllerArgs) description.ExternalController) *MockModelAddExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddFilesystem mocks base method.
func (m *MockModel) AddFilesystem(arg0 description.FilesystemArgs) description.Filesystem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilesystem", arg0)
	ret0, _ := ret[0].(description.Filesystem)
	return ret0
}

// AddFilesystem indicates an expected call of AddFilesystem.
func (mr *MockModelMockRecorder) AddFilesystem(arg0 any) *MockModelAddFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilesystem", reflect.TypeOf((*MockModel)(nil).AddFilesystem), arg0)
	return &MockModelAddFilesystemCall{Call: call}
}

// MockModelAddFilesystemCall wrap *gomock.Call
type MockModelAddFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddFilesystemCall) Return(arg0 description.Filesystem) *MockModelAddFilesystemCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddFilesystemCall) Do(f func(description.FilesystemArgs) description.Filesystem) *MockModelAddFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddFilesystemCall) DoAndReturn(f func(description.FilesystemArgs) description.Filesystem) *MockModelAddFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddFirewallRule mocks base method.
func (m *MockModel) AddFirewallRule(arg0 description.FirewallRuleArgs) description.FirewallRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFirewallRule", arg0)
	ret0, _ := ret[0].(description.FirewallRule)
	return ret0
}

// AddFirewallRule indicates an expected call of AddFirewallRule.
func (mr *MockModelMockRecorder) AddFirewallRule(arg0 any) *MockModelAddFirewallRuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFirewallRule", reflect.TypeOf((*MockModel)(nil).AddFirewallRule), arg0)
	return &MockModelAddFirewallRuleCall{Call: call}
}

// MockModelAddFirewallRuleCall wrap *gomock.Call
type MockModelAddFirewallRuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddFirewallRuleCall) Return(arg0 description.FirewallRule) *MockModelAddFirewallRuleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddFirewallRuleCall) Do(f func(description.FirewallRuleArgs) description.FirewallRule) *MockModelAddFirewallRuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddFirewallRuleCall) DoAndReturn(f func(description.FirewallRuleArgs) description.FirewallRule) *MockModelAddFirewallRuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddIPAddress mocks base method.
func (m *MockModel) AddIPAddress(arg0 description.IPAddressArgs) description.IPAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIPAddress", arg0)
	ret0, _ := ret[0].(description.IPAddress)
	return ret0
}

// AddIPAddress indicates an expected call of AddIPAddress.
func (mr *MockModelMockRecorder) AddIPAddress(arg0 any) *MockModelAddIPAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIPAddress", reflect.TypeOf((*MockModel)(nil).AddIPAddress), arg0)
	return &MockModelAddIPAddressCall{Call: call}
}

// MockModelAddIPAddressCall wrap *gomock.Call
type MockModelAddIPAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddIPAddressCall) Return(arg0 description.IPAddress) *MockModelAddIPAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddIPAddressCall) Do(f func(description.IPAddressArgs) description.IPAddress) *MockModelAddIPAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddIPAddressCall) DoAndReturn(f func(description.IPAddressArgs) description.IPAddress) *MockModelAddIPAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddLinkLayerDevice mocks base method.
func (m *MockModel) AddLinkLayerDevice(arg0 description.LinkLayerDeviceArgs) description.LinkLayerDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLinkLayerDevice", arg0)
	ret0, _ := ret[0].(description.LinkLayerDevice)
	return ret0
}

// AddLinkLayerDevice indicates an expected call of AddLinkLayerDevice.
func (mr *MockModelMockRecorder) AddLinkLayerDevice(arg0 any) *MockModelAddLinkLayerDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinkLayerDevice", reflect.TypeOf((*MockModel)(nil).AddLinkLayerDevice), arg0)
	return &MockModelAddLinkLayerDeviceCall{Call: call}
}

// MockModelAddLinkLayerDeviceCall wrap *gomock.Call
type MockModelAddLinkLayerDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddLinkLayerDeviceCall) Return(arg0 description.LinkLayerDevice) *MockModelAddLinkLayerDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddLinkLayerDeviceCall) Do(f func(description.LinkLayerDeviceArgs) description.LinkLayerDevice) *MockModelAddLinkLayerDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddLinkLayerDeviceCall) DoAndReturn(f func(description.LinkLayerDeviceArgs) description.LinkLayerDevice) *MockModelAddLinkLayerDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddMachine mocks base method.
func (m *MockModel) AddMachine(arg0 description.MachineArgs) description.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachine", arg0)
	ret0, _ := ret[0].(description.Machine)
	return ret0
}

// AddMachine indicates an expected call of AddMachine.
func (mr *MockModelMockRecorder) AddMachine(arg0 any) *MockModelAddMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachine", reflect.TypeOf((*MockModel)(nil).AddMachine), arg0)
	return &MockModelAddMachineCall{Call: call}
}

// MockModelAddMachineCall wrap *gomock.Call
type MockModelAddMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddMachineCall) Return(arg0 description.Machine) *MockModelAddMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddMachineCall) Do(f func(description.MachineArgs) description.Machine) *MockModelAddMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddMachineCall) DoAndReturn(f func(description.MachineArgs) description.Machine) *MockModelAddMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddOfferConnection mocks base method.
func (m *MockModel) AddOfferConnection(arg0 description.OfferConnectionArgs) description.OfferConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOfferConnection", arg0)
	ret0, _ := ret[0].(description.OfferConnection)
	return ret0
}

// AddOfferConnection indicates an expected call of AddOfferConnection.
func (mr *MockModelMockRecorder) AddOfferConnection(arg0 any) *MockModelAddOfferConnectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOfferConnection", reflect.TypeOf((*MockModel)(nil).AddOfferConnection), arg0)
	return &MockModelAddOfferConnectionCall{Call: call}
}

// MockModelAddOfferConnectionCall wrap *gomock.Call
type MockModelAddOfferConnectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddOfferConnectionCall) Return(arg0 description.OfferConnection) *MockModelAddOfferConnectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddOfferConnectionCall) Do(f func(description.OfferConnectionArgs) description.OfferConnection) *MockModelAddOfferConnectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddOfferConnectionCall) DoAndReturn(f func(description.OfferConnectionArgs) description.OfferConnection) *MockModelAddOfferConnectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddOperation mocks base method.
func (m *MockModel) AddOperation(arg0 description.OperationArgs) description.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOperation", arg0)
	ret0, _ := ret[0].(description.Operation)
	return ret0
}

// AddOperation indicates an expected call of AddOperation.
func (mr *MockModelMockRecorder) AddOperation(arg0 any) *MockModelAddOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperation", reflect.TypeOf((*MockModel)(nil).AddOperation), arg0)
	return &MockModelAddOperationCall{Call: call}
}

// MockModelAddOperationCall wrap *gomock.Call
type MockModelAddOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddOperationCall) Return(arg0 description.Operation) *MockModelAddOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddOperationCall) Do(f func(description.OperationArgs) description.Operation) *MockModelAddOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddOperationCall) DoAndReturn(f func(description.OperationArgs) description.Operation) *MockModelAddOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRelation mocks base method.
func (m *MockModel) AddRelation(arg0 description.RelationArgs) description.Relation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", arg0)
	ret0, _ := ret[0].(description.Relation)
	return ret0
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockModelMockRecorder) AddRelation(arg0 any) *MockModelAddRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockModel)(nil).AddRelation), arg0)
	return &MockModelAddRelationCall{Call: call}
}

// MockModelAddRelationCall wrap *gomock.Call
type MockModelAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddRelationCall) Return(arg0 description.Relation) *MockModelAddRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddRelationCall) Do(f func(description.RelationArgs) description.Relation) *MockModelAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddRelationCall) DoAndReturn(f func(description.RelationArgs) description.Relation) *MockModelAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRelationNetwork mocks base method.
func (m *MockModel) AddRelationNetwork(arg0 description.RelationNetworkArgs) description.RelationNetwork {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelationNetwork", arg0)
	ret0, _ := ret[0].(description.RelationNetwork)
	return ret0
}

// AddRelationNetwork indicates an expected call of AddRelationNetwork.
func (mr *MockModelMockRecorder) AddRelationNetwork(arg0 any) *MockModelAddRelationNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationNetwork", reflect.TypeOf((*MockModel)(nil).AddRelationNetwork), arg0)
	return &MockModelAddRelationNetworkCall{Call: call}
}

// MockModelAddRelationNetworkCall wrap *gomock.Call
type MockModelAddRelationNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddRelationNetworkCall) Return(arg0 description.RelationNetwork) *MockModelAddRelationNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddRelationNetworkCall) Do(f func(description.RelationNetworkArgs) description.RelationNetwork) *MockModelAddRelationNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddRelationNetworkCall) DoAndReturn(f func(description.RelationNetworkArgs) description.RelationNetwork) *MockModelAddRelationNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRemoteApplication mocks base method.
func (m *MockModel) AddRemoteApplication(arg0 description.RemoteApplicationArgs) description.RemoteApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplication", arg0)
	ret0, _ := ret[0].(description.RemoteApplication)
	return ret0
}

// AddRemoteApplication indicates an expected call of AddRemoteApplication.
func (mr *MockModelMockRecorder) AddRemoteApplication(arg0 any) *MockModelAddRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplication", reflect.TypeOf((*MockModel)(nil).AddRemoteApplication), arg0)
	return &MockModelAddRemoteApplicationCall{Call: call}
}

// MockModelAddRemoteApplicationCall wrap *gomock.Call
type MockModelAddRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddRemoteApplicationCall) Return(arg0 description.RemoteApplication) *MockModelAddRemoteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddRemoteApplicationCall) Do(f func(description.RemoteApplicationArgs) description.RemoteApplication) *MockModelAddRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddRemoteApplicationCall) DoAndReturn(f func(description.RemoteApplicationArgs) description.RemoteApplication) *MockModelAddRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRemoteEntity mocks base method.
func (m *MockModel) AddRemoteEntity(arg0 description.RemoteEntityArgs) description.RemoteEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteEntity", arg0)
	ret0, _ := ret[0].(description.RemoteEntity)
	return ret0
}

// AddRemoteEntity indicates an expected call of AddRemoteEntity.
func (mr *MockModelMockRecorder) AddRemoteEntity(arg0 any) *MockModelAddRemoteEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteEntity", reflect.TypeOf((*MockModel)(nil).AddRemoteEntity), arg0)
	return &MockModelAddRemoteEntityCall{Call: call}
}

// MockModelAddRemoteEntityCall wrap *gomock.Call
type MockModelAddRemoteEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddRemoteEntityCall) Return(arg0 description.RemoteEntity) *MockModelAddRemoteEntityCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddRemoteEntityCall) Do(f func(description.RemoteEntityArgs) description.RemoteEntity) *MockModelAddRemoteEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddRemoteEntityCall) DoAndReturn(f func(description.RemoteEntityArgs) description.RemoteEntity) *MockModelAddRemoteEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRemoteSecret mocks base method.
func (m *MockModel) AddRemoteSecret(arg0 description.RemoteSecretArgs) description.RemoteSecret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteSecret", arg0)
	ret0, _ := ret[0].(description.RemoteSecret)
	return ret0
}

// AddRemoteSecret indicates an expected call of AddRemoteSecret.
func (mr *MockModelMockRecorder) AddRemoteSecret(arg0 any) *MockModelAddRemoteSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteSecret", reflect.TypeOf((*MockModel)(nil).AddRemoteSecret), arg0)
	return &MockModelAddRemoteSecretCall{Call: call}
}

// MockModelAddRemoteSecretCall wrap *gomock.Call
type MockModelAddRemoteSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddRemoteSecretCall) Return(arg0 description.RemoteSecret) *MockModelAddRemoteSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddRemoteSecretCall) Do(f func(description.RemoteSecretArgs) description.RemoteSecret) *MockModelAddRemoteSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddRemoteSecretCall) DoAndReturn(f func(description.RemoteSecretArgs) description.RemoteSecret) *MockModelAddRemoteSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddSSHHostKey mocks base method.
func (m *MockModel) AddSSHHostKey(arg0 description.SSHHostKeyArgs) description.SSHHostKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSSHHostKey", arg0)
	ret0, _ := ret[0].(description.SSHHostKey)
	return ret0
}

// AddSSHHostKey indicates an expected call of AddSSHHostKey.
func (mr *MockModelMockRecorder) AddSSHHostKey(arg0 any) *MockModelAddSSHHostKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSSHHostKey", reflect.TypeOf((*MockModel)(nil).AddSSHHostKey), arg0)
	return &MockModelAddSSHHostKeyCall{Call: call}
}

// MockModelAddSSHHostKeyCall wrap *gomock.Call
type MockModelAddSSHHostKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddSSHHostKeyCall) Return(arg0 description.SSHHostKey) *MockModelAddSSHHostKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddSSHHostKeyCall) Do(f func(description.SSHHostKeyArgs) description.SSHHostKey) *MockModelAddSSHHostKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddSSHHostKeyCall) DoAndReturn(f func(description.SSHHostKeyArgs) description.SSHHostKey) *MockModelAddSSHHostKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddSecret mocks base method.
func (m *MockModel) AddSecret(arg0 description.SecretArgs) description.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecret", arg0)
	ret0, _ := ret[0].(description.Secret)
	return ret0
}

// AddSecret indicates an expected call of AddSecret.
func (mr *MockModelMockRecorder) AddSecret(arg0 any) *MockModelAddSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockModel)(nil).AddSecret), arg0)
	return &MockModelAddSecretCall{Call: call}
}

// MockModelAddSecretCall wrap *gomock.Call
type MockModelAddSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddSecretCall) Return(arg0 description.Secret) *MockModelAddSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddSecretCall) Do(f func(description.SecretArgs) description.Secret) *MockModelAddSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddSecretCall) DoAndReturn(f func(description.SecretArgs) description.Secret) *MockModelAddSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddSpace mocks base method.
func (m *MockModel) AddSpace(arg0 description.SpaceArgs) description.Space {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0)
	ret0, _ := ret[0].(description.Space)
	return ret0
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockModelMockRecorder) AddSpace(arg0 any) *MockModelAddSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockModel)(nil).AddSpace), arg0)
	return &MockModelAddSpaceCall{Call: call}
}

// MockModelAddSpaceCall wrap *gomock.Call
type MockModelAddSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddSpaceCall) Return(arg0 description.Space) *MockModelAddSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddSpaceCall) Do(f func(description.SpaceArgs) description.Space) *MockModelAddSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddSpaceCall) DoAndReturn(f func(description.SpaceArgs) description.Space) *MockModelAddSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddStorage mocks base method.
func (m *MockModel) AddStorage(arg0 description.StorageArgs) description.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorage", arg0)
	ret0, _ := ret[0].(description.Storage)
	return ret0
}

// AddStorage indicates an expected call of AddStorage.
func (mr *MockModelMockRecorder) AddStorage(arg0 any) *MockModelAddStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorage", reflect.TypeOf((*MockModel)(nil).AddStorage), arg0)
	return &MockModelAddStorageCall{Call: call}
}

// MockModelAddStorageCall wrap *gomock.Call
type MockModelAddStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddStorageCall) Return(arg0 description.Storage) *MockModelAddStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddStorageCall) Do(f func(description.StorageArgs) description.Storage) *MockModelAddStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddStorageCall) DoAndReturn(f func(description.StorageArgs) description.Storage) *MockModelAddStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddStoragePool mocks base method.
func (m *MockModel) AddStoragePool(arg0 description.StoragePoolArgs) description.StoragePool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStoragePool", arg0)
	ret0, _ := ret[0].(description.StoragePool)
	return ret0
}

// AddStoragePool indicates an expected call of AddStoragePool.
func (mr *MockModelMockRecorder) AddStoragePool(arg0 any) *MockModelAddStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStoragePool", reflect.TypeOf((*MockModel)(nil).AddStoragePool), arg0)
	return &MockModelAddStoragePoolCall{Call: call}
}

// MockModelAddStoragePoolCall wrap *gomock.Call
type MockModelAddStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddStoragePoolCall) Return(arg0 description.StoragePool) *MockModelAddStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddStoragePoolCall) Do(f func(description.StoragePoolArgs) description.StoragePool) *MockModelAddStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddStoragePoolCall) DoAndReturn(f func(description.StoragePoolArgs) description.StoragePool) *MockModelAddStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddSubnet mocks base method.
func (m *MockModel) AddSubnet(arg0 description.SubnetArgs) description.Subnet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0)
	ret0, _ := ret[0].(description.Subnet)
	return ret0
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockModelMockRecorder) AddSubnet(arg0 any) *MockModelAddSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockModel)(nil).AddSubnet), arg0)
	return &MockModelAddSubnetCall{Call: call}
}

// MockModelAddSubnetCall wrap *gomock.Call
type MockModelAddSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddSubnetCall) Return(arg0 description.Subnet) *MockModelAddSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddSubnetCall) Do(f func(description.SubnetArgs) description.Subnet) *MockModelAddSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddSubnetCall) DoAndReturn(f func(description.SubnetArgs) description.Subnet) *MockModelAddSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUser mocks base method.
func (m *MockModel) AddUser(arg0 description.UserArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUser", arg0)
}

// AddUser indicates an expected call of AddUser.
func (mr *MockModelMockRecorder) AddUser(arg0 any) *MockModelAddUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockModel)(nil).AddUser), arg0)
	return &MockModelAddUserCall{Call: call}
}

// MockModelAddUserCall wrap *gomock.Call
type MockModelAddUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddUserCall) Return() *MockModelAddUserCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddUserCall) Do(f func(description.UserArgs)) *MockModelAddUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddUserCall) DoAndReturn(f func(description.UserArgs)) *MockModelAddUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddVolume mocks base method.
func (m *MockModel) AddVolume(arg0 description.VolumeArgs) description.Volume {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolume", arg0)
	ret0, _ := ret[0].(description.Volume)
	return ret0
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockModelMockRecorder) AddVolume(arg0 any) *MockModelAddVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockModel)(nil).AddVolume), arg0)
	return &MockModelAddVolumeCall{Call: call}
}

// MockModelAddVolumeCall wrap *gomock.Call
type MockModelAddVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAddVolumeCall) Return(arg0 description.Volume) *MockModelAddVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAddVolumeCall) Do(f func(description.VolumeArgs) description.Volume) *MockModelAddVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAddVolumeCall) DoAndReturn(f func(description.VolumeArgs) description.Volume) *MockModelAddVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AgentVersion mocks base method.
func (m *MockModel) AgentVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentVersion indicates an expected call of AgentVersion.
func (mr *MockModelMockRecorder) AgentVersion() *MockModelAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentVersion", reflect.TypeOf((*MockModel)(nil).AgentVersion))
	return &MockModelAgentVersionCall{Call: call}
}

// MockModelAgentVersionCall wrap *gomock.Call
type MockModelAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentVersionCall) Return(arg0 string) *MockModelAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentVersionCall) Do(f func() string) *MockModelAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentVersionCall) DoAndReturn(f func() string) *MockModelAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Annotations mocks base method.
func (m *MockModel) Annotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Annotations indicates an expected call of Annotations.
func (mr *MockModelMockRecorder) Annotations() *MockModelAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotations", reflect.TypeOf((*MockModel)(nil).Annotations))
	return &MockModelAnnotationsCall{Call: call}
}

// MockModelAnnotationsCall wrap *gomock.Call
type MockModelAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAnnotationsCall) Return(arg0 map[string]string) *MockModelAnnotationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAnnotationsCall) Do(f func() map[string]string) *MockModelAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAnnotationsCall) DoAndReturn(f func() map[string]string) *MockModelAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Applications mocks base method.
func (m *MockModel) Applications() []description.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Applications")
	ret0, _ := ret[0].([]description.Application)
	return ret0
}

// Applications indicates an expected call of Applications.
func (mr *MockModelMockRecorder) Applications() *MockModelApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Applications", reflect.TypeOf((*MockModel)(nil).Applications))
	return &MockModelApplicationsCall{Call: call}
}

// MockModelApplicationsCall wrap *gomock.Call
type MockModelApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelApplicationsCall) Return(arg0 []description.Application) *MockModelApplicationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelApplicationsCall) Do(f func() []description.Application) *MockModelApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelApplicationsCall) DoAndReturn(f func() []description.Application) *MockModelApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Blocks mocks base method.
func (m *MockModel) Blocks() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blocks")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Blocks indicates an expected call of Blocks.
func (mr *MockModelMockRecorder) Blocks() *MockModelBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blocks", reflect.TypeOf((*MockModel)(nil).Blocks))
	return &MockModelBlocksCall{Call: call}
}

// MockModelBlocksCall wrap *gomock.Call
type MockModelBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelBlocksCall) Return(arg0 map[string]string) *MockModelBlocksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelBlocksCall) Do(f func() map[string]string) *MockModelBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelBlocksCall) DoAndReturn(f func() map[string]string) *MockModelBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cloud mocks base method.
func (m *MockModel) Cloud() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockModelMockRecorder) Cloud() *MockModelCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockModel)(nil).Cloud))
	return &MockModelCloudCall{Call: call}
}

// MockModelCloudCall wrap *gomock.Call
type MockModelCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCloudCall) Return(arg0 string) *MockModelCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCloudCall) Do(f func() string) *MockModelCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCloudCall) DoAndReturn(f func() string) *MockModelCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudCredential mocks base method.
func (m *MockModel) CloudCredential() description.CloudCredential {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredential")
	ret0, _ := ret[0].(description.CloudCredential)
	return ret0
}

// CloudCredential indicates an expected call of CloudCredential.
func (mr *MockModelMockRecorder) CloudCredential() *MockModelCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredential", reflect.TypeOf((*MockModel)(nil).CloudCredential))
	return &MockModelCloudCredentialCall{Call: call}
}

// MockModelCloudCredentialCall wrap *gomock.Call
type MockModelCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCloudCredentialCall) Return(arg0 description.CloudCredential) *MockModelCloudCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCloudCredentialCall) Do(f func() description.CloudCredential) *MockModelCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCloudCredentialCall) DoAndReturn(f func() description.CloudCredential) *MockModelCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudImageMetadata mocks base method.
func (m *MockModel) CloudImageMetadata() []description.CloudImageMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudImageMetadata")
	ret0, _ := ret[0].([]description.CloudImageMetadata)
	return ret0
}

// CloudImageMetadata indicates an expected call of CloudImageMetadata.
func (mr *MockModelMockRecorder) CloudImageMetadata() *MockModelCloudImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudImageMetadata", reflect.TypeOf((*MockModel)(nil).CloudImageMetadata))
	return &MockModelCloudImageMetadataCall{Call: call}
}

// MockModelCloudImageMetadataCall wrap *gomock.Call
type MockModelCloudImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCloudImageMetadataCall) Return(arg0 []description.CloudImageMetadata) *MockModelCloudImageMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCloudImageMetadataCall) Do(f func() []description.CloudImageMetadata) *MockModelCloudImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCloudImageMetadataCall) DoAndReturn(f func() []description.CloudImageMetadata) *MockModelCloudImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudRegion mocks base method.
func (m *MockModel) CloudRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// CloudRegion indicates an expected call of CloudRegion.
func (mr *MockModelMockRecorder) CloudRegion() *MockModelCloudRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudRegion", reflect.TypeOf((*MockModel)(nil).CloudRegion))
	return &MockModelCloudRegionCall{Call: call}
}

// MockModelCloudRegionCall wrap *gomock.Call
type MockModelCloudRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCloudRegionCall) Return(arg0 string) *MockModelCloudRegionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCloudRegionCall) Do(f func() string) *MockModelCloudRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCloudRegionCall) DoAndReturn(f func() string) *MockModelCloudRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockModel) Config() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockModelMockRecorder) Config() *MockModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockModel)(nil).Config))
	return &MockModelConfigCall{Call: call}
}

// MockModelConfigCall wrap *gomock.Call
type MockModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigCall) Return(arg0 map[string]any) *MockModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigCall) Do(f func() map[string]any) *MockModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigCall) DoAndReturn(f func() map[string]any) *MockModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Constraints mocks base method.
func (m *MockModel) Constraints() description.Constraints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Constraints")
	ret0, _ := ret[0].(description.Constraints)
	return ret0
}

// Constraints indicates an expected call of Constraints.
func (mr *MockModelMockRecorder) Constraints() *MockModelConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Constraints", reflect.TypeOf((*MockModel)(nil).Constraints))
	return &MockModelConstraintsCall{Call: call}
}

// MockModelConstraintsCall wrap *gomock.Call
type MockModelConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConstraintsCall) Return(arg0 description.Constraints) *MockModelConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConstraintsCall) Do(f func() description.Constraints) *MockModelConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConstraintsCall) DoAndReturn(f func() description.Constraints) *MockModelConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnvironVersion mocks base method.
func (m *MockModel) EnvironVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// EnvironVersion indicates an expected call of EnvironVersion.
func (mr *MockModelMockRecorder) EnvironVersion() *MockModelEnvironVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironVersion", reflect.TypeOf((*MockModel)(nil).EnvironVersion))
	return &MockModelEnvironVersionCall{Call: call}
}

// MockModelEnvironVersionCall wrap *gomock.Call
type MockModelEnvironVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelEnvironVersionCall) Return(arg0 int) *MockModelEnvironVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelEnvironVersionCall) Do(f func() int) *MockModelEnvironVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelEnvironVersionCall) DoAndReturn(f func() int) *MockModelEnvironVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExternalControllers mocks base method.
func (m *MockModel) ExternalControllers() []description.ExternalController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalControllers")
	ret0, _ := ret[0].([]description.ExternalController)
	return ret0
}

// ExternalControllers indicates an expected call of ExternalControllers.
func (mr *MockModelMockRecorder) ExternalControllers() *MockModelExternalControllersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalControllers", reflect.TypeOf((*MockModel)(nil).ExternalControllers))
	return &MockModelExternalControllersCall{Call: call}
}

// MockModelExternalControllersCall wrap *gomock.Call
type MockModelExternalControllersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelExternalControllersCall) Return(arg0 []description.ExternalController) *MockModelExternalControllersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelExternalControllersCall) Do(f func() []description.ExternalController) *MockModelExternalControllersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelExternalControllersCall) DoAndReturn(f func() []description.ExternalController) *MockModelExternalControllersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filesystems mocks base method.
func (m *MockModel) Filesystems() []description.Filesystem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filesystems")
	ret0, _ := ret[0].([]description.Filesystem)
	return ret0
}

// Filesystems indicates an expected call of Filesystems.
func (mr *MockModelMockRecorder) Filesystems() *MockModelFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filesystems", reflect.TypeOf((*MockModel)(nil).Filesystems))
	return &MockModelFilesystemsCall{Call: call}
}

// MockModelFilesystemsCall wrap *gomock.Call
type MockModelFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelFilesystemsCall) Return(arg0 []description.Filesystem) *MockModelFilesystemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelFilesystemsCall) Do(f func() []description.Filesystem) *MockModelFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelFilesystemsCall) DoAndReturn(f func() []description.Filesystem) *MockModelFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FirewallRules mocks base method.
func (m *MockModel) FirewallRules() []description.FirewallRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirewallRules")
	ret0, _ := ret[0].([]description.FirewallRule)
	return ret0
}

// FirewallRules indicates an expected call of FirewallRules.
func (mr *MockModelMockRecorder) FirewallRules() *MockModelFirewallRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirewallRules", reflect.TypeOf((*MockModel)(nil).FirewallRules))
	return &MockModelFirewallRulesCall{Call: call}
}

// MockModelFirewallRulesCall wrap *gomock.Call
type MockModelFirewallRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelFirewallRulesCall) Return(arg0 []description.FirewallRule) *MockModelFirewallRulesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelFirewallRulesCall) Do(f func() []description.FirewallRule) *MockModelFirewallRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelFirewallRulesCall) DoAndReturn(f func() []description.FirewallRule) *MockModelFirewallRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IPAddresses mocks base method.
func (m *MockModel) IPAddresses() []description.IPAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPAddresses")
	ret0, _ := ret[0].([]description.IPAddress)
	return ret0
}

// IPAddresses indicates an expected call of IPAddresses.
func (mr *MockModelMockRecorder) IPAddresses() *MockModelIPAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAddresses", reflect.TypeOf((*MockModel)(nil).IPAddresses))
	return &MockModelIPAddressesCall{Call: call}
}

// MockModelIPAddressesCall wrap *gomock.Call
type MockModelIPAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelIPAddressesCall) Return(arg0 []description.IPAddress) *MockModelIPAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelIPAddressesCall) Do(f func() []description.IPAddress) *MockModelIPAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelIPAddressesCall) DoAndReturn(f func() []description.IPAddress) *MockModelIPAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LatestToolsVersion mocks base method.
func (m *MockModel) LatestToolsVersion() version.Number {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestToolsVersion")
	ret0, _ := ret[0].(version.Number)
	return ret0
}

// LatestToolsVersion indicates an expected call of LatestToolsVersion.
func (mr *MockModelMockRecorder) LatestToolsVersion() *MockModelLatestToolsVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestToolsVersion", reflect.TypeOf((*MockModel)(nil).LatestToolsVersion))
	return &MockModelLatestToolsVersionCall{Call: call}
}

// MockModelLatestToolsVersionCall wrap *gomock.Call
type MockModelLatestToolsVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelLatestToolsVersionCall) Return(arg0 version.Number) *MockModelLatestToolsVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelLatestToolsVersionCall) Do(f func() version.Number) *MockModelLatestToolsVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelLatestToolsVersionCall) DoAndReturn(f func() version.Number) *MockModelLatestToolsVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LinkLayerDevices mocks base method.
func (m *MockModel) LinkLayerDevices() []description.LinkLayerDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkLayerDevices")
	ret0, _ := ret[0].([]description.LinkLayerDevice)
	return ret0
}

// LinkLayerDevices indicates an expected call of LinkLayerDevices.
func (mr *MockModelMockRecorder) LinkLayerDevices() *MockModelLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkLayerDevices", reflect.TypeOf((*MockModel)(nil).LinkLayerDevices))
	return &MockModelLinkLayerDevicesCall{Call: call}
}

// MockModelLinkLayerDevicesCall wrap *gomock.Call
type MockModelLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelLinkLayerDevicesCall) Return(arg0 []description.LinkLayerDevice) *MockModelLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelLinkLayerDevicesCall) Do(f func() []description.LinkLayerDevice) *MockModelLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelLinkLayerDevicesCall) DoAndReturn(f func() []description.LinkLayerDevice) *MockModelLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machines mocks base method.
func (m *MockModel) Machines() []description.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machines")
	ret0, _ := ret[0].([]description.Machine)
	return ret0
}

// Machines indicates an expected call of Machines.
func (mr *MockModelMockRecorder) Machines() *MockModelMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machines", reflect.TypeOf((*MockModel)(nil).Machines))
	return &MockModelMachinesCall{Call: call}
}

// MockModelMachinesCall wrap *gomock.Call
type MockModelMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMachinesCall) Return(arg0 []description.Machine) *MockModelMachinesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMachinesCall) Do(f func() []description.Machine) *MockModelMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMachinesCall) DoAndReturn(f func() []description.Machine) *MockModelMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MeterStatus mocks base method.
func (m *MockModel) MeterStatus() description.MeterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeterStatus")
	ret0, _ := ret[0].(description.MeterStatus)
	return ret0
}

// MeterStatus indicates an expected call of MeterStatus.
func (mr *MockModelMockRecorder) MeterStatus() *MockModelMeterStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeterStatus", reflect.TypeOf((*MockModel)(nil).MeterStatus))
	return &MockModelMeterStatusCall{Call: call}
}

// MockModelMeterStatusCall wrap *gomock.Call
type MockModelMeterStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMeterStatusCall) Return(arg0 description.MeterStatus) *MockModelMeterStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMeterStatusCall) Do(f func() description.MeterStatus) *MockModelMeterStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMeterStatusCall) DoAndReturn(f func() description.MeterStatus) *MockModelMeterStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferConnections mocks base method.
func (m *MockModel) OfferConnections() []description.OfferConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferConnections")
	ret0, _ := ret[0].([]description.OfferConnection)
	return ret0
}

// OfferConnections indicates an expected call of OfferConnections.
func (mr *MockModelMockRecorder) OfferConnections() *MockModelOfferConnectionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferConnections", reflect.TypeOf((*MockModel)(nil).OfferConnections))
	return &MockModelOfferConnectionsCall{Call: call}
}

// MockModelOfferConnectionsCall wrap *gomock.Call
type MockModelOfferConnectionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelOfferConnectionsCall) Return(arg0 []description.OfferConnection) *MockModelOfferConnectionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelOfferConnectionsCall) Do(f func() []description.OfferConnection) *MockModelOfferConnectionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelOfferConnectionsCall) DoAndReturn(f func() []description.OfferConnection) *MockModelOfferConnectionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Operations mocks base method.
func (m *MockModel) Operations() []description.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operations")
	ret0, _ := ret[0].([]description.Operation)
	return ret0
}

// Operations indicates an expected call of Operations.
func (mr *MockModelMockRecorder) Operations() *MockModelOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operations", reflect.TypeOf((*MockModel)(nil).Operations))
	return &MockModelOperationsCall{Call: call}
}

// MockModelOperationsCall wrap *gomock.Call
type MockModelOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelOperationsCall) Return(arg0 []description.Operation) *MockModelOperationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelOperationsCall) Do(f func() []description.Operation) *MockModelOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelOperationsCall) DoAndReturn(f func() []description.Operation) *MockModelOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Owner mocks base method.
func (m *MockModel) Owner() names.UserTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(names.UserTag)
	return ret0
}

// Owner indicates an expected call of Owner.
func (mr *MockModelMockRecorder) Owner() *MockModelOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockModel)(nil).Owner))
	return &MockModelOwnerCall{Call: call}
}

// MockModelOwnerCall wrap *gomock.Call
type MockModelOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelOwnerCall) Return(arg0 names.UserTag) *MockModelOwnerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelOwnerCall) Do(f func() names.UserTag) *MockModelOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelOwnerCall) DoAndReturn(f func() names.UserTag) *MockModelOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PasswordHash mocks base method.
func (m *MockModel) PasswordHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// PasswordHash indicates an expected call of PasswordHash.
func (mr *MockModelMockRecorder) PasswordHash() *MockModelPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHash", reflect.TypeOf((*MockModel)(nil).PasswordHash))
	return &MockModelPasswordHashCall{Call: call}
}

// MockModelPasswordHashCall wrap *gomock.Call
type MockModelPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelPasswordHashCall) Return(arg0 string) *MockModelPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelPasswordHashCall) Do(f func() string) *MockModelPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelPasswordHashCall) DoAndReturn(f func() string) *MockModelPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationNetworks mocks base method.
func (m *MockModel) RelationNetworks() []description.RelationNetwork {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationNetworks")
	ret0, _ := ret[0].([]description.RelationNetwork)
	return ret0
}

// RelationNetworks indicates an expected call of RelationNetworks.
func (mr *MockModelMockRecorder) RelationNetworks() *MockModelRelationNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationNetworks", reflect.TypeOf((*MockModel)(nil).RelationNetworks))
	return &MockModelRelationNetworksCall{Call: call}
}

// MockModelRelationNetworksCall wrap *gomock.Call
type MockModelRelationNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelRelationNetworksCall) Return(arg0 []description.RelationNetwork) *MockModelRelationNetworksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelRelationNetworksCall) Do(f func() []description.RelationNetwork) *MockModelRelationNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelRelationNetworksCall) DoAndReturn(f func() []description.RelationNetwork) *MockModelRelationNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Relations mocks base method.
func (m *MockModel) Relations() []description.Relation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relations")
	ret0, _ := ret[0].([]description.Relation)
	return ret0
}

// Relations indicates an expected call of Relations.
func (mr *MockModelMockRecorder) Relations() *MockModelRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relations", reflect.TypeOf((*MockModel)(nil).Relations))
	return &MockModelRelationsCall{Call: call}
}

// MockModelRelationsCall wrap *gomock.Call
type MockModelRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelRelationsCall) Return(arg0 []description.Relation) *MockModelRelationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelRelationsCall) Do(f func() []description.Relation) *MockModelRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelRelationsCall) DoAndReturn(f func() []description.Relation) *MockModelRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplications mocks base method.
func (m *MockModel) RemoteApplications() []description.RemoteApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplications")
	ret0, _ := ret[0].([]description.RemoteApplication)
	return ret0
}

// RemoteApplications indicates an expected call of RemoteApplications.
func (mr *MockModelMockRecorder) RemoteApplications() *MockModelRemoteApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplications", reflect.TypeOf((*MockModel)(nil).RemoteApplications))
	return &MockModelRemoteApplicationsCall{Call: call}
}

// MockModelRemoteApplicationsCall wrap *gomock.Call
type MockModelRemoteApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelRemoteApplicationsCall) Return(arg0 []description.RemoteApplication) *MockModelRemoteApplicationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelRemoteApplicationsCall) Do(f func() []description.RemoteApplication) *MockModelRemoteApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelRemoteApplicationsCall) DoAndReturn(f func() []description.RemoteApplication) *MockModelRemoteApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteEntities mocks base method.
func (m *MockModel) RemoteEntities() []description.RemoteEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteEntities")
	ret0, _ := ret[0].([]description.RemoteEntity)
	return ret0
}

// RemoteEntities indicates an expected call of RemoteEntities.
func (mr *MockModelMockRecorder) RemoteEntities() *MockModelRemoteEntitiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteEntities", reflect.TypeOf((*MockModel)(nil).RemoteEntities))
	return &MockModelRemoteEntitiesCall{Call: call}
}

// MockModelRemoteEntitiesCall wrap *gomock.Call
type MockModelRemoteEntitiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelRemoteEntitiesCall) Return(arg0 []description.RemoteEntity) *MockModelRemoteEntitiesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelRemoteEntitiesCall) Do(f func() []description.RemoteEntity) *MockModelRemoteEntitiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelRemoteEntitiesCall) DoAndReturn(f func() []description.RemoteEntity) *MockModelRemoteEntitiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteSecrets mocks base method.
func (m *MockModel) RemoteSecrets() []description.RemoteSecret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteSecrets")
	ret0, _ := ret[0].([]description.RemoteSecret)
	return ret0
}

// RemoteSecrets indicates an expected call of RemoteSecrets.
func (mr *MockModelMockRecorder) RemoteSecrets() *MockModelRemoteSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteSecrets", reflect.TypeOf((*MockModel)(nil).RemoteSecrets))
	return &MockModelRemoteSecretsCall{Call: call}
}

// MockModelRemoteSecretsCall wrap *gomock.Call
type MockModelRemoteSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelRemoteSecretsCall) Return(arg0 []description.RemoteSecret) *MockModelRemoteSecretsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelRemoteSecretsCall) Do(f func() []description.RemoteSecret) *MockModelRemoteSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelRemoteSecretsCall) DoAndReturn(f func() []description.RemoteSecret) *MockModelRemoteSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SLA mocks base method.
func (m *MockModel) SLA() description.SLA {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SLA")
	ret0, _ := ret[0].(description.SLA)
	return ret0
}

// SLA indicates an expected call of SLA.
func (mr *MockModelMockRecorder) SLA() *MockModelSLACall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SLA", reflect.TypeOf((*MockModel)(nil).SLA))
	return &MockModelSLACall{Call: call}
}

// MockModelSLACall wrap *gomock.Call
type MockModelSLACall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSLACall) Return(arg0 description.SLA) *MockModelSLACall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSLACall) Do(f func() description.SLA) *MockModelSLACall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSLACall) DoAndReturn(f func() description.SLA) *MockModelSLACall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SSHHostKeys mocks base method.
func (m *MockModel) SSHHostKeys() []description.SSHHostKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHHostKeys")
	ret0, _ := ret[0].([]description.SSHHostKey)
	return ret0
}

// SSHHostKeys indicates an expected call of SSHHostKeys.
func (mr *MockModelMockRecorder) SSHHostKeys() *MockModelSSHHostKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHHostKeys", reflect.TypeOf((*MockModel)(nil).SSHHostKeys))
	return &MockModelSSHHostKeysCall{Call: call}
}

// MockModelSSHHostKeysCall wrap *gomock.Call
type MockModelSSHHostKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSSHHostKeysCall) Return(arg0 []description.SSHHostKey) *MockModelSSHHostKeysCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSSHHostKeysCall) Do(f func() []description.SSHHostKey) *MockModelSSHHostKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSSHHostKeysCall) DoAndReturn(f func() []description.SSHHostKey) *MockModelSSHHostKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretBackendID mocks base method.
func (m *MockModel) SecretBackendID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretBackendID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecretBackendID indicates an expected call of SecretBackendID.
func (mr *MockModelMockRecorder) SecretBackendID() *MockModelSecretBackendIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretBackendID", reflect.TypeOf((*MockModel)(nil).SecretBackendID))
	return &MockModelSecretBackendIDCall{Call: call}
}

// MockModelSecretBackendIDCall wrap *gomock.Call
type MockModelSecretBackendIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSecretBackendIDCall) Return(arg0 string) *MockModelSecretBackendIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSecretBackendIDCall) Do(f func() string) *MockModelSecretBackendIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSecretBackendIDCall) DoAndReturn(f func() string) *MockModelSecretBackendIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Secrets mocks base method.
func (m *MockModel) Secrets() []description.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets")
	ret0, _ := ret[0].([]description.Secret)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockModelMockRecorder) Secrets() *MockModelSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockModel)(nil).Secrets))
	return &MockModelSecretsCall{Call: call}
}

// MockModelSecretsCall wrap *gomock.Call
type MockModelSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSecretsCall) Return(arg0 []description.Secret) *MockModelSecretsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSecretsCall) Do(f func() []description.Secret) *MockModelSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSecretsCall) DoAndReturn(f func() []description.Secret) *MockModelSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sequences mocks base method.
func (m *MockModel) Sequences() map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sequences")
	ret0, _ := ret[0].(map[string]int)
	return ret0
}

// Sequences indicates an expected call of Sequences.
func (mr *MockModelMockRecorder) Sequences() *MockModelSequencesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sequences", reflect.TypeOf((*MockModel)(nil).Sequences))
	return &MockModelSequencesCall{Call: call}
}

// MockModelSequencesCall wrap *gomock.Call
type MockModelSequencesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSequencesCall) Return(arg0 map[string]int) *MockModelSequencesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSequencesCall) Do(f func() map[string]int) *MockModelSequencesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSequencesCall) DoAndReturn(f func() map[string]int) *MockModelSequencesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAnnotations mocks base method.
func (m *MockModel) SetAnnotations(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAnnotations", arg0)
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockModelMockRecorder) SetAnnotations(arg0 any) *MockModelSetAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockModel)(nil).SetAnnotations), arg0)
	return &MockModelSetAnnotationsCall{Call: call}
}

// MockModelSetAnnotationsCall wrap *gomock.Call
type MockModelSetAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetAnnotationsCall) Return() *MockModelSetAnnotationsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetAnnotationsCall) Do(f func(map[string]string)) *MockModelSetAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetAnnotationsCall) DoAndReturn(f func(map[string]string)) *MockModelSetAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCloudCredential mocks base method.
func (m *MockModel) SetCloudCredential(arg0 description.CloudCredentialArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCloudCredential", arg0)
}

// SetCloudCredential indicates an expected call of SetCloudCredential.
func (mr *MockModelMockRecorder) SetCloudCredential(arg0 any) *MockModelSetCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloudCredential", reflect.TypeOf((*MockModel)(nil).SetCloudCredential), arg0)
	return &MockModelSetCloudCredentialCall{Call: call}
}

// MockModelSetCloudCredentialCall wrap *gomock.Call
type MockModelSetCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetCloudCredentialCall) Return() *MockModelSetCloudCredentialCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetCloudCredentialCall) Do(f func(description.CloudCredentialArgs)) *MockModelSetCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetCloudCredentialCall) DoAndReturn(f func(description.CloudCredentialArgs)) *MockModelSetCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConstraints mocks base method.
func (m *MockModel) SetConstraints(arg0 description.ConstraintsArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConstraints", arg0)
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockModelMockRecorder) SetConstraints(arg0 any) *MockModelSetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockModel)(nil).SetConstraints), arg0)
	return &MockModelSetConstraintsCall{Call: call}
}

// MockModelSetConstraintsCall wrap *gomock.Call
type MockModelSetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetConstraintsCall) Return() *MockModelSetConstraintsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetConstraintsCall) Do(f func(description.ConstraintsArgs)) *MockModelSetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetConstraintsCall) DoAndReturn(f func(description.ConstraintsArgs)) *MockModelSetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMeterStatus mocks base method.
func (m *MockModel) SetMeterStatus(arg0, arg1 string) description.MeterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMeterStatus", arg0, arg1)
	ret0, _ := ret[0].(description.MeterStatus)
	return ret0
}

// SetMeterStatus indicates an expected call of SetMeterStatus.
func (mr *MockModelMockRecorder) SetMeterStatus(arg0, arg1 any) *MockModelSetMeterStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMeterStatus", reflect.TypeOf((*MockModel)(nil).SetMeterStatus), arg0, arg1)
	return &MockModelSetMeterStatusCall{Call: call}
}

// MockModelSetMeterStatusCall wrap *gomock.Call
type MockModelSetMeterStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetMeterStatusCall) Return(arg0 description.MeterStatus) *MockModelSetMeterStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetMeterStatusCall) Do(f func(string, string) description.MeterStatus) *MockModelSetMeterStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetMeterStatusCall) DoAndReturn(f func(string, string) description.MeterStatus) *MockModelSetMeterStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetSLA mocks base method.
func (m *MockModel) SetSLA(arg0, arg1, arg2 string) description.SLA {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSLA", arg0, arg1, arg2)
	ret0, _ := ret[0].(description.SLA)
	return ret0
}

// SetSLA indicates an expected call of SetSLA.
func (mr *MockModelMockRecorder) SetSLA(arg0, arg1, arg2 any) *MockModelSetSLACall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSLA", reflect.TypeOf((*MockModel)(nil).SetSLA), arg0, arg1, arg2)
	return &MockModelSetSLACall{Call: call}
}

// MockModelSetSLACall wrap *gomock.Call
type MockModelSetSLACall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetSLACall) Return(arg0 description.SLA) *MockModelSetSLACall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetSLACall) Do(f func(string, string, string) description.SLA) *MockModelSetSLACall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetSLACall) DoAndReturn(f func(string, string, string) description.SLA) *MockModelSetSLACall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetSequence mocks base method.
func (m *MockModel) SetSequence(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSequence", arg0, arg1)
}

// SetSequence indicates an expected call of SetSequence.
func (mr *MockModelMockRecorder) SetSequence(arg0, arg1 any) *MockModelSetSequenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSequence", reflect.TypeOf((*MockModel)(nil).SetSequence), arg0, arg1)
	return &MockModelSetSequenceCall{Call: call}
}

// MockModelSetSequenceCall wrap *gomock.Call
type MockModelSetSequenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetSequenceCall) Return() *MockModelSetSequenceCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetSequenceCall) Do(f func(string, int)) *MockModelSetSequenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetSequenceCall) DoAndReturn(f func(string, int)) *MockModelSetSequenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockModel) SetStatus(arg0 description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockModelMockRecorder) SetStatus(arg0 any) *MockModelSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockModel)(nil).SetStatus), arg0)
	return &MockModelSetStatusCall{Call: call}
}

// MockModelSetStatusCall wrap *gomock.Call
type MockModelSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetStatusCall) Return() *MockModelSetStatusCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetStatusCall) Do(f func(description.StatusArgs)) *MockModelSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetStatusCall) DoAndReturn(f func(description.StatusArgs)) *MockModelSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusHistory mocks base method.
func (m *MockModel) SetStatusHistory(arg0 []description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusHistory", arg0)
}

// SetStatusHistory indicates an expected call of SetStatusHistory.
func (mr *MockModelMockRecorder) SetStatusHistory(arg0 any) *MockModelSetStatusHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusHistory", reflect.TypeOf((*MockModel)(nil).SetStatusHistory), arg0)
	return &MockModelSetStatusHistoryCall{Call: call}
}

// MockModelSetStatusHistoryCall wrap *gomock.Call
type MockModelSetStatusHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSetStatusHistoryCall) Return() *MockModelSetStatusHistoryCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSetStatusHistoryCall) Do(f func([]description.StatusArgs)) *MockModelSetStatusHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSetStatusHistoryCall) DoAndReturn(f func([]description.StatusArgs)) *MockModelSetStatusHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Spaces mocks base method.
func (m *MockModel) Spaces() []description.Space {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces")
	ret0, _ := ret[0].([]description.Space)
	return ret0
}

// Spaces indicates an expected call of Spaces.
func (mr *MockModelMockRecorder) Spaces() *MockModelSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockModel)(nil).Spaces))
	return &MockModelSpacesCall{Call: call}
}

// MockModelSpacesCall wrap *gomock.Call
type MockModelSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSpacesCall) Return(arg0 []description.Space) *MockModelSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSpacesCall) Do(f func() []description.Space) *MockModelSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSpacesCall) DoAndReturn(f func() []description.Space) *MockModelSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockModel) Status() description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(description.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockModelMockRecorder) Status() *MockModelStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockModel)(nil).Status))
	return &MockModelStatusCall{Call: call}
}

// MockModelStatusCall wrap *gomock.Call
type MockModelStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStatusCall) Return(arg0 description.Status) *MockModelStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStatusCall) Do(f func() description.Status) *MockModelStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStatusCall) DoAndReturn(f func() description.Status) *MockModelStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StatusHistory mocks base method.
func (m *MockModel) StatusHistory() []description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusHistory")
	ret0, _ := ret[0].([]description.Status)
	return ret0
}

// StatusHistory indicates an expected call of StatusHistory.
func (mr *MockModelMockRecorder) StatusHistory() *MockModelStatusHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusHistory", reflect.TypeOf((*MockModel)(nil).StatusHistory))
	return &MockModelStatusHistoryCall{Call: call}
}

// MockModelStatusHistoryCall wrap *gomock.Call
type MockModelStatusHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStatusHistoryCall) Return(arg0 []description.Status) *MockModelStatusHistoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStatusHistoryCall) Do(f func() []description.Status) *MockModelStatusHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStatusHistoryCall) DoAndReturn(f func() []description.Status) *MockModelStatusHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoragePools mocks base method.
func (m *MockModel) StoragePools() []description.StoragePool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoragePools")
	ret0, _ := ret[0].([]description.StoragePool)
	return ret0
}

// StoragePools indicates an expected call of StoragePools.
func (mr *MockModelMockRecorder) StoragePools() *MockModelStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoragePools", reflect.TypeOf((*MockModel)(nil).StoragePools))
	return &MockModelStoragePoolsCall{Call: call}
}

// MockModelStoragePoolsCall wrap *gomock.Call
type MockModelStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStoragePoolsCall) Return(arg0 []description.StoragePool) *MockModelStoragePoolsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStoragePoolsCall) Do(f func() []description.StoragePool) *MockModelStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStoragePoolsCall) DoAndReturn(f func() []description.StoragePool) *MockModelStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storages mocks base method.
func (m *MockModel) Storages() []description.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storages")
	ret0, _ := ret[0].([]description.Storage)
	return ret0
}

// Storages indicates an expected call of Storages.
func (mr *MockModelMockRecorder) Storages() *MockModelStoragesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storages", reflect.TypeOf((*MockModel)(nil).Storages))
	return &MockModelStoragesCall{Call: call}
}

// MockModelStoragesCall wrap *gomock.Call
type MockModelStoragesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStoragesCall) Return(arg0 []description.Storage) *MockModelStoragesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStoragesCall) Do(f func() []description.Storage) *MockModelStoragesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStoragesCall) DoAndReturn(f func() []description.Storage) *MockModelStoragesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subnets mocks base method.
func (m *MockModel) Subnets() []description.Subnet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets")
	ret0, _ := ret[0].([]description.Subnet)
	return ret0
}

// Subnets indicates an expected call of Subnets.
func (mr *MockModelMockRecorder) Subnets() *MockModelSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockModel)(nil).Subnets))
	return &MockModelSubnetsCall{Call: call}
}

// MockModelSubnetsCall wrap *gomock.Call
type MockModelSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSubnetsCall) Return(arg0 []description.Subnet) *MockModelSubnetsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSubnetsCall) Do(f func() []description.Subnet) *MockModelSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSubnetsCall) DoAndReturn(f func() []description.Subnet) *MockModelSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockModel) Tag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockModelMockRecorder) Tag() *MockModelTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockModel)(nil).Tag))
	return &MockModelTagCall{Call: call}
}

// MockModelTagCall wrap *gomock.Call
type MockModelTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelTagCall) Return(arg0 names.ModelTag) *MockModelTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelTagCall) Do(f func() names.ModelTag) *MockModelTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelTagCall) DoAndReturn(f func() names.ModelTag) *MockModelTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockModel) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockModelMockRecorder) Type() *MockModelTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockModel)(nil).Type))
	return &MockModelTypeCall{Call: call}
}

// MockModelTypeCall wrap *gomock.Call
type MockModelTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelTypeCall) Return(arg0 string) *MockModelTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelTypeCall) Do(f func() string) *MockModelTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelTypeCall) DoAndReturn(f func() string) *MockModelTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateConfig mocks base method.
func (m *MockModel) UpdateConfig(arg0 map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateConfig", arg0)
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockModelMockRecorder) UpdateConfig(arg0 any) *MockModelUpdateConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockModel)(nil).UpdateConfig), arg0)
	return &MockModelUpdateConfigCall{Call: call}
}

// MockModelUpdateConfigCall wrap *gomock.Call
type MockModelUpdateConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelUpdateConfigCall) Return() *MockModelUpdateConfigCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelUpdateConfigCall) Do(f func(map[string]any)) *MockModelUpdateConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelUpdateConfigCall) DoAndReturn(f func(map[string]any)) *MockModelUpdateConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Users mocks base method.
func (m *MockModel) Users() []description.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].([]description.User)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockModelMockRecorder) Users() *MockModelUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockModel)(nil).Users))
	return &MockModelUsersCall{Call: call}
}

// MockModelUsersCall wrap *gomock.Call
type MockModelUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelUsersCall) Return(arg0 []description.User) *MockModelUsersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelUsersCall) Do(f func() []description.User) *MockModelUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelUsersCall) DoAndReturn(f func() []description.User) *MockModelUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockModel) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockModelMockRecorder) Validate() *MockModelValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockModel)(nil).Validate))
	return &MockModelValidateCall{Call: call}
}

// MockModelValidateCall wrap *gomock.Call
type MockModelValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelValidateCall) Return(arg0 error) *MockModelValidateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelValidateCall) Do(f func() error) *MockModelValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelValidateCall) DoAndReturn(f func() error) *MockModelValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Volumes mocks base method.
func (m *MockModel) Volumes() []description.Volume {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Volumes")
	ret0, _ := ret[0].([]description.Volume)
	return ret0
}

// Volumes indicates an expected call of Volumes.
func (mr *MockModelMockRecorder) Volumes() *MockModelVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volumes", reflect.TypeOf((*MockModel)(nil).Volumes))
	return &MockModelVolumesCall{Call: call}
}

// MockModelVolumesCall wrap *gomock.Call
type MockModelVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelVolumesCall) Return(arg0 []description.Volume) *MockModelVolumesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelVolumesCall) Do(f func() []description.Volume) *MockModelVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelVolumesCall) DoAndReturn(f func() []description.Volume) *MockModelVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
