// Copyright 2019 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

/*
 * CODE GENERATED BY juju/scripts/generate-watchers/main.go.
 * THIS FILE SHOULD NOT BE EDITED BY HAND.
 */

package cache

type ApplicationDelta struct {
	old, new ApplicationChange
}

type ApplicationFieldWatcher struct {
	*notifyWatcherBase
	comparitors []func(*ApplicationDelta) bool
}

func newApplicationFieldWatcher(comparitors []func(*ApplicationDelta) bool) *ApplicationFieldWatcher {
	return &ApplicationFieldWatcher{
		notifyWatcherBase: newNotifyWatcherBase(),
		comparitors:       comparitors,
	}
}

func (w *ApplicationFieldWatcher) detailsChange(topic string, value interface{}) {
	delta, ok := value.(*ApplicationDelta)
	if !ok {
		logger.Errorf("programming error, value not of type *ApplicationDelta")
	}

	// If no comparitors were specified, notify for any change.
	if len(w.comparitors) == 0 {
		w.notify()
		return
	}

	// Otherwise notify if any of the articles we are interested in change.
	for _, c := range w.comparitors {
		if c(delta) {
			w.notify()
			return
		}
	}
}

var ApplicationModelUUIDChanged = func(delta *ApplicationDelta) bool {
	return delta.new.ModelUUID != delta.old.ModelUUID
}

var ApplicationNameChanged = func(delta *ApplicationDelta) bool {
	return delta.new.Name != delta.old.Name
}

var ApplicationExposedChanged = func(delta *ApplicationDelta) bool {
	return delta.new.Exposed != delta.old.Exposed
}

var ApplicationCharmURLChanged = func(delta *ApplicationDelta) bool {
	return delta.new.CharmURL != delta.old.CharmURL
}

var ApplicationMinUnitsChanged = func(delta *ApplicationDelta) bool {
	return delta.new.MinUnits != delta.old.MinUnits
}

var ApplicationSubordinateChanged = func(delta *ApplicationDelta) bool {
	return delta.new.Subordinate != delta.old.Subordinate
}

var ApplicationWorkloadVersionChanged = func(delta *ApplicationDelta) bool {
	return delta.new.WorkloadVersion != delta.old.WorkloadVersion
}

type UnitDelta struct {
	old, new UnitChange
}

type UnitFieldWatcher struct {
	*notifyWatcherBase
	comparitors []func(*UnitDelta) bool
}

func newUnitFieldWatcher(comparitors []func(*UnitDelta) bool) *UnitFieldWatcher {
	return &UnitFieldWatcher{
		notifyWatcherBase: newNotifyWatcherBase(),
		comparitors:       comparitors,
	}
}

func (w *UnitFieldWatcher) detailsChange(topic string, value interface{}) {
	delta, ok := value.(*UnitDelta)
	if !ok {
		logger.Errorf("programming error, value not of type *UnitDelta")
	}

	// If no comparitors were specified, notify for any change.
	if len(w.comparitors) == 0 {
		w.notify()
		return
	}

	// Otherwise notify if any of the articles we are interested in change.
	for _, c := range w.comparitors {
		if c(delta) {
			w.notify()
			return
		}
	}
}

var UnitModelUUIDChanged = func(delta *UnitDelta) bool {
	return delta.new.ModelUUID != delta.old.ModelUUID
}

var UnitNameChanged = func(delta *UnitDelta) bool {
	return delta.new.Name != delta.old.Name
}

var UnitApplicationChanged = func(delta *UnitDelta) bool {
	return delta.new.Application != delta.old.Application
}

var UnitSeriesChanged = func(delta *UnitDelta) bool {
	return delta.new.Series != delta.old.Series
}

var UnitCharmURLChanged = func(delta *UnitDelta) bool {
	return delta.new.CharmURL != delta.old.CharmURL
}

var UnitPublicAddressChanged = func(delta *UnitDelta) bool {
	return delta.new.PublicAddress != delta.old.PublicAddress
}

var UnitPrivateAddressChanged = func(delta *UnitDelta) bool {
	return delta.new.PrivateAddress != delta.old.PrivateAddress
}

var UnitMachineIdChanged = func(delta *UnitDelta) bool {
	return delta.new.MachineId != delta.old.MachineId
}

var UnitSubordinateChanged = func(delta *UnitDelta) bool {
	return delta.new.Subordinate != delta.old.Subordinate
}
