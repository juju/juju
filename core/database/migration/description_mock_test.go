// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/description/v4 (interfaces: Model)

// Package migration is a generated GoMock package.
package migration

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	description "github.com/juju/description/v4"
	names "github.com/juju/names/v4"
	version "github.com/juju/version/v2"
)

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockModel) Actions() []description.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].([]description.Action)
	return ret0
}

// Actions indicates an expected call of Actions.
func (mr *MockModelMockRecorder) Actions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockModel)(nil).Actions))
}

// AddAction mocks base method.
func (m *MockModel) AddAction(arg0 description.ActionArgs) description.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAction", arg0)
	ret0, _ := ret[0].(description.Action)
	return ret0
}

// AddAction indicates an expected call of AddAction.
func (mr *MockModelMockRecorder) AddAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAction", reflect.TypeOf((*MockModel)(nil).AddAction), arg0)
}

// AddApplication mocks base method.
func (m *MockModel) AddApplication(arg0 description.ApplicationArgs) description.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplication", arg0)
	ret0, _ := ret[0].(description.Application)
	return ret0
}

// AddApplication indicates an expected call of AddApplication.
func (mr *MockModelMockRecorder) AddApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplication", reflect.TypeOf((*MockModel)(nil).AddApplication), arg0)
}

// AddCloudImageMetadata mocks base method.
func (m *MockModel) AddCloudImageMetadata(arg0 description.CloudImageMetadataArgs) description.CloudImageMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloudImageMetadata", arg0)
	ret0, _ := ret[0].(description.CloudImageMetadata)
	return ret0
}

// AddCloudImageMetadata indicates an expected call of AddCloudImageMetadata.
func (mr *MockModelMockRecorder) AddCloudImageMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloudImageMetadata", reflect.TypeOf((*MockModel)(nil).AddCloudImageMetadata), arg0)
}

// AddExternalController mocks base method.
func (m *MockModel) AddExternalController(arg0 description.ExternalControllerArgs) description.ExternalController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalController", arg0)
	ret0, _ := ret[0].(description.ExternalController)
	return ret0
}

// AddExternalController indicates an expected call of AddExternalController.
func (mr *MockModelMockRecorder) AddExternalController(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalController", reflect.TypeOf((*MockModel)(nil).AddExternalController), arg0)
}

// AddFilesystem mocks base method.
func (m *MockModel) AddFilesystem(arg0 description.FilesystemArgs) description.Filesystem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilesystem", arg0)
	ret0, _ := ret[0].(description.Filesystem)
	return ret0
}

// AddFilesystem indicates an expected call of AddFilesystem.
func (mr *MockModelMockRecorder) AddFilesystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilesystem", reflect.TypeOf((*MockModel)(nil).AddFilesystem), arg0)
}

// AddFirewallRule mocks base method.
func (m *MockModel) AddFirewallRule(arg0 description.FirewallRuleArgs) description.FirewallRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFirewallRule", arg0)
	ret0, _ := ret[0].(description.FirewallRule)
	return ret0
}

// AddFirewallRule indicates an expected call of AddFirewallRule.
func (mr *MockModelMockRecorder) AddFirewallRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFirewallRule", reflect.TypeOf((*MockModel)(nil).AddFirewallRule), arg0)
}

// AddIPAddress mocks base method.
func (m *MockModel) AddIPAddress(arg0 description.IPAddressArgs) description.IPAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIPAddress", arg0)
	ret0, _ := ret[0].(description.IPAddress)
	return ret0
}

// AddIPAddress indicates an expected call of AddIPAddress.
func (mr *MockModelMockRecorder) AddIPAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIPAddress", reflect.TypeOf((*MockModel)(nil).AddIPAddress), arg0)
}

// AddLinkLayerDevice mocks base method.
func (m *MockModel) AddLinkLayerDevice(arg0 description.LinkLayerDeviceArgs) description.LinkLayerDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLinkLayerDevice", arg0)
	ret0, _ := ret[0].(description.LinkLayerDevice)
	return ret0
}

// AddLinkLayerDevice indicates an expected call of AddLinkLayerDevice.
func (mr *MockModelMockRecorder) AddLinkLayerDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinkLayerDevice", reflect.TypeOf((*MockModel)(nil).AddLinkLayerDevice), arg0)
}

// AddMachine mocks base method.
func (m *MockModel) AddMachine(arg0 description.MachineArgs) description.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachine", arg0)
	ret0, _ := ret[0].(description.Machine)
	return ret0
}

// AddMachine indicates an expected call of AddMachine.
func (mr *MockModelMockRecorder) AddMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachine", reflect.TypeOf((*MockModel)(nil).AddMachine), arg0)
}

// AddOfferConnection mocks base method.
func (m *MockModel) AddOfferConnection(arg0 description.OfferConnectionArgs) description.OfferConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOfferConnection", arg0)
	ret0, _ := ret[0].(description.OfferConnection)
	return ret0
}

// AddOfferConnection indicates an expected call of AddOfferConnection.
func (mr *MockModelMockRecorder) AddOfferConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOfferConnection", reflect.TypeOf((*MockModel)(nil).AddOfferConnection), arg0)
}

// AddOperation mocks base method.
func (m *MockModel) AddOperation(arg0 description.OperationArgs) description.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOperation", arg0)
	ret0, _ := ret[0].(description.Operation)
	return ret0
}

// AddOperation indicates an expected call of AddOperation.
func (mr *MockModelMockRecorder) AddOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperation", reflect.TypeOf((*MockModel)(nil).AddOperation), arg0)
}

// AddRelation mocks base method.
func (m *MockModel) AddRelation(arg0 description.RelationArgs) description.Relation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", arg0)
	ret0, _ := ret[0].(description.Relation)
	return ret0
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockModelMockRecorder) AddRelation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockModel)(nil).AddRelation), arg0)
}

// AddRelationNetwork mocks base method.
func (m *MockModel) AddRelationNetwork(arg0 description.RelationNetworkArgs) description.RelationNetwork {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelationNetwork", arg0)
	ret0, _ := ret[0].(description.RelationNetwork)
	return ret0
}

// AddRelationNetwork indicates an expected call of AddRelationNetwork.
func (mr *MockModelMockRecorder) AddRelationNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationNetwork", reflect.TypeOf((*MockModel)(nil).AddRelationNetwork), arg0)
}

// AddRemoteApplication mocks base method.
func (m *MockModel) AddRemoteApplication(arg0 description.RemoteApplicationArgs) description.RemoteApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplication", arg0)
	ret0, _ := ret[0].(description.RemoteApplication)
	return ret0
}

// AddRemoteApplication indicates an expected call of AddRemoteApplication.
func (mr *MockModelMockRecorder) AddRemoteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplication", reflect.TypeOf((*MockModel)(nil).AddRemoteApplication), arg0)
}

// AddRemoteEntity mocks base method.
func (m *MockModel) AddRemoteEntity(arg0 description.RemoteEntityArgs) description.RemoteEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteEntity", arg0)
	ret0, _ := ret[0].(description.RemoteEntity)
	return ret0
}

// AddRemoteEntity indicates an expected call of AddRemoteEntity.
func (mr *MockModelMockRecorder) AddRemoteEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteEntity", reflect.TypeOf((*MockModel)(nil).AddRemoteEntity), arg0)
}

// AddRemoteSecret mocks base method.
func (m *MockModel) AddRemoteSecret(arg0 description.RemoteSecretArgs) description.RemoteSecret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteSecret", arg0)
	ret0, _ := ret[0].(description.RemoteSecret)
	return ret0
}

// AddRemoteSecret indicates an expected call of AddRemoteSecret.
func (mr *MockModelMockRecorder) AddRemoteSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteSecret", reflect.TypeOf((*MockModel)(nil).AddRemoteSecret), arg0)
}

// AddSSHHostKey mocks base method.
func (m *MockModel) AddSSHHostKey(arg0 description.SSHHostKeyArgs) description.SSHHostKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSSHHostKey", arg0)
	ret0, _ := ret[0].(description.SSHHostKey)
	return ret0
}

// AddSSHHostKey indicates an expected call of AddSSHHostKey.
func (mr *MockModelMockRecorder) AddSSHHostKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSSHHostKey", reflect.TypeOf((*MockModel)(nil).AddSSHHostKey), arg0)
}

// AddSecret mocks base method.
func (m *MockModel) AddSecret(arg0 description.SecretArgs) description.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecret", arg0)
	ret0, _ := ret[0].(description.Secret)
	return ret0
}

// AddSecret indicates an expected call of AddSecret.
func (mr *MockModelMockRecorder) AddSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockModel)(nil).AddSecret), arg0)
}

// AddSpace mocks base method.
func (m *MockModel) AddSpace(arg0 description.SpaceArgs) description.Space {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0)
	ret0, _ := ret[0].(description.Space)
	return ret0
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockModelMockRecorder) AddSpace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockModel)(nil).AddSpace), arg0)
}

// AddStorage mocks base method.
func (m *MockModel) AddStorage(arg0 description.StorageArgs) description.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorage", arg0)
	ret0, _ := ret[0].(description.Storage)
	return ret0
}

// AddStorage indicates an expected call of AddStorage.
func (mr *MockModelMockRecorder) AddStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorage", reflect.TypeOf((*MockModel)(nil).AddStorage), arg0)
}

// AddStoragePool mocks base method.
func (m *MockModel) AddStoragePool(arg0 description.StoragePoolArgs) description.StoragePool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStoragePool", arg0)
	ret0, _ := ret[0].(description.StoragePool)
	return ret0
}

// AddStoragePool indicates an expected call of AddStoragePool.
func (mr *MockModelMockRecorder) AddStoragePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStoragePool", reflect.TypeOf((*MockModel)(nil).AddStoragePool), arg0)
}

// AddSubnet mocks base method.
func (m *MockModel) AddSubnet(arg0 description.SubnetArgs) description.Subnet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0)
	ret0, _ := ret[0].(description.Subnet)
	return ret0
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockModelMockRecorder) AddSubnet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockModel)(nil).AddSubnet), arg0)
}

// AddUser mocks base method.
func (m *MockModel) AddUser(arg0 description.UserArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUser", arg0)
}

// AddUser indicates an expected call of AddUser.
func (mr *MockModelMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockModel)(nil).AddUser), arg0)
}

// AddVolume mocks base method.
func (m *MockModel) AddVolume(arg0 description.VolumeArgs) description.Volume {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolume", arg0)
	ret0, _ := ret[0].(description.Volume)
	return ret0
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockModelMockRecorder) AddVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockModel)(nil).AddVolume), arg0)
}

// Annotations mocks base method.
func (m *MockModel) Annotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Annotations indicates an expected call of Annotations.
func (mr *MockModelMockRecorder) Annotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotations", reflect.TypeOf((*MockModel)(nil).Annotations))
}

// Applications mocks base method.
func (m *MockModel) Applications() []description.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Applications")
	ret0, _ := ret[0].([]description.Application)
	return ret0
}

// Applications indicates an expected call of Applications.
func (mr *MockModelMockRecorder) Applications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Applications", reflect.TypeOf((*MockModel)(nil).Applications))
}

// Blocks mocks base method.
func (m *MockModel) Blocks() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blocks")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Blocks indicates an expected call of Blocks.
func (mr *MockModelMockRecorder) Blocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blocks", reflect.TypeOf((*MockModel)(nil).Blocks))
}

// Cloud mocks base method.
func (m *MockModel) Cloud() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockModelMockRecorder) Cloud() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockModel)(nil).Cloud))
}

// CloudCredential mocks base method.
func (m *MockModel) CloudCredential() description.CloudCredential {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredential")
	ret0, _ := ret[0].(description.CloudCredential)
	return ret0
}

// CloudCredential indicates an expected call of CloudCredential.
func (mr *MockModelMockRecorder) CloudCredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredential", reflect.TypeOf((*MockModel)(nil).CloudCredential))
}

// CloudImageMetadata mocks base method.
func (m *MockModel) CloudImageMetadata() []description.CloudImageMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudImageMetadata")
	ret0, _ := ret[0].([]description.CloudImageMetadata)
	return ret0
}

// CloudImageMetadata indicates an expected call of CloudImageMetadata.
func (mr *MockModelMockRecorder) CloudImageMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudImageMetadata", reflect.TypeOf((*MockModel)(nil).CloudImageMetadata))
}

// CloudRegion mocks base method.
func (m *MockModel) CloudRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// CloudRegion indicates an expected call of CloudRegion.
func (mr *MockModelMockRecorder) CloudRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudRegion", reflect.TypeOf((*MockModel)(nil).CloudRegion))
}

// Config mocks base method.
func (m *MockModel) Config() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockModelMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockModel)(nil).Config))
}

// Constraints mocks base method.
func (m *MockModel) Constraints() description.Constraints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Constraints")
	ret0, _ := ret[0].(description.Constraints)
	return ret0
}

// Constraints indicates an expected call of Constraints.
func (mr *MockModelMockRecorder) Constraints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Constraints", reflect.TypeOf((*MockModel)(nil).Constraints))
}

// EnvironVersion mocks base method.
func (m *MockModel) EnvironVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// EnvironVersion indicates an expected call of EnvironVersion.
func (mr *MockModelMockRecorder) EnvironVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironVersion", reflect.TypeOf((*MockModel)(nil).EnvironVersion))
}

// ExternalControllers mocks base method.
func (m *MockModel) ExternalControllers() []description.ExternalController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalControllers")
	ret0, _ := ret[0].([]description.ExternalController)
	return ret0
}

// ExternalControllers indicates an expected call of ExternalControllers.
func (mr *MockModelMockRecorder) ExternalControllers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalControllers", reflect.TypeOf((*MockModel)(nil).ExternalControllers))
}

// Filesystems mocks base method.
func (m *MockModel) Filesystems() []description.Filesystem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filesystems")
	ret0, _ := ret[0].([]description.Filesystem)
	return ret0
}

// Filesystems indicates an expected call of Filesystems.
func (mr *MockModelMockRecorder) Filesystems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filesystems", reflect.TypeOf((*MockModel)(nil).Filesystems))
}

// FirewallRules mocks base method.
func (m *MockModel) FirewallRules() []description.FirewallRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirewallRules")
	ret0, _ := ret[0].([]description.FirewallRule)
	return ret0
}

// FirewallRules indicates an expected call of FirewallRules.
func (mr *MockModelMockRecorder) FirewallRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirewallRules", reflect.TypeOf((*MockModel)(nil).FirewallRules))
}

// IPAddresses mocks base method.
func (m *MockModel) IPAddresses() []description.IPAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPAddresses")
	ret0, _ := ret[0].([]description.IPAddress)
	return ret0
}

// IPAddresses indicates an expected call of IPAddresses.
func (mr *MockModelMockRecorder) IPAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAddresses", reflect.TypeOf((*MockModel)(nil).IPAddresses))
}

// LatestToolsVersion mocks base method.
func (m *MockModel) LatestToolsVersion() version.Number {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestToolsVersion")
	ret0, _ := ret[0].(version.Number)
	return ret0
}

// LatestToolsVersion indicates an expected call of LatestToolsVersion.
func (mr *MockModelMockRecorder) LatestToolsVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestToolsVersion", reflect.TypeOf((*MockModel)(nil).LatestToolsVersion))
}

// LinkLayerDevices mocks base method.
func (m *MockModel) LinkLayerDevices() []description.LinkLayerDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkLayerDevices")
	ret0, _ := ret[0].([]description.LinkLayerDevice)
	return ret0
}

// LinkLayerDevices indicates an expected call of LinkLayerDevices.
func (mr *MockModelMockRecorder) LinkLayerDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkLayerDevices", reflect.TypeOf((*MockModel)(nil).LinkLayerDevices))
}

// Machines mocks base method.
func (m *MockModel) Machines() []description.Machine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machines")
	ret0, _ := ret[0].([]description.Machine)
	return ret0
}

// Machines indicates an expected call of Machines.
func (mr *MockModelMockRecorder) Machines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machines", reflect.TypeOf((*MockModel)(nil).Machines))
}

// MeterStatus mocks base method.
func (m *MockModel) MeterStatus() description.MeterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeterStatus")
	ret0, _ := ret[0].(description.MeterStatus)
	return ret0
}

// MeterStatus indicates an expected call of MeterStatus.
func (mr *MockModelMockRecorder) MeterStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeterStatus", reflect.TypeOf((*MockModel)(nil).MeterStatus))
}

// OfferConnections mocks base method.
func (m *MockModel) OfferConnections() []description.OfferConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferConnections")
	ret0, _ := ret[0].([]description.OfferConnection)
	return ret0
}

// OfferConnections indicates an expected call of OfferConnections.
func (mr *MockModelMockRecorder) OfferConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferConnections", reflect.TypeOf((*MockModel)(nil).OfferConnections))
}

// Operations mocks base method.
func (m *MockModel) Operations() []description.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operations")
	ret0, _ := ret[0].([]description.Operation)
	return ret0
}

// Operations indicates an expected call of Operations.
func (mr *MockModelMockRecorder) Operations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operations", reflect.TypeOf((*MockModel)(nil).Operations))
}

// Owner mocks base method.
func (m *MockModel) Owner() names.UserTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(names.UserTag)
	return ret0
}

// Owner indicates an expected call of Owner.
func (mr *MockModelMockRecorder) Owner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockModel)(nil).Owner))
}

// PasswordHash mocks base method.
func (m *MockModel) PasswordHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// PasswordHash indicates an expected call of PasswordHash.
func (mr *MockModelMockRecorder) PasswordHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHash", reflect.TypeOf((*MockModel)(nil).PasswordHash))
}

// RelationNetworks mocks base method.
func (m *MockModel) RelationNetworks() []description.RelationNetwork {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationNetworks")
	ret0, _ := ret[0].([]description.RelationNetwork)
	return ret0
}

// RelationNetworks indicates an expected call of RelationNetworks.
func (mr *MockModelMockRecorder) RelationNetworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationNetworks", reflect.TypeOf((*MockModel)(nil).RelationNetworks))
}

// Relations mocks base method.
func (m *MockModel) Relations() []description.Relation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relations")
	ret0, _ := ret[0].([]description.Relation)
	return ret0
}

// Relations indicates an expected call of Relations.
func (mr *MockModelMockRecorder) Relations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relations", reflect.TypeOf((*MockModel)(nil).Relations))
}

// RemoteApplications mocks base method.
func (m *MockModel) RemoteApplications() []description.RemoteApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplications")
	ret0, _ := ret[0].([]description.RemoteApplication)
	return ret0
}

// RemoteApplications indicates an expected call of RemoteApplications.
func (mr *MockModelMockRecorder) RemoteApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplications", reflect.TypeOf((*MockModel)(nil).RemoteApplications))
}

// RemoteEntities mocks base method.
func (m *MockModel) RemoteEntities() []description.RemoteEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteEntities")
	ret0, _ := ret[0].([]description.RemoteEntity)
	return ret0
}

// RemoteEntities indicates an expected call of RemoteEntities.
func (mr *MockModelMockRecorder) RemoteEntities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteEntities", reflect.TypeOf((*MockModel)(nil).RemoteEntities))
}

// RemoteSecrets mocks base method.
func (m *MockModel) RemoteSecrets() []description.RemoteSecret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteSecrets")
	ret0, _ := ret[0].([]description.RemoteSecret)
	return ret0
}

// RemoteSecrets indicates an expected call of RemoteSecrets.
func (mr *MockModelMockRecorder) RemoteSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteSecrets", reflect.TypeOf((*MockModel)(nil).RemoteSecrets))
}

// SLA mocks base method.
func (m *MockModel) SLA() description.SLA {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SLA")
	ret0, _ := ret[0].(description.SLA)
	return ret0
}

// SLA indicates an expected call of SLA.
func (mr *MockModelMockRecorder) SLA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SLA", reflect.TypeOf((*MockModel)(nil).SLA))
}

// SSHHostKeys mocks base method.
func (m *MockModel) SSHHostKeys() []description.SSHHostKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHHostKeys")
	ret0, _ := ret[0].([]description.SSHHostKey)
	return ret0
}

// SSHHostKeys indicates an expected call of SSHHostKeys.
func (mr *MockModelMockRecorder) SSHHostKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHHostKeys", reflect.TypeOf((*MockModel)(nil).SSHHostKeys))
}

// SecretBackendID mocks base method.
func (m *MockModel) SecretBackendID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretBackendID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecretBackendID indicates an expected call of SecretBackendID.
func (mr *MockModelMockRecorder) SecretBackendID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretBackendID", reflect.TypeOf((*MockModel)(nil).SecretBackendID))
}

// Secrets mocks base method.
func (m *MockModel) Secrets() []description.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets")
	ret0, _ := ret[0].([]description.Secret)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockModelMockRecorder) Secrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockModel)(nil).Secrets))
}

// Sequences mocks base method.
func (m *MockModel) Sequences() map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sequences")
	ret0, _ := ret[0].(map[string]int)
	return ret0
}

// Sequences indicates an expected call of Sequences.
func (mr *MockModelMockRecorder) Sequences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sequences", reflect.TypeOf((*MockModel)(nil).Sequences))
}

// SetAnnotations mocks base method.
func (m *MockModel) SetAnnotations(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAnnotations", arg0)
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockModelMockRecorder) SetAnnotations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockModel)(nil).SetAnnotations), arg0)
}

// SetCloudCredential mocks base method.
func (m *MockModel) SetCloudCredential(arg0 description.CloudCredentialArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCloudCredential", arg0)
}

// SetCloudCredential indicates an expected call of SetCloudCredential.
func (mr *MockModelMockRecorder) SetCloudCredential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloudCredential", reflect.TypeOf((*MockModel)(nil).SetCloudCredential), arg0)
}

// SetConstraints mocks base method.
func (m *MockModel) SetConstraints(arg0 description.ConstraintsArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConstraints", arg0)
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockModelMockRecorder) SetConstraints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockModel)(nil).SetConstraints), arg0)
}

// SetMeterStatus mocks base method.
func (m *MockModel) SetMeterStatus(arg0, arg1 string) description.MeterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMeterStatus", arg0, arg1)
	ret0, _ := ret[0].(description.MeterStatus)
	return ret0
}

// SetMeterStatus indicates an expected call of SetMeterStatus.
func (mr *MockModelMockRecorder) SetMeterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMeterStatus", reflect.TypeOf((*MockModel)(nil).SetMeterStatus), arg0, arg1)
}

// SetSLA mocks base method.
func (m *MockModel) SetSLA(arg0, arg1, arg2 string) description.SLA {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSLA", arg0, arg1, arg2)
	ret0, _ := ret[0].(description.SLA)
	return ret0
}

// SetSLA indicates an expected call of SetSLA.
func (mr *MockModelMockRecorder) SetSLA(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSLA", reflect.TypeOf((*MockModel)(nil).SetSLA), arg0, arg1, arg2)
}

// SetSequence mocks base method.
func (m *MockModel) SetSequence(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSequence", arg0, arg1)
}

// SetSequence indicates an expected call of SetSequence.
func (mr *MockModelMockRecorder) SetSequence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSequence", reflect.TypeOf((*MockModel)(nil).SetSequence), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockModel) SetStatus(arg0 description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockModelMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockModel)(nil).SetStatus), arg0)
}

// SetStatusHistory mocks base method.
func (m *MockModel) SetStatusHistory(arg0 []description.StatusArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusHistory", arg0)
}

// SetStatusHistory indicates an expected call of SetStatusHistory.
func (mr *MockModelMockRecorder) SetStatusHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusHistory", reflect.TypeOf((*MockModel)(nil).SetStatusHistory), arg0)
}

// Spaces mocks base method.
func (m *MockModel) Spaces() []description.Space {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces")
	ret0, _ := ret[0].([]description.Space)
	return ret0
}

// Spaces indicates an expected call of Spaces.
func (mr *MockModelMockRecorder) Spaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockModel)(nil).Spaces))
}

// Status mocks base method.
func (m *MockModel) Status() description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(description.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockModelMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockModel)(nil).Status))
}

// StatusHistory mocks base method.
func (m *MockModel) StatusHistory() []description.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusHistory")
	ret0, _ := ret[0].([]description.Status)
	return ret0
}

// StatusHistory indicates an expected call of StatusHistory.
func (mr *MockModelMockRecorder) StatusHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusHistory", reflect.TypeOf((*MockModel)(nil).StatusHistory))
}

// StoragePools mocks base method.
func (m *MockModel) StoragePools() []description.StoragePool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoragePools")
	ret0, _ := ret[0].([]description.StoragePool)
	return ret0
}

// StoragePools indicates an expected call of StoragePools.
func (mr *MockModelMockRecorder) StoragePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoragePools", reflect.TypeOf((*MockModel)(nil).StoragePools))
}

// Storages mocks base method.
func (m *MockModel) Storages() []description.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storages")
	ret0, _ := ret[0].([]description.Storage)
	return ret0
}

// Storages indicates an expected call of Storages.
func (mr *MockModelMockRecorder) Storages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storages", reflect.TypeOf((*MockModel)(nil).Storages))
}

// Subnets mocks base method.
func (m *MockModel) Subnets() []description.Subnet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets")
	ret0, _ := ret[0].([]description.Subnet)
	return ret0
}

// Subnets indicates an expected call of Subnets.
func (mr *MockModelMockRecorder) Subnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockModel)(nil).Subnets))
}

// Tag mocks base method.
func (m *MockModel) Tag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockModelMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockModel)(nil).Tag))
}

// Type mocks base method.
func (m *MockModel) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockModelMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockModel)(nil).Type))
}

// UpdateConfig mocks base method.
func (m *MockModel) UpdateConfig(arg0 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateConfig", arg0)
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockModelMockRecorder) UpdateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockModel)(nil).UpdateConfig), arg0)
}

// Users mocks base method.
func (m *MockModel) Users() []description.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].([]description.User)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockModelMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockModel)(nil).Users))
}

// Validate mocks base method.
func (m *MockModel) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockModelMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockModel)(nil).Validate))
}

// Volumes mocks base method.
func (m *MockModel) Volumes() []description.Volume {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Volumes")
	ret0, _ := ret[0].([]description.Volume)
	return ret0
}

// Volumes indicates an expected call of Volumes.
func (mr *MockModelMockRecorder) Volumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volumes", reflect.TypeOf((*MockModel)(nil).Volumes))
}
