#!/usr/bin/env python3
import amulet
import requests
import time

seconds = 900

d = amulet.Deployment(series='trusty')

#Setup the charms, and relationships
d.add('mysql')
d.add('memcached')
d.add('mediawiki')
d.configure('mediawiki', {'name': 'amulet-wiki'})
d.configure('memcached', {'allow-ufw-ip6-softfail': True})
d.relate('mysql:db', 'mediawiki:db')
d.relate('memcached:cache', 'mediawiki:cache')
d.expose('mediawiki')


# Perform the setup for the deployment.
try:
    d.setup(seconds)
    #pings every deployed unit
    d.sentry.wait(seconds)
except amulet.helpers.TimeoutError:
    message = 'The environment did not setup in %d seconds.' % seconds
    amulet.raise_status(amulet.SKIP, msg=message)
except:
    raise

mw_unit = d.sentry['mediawiki'][0]
mysql_unit = d.sentry['mysql'][0]
memcached_unit = d.sentry['memcached'][0]

#############################################################
# Validate the DB Relationship using Amulet Sentry
#############################################################
sql_relation = mysql_unit.relation('db', 'mediawiki:db')

# Validate that the database server was set for the configuration of MediaWiki
#Set search term for comparison, and cache the flag in the configuration file
output, code = mw_unit.run("cat /etc/mediawiki/LocalSettings.php \
        | grep wgDBserver | awk '{printf $3}'")

search_term = "\"{}\";".format(sql_relation['private-address'])
if search_term != output:
    message = "Unable to Determine Remote MYSQL configuration, " \
        "expected: %s, got: %s" % (search_term, output)

    amulet.raise_status(amulet.FAIL, msg=message)

#############################################################
# Validate the Memcached Relationship using Amulet Sentry
#############################################################
memcached_relation = memcached_unit.relation('cache', 'mediawiki:cache')
output, code = mw_unit.run("cat /etc/mediawiki/memcached_settings.php \
    | grep wgMemCachedServers | tr -d \'array\(\)\; | awk '{printf $3}'")

search_term = "%s:%s" % (memcached_relation['private-address'],
                         memcached_relation['port'])

#############################################################
# Validate the installation configuration using Requests
#############################################################
mw_ip = mw_unit.info['public-address']
mw_url = "http://%s/mediawiki/index.php" % mw_ip
response = requests.get(mw_url)

if response.content.find(b"<title>amulet-wiki") == -1:
    amulet.raise_status(amulet.FAIL,
                        "Unable to validate configuration for wiki-name")

# Add an admin (now that we validated a good db connection)
d.configure('mediawiki', {'admins': 'tom:swordfish'})
# Give the config-changed hook 30s to settle
time.sleep(30)
login_url = "http://%s/mediawiki/api.php?action=login&lgname=tom&lgpassword=swordfish&format=json" % mw_ip

# Test that we can login with the newly created admin
with requests.Session() as s:
    # hit the login url with credentials, retrieve a token to use for later validation
    resp = s.post(login_url)
    token = resp.json()['login']['token']

    # hit the login url again with creds+token to verify if we are successfully logged in
    resp2 = s.post(login_url+'&lgtoken=%s' % token, cookies=resp.cookies)
    result = resp2.json()['login']['result']
    if result != "Success":
        amulet.raise_status(amulet.FAIL, "Unable to validate admin login: %s" % result)
