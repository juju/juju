#!/usr/bin/env python
#
#    db-relation-changed - hook to configure mediawiki when db changes
#
#    Copyright (C) 2011  Canonical Ltd.
#    Author: Clint Byrum <clint.byrum@canonical.com>
#
#    Copied and modified version of wordpress db-relation-changed by
#    Kapil Thangavelu, also Copyright 2011 Canonical
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import urllib
import subprocess
import tempfile
import json
import time
import MySQLdb
from subprocess import check_output, check_call

upload_path = "/var/www/wp-uploads"
config_file_path_template = "/etc/mediawiki/config-%s.php"

INSTALL_SCRIPT = '/usr/share/mediawiki/maintenance/install.php'

def do(*args):
    print "do", args
    p = subprocess.Popen(args, close_fds=True)
    os.waitpid(p.pid, 0)

mediawiki_template = """\
<?php
$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
# ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "/mediawiki";
$wgScriptExtension  = ".php";

include dirname(__FILE__).'/config-settings.php';

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = "webmaster@localhost";
$wgPasswordSender = "webmaster@localhost";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "%(database_host)s";
$wgDBname           = "%(database)s";
$wgDBuser           = "%(database_user)s";
$wgDBpassword       = "%(database_password)s";
include("/etc/mediawiki/dbservers.php");

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();
include dirname(__FILE__).'/memcached_settings.php';

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = false;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = "en";

$wgSecretKey = "%(secret_key)s";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# debian specific include:
if (is_file("/etc/mediawiki-extensions/extensions.php")) {
        include( "/etc/mediawiki-extensions/extensions.php" );
}

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );
"""

adminsettings_template = """
<?php
$wgDBadminuser = '%(database_user)s';
$wgDBadminpassword = '%(database_password)s';
$wgEnableProfileInfo = false;
"""

def setup_mediawiki():

    remote_unit = os.environ.get("JUJU_REMOTE_UNIT")

    print "remote unit", remote_unit

    p = subprocess.Popen(["relation-get", "--format", "json"],
                         stdout=subprocess.PIPE, close_fds=True)
    settings = json.loads(p.stdout.read().strip())
    if len(settings) == 0:
        print "No settings yet, cannot configure."
        return

    print "Settings"
    import pprint
    pprint.pprint(settings)

    # Get the database settings
    database = settings.get("database")
    password = settings.get("password")
    user = settings.get("user")
    private_address = settings.get("private-address")

    # Generate this the same way the installer does
    secret_key = open("/dev/urandom","r").read(32).encode('hex')

    # Ensure the remote unit has self configured.
    config = {
        "database_host": private_address,
        "database": database,
        "database_password": password,
        "database_user": user,
        "secret_key": secret_key}

    # Verify we have all of our database settings.
    broken = False
    for k, v in config.items():
        if not v:
            print "Do not have for %r: %r" % (k, v)
            broken = True

    if broken:
        print "Could not fetch database settings, exiting."
        return

    # Enable the Alias in the apache config
    do("sed", "-i","s,^#Alias /mediawiki,Alias /mediawiki,","/etc/mediawiki/apache.conf")

    # Restart apache
    do("/etc/init.d/apache2", "reload")

    # Replace "It Works" with redirector to wiki
    ofile=tempfile.NamedTemporaryFile(dir="/var/www",delete=False)
    os.chmod(ofile.name, 0755)
    ofile.write("<?php header('Location: /mediawiki/');\n")
    ofile.close()
    try:
        os.unlink("/var/www/index.php")
        print "index.php removed"
    except OSError:
        print "index.php not present"
    os.rename(ofile.name, "/var/www/index.php")

    # This seems to take precedence
    try:
        os.unlink("/var/www/index.html")
        print "index.html removed"
    except OSError:
        print "index.html not present"

    # Write the adminsettings
    connection = MySQLdb.connect(user=user, host=private_address, passwd=password, db=database)
    cursor = connection.cursor()
    do_install = None
    try:
      # Try to create the "mediawiki_juju_setup" table and if its already there, skip some things
      cursor.execute("create table mediawiki_juju_setup (id int)")
      do_install = True
    except Exception as e:
      # If we can't create that table, it has likely already been initialized
      print 'Could not create mediawiki_juju_setup: ' + str(e)
      do_install = False
    if do_install:
      # First time setup, we have to POST to the db and capture the LocalSettings.php
      # This sysop is irrelevant, admins can be created by config settings.
      try:
          sysop = check_output(['pwgen','16']).strip()
          sysop_password = check_output(['pwgen','16']).strip()
          if os.path.exists(INSTALL_SCRIPT):
              install_result = check_call(['php',
                      INSTALL_SCRIPT,
                      '--dbuser',user,
                      '--dbpass',password,
                      '--dbname',database,
                      '--installdbuser',user,
                      '--installdbpass',password,
                      '--confpath','/etc/mediawiki',
                      '--dbserver',private_address,
                      '--dbtype','mysql',
                      '--pass',sysop_password,
                      check_output(['config-get','name']).strip(),
                      sysop])
          else:
              postargs = {'Sitename':'juju-d Wiki',
                'EmergencyContact':'webmaster@localhost',
                'LanguageCode':'en',
                'License':'none',
                'SysopName':sysop,
                'SysopPass':sysop_password,
                'SysopPass2':sysop_password,
                'Shm':'none',
                'Email':'email_enabled',
                'Emailuser':'emailuser_enabled',
                'Enotif':'enotif_disabled',
                'Eauthent':'eauthent_enabled',
                'DBtype':'mysql',
                'DBserver':private_address,
                'DBname':database,
                'DBuser':user,
                'DBpassword':password,
                'DBpassword2':password,
              }
              try:
                install = urllib.urlopen('http://localhost/mediawiki/config/index.php', urllib.urlencode(postargs))
                print "install URL returned ",install.getcode()
              except Exception as e:
                print "WARNING: could not post to installer!"
                print e
                raise Exception
      except Exception, e:
          print "Dropping mediawiki_juju_setup"
          print e
          try:
              cursor.execute("drop table mediawiki_juju_setup")
          except Exception, e:
              print "Could not drop mediawiki_juju_setup"
              print e
      # Sadly, we really have to discard this LocalSettings.php and re-build
      # it using the template, so that joins can just generate it without
      # trying to create the whole DB.
      #do("mv","/var/lib/mediawiki/config/LocalSettings.php","/etc/mediawiki/LocalSettings.php.generated")

    # Write the mediawiki config - broken until dbservers.php is created
    fh = open('/etc/mediawiki/LocalSettings.php', "w")
    do("chmod", "0640", '/etc/mediawiki/LocalSettings.php')
    do("chgrp", "www-data", '/etc/mediawiki/LocalSettings.php')
    fh.write(mediawiki_template % config)
    fh.close()

    # Write the AdminSettings config for updates
    fh = open('/etc/mediawiki/AdminSettings.php', "w")
    do("chmod", "0640", '/etc/mediawiki/AdminSettings.php')
    do("chgrp", "www-data", '/etc/mediawiki/AdminSettings.php')
    fh.write(adminsettings_template % config)
    fh.close()

    # Refresh slave settings
    scriptpath = os.path.join(os.path.dirname(os.path.abspath(__file__)),'combine-dbservers')
    print "Running " + scriptpath
    subprocess.check_call(scriptpath)

    subprocess.check_call(['open-port','80'])

subprocess.check_call(['status-set', 'maintenance', 'Configuring Database'])

setup_mediawiki()

subprocess.check_call(['status-set', 'active', 'Ready'])
