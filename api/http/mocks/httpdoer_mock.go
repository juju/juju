// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/http (interfaces: HTTPDoer)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/httpdoer_mock.go github.com/juju/juju/api/http HTTPDoer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPDoer is a mock of HTTPDoer interface.
type MockHTTPDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPDoerMockRecorder
}

// MockHTTPDoerMockRecorder is the mock recorder for MockHTTPDoer.
type MockHTTPDoerMockRecorder struct {
	mock *MockHTTPDoer
}

// NewMockHTTPDoer creates a new mock instance.
func NewMockHTTPDoer(ctrl *gomock.Controller) *MockHTTPDoer {
	mock := &MockHTTPDoer{ctrl: ctrl}
	mock.recorder = &MockHTTPDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPDoer) EXPECT() *MockHTTPDoerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockHTTPDoer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Do mocks base method.
func (m *MockHTTPDoer) Do(arg0 context.Context, arg1 *http.Request, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockHTTPDoerMockRecorder) Do(arg0, arg1, arg2 any) *MockHTTPDoerDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPDoer)(nil).Do), arg0, arg1, arg2)
	return &MockHTTPDoerDoCall{Call: call}
}

// MockHTTPDoerDoCall wrap *gomock.Call
type MockHTTPDoerDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPDoerDoCall) Return(arg0 error) *MockHTTPDoerDoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPDoerDoCall) Do(f func(context.Context, *http.Request, any) error) *MockHTTPDoerDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPDoerDoCall) DoAndReturn(f func(context.Context, *http.Request, any) error) *MockHTTPDoerDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
