// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/base (interfaces: FacadeCaller)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/facade_mock.go github.com/juju/juju/api/base FacadeCaller
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	base "github.com/juju/juju/api/base"
	gomock "go.uber.org/mock/gomock"
)

// MockFacadeCaller is a mock of FacadeCaller interface.
type MockFacadeCaller struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeCallerMockRecorder
}

// MockFacadeCallerMockRecorder is the mock recorder for MockFacadeCaller.
type MockFacadeCallerMockRecorder struct {
	mock *MockFacadeCaller
}

// NewMockFacadeCaller creates a new mock instance.
func NewMockFacadeCaller(ctrl *gomock.Controller) *MockFacadeCaller {
	mock := &MockFacadeCaller{ctrl: ctrl}
	mock.recorder = &MockFacadeCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeCaller) EXPECT() *MockFacadeCallerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFacadeCaller) ISGOMOCK() struct{} {
	return struct{}{}
}

// BestAPIVersion mocks base method.
func (m *MockFacadeCaller) BestAPIVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestAPIVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// BestAPIVersion indicates an expected call of BestAPIVersion.
func (mr *MockFacadeCallerMockRecorder) BestAPIVersion() *MockFacadeCallerBestAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestAPIVersion", reflect.TypeOf((*MockFacadeCaller)(nil).BestAPIVersion))
	return &MockFacadeCallerBestAPIVersionCall{Call: call}
}

// MockFacadeCallerBestAPIVersionCall wrap *gomock.Call
type MockFacadeCallerBestAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeCallerBestAPIVersionCall) Return(arg0 int) *MockFacadeCallerBestAPIVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeCallerBestAPIVersionCall) Do(f func() int) *MockFacadeCallerBestAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeCallerBestAPIVersionCall) DoAndReturn(f func() int) *MockFacadeCallerBestAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FacadeCall mocks base method.
func (m *MockFacadeCaller) FacadeCall(arg0 context.Context, arg1 string, arg2, arg3 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FacadeCall", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FacadeCall indicates an expected call of FacadeCall.
func (mr *MockFacadeCallerMockRecorder) FacadeCall(arg0, arg1, arg2, arg3 any) *MockFacadeCallerFacadeCallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FacadeCall", reflect.TypeOf((*MockFacadeCaller)(nil).FacadeCall), arg0, arg1, arg2, arg3)
	return &MockFacadeCallerFacadeCallCall{Call: call}
}

// MockFacadeCallerFacadeCallCall wrap *gomock.Call
type MockFacadeCallerFacadeCallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeCallerFacadeCallCall) Return(arg0 error) *MockFacadeCallerFacadeCallCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeCallerFacadeCallCall) Do(f func(context.Context, string, any, any) error) *MockFacadeCallerFacadeCallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeCallerFacadeCallCall) DoAndReturn(f func(context.Context, string, any, any) error) *MockFacadeCallerFacadeCallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockFacadeCaller) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFacadeCallerMockRecorder) Name() *MockFacadeCallerNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFacadeCaller)(nil).Name))
	return &MockFacadeCallerNameCall{Call: call}
}

// MockFacadeCallerNameCall wrap *gomock.Call
type MockFacadeCallerNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeCallerNameCall) Return(arg0 string) *MockFacadeCallerNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeCallerNameCall) Do(f func() string) *MockFacadeCallerNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeCallerNameCall) DoAndReturn(f func() string) *MockFacadeCallerNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RawAPICaller mocks base method.
func (m *MockFacadeCaller) RawAPICaller() base.APICaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawAPICaller")
	ret0, _ := ret[0].(base.APICaller)
	return ret0
}

// RawAPICaller indicates an expected call of RawAPICaller.
func (mr *MockFacadeCallerMockRecorder) RawAPICaller() *MockFacadeCallerRawAPICallerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawAPICaller", reflect.TypeOf((*MockFacadeCaller)(nil).RawAPICaller))
	return &MockFacadeCallerRawAPICallerCall{Call: call}
}

// MockFacadeCallerRawAPICallerCall wrap *gomock.Call
type MockFacadeCallerRawAPICallerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeCallerRawAPICallerCall) Return(arg0 base.APICaller) *MockFacadeCallerRawAPICallerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeCallerRawAPICallerCall) Do(f func() base.APICaller) *MockFacadeCallerRawAPICallerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeCallerRawAPICallerCall) DoAndReturn(f func() base.APICaller) *MockFacadeCallerRawAPICallerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
