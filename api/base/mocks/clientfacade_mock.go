// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/base (interfaces: ClientFacade)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientFacade is a mock of ClientFacade interface
type MockClientFacade struct {
	ctrl     *gomock.Controller
	recorder *MockClientFacadeMockRecorder
}

// MockClientFacadeMockRecorder is the mock recorder for MockClientFacade
type MockClientFacadeMockRecorder struct {
	mock *MockClientFacade
}

// NewMockClientFacade creates a new mock instance
func NewMockClientFacade(ctrl *gomock.Controller) *MockClientFacade {
	mock := &MockClientFacade{ctrl: ctrl}
	mock.recorder = &MockClientFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientFacade) EXPECT() *MockClientFacadeMockRecorder {
	return m.recorder
}

// BestAPIVersion mocks base method
func (m *MockClientFacade) BestAPIVersion() int {
	ret := m.ctrl.Call(m, "BestAPIVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// BestAPIVersion indicates an expected call of BestAPIVersion
func (mr *MockClientFacadeMockRecorder) BestAPIVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestAPIVersion", reflect.TypeOf((*MockClientFacade)(nil).BestAPIVersion))
}

// Close mocks base method
func (m *MockClientFacade) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientFacadeMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientFacade)(nil).Close))
}
