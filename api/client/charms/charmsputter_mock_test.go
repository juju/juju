// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/client/charms (interfaces: CharmPutter)
//
// Generated by this command:
//
//	mockgen -typed -package charms -destination charmsputter_mock_test.go github.com/juju/juju/api/client/charms CharmPutter
//

// Package charms is a generated GoMock package.
package charms

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCharmPutter is a mock of CharmPutter interface.
type MockCharmPutter struct {
	ctrl     *gomock.Controller
	recorder *MockCharmPutterMockRecorder
}

// MockCharmPutterMockRecorder is the mock recorder for MockCharmPutter.
type MockCharmPutterMockRecorder struct {
	mock *MockCharmPutter
}

// NewMockCharmPutter creates a new mock instance.
func NewMockCharmPutter(ctrl *gomock.Controller) *MockCharmPutter {
	mock := &MockCharmPutter{ctrl: ctrl}
	mock.recorder = &MockCharmPutterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmPutter) EXPECT() *MockCharmPutterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmPutter) ISGOMOCK() struct{} {
	return struct{}{}
}

// PutCharm mocks base method.
func (m *MockCharmPutter) PutCharm(arg0 context.Context, arg1, arg2, arg3 string, arg4 io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCharm", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCharm indicates an expected call of PutCharm.
func (mr *MockCharmPutterMockRecorder) PutCharm(arg0, arg1, arg2, arg3, arg4 any) *MockCharmPutterPutCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCharm", reflect.TypeOf((*MockCharmPutter)(nil).PutCharm), arg0, arg1, arg2, arg3, arg4)
	return &MockCharmPutterPutCharmCall{Call: call}
}

// MockCharmPutterPutCharmCall wrap *gomock.Call
type MockCharmPutterPutCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmPutterPutCharmCall) Return(arg0 string, arg1 error) *MockCharmPutterPutCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmPutterPutCharmCall) Do(f func(context.Context, string, string, string, io.Reader) (string, error)) *MockCharmPutterPutCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmPutterPutCharmCall) DoAndReturn(f func(context.Context, string, string, string, io.Reader) (string, error)) *MockCharmPutterPutCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
