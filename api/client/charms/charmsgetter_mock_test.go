// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/client/charms (interfaces: CharmGetter)
//
// Generated by this command:
//
//	mockgen -typed -package charms_test -destination charmsgetter_mock_test.go github.com/juju/juju/api/client/charms CharmGetter
//

// Package charms_test is a generated GoMock package.
package charms_test

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCharmGetter is a mock of CharmGetter interface.
type MockCharmGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCharmGetterMockRecorder
}

// MockCharmGetterMockRecorder is the mock recorder for MockCharmGetter.
type MockCharmGetterMockRecorder struct {
	mock *MockCharmGetter
}

// NewMockCharmGetter creates a new mock instance.
func NewMockCharmGetter(ctrl *gomock.Controller) *MockCharmGetter {
	mock := &MockCharmGetter{ctrl: ctrl}
	mock.recorder = &MockCharmGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmGetter) EXPECT() *MockCharmGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCharmGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetCharm mocks base method.
func (m *MockCharmGetter) GetCharm(arg0 context.Context, arg1, arg2 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharm indicates an expected call of GetCharm.
func (mr *MockCharmGetterMockRecorder) GetCharm(arg0, arg1, arg2 any) *MockCharmGetterGetCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharm", reflect.TypeOf((*MockCharmGetter)(nil).GetCharm), arg0, arg1, arg2)
	return &MockCharmGetterGetCharmCall{Call: call}
}

// MockCharmGetterGetCharmCall wrap *gomock.Call
type MockCharmGetterGetCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmGetterGetCharmCall) Return(arg0 io.ReadCloser, arg1 error) *MockCharmGetterGetCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmGetterGetCharmCall) Do(f func(context.Context, string, string) (io.ReadCloser, error)) *MockCharmGetterGetCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmGetterGetCharmCall) DoAndReturn(f func(context.Context, string, string) (io.ReadCloser, error)) *MockCharmGetterGetCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
