// Code generated by MockGen. DO NOT EDIT.
// Source: gopkg.in/httprequest.v1 (interfaces: Doer)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/httprequest_mock.go gopkg.in/httprequest.v1 Doer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDoer is a mock of Doer interface.
type MockDoer struct {
	ctrl     *gomock.Controller
	recorder *MockDoerMockRecorder
}

// MockDoerMockRecorder is the mock recorder for MockDoer.
type MockDoerMockRecorder struct {
	mock *MockDoer
}

// NewMockDoer creates a new mock instance.
func NewMockDoer(ctrl *gomock.Controller) *MockDoer {
	mock := &MockDoer{ctrl: ctrl}
	mock.recorder = &MockDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoer) EXPECT() *MockDoerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDoer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Do mocks base method.
func (m *MockDoer) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDoerMockRecorder) Do(arg0 any) *MockDoerDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDoer)(nil).Do), arg0)
	return &MockDoerDoCall{Call: call}
}

// MockDoerDoCall wrap *gomock.Call
type MockDoerDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDoerDoCall) Return(arg0 *http.Response, arg1 error) *MockDoerDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDoerDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockDoerDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDoerDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockDoerDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
