// Code generated by MockGen. DO NOT EDIT.
// Source: legacyloginprovider_test.go
//
// Generated by this command:
//
//	mockgen -typed -package api_test -destination api_mock_test.go -source legacyloginprovider_test.go RootAPI,AdminAPI
//

// Package api_test is a generated GoMock package.
package api_test

import (
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockRootAPI is a mock of RootAPI interface.
type MockRootAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRootAPIMockRecorder
}

// MockRootAPIMockRecorder is the mock recorder for MockRootAPI.
type MockRootAPIMockRecorder struct {
	mock *MockRootAPI
}

// NewMockRootAPI creates a new mock instance.
func NewMockRootAPI(ctrl *gomock.Controller) *MockRootAPI {
	mock := &MockRootAPI{ctrl: ctrl}
	mock.recorder = &MockRootAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRootAPI) EXPECT() *MockRootAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRootAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Admin mocks base method.
func (m *MockRootAPI) Admin(id string) (AdminAPI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Admin", id)
	ret0, _ := ret[0].(AdminAPI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Admin indicates an expected call of Admin.
func (mr *MockRootAPIMockRecorder) Admin(id any) *MockRootAPIAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Admin", reflect.TypeOf((*MockRootAPI)(nil).Admin), id)
	return &MockRootAPIAdminCall{Call: call}
}

// MockRootAPIAdminCall wrap *gomock.Call
type MockRootAPIAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRootAPIAdminCall) Return(arg0 AdminAPI, arg1 error) *MockRootAPIAdminCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRootAPIAdminCall) Do(f func(string) (AdminAPI, error)) *MockRootAPIAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRootAPIAdminCall) DoAndReturn(f func(string) (AdminAPI, error)) *MockRootAPIAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAdminAPI is a mock of AdminAPI interface.
type MockAdminAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAdminAPIMockRecorder
}

// MockAdminAPIMockRecorder is the mock recorder for MockAdminAPI.
type MockAdminAPIMockRecorder struct {
	mock *MockAdminAPI
}

// NewMockAdminAPI creates a new mock instance.
func NewMockAdminAPI(ctrl *gomock.Controller) *MockAdminAPI {
	mock := &MockAdminAPI{ctrl: ctrl}
	mock.recorder = &MockAdminAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminAPI) EXPECT() *MockAdminAPIMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAdminAPI) ISGOMOCK() struct{} {
	return struct{}{}
}

// Login mocks base method.
func (m *MockAdminAPI) Login(req params.LoginRequest) (params.LoginResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", req)
	ret0, _ := ret[0].(params.LoginResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAdminAPIMockRecorder) Login(req any) *MockAdminAPILoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAdminAPI)(nil).Login), req)
	return &MockAdminAPILoginCall{Call: call}
}

// MockAdminAPILoginCall wrap *gomock.Call
type MockAdminAPILoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAdminAPILoginCall) Return(arg0 params.LoginResult, arg1 error) *MockAdminAPILoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAdminAPILoginCall) Do(f func(params.LoginRequest) (params.LoginResult, error)) *MockAdminAPILoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAdminAPILoginCall) DoAndReturn(f func(params.LoginRequest) (params.LoginResult, error)) *MockAdminAPILoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
