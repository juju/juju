// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/raftlease (interfaces: Remote,RaftLeaseApplier)

// Package raftlease is a generated GoMock package.
package raftlease

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	params "github.com/juju/juju/apiserver/params"
	raftlease "github.com/juju/juju/core/raftlease"
)

// MockRemote is a mock of Remote interface.
type MockRemote struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteMockRecorder
}

// MockRemoteMockRecorder is the mock recorder for MockRemote.
type MockRemoteMockRecorder struct {
	mock *MockRemote
}

// NewMockRemote creates a new mock instance.
func NewMockRemote(ctrl *gomock.Controller) *MockRemote {
	mock := &MockRemote{ctrl: ctrl}
	mock.recorder = &MockRemoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemote) EXPECT() *MockRemoteMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockRemote) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockRemoteMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockRemote)(nil).Address))
}

// ID mocks base method.
func (m *MockRemote) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRemoteMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRemote)(nil).ID))
}

// Kill mocks base method.
func (m *MockRemote) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockRemoteMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockRemote)(nil).Kill))
}

// Request mocks base method.
func (m *MockRemote) Request(arg0 context.Context, arg1 *raftlease.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockRemoteMockRecorder) Request(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockRemote)(nil).Request), arg0, arg1)
}

// SetAddress mocks base method.
func (m *MockRemote) SetAddress(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAddress", arg0)
}

// SetAddress indicates an expected call of SetAddress.
func (mr *MockRemoteMockRecorder) SetAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddress", reflect.TypeOf((*MockRemote)(nil).SetAddress), arg0)
}

// Wait mocks base method.
func (m *MockRemote) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRemoteMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRemote)(nil).Wait))
}

// MockRaftLeaseApplier is a mock of RaftLeaseApplier interface.
type MockRaftLeaseApplier struct {
	ctrl     *gomock.Controller
	recorder *MockRaftLeaseApplierMockRecorder
}

// MockRaftLeaseApplierMockRecorder is the mock recorder for MockRaftLeaseApplier.
type MockRaftLeaseApplierMockRecorder struct {
	mock *MockRaftLeaseApplier
}

// NewMockRaftLeaseApplier creates a new mock instance.
func NewMockRaftLeaseApplier(ctrl *gomock.Controller) *MockRaftLeaseApplier {
	mock := &MockRaftLeaseApplier{ctrl: ctrl}
	mock.recorder = &MockRaftLeaseApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftLeaseApplier) EXPECT() *MockRaftLeaseApplierMockRecorder {
	return m.recorder
}

// ApplyLease mocks base method.
func (m *MockRaftLeaseApplier) ApplyLease(arg0 params.LeaseOperationCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyLease", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyLease indicates an expected call of ApplyLease.
func (mr *MockRaftLeaseApplierMockRecorder) ApplyLease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLease", reflect.TypeOf((*MockRaftLeaseApplier)(nil).ApplyLease), arg0)
}
