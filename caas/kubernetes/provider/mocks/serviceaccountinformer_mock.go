// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/informers/core/v1 (interfaces: ServiceAccountInformer)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/serviceaccountinformer_mock.go k8s.io/client-go/informers/core/v1 ServiceAccountInformer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/client-go/listers/core/v1"
	cache "k8s.io/client-go/tools/cache"
)

// MockServiceAccountInformer is a mock of ServiceAccountInformer interface.
type MockServiceAccountInformer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountInformerMockRecorder
}

// MockServiceAccountInformerMockRecorder is the mock recorder for MockServiceAccountInformer.
type MockServiceAccountInformerMockRecorder struct {
	mock *MockServiceAccountInformer
}

// NewMockServiceAccountInformer creates a new mock instance.
func NewMockServiceAccountInformer(ctrl *gomock.Controller) *MockServiceAccountInformer {
	mock := &MockServiceAccountInformer{ctrl: ctrl}
	mock.recorder = &MockServiceAccountInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountInformer) EXPECT() *MockServiceAccountInformerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockServiceAccountInformer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Informer mocks base method.
func (m *MockServiceAccountInformer) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer.
func (mr *MockServiceAccountInformerMockRecorder) Informer() *MockServiceAccountInformerInformerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockServiceAccountInformer)(nil).Informer))
	return &MockServiceAccountInformerInformerCall{Call: call}
}

// MockServiceAccountInformerInformerCall wrap *gomock.Call
type MockServiceAccountInformerInformerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInformerInformerCall) Return(arg0 cache.SharedIndexInformer) *MockServiceAccountInformerInformerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInformerInformerCall) Do(f func() cache.SharedIndexInformer) *MockServiceAccountInformerInformerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInformerInformerCall) DoAndReturn(f func() cache.SharedIndexInformer) *MockServiceAccountInformerInformerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Lister mocks base method.
func (m *MockServiceAccountInformer) Lister() v1.ServiceAccountLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lister")
	ret0, _ := ret[0].(v1.ServiceAccountLister)
	return ret0
}

// Lister indicates an expected call of Lister.
func (mr *MockServiceAccountInformerMockRecorder) Lister() *MockServiceAccountInformerListerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lister", reflect.TypeOf((*MockServiceAccountInformer)(nil).Lister))
	return &MockServiceAccountInformerListerCall{Call: call}
}

// MockServiceAccountInformerListerCall wrap *gomock.Call
type MockServiceAccountInformerListerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInformerListerCall) Return(arg0 v1.ServiceAccountLister) *MockServiceAccountInformerListerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInformerListerCall) Do(f func() v1.ServiceAccountLister) *MockServiceAccountInformerListerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInformerListerCall) DoAndReturn(f func() v1.ServiceAccountLister) *MockServiceAccountInformerListerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
