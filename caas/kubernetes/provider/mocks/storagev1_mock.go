// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/storage/v1 (interfaces: StorageV1Interface,StorageClassInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/storagev1_mock.go k8s.io/client-go/kubernetes/typed/storage/v1 StorageV1Interface,StorageClassInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/storage/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/storage/v1"
	v12 "k8s.io/client-go/kubernetes/typed/storage/v1"
	rest "k8s.io/client-go/rest"
)

// MockStorageV1Interface is a mock of StorageV1Interface interface.
type MockStorageV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageV1InterfaceMockRecorder
}

// MockStorageV1InterfaceMockRecorder is the mock recorder for MockStorageV1Interface.
type MockStorageV1InterfaceMockRecorder struct {
	mock *MockStorageV1Interface
}

// NewMockStorageV1Interface creates a new mock instance.
func NewMockStorageV1Interface(ctrl *gomock.Controller) *MockStorageV1Interface {
	mock := &MockStorageV1Interface{ctrl: ctrl}
	mock.recorder = &MockStorageV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageV1Interface) EXPECT() *MockStorageV1InterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStorageV1Interface) ISGOMOCK() struct{} {
	return struct{}{}
}

// CSIDrivers mocks base method.
func (m *MockStorageV1Interface) CSIDrivers() v12.CSIDriverInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSIDrivers")
	ret0, _ := ret[0].(v12.CSIDriverInterface)
	return ret0
}

// CSIDrivers indicates an expected call of CSIDrivers.
func (mr *MockStorageV1InterfaceMockRecorder) CSIDrivers() *MockStorageV1InterfaceCSIDriversCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSIDrivers", reflect.TypeOf((*MockStorageV1Interface)(nil).CSIDrivers))
	return &MockStorageV1InterfaceCSIDriversCall{Call: call}
}

// MockStorageV1InterfaceCSIDriversCall wrap *gomock.Call
type MockStorageV1InterfaceCSIDriversCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageV1InterfaceCSIDriversCall) Return(arg0 v12.CSIDriverInterface) *MockStorageV1InterfaceCSIDriversCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageV1InterfaceCSIDriversCall) Do(f func() v12.CSIDriverInterface) *MockStorageV1InterfaceCSIDriversCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageV1InterfaceCSIDriversCall) DoAndReturn(f func() v12.CSIDriverInterface) *MockStorageV1InterfaceCSIDriversCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CSINodes mocks base method.
func (m *MockStorageV1Interface) CSINodes() v12.CSINodeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSINodes")
	ret0, _ := ret[0].(v12.CSINodeInterface)
	return ret0
}

// CSINodes indicates an expected call of CSINodes.
func (mr *MockStorageV1InterfaceMockRecorder) CSINodes() *MockStorageV1InterfaceCSINodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSINodes", reflect.TypeOf((*MockStorageV1Interface)(nil).CSINodes))
	return &MockStorageV1InterfaceCSINodesCall{Call: call}
}

// MockStorageV1InterfaceCSINodesCall wrap *gomock.Call
type MockStorageV1InterfaceCSINodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageV1InterfaceCSINodesCall) Return(arg0 v12.CSINodeInterface) *MockStorageV1InterfaceCSINodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageV1InterfaceCSINodesCall) Do(f func() v12.CSINodeInterface) *MockStorageV1InterfaceCSINodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageV1InterfaceCSINodesCall) DoAndReturn(f func() v12.CSINodeInterface) *MockStorageV1InterfaceCSINodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CSIStorageCapacities mocks base method.
func (m *MockStorageV1Interface) CSIStorageCapacities(arg0 string) v12.CSIStorageCapacityInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSIStorageCapacities", arg0)
	ret0, _ := ret[0].(v12.CSIStorageCapacityInterface)
	return ret0
}

// CSIStorageCapacities indicates an expected call of CSIStorageCapacities.
func (mr *MockStorageV1InterfaceMockRecorder) CSIStorageCapacities(arg0 any) *MockStorageV1InterfaceCSIStorageCapacitiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSIStorageCapacities", reflect.TypeOf((*MockStorageV1Interface)(nil).CSIStorageCapacities), arg0)
	return &MockStorageV1InterfaceCSIStorageCapacitiesCall{Call: call}
}

// MockStorageV1InterfaceCSIStorageCapacitiesCall wrap *gomock.Call
type MockStorageV1InterfaceCSIStorageCapacitiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageV1InterfaceCSIStorageCapacitiesCall) Return(arg0 v12.CSIStorageCapacityInterface) *MockStorageV1InterfaceCSIStorageCapacitiesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageV1InterfaceCSIStorageCapacitiesCall) Do(f func(string) v12.CSIStorageCapacityInterface) *MockStorageV1InterfaceCSIStorageCapacitiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageV1InterfaceCSIStorageCapacitiesCall) DoAndReturn(f func(string) v12.CSIStorageCapacityInterface) *MockStorageV1InterfaceCSIStorageCapacitiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTClient mocks base method.
func (m *MockStorageV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockStorageV1InterfaceMockRecorder) RESTClient() *MockStorageV1InterfaceRESTClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockStorageV1Interface)(nil).RESTClient))
	return &MockStorageV1InterfaceRESTClientCall{Call: call}
}

// MockStorageV1InterfaceRESTClientCall wrap *gomock.Call
type MockStorageV1InterfaceRESTClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageV1InterfaceRESTClientCall) Return(arg0 rest.Interface) *MockStorageV1InterfaceRESTClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageV1InterfaceRESTClientCall) Do(f func() rest.Interface) *MockStorageV1InterfaceRESTClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageV1InterfaceRESTClientCall) DoAndReturn(f func() rest.Interface) *MockStorageV1InterfaceRESTClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageClasses mocks base method.
func (m *MockStorageV1Interface) StorageClasses() v12.StorageClassInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageClasses")
	ret0, _ := ret[0].(v12.StorageClassInterface)
	return ret0
}

// StorageClasses indicates an expected call of StorageClasses.
func (mr *MockStorageV1InterfaceMockRecorder) StorageClasses() *MockStorageV1InterfaceStorageClassesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageClasses", reflect.TypeOf((*MockStorageV1Interface)(nil).StorageClasses))
	return &MockStorageV1InterfaceStorageClassesCall{Call: call}
}

// MockStorageV1InterfaceStorageClassesCall wrap *gomock.Call
type MockStorageV1InterfaceStorageClassesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageV1InterfaceStorageClassesCall) Return(arg0 v12.StorageClassInterface) *MockStorageV1InterfaceStorageClassesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageV1InterfaceStorageClassesCall) Do(f func() v12.StorageClassInterface) *MockStorageV1InterfaceStorageClassesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageV1InterfaceStorageClassesCall) DoAndReturn(f func() v12.StorageClassInterface) *MockStorageV1InterfaceStorageClassesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeAttachments mocks base method.
func (m *MockStorageV1Interface) VolumeAttachments() v12.VolumeAttachmentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAttachments")
	ret0, _ := ret[0].(v12.VolumeAttachmentInterface)
	return ret0
}

// VolumeAttachments indicates an expected call of VolumeAttachments.
func (mr *MockStorageV1InterfaceMockRecorder) VolumeAttachments() *MockStorageV1InterfaceVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAttachments", reflect.TypeOf((*MockStorageV1Interface)(nil).VolumeAttachments))
	return &MockStorageV1InterfaceVolumeAttachmentsCall{Call: call}
}

// MockStorageV1InterfaceVolumeAttachmentsCall wrap *gomock.Call
type MockStorageV1InterfaceVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageV1InterfaceVolumeAttachmentsCall) Return(arg0 v12.VolumeAttachmentInterface) *MockStorageV1InterfaceVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageV1InterfaceVolumeAttachmentsCall) Do(f func() v12.VolumeAttachmentInterface) *MockStorageV1InterfaceVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageV1InterfaceVolumeAttachmentsCall) DoAndReturn(f func() v12.VolumeAttachmentInterface) *MockStorageV1InterfaceVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageClassInterface is a mock of StorageClassInterface interface.
type MockStorageClassInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClassInterfaceMockRecorder
}

// MockStorageClassInterfaceMockRecorder is the mock recorder for MockStorageClassInterface.
type MockStorageClassInterfaceMockRecorder struct {
	mock *MockStorageClassInterface
}

// NewMockStorageClassInterface creates a new mock instance.
func NewMockStorageClassInterface(ctrl *gomock.Controller) *MockStorageClassInterface {
	mock := &MockStorageClassInterface{ctrl: ctrl}
	mock.recorder = &MockStorageClassInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClassInterface) EXPECT() *MockStorageClassInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStorageClassInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockStorageClassInterface) Apply(arg0 context.Context, arg1 *v11.StorageClassApplyConfiguration, arg2 v10.ApplyOptions) (*v1.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockStorageClassInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockStorageClassInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockStorageClassInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockStorageClassInterfaceApplyCall{Call: call}
}

// MockStorageClassInterfaceApplyCall wrap *gomock.Call
type MockStorageClassInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceApplyCall) Return(arg0 *v1.StorageClass, arg1 error) *MockStorageClassInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceApplyCall) Do(f func(context.Context, *v11.StorageClassApplyConfiguration, v10.ApplyOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.StorageClassApplyConfiguration, v10.ApplyOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockStorageClassInterface) Create(arg0 context.Context, arg1 *v1.StorageClass, arg2 v10.CreateOptions) (*v1.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageClassInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockStorageClassInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageClassInterface)(nil).Create), arg0, arg1, arg2)
	return &MockStorageClassInterfaceCreateCall{Call: call}
}

// MockStorageClassInterfaceCreateCall wrap *gomock.Call
type MockStorageClassInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceCreateCall) Return(arg0 *v1.StorageClass, arg1 error) *MockStorageClassInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceCreateCall) Do(f func(context.Context, *v1.StorageClass, v10.CreateOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.StorageClass, v10.CreateOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockStorageClassInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageClassInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockStorageClassInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageClassInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockStorageClassInterfaceDeleteCall{Call: call}
}

// MockStorageClassInterfaceDeleteCall wrap *gomock.Call
type MockStorageClassInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceDeleteCall) Return(arg0 error) *MockStorageClassInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockStorageClassInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockStorageClassInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockStorageClassInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockStorageClassInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockStorageClassInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockStorageClassInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockStorageClassInterfaceDeleteCollectionCall{Call: call}
}

// MockStorageClassInterfaceDeleteCollectionCall wrap *gomock.Call
type MockStorageClassInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceDeleteCollectionCall) Return(arg0 error) *MockStorageClassInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockStorageClassInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockStorageClassInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockStorageClassInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageClassInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockStorageClassInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageClassInterface)(nil).Get), arg0, arg1, arg2)
	return &MockStorageClassInterfaceGetCall{Call: call}
}

// MockStorageClassInterfaceGetCall wrap *gomock.Call
type MockStorageClassInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceGetCall) Return(arg0 *v1.StorageClass, arg1 error) *MockStorageClassInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockStorageClassInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.StorageClassList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.StorageClassList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStorageClassInterfaceMockRecorder) List(arg0, arg1 any) *MockStorageClassInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageClassInterface)(nil).List), arg0, arg1)
	return &MockStorageClassInterfaceListCall{Call: call}
}

// MockStorageClassInterfaceListCall wrap *gomock.Call
type MockStorageClassInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceListCall) Return(arg0 *v1.StorageClassList, arg1 error) *MockStorageClassInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.StorageClassList, error)) *MockStorageClassInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.StorageClassList, error)) *MockStorageClassInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockStorageClassInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.StorageClass, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockStorageClassInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockStorageClassInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockStorageClassInterface)(nil).Patch), varargs...)
	return &MockStorageClassInterfacePatchCall{Call: call}
}

// MockStorageClassInterfacePatchCall wrap *gomock.Call
type MockStorageClassInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfacePatchCall) Return(arg0 *v1.StorageClass, arg1 error) *MockStorageClassInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.StorageClass, error)) *MockStorageClassInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.StorageClass, error)) *MockStorageClassInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockStorageClassInterface) Update(arg0 context.Context, arg1 *v1.StorageClass, arg2 v10.UpdateOptions) (*v1.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStorageClassInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockStorageClassInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageClassInterface)(nil).Update), arg0, arg1, arg2)
	return &MockStorageClassInterfaceUpdateCall{Call: call}
}

// MockStorageClassInterfaceUpdateCall wrap *gomock.Call
type MockStorageClassInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceUpdateCall) Return(arg0 *v1.StorageClass, arg1 error) *MockStorageClassInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceUpdateCall) Do(f func(context.Context, *v1.StorageClass, v10.UpdateOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.StorageClass, v10.UpdateOptions) (*v1.StorageClass, error)) *MockStorageClassInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockStorageClassInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockStorageClassInterfaceMockRecorder) Watch(arg0, arg1 any) *MockStorageClassInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStorageClassInterface)(nil).Watch), arg0, arg1)
	return &MockStorageClassInterfaceWatchCall{Call: call}
}

// MockStorageClassInterfaceWatchCall wrap *gomock.Call
type MockStorageClassInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageClassInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockStorageClassInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageClassInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockStorageClassInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageClassInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockStorageClassInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
