// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/core/v1 (interfaces: EventInterface,CoreV1Interface,NamespaceInterface,PodInterface,ServiceInterface,ConfigMapInterface,PersistentVolumeInterface,PersistentVolumeClaimInterface,SecretInterface,NodeInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/corev1_mock.go k8s.io/client-go/kubernetes/typed/core/v1 EventInterface,CoreV1Interface,NamespaceInterface,PodInterface,ServiceInterface,ConfigMapInterface,PersistentVolumeInterface,PersistentVolumeClaimInterface,SecretInterface,NodeInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/policy/v1"
	v1beta1 "k8s.io/api/policy/v1beta1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	fields "k8s.io/apimachinery/pkg/fields"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v12 "k8s.io/client-go/applyconfigurations/core/v1"
	v13 "k8s.io/client-go/kubernetes/typed/core/v1"
	rest "k8s.io/client-go/rest"
)

// MockEventInterface is a mock of EventInterface interface.
type MockEventInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventInterfaceMockRecorder
}

// MockEventInterfaceMockRecorder is the mock recorder for MockEventInterface.
type MockEventInterfaceMockRecorder struct {
	mock *MockEventInterface
}

// NewMockEventInterface creates a new mock instance.
func NewMockEventInterface(ctrl *gomock.Controller) *MockEventInterface {
	mock := &MockEventInterface{ctrl: ctrl}
	mock.recorder = &MockEventInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventInterface) EXPECT() *MockEventInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEventInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockEventInterface) Apply(arg0 context.Context, arg1 *v12.EventApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockEventInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockEventInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockEventInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockEventInterfaceApplyCall{Call: call}
}

// MockEventInterfaceApplyCall wrap *gomock.Call
type MockEventInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceApplyCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceApplyCall) Do(f func(context.Context, *v12.EventApplyConfiguration, v11.ApplyOptions) (*v1.Event, error)) *MockEventInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.EventApplyConfiguration, v11.ApplyOptions) (*v1.Event, error)) *MockEventInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockEventInterface) Create(arg0 context.Context, arg1 *v1.Event, arg2 v11.CreateOptions) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEventInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockEventInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventInterface)(nil).Create), arg0, arg1, arg2)
	return &MockEventInterfaceCreateCall{Call: call}
}

// MockEventInterfaceCreateCall wrap *gomock.Call
type MockEventInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceCreateCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceCreateCall) Do(f func(context.Context, *v1.Event, v11.CreateOptions) (*v1.Event, error)) *MockEventInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Event, v11.CreateOptions) (*v1.Event, error)) *MockEventInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateWithEventNamespace mocks base method.
func (m *MockEventInterface) CreateWithEventNamespace(arg0 *v1.Event) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithEventNamespace", arg0)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithEventNamespace indicates an expected call of CreateWithEventNamespace.
func (mr *MockEventInterfaceMockRecorder) CreateWithEventNamespace(arg0 any) *MockEventInterfaceCreateWithEventNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithEventNamespace", reflect.TypeOf((*MockEventInterface)(nil).CreateWithEventNamespace), arg0)
	return &MockEventInterfaceCreateWithEventNamespaceCall{Call: call}
}

// MockEventInterfaceCreateWithEventNamespaceCall wrap *gomock.Call
type MockEventInterfaceCreateWithEventNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceCreateWithEventNamespaceCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfaceCreateWithEventNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceCreateWithEventNamespaceCall) Do(f func(*v1.Event) (*v1.Event, error)) *MockEventInterfaceCreateWithEventNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceCreateWithEventNamespaceCall) DoAndReturn(f func(*v1.Event) (*v1.Event, error)) *MockEventInterfaceCreateWithEventNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockEventInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEventInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockEventInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockEventInterfaceDeleteCall{Call: call}
}

// MockEventInterfaceDeleteCall wrap *gomock.Call
type MockEventInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceDeleteCall) Return(arg0 error) *MockEventInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockEventInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockEventInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockEventInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockEventInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockEventInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockEventInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockEventInterfaceDeleteCollectionCall{Call: call}
}

// MockEventInterfaceDeleteCollectionCall wrap *gomock.Call
type MockEventInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceDeleteCollectionCall) Return(arg0 error) *MockEventInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockEventInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockEventInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockEventInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockEventInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventInterface)(nil).Get), arg0, arg1, arg2)
	return &MockEventInterfaceGetCall{Call: call}
}

// MockEventInterfaceGetCall wrap *gomock.Call
type MockEventInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceGetCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.Event, error)) *MockEventInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.Event, error)) *MockEventInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFieldSelector mocks base method.
func (m *MockEventInterface) GetFieldSelector(arg0, arg1, arg2, arg3 *string) fields.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldSelector", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(fields.Selector)
	return ret0
}

// GetFieldSelector indicates an expected call of GetFieldSelector.
func (mr *MockEventInterfaceMockRecorder) GetFieldSelector(arg0, arg1, arg2, arg3 any) *MockEventInterfaceGetFieldSelectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldSelector", reflect.TypeOf((*MockEventInterface)(nil).GetFieldSelector), arg0, arg1, arg2, arg3)
	return &MockEventInterfaceGetFieldSelectorCall{Call: call}
}

// MockEventInterfaceGetFieldSelectorCall wrap *gomock.Call
type MockEventInterfaceGetFieldSelectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceGetFieldSelectorCall) Return(arg0 fields.Selector) *MockEventInterfaceGetFieldSelectorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceGetFieldSelectorCall) Do(f func(*string, *string, *string, *string) fields.Selector) *MockEventInterfaceGetFieldSelectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceGetFieldSelectorCall) DoAndReturn(f func(*string, *string, *string, *string) fields.Selector) *MockEventInterfaceGetFieldSelectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockEventInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventInterfaceMockRecorder) List(arg0, arg1 any) *MockEventInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventInterface)(nil).List), arg0, arg1)
	return &MockEventInterfaceListCall{Call: call}
}

// MockEventInterfaceListCall wrap *gomock.Call
type MockEventInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceListCall) Return(arg0 *v1.EventList, arg1 error) *MockEventInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.EventList, error)) *MockEventInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.EventList, error)) *MockEventInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockEventInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.Event, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockEventInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockEventInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockEventInterface)(nil).Patch), varargs...)
	return &MockEventInterfacePatchCall{Call: call}
}

// MockEventInterfacePatchCall wrap *gomock.Call
type MockEventInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfacePatchCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Event, error)) *MockEventInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Event, error)) *MockEventInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PatchWithEventNamespace mocks base method.
func (m *MockEventInterface) PatchWithEventNamespace(arg0 *v1.Event, arg1 []byte) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchWithEventNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchWithEventNamespace indicates an expected call of PatchWithEventNamespace.
func (mr *MockEventInterfaceMockRecorder) PatchWithEventNamespace(arg0, arg1 any) *MockEventInterfacePatchWithEventNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWithEventNamespace", reflect.TypeOf((*MockEventInterface)(nil).PatchWithEventNamespace), arg0, arg1)
	return &MockEventInterfacePatchWithEventNamespaceCall{Call: call}
}

// MockEventInterfacePatchWithEventNamespaceCall wrap *gomock.Call
type MockEventInterfacePatchWithEventNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfacePatchWithEventNamespaceCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfacePatchWithEventNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfacePatchWithEventNamespaceCall) Do(f func(*v1.Event, []byte) (*v1.Event, error)) *MockEventInterfacePatchWithEventNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfacePatchWithEventNamespaceCall) DoAndReturn(f func(*v1.Event, []byte) (*v1.Event, error)) *MockEventInterfacePatchWithEventNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Search mocks base method.
func (m *MockEventInterface) Search(arg0 *runtime.Scheme, arg1 runtime.Object) (*v1.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*v1.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockEventInterfaceMockRecorder) Search(arg0, arg1 any) *MockEventInterfaceSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEventInterface)(nil).Search), arg0, arg1)
	return &MockEventInterfaceSearchCall{Call: call}
}

// MockEventInterfaceSearchCall wrap *gomock.Call
type MockEventInterfaceSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceSearchCall) Return(arg0 *v1.EventList, arg1 error) *MockEventInterfaceSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceSearchCall) Do(f func(*runtime.Scheme, runtime.Object) (*v1.EventList, error)) *MockEventInterfaceSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceSearchCall) DoAndReturn(f func(*runtime.Scheme, runtime.Object) (*v1.EventList, error)) *MockEventInterfaceSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockEventInterface) Update(arg0 context.Context, arg1 *v1.Event, arg2 v11.UpdateOptions) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEventInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockEventInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEventInterface)(nil).Update), arg0, arg1, arg2)
	return &MockEventInterfaceUpdateCall{Call: call}
}

// MockEventInterfaceUpdateCall wrap *gomock.Call
type MockEventInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceUpdateCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceUpdateCall) Do(f func(context.Context, *v1.Event, v11.UpdateOptions) (*v1.Event, error)) *MockEventInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Event, v11.UpdateOptions) (*v1.Event, error)) *MockEventInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWithEventNamespace mocks base method.
func (m *MockEventInterface) UpdateWithEventNamespace(arg0 *v1.Event) (*v1.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithEventNamespace", arg0)
	ret0, _ := ret[0].(*v1.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithEventNamespace indicates an expected call of UpdateWithEventNamespace.
func (mr *MockEventInterfaceMockRecorder) UpdateWithEventNamespace(arg0 any) *MockEventInterfaceUpdateWithEventNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithEventNamespace", reflect.TypeOf((*MockEventInterface)(nil).UpdateWithEventNamespace), arg0)
	return &MockEventInterfaceUpdateWithEventNamespaceCall{Call: call}
}

// MockEventInterfaceUpdateWithEventNamespaceCall wrap *gomock.Call
type MockEventInterfaceUpdateWithEventNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceUpdateWithEventNamespaceCall) Return(arg0 *v1.Event, arg1 error) *MockEventInterfaceUpdateWithEventNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceUpdateWithEventNamespaceCall) Do(f func(*v1.Event) (*v1.Event, error)) *MockEventInterfaceUpdateWithEventNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceUpdateWithEventNamespaceCall) DoAndReturn(f func(*v1.Event) (*v1.Event, error)) *MockEventInterfaceUpdateWithEventNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockEventInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockEventInterfaceMockRecorder) Watch(arg0, arg1 any) *MockEventInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockEventInterface)(nil).Watch), arg0, arg1)
	return &MockEventInterfaceWatchCall{Call: call}
}

// MockEventInterfaceWatchCall wrap *gomock.Call
type MockEventInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockEventInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockEventInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockEventInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCoreV1Interface is a mock of CoreV1Interface interface.
type MockCoreV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockCoreV1InterfaceMockRecorder
}

// MockCoreV1InterfaceMockRecorder is the mock recorder for MockCoreV1Interface.
type MockCoreV1InterfaceMockRecorder struct {
	mock *MockCoreV1Interface
}

// NewMockCoreV1Interface creates a new mock instance.
func NewMockCoreV1Interface(ctrl *gomock.Controller) *MockCoreV1Interface {
	mock := &MockCoreV1Interface{ctrl: ctrl}
	mock.recorder = &MockCoreV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreV1Interface) EXPECT() *MockCoreV1InterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCoreV1Interface) ISGOMOCK() struct{} {
	return struct{}{}
}

// ComponentStatuses mocks base method.
func (m *MockCoreV1Interface) ComponentStatuses() v13.ComponentStatusInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentStatuses")
	ret0, _ := ret[0].(v13.ComponentStatusInterface)
	return ret0
}

// ComponentStatuses indicates an expected call of ComponentStatuses.
func (mr *MockCoreV1InterfaceMockRecorder) ComponentStatuses() *MockCoreV1InterfaceComponentStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentStatuses", reflect.TypeOf((*MockCoreV1Interface)(nil).ComponentStatuses))
	return &MockCoreV1InterfaceComponentStatusesCall{Call: call}
}

// MockCoreV1InterfaceComponentStatusesCall wrap *gomock.Call
type MockCoreV1InterfaceComponentStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceComponentStatusesCall) Return(arg0 v13.ComponentStatusInterface) *MockCoreV1InterfaceComponentStatusesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceComponentStatusesCall) Do(f func() v13.ComponentStatusInterface) *MockCoreV1InterfaceComponentStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceComponentStatusesCall) DoAndReturn(f func() v13.ComponentStatusInterface) *MockCoreV1InterfaceComponentStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfigMaps mocks base method.
func (m *MockCoreV1Interface) ConfigMaps(arg0 string) v13.ConfigMapInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps", arg0)
	ret0, _ := ret[0].(v13.ConfigMapInterface)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps.
func (mr *MockCoreV1InterfaceMockRecorder) ConfigMaps(arg0 any) *MockCoreV1InterfaceConfigMapsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockCoreV1Interface)(nil).ConfigMaps), arg0)
	return &MockCoreV1InterfaceConfigMapsCall{Call: call}
}

// MockCoreV1InterfaceConfigMapsCall wrap *gomock.Call
type MockCoreV1InterfaceConfigMapsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceConfigMapsCall) Return(arg0 v13.ConfigMapInterface) *MockCoreV1InterfaceConfigMapsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceConfigMapsCall) Do(f func(string) v13.ConfigMapInterface) *MockCoreV1InterfaceConfigMapsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceConfigMapsCall) DoAndReturn(f func(string) v13.ConfigMapInterface) *MockCoreV1InterfaceConfigMapsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Endpoints mocks base method.
func (m *MockCoreV1Interface) Endpoints(arg0 string) v13.EndpointsInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints", arg0)
	ret0, _ := ret[0].(v13.EndpointsInterface)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockCoreV1InterfaceMockRecorder) Endpoints(arg0 any) *MockCoreV1InterfaceEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockCoreV1Interface)(nil).Endpoints), arg0)
	return &MockCoreV1InterfaceEndpointsCall{Call: call}
}

// MockCoreV1InterfaceEndpointsCall wrap *gomock.Call
type MockCoreV1InterfaceEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceEndpointsCall) Return(arg0 v13.EndpointsInterface) *MockCoreV1InterfaceEndpointsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceEndpointsCall) Do(f func(string) v13.EndpointsInterface) *MockCoreV1InterfaceEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceEndpointsCall) DoAndReturn(f func(string) v13.EndpointsInterface) *MockCoreV1InterfaceEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Events mocks base method.
func (m *MockCoreV1Interface) Events(arg0 string) v13.EventInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", arg0)
	ret0, _ := ret[0].(v13.EventInterface)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockCoreV1InterfaceMockRecorder) Events(arg0 any) *MockCoreV1InterfaceEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockCoreV1Interface)(nil).Events), arg0)
	return &MockCoreV1InterfaceEventsCall{Call: call}
}

// MockCoreV1InterfaceEventsCall wrap *gomock.Call
type MockCoreV1InterfaceEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceEventsCall) Return(arg0 v13.EventInterface) *MockCoreV1InterfaceEventsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceEventsCall) Do(f func(string) v13.EventInterface) *MockCoreV1InterfaceEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceEventsCall) DoAndReturn(f func(string) v13.EventInterface) *MockCoreV1InterfaceEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LimitRanges mocks base method.
func (m *MockCoreV1Interface) LimitRanges(arg0 string) v13.LimitRangeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitRanges", arg0)
	ret0, _ := ret[0].(v13.LimitRangeInterface)
	return ret0
}

// LimitRanges indicates an expected call of LimitRanges.
func (mr *MockCoreV1InterfaceMockRecorder) LimitRanges(arg0 any) *MockCoreV1InterfaceLimitRangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitRanges", reflect.TypeOf((*MockCoreV1Interface)(nil).LimitRanges), arg0)
	return &MockCoreV1InterfaceLimitRangesCall{Call: call}
}

// MockCoreV1InterfaceLimitRangesCall wrap *gomock.Call
type MockCoreV1InterfaceLimitRangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceLimitRangesCall) Return(arg0 v13.LimitRangeInterface) *MockCoreV1InterfaceLimitRangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceLimitRangesCall) Do(f func(string) v13.LimitRangeInterface) *MockCoreV1InterfaceLimitRangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceLimitRangesCall) DoAndReturn(f func(string) v13.LimitRangeInterface) *MockCoreV1InterfaceLimitRangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespaces mocks base method.
func (m *MockCoreV1Interface) Namespaces() v13.NamespaceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].(v13.NamespaceInterface)
	return ret0
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockCoreV1InterfaceMockRecorder) Namespaces() *MockCoreV1InterfaceNamespacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockCoreV1Interface)(nil).Namespaces))
	return &MockCoreV1InterfaceNamespacesCall{Call: call}
}

// MockCoreV1InterfaceNamespacesCall wrap *gomock.Call
type MockCoreV1InterfaceNamespacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceNamespacesCall) Return(arg0 v13.NamespaceInterface) *MockCoreV1InterfaceNamespacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceNamespacesCall) Do(f func() v13.NamespaceInterface) *MockCoreV1InterfaceNamespacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceNamespacesCall) DoAndReturn(f func() v13.NamespaceInterface) *MockCoreV1InterfaceNamespacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Nodes mocks base method.
func (m *MockCoreV1Interface) Nodes() v13.NodeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(v13.NodeInterface)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockCoreV1InterfaceMockRecorder) Nodes() *MockCoreV1InterfaceNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockCoreV1Interface)(nil).Nodes))
	return &MockCoreV1InterfaceNodesCall{Call: call}
}

// MockCoreV1InterfaceNodesCall wrap *gomock.Call
type MockCoreV1InterfaceNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceNodesCall) Return(arg0 v13.NodeInterface) *MockCoreV1InterfaceNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceNodesCall) Do(f func() v13.NodeInterface) *MockCoreV1InterfaceNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceNodesCall) DoAndReturn(f func() v13.NodeInterface) *MockCoreV1InterfaceNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PersistentVolumeClaims mocks base method.
func (m *MockCoreV1Interface) PersistentVolumeClaims(arg0 string) v13.PersistentVolumeClaimInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeClaims", arg0)
	ret0, _ := ret[0].(v13.PersistentVolumeClaimInterface)
	return ret0
}

// PersistentVolumeClaims indicates an expected call of PersistentVolumeClaims.
func (mr *MockCoreV1InterfaceMockRecorder) PersistentVolumeClaims(arg0 any) *MockCoreV1InterfacePersistentVolumeClaimsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeClaims", reflect.TypeOf((*MockCoreV1Interface)(nil).PersistentVolumeClaims), arg0)
	return &MockCoreV1InterfacePersistentVolumeClaimsCall{Call: call}
}

// MockCoreV1InterfacePersistentVolumeClaimsCall wrap *gomock.Call
type MockCoreV1InterfacePersistentVolumeClaimsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfacePersistentVolumeClaimsCall) Return(arg0 v13.PersistentVolumeClaimInterface) *MockCoreV1InterfacePersistentVolumeClaimsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfacePersistentVolumeClaimsCall) Do(f func(string) v13.PersistentVolumeClaimInterface) *MockCoreV1InterfacePersistentVolumeClaimsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfacePersistentVolumeClaimsCall) DoAndReturn(f func(string) v13.PersistentVolumeClaimInterface) *MockCoreV1InterfacePersistentVolumeClaimsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PersistentVolumes mocks base method.
func (m *MockCoreV1Interface) PersistentVolumes() v13.PersistentVolumeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumes")
	ret0, _ := ret[0].(v13.PersistentVolumeInterface)
	return ret0
}

// PersistentVolumes indicates an expected call of PersistentVolumes.
func (mr *MockCoreV1InterfaceMockRecorder) PersistentVolumes() *MockCoreV1InterfacePersistentVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumes", reflect.TypeOf((*MockCoreV1Interface)(nil).PersistentVolumes))
	return &MockCoreV1InterfacePersistentVolumesCall{Call: call}
}

// MockCoreV1InterfacePersistentVolumesCall wrap *gomock.Call
type MockCoreV1InterfacePersistentVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfacePersistentVolumesCall) Return(arg0 v13.PersistentVolumeInterface) *MockCoreV1InterfacePersistentVolumesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfacePersistentVolumesCall) Do(f func() v13.PersistentVolumeInterface) *MockCoreV1InterfacePersistentVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfacePersistentVolumesCall) DoAndReturn(f func() v13.PersistentVolumeInterface) *MockCoreV1InterfacePersistentVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PodTemplates mocks base method.
func (m *MockCoreV1Interface) PodTemplates(arg0 string) v13.PodTemplateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodTemplates", arg0)
	ret0, _ := ret[0].(v13.PodTemplateInterface)
	return ret0
}

// PodTemplates indicates an expected call of PodTemplates.
func (mr *MockCoreV1InterfaceMockRecorder) PodTemplates(arg0 any) *MockCoreV1InterfacePodTemplatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodTemplates", reflect.TypeOf((*MockCoreV1Interface)(nil).PodTemplates), arg0)
	return &MockCoreV1InterfacePodTemplatesCall{Call: call}
}

// MockCoreV1InterfacePodTemplatesCall wrap *gomock.Call
type MockCoreV1InterfacePodTemplatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfacePodTemplatesCall) Return(arg0 v13.PodTemplateInterface) *MockCoreV1InterfacePodTemplatesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfacePodTemplatesCall) Do(f func(string) v13.PodTemplateInterface) *MockCoreV1InterfacePodTemplatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfacePodTemplatesCall) DoAndReturn(f func(string) v13.PodTemplateInterface) *MockCoreV1InterfacePodTemplatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pods mocks base method.
func (m *MockCoreV1Interface) Pods(arg0 string) v13.PodInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", arg0)
	ret0, _ := ret[0].(v13.PodInterface)
	return ret0
}

// Pods indicates an expected call of Pods.
func (mr *MockCoreV1InterfaceMockRecorder) Pods(arg0 any) *MockCoreV1InterfacePodsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockCoreV1Interface)(nil).Pods), arg0)
	return &MockCoreV1InterfacePodsCall{Call: call}
}

// MockCoreV1InterfacePodsCall wrap *gomock.Call
type MockCoreV1InterfacePodsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfacePodsCall) Return(arg0 v13.PodInterface) *MockCoreV1InterfacePodsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfacePodsCall) Do(f func(string) v13.PodInterface) *MockCoreV1InterfacePodsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfacePodsCall) DoAndReturn(f func(string) v13.PodInterface) *MockCoreV1InterfacePodsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTClient mocks base method.
func (m *MockCoreV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockCoreV1InterfaceMockRecorder) RESTClient() *MockCoreV1InterfaceRESTClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockCoreV1Interface)(nil).RESTClient))
	return &MockCoreV1InterfaceRESTClientCall{Call: call}
}

// MockCoreV1InterfaceRESTClientCall wrap *gomock.Call
type MockCoreV1InterfaceRESTClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceRESTClientCall) Return(arg0 rest.Interface) *MockCoreV1InterfaceRESTClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceRESTClientCall) Do(f func() rest.Interface) *MockCoreV1InterfaceRESTClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceRESTClientCall) DoAndReturn(f func() rest.Interface) *MockCoreV1InterfaceRESTClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplicationControllers mocks base method.
func (m *MockCoreV1Interface) ReplicationControllers(arg0 string) v13.ReplicationControllerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationControllers", arg0)
	ret0, _ := ret[0].(v13.ReplicationControllerInterface)
	return ret0
}

// ReplicationControllers indicates an expected call of ReplicationControllers.
func (mr *MockCoreV1InterfaceMockRecorder) ReplicationControllers(arg0 any) *MockCoreV1InterfaceReplicationControllersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationControllers", reflect.TypeOf((*MockCoreV1Interface)(nil).ReplicationControllers), arg0)
	return &MockCoreV1InterfaceReplicationControllersCall{Call: call}
}

// MockCoreV1InterfaceReplicationControllersCall wrap *gomock.Call
type MockCoreV1InterfaceReplicationControllersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceReplicationControllersCall) Return(arg0 v13.ReplicationControllerInterface) *MockCoreV1InterfaceReplicationControllersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceReplicationControllersCall) Do(f func(string) v13.ReplicationControllerInterface) *MockCoreV1InterfaceReplicationControllersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceReplicationControllersCall) DoAndReturn(f func(string) v13.ReplicationControllerInterface) *MockCoreV1InterfaceReplicationControllersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResourceQuotas mocks base method.
func (m *MockCoreV1Interface) ResourceQuotas(arg0 string) v13.ResourceQuotaInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceQuotas", arg0)
	ret0, _ := ret[0].(v13.ResourceQuotaInterface)
	return ret0
}

// ResourceQuotas indicates an expected call of ResourceQuotas.
func (mr *MockCoreV1InterfaceMockRecorder) ResourceQuotas(arg0 any) *MockCoreV1InterfaceResourceQuotasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceQuotas", reflect.TypeOf((*MockCoreV1Interface)(nil).ResourceQuotas), arg0)
	return &MockCoreV1InterfaceResourceQuotasCall{Call: call}
}

// MockCoreV1InterfaceResourceQuotasCall wrap *gomock.Call
type MockCoreV1InterfaceResourceQuotasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceResourceQuotasCall) Return(arg0 v13.ResourceQuotaInterface) *MockCoreV1InterfaceResourceQuotasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceResourceQuotasCall) Do(f func(string) v13.ResourceQuotaInterface) *MockCoreV1InterfaceResourceQuotasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceResourceQuotasCall) DoAndReturn(f func(string) v13.ResourceQuotaInterface) *MockCoreV1InterfaceResourceQuotasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Secrets mocks base method.
func (m *MockCoreV1Interface) Secrets(arg0 string) v13.SecretInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets", arg0)
	ret0, _ := ret[0].(v13.SecretInterface)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockCoreV1InterfaceMockRecorder) Secrets(arg0 any) *MockCoreV1InterfaceSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockCoreV1Interface)(nil).Secrets), arg0)
	return &MockCoreV1InterfaceSecretsCall{Call: call}
}

// MockCoreV1InterfaceSecretsCall wrap *gomock.Call
type MockCoreV1InterfaceSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceSecretsCall) Return(arg0 v13.SecretInterface) *MockCoreV1InterfaceSecretsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceSecretsCall) Do(f func(string) v13.SecretInterface) *MockCoreV1InterfaceSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceSecretsCall) DoAndReturn(f func(string) v13.SecretInterface) *MockCoreV1InterfaceSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServiceAccounts mocks base method.
func (m *MockCoreV1Interface) ServiceAccounts(arg0 string) v13.ServiceAccountInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts", arg0)
	ret0, _ := ret[0].(v13.ServiceAccountInterface)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts.
func (mr *MockCoreV1InterfaceMockRecorder) ServiceAccounts(arg0 any) *MockCoreV1InterfaceServiceAccountsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockCoreV1Interface)(nil).ServiceAccounts), arg0)
	return &MockCoreV1InterfaceServiceAccountsCall{Call: call}
}

// MockCoreV1InterfaceServiceAccountsCall wrap *gomock.Call
type MockCoreV1InterfaceServiceAccountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceServiceAccountsCall) Return(arg0 v13.ServiceAccountInterface) *MockCoreV1InterfaceServiceAccountsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceServiceAccountsCall) Do(f func(string) v13.ServiceAccountInterface) *MockCoreV1InterfaceServiceAccountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceServiceAccountsCall) DoAndReturn(f func(string) v13.ServiceAccountInterface) *MockCoreV1InterfaceServiceAccountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Services mocks base method.
func (m *MockCoreV1Interface) Services(arg0 string) v13.ServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", arg0)
	ret0, _ := ret[0].(v13.ServiceInterface)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockCoreV1InterfaceMockRecorder) Services(arg0 any) *MockCoreV1InterfaceServicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockCoreV1Interface)(nil).Services), arg0)
	return &MockCoreV1InterfaceServicesCall{Call: call}
}

// MockCoreV1InterfaceServicesCall wrap *gomock.Call
type MockCoreV1InterfaceServicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoreV1InterfaceServicesCall) Return(arg0 v13.ServiceInterface) *MockCoreV1InterfaceServicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoreV1InterfaceServicesCall) Do(f func(string) v13.ServiceInterface) *MockCoreV1InterfaceServicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoreV1InterfaceServicesCall) DoAndReturn(f func(string) v13.ServiceInterface) *MockCoreV1InterfaceServicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNamespaceInterface is a mock of NamespaceInterface interface.
type MockNamespaceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceInterfaceMockRecorder
}

// MockNamespaceInterfaceMockRecorder is the mock recorder for MockNamespaceInterface.
type MockNamespaceInterfaceMockRecorder struct {
	mock *MockNamespaceInterface
}

// NewMockNamespaceInterface creates a new mock instance.
func NewMockNamespaceInterface(ctrl *gomock.Controller) *MockNamespaceInterface {
	mock := &MockNamespaceInterface{ctrl: ctrl}
	mock.recorder = &MockNamespaceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceInterface) EXPECT() *MockNamespaceInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNamespaceInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockNamespaceInterface) Apply(arg0 context.Context, arg1 *v12.NamespaceApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockNamespaceInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockNamespaceInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNamespaceInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockNamespaceInterfaceApplyCall{Call: call}
}

// MockNamespaceInterfaceApplyCall wrap *gomock.Call
type MockNamespaceInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceApplyCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceApplyCall) Do(f func(context.Context, *v12.NamespaceApplyConfiguration, v11.ApplyOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.NamespaceApplyConfiguration, v11.ApplyOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockNamespaceInterface) ApplyStatus(arg0 context.Context, arg1 *v12.NamespaceApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockNamespaceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *MockNamespaceInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockNamespaceInterface)(nil).ApplyStatus), arg0, arg1, arg2)
	return &MockNamespaceInterfaceApplyStatusCall{Call: call}
}

// MockNamespaceInterfaceApplyStatusCall wrap *gomock.Call
type MockNamespaceInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceApplyStatusCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceApplyStatusCall) Do(f func(context.Context, *v12.NamespaceApplyConfiguration, v11.ApplyOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v12.NamespaceApplyConfiguration, v11.ApplyOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockNamespaceInterface) Create(arg0 context.Context, arg1 *v1.Namespace, arg2 v11.CreateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNamespaceInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockNamespaceInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNamespaceInterface)(nil).Create), arg0, arg1, arg2)
	return &MockNamespaceInterfaceCreateCall{Call: call}
}

// MockNamespaceInterfaceCreateCall wrap *gomock.Call
type MockNamespaceInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceCreateCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceCreateCall) Do(f func(context.Context, *v1.Namespace, v11.CreateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Namespace, v11.CreateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockNamespaceInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNamespaceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockNamespaceInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNamespaceInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockNamespaceInterfaceDeleteCall{Call: call}
}

// MockNamespaceInterfaceDeleteCall wrap *gomock.Call
type MockNamespaceInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceDeleteCall) Return(arg0 error) *MockNamespaceInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockNamespaceInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockNamespaceInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Finalize mocks base method.
func (m *MockNamespaceInterface) Finalize(arg0 context.Context, arg1 *v1.Namespace, arg2 v11.UpdateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finalize indicates an expected call of Finalize.
func (mr *MockNamespaceInterfaceMockRecorder) Finalize(arg0, arg1, arg2 any) *MockNamespaceInterfaceFinalizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockNamespaceInterface)(nil).Finalize), arg0, arg1, arg2)
	return &MockNamespaceInterfaceFinalizeCall{Call: call}
}

// MockNamespaceInterfaceFinalizeCall wrap *gomock.Call
type MockNamespaceInterfaceFinalizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceFinalizeCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfaceFinalizeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceFinalizeCall) Do(f func(context.Context, *v1.Namespace, v11.UpdateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceFinalizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceFinalizeCall) DoAndReturn(f func(context.Context, *v1.Namespace, v11.UpdateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceFinalizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockNamespaceInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespaceInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockNamespaceInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespaceInterface)(nil).Get), arg0, arg1, arg2)
	return &MockNamespaceInterfaceGetCall{Call: call}
}

// MockNamespaceInterfaceGetCall wrap *gomock.Call
type MockNamespaceInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceGetCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockNamespaceInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.NamespaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.NamespaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNamespaceInterfaceMockRecorder) List(arg0, arg1 any) *MockNamespaceInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceInterface)(nil).List), arg0, arg1)
	return &MockNamespaceInterfaceListCall{Call: call}
}

// MockNamespaceInterfaceListCall wrap *gomock.Call
type MockNamespaceInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceListCall) Return(arg0 *v1.NamespaceList, arg1 error) *MockNamespaceInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.NamespaceList, error)) *MockNamespaceInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.NamespaceList, error)) *MockNamespaceInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockNamespaceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockNamespaceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockNamespaceInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockNamespaceInterface)(nil).Patch), varargs...)
	return &MockNamespaceInterfacePatchCall{Call: call}
}

// MockNamespaceInterfacePatchCall wrap *gomock.Call
type MockNamespaceInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfacePatchCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Namespace, error)) *MockNamespaceInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Namespace, error)) *MockNamespaceInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockNamespaceInterface) Update(arg0 context.Context, arg1 *v1.Namespace, arg2 v11.UpdateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNamespaceInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockNamespaceInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNamespaceInterface)(nil).Update), arg0, arg1, arg2)
	return &MockNamespaceInterfaceUpdateCall{Call: call}
}

// MockNamespaceInterfaceUpdateCall wrap *gomock.Call
type MockNamespaceInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceUpdateCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceUpdateCall) Do(f func(context.Context, *v1.Namespace, v11.UpdateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Namespace, v11.UpdateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockNamespaceInterface) UpdateStatus(arg0 context.Context, arg1 *v1.Namespace, arg2 v11.UpdateOptions) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNamespaceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockNamespaceInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNamespaceInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockNamespaceInterfaceUpdateStatusCall{Call: call}
}

// MockNamespaceInterfaceUpdateStatusCall wrap *gomock.Call
type MockNamespaceInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceUpdateStatusCall) Return(arg0 *v1.Namespace, arg1 error) *MockNamespaceInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceUpdateStatusCall) Do(f func(context.Context, *v1.Namespace, v11.UpdateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.Namespace, v11.UpdateOptions) (*v1.Namespace, error)) *MockNamespaceInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockNamespaceInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockNamespaceInterfaceMockRecorder) Watch(arg0, arg1 any) *MockNamespaceInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNamespaceInterface)(nil).Watch), arg0, arg1)
	return &MockNamespaceInterfaceWatchCall{Call: call}
}

// MockNamespaceInterfaceWatchCall wrap *gomock.Call
type MockNamespaceInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockNamespaceInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockNamespaceInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockNamespaceInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPodInterface is a mock of PodInterface interface.
type MockPodInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPodInterfaceMockRecorder
}

// MockPodInterfaceMockRecorder is the mock recorder for MockPodInterface.
type MockPodInterfaceMockRecorder struct {
	mock *MockPodInterface
}

// NewMockPodInterface creates a new mock instance.
func NewMockPodInterface(ctrl *gomock.Controller) *MockPodInterface {
	mock := &MockPodInterface{ctrl: ctrl}
	mock.recorder = &MockPodInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodInterface) EXPECT() *MockPodInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockPodInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockPodInterface) Apply(arg0 context.Context, arg1 *v12.PodApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockPodInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockPodInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockPodInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockPodInterfaceApplyCall{Call: call}
}

// MockPodInterfaceApplyCall wrap *gomock.Call
type MockPodInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceApplyCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceApplyCall) Do(f func(context.Context, *v12.PodApplyConfiguration, v11.ApplyOptions) (*v1.Pod, error)) *MockPodInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.PodApplyConfiguration, v11.ApplyOptions) (*v1.Pod, error)) *MockPodInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockPodInterface) ApplyStatus(arg0 context.Context, arg1 *v12.PodApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockPodInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *MockPodInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockPodInterface)(nil).ApplyStatus), arg0, arg1, arg2)
	return &MockPodInterfaceApplyStatusCall{Call: call}
}

// MockPodInterfaceApplyStatusCall wrap *gomock.Call
type MockPodInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceApplyStatusCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceApplyStatusCall) Do(f func(context.Context, *v12.PodApplyConfiguration, v11.ApplyOptions) (*v1.Pod, error)) *MockPodInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v12.PodApplyConfiguration, v11.ApplyOptions) (*v1.Pod, error)) *MockPodInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bind mocks base method.
func (m *MockPodInterface) Bind(arg0 context.Context, arg1 *v1.Binding, arg2 v11.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockPodInterfaceMockRecorder) Bind(arg0, arg1, arg2 any) *MockPodInterfaceBindCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockPodInterface)(nil).Bind), arg0, arg1, arg2)
	return &MockPodInterfaceBindCall{Call: call}
}

// MockPodInterfaceBindCall wrap *gomock.Call
type MockPodInterfaceBindCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceBindCall) Return(arg0 error) *MockPodInterfaceBindCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceBindCall) Do(f func(context.Context, *v1.Binding, v11.CreateOptions) error) *MockPodInterfaceBindCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceBindCall) DoAndReturn(f func(context.Context, *v1.Binding, v11.CreateOptions) error) *MockPodInterfaceBindCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockPodInterface) Create(arg0 context.Context, arg1 *v1.Pod, arg2 v11.CreateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPodInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockPodInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPodInterface)(nil).Create), arg0, arg1, arg2)
	return &MockPodInterfaceCreateCall{Call: call}
}

// MockPodInterfaceCreateCall wrap *gomock.Call
type MockPodInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceCreateCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceCreateCall) Do(f func(context.Context, *v1.Pod, v11.CreateOptions) (*v1.Pod, error)) *MockPodInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Pod, v11.CreateOptions) (*v1.Pod, error)) *MockPodInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockPodInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPodInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockPodInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPodInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockPodInterfaceDeleteCall{Call: call}
}

// MockPodInterfaceDeleteCall wrap *gomock.Call
type MockPodInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceDeleteCall) Return(arg0 error) *MockPodInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockPodInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockPodInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockPodInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPodInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockPodInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPodInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockPodInterfaceDeleteCollectionCall{Call: call}
}

// MockPodInterfaceDeleteCollectionCall wrap *gomock.Call
type MockPodInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceDeleteCollectionCall) Return(arg0 error) *MockPodInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockPodInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockPodInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Evict mocks base method.
func (m *MockPodInterface) Evict(arg0 context.Context, arg1 *v1beta1.Eviction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockPodInterfaceMockRecorder) Evict(arg0, arg1 any) *MockPodInterfaceEvictCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockPodInterface)(nil).Evict), arg0, arg1)
	return &MockPodInterfaceEvictCall{Call: call}
}

// MockPodInterfaceEvictCall wrap *gomock.Call
type MockPodInterfaceEvictCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceEvictCall) Return(arg0 error) *MockPodInterfaceEvictCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceEvictCall) Do(f func(context.Context, *v1beta1.Eviction) error) *MockPodInterfaceEvictCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceEvictCall) DoAndReturn(f func(context.Context, *v1beta1.Eviction) error) *MockPodInterfaceEvictCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EvictV1 mocks base method.
func (m *MockPodInterface) EvictV1(arg0 context.Context, arg1 *v10.Eviction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictV1", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvictV1 indicates an expected call of EvictV1.
func (mr *MockPodInterfaceMockRecorder) EvictV1(arg0, arg1 any) *MockPodInterfaceEvictV1Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictV1", reflect.TypeOf((*MockPodInterface)(nil).EvictV1), arg0, arg1)
	return &MockPodInterfaceEvictV1Call{Call: call}
}

// MockPodInterfaceEvictV1Call wrap *gomock.Call
type MockPodInterfaceEvictV1Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceEvictV1Call) Return(arg0 error) *MockPodInterfaceEvictV1Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceEvictV1Call) Do(f func(context.Context, *v10.Eviction) error) *MockPodInterfaceEvictV1Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceEvictV1Call) DoAndReturn(f func(context.Context, *v10.Eviction) error) *MockPodInterfaceEvictV1Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EvictV1beta1 mocks base method.
func (m *MockPodInterface) EvictV1beta1(arg0 context.Context, arg1 *v1beta1.Eviction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictV1beta1", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvictV1beta1 indicates an expected call of EvictV1beta1.
func (mr *MockPodInterfaceMockRecorder) EvictV1beta1(arg0, arg1 any) *MockPodInterfaceEvictV1beta1Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictV1beta1", reflect.TypeOf((*MockPodInterface)(nil).EvictV1beta1), arg0, arg1)
	return &MockPodInterfaceEvictV1beta1Call{Call: call}
}

// MockPodInterfaceEvictV1beta1Call wrap *gomock.Call
type MockPodInterfaceEvictV1beta1Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceEvictV1beta1Call) Return(arg0 error) *MockPodInterfaceEvictV1beta1Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceEvictV1beta1Call) Do(f func(context.Context, *v1beta1.Eviction) error) *MockPodInterfaceEvictV1beta1Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceEvictV1beta1Call) DoAndReturn(f func(context.Context, *v1beta1.Eviction) error) *MockPodInterfaceEvictV1beta1Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockPodInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPodInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockPodInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPodInterface)(nil).Get), arg0, arg1, arg2)
	return &MockPodInterfaceGetCall{Call: call}
}

// MockPodInterfaceGetCall wrap *gomock.Call
type MockPodInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceGetCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.Pod, error)) *MockPodInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.Pod, error)) *MockPodInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLogs mocks base method.
func (m *MockPodInterface) GetLogs(arg0 string, arg1 *v1.PodLogOptions) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockPodInterfaceMockRecorder) GetLogs(arg0, arg1 any) *MockPodInterfaceGetLogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockPodInterface)(nil).GetLogs), arg0, arg1)
	return &MockPodInterfaceGetLogsCall{Call: call}
}

// MockPodInterfaceGetLogsCall wrap *gomock.Call
type MockPodInterfaceGetLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceGetLogsCall) Return(arg0 *rest.Request) *MockPodInterfaceGetLogsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceGetLogsCall) Do(f func(string, *v1.PodLogOptions) *rest.Request) *MockPodInterfaceGetLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceGetLogsCall) DoAndReturn(f func(string, *v1.PodLogOptions) *rest.Request) *MockPodInterfaceGetLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockPodInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPodInterfaceMockRecorder) List(arg0, arg1 any) *MockPodInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodInterface)(nil).List), arg0, arg1)
	return &MockPodInterfaceListCall{Call: call}
}

// MockPodInterfaceListCall wrap *gomock.Call
type MockPodInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceListCall) Return(arg0 *v1.PodList, arg1 error) *MockPodInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.PodList, error)) *MockPodInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.PodList, error)) *MockPodInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockPodInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockPodInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockPodInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPodInterface)(nil).Patch), varargs...)
	return &MockPodInterfacePatchCall{Call: call}
}

// MockPodInterfacePatchCall wrap *gomock.Call
type MockPodInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfacePatchCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Pod, error)) *MockPodInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Pod, error)) *MockPodInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProxyGet mocks base method.
func (m *MockPodInterface) ProxyGet(arg0, arg1, arg2, arg3 string, arg4 map[string]string) rest.ResponseWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyGet", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(rest.ResponseWrapper)
	return ret0
}

// ProxyGet indicates an expected call of ProxyGet.
func (mr *MockPodInterfaceMockRecorder) ProxyGet(arg0, arg1, arg2, arg3, arg4 any) *MockPodInterfaceProxyGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGet", reflect.TypeOf((*MockPodInterface)(nil).ProxyGet), arg0, arg1, arg2, arg3, arg4)
	return &MockPodInterfaceProxyGetCall{Call: call}
}

// MockPodInterfaceProxyGetCall wrap *gomock.Call
type MockPodInterfaceProxyGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceProxyGetCall) Return(arg0 rest.ResponseWrapper) *MockPodInterfaceProxyGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceProxyGetCall) Do(f func(string, string, string, string, map[string]string) rest.ResponseWrapper) *MockPodInterfaceProxyGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceProxyGetCall) DoAndReturn(f func(string, string, string, string, map[string]string) rest.ResponseWrapper) *MockPodInterfaceProxyGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockPodInterface) Update(arg0 context.Context, arg1 *v1.Pod, arg2 v11.UpdateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPodInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockPodInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPodInterface)(nil).Update), arg0, arg1, arg2)
	return &MockPodInterfaceUpdateCall{Call: call}
}

// MockPodInterfaceUpdateCall wrap *gomock.Call
type MockPodInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceUpdateCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceUpdateCall) Do(f func(context.Context, *v1.Pod, v11.UpdateOptions) (*v1.Pod, error)) *MockPodInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Pod, v11.UpdateOptions) (*v1.Pod, error)) *MockPodInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateEphemeralContainers mocks base method.
func (m *MockPodInterface) UpdateEphemeralContainers(arg0 context.Context, arg1 string, arg2 *v1.Pod, arg3 v11.UpdateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEphemeralContainers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEphemeralContainers indicates an expected call of UpdateEphemeralContainers.
func (mr *MockPodInterfaceMockRecorder) UpdateEphemeralContainers(arg0, arg1, arg2, arg3 any) *MockPodInterfaceUpdateEphemeralContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEphemeralContainers", reflect.TypeOf((*MockPodInterface)(nil).UpdateEphemeralContainers), arg0, arg1, arg2, arg3)
	return &MockPodInterfaceUpdateEphemeralContainersCall{Call: call}
}

// MockPodInterfaceUpdateEphemeralContainersCall wrap *gomock.Call
type MockPodInterfaceUpdateEphemeralContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceUpdateEphemeralContainersCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfaceUpdateEphemeralContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceUpdateEphemeralContainersCall) Do(f func(context.Context, string, *v1.Pod, v11.UpdateOptions) (*v1.Pod, error)) *MockPodInterfaceUpdateEphemeralContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceUpdateEphemeralContainersCall) DoAndReturn(f func(context.Context, string, *v1.Pod, v11.UpdateOptions) (*v1.Pod, error)) *MockPodInterfaceUpdateEphemeralContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockPodInterface) UpdateStatus(arg0 context.Context, arg1 *v1.Pod, arg2 v11.UpdateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockPodInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockPodInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockPodInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockPodInterfaceUpdateStatusCall{Call: call}
}

// MockPodInterfaceUpdateStatusCall wrap *gomock.Call
type MockPodInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceUpdateStatusCall) Return(arg0 *v1.Pod, arg1 error) *MockPodInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceUpdateStatusCall) Do(f func(context.Context, *v1.Pod, v11.UpdateOptions) (*v1.Pod, error)) *MockPodInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.Pod, v11.UpdateOptions) (*v1.Pod, error)) *MockPodInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockPodInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockPodInterfaceMockRecorder) Watch(arg0, arg1 any) *MockPodInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockPodInterface)(nil).Watch), arg0, arg1)
	return &MockPodInterfaceWatchCall{Call: call}
}

// MockPodInterfaceWatchCall wrap *gomock.Call
type MockPodInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPodInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockPodInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPodInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockPodInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPodInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockPodInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockServiceInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockServiceInterface) Apply(arg0 context.Context, arg1 *v12.ServiceApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockServiceInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockServiceInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockServiceInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockServiceInterfaceApplyCall{Call: call}
}

// MockServiceInterfaceApplyCall wrap *gomock.Call
type MockServiceInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceApplyCall) Return(arg0 *v1.Service, arg1 error) *MockServiceInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceApplyCall) Do(f func(context.Context, *v12.ServiceApplyConfiguration, v11.ApplyOptions) (*v1.Service, error)) *MockServiceInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.ServiceApplyConfiguration, v11.ApplyOptions) (*v1.Service, error)) *MockServiceInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockServiceInterface) ApplyStatus(arg0 context.Context, arg1 *v12.ServiceApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockServiceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *MockServiceInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockServiceInterface)(nil).ApplyStatus), arg0, arg1, arg2)
	return &MockServiceInterfaceApplyStatusCall{Call: call}
}

// MockServiceInterfaceApplyStatusCall wrap *gomock.Call
type MockServiceInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceApplyStatusCall) Return(arg0 *v1.Service, arg1 error) *MockServiceInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceApplyStatusCall) Do(f func(context.Context, *v12.ServiceApplyConfiguration, v11.ApplyOptions) (*v1.Service, error)) *MockServiceInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v12.ServiceApplyConfiguration, v11.ApplyOptions) (*v1.Service, error)) *MockServiceInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockServiceInterface) Create(arg0 context.Context, arg1 *v1.Service, arg2 v11.CreateOptions) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockServiceInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceInterface)(nil).Create), arg0, arg1, arg2)
	return &MockServiceInterfaceCreateCall{Call: call}
}

// MockServiceInterfaceCreateCall wrap *gomock.Call
type MockServiceInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceCreateCall) Return(arg0 *v1.Service, arg1 error) *MockServiceInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceCreateCall) Do(f func(context.Context, *v1.Service, v11.CreateOptions) (*v1.Service, error)) *MockServiceInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Service, v11.CreateOptions) (*v1.Service, error)) *MockServiceInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockServiceInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockServiceInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockServiceInterfaceDeleteCall{Call: call}
}

// MockServiceInterfaceDeleteCall wrap *gomock.Call
type MockServiceInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceDeleteCall) Return(arg0 error) *MockServiceInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockServiceInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockServiceInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockServiceInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockServiceInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceInterface)(nil).Get), arg0, arg1, arg2)
	return &MockServiceInterfaceGetCall{Call: call}
}

// MockServiceInterfaceGetCall wrap *gomock.Call
type MockServiceInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceGetCall) Return(arg0 *v1.Service, arg1 error) *MockServiceInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.Service, error)) *MockServiceInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.Service, error)) *MockServiceInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockServiceInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.ServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceInterfaceMockRecorder) List(arg0, arg1 any) *MockServiceInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceInterface)(nil).List), arg0, arg1)
	return &MockServiceInterfaceListCall{Call: call}
}

// MockServiceInterfaceListCall wrap *gomock.Call
type MockServiceInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceListCall) Return(arg0 *v1.ServiceList, arg1 error) *MockServiceInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.ServiceList, error)) *MockServiceInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.ServiceList, error)) *MockServiceInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockServiceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.Service, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockServiceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockServiceInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockServiceInterface)(nil).Patch), varargs...)
	return &MockServiceInterfacePatchCall{Call: call}
}

// MockServiceInterfacePatchCall wrap *gomock.Call
type MockServiceInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfacePatchCall) Return(arg0 *v1.Service, arg1 error) *MockServiceInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Service, error)) *MockServiceInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Service, error)) *MockServiceInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProxyGet mocks base method.
func (m *MockServiceInterface) ProxyGet(arg0, arg1, arg2, arg3 string, arg4 map[string]string) rest.ResponseWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyGet", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(rest.ResponseWrapper)
	return ret0
}

// ProxyGet indicates an expected call of ProxyGet.
func (mr *MockServiceInterfaceMockRecorder) ProxyGet(arg0, arg1, arg2, arg3, arg4 any) *MockServiceInterfaceProxyGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyGet", reflect.TypeOf((*MockServiceInterface)(nil).ProxyGet), arg0, arg1, arg2, arg3, arg4)
	return &MockServiceInterfaceProxyGetCall{Call: call}
}

// MockServiceInterfaceProxyGetCall wrap *gomock.Call
type MockServiceInterfaceProxyGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceProxyGetCall) Return(arg0 rest.ResponseWrapper) *MockServiceInterfaceProxyGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceProxyGetCall) Do(f func(string, string, string, string, map[string]string) rest.ResponseWrapper) *MockServiceInterfaceProxyGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceProxyGetCall) DoAndReturn(f func(string, string, string, string, map[string]string) rest.ResponseWrapper) *MockServiceInterfaceProxyGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockServiceInterface) Update(arg0 context.Context, arg1 *v1.Service, arg2 v11.UpdateOptions) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockServiceInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceInterface)(nil).Update), arg0, arg1, arg2)
	return &MockServiceInterfaceUpdateCall{Call: call}
}

// MockServiceInterfaceUpdateCall wrap *gomock.Call
type MockServiceInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceUpdateCall) Return(arg0 *v1.Service, arg1 error) *MockServiceInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceUpdateCall) Do(f func(context.Context, *v1.Service, v11.UpdateOptions) (*v1.Service, error)) *MockServiceInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Service, v11.UpdateOptions) (*v1.Service, error)) *MockServiceInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockServiceInterface) UpdateStatus(arg0 context.Context, arg1 *v1.Service, arg2 v11.UpdateOptions) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockServiceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockServiceInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockServiceInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockServiceInterfaceUpdateStatusCall{Call: call}
}

// MockServiceInterfaceUpdateStatusCall wrap *gomock.Call
type MockServiceInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceUpdateStatusCall) Return(arg0 *v1.Service, arg1 error) *MockServiceInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceUpdateStatusCall) Do(f func(context.Context, *v1.Service, v11.UpdateOptions) (*v1.Service, error)) *MockServiceInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.Service, v11.UpdateOptions) (*v1.Service, error)) *MockServiceInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockServiceInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockServiceInterfaceMockRecorder) Watch(arg0, arg1 any) *MockServiceInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockServiceInterface)(nil).Watch), arg0, arg1)
	return &MockServiceInterfaceWatchCall{Call: call}
}

// MockServiceInterfaceWatchCall wrap *gomock.Call
type MockServiceInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockServiceInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockServiceInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockServiceInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConfigMapInterface is a mock of ConfigMapInterface interface.
type MockConfigMapInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapInterfaceMockRecorder
}

// MockConfigMapInterfaceMockRecorder is the mock recorder for MockConfigMapInterface.
type MockConfigMapInterfaceMockRecorder struct {
	mock *MockConfigMapInterface
}

// NewMockConfigMapInterface creates a new mock instance.
func NewMockConfigMapInterface(ctrl *gomock.Controller) *MockConfigMapInterface {
	mock := &MockConfigMapInterface{ctrl: ctrl}
	mock.recorder = &MockConfigMapInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMapInterface) EXPECT() *MockConfigMapInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockConfigMapInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockConfigMapInterface) Apply(arg0 context.Context, arg1 *v12.ConfigMapApplyConfiguration, arg2 v11.ApplyOptions) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockConfigMapInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockConfigMapInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockConfigMapInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockConfigMapInterfaceApplyCall{Call: call}
}

// MockConfigMapInterfaceApplyCall wrap *gomock.Call
type MockConfigMapInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceApplyCall) Return(arg0 *v1.ConfigMap, arg1 error) *MockConfigMapInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceApplyCall) Do(f func(context.Context, *v12.ConfigMapApplyConfiguration, v11.ApplyOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.ConfigMapApplyConfiguration, v11.ApplyOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockConfigMapInterface) Create(arg0 context.Context, arg1 *v1.ConfigMap, arg2 v11.CreateOptions) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConfigMapInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockConfigMapInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfigMapInterface)(nil).Create), arg0, arg1, arg2)
	return &MockConfigMapInterfaceCreateCall{Call: call}
}

// MockConfigMapInterfaceCreateCall wrap *gomock.Call
type MockConfigMapInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceCreateCall) Return(arg0 *v1.ConfigMap, arg1 error) *MockConfigMapInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceCreateCall) Do(f func(context.Context, *v1.ConfigMap, v11.CreateOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.ConfigMap, v11.CreateOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockConfigMapInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConfigMapInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockConfigMapInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConfigMapInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockConfigMapInterfaceDeleteCall{Call: call}
}

// MockConfigMapInterfaceDeleteCall wrap *gomock.Call
type MockConfigMapInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceDeleteCall) Return(arg0 error) *MockConfigMapInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockConfigMapInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockConfigMapInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockConfigMapInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockConfigMapInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockConfigMapInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockConfigMapInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockConfigMapInterfaceDeleteCollectionCall{Call: call}
}

// MockConfigMapInterfaceDeleteCollectionCall wrap *gomock.Call
type MockConfigMapInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceDeleteCollectionCall) Return(arg0 error) *MockConfigMapInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockConfigMapInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockConfigMapInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockConfigMapInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigMapInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockConfigMapInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigMapInterface)(nil).Get), arg0, arg1, arg2)
	return &MockConfigMapInterfaceGetCall{Call: call}
}

// MockConfigMapInterfaceGetCall wrap *gomock.Call
type MockConfigMapInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceGetCall) Return(arg0 *v1.ConfigMap, arg1 error) *MockConfigMapInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockConfigMapInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.ConfigMapList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.ConfigMapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConfigMapInterfaceMockRecorder) List(arg0, arg1 any) *MockConfigMapInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConfigMapInterface)(nil).List), arg0, arg1)
	return &MockConfigMapInterfaceListCall{Call: call}
}

// MockConfigMapInterfaceListCall wrap *gomock.Call
type MockConfigMapInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceListCall) Return(arg0 *v1.ConfigMapList, arg1 error) *MockConfigMapInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.ConfigMapList, error)) *MockConfigMapInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.ConfigMapList, error)) *MockConfigMapInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockConfigMapInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockConfigMapInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockConfigMapInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockConfigMapInterface)(nil).Patch), varargs...)
	return &MockConfigMapInterfacePatchCall{Call: call}
}

// MockConfigMapInterfacePatchCall wrap *gomock.Call
type MockConfigMapInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfacePatchCall) Return(arg0 *v1.ConfigMap, arg1 error) *MockConfigMapInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.ConfigMap, error)) *MockConfigMapInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.ConfigMap, error)) *MockConfigMapInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockConfigMapInterface) Update(arg0 context.Context, arg1 *v1.ConfigMap, arg2 v11.UpdateOptions) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockConfigMapInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockConfigMapInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigMapInterface)(nil).Update), arg0, arg1, arg2)
	return &MockConfigMapInterfaceUpdateCall{Call: call}
}

// MockConfigMapInterfaceUpdateCall wrap *gomock.Call
type MockConfigMapInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceUpdateCall) Return(arg0 *v1.ConfigMap, arg1 error) *MockConfigMapInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceUpdateCall) Do(f func(context.Context, *v1.ConfigMap, v11.UpdateOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.ConfigMap, v11.UpdateOptions) (*v1.ConfigMap, error)) *MockConfigMapInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockConfigMapInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockConfigMapInterfaceMockRecorder) Watch(arg0, arg1 any) *MockConfigMapInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockConfigMapInterface)(nil).Watch), arg0, arg1)
	return &MockConfigMapInterfaceWatchCall{Call: call}
}

// MockConfigMapInterfaceWatchCall wrap *gomock.Call
type MockConfigMapInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigMapInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockConfigMapInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigMapInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockConfigMapInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigMapInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockConfigMapInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPersistentVolumeInterface is a mock of PersistentVolumeInterface interface.
type MockPersistentVolumeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeInterfaceMockRecorder
}

// MockPersistentVolumeInterfaceMockRecorder is the mock recorder for MockPersistentVolumeInterface.
type MockPersistentVolumeInterfaceMockRecorder struct {
	mock *MockPersistentVolumeInterface
}

// NewMockPersistentVolumeInterface creates a new mock instance.
func NewMockPersistentVolumeInterface(ctrl *gomock.Controller) *MockPersistentVolumeInterface {
	mock := &MockPersistentVolumeInterface{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeInterface) EXPECT() *MockPersistentVolumeInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockPersistentVolumeInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockPersistentVolumeInterface) Apply(arg0 context.Context, arg1 *v12.PersistentVolumeApplyConfiguration, arg2 v11.ApplyOptions) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockPersistentVolumeInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceApplyCall{Call: call}
}

// MockPersistentVolumeInterfaceApplyCall wrap *gomock.Call
type MockPersistentVolumeInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceApplyCall) Return(arg0 *v1.PersistentVolume, arg1 error) *MockPersistentVolumeInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceApplyCall) Do(f func(context.Context, *v12.PersistentVolumeApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.PersistentVolumeApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockPersistentVolumeInterface) ApplyStatus(arg0 context.Context, arg1 *v12.PersistentVolumeApplyConfiguration, arg2 v11.ApplyOptions) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockPersistentVolumeInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).ApplyStatus), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceApplyStatusCall{Call: call}
}

// MockPersistentVolumeInterfaceApplyStatusCall wrap *gomock.Call
type MockPersistentVolumeInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceApplyStatusCall) Return(arg0 *v1.PersistentVolume, arg1 error) *MockPersistentVolumeInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceApplyStatusCall) Do(f func(context.Context, *v12.PersistentVolumeApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v12.PersistentVolumeApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockPersistentVolumeInterface) Create(arg0 context.Context, arg1 *v1.PersistentVolume, arg2 v11.CreateOptions) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersistentVolumeInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).Create), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceCreateCall{Call: call}
}

// MockPersistentVolumeInterfaceCreateCall wrap *gomock.Call
type MockPersistentVolumeInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceCreateCall) Return(arg0 *v1.PersistentVolume, arg1 error) *MockPersistentVolumeInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceCreateCall) Do(f func(context.Context, *v1.PersistentVolume, v11.CreateOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.PersistentVolume, v11.CreateOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockPersistentVolumeInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPersistentVolumeInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceDeleteCall{Call: call}
}

// MockPersistentVolumeInterfaceDeleteCall wrap *gomock.Call
type MockPersistentVolumeInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceDeleteCall) Return(arg0 error) *MockPersistentVolumeInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockPersistentVolumeInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockPersistentVolumeInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockPersistentVolumeInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPersistentVolumeInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceDeleteCollectionCall{Call: call}
}

// MockPersistentVolumeInterfaceDeleteCollectionCall wrap *gomock.Call
type MockPersistentVolumeInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceDeleteCollectionCall) Return(arg0 error) *MockPersistentVolumeInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockPersistentVolumeInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockPersistentVolumeInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockPersistentVolumeInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersistentVolumeInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).Get), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceGetCall{Call: call}
}

// MockPersistentVolumeInterfaceGetCall wrap *gomock.Call
type MockPersistentVolumeInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceGetCall) Return(arg0 *v1.PersistentVolume, arg1 error) *MockPersistentVolumeInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockPersistentVolumeInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.PersistentVolumeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.PersistentVolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPersistentVolumeInterfaceMockRecorder) List(arg0, arg1 any) *MockPersistentVolumeInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).List), arg0, arg1)
	return &MockPersistentVolumeInterfaceListCall{Call: call}
}

// MockPersistentVolumeInterfaceListCall wrap *gomock.Call
type MockPersistentVolumeInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceListCall) Return(arg0 *v1.PersistentVolumeList, arg1 error) *MockPersistentVolumeInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.PersistentVolumeList, error)) *MockPersistentVolumeInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.PersistentVolumeList, error)) *MockPersistentVolumeInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockPersistentVolumeInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockPersistentVolumeInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockPersistentVolumeInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).Patch), varargs...)
	return &MockPersistentVolumeInterfacePatchCall{Call: call}
}

// MockPersistentVolumeInterfacePatchCall wrap *gomock.Call
type MockPersistentVolumeInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfacePatchCall) Return(arg0 *v1.PersistentVolume, arg1 error) *MockPersistentVolumeInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockPersistentVolumeInterface) Update(arg0 context.Context, arg1 *v1.PersistentVolume, arg2 v11.UpdateOptions) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersistentVolumeInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).Update), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceUpdateCall{Call: call}
}

// MockPersistentVolumeInterfaceUpdateCall wrap *gomock.Call
type MockPersistentVolumeInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceUpdateCall) Return(arg0 *v1.PersistentVolume, arg1 error) *MockPersistentVolumeInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceUpdateCall) Do(f func(context.Context, *v1.PersistentVolume, v11.UpdateOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.PersistentVolume, v11.UpdateOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockPersistentVolumeInterface) UpdateStatus(arg0 context.Context, arg1 *v1.PersistentVolume, arg2 v11.UpdateOptions) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockPersistentVolumeInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockPersistentVolumeInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockPersistentVolumeInterfaceUpdateStatusCall{Call: call}
}

// MockPersistentVolumeInterfaceUpdateStatusCall wrap *gomock.Call
type MockPersistentVolumeInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceUpdateStatusCall) Return(arg0 *v1.PersistentVolume, arg1 error) *MockPersistentVolumeInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceUpdateStatusCall) Do(f func(context.Context, *v1.PersistentVolume, v11.UpdateOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.PersistentVolume, v11.UpdateOptions) (*v1.PersistentVolume, error)) *MockPersistentVolumeInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockPersistentVolumeInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockPersistentVolumeInterfaceMockRecorder) Watch(arg0, arg1 any) *MockPersistentVolumeInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockPersistentVolumeInterface)(nil).Watch), arg0, arg1)
	return &MockPersistentVolumeInterfaceWatchCall{Call: call}
}

// MockPersistentVolumeInterfaceWatchCall wrap *gomock.Call
type MockPersistentVolumeInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockPersistentVolumeInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockPersistentVolumeInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockPersistentVolumeInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPersistentVolumeClaimInterface is a mock of PersistentVolumeClaimInterface interface.
type MockPersistentVolumeClaimInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeClaimInterfaceMockRecorder
}

// MockPersistentVolumeClaimInterfaceMockRecorder is the mock recorder for MockPersistentVolumeClaimInterface.
type MockPersistentVolumeClaimInterfaceMockRecorder struct {
	mock *MockPersistentVolumeClaimInterface
}

// NewMockPersistentVolumeClaimInterface creates a new mock instance.
func NewMockPersistentVolumeClaimInterface(ctrl *gomock.Controller) *MockPersistentVolumeClaimInterface {
	mock := &MockPersistentVolumeClaimInterface{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeClaimInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeClaimInterface) EXPECT() *MockPersistentVolumeClaimInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockPersistentVolumeClaimInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockPersistentVolumeClaimInterface) Apply(arg0 context.Context, arg1 *v12.PersistentVolumeClaimApplyConfiguration, arg2 v11.ApplyOptions) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceApplyCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceApplyCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceApplyCall) Return(arg0 *v1.PersistentVolumeClaim, arg1 error) *MockPersistentVolumeClaimInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceApplyCall) Do(f func(context.Context, *v12.PersistentVolumeClaimApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.PersistentVolumeClaimApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockPersistentVolumeClaimInterface) ApplyStatus(arg0 context.Context, arg1 *v12.PersistentVolumeClaimApplyConfiguration, arg2 v11.ApplyOptions) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).ApplyStatus), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceApplyStatusCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceApplyStatusCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceApplyStatusCall) Return(arg0 *v1.PersistentVolumeClaim, arg1 error) *MockPersistentVolumeClaimInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceApplyStatusCall) Do(f func(context.Context, *v12.PersistentVolumeClaimApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v12.PersistentVolumeClaimApplyConfiguration, v11.ApplyOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockPersistentVolumeClaimInterface) Create(arg0 context.Context, arg1 *v1.PersistentVolumeClaim, arg2 v11.CreateOptions) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).Create), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceCreateCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceCreateCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceCreateCall) Return(arg0 *v1.PersistentVolumeClaim, arg1 error) *MockPersistentVolumeClaimInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceCreateCall) Do(f func(context.Context, *v1.PersistentVolumeClaim, v11.CreateOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.PersistentVolumeClaim, v11.CreateOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockPersistentVolumeClaimInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceDeleteCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceDeleteCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceDeleteCall) Return(arg0 error) *MockPersistentVolumeClaimInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockPersistentVolumeClaimInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockPersistentVolumeClaimInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockPersistentVolumeClaimInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceDeleteCollectionCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceDeleteCollectionCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceDeleteCollectionCall) Return(arg0 error) *MockPersistentVolumeClaimInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockPersistentVolumeClaimInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockPersistentVolumeClaimInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockPersistentVolumeClaimInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).Get), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceGetCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceGetCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceGetCall) Return(arg0 *v1.PersistentVolumeClaim, arg1 error) *MockPersistentVolumeClaimInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockPersistentVolumeClaimInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.PersistentVolumeClaimList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaimList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) List(arg0, arg1 any) *MockPersistentVolumeClaimInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).List), arg0, arg1)
	return &MockPersistentVolumeClaimInterfaceListCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceListCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceListCall) Return(arg0 *v1.PersistentVolumeClaimList, arg1 error) *MockPersistentVolumeClaimInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.PersistentVolumeClaimList, error)) *MockPersistentVolumeClaimInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.PersistentVolumeClaimList, error)) *MockPersistentVolumeClaimInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockPersistentVolumeClaimInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockPersistentVolumeClaimInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).Patch), varargs...)
	return &MockPersistentVolumeClaimInterfacePatchCall{Call: call}
}

// MockPersistentVolumeClaimInterfacePatchCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfacePatchCall) Return(arg0 *v1.PersistentVolumeClaim, arg1 error) *MockPersistentVolumeClaimInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockPersistentVolumeClaimInterface) Update(arg0 context.Context, arg1 *v1.PersistentVolumeClaim, arg2 v11.UpdateOptions) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).Update), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceUpdateCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceUpdateCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceUpdateCall) Return(arg0 *v1.PersistentVolumeClaim, arg1 error) *MockPersistentVolumeClaimInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceUpdateCall) Do(f func(context.Context, *v1.PersistentVolumeClaim, v11.UpdateOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.PersistentVolumeClaim, v11.UpdateOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockPersistentVolumeClaimInterface) UpdateStatus(arg0 context.Context, arg1 *v1.PersistentVolumeClaim, arg2 v11.UpdateOptions) (*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockPersistentVolumeClaimInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockPersistentVolumeClaimInterfaceUpdateStatusCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceUpdateStatusCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceUpdateStatusCall) Return(arg0 *v1.PersistentVolumeClaim, arg1 error) *MockPersistentVolumeClaimInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceUpdateStatusCall) Do(f func(context.Context, *v1.PersistentVolumeClaim, v11.UpdateOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.PersistentVolumeClaim, v11.UpdateOptions) (*v1.PersistentVolumeClaim, error)) *MockPersistentVolumeClaimInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockPersistentVolumeClaimInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockPersistentVolumeClaimInterfaceMockRecorder) Watch(arg0, arg1 any) *MockPersistentVolumeClaimInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockPersistentVolumeClaimInterface)(nil).Watch), arg0, arg1)
	return &MockPersistentVolumeClaimInterfaceWatchCall{Call: call}
}

// MockPersistentVolumeClaimInterfaceWatchCall wrap *gomock.Call
type MockPersistentVolumeClaimInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersistentVolumeClaimInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockPersistentVolumeClaimInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersistentVolumeClaimInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockPersistentVolumeClaimInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersistentVolumeClaimInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockPersistentVolumeClaimInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretInterface is a mock of SecretInterface interface.
type MockSecretInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecretInterfaceMockRecorder
}

// MockSecretInterfaceMockRecorder is the mock recorder for MockSecretInterface.
type MockSecretInterfaceMockRecorder struct {
	mock *MockSecretInterface
}

// NewMockSecretInterface creates a new mock instance.
func NewMockSecretInterface(ctrl *gomock.Controller) *MockSecretInterface {
	mock := &MockSecretInterface{ctrl: ctrl}
	mock.recorder = &MockSecretInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretInterface) EXPECT() *MockSecretInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockSecretInterface) Apply(arg0 context.Context, arg1 *v12.SecretApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockSecretInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockSecretInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockSecretInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockSecretInterfaceApplyCall{Call: call}
}

// MockSecretInterfaceApplyCall wrap *gomock.Call
type MockSecretInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceApplyCall) Return(arg0 *v1.Secret, arg1 error) *MockSecretInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceApplyCall) Do(f func(context.Context, *v12.SecretApplyConfiguration, v11.ApplyOptions) (*v1.Secret, error)) *MockSecretInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.SecretApplyConfiguration, v11.ApplyOptions) (*v1.Secret, error)) *MockSecretInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockSecretInterface) Create(arg0 context.Context, arg1 *v1.Secret, arg2 v11.CreateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSecretInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockSecretInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretInterface)(nil).Create), arg0, arg1, arg2)
	return &MockSecretInterfaceCreateCall{Call: call}
}

// MockSecretInterfaceCreateCall wrap *gomock.Call
type MockSecretInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceCreateCall) Return(arg0 *v1.Secret, arg1 error) *MockSecretInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceCreateCall) Do(f func(context.Context, *v1.Secret, v11.CreateOptions) (*v1.Secret, error)) *MockSecretInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Secret, v11.CreateOptions) (*v1.Secret, error)) *MockSecretInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockSecretInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockSecretInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockSecretInterfaceDeleteCall{Call: call}
}

// MockSecretInterfaceDeleteCall wrap *gomock.Call
type MockSecretInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceDeleteCall) Return(arg0 error) *MockSecretInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockSecretInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockSecretInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockSecretInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockSecretInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockSecretInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockSecretInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockSecretInterfaceDeleteCollectionCall{Call: call}
}

// MockSecretInterfaceDeleteCollectionCall wrap *gomock.Call
type MockSecretInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceDeleteCollectionCall) Return(arg0 error) *MockSecretInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockSecretInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockSecretInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockSecretInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockSecretInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretInterface)(nil).Get), arg0, arg1, arg2)
	return &MockSecretInterfaceGetCall{Call: call}
}

// MockSecretInterfaceGetCall wrap *gomock.Call
type MockSecretInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceGetCall) Return(arg0 *v1.Secret, arg1 error) *MockSecretInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.Secret, error)) *MockSecretInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.Secret, error)) *MockSecretInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockSecretInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretInterfaceMockRecorder) List(arg0, arg1 any) *MockSecretInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretInterface)(nil).List), arg0, arg1)
	return &MockSecretInterfaceListCall{Call: call}
}

// MockSecretInterfaceListCall wrap *gomock.Call
type MockSecretInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceListCall) Return(arg0 *v1.SecretList, arg1 error) *MockSecretInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.SecretList, error)) *MockSecretInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.SecretList, error)) *MockSecretInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockSecretInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockSecretInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockSecretInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockSecretInterface)(nil).Patch), varargs...)
	return &MockSecretInterfacePatchCall{Call: call}
}

// MockSecretInterfacePatchCall wrap *gomock.Call
type MockSecretInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfacePatchCall) Return(arg0 *v1.Secret, arg1 error) *MockSecretInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Secret, error)) *MockSecretInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Secret, error)) *MockSecretInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockSecretInterface) Update(arg0 context.Context, arg1 *v1.Secret, arg2 v11.UpdateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSecretInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockSecretInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretInterface)(nil).Update), arg0, arg1, arg2)
	return &MockSecretInterfaceUpdateCall{Call: call}
}

// MockSecretInterfaceUpdateCall wrap *gomock.Call
type MockSecretInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceUpdateCall) Return(arg0 *v1.Secret, arg1 error) *MockSecretInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceUpdateCall) Do(f func(context.Context, *v1.Secret, v11.UpdateOptions) (*v1.Secret, error)) *MockSecretInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Secret, v11.UpdateOptions) (*v1.Secret, error)) *MockSecretInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockSecretInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockSecretInterfaceMockRecorder) Watch(arg0, arg1 any) *MockSecretInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSecretInterface)(nil).Watch), arg0, arg1)
	return &MockSecretInterfaceWatchCall{Call: call}
}

// MockSecretInterfaceWatchCall wrap *gomock.Call
type MockSecretInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockSecretInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockSecretInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockSecretInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNodeInterface is a mock of NodeInterface interface.
type MockNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeInterfaceMockRecorder
}

// MockNodeInterfaceMockRecorder is the mock recorder for MockNodeInterface.
type MockNodeInterfaceMockRecorder struct {
	mock *MockNodeInterface
}

// NewMockNodeInterface creates a new mock instance.
func NewMockNodeInterface(ctrl *gomock.Controller) *MockNodeInterface {
	mock := &MockNodeInterface{ctrl: ctrl}
	mock.recorder = &MockNodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeInterface) EXPECT() *MockNodeInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNodeInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockNodeInterface) Apply(arg0 context.Context, arg1 *v12.NodeApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockNodeInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockNodeInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNodeInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockNodeInterfaceApplyCall{Call: call}
}

// MockNodeInterfaceApplyCall wrap *gomock.Call
type MockNodeInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceApplyCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceApplyCall) Do(f func(context.Context, *v12.NodeApplyConfiguration, v11.ApplyOptions) (*v1.Node, error)) *MockNodeInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.NodeApplyConfiguration, v11.ApplyOptions) (*v1.Node, error)) *MockNodeInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockNodeInterface) ApplyStatus(arg0 context.Context, arg1 *v12.NodeApplyConfiguration, arg2 v11.ApplyOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockNodeInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *MockNodeInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockNodeInterface)(nil).ApplyStatus), arg0, arg1, arg2)
	return &MockNodeInterfaceApplyStatusCall{Call: call}
}

// MockNodeInterfaceApplyStatusCall wrap *gomock.Call
type MockNodeInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceApplyStatusCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceApplyStatusCall) Do(f func(context.Context, *v12.NodeApplyConfiguration, v11.ApplyOptions) (*v1.Node, error)) *MockNodeInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v12.NodeApplyConfiguration, v11.ApplyOptions) (*v1.Node, error)) *MockNodeInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockNodeInterface) Create(arg0 context.Context, arg1 *v1.Node, arg2 v11.CreateOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNodeInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockNodeInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeInterface)(nil).Create), arg0, arg1, arg2)
	return &MockNodeInterfaceCreateCall{Call: call}
}

// MockNodeInterfaceCreateCall wrap *gomock.Call
type MockNodeInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceCreateCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceCreateCall) Do(f func(context.Context, *v1.Node, v11.CreateOptions) (*v1.Node, error)) *MockNodeInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Node, v11.CreateOptions) (*v1.Node, error)) *MockNodeInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockNodeInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNodeInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockNodeInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockNodeInterfaceDeleteCall{Call: call}
}

// MockNodeInterfaceDeleteCall wrap *gomock.Call
type MockNodeInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceDeleteCall) Return(arg0 error) *MockNodeInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockNodeInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockNodeInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockNodeInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockNodeInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockNodeInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockNodeInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockNodeInterfaceDeleteCollectionCall{Call: call}
}

// MockNodeInterfaceDeleteCollectionCall wrap *gomock.Call
type MockNodeInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceDeleteCollectionCall) Return(arg0 error) *MockNodeInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockNodeInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockNodeInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockNodeInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockNodeInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeInterface)(nil).Get), arg0, arg1, arg2)
	return &MockNodeInterfaceGetCall{Call: call}
}

// MockNodeInterfaceGetCall wrap *gomock.Call
type MockNodeInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceGetCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v1.Node, error)) *MockNodeInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v1.Node, error)) *MockNodeInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockNodeInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNodeInterfaceMockRecorder) List(arg0, arg1 any) *MockNodeInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeInterface)(nil).List), arg0, arg1)
	return &MockNodeInterfaceListCall{Call: call}
}

// MockNodeInterfaceListCall wrap *gomock.Call
type MockNodeInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceListCall) Return(arg0 *v1.NodeList, arg1 error) *MockNodeInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v1.NodeList, error)) *MockNodeInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v1.NodeList, error)) *MockNodeInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockNodeInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockNodeInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockNodeInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockNodeInterface)(nil).Patch), varargs...)
	return &MockNodeInterfacePatchCall{Call: call}
}

// MockNodeInterfacePatchCall wrap *gomock.Call
type MockNodeInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfacePatchCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Node, error)) *MockNodeInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v1.Node, error)) *MockNodeInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PatchStatus mocks base method.
func (m *MockNodeInterface) PatchStatus(arg0 context.Context, arg1 string, arg2 []byte) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockNodeInterfaceMockRecorder) PatchStatus(arg0, arg1, arg2 any) *MockNodeInterfacePatchStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockNodeInterface)(nil).PatchStatus), arg0, arg1, arg2)
	return &MockNodeInterfacePatchStatusCall{Call: call}
}

// MockNodeInterfacePatchStatusCall wrap *gomock.Call
type MockNodeInterfacePatchStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfacePatchStatusCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfacePatchStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfacePatchStatusCall) Do(f func(context.Context, string, []byte) (*v1.Node, error)) *MockNodeInterfacePatchStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfacePatchStatusCall) DoAndReturn(f func(context.Context, string, []byte) (*v1.Node, error)) *MockNodeInterfacePatchStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockNodeInterface) Update(arg0 context.Context, arg1 *v1.Node, arg2 v11.UpdateOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNodeInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockNodeInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNodeInterface)(nil).Update), arg0, arg1, arg2)
	return &MockNodeInterfaceUpdateCall{Call: call}
}

// MockNodeInterfaceUpdateCall wrap *gomock.Call
type MockNodeInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceUpdateCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceUpdateCall) Do(f func(context.Context, *v1.Node, v11.UpdateOptions) (*v1.Node, error)) *MockNodeInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Node, v11.UpdateOptions) (*v1.Node, error)) *MockNodeInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockNodeInterface) UpdateStatus(arg0 context.Context, arg1 *v1.Node, arg2 v11.UpdateOptions) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNodeInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockNodeInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNodeInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockNodeInterfaceUpdateStatusCall{Call: call}
}

// MockNodeInterfaceUpdateStatusCall wrap *gomock.Call
type MockNodeInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceUpdateStatusCall) Return(arg0 *v1.Node, arg1 error) *MockNodeInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceUpdateStatusCall) Do(f func(context.Context, *v1.Node, v11.UpdateOptions) (*v1.Node, error)) *MockNodeInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.Node, v11.UpdateOptions) (*v1.Node, error)) *MockNodeInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockNodeInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockNodeInterfaceMockRecorder) Watch(arg0, arg1 any) *MockNodeInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNodeInterface)(nil).Watch), arg0, arg1)
	return &MockNodeInterfaceWatchCall{Call: call}
}

// MockNodeInterfaceWatchCall wrap *gomock.Call
type MockNodeInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockNodeInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockNodeInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockNodeInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
