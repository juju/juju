// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/rest (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/restclient_mock.go -mock_names=Interface=MockRestClientInterface k8s.io/client-go/rest Interface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

// MockRestClientInterface is a mock of Interface interface.
type MockRestClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientInterfaceMockRecorder
}

// MockRestClientInterfaceMockRecorder is the mock recorder for MockRestClientInterface.
type MockRestClientInterfaceMockRecorder struct {
	mock *MockRestClientInterface
}

// NewMockRestClientInterface creates a new mock instance.
func NewMockRestClientInterface(ctrl *gomock.Controller) *MockRestClientInterface {
	mock := &MockRestClientInterface{ctrl: ctrl}
	mock.recorder = &MockRestClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestClientInterface) EXPECT() *MockRestClientInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRestClientInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// APIVersion mocks base method.
func (m *MockRestClientInterface) APIVersion() schema.GroupVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(schema.GroupVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *MockRestClientInterfaceMockRecorder) APIVersion() *MockRestClientInterfaceAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*MockRestClientInterface)(nil).APIVersion))
	return &MockRestClientInterfaceAPIVersionCall{Call: call}
}

// MockRestClientInterfaceAPIVersionCall wrap *gomock.Call
type MockRestClientInterfaceAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfaceAPIVersionCall) Return(arg0 schema.GroupVersion) *MockRestClientInterfaceAPIVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfaceAPIVersionCall) Do(f func() schema.GroupVersion) *MockRestClientInterfaceAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfaceAPIVersionCall) DoAndReturn(f func() schema.GroupVersion) *MockRestClientInterfaceAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRestClientInterface) Delete() *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRestClientInterfaceMockRecorder) Delete() *MockRestClientInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestClientInterface)(nil).Delete))
	return &MockRestClientInterfaceDeleteCall{Call: call}
}

// MockRestClientInterfaceDeleteCall wrap *gomock.Call
type MockRestClientInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfaceDeleteCall) Return(arg0 *rest.Request) *MockRestClientInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfaceDeleteCall) Do(f func() *rest.Request) *MockRestClientInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfaceDeleteCall) DoAndReturn(f func() *rest.Request) *MockRestClientInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRestClientInterface) Get() *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRestClientInterfaceMockRecorder) Get() *MockRestClientInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestClientInterface)(nil).Get))
	return &MockRestClientInterfaceGetCall{Call: call}
}

// MockRestClientInterfaceGetCall wrap *gomock.Call
type MockRestClientInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfaceGetCall) Return(arg0 *rest.Request) *MockRestClientInterfaceGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfaceGetCall) Do(f func() *rest.Request) *MockRestClientInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfaceGetCall) DoAndReturn(f func() *rest.Request) *MockRestClientInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRateLimiter mocks base method.
func (m *MockRestClientInterface) GetRateLimiter() flowcontrol.RateLimiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiter")
	ret0, _ := ret[0].(flowcontrol.RateLimiter)
	return ret0
}

// GetRateLimiter indicates an expected call of GetRateLimiter.
func (mr *MockRestClientInterfaceMockRecorder) GetRateLimiter() *MockRestClientInterfaceGetRateLimiterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiter", reflect.TypeOf((*MockRestClientInterface)(nil).GetRateLimiter))
	return &MockRestClientInterfaceGetRateLimiterCall{Call: call}
}

// MockRestClientInterfaceGetRateLimiterCall wrap *gomock.Call
type MockRestClientInterfaceGetRateLimiterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfaceGetRateLimiterCall) Return(arg0 flowcontrol.RateLimiter) *MockRestClientInterfaceGetRateLimiterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfaceGetRateLimiterCall) Do(f func() flowcontrol.RateLimiter) *MockRestClientInterfaceGetRateLimiterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfaceGetRateLimiterCall) DoAndReturn(f func() flowcontrol.RateLimiter) *MockRestClientInterfaceGetRateLimiterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockRestClientInterface) Patch(arg0 types.PatchType) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockRestClientInterfaceMockRecorder) Patch(arg0 any) *MockRestClientInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRestClientInterface)(nil).Patch), arg0)
	return &MockRestClientInterfacePatchCall{Call: call}
}

// MockRestClientInterfacePatchCall wrap *gomock.Call
type MockRestClientInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfacePatchCall) Return(arg0 *rest.Request) *MockRestClientInterfacePatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfacePatchCall) Do(f func(types.PatchType) *rest.Request) *MockRestClientInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfacePatchCall) DoAndReturn(f func(types.PatchType) *rest.Request) *MockRestClientInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Post mocks base method.
func (m *MockRestClientInterface) Post() *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockRestClientInterfaceMockRecorder) Post() *MockRestClientInterfacePostCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRestClientInterface)(nil).Post))
	return &MockRestClientInterfacePostCall{Call: call}
}

// MockRestClientInterfacePostCall wrap *gomock.Call
type MockRestClientInterfacePostCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfacePostCall) Return(arg0 *rest.Request) *MockRestClientInterfacePostCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfacePostCall) Do(f func() *rest.Request) *MockRestClientInterfacePostCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfacePostCall) DoAndReturn(f func() *rest.Request) *MockRestClientInterfacePostCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Put mocks base method.
func (m *MockRestClientInterface) Put() *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockRestClientInterfaceMockRecorder) Put() *MockRestClientInterfacePutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRestClientInterface)(nil).Put))
	return &MockRestClientInterfacePutCall{Call: call}
}

// MockRestClientInterfacePutCall wrap *gomock.Call
type MockRestClientInterfacePutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfacePutCall) Return(arg0 *rest.Request) *MockRestClientInterfacePutCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfacePutCall) Do(f func() *rest.Request) *MockRestClientInterfacePutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfacePutCall) DoAndReturn(f func() *rest.Request) *MockRestClientInterfacePutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verb mocks base method.
func (m *MockRestClientInterface) Verb(arg0 string) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verb", arg0)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Verb indicates an expected call of Verb.
func (mr *MockRestClientInterfaceMockRecorder) Verb(arg0 any) *MockRestClientInterfaceVerbCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verb", reflect.TypeOf((*MockRestClientInterface)(nil).Verb), arg0)
	return &MockRestClientInterfaceVerbCall{Call: call}
}

// MockRestClientInterfaceVerbCall wrap *gomock.Call
type MockRestClientInterfaceVerbCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRestClientInterfaceVerbCall) Return(arg0 *rest.Request) *MockRestClientInterfaceVerbCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRestClientInterfaceVerbCall) Do(f func(string) *rest.Request) *MockRestClientInterfaceVerbCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRestClientInterfaceVerbCall) DoAndReturn(f func(string) *rest.Request) *MockRestClientInterfaceVerbCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
