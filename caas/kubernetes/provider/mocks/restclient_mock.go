// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/rest (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
	reflect "reflect"
)

// MockRestClientInterface is a mock of Interface interface
type MockRestClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientInterfaceMockRecorder
}

// MockRestClientInterfaceMockRecorder is the mock recorder for MockRestClientInterface
type MockRestClientInterfaceMockRecorder struct {
	mock *MockRestClientInterface
}

// NewMockRestClientInterface creates a new mock instance
func NewMockRestClientInterface(ctrl *gomock.Controller) *MockRestClientInterface {
	mock := &MockRestClientInterface{ctrl: ctrl}
	mock.recorder = &MockRestClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestClientInterface) EXPECT() *MockRestClientInterfaceMockRecorder {
	return m.recorder
}

// APIVersion mocks base method
func (m *MockRestClientInterface) APIVersion() schema.GroupVersion {
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(schema.GroupVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion
func (mr *MockRestClientInterfaceMockRecorder) APIVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*MockRestClientInterface)(nil).APIVersion))
}

// Delete mocks base method
func (m *MockRestClientInterface) Delete() *rest.Request {
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRestClientInterfaceMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestClientInterface)(nil).Delete))
}

// Get mocks base method
func (m *MockRestClientInterface) Get() *rest.Request {
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRestClientInterfaceMockRecorder) Get() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestClientInterface)(nil).Get))
}

// GetRateLimiter mocks base method
func (m *MockRestClientInterface) GetRateLimiter() flowcontrol.RateLimiter {
	ret := m.ctrl.Call(m, "GetRateLimiter")
	ret0, _ := ret[0].(flowcontrol.RateLimiter)
	return ret0
}

// GetRateLimiter indicates an expected call of GetRateLimiter
func (mr *MockRestClientInterfaceMockRecorder) GetRateLimiter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiter", reflect.TypeOf((*MockRestClientInterface)(nil).GetRateLimiter))
}

// Patch mocks base method
func (m *MockRestClientInterface) Patch(arg0 types.PatchType) *rest.Request {
	ret := m.ctrl.Call(m, "Patch", arg0)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Patch indicates an expected call of Patch
func (mr *MockRestClientInterfaceMockRecorder) Patch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRestClientInterface)(nil).Patch), arg0)
}

// Post mocks base method
func (m *MockRestClientInterface) Post() *rest.Request {
	ret := m.ctrl.Call(m, "Post")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Post indicates an expected call of Post
func (mr *MockRestClientInterfaceMockRecorder) Post() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRestClientInterface)(nil).Post))
}

// Put mocks base method
func (m *MockRestClientInterface) Put() *rest.Request {
	ret := m.ctrl.Call(m, "Put")
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockRestClientInterfaceMockRecorder) Put() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRestClientInterface)(nil).Put))
}

// Verb mocks base method
func (m *MockRestClientInterface) Verb(arg0 string) *rest.Request {
	ret := m.ctrl.Call(m, "Verb", arg0)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// Verb indicates an expected call of Verb
func (mr *MockRestClientInterfaceMockRecorder) Verb(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verb", reflect.TypeOf((*MockRestClientInterface)(nil).Verb), arg0)
}
