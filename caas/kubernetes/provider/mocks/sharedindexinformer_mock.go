// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/tools/cache (interfaces: SharedIndexInformer)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/sharedindexinformer_mock.go k8s.io/client-go/tools/cache SharedIndexInformer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	cache "k8s.io/client-go/tools/cache"
)

// MockSharedIndexInformer is a mock of SharedIndexInformer interface.
type MockSharedIndexInformer struct {
	ctrl     *gomock.Controller
	recorder *MockSharedIndexInformerMockRecorder
}

// MockSharedIndexInformerMockRecorder is the mock recorder for MockSharedIndexInformer.
type MockSharedIndexInformerMockRecorder struct {
	mock *MockSharedIndexInformer
}

// NewMockSharedIndexInformer creates a new mock instance.
func NewMockSharedIndexInformer(ctrl *gomock.Controller) *MockSharedIndexInformer {
	mock := &MockSharedIndexInformer{ctrl: ctrl}
	mock.recorder = &MockSharedIndexInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedIndexInformer) EXPECT() *MockSharedIndexInformerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSharedIndexInformer) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddEventHandler mocks base method.
func (m *MockSharedIndexInformer) AddEventHandler(arg0 cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventHandler", arg0)
	ret0, _ := ret[0].(cache.ResourceEventHandlerRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockSharedIndexInformerMockRecorder) AddEventHandler(arg0 any) *MockSharedIndexInformerAddEventHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockSharedIndexInformer)(nil).AddEventHandler), arg0)
	return &MockSharedIndexInformerAddEventHandlerCall{Call: call}
}

// MockSharedIndexInformerAddEventHandlerCall wrap *gomock.Call
type MockSharedIndexInformerAddEventHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerAddEventHandlerCall) Return(arg0 cache.ResourceEventHandlerRegistration, arg1 error) *MockSharedIndexInformerAddEventHandlerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerAddEventHandlerCall) Do(f func(cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)) *MockSharedIndexInformerAddEventHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerAddEventHandlerCall) DoAndReturn(f func(cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)) *MockSharedIndexInformerAddEventHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddEventHandlerWithResyncPeriod mocks base method.
func (m *MockSharedIndexInformer) AddEventHandlerWithResyncPeriod(arg0 cache.ResourceEventHandler, arg1 time.Duration) (cache.ResourceEventHandlerRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventHandlerWithResyncPeriod", arg0, arg1)
	ret0, _ := ret[0].(cache.ResourceEventHandlerRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEventHandlerWithResyncPeriod indicates an expected call of AddEventHandlerWithResyncPeriod.
func (mr *MockSharedIndexInformerMockRecorder) AddEventHandlerWithResyncPeriod(arg0, arg1 any) *MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandlerWithResyncPeriod", reflect.TypeOf((*MockSharedIndexInformer)(nil).AddEventHandlerWithResyncPeriod), arg0, arg1)
	return &MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall{Call: call}
}

// MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall wrap *gomock.Call
type MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall) Return(arg0 cache.ResourceEventHandlerRegistration, arg1 error) *MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall) Do(f func(cache.ResourceEventHandler, time.Duration) (cache.ResourceEventHandlerRegistration, error)) *MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall) DoAndReturn(f func(cache.ResourceEventHandler, time.Duration) (cache.ResourceEventHandlerRegistration, error)) *MockSharedIndexInformerAddEventHandlerWithResyncPeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddIndexers mocks base method.
func (m *MockSharedIndexInformer) AddIndexers(arg0 cache.Indexers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndexers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndexers indicates an expected call of AddIndexers.
func (mr *MockSharedIndexInformerMockRecorder) AddIndexers(arg0 any) *MockSharedIndexInformerAddIndexersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexers", reflect.TypeOf((*MockSharedIndexInformer)(nil).AddIndexers), arg0)
	return &MockSharedIndexInformerAddIndexersCall{Call: call}
}

// MockSharedIndexInformerAddIndexersCall wrap *gomock.Call
type MockSharedIndexInformerAddIndexersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerAddIndexersCall) Return(arg0 error) *MockSharedIndexInformerAddIndexersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerAddIndexersCall) Do(f func(cache.Indexers) error) *MockSharedIndexInformerAddIndexersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerAddIndexersCall) DoAndReturn(f func(cache.Indexers) error) *MockSharedIndexInformerAddIndexersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetController mocks base method.
func (m *MockSharedIndexInformer) GetController() cache.Controller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetController")
	ret0, _ := ret[0].(cache.Controller)
	return ret0
}

// GetController indicates an expected call of GetController.
func (mr *MockSharedIndexInformerMockRecorder) GetController() *MockSharedIndexInformerGetControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetController", reflect.TypeOf((*MockSharedIndexInformer)(nil).GetController))
	return &MockSharedIndexInformerGetControllerCall{Call: call}
}

// MockSharedIndexInformerGetControllerCall wrap *gomock.Call
type MockSharedIndexInformerGetControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerGetControllerCall) Return(arg0 cache.Controller) *MockSharedIndexInformerGetControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerGetControllerCall) Do(f func() cache.Controller) *MockSharedIndexInformerGetControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerGetControllerCall) DoAndReturn(f func() cache.Controller) *MockSharedIndexInformerGetControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIndexer mocks base method.
func (m *MockSharedIndexInformer) GetIndexer() cache.Indexer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexer")
	ret0, _ := ret[0].(cache.Indexer)
	return ret0
}

// GetIndexer indicates an expected call of GetIndexer.
func (mr *MockSharedIndexInformerMockRecorder) GetIndexer() *MockSharedIndexInformerGetIndexerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexer", reflect.TypeOf((*MockSharedIndexInformer)(nil).GetIndexer))
	return &MockSharedIndexInformerGetIndexerCall{Call: call}
}

// MockSharedIndexInformerGetIndexerCall wrap *gomock.Call
type MockSharedIndexInformerGetIndexerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerGetIndexerCall) Return(arg0 cache.Indexer) *MockSharedIndexInformerGetIndexerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerGetIndexerCall) Do(f func() cache.Indexer) *MockSharedIndexInformerGetIndexerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerGetIndexerCall) DoAndReturn(f func() cache.Indexer) *MockSharedIndexInformerGetIndexerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStore mocks base method.
func (m *MockSharedIndexInformer) GetStore() cache.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(cache.Store)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockSharedIndexInformerMockRecorder) GetStore() *MockSharedIndexInformerGetStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockSharedIndexInformer)(nil).GetStore))
	return &MockSharedIndexInformerGetStoreCall{Call: call}
}

// MockSharedIndexInformerGetStoreCall wrap *gomock.Call
type MockSharedIndexInformerGetStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerGetStoreCall) Return(arg0 cache.Store) *MockSharedIndexInformerGetStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerGetStoreCall) Do(f func() cache.Store) *MockSharedIndexInformerGetStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerGetStoreCall) DoAndReturn(f func() cache.Store) *MockSharedIndexInformerGetStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasSynced mocks base method.
func (m *MockSharedIndexInformer) HasSynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSynced indicates an expected call of HasSynced.
func (mr *MockSharedIndexInformerMockRecorder) HasSynced() *MockSharedIndexInformerHasSyncedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSynced", reflect.TypeOf((*MockSharedIndexInformer)(nil).HasSynced))
	return &MockSharedIndexInformerHasSyncedCall{Call: call}
}

// MockSharedIndexInformerHasSyncedCall wrap *gomock.Call
type MockSharedIndexInformerHasSyncedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerHasSyncedCall) Return(arg0 bool) *MockSharedIndexInformerHasSyncedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerHasSyncedCall) Do(f func() bool) *MockSharedIndexInformerHasSyncedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerHasSyncedCall) DoAndReturn(f func() bool) *MockSharedIndexInformerHasSyncedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsStopped mocks base method.
func (m *MockSharedIndexInformer) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockSharedIndexInformerMockRecorder) IsStopped() *MockSharedIndexInformerIsStoppedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockSharedIndexInformer)(nil).IsStopped))
	return &MockSharedIndexInformerIsStoppedCall{Call: call}
}

// MockSharedIndexInformerIsStoppedCall wrap *gomock.Call
type MockSharedIndexInformerIsStoppedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerIsStoppedCall) Return(arg0 bool) *MockSharedIndexInformerIsStoppedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerIsStoppedCall) Do(f func() bool) *MockSharedIndexInformerIsStoppedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerIsStoppedCall) DoAndReturn(f func() bool) *MockSharedIndexInformerIsStoppedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSyncResourceVersion mocks base method.
func (m *MockSharedIndexInformer) LastSyncResourceVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSyncResourceVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// LastSyncResourceVersion indicates an expected call of LastSyncResourceVersion.
func (mr *MockSharedIndexInformerMockRecorder) LastSyncResourceVersion() *MockSharedIndexInformerLastSyncResourceVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSyncResourceVersion", reflect.TypeOf((*MockSharedIndexInformer)(nil).LastSyncResourceVersion))
	return &MockSharedIndexInformerLastSyncResourceVersionCall{Call: call}
}

// MockSharedIndexInformerLastSyncResourceVersionCall wrap *gomock.Call
type MockSharedIndexInformerLastSyncResourceVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerLastSyncResourceVersionCall) Return(arg0 string) *MockSharedIndexInformerLastSyncResourceVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerLastSyncResourceVersionCall) Do(f func() string) *MockSharedIndexInformerLastSyncResourceVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerLastSyncResourceVersionCall) DoAndReturn(f func() string) *MockSharedIndexInformerLastSyncResourceVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveEventHandler mocks base method.
func (m *MockSharedIndexInformer) RemoveEventHandler(arg0 cache.ResourceEventHandlerRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEventHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEventHandler indicates an expected call of RemoveEventHandler.
func (mr *MockSharedIndexInformerMockRecorder) RemoveEventHandler(arg0 any) *MockSharedIndexInformerRemoveEventHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventHandler", reflect.TypeOf((*MockSharedIndexInformer)(nil).RemoveEventHandler), arg0)
	return &MockSharedIndexInformerRemoveEventHandlerCall{Call: call}
}

// MockSharedIndexInformerRemoveEventHandlerCall wrap *gomock.Call
type MockSharedIndexInformerRemoveEventHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerRemoveEventHandlerCall) Return(arg0 error) *MockSharedIndexInformerRemoveEventHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerRemoveEventHandlerCall) Do(f func(cache.ResourceEventHandlerRegistration) error) *MockSharedIndexInformerRemoveEventHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerRemoveEventHandlerCall) DoAndReturn(f func(cache.ResourceEventHandlerRegistration) error) *MockSharedIndexInformerRemoveEventHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Run mocks base method.
func (m *MockSharedIndexInformer) Run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockSharedIndexInformerMockRecorder) Run(arg0 any) *MockSharedIndexInformerRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSharedIndexInformer)(nil).Run), arg0)
	return &MockSharedIndexInformerRunCall{Call: call}
}

// MockSharedIndexInformerRunCall wrap *gomock.Call
type MockSharedIndexInformerRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerRunCall) Return() *MockSharedIndexInformerRunCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerRunCall) Do(f func(<-chan struct{})) *MockSharedIndexInformerRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerRunCall) DoAndReturn(f func(<-chan struct{})) *MockSharedIndexInformerRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTransform mocks base method.
func (m *MockSharedIndexInformer) SetTransform(arg0 cache.TransformFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTransform", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTransform indicates an expected call of SetTransform.
func (mr *MockSharedIndexInformerMockRecorder) SetTransform(arg0 any) *MockSharedIndexInformerSetTransformCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransform", reflect.TypeOf((*MockSharedIndexInformer)(nil).SetTransform), arg0)
	return &MockSharedIndexInformerSetTransformCall{Call: call}
}

// MockSharedIndexInformerSetTransformCall wrap *gomock.Call
type MockSharedIndexInformerSetTransformCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerSetTransformCall) Return(arg0 error) *MockSharedIndexInformerSetTransformCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerSetTransformCall) Do(f func(cache.TransformFunc) error) *MockSharedIndexInformerSetTransformCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerSetTransformCall) DoAndReturn(f func(cache.TransformFunc) error) *MockSharedIndexInformerSetTransformCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetWatchErrorHandler mocks base method.
func (m *MockSharedIndexInformer) SetWatchErrorHandler(arg0 cache.WatchErrorHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWatchErrorHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWatchErrorHandler indicates an expected call of SetWatchErrorHandler.
func (mr *MockSharedIndexInformerMockRecorder) SetWatchErrorHandler(arg0 any) *MockSharedIndexInformerSetWatchErrorHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWatchErrorHandler", reflect.TypeOf((*MockSharedIndexInformer)(nil).SetWatchErrorHandler), arg0)
	return &MockSharedIndexInformerSetWatchErrorHandlerCall{Call: call}
}

// MockSharedIndexInformerSetWatchErrorHandlerCall wrap *gomock.Call
type MockSharedIndexInformerSetWatchErrorHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSharedIndexInformerSetWatchErrorHandlerCall) Return(arg0 error) *MockSharedIndexInformerSetWatchErrorHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSharedIndexInformerSetWatchErrorHandlerCall) Do(f func(cache.WatchErrorHandler) error) *MockSharedIndexInformerSetWatchErrorHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSharedIndexInformerSetWatchErrorHandlerCall) DoAndReturn(f func(cache.WatchErrorHandler) error) *MockSharedIndexInformerSetWatchErrorHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
