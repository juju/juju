// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/rbac/v1 (interfaces: RbacV1Interface,ClusterRoleBindingInterface,ClusterRoleInterface,RoleInterface,RoleBindingInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/rbacv1_mock.go k8s.io/client-go/kubernetes/typed/rbac/v1 RbacV1Interface,ClusterRoleBindingInterface,ClusterRoleInterface,RoleInterface,RoleBindingInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/rbac/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/rbac/v1"
	v12 "k8s.io/client-go/kubernetes/typed/rbac/v1"
	rest "k8s.io/client-go/rest"
)

// MockRbacV1Interface is a mock of RbacV1Interface interface.
type MockRbacV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockRbacV1InterfaceMockRecorder
}

// MockRbacV1InterfaceMockRecorder is the mock recorder for MockRbacV1Interface.
type MockRbacV1InterfaceMockRecorder struct {
	mock *MockRbacV1Interface
}

// NewMockRbacV1Interface creates a new mock instance.
func NewMockRbacV1Interface(ctrl *gomock.Controller) *MockRbacV1Interface {
	mock := &MockRbacV1Interface{ctrl: ctrl}
	mock.recorder = &MockRbacV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRbacV1Interface) EXPECT() *MockRbacV1InterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRbacV1Interface) ISGOMOCK() struct{} {
	return struct{}{}
}

// ClusterRoleBindings mocks base method.
func (m *MockRbacV1Interface) ClusterRoleBindings() v12.ClusterRoleBindingInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoleBindings")
	ret0, _ := ret[0].(v12.ClusterRoleBindingInterface)
	return ret0
}

// ClusterRoleBindings indicates an expected call of ClusterRoleBindings.
func (mr *MockRbacV1InterfaceMockRecorder) ClusterRoleBindings() *MockRbacV1InterfaceClusterRoleBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoleBindings", reflect.TypeOf((*MockRbacV1Interface)(nil).ClusterRoleBindings))
	return &MockRbacV1InterfaceClusterRoleBindingsCall{Call: call}
}

// MockRbacV1InterfaceClusterRoleBindingsCall wrap *gomock.Call
type MockRbacV1InterfaceClusterRoleBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRbacV1InterfaceClusterRoleBindingsCall) Return(arg0 v12.ClusterRoleBindingInterface) *MockRbacV1InterfaceClusterRoleBindingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRbacV1InterfaceClusterRoleBindingsCall) Do(f func() v12.ClusterRoleBindingInterface) *MockRbacV1InterfaceClusterRoleBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRbacV1InterfaceClusterRoleBindingsCall) DoAndReturn(f func() v12.ClusterRoleBindingInterface) *MockRbacV1InterfaceClusterRoleBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClusterRoles mocks base method.
func (m *MockRbacV1Interface) ClusterRoles() v12.ClusterRoleInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoles")
	ret0, _ := ret[0].(v12.ClusterRoleInterface)
	return ret0
}

// ClusterRoles indicates an expected call of ClusterRoles.
func (mr *MockRbacV1InterfaceMockRecorder) ClusterRoles() *MockRbacV1InterfaceClusterRolesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoles", reflect.TypeOf((*MockRbacV1Interface)(nil).ClusterRoles))
	return &MockRbacV1InterfaceClusterRolesCall{Call: call}
}

// MockRbacV1InterfaceClusterRolesCall wrap *gomock.Call
type MockRbacV1InterfaceClusterRolesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRbacV1InterfaceClusterRolesCall) Return(arg0 v12.ClusterRoleInterface) *MockRbacV1InterfaceClusterRolesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRbacV1InterfaceClusterRolesCall) Do(f func() v12.ClusterRoleInterface) *MockRbacV1InterfaceClusterRolesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRbacV1InterfaceClusterRolesCall) DoAndReturn(f func() v12.ClusterRoleInterface) *MockRbacV1InterfaceClusterRolesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTClient mocks base method.
func (m *MockRbacV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockRbacV1InterfaceMockRecorder) RESTClient() *MockRbacV1InterfaceRESTClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockRbacV1Interface)(nil).RESTClient))
	return &MockRbacV1InterfaceRESTClientCall{Call: call}
}

// MockRbacV1InterfaceRESTClientCall wrap *gomock.Call
type MockRbacV1InterfaceRESTClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRbacV1InterfaceRESTClientCall) Return(arg0 rest.Interface) *MockRbacV1InterfaceRESTClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRbacV1InterfaceRESTClientCall) Do(f func() rest.Interface) *MockRbacV1InterfaceRESTClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRbacV1InterfaceRESTClientCall) DoAndReturn(f func() rest.Interface) *MockRbacV1InterfaceRESTClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RoleBindings mocks base method.
func (m *MockRbacV1Interface) RoleBindings(arg0 string) v12.RoleBindingInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBindings", arg0)
	ret0, _ := ret[0].(v12.RoleBindingInterface)
	return ret0
}

// RoleBindings indicates an expected call of RoleBindings.
func (mr *MockRbacV1InterfaceMockRecorder) RoleBindings(arg0 any) *MockRbacV1InterfaceRoleBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBindings", reflect.TypeOf((*MockRbacV1Interface)(nil).RoleBindings), arg0)
	return &MockRbacV1InterfaceRoleBindingsCall{Call: call}
}

// MockRbacV1InterfaceRoleBindingsCall wrap *gomock.Call
type MockRbacV1InterfaceRoleBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRbacV1InterfaceRoleBindingsCall) Return(arg0 v12.RoleBindingInterface) *MockRbacV1InterfaceRoleBindingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRbacV1InterfaceRoleBindingsCall) Do(f func(string) v12.RoleBindingInterface) *MockRbacV1InterfaceRoleBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRbacV1InterfaceRoleBindingsCall) DoAndReturn(f func(string) v12.RoleBindingInterface) *MockRbacV1InterfaceRoleBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Roles mocks base method.
func (m *MockRbacV1Interface) Roles(arg0 string) v12.RoleInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles", arg0)
	ret0, _ := ret[0].(v12.RoleInterface)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockRbacV1InterfaceMockRecorder) Roles(arg0 any) *MockRbacV1InterfaceRolesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockRbacV1Interface)(nil).Roles), arg0)
	return &MockRbacV1InterfaceRolesCall{Call: call}
}

// MockRbacV1InterfaceRolesCall wrap *gomock.Call
type MockRbacV1InterfaceRolesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRbacV1InterfaceRolesCall) Return(arg0 v12.RoleInterface) *MockRbacV1InterfaceRolesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRbacV1InterfaceRolesCall) Do(f func(string) v12.RoleInterface) *MockRbacV1InterfaceRolesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRbacV1InterfaceRolesCall) DoAndReturn(f func(string) v12.RoleInterface) *MockRbacV1InterfaceRolesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClusterRoleBindingInterface is a mock of ClusterRoleBindingInterface interface.
type MockClusterRoleBindingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleBindingInterfaceMockRecorder
}

// MockClusterRoleBindingInterfaceMockRecorder is the mock recorder for MockClusterRoleBindingInterface.
type MockClusterRoleBindingInterfaceMockRecorder struct {
	mock *MockClusterRoleBindingInterface
}

// NewMockClusterRoleBindingInterface creates a new mock instance.
func NewMockClusterRoleBindingInterface(ctrl *gomock.Controller) *MockClusterRoleBindingInterface {
	mock := &MockClusterRoleBindingInterface{ctrl: ctrl}
	mock.recorder = &MockClusterRoleBindingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleBindingInterface) EXPECT() *MockClusterRoleBindingInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClusterRoleBindingInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockClusterRoleBindingInterface) Apply(arg0 context.Context, arg1 *v11.ClusterRoleBindingApplyConfiguration, arg2 v10.ApplyOptions) (*v1.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockClusterRoleBindingInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockClusterRoleBindingInterfaceApplyCall{Call: call}
}

// MockClusterRoleBindingInterfaceApplyCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceApplyCall) Return(arg0 *v1.ClusterRoleBinding, arg1 error) *MockClusterRoleBindingInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceApplyCall) Do(f func(context.Context, *v11.ClusterRoleBindingApplyConfiguration, v10.ApplyOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.ClusterRoleBindingApplyConfiguration, v10.ApplyOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockClusterRoleBindingInterface) Create(arg0 context.Context, arg1 *v1.ClusterRoleBinding, arg2 v10.CreateOptions) (*v1.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockClusterRoleBindingInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).Create), arg0, arg1, arg2)
	return &MockClusterRoleBindingInterfaceCreateCall{Call: call}
}

// MockClusterRoleBindingInterfaceCreateCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceCreateCall) Return(arg0 *v1.ClusterRoleBinding, arg1 error) *MockClusterRoleBindingInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceCreateCall) Do(f func(context.Context, *v1.ClusterRoleBinding, v10.CreateOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.ClusterRoleBinding, v10.CreateOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockClusterRoleBindingInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockClusterRoleBindingInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockClusterRoleBindingInterfaceDeleteCall{Call: call}
}

// MockClusterRoleBindingInterfaceDeleteCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceDeleteCall) Return(arg0 error) *MockClusterRoleBindingInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockClusterRoleBindingInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockClusterRoleBindingInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockClusterRoleBindingInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockClusterRoleBindingInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockClusterRoleBindingInterfaceDeleteCollectionCall{Call: call}
}

// MockClusterRoleBindingInterfaceDeleteCollectionCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceDeleteCollectionCall) Return(arg0 error) *MockClusterRoleBindingInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockClusterRoleBindingInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockClusterRoleBindingInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockClusterRoleBindingInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockClusterRoleBindingInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).Get), arg0, arg1, arg2)
	return &MockClusterRoleBindingInterfaceGetCall{Call: call}
}

// MockClusterRoleBindingInterfaceGetCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceGetCall) Return(arg0 *v1.ClusterRoleBinding, arg1 error) *MockClusterRoleBindingInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockClusterRoleBindingInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.ClusterRoleBindingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.ClusterRoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) List(arg0, arg1 any) *MockClusterRoleBindingInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).List), arg0, arg1)
	return &MockClusterRoleBindingInterfaceListCall{Call: call}
}

// MockClusterRoleBindingInterfaceListCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceListCall) Return(arg0 *v1.ClusterRoleBindingList, arg1 error) *MockClusterRoleBindingInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.ClusterRoleBindingList, error)) *MockClusterRoleBindingInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.ClusterRoleBindingList, error)) *MockClusterRoleBindingInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockClusterRoleBindingInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockClusterRoleBindingInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).Patch), varargs...)
	return &MockClusterRoleBindingInterfacePatchCall{Call: call}
}

// MockClusterRoleBindingInterfacePatchCall wrap *gomock.Call
type MockClusterRoleBindingInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfacePatchCall) Return(arg0 *v1.ClusterRoleBinding, arg1 error) *MockClusterRoleBindingInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockClusterRoleBindingInterface) Update(arg0 context.Context, arg1 *v1.ClusterRoleBinding, arg2 v10.UpdateOptions) (*v1.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockClusterRoleBindingInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).Update), arg0, arg1, arg2)
	return &MockClusterRoleBindingInterfaceUpdateCall{Call: call}
}

// MockClusterRoleBindingInterfaceUpdateCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceUpdateCall) Return(arg0 *v1.ClusterRoleBinding, arg1 error) *MockClusterRoleBindingInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceUpdateCall) Do(f func(context.Context, *v1.ClusterRoleBinding, v10.UpdateOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.ClusterRoleBinding, v10.UpdateOptions) (*v1.ClusterRoleBinding, error)) *MockClusterRoleBindingInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockClusterRoleBindingInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClusterRoleBindingInterfaceMockRecorder) Watch(arg0, arg1 any) *MockClusterRoleBindingInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterRoleBindingInterface)(nil).Watch), arg0, arg1)
	return &MockClusterRoleBindingInterfaceWatchCall{Call: call}
}

// MockClusterRoleBindingInterfaceWatchCall wrap *gomock.Call
type MockClusterRoleBindingInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleBindingInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockClusterRoleBindingInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleBindingInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockClusterRoleBindingInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleBindingInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockClusterRoleBindingInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClusterRoleInterface is a mock of ClusterRoleInterface interface.
type MockClusterRoleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleInterfaceMockRecorder
}

// MockClusterRoleInterfaceMockRecorder is the mock recorder for MockClusterRoleInterface.
type MockClusterRoleInterfaceMockRecorder struct {
	mock *MockClusterRoleInterface
}

// NewMockClusterRoleInterface creates a new mock instance.
func NewMockClusterRoleInterface(ctrl *gomock.Controller) *MockClusterRoleInterface {
	mock := &MockClusterRoleInterface{ctrl: ctrl}
	mock.recorder = &MockClusterRoleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleInterface) EXPECT() *MockClusterRoleInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClusterRoleInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockClusterRoleInterface) Apply(arg0 context.Context, arg1 *v11.ClusterRoleApplyConfiguration, arg2 v10.ApplyOptions) (*v1.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockClusterRoleInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockClusterRoleInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockClusterRoleInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockClusterRoleInterfaceApplyCall{Call: call}
}

// MockClusterRoleInterfaceApplyCall wrap *gomock.Call
type MockClusterRoleInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceApplyCall) Return(arg0 *v1.ClusterRole, arg1 error) *MockClusterRoleInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceApplyCall) Do(f func(context.Context, *v11.ClusterRoleApplyConfiguration, v10.ApplyOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.ClusterRoleApplyConfiguration, v10.ApplyOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockClusterRoleInterface) Create(arg0 context.Context, arg1 *v1.ClusterRole, arg2 v10.CreateOptions) (*v1.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClusterRoleInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockClusterRoleInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterRoleInterface)(nil).Create), arg0, arg1, arg2)
	return &MockClusterRoleInterfaceCreateCall{Call: call}
}

// MockClusterRoleInterfaceCreateCall wrap *gomock.Call
type MockClusterRoleInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceCreateCall) Return(arg0 *v1.ClusterRole, arg1 error) *MockClusterRoleInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceCreateCall) Do(f func(context.Context, *v1.ClusterRole, v10.CreateOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.ClusterRole, v10.CreateOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockClusterRoleInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterRoleInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockClusterRoleInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterRoleInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockClusterRoleInterfaceDeleteCall{Call: call}
}

// MockClusterRoleInterfaceDeleteCall wrap *gomock.Call
type MockClusterRoleInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceDeleteCall) Return(arg0 error) *MockClusterRoleInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockClusterRoleInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockClusterRoleInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockClusterRoleInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClusterRoleInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockClusterRoleInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClusterRoleInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockClusterRoleInterfaceDeleteCollectionCall{Call: call}
}

// MockClusterRoleInterfaceDeleteCollectionCall wrap *gomock.Call
type MockClusterRoleInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceDeleteCollectionCall) Return(arg0 error) *MockClusterRoleInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockClusterRoleInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockClusterRoleInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockClusterRoleInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterRoleInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockClusterRoleInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterRoleInterface)(nil).Get), arg0, arg1, arg2)
	return &MockClusterRoleInterfaceGetCall{Call: call}
}

// MockClusterRoleInterfaceGetCall wrap *gomock.Call
type MockClusterRoleInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceGetCall) Return(arg0 *v1.ClusterRole, arg1 error) *MockClusterRoleInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockClusterRoleInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.ClusterRoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.ClusterRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterRoleInterfaceMockRecorder) List(arg0, arg1 any) *MockClusterRoleInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterRoleInterface)(nil).List), arg0, arg1)
	return &MockClusterRoleInterfaceListCall{Call: call}
}

// MockClusterRoleInterfaceListCall wrap *gomock.Call
type MockClusterRoleInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceListCall) Return(arg0 *v1.ClusterRoleList, arg1 error) *MockClusterRoleInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.ClusterRoleList, error)) *MockClusterRoleInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.ClusterRoleList, error)) *MockClusterRoleInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockClusterRoleInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.ClusterRole, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockClusterRoleInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockClusterRoleInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClusterRoleInterface)(nil).Patch), varargs...)
	return &MockClusterRoleInterfacePatchCall{Call: call}
}

// MockClusterRoleInterfacePatchCall wrap *gomock.Call
type MockClusterRoleInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfacePatchCall) Return(arg0 *v1.ClusterRole, arg1 error) *MockClusterRoleInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.ClusterRole, error)) *MockClusterRoleInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.ClusterRole, error)) *MockClusterRoleInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockClusterRoleInterface) Update(arg0 context.Context, arg1 *v1.ClusterRole, arg2 v10.UpdateOptions) (*v1.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClusterRoleInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockClusterRoleInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterRoleInterface)(nil).Update), arg0, arg1, arg2)
	return &MockClusterRoleInterfaceUpdateCall{Call: call}
}

// MockClusterRoleInterfaceUpdateCall wrap *gomock.Call
type MockClusterRoleInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceUpdateCall) Return(arg0 *v1.ClusterRole, arg1 error) *MockClusterRoleInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceUpdateCall) Do(f func(context.Context, *v1.ClusterRole, v10.UpdateOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.ClusterRole, v10.UpdateOptions) (*v1.ClusterRole, error)) *MockClusterRoleInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockClusterRoleInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClusterRoleInterfaceMockRecorder) Watch(arg0, arg1 any) *MockClusterRoleInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterRoleInterface)(nil).Watch), arg0, arg1)
	return &MockClusterRoleInterfaceWatchCall{Call: call}
}

// MockClusterRoleInterfaceWatchCall wrap *gomock.Call
type MockClusterRoleInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterRoleInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockClusterRoleInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterRoleInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockClusterRoleInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterRoleInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockClusterRoleInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRoleInterface is a mock of RoleInterface interface.
type MockRoleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoleInterfaceMockRecorder
}

// MockRoleInterfaceMockRecorder is the mock recorder for MockRoleInterface.
type MockRoleInterfaceMockRecorder struct {
	mock *MockRoleInterface
}

// NewMockRoleInterface creates a new mock instance.
func NewMockRoleInterface(ctrl *gomock.Controller) *MockRoleInterface {
	mock := &MockRoleInterface{ctrl: ctrl}
	mock.recorder = &MockRoleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleInterface) EXPECT() *MockRoleInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRoleInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockRoleInterface) Apply(arg0 context.Context, arg1 *v11.RoleApplyConfiguration, arg2 v10.ApplyOptions) (*v1.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockRoleInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockRoleInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockRoleInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockRoleInterfaceApplyCall{Call: call}
}

// MockRoleInterfaceApplyCall wrap *gomock.Call
type MockRoleInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceApplyCall) Return(arg0 *v1.Role, arg1 error) *MockRoleInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceApplyCall) Do(f func(context.Context, *v11.RoleApplyConfiguration, v10.ApplyOptions) (*v1.Role, error)) *MockRoleInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.RoleApplyConfiguration, v10.ApplyOptions) (*v1.Role, error)) *MockRoleInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockRoleInterface) Create(arg0 context.Context, arg1 *v1.Role, arg2 v10.CreateOptions) (*v1.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockRoleInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleInterface)(nil).Create), arg0, arg1, arg2)
	return &MockRoleInterfaceCreateCall{Call: call}
}

// MockRoleInterfaceCreateCall wrap *gomock.Call
type MockRoleInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceCreateCall) Return(arg0 *v1.Role, arg1 error) *MockRoleInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceCreateCall) Do(f func(context.Context, *v1.Role, v10.CreateOptions) (*v1.Role, error)) *MockRoleInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Role, v10.CreateOptions) (*v1.Role, error)) *MockRoleInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRoleInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockRoleInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockRoleInterfaceDeleteCall{Call: call}
}

// MockRoleInterfaceDeleteCall wrap *gomock.Call
type MockRoleInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceDeleteCall) Return(arg0 error) *MockRoleInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockRoleInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockRoleInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockRoleInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockRoleInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockRoleInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockRoleInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockRoleInterfaceDeleteCollectionCall{Call: call}
}

// MockRoleInterfaceDeleteCollectionCall wrap *gomock.Call
type MockRoleInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceDeleteCollectionCall) Return(arg0 error) *MockRoleInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockRoleInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockRoleInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRoleInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockRoleInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleInterface)(nil).Get), arg0, arg1, arg2)
	return &MockRoleInterfaceGetCall{Call: call}
}

// MockRoleInterfaceGetCall wrap *gomock.Call
type MockRoleInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceGetCall) Return(arg0 *v1.Role, arg1 error) *MockRoleInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.Role, error)) *MockRoleInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.Role, error)) *MockRoleInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockRoleInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.RoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.RoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleInterfaceMockRecorder) List(arg0, arg1 any) *MockRoleInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleInterface)(nil).List), arg0, arg1)
	return &MockRoleInterfaceListCall{Call: call}
}

// MockRoleInterfaceListCall wrap *gomock.Call
type MockRoleInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceListCall) Return(arg0 *v1.RoleList, arg1 error) *MockRoleInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.RoleList, error)) *MockRoleInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.RoleList, error)) *MockRoleInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockRoleInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockRoleInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockRoleInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRoleInterface)(nil).Patch), varargs...)
	return &MockRoleInterfacePatchCall{Call: call}
}

// MockRoleInterfacePatchCall wrap *gomock.Call
type MockRoleInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfacePatchCall) Return(arg0 *v1.Role, arg1 error) *MockRoleInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Role, error)) *MockRoleInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Role, error)) *MockRoleInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockRoleInterface) Update(arg0 context.Context, arg1 *v1.Role, arg2 v10.UpdateOptions) (*v1.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRoleInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockRoleInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleInterface)(nil).Update), arg0, arg1, arg2)
	return &MockRoleInterfaceUpdateCall{Call: call}
}

// MockRoleInterfaceUpdateCall wrap *gomock.Call
type MockRoleInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceUpdateCall) Return(arg0 *v1.Role, arg1 error) *MockRoleInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceUpdateCall) Do(f func(context.Context, *v1.Role, v10.UpdateOptions) (*v1.Role, error)) *MockRoleInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Role, v10.UpdateOptions) (*v1.Role, error)) *MockRoleInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockRoleInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockRoleInterfaceMockRecorder) Watch(arg0, arg1 any) *MockRoleInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRoleInterface)(nil).Watch), arg0, arg1)
	return &MockRoleInterfaceWatchCall{Call: call}
}

// MockRoleInterfaceWatchCall wrap *gomock.Call
type MockRoleInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockRoleInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockRoleInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockRoleInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRoleBindingInterface is a mock of RoleBindingInterface interface.
type MockRoleBindingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingInterfaceMockRecorder
}

// MockRoleBindingInterfaceMockRecorder is the mock recorder for MockRoleBindingInterface.
type MockRoleBindingInterfaceMockRecorder struct {
	mock *MockRoleBindingInterface
}

// NewMockRoleBindingInterface creates a new mock instance.
func NewMockRoleBindingInterface(ctrl *gomock.Controller) *MockRoleBindingInterface {
	mock := &MockRoleBindingInterface{ctrl: ctrl}
	mock.recorder = &MockRoleBindingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleBindingInterface) EXPECT() *MockRoleBindingInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRoleBindingInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockRoleBindingInterface) Apply(arg0 context.Context, arg1 *v11.RoleBindingApplyConfiguration, arg2 v10.ApplyOptions) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockRoleBindingInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockRoleBindingInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockRoleBindingInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockRoleBindingInterfaceApplyCall{Call: call}
}

// MockRoleBindingInterfaceApplyCall wrap *gomock.Call
type MockRoleBindingInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceApplyCall) Return(arg0 *v1.RoleBinding, arg1 error) *MockRoleBindingInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceApplyCall) Do(f func(context.Context, *v11.RoleBindingApplyConfiguration, v10.ApplyOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.RoleBindingApplyConfiguration, v10.ApplyOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockRoleBindingInterface) Create(arg0 context.Context, arg1 *v1.RoleBinding, arg2 v10.CreateOptions) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleBindingInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockRoleBindingInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleBindingInterface)(nil).Create), arg0, arg1, arg2)
	return &MockRoleBindingInterfaceCreateCall{Call: call}
}

// MockRoleBindingInterfaceCreateCall wrap *gomock.Call
type MockRoleBindingInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceCreateCall) Return(arg0 *v1.RoleBinding, arg1 error) *MockRoleBindingInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceCreateCall) Do(f func(context.Context, *v1.RoleBinding, v10.CreateOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.RoleBinding, v10.CreateOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRoleBindingInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleBindingInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockRoleBindingInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleBindingInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockRoleBindingInterfaceDeleteCall{Call: call}
}

// MockRoleBindingInterfaceDeleteCall wrap *gomock.Call
type MockRoleBindingInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceDeleteCall) Return(arg0 error) *MockRoleBindingInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockRoleBindingInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockRoleBindingInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockRoleBindingInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockRoleBindingInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockRoleBindingInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockRoleBindingInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockRoleBindingInterfaceDeleteCollectionCall{Call: call}
}

// MockRoleBindingInterfaceDeleteCollectionCall wrap *gomock.Call
type MockRoleBindingInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceDeleteCollectionCall) Return(arg0 error) *MockRoleBindingInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockRoleBindingInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockRoleBindingInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRoleBindingInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleBindingInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockRoleBindingInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleBindingInterface)(nil).Get), arg0, arg1, arg2)
	return &MockRoleBindingInterfaceGetCall{Call: call}
}

// MockRoleBindingInterfaceGetCall wrap *gomock.Call
type MockRoleBindingInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceGetCall) Return(arg0 *v1.RoleBinding, arg1 error) *MockRoleBindingInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockRoleBindingInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.RoleBindingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleBindingInterfaceMockRecorder) List(arg0, arg1 any) *MockRoleBindingInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleBindingInterface)(nil).List), arg0, arg1)
	return &MockRoleBindingInterfaceListCall{Call: call}
}

// MockRoleBindingInterfaceListCall wrap *gomock.Call
type MockRoleBindingInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceListCall) Return(arg0 *v1.RoleBindingList, arg1 error) *MockRoleBindingInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.RoleBindingList, error)) *MockRoleBindingInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.RoleBindingList, error)) *MockRoleBindingInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockRoleBindingInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockRoleBindingInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockRoleBindingInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRoleBindingInterface)(nil).Patch), varargs...)
	return &MockRoleBindingInterfacePatchCall{Call: call}
}

// MockRoleBindingInterfacePatchCall wrap *gomock.Call
type MockRoleBindingInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfacePatchCall) Return(arg0 *v1.RoleBinding, arg1 error) *MockRoleBindingInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.RoleBinding, error)) *MockRoleBindingInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.RoleBinding, error)) *MockRoleBindingInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockRoleBindingInterface) Update(arg0 context.Context, arg1 *v1.RoleBinding, arg2 v10.UpdateOptions) (*v1.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRoleBindingInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockRoleBindingInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleBindingInterface)(nil).Update), arg0, arg1, arg2)
	return &MockRoleBindingInterfaceUpdateCall{Call: call}
}

// MockRoleBindingInterfaceUpdateCall wrap *gomock.Call
type MockRoleBindingInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceUpdateCall) Return(arg0 *v1.RoleBinding, arg1 error) *MockRoleBindingInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceUpdateCall) Do(f func(context.Context, *v1.RoleBinding, v10.UpdateOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.RoleBinding, v10.UpdateOptions) (*v1.RoleBinding, error)) *MockRoleBindingInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockRoleBindingInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockRoleBindingInterfaceMockRecorder) Watch(arg0, arg1 any) *MockRoleBindingInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRoleBindingInterface)(nil).Watch), arg0, arg1)
	return &MockRoleBindingInterfaceWatchCall{Call: call}
}

// MockRoleBindingInterfaceWatchCall wrap *gomock.Call
type MockRoleBindingInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoleBindingInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockRoleBindingInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoleBindingInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockRoleBindingInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoleBindingInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockRoleBindingInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
