// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/discovery (interfaces: DiscoveryInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/discovery_mock.go k8s.io/client-go/discovery DiscoveryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	openapi_v2 "github.com/google/gnostic-models/openapiv2"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	version "k8s.io/apimachinery/pkg/version"
	discovery "k8s.io/client-go/discovery"
	openapi "k8s.io/client-go/openapi"
	rest "k8s.io/client-go/rest"
)

// MockDiscoveryInterface is a mock of DiscoveryInterface interface.
type MockDiscoveryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryInterfaceMockRecorder
}

// MockDiscoveryInterfaceMockRecorder is the mock recorder for MockDiscoveryInterface.
type MockDiscoveryInterfaceMockRecorder struct {
	mock *MockDiscoveryInterface
}

// NewMockDiscoveryInterface creates a new mock instance.
func NewMockDiscoveryInterface(ctrl *gomock.Controller) *MockDiscoveryInterface {
	mock := &MockDiscoveryInterface{ctrl: ctrl}
	mock.recorder = &MockDiscoveryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveryInterface) EXPECT() *MockDiscoveryInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDiscoveryInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// OpenAPISchema mocks base method.
func (m *MockDiscoveryInterface) OpenAPISchema() (*openapi_v2.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenAPISchema")
	ret0, _ := ret[0].(*openapi_v2.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenAPISchema indicates an expected call of OpenAPISchema.
func (mr *MockDiscoveryInterfaceMockRecorder) OpenAPISchema() *MockDiscoveryInterfaceOpenAPISchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenAPISchema", reflect.TypeOf((*MockDiscoveryInterface)(nil).OpenAPISchema))
	return &MockDiscoveryInterfaceOpenAPISchemaCall{Call: call}
}

// MockDiscoveryInterfaceOpenAPISchemaCall wrap *gomock.Call
type MockDiscoveryInterfaceOpenAPISchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceOpenAPISchemaCall) Return(arg0 *openapi_v2.Document, arg1 error) *MockDiscoveryInterfaceOpenAPISchemaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceOpenAPISchemaCall) Do(f func() (*openapi_v2.Document, error)) *MockDiscoveryInterfaceOpenAPISchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceOpenAPISchemaCall) DoAndReturn(f func() (*openapi_v2.Document, error)) *MockDiscoveryInterfaceOpenAPISchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenAPIV3 mocks base method.
func (m *MockDiscoveryInterface) OpenAPIV3() openapi.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenAPIV3")
	ret0, _ := ret[0].(openapi.Client)
	return ret0
}

// OpenAPIV3 indicates an expected call of OpenAPIV3.
func (mr *MockDiscoveryInterfaceMockRecorder) OpenAPIV3() *MockDiscoveryInterfaceOpenAPIV3Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenAPIV3", reflect.TypeOf((*MockDiscoveryInterface)(nil).OpenAPIV3))
	return &MockDiscoveryInterfaceOpenAPIV3Call{Call: call}
}

// MockDiscoveryInterfaceOpenAPIV3Call wrap *gomock.Call
type MockDiscoveryInterfaceOpenAPIV3Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceOpenAPIV3Call) Return(arg0 openapi.Client) *MockDiscoveryInterfaceOpenAPIV3Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceOpenAPIV3Call) Do(f func() openapi.Client) *MockDiscoveryInterfaceOpenAPIV3Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceOpenAPIV3Call) DoAndReturn(f func() openapi.Client) *MockDiscoveryInterfaceOpenAPIV3Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTClient mocks base method.
func (m *MockDiscoveryInterface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockDiscoveryInterfaceMockRecorder) RESTClient() *MockDiscoveryInterfaceRESTClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockDiscoveryInterface)(nil).RESTClient))
	return &MockDiscoveryInterfaceRESTClientCall{Call: call}
}

// MockDiscoveryInterfaceRESTClientCall wrap *gomock.Call
type MockDiscoveryInterfaceRESTClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceRESTClientCall) Return(arg0 rest.Interface) *MockDiscoveryInterfaceRESTClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceRESTClientCall) Do(f func() rest.Interface) *MockDiscoveryInterfaceRESTClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceRESTClientCall) DoAndReturn(f func() rest.Interface) *MockDiscoveryInterfaceRESTClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerGroups mocks base method.
func (m *MockDiscoveryInterface) ServerGroups() (*v1.APIGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGroups")
	ret0, _ := ret[0].(*v1.APIGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerGroups indicates an expected call of ServerGroups.
func (mr *MockDiscoveryInterfaceMockRecorder) ServerGroups() *MockDiscoveryInterfaceServerGroupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGroups", reflect.TypeOf((*MockDiscoveryInterface)(nil).ServerGroups))
	return &MockDiscoveryInterfaceServerGroupsCall{Call: call}
}

// MockDiscoveryInterfaceServerGroupsCall wrap *gomock.Call
type MockDiscoveryInterfaceServerGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceServerGroupsCall) Return(arg0 *v1.APIGroupList, arg1 error) *MockDiscoveryInterfaceServerGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceServerGroupsCall) Do(f func() (*v1.APIGroupList, error)) *MockDiscoveryInterfaceServerGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceServerGroupsCall) DoAndReturn(f func() (*v1.APIGroupList, error)) *MockDiscoveryInterfaceServerGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerGroupsAndResources mocks base method.
func (m *MockDiscoveryInterface) ServerGroupsAndResources() ([]*v1.APIGroup, []*v1.APIResourceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGroupsAndResources")
	ret0, _ := ret[0].([]*v1.APIGroup)
	ret1, _ := ret[1].([]*v1.APIResourceList)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServerGroupsAndResources indicates an expected call of ServerGroupsAndResources.
func (mr *MockDiscoveryInterfaceMockRecorder) ServerGroupsAndResources() *MockDiscoveryInterfaceServerGroupsAndResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGroupsAndResources", reflect.TypeOf((*MockDiscoveryInterface)(nil).ServerGroupsAndResources))
	return &MockDiscoveryInterfaceServerGroupsAndResourcesCall{Call: call}
}

// MockDiscoveryInterfaceServerGroupsAndResourcesCall wrap *gomock.Call
type MockDiscoveryInterfaceServerGroupsAndResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceServerGroupsAndResourcesCall) Return(arg0 []*v1.APIGroup, arg1 []*v1.APIResourceList, arg2 error) *MockDiscoveryInterfaceServerGroupsAndResourcesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceServerGroupsAndResourcesCall) Do(f func() ([]*v1.APIGroup, []*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerGroupsAndResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceServerGroupsAndResourcesCall) DoAndReturn(f func() ([]*v1.APIGroup, []*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerGroupsAndResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerPreferredNamespacedResources mocks base method.
func (m *MockDiscoveryInterface) ServerPreferredNamespacedResources() ([]*v1.APIResourceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerPreferredNamespacedResources")
	ret0, _ := ret[0].([]*v1.APIResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerPreferredNamespacedResources indicates an expected call of ServerPreferredNamespacedResources.
func (mr *MockDiscoveryInterfaceMockRecorder) ServerPreferredNamespacedResources() *MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPreferredNamespacedResources", reflect.TypeOf((*MockDiscoveryInterface)(nil).ServerPreferredNamespacedResources))
	return &MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall{Call: call}
}

// MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall wrap *gomock.Call
type MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall) Return(arg0 []*v1.APIResourceList, arg1 error) *MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall) Do(f func() ([]*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall) DoAndReturn(f func() ([]*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerPreferredNamespacedResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerPreferredResources mocks base method.
func (m *MockDiscoveryInterface) ServerPreferredResources() ([]*v1.APIResourceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerPreferredResources")
	ret0, _ := ret[0].([]*v1.APIResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerPreferredResources indicates an expected call of ServerPreferredResources.
func (mr *MockDiscoveryInterfaceMockRecorder) ServerPreferredResources() *MockDiscoveryInterfaceServerPreferredResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPreferredResources", reflect.TypeOf((*MockDiscoveryInterface)(nil).ServerPreferredResources))
	return &MockDiscoveryInterfaceServerPreferredResourcesCall{Call: call}
}

// MockDiscoveryInterfaceServerPreferredResourcesCall wrap *gomock.Call
type MockDiscoveryInterfaceServerPreferredResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceServerPreferredResourcesCall) Return(arg0 []*v1.APIResourceList, arg1 error) *MockDiscoveryInterfaceServerPreferredResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceServerPreferredResourcesCall) Do(f func() ([]*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerPreferredResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceServerPreferredResourcesCall) DoAndReturn(f func() ([]*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerPreferredResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerResourcesForGroupVersion mocks base method.
func (m *MockDiscoveryInterface) ServerResourcesForGroupVersion(arg0 string) (*v1.APIResourceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerResourcesForGroupVersion", arg0)
	ret0, _ := ret[0].(*v1.APIResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerResourcesForGroupVersion indicates an expected call of ServerResourcesForGroupVersion.
func (mr *MockDiscoveryInterfaceMockRecorder) ServerResourcesForGroupVersion(arg0 any) *MockDiscoveryInterfaceServerResourcesForGroupVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerResourcesForGroupVersion", reflect.TypeOf((*MockDiscoveryInterface)(nil).ServerResourcesForGroupVersion), arg0)
	return &MockDiscoveryInterfaceServerResourcesForGroupVersionCall{Call: call}
}

// MockDiscoveryInterfaceServerResourcesForGroupVersionCall wrap *gomock.Call
type MockDiscoveryInterfaceServerResourcesForGroupVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceServerResourcesForGroupVersionCall) Return(arg0 *v1.APIResourceList, arg1 error) *MockDiscoveryInterfaceServerResourcesForGroupVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceServerResourcesForGroupVersionCall) Do(f func(string) (*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerResourcesForGroupVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceServerResourcesForGroupVersionCall) DoAndReturn(f func(string) (*v1.APIResourceList, error)) *MockDiscoveryInterfaceServerResourcesForGroupVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerVersion mocks base method.
func (m *MockDiscoveryInterface) ServerVersion() (*version.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(*version.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockDiscoveryInterfaceMockRecorder) ServerVersion() *MockDiscoveryInterfaceServerVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockDiscoveryInterface)(nil).ServerVersion))
	return &MockDiscoveryInterfaceServerVersionCall{Call: call}
}

// MockDiscoveryInterfaceServerVersionCall wrap *gomock.Call
type MockDiscoveryInterfaceServerVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceServerVersionCall) Return(arg0 *version.Info, arg1 error) *MockDiscoveryInterfaceServerVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceServerVersionCall) Do(f func() (*version.Info, error)) *MockDiscoveryInterfaceServerVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceServerVersionCall) DoAndReturn(f func() (*version.Info, error)) *MockDiscoveryInterfaceServerVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithLegacy mocks base method.
func (m *MockDiscoveryInterface) WithLegacy() discovery.DiscoveryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLegacy")
	ret0, _ := ret[0].(discovery.DiscoveryInterface)
	return ret0
}

// WithLegacy indicates an expected call of WithLegacy.
func (mr *MockDiscoveryInterfaceMockRecorder) WithLegacy() *MockDiscoveryInterfaceWithLegacyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLegacy", reflect.TypeOf((*MockDiscoveryInterface)(nil).WithLegacy))
	return &MockDiscoveryInterfaceWithLegacyCall{Call: call}
}

// MockDiscoveryInterfaceWithLegacyCall wrap *gomock.Call
type MockDiscoveryInterfaceWithLegacyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiscoveryInterfaceWithLegacyCall) Return(arg0 discovery.DiscoveryInterface) *MockDiscoveryInterfaceWithLegacyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiscoveryInterfaceWithLegacyCall) Do(f func() discovery.DiscoveryInterface) *MockDiscoveryInterfaceWithLegacyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiscoveryInterfaceWithLegacyCall) DoAndReturn(f func() discovery.DiscoveryInterface) *MockDiscoveryInterfaceWithLegacyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
