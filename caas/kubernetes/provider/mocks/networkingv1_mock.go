// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/networking/v1 (interfaces: NetworkingV1Interface,IngressInterface,IngressClassInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/networkingv1_mock.go -mock_names=IngressInterface=MockIngressV1Interface k8s.io/client-go/kubernetes/typed/networking/v1 NetworkingV1Interface,IngressInterface,IngressClassInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/networking/v1"
	v12 "k8s.io/client-go/kubernetes/typed/networking/v1"
	rest "k8s.io/client-go/rest"
)

// MockNetworkingV1Interface is a mock of NetworkingV1Interface interface.
type MockNetworkingV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingV1InterfaceMockRecorder
}

// MockNetworkingV1InterfaceMockRecorder is the mock recorder for MockNetworkingV1Interface.
type MockNetworkingV1InterfaceMockRecorder struct {
	mock *MockNetworkingV1Interface
}

// NewMockNetworkingV1Interface creates a new mock instance.
func NewMockNetworkingV1Interface(ctrl *gomock.Controller) *MockNetworkingV1Interface {
	mock := &MockNetworkingV1Interface{ctrl: ctrl}
	mock.recorder = &MockNetworkingV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingV1Interface) EXPECT() *MockNetworkingV1InterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingV1Interface) ISGOMOCK() struct{} {
	return struct{}{}
}

// IngressClasses mocks base method.
func (m *MockNetworkingV1Interface) IngressClasses() v12.IngressClassInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngressClasses")
	ret0, _ := ret[0].(v12.IngressClassInterface)
	return ret0
}

// IngressClasses indicates an expected call of IngressClasses.
func (mr *MockNetworkingV1InterfaceMockRecorder) IngressClasses() *MockNetworkingV1InterfaceIngressClassesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngressClasses", reflect.TypeOf((*MockNetworkingV1Interface)(nil).IngressClasses))
	return &MockNetworkingV1InterfaceIngressClassesCall{Call: call}
}

// MockNetworkingV1InterfaceIngressClassesCall wrap *gomock.Call
type MockNetworkingV1InterfaceIngressClassesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingV1InterfaceIngressClassesCall) Return(arg0 v12.IngressClassInterface) *MockNetworkingV1InterfaceIngressClassesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingV1InterfaceIngressClassesCall) Do(f func() v12.IngressClassInterface) *MockNetworkingV1InterfaceIngressClassesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingV1InterfaceIngressClassesCall) DoAndReturn(f func() v12.IngressClassInterface) *MockNetworkingV1InterfaceIngressClassesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ingresses mocks base method.
func (m *MockNetworkingV1Interface) Ingresses(arg0 string) v12.IngressInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingresses", arg0)
	ret0, _ := ret[0].(v12.IngressInterface)
	return ret0
}

// Ingresses indicates an expected call of Ingresses.
func (mr *MockNetworkingV1InterfaceMockRecorder) Ingresses(arg0 any) *MockNetworkingV1InterfaceIngressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingresses", reflect.TypeOf((*MockNetworkingV1Interface)(nil).Ingresses), arg0)
	return &MockNetworkingV1InterfaceIngressesCall{Call: call}
}

// MockNetworkingV1InterfaceIngressesCall wrap *gomock.Call
type MockNetworkingV1InterfaceIngressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingV1InterfaceIngressesCall) Return(arg0 v12.IngressInterface) *MockNetworkingV1InterfaceIngressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingV1InterfaceIngressesCall) Do(f func(string) v12.IngressInterface) *MockNetworkingV1InterfaceIngressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingV1InterfaceIngressesCall) DoAndReturn(f func(string) v12.IngressInterface) *MockNetworkingV1InterfaceIngressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NetworkPolicies mocks base method.
func (m *MockNetworkingV1Interface) NetworkPolicies(arg0 string) v12.NetworkPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkPolicies", arg0)
	ret0, _ := ret[0].(v12.NetworkPolicyInterface)
	return ret0
}

// NetworkPolicies indicates an expected call of NetworkPolicies.
func (mr *MockNetworkingV1InterfaceMockRecorder) NetworkPolicies(arg0 any) *MockNetworkingV1InterfaceNetworkPoliciesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkPolicies", reflect.TypeOf((*MockNetworkingV1Interface)(nil).NetworkPolicies), arg0)
	return &MockNetworkingV1InterfaceNetworkPoliciesCall{Call: call}
}

// MockNetworkingV1InterfaceNetworkPoliciesCall wrap *gomock.Call
type MockNetworkingV1InterfaceNetworkPoliciesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingV1InterfaceNetworkPoliciesCall) Return(arg0 v12.NetworkPolicyInterface) *MockNetworkingV1InterfaceNetworkPoliciesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingV1InterfaceNetworkPoliciesCall) Do(f func(string) v12.NetworkPolicyInterface) *MockNetworkingV1InterfaceNetworkPoliciesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingV1InterfaceNetworkPoliciesCall) DoAndReturn(f func(string) v12.NetworkPolicyInterface) *MockNetworkingV1InterfaceNetworkPoliciesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RESTClient mocks base method.
func (m *MockNetworkingV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockNetworkingV1InterfaceMockRecorder) RESTClient() *MockNetworkingV1InterfaceRESTClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockNetworkingV1Interface)(nil).RESTClient))
	return &MockNetworkingV1InterfaceRESTClientCall{Call: call}
}

// MockNetworkingV1InterfaceRESTClientCall wrap *gomock.Call
type MockNetworkingV1InterfaceRESTClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingV1InterfaceRESTClientCall) Return(arg0 rest.Interface) *MockNetworkingV1InterfaceRESTClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingV1InterfaceRESTClientCall) Do(f func() rest.Interface) *MockNetworkingV1InterfaceRESTClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingV1InterfaceRESTClientCall) DoAndReturn(f func() rest.Interface) *MockNetworkingV1InterfaceRESTClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockIngressV1Interface is a mock of IngressInterface interface.
type MockIngressV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockIngressV1InterfaceMockRecorder
}

// MockIngressV1InterfaceMockRecorder is the mock recorder for MockIngressV1Interface.
type MockIngressV1InterfaceMockRecorder struct {
	mock *MockIngressV1Interface
}

// NewMockIngressV1Interface creates a new mock instance.
func NewMockIngressV1Interface(ctrl *gomock.Controller) *MockIngressV1Interface {
	mock := &MockIngressV1Interface{ctrl: ctrl}
	mock.recorder = &MockIngressV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngressV1Interface) EXPECT() *MockIngressV1InterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockIngressV1Interface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockIngressV1Interface) Apply(arg0 context.Context, arg1 *v11.IngressApplyConfiguration, arg2 v10.ApplyOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockIngressV1InterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockIngressV1InterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockIngressV1Interface)(nil).Apply), arg0, arg1, arg2)
	return &MockIngressV1InterfaceApplyCall{Call: call}
}

// MockIngressV1InterfaceApplyCall wrap *gomock.Call
type MockIngressV1InterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceApplyCall) Return(arg0 *v1.Ingress, arg1 error) *MockIngressV1InterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceApplyCall) Do(f func(context.Context, *v11.IngressApplyConfiguration, v10.ApplyOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.IngressApplyConfiguration, v10.ApplyOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockIngressV1Interface) ApplyStatus(arg0 context.Context, arg1 *v11.IngressApplyConfiguration, arg2 v10.ApplyOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockIngressV1InterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 any) *MockIngressV1InterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockIngressV1Interface)(nil).ApplyStatus), arg0, arg1, arg2)
	return &MockIngressV1InterfaceApplyStatusCall{Call: call}
}

// MockIngressV1InterfaceApplyStatusCall wrap *gomock.Call
type MockIngressV1InterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceApplyStatusCall) Return(arg0 *v1.Ingress, arg1 error) *MockIngressV1InterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceApplyStatusCall) Do(f func(context.Context, *v11.IngressApplyConfiguration, v10.ApplyOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v11.IngressApplyConfiguration, v10.ApplyOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockIngressV1Interface) Create(arg0 context.Context, arg1 *v1.Ingress, arg2 v10.CreateOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIngressV1InterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockIngressV1InterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngressV1Interface)(nil).Create), arg0, arg1, arg2)
	return &MockIngressV1InterfaceCreateCall{Call: call}
}

// MockIngressV1InterfaceCreateCall wrap *gomock.Call
type MockIngressV1InterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceCreateCall) Return(arg0 *v1.Ingress, arg1 error) *MockIngressV1InterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceCreateCall) Do(f func(context.Context, *v1.Ingress, v10.CreateOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Ingress, v10.CreateOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockIngressV1Interface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIngressV1InterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockIngressV1InterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIngressV1Interface)(nil).Delete), arg0, arg1, arg2)
	return &MockIngressV1InterfaceDeleteCall{Call: call}
}

// MockIngressV1InterfaceDeleteCall wrap *gomock.Call
type MockIngressV1InterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceDeleteCall) Return(arg0 error) *MockIngressV1InterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockIngressV1InterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockIngressV1InterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockIngressV1Interface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockIngressV1InterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockIngressV1InterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockIngressV1Interface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockIngressV1InterfaceDeleteCollectionCall{Call: call}
}

// MockIngressV1InterfaceDeleteCollectionCall wrap *gomock.Call
type MockIngressV1InterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceDeleteCollectionCall) Return(arg0 error) *MockIngressV1InterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockIngressV1InterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockIngressV1InterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockIngressV1Interface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIngressV1InterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockIngressV1InterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIngressV1Interface)(nil).Get), arg0, arg1, arg2)
	return &MockIngressV1InterfaceGetCall{Call: call}
}

// MockIngressV1InterfaceGetCall wrap *gomock.Call
type MockIngressV1InterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceGetCall) Return(arg0 *v1.Ingress, arg1 error) *MockIngressV1InterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIngressV1Interface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.IngressList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.IngressList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngressV1InterfaceMockRecorder) List(arg0, arg1 any) *MockIngressV1InterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngressV1Interface)(nil).List), arg0, arg1)
	return &MockIngressV1InterfaceListCall{Call: call}
}

// MockIngressV1InterfaceListCall wrap *gomock.Call
type MockIngressV1InterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceListCall) Return(arg0 *v1.IngressList, arg1 error) *MockIngressV1InterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.IngressList, error)) *MockIngressV1InterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.IngressList, error)) *MockIngressV1InterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockIngressV1Interface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockIngressV1InterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockIngressV1InterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockIngressV1Interface)(nil).Patch), varargs...)
	return &MockIngressV1InterfacePatchCall{Call: call}
}

// MockIngressV1InterfacePatchCall wrap *gomock.Call
type MockIngressV1InterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfacePatchCall) Return(arg0 *v1.Ingress, arg1 error) *MockIngressV1InterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Ingress, error)) *MockIngressV1InterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Ingress, error)) *MockIngressV1InterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockIngressV1Interface) Update(arg0 context.Context, arg1 *v1.Ingress, arg2 v10.UpdateOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIngressV1InterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockIngressV1InterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngressV1Interface)(nil).Update), arg0, arg1, arg2)
	return &MockIngressV1InterfaceUpdateCall{Call: call}
}

// MockIngressV1InterfaceUpdateCall wrap *gomock.Call
type MockIngressV1InterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceUpdateCall) Return(arg0 *v1.Ingress, arg1 error) *MockIngressV1InterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceUpdateCall) Do(f func(context.Context, *v1.Ingress, v10.UpdateOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Ingress, v10.UpdateOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockIngressV1Interface) UpdateStatus(arg0 context.Context, arg1 *v1.Ingress, arg2 v10.UpdateOptions) (*v1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIngressV1InterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockIngressV1InterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIngressV1Interface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockIngressV1InterfaceUpdateStatusCall{Call: call}
}

// MockIngressV1InterfaceUpdateStatusCall wrap *gomock.Call
type MockIngressV1InterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceUpdateStatusCall) Return(arg0 *v1.Ingress, arg1 error) *MockIngressV1InterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceUpdateStatusCall) Do(f func(context.Context, *v1.Ingress, v10.UpdateOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.Ingress, v10.UpdateOptions) (*v1.Ingress, error)) *MockIngressV1InterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockIngressV1Interface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockIngressV1InterfaceMockRecorder) Watch(arg0, arg1 any) *MockIngressV1InterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockIngressV1Interface)(nil).Watch), arg0, arg1)
	return &MockIngressV1InterfaceWatchCall{Call: call}
}

// MockIngressV1InterfaceWatchCall wrap *gomock.Call
type MockIngressV1InterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressV1InterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockIngressV1InterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressV1InterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockIngressV1InterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressV1InterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockIngressV1InterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockIngressClassInterface is a mock of IngressClassInterface interface.
type MockIngressClassInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIngressClassInterfaceMockRecorder
}

// MockIngressClassInterfaceMockRecorder is the mock recorder for MockIngressClassInterface.
type MockIngressClassInterfaceMockRecorder struct {
	mock *MockIngressClassInterface
}

// NewMockIngressClassInterface creates a new mock instance.
func NewMockIngressClassInterface(ctrl *gomock.Controller) *MockIngressClassInterface {
	mock := &MockIngressClassInterface{ctrl: ctrl}
	mock.recorder = &MockIngressClassInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngressClassInterface) EXPECT() *MockIngressClassInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockIngressClassInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockIngressClassInterface) Apply(arg0 context.Context, arg1 *v11.IngressClassApplyConfiguration, arg2 v10.ApplyOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockIngressClassInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockIngressClassInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockIngressClassInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockIngressClassInterfaceApplyCall{Call: call}
}

// MockIngressClassInterfaceApplyCall wrap *gomock.Call
type MockIngressClassInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceApplyCall) Return(arg0 *v1.IngressClass, arg1 error) *MockIngressClassInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceApplyCall) Do(f func(context.Context, *v11.IngressClassApplyConfiguration, v10.ApplyOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.IngressClassApplyConfiguration, v10.ApplyOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockIngressClassInterface) Create(arg0 context.Context, arg1 *v1.IngressClass, arg2 v10.CreateOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIngressClassInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockIngressClassInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngressClassInterface)(nil).Create), arg0, arg1, arg2)
	return &MockIngressClassInterfaceCreateCall{Call: call}
}

// MockIngressClassInterfaceCreateCall wrap *gomock.Call
type MockIngressClassInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceCreateCall) Return(arg0 *v1.IngressClass, arg1 error) *MockIngressClassInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceCreateCall) Do(f func(context.Context, *v1.IngressClass, v10.CreateOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.IngressClass, v10.CreateOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockIngressClassInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIngressClassInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockIngressClassInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIngressClassInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockIngressClassInterfaceDeleteCall{Call: call}
}

// MockIngressClassInterfaceDeleteCall wrap *gomock.Call
type MockIngressClassInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceDeleteCall) Return(arg0 error) *MockIngressClassInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockIngressClassInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockIngressClassInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockIngressClassInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockIngressClassInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockIngressClassInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockIngressClassInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockIngressClassInterfaceDeleteCollectionCall{Call: call}
}

// MockIngressClassInterfaceDeleteCollectionCall wrap *gomock.Call
type MockIngressClassInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceDeleteCollectionCall) Return(arg0 error) *MockIngressClassInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockIngressClassInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockIngressClassInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockIngressClassInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIngressClassInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockIngressClassInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIngressClassInterface)(nil).Get), arg0, arg1, arg2)
	return &MockIngressClassInterfaceGetCall{Call: call}
}

// MockIngressClassInterfaceGetCall wrap *gomock.Call
type MockIngressClassInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceGetCall) Return(arg0 *v1.IngressClass, arg1 error) *MockIngressClassInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIngressClassInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.IngressClassList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.IngressClassList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngressClassInterfaceMockRecorder) List(arg0, arg1 any) *MockIngressClassInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngressClassInterface)(nil).List), arg0, arg1)
	return &MockIngressClassInterfaceListCall{Call: call}
}

// MockIngressClassInterfaceListCall wrap *gomock.Call
type MockIngressClassInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceListCall) Return(arg0 *v1.IngressClassList, arg1 error) *MockIngressClassInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.IngressClassList, error)) *MockIngressClassInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.IngressClassList, error)) *MockIngressClassInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockIngressClassInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockIngressClassInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockIngressClassInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockIngressClassInterface)(nil).Patch), varargs...)
	return &MockIngressClassInterfacePatchCall{Call: call}
}

// MockIngressClassInterfacePatchCall wrap *gomock.Call
type MockIngressClassInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfacePatchCall) Return(arg0 *v1.IngressClass, arg1 error) *MockIngressClassInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.IngressClass, error)) *MockIngressClassInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.IngressClass, error)) *MockIngressClassInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockIngressClassInterface) Update(arg0 context.Context, arg1 *v1.IngressClass, arg2 v10.UpdateOptions) (*v1.IngressClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.IngressClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIngressClassInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockIngressClassInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngressClassInterface)(nil).Update), arg0, arg1, arg2)
	return &MockIngressClassInterfaceUpdateCall{Call: call}
}

// MockIngressClassInterfaceUpdateCall wrap *gomock.Call
type MockIngressClassInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceUpdateCall) Return(arg0 *v1.IngressClass, arg1 error) *MockIngressClassInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceUpdateCall) Do(f func(context.Context, *v1.IngressClass, v10.UpdateOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.IngressClass, v10.UpdateOptions) (*v1.IngressClass, error)) *MockIngressClassInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockIngressClassInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockIngressClassInterfaceMockRecorder) Watch(arg0, arg1 any) *MockIngressClassInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockIngressClassInterface)(nil).Watch), arg0, arg1)
	return &MockIngressClassInterfaceWatchCall{Call: call}
}

// MockIngressClassInterfaceWatchCall wrap *gomock.Call
type MockIngressClassInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIngressClassInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockIngressClassInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIngressClassInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockIngressClassInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIngressClassInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockIngressClassInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
