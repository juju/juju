// Code generated by MockGen. DO NOT EDIT.
// Source: context (interfaces: Context)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/context_mock.go context Context
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// Deadline mocks base method.
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextMockRecorder) Deadline() *MockContextDeadlineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
	return &MockContextDeadlineCall{Call: call}
}

// MockContextDeadlineCall wrap *gomock.Call
type MockContextDeadlineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDeadlineCall) Return(arg0 time.Time, arg1 bool) *MockContextDeadlineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDeadlineCall) Do(f func() (time.Time, bool)) *MockContextDeadlineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDeadlineCall) DoAndReturn(f func() (time.Time, bool)) *MockContextDeadlineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextMockRecorder) Done() *MockContextDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
	return &MockContextDoneCall{Call: call}
}

// MockContextDoneCall wrap *gomock.Call
type MockContextDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextDoneCall) Return(arg0 <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextDoneCall) Do(f func() <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextDoneCall) DoAndReturn(f func() <-chan struct{}) *MockContextDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Err mocks base method.
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err() *MockContextErrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
	return &MockContextErrCall{Call: call}
}

// MockContextErrCall wrap *gomock.Call
type MockContextErrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextErrCall) Return(arg0 error) *MockContextErrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextErrCall) Do(f func() error) *MockContextErrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextErrCall) DoAndReturn(f func() error) *MockContextErrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockContext) Value(arg0 any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextMockRecorder) Value(arg0 any) *MockContextValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), arg0)
	return &MockContextValueCall{Call: call}
}

// MockContextValueCall wrap *gomock.Call
type MockContextValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextValueCall) Return(arg0 any) *MockContextValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextValueCall) Do(f func(any) any) *MockContextValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextValueCall) DoAndReturn(f func(any) any) *MockContextValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
