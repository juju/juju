// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/core/v1 (interfaces: ServiceAccountInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/serviceaccount_mock.go k8s.io/client-go/kubernetes/typed/core/v1 ServiceAccountInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/authentication/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v12 "k8s.io/client-go/applyconfigurations/core/v1"
)

// MockServiceAccountInterface is a mock of ServiceAccountInterface interface.
type MockServiceAccountInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountInterfaceMockRecorder
}

// MockServiceAccountInterfaceMockRecorder is the mock recorder for MockServiceAccountInterface.
type MockServiceAccountInterfaceMockRecorder struct {
	mock *MockServiceAccountInterface
}

// NewMockServiceAccountInterface creates a new mock instance.
func NewMockServiceAccountInterface(ctrl *gomock.Controller) *MockServiceAccountInterface {
	mock := &MockServiceAccountInterface{ctrl: ctrl}
	mock.recorder = &MockServiceAccountInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountInterface) EXPECT() *MockServiceAccountInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockServiceAccountInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockServiceAccountInterface) Apply(arg0 context.Context, arg1 *v12.ServiceAccountApplyConfiguration, arg2 v11.ApplyOptions) (*v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockServiceAccountInterfaceMockRecorder) Apply(arg0, arg1, arg2 any) *MockServiceAccountInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockServiceAccountInterface)(nil).Apply), arg0, arg1, arg2)
	return &MockServiceAccountInterfaceApplyCall{Call: call}
}

// MockServiceAccountInterfaceApplyCall wrap *gomock.Call
type MockServiceAccountInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceApplyCall) Return(arg0 *v10.ServiceAccount, arg1 error) *MockServiceAccountInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceApplyCall) Do(f func(context.Context, *v12.ServiceAccountApplyConfiguration, v11.ApplyOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceApplyCall) DoAndReturn(f func(context.Context, *v12.ServiceAccountApplyConfiguration, v11.ApplyOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockServiceAccountInterface) Create(arg0 context.Context, arg1 *v10.ServiceAccount, arg2 v11.CreateOptions) (*v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceAccountInterfaceMockRecorder) Create(arg0, arg1, arg2 any) *MockServiceAccountInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceAccountInterface)(nil).Create), arg0, arg1, arg2)
	return &MockServiceAccountInterfaceCreateCall{Call: call}
}

// MockServiceAccountInterfaceCreateCall wrap *gomock.Call
type MockServiceAccountInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceCreateCall) Return(arg0 *v10.ServiceAccount, arg1 error) *MockServiceAccountInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceCreateCall) Do(f func(context.Context, *v10.ServiceAccount, v11.CreateOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceCreateCall) DoAndReturn(f func(context.Context, *v10.ServiceAccount, v11.CreateOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateToken mocks base method.
func (m *MockServiceAccountInterface) CreateToken(arg0 context.Context, arg1 string, arg2 *v1.TokenRequest, arg3 v11.CreateOptions) (*v1.TokenRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.TokenRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockServiceAccountInterfaceMockRecorder) CreateToken(arg0, arg1, arg2, arg3 any) *MockServiceAccountInterfaceCreateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockServiceAccountInterface)(nil).CreateToken), arg0, arg1, arg2, arg3)
	return &MockServiceAccountInterfaceCreateTokenCall{Call: call}
}

// MockServiceAccountInterfaceCreateTokenCall wrap *gomock.Call
type MockServiceAccountInterfaceCreateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceCreateTokenCall) Return(arg0 *v1.TokenRequest, arg1 error) *MockServiceAccountInterfaceCreateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceCreateTokenCall) Do(f func(context.Context, string, *v1.TokenRequest, v11.CreateOptions) (*v1.TokenRequest, error)) *MockServiceAccountInterfaceCreateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceCreateTokenCall) DoAndReturn(f func(context.Context, string, *v1.TokenRequest, v11.CreateOptions) (*v1.TokenRequest, error)) *MockServiceAccountInterfaceCreateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockServiceAccountInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceAccountInterfaceMockRecorder) Delete(arg0, arg1, arg2 any) *MockServiceAccountInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceAccountInterface)(nil).Delete), arg0, arg1, arg2)
	return &MockServiceAccountInterfaceDeleteCall{Call: call}
}

// MockServiceAccountInterfaceDeleteCall wrap *gomock.Call
type MockServiceAccountInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceDeleteCall) Return(arg0 error) *MockServiceAccountInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceDeleteCall) Do(f func(context.Context, string, v11.DeleteOptions) error) *MockServiceAccountInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v11.DeleteOptions) error) *MockServiceAccountInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockServiceAccountInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockServiceAccountInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockServiceAccountInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockServiceAccountInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockServiceAccountInterfaceDeleteCollectionCall{Call: call}
}

// MockServiceAccountInterfaceDeleteCollectionCall wrap *gomock.Call
type MockServiceAccountInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceDeleteCollectionCall) Return(arg0 error) *MockServiceAccountInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceDeleteCollectionCall) Do(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockServiceAccountInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v11.DeleteOptions, v11.ListOptions) error) *MockServiceAccountInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockServiceAccountInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceAccountInterfaceMockRecorder) Get(arg0, arg1, arg2 any) *MockServiceAccountInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceAccountInterface)(nil).Get), arg0, arg1, arg2)
	return &MockServiceAccountInterfaceGetCall{Call: call}
}

// MockServiceAccountInterfaceGetCall wrap *gomock.Call
type MockServiceAccountInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceGetCall) Return(arg0 *v10.ServiceAccount, arg1 error) *MockServiceAccountInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceGetCall) Do(f func(context.Context, string, v11.GetOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceGetCall) DoAndReturn(f func(context.Context, string, v11.GetOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockServiceAccountInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v10.ServiceAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v10.ServiceAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceAccountInterfaceMockRecorder) List(arg0, arg1 any) *MockServiceAccountInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceAccountInterface)(nil).List), arg0, arg1)
	return &MockServiceAccountInterfaceListCall{Call: call}
}

// MockServiceAccountInterfaceListCall wrap *gomock.Call
type MockServiceAccountInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceListCall) Return(arg0 *v10.ServiceAccountList, arg1 error) *MockServiceAccountInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceListCall) Do(f func(context.Context, v11.ListOptions) (*v10.ServiceAccountList, error)) *MockServiceAccountInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceListCall) DoAndReturn(f func(context.Context, v11.ListOptions) (*v10.ServiceAccountList, error)) *MockServiceAccountInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockServiceAccountInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockServiceAccountInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockServiceAccountInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockServiceAccountInterface)(nil).Patch), varargs...)
	return &MockServiceAccountInterfacePatchCall{Call: call}
}

// MockServiceAccountInterfacePatchCall wrap *gomock.Call
type MockServiceAccountInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfacePatchCall) Return(arg0 *v10.ServiceAccount, arg1 error) *MockServiceAccountInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v10.ServiceAccount, error)) *MockServiceAccountInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v11.PatchOptions, ...string) (*v10.ServiceAccount, error)) *MockServiceAccountInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockServiceAccountInterface) Update(arg0 context.Context, arg1 *v10.ServiceAccount, arg2 v11.UpdateOptions) (*v10.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceAccountInterfaceMockRecorder) Update(arg0, arg1, arg2 any) *MockServiceAccountInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceAccountInterface)(nil).Update), arg0, arg1, arg2)
	return &MockServiceAccountInterfaceUpdateCall{Call: call}
}

// MockServiceAccountInterfaceUpdateCall wrap *gomock.Call
type MockServiceAccountInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceUpdateCall) Return(arg0 *v10.ServiceAccount, arg1 error) *MockServiceAccountInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceUpdateCall) Do(f func(context.Context, *v10.ServiceAccount, v11.UpdateOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v10.ServiceAccount, v11.UpdateOptions) (*v10.ServiceAccount, error)) *MockServiceAccountInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockServiceAccountInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockServiceAccountInterfaceMockRecorder) Watch(arg0, arg1 any) *MockServiceAccountInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockServiceAccountInterface)(nil).Watch), arg0, arg1)
	return &MockServiceAccountInterfaceWatchCall{Call: call}
}

// MockServiceAccountInterfaceWatchCall wrap *gomock.Call
type MockServiceAccountInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockServiceAccountInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountInterfaceWatchCall) Do(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockServiceAccountInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountInterfaceWatchCall) DoAndReturn(f func(context.Context, v11.ListOptions) (watch.Interface, error)) *MockServiceAccountInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
