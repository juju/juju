// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/dynamic (interfaces: Interface,ResourceInterface,NamespaceableResourceInterface)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/dynamic_mock.go -mock_names=Interface=MockDynamicInterface k8s.io/client-go/dynamic Interface,ResourceInterface,NamespaceableResourceInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	dynamic "k8s.io/client-go/dynamic"
)

// MockDynamicInterface is a mock of Interface interface.
type MockDynamicInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicInterfaceMockRecorder
}

// MockDynamicInterfaceMockRecorder is the mock recorder for MockDynamicInterface.
type MockDynamicInterfaceMockRecorder struct {
	mock *MockDynamicInterface
}

// NewMockDynamicInterface creates a new mock instance.
func NewMockDynamicInterface(ctrl *gomock.Controller) *MockDynamicInterface {
	mock := &MockDynamicInterface{ctrl: ctrl}
	mock.recorder = &MockDynamicInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicInterface) EXPECT() *MockDynamicInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDynamicInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Resource mocks base method.
func (m *MockDynamicInterface) Resource(arg0 schema.GroupVersionResource) dynamic.NamespaceableResourceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource", arg0)
	ret0, _ := ret[0].(dynamic.NamespaceableResourceInterface)
	return ret0
}

// Resource indicates an expected call of Resource.
func (mr *MockDynamicInterfaceMockRecorder) Resource(arg0 any) *MockDynamicInterfaceResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockDynamicInterface)(nil).Resource), arg0)
	return &MockDynamicInterfaceResourceCall{Call: call}
}

// MockDynamicInterfaceResourceCall wrap *gomock.Call
type MockDynamicInterfaceResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDynamicInterfaceResourceCall) Return(arg0 dynamic.NamespaceableResourceInterface) *MockDynamicInterfaceResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDynamicInterfaceResourceCall) Do(f func(schema.GroupVersionResource) dynamic.NamespaceableResourceInterface) *MockDynamicInterfaceResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDynamicInterfaceResourceCall) DoAndReturn(f func(schema.GroupVersionResource) dynamic.NamespaceableResourceInterface) *MockDynamicInterfaceResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceInterface is a mock of ResourceInterface interface.
type MockResourceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResourceInterfaceMockRecorder
}

// MockResourceInterfaceMockRecorder is the mock recorder for MockResourceInterface.
type MockResourceInterfaceMockRecorder struct {
	mock *MockResourceInterface
}

// NewMockResourceInterface creates a new mock instance.
func NewMockResourceInterface(ctrl *gomock.Controller) *MockResourceInterface {
	mock := &MockResourceInterface{ctrl: ctrl}
	mock.recorder = &MockResourceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceInterface) EXPECT() *MockResourceInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockResourceInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *MockResourceInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockResourceInterface)(nil).Apply), varargs...)
	return &MockResourceInterfaceApplyCall{Call: call}
}

// MockResourceInterfaceApplyCall wrap *gomock.Call
type MockResourceInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceApplyCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockResourceInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceApplyCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceApplyCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *MockResourceInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockResourceInterface)(nil).ApplyStatus), arg0, arg1, arg2, arg3)
	return &MockResourceInterfaceApplyStatusCall{Call: call}
}

// MockResourceInterfaceApplyStatusCall wrap *gomock.Call
type MockResourceInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceApplyStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceApplyStatusCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *MockResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *MockResourceInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *MockResourceInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceInterface)(nil).Create), varargs...)
	return &MockResourceInterfaceCreateCall{Call: call}
}

// MockResourceInterfaceCreateCall wrap *gomock.Call
type MockResourceInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceCreateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockResourceInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceCreateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceCreateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *MockResourceInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResourceInterface)(nil).Delete), varargs...)
	return &MockResourceInterfaceDeleteCall{Call: call}
}

// MockResourceInterfaceDeleteCall wrap *gomock.Call
type MockResourceInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceDeleteCall) Return(arg0 error) *MockResourceInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceDeleteCall) Do(f func(context.Context, string, v1.DeleteOptions, ...string) error) *MockResourceInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v1.DeleteOptions, ...string) error) *MockResourceInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockResourceInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockResourceInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockResourceInterfaceDeleteCollectionCall{Call: call}
}

// MockResourceInterfaceDeleteCollectionCall wrap *gomock.Call
type MockResourceInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceDeleteCollectionCall) Return(arg0 error) *MockResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceDeleteCollectionCall) Do(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *MockResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *MockResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *MockResourceInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceInterface)(nil).Get), varargs...)
	return &MockResourceInterfaceGetCall{Call: call}
}

// MockResourceInterfaceGetCall wrap *gomock.Call
type MockResourceInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceGetCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockResourceInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceGetCall) Do(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceGetCall) DoAndReturn(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*unstructured.UnstructuredList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResourceInterfaceMockRecorder) List(arg0, arg1 any) *MockResourceInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceInterface)(nil).List), arg0, arg1)
	return &MockResourceInterfaceListCall{Call: call}
}

// MockResourceInterfaceListCall wrap *gomock.Call
type MockResourceInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceListCall) Return(arg0 *unstructured.UnstructuredList, arg1 error) *MockResourceInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceListCall) Do(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *MockResourceInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceListCall) DoAndReturn(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *MockResourceInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockResourceInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockResourceInterface)(nil).Patch), varargs...)
	return &MockResourceInterfacePatchCall{Call: call}
}

// MockResourceInterfacePatchCall wrap *gomock.Call
type MockResourceInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfacePatchCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockResourceInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *MockResourceInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResourceInterface)(nil).Update), varargs...)
	return &MockResourceInterfaceUpdateCall{Call: call}
}

// MockResourceInterfaceUpdateCall wrap *gomock.Call
type MockResourceInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceUpdateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockResourceInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceUpdateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceUpdateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *MockResourceInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockResourceInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockResourceInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockResourceInterfaceUpdateStatusCall{Call: call}
}

// MockResourceInterfaceUpdateStatusCall wrap *gomock.Call
type MockResourceInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceUpdateStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceUpdateStatusCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *MockResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *MockResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *MockResourceInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockResourceInterface)(nil).Watch), arg0, arg1)
	return &MockResourceInterfaceWatchCall{Call: call}
}

// MockResourceInterfaceWatchCall wrap *gomock.Call
type MockResourceInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockResourceInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceInterfaceWatchCall) Do(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *MockResourceInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceInterfaceWatchCall) DoAndReturn(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *MockResourceInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNamespaceableResourceInterface is a mock of NamespaceableResourceInterface interface.
type MockNamespaceableResourceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceableResourceInterfaceMockRecorder
}

// MockNamespaceableResourceInterfaceMockRecorder is the mock recorder for MockNamespaceableResourceInterface.
type MockNamespaceableResourceInterfaceMockRecorder struct {
	mock *MockNamespaceableResourceInterface
}

// NewMockNamespaceableResourceInterface creates a new mock instance.
func NewMockNamespaceableResourceInterface(ctrl *gomock.Controller) *MockNamespaceableResourceInterface {
	mock := &MockNamespaceableResourceInterface{ctrl: ctrl}
	mock.recorder = &MockNamespaceableResourceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceableResourceInterface) EXPECT() *MockNamespaceableResourceInterfaceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNamespaceableResourceInterface) ISGOMOCK() struct{} {
	return struct{}{}
}

// Apply mocks base method.
func (m *MockNamespaceableResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *MockNamespaceableResourceInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Apply), varargs...)
	return &MockNamespaceableResourceInterfaceApplyCall{Call: call}
}

// MockNamespaceableResourceInterfaceApplyCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceApplyCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockNamespaceableResourceInterfaceApplyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceApplyCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceApplyCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockNamespaceableResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *MockNamespaceableResourceInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).ApplyStatus), arg0, arg1, arg2, arg3)
	return &MockNamespaceableResourceInterfaceApplyStatusCall{Call: call}
}

// MockNamespaceableResourceInterfaceApplyStatusCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceApplyStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockNamespaceableResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceApplyStatusCall) Do(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockNamespaceableResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *MockNamespaceableResourceInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Create), varargs...)
	return &MockNamespaceableResourceInterfaceCreateCall{Call: call}
}

// MockNamespaceableResourceInterfaceCreateCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceCreateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockNamespaceableResourceInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceCreateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceCreateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockNamespaceableResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *MockNamespaceableResourceInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Delete), varargs...)
	return &MockNamespaceableResourceInterfaceDeleteCall{Call: call}
}

// MockNamespaceableResourceInterfaceDeleteCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceDeleteCall) Return(arg0 error) *MockNamespaceableResourceInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceDeleteCall) Do(f func(context.Context, string, v1.DeleteOptions, ...string) error) *MockNamespaceableResourceInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v1.DeleteOptions, ...string) error) *MockNamespaceableResourceInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockNamespaceableResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *MockNamespaceableResourceInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).DeleteCollection), arg0, arg1, arg2)
	return &MockNamespaceableResourceInterfaceDeleteCollectionCall{Call: call}
}

// MockNamespaceableResourceInterfaceDeleteCollectionCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceDeleteCollectionCall) Return(arg0 error) *MockNamespaceableResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceDeleteCollectionCall) Do(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *MockNamespaceableResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *MockNamespaceableResourceInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockNamespaceableResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *MockNamespaceableResourceInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Get), varargs...)
	return &MockNamespaceableResourceInterfaceGetCall{Call: call}
}

// MockNamespaceableResourceInterfaceGetCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceGetCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockNamespaceableResourceInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceGetCall) Do(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceGetCall) DoAndReturn(f func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockNamespaceableResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*unstructured.UnstructuredList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) List(arg0, arg1 any) *MockNamespaceableResourceInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).List), arg0, arg1)
	return &MockNamespaceableResourceInterfaceListCall{Call: call}
}

// MockNamespaceableResourceInterfaceListCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceListCall) Return(arg0 *unstructured.UnstructuredList, arg1 error) *MockNamespaceableResourceInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceListCall) Do(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *MockNamespaceableResourceInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceListCall) DoAndReturn(f func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *MockNamespaceableResourceInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespace mocks base method.
func (m *MockNamespaceableResourceInterface) Namespace(arg0 string) dynamic.ResourceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", arg0)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Namespace(arg0 any) *MockNamespaceableResourceInterfaceNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Namespace), arg0)
	return &MockNamespaceableResourceInterfaceNamespaceCall{Call: call}
}

// MockNamespaceableResourceInterfaceNamespaceCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceNamespaceCall) Return(arg0 dynamic.ResourceInterface) *MockNamespaceableResourceInterfaceNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceNamespaceCall) Do(f func(string) dynamic.ResourceInterface) *MockNamespaceableResourceInterfaceNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceNamespaceCall) DoAndReturn(f func(string) dynamic.ResourceInterface) *MockNamespaceableResourceInterfaceNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockNamespaceableResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockNamespaceableResourceInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Patch), varargs...)
	return &MockNamespaceableResourceInterfacePatchCall{Call: call}
}

// MockNamespaceableResourceInterfacePatchCall wrap *gomock.Call
type MockNamespaceableResourceInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfacePatchCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockNamespaceableResourceInterfacePatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockNamespaceableResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *MockNamespaceableResourceInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Update), varargs...)
	return &MockNamespaceableResourceInterfaceUpdateCall{Call: call}
}

// MockNamespaceableResourceInterfaceUpdateCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceUpdateCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockNamespaceableResourceInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceUpdateCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceUpdateCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockNamespaceableResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *MockNamespaceableResourceInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).UpdateStatus), arg0, arg1, arg2)
	return &MockNamespaceableResourceInterfaceUpdateStatusCall{Call: call}
}

// MockNamespaceableResourceInterfaceUpdateStatusCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceUpdateStatusCall) Return(arg0 *unstructured.Unstructured, arg1 error) *MockNamespaceableResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceUpdateStatusCall) Do(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *MockNamespaceableResourceInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockNamespaceableResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockNamespaceableResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *MockNamespaceableResourceInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNamespaceableResourceInterface)(nil).Watch), arg0, arg1)
	return &MockNamespaceableResourceInterfaceWatchCall{Call: call}
}

// MockNamespaceableResourceInterfaceWatchCall wrap *gomock.Call
type MockNamespaceableResourceInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespaceableResourceInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockNamespaceableResourceInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespaceableResourceInterfaceWatchCall) Do(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *MockNamespaceableResourceInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespaceableResourceInterfaceWatchCall) DoAndReturn(f func(context.Context, v1.ListOptions) (watch.Interface, error)) *MockNamespaceableResourceInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
