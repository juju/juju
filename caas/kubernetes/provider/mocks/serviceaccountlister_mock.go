// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/listers/core/v1 (interfaces: ServiceAccountLister,ServiceAccountNamespaceLister)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/serviceaccountlister_mock.go k8s.io/client-go/listers/core/v1 ServiceAccountLister,ServiceAccountNamespaceLister
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	v10 "k8s.io/client-go/listers/core/v1"
)

// MockServiceAccountLister is a mock of ServiceAccountLister interface.
type MockServiceAccountLister struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountListerMockRecorder
}

// MockServiceAccountListerMockRecorder is the mock recorder for MockServiceAccountLister.
type MockServiceAccountListerMockRecorder struct {
	mock *MockServiceAccountLister
}

// NewMockServiceAccountLister creates a new mock instance.
func NewMockServiceAccountLister(ctrl *gomock.Controller) *MockServiceAccountLister {
	mock := &MockServiceAccountLister{ctrl: ctrl}
	mock.recorder = &MockServiceAccountListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountLister) EXPECT() *MockServiceAccountListerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockServiceAccountLister) ISGOMOCK() struct{} {
	return struct{}{}
}

// List mocks base method.
func (m *MockServiceAccountLister) List(arg0 labels.Selector) ([]*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceAccountListerMockRecorder) List(arg0 any) *MockServiceAccountListerListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceAccountLister)(nil).List), arg0)
	return &MockServiceAccountListerListCall{Call: call}
}

// MockServiceAccountListerListCall wrap *gomock.Call
type MockServiceAccountListerListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountListerListCall) Return(arg0 []*v1.ServiceAccount, arg1 error) *MockServiceAccountListerListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountListerListCall) Do(f func(labels.Selector) ([]*v1.ServiceAccount, error)) *MockServiceAccountListerListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountListerListCall) DoAndReturn(f func(labels.Selector) ([]*v1.ServiceAccount, error)) *MockServiceAccountListerListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServiceAccounts mocks base method.
func (m *MockServiceAccountLister) ServiceAccounts(arg0 string) v10.ServiceAccountNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts", arg0)
	ret0, _ := ret[0].(v10.ServiceAccountNamespaceLister)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts.
func (mr *MockServiceAccountListerMockRecorder) ServiceAccounts(arg0 any) *MockServiceAccountListerServiceAccountsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockServiceAccountLister)(nil).ServiceAccounts), arg0)
	return &MockServiceAccountListerServiceAccountsCall{Call: call}
}

// MockServiceAccountListerServiceAccountsCall wrap *gomock.Call
type MockServiceAccountListerServiceAccountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountListerServiceAccountsCall) Return(arg0 v10.ServiceAccountNamespaceLister) *MockServiceAccountListerServiceAccountsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountListerServiceAccountsCall) Do(f func(string) v10.ServiceAccountNamespaceLister) *MockServiceAccountListerServiceAccountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountListerServiceAccountsCall) DoAndReturn(f func(string) v10.ServiceAccountNamespaceLister) *MockServiceAccountListerServiceAccountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServiceAccountNamespaceLister is a mock of ServiceAccountNamespaceLister interface.
type MockServiceAccountNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountNamespaceListerMockRecorder
}

// MockServiceAccountNamespaceListerMockRecorder is the mock recorder for MockServiceAccountNamespaceLister.
type MockServiceAccountNamespaceListerMockRecorder struct {
	mock *MockServiceAccountNamespaceLister
}

// NewMockServiceAccountNamespaceLister creates a new mock instance.
func NewMockServiceAccountNamespaceLister(ctrl *gomock.Controller) *MockServiceAccountNamespaceLister {
	mock := &MockServiceAccountNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockServiceAccountNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountNamespaceLister) EXPECT() *MockServiceAccountNamespaceListerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockServiceAccountNamespaceLister) ISGOMOCK() struct{} {
	return struct{}{}
}

// Get mocks base method.
func (m *MockServiceAccountNamespaceLister) Get(arg0 string) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceAccountNamespaceListerMockRecorder) Get(arg0 any) *MockServiceAccountNamespaceListerGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceAccountNamespaceLister)(nil).Get), arg0)
	return &MockServiceAccountNamespaceListerGetCall{Call: call}
}

// MockServiceAccountNamespaceListerGetCall wrap *gomock.Call
type MockServiceAccountNamespaceListerGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountNamespaceListerGetCall) Return(arg0 *v1.ServiceAccount, arg1 error) *MockServiceAccountNamespaceListerGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountNamespaceListerGetCall) Do(f func(string) (*v1.ServiceAccount, error)) *MockServiceAccountNamespaceListerGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountNamespaceListerGetCall) DoAndReturn(f func(string) (*v1.ServiceAccount, error)) *MockServiceAccountNamespaceListerGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockServiceAccountNamespaceLister) List(arg0 labels.Selector) ([]*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceAccountNamespaceListerMockRecorder) List(arg0 any) *MockServiceAccountNamespaceListerListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServiceAccountNamespaceLister)(nil).List), arg0)
	return &MockServiceAccountNamespaceListerListCall{Call: call}
}

// MockServiceAccountNamespaceListerListCall wrap *gomock.Call
type MockServiceAccountNamespaceListerListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAccountNamespaceListerListCall) Return(arg0 []*v1.ServiceAccount, arg1 error) *MockServiceAccountNamespaceListerListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAccountNamespaceListerListCall) Do(f func(labels.Selector) ([]*v1.ServiceAccount, error)) *MockServiceAccountNamespaceListerListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAccountNamespaceListerListCall) DoAndReturn(f func(labels.Selector) ([]*v1.ServiceAccount, error)) *MockServiceAccountNamespaceListerListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
