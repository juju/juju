// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs (interfaces: Environ,NetworkingEnviron,CloudEnvironProvider,InstanceTypesFetcher)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/package_mock.go github.com/juju/juju/environs Environ,NetworkingEnviron,CloudEnvironProvider,InstanceTypesFetcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jsonschema "github.com/juju/jsonschema"
	cloud "github.com/juju/juju/cloud"
	constraints "github.com/juju/juju/core/constraints"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	environs "github.com/juju/juju/environs"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	config "github.com/juju/juju/environs/config"
	envcontext "github.com/juju/juju/environs/envcontext"
	instances "github.com/juju/juju/environs/instances"
	storage "github.com/juju/juju/internal/storage"
	names "github.com/juju/names/v6"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockEnviron is a mock of Environ interface.
type MockEnviron struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironMockRecorder
}

// MockEnvironMockRecorder is the mock recorder for MockEnviron.
type MockEnvironMockRecorder struct {
	mock *MockEnviron
}

// NewMockEnviron creates a new mock instance.
func NewMockEnviron(ctrl *gomock.Controller) *MockEnviron {
	mock := &MockEnviron{ctrl: ctrl}
	mock.recorder = &MockEnvironMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnviron) EXPECT() *MockEnvironMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnviron) ISGOMOCK() struct{} {
	return struct{}{}
}

// AdoptResources mocks base method.
func (m *MockEnviron) AdoptResources(arg0 envcontext.ProviderCallContext, arg1 string, arg2 version.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptResources indicates an expected call of AdoptResources.
func (mr *MockEnvironMockRecorder) AdoptResources(arg0, arg1, arg2 any) *MockEnvironAdoptResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptResources", reflect.TypeOf((*MockEnviron)(nil).AdoptResources), arg0, arg1, arg2)
	return &MockEnvironAdoptResourcesCall{Call: call}
}

// MockEnvironAdoptResourcesCall wrap *gomock.Call
type MockEnvironAdoptResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironAdoptResourcesCall) Return(arg0 error) *MockEnvironAdoptResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironAdoptResourcesCall) Do(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockEnvironAdoptResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironAdoptResourcesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockEnvironAdoptResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllInstances mocks base method.
func (m *MockEnviron) AllInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockEnvironMockRecorder) AllInstances(arg0 any) *MockEnvironAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockEnviron)(nil).AllInstances), arg0)
	return &MockEnvironAllInstancesCall{Call: call}
}

// MockEnvironAllInstancesCall wrap *gomock.Call
type MockEnvironAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockEnvironAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironAllInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironAllInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRunningInstances mocks base method.
func (m *MockEnviron) AllRunningInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRunningInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRunningInstances indicates an expected call of AllRunningInstances.
func (mr *MockEnvironMockRecorder) AllRunningInstances(arg0 any) *MockEnvironAllRunningInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRunningInstances", reflect.TypeOf((*MockEnviron)(nil).AllRunningInstances), arg0)
	return &MockEnvironAllRunningInstancesCall{Call: call}
}

// MockEnvironAllRunningInstancesCall wrap *gomock.Call
type MockEnvironAllRunningInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironAllRunningInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockEnvironAllRunningInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironAllRunningInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllRunningInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironAllRunningInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllRunningInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bootstrap mocks base method.
func (m *MockEnviron) Bootstrap(arg0 environs.BootstrapContext, arg1 envcontext.ProviderCallContext, arg2 environs.BootstrapParams) (*environs.BootstrapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*environs.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockEnvironMockRecorder) Bootstrap(arg0, arg1, arg2 any) *MockEnvironBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockEnviron)(nil).Bootstrap), arg0, arg1, arg2)
	return &MockEnvironBootstrapCall{Call: call}
}

// MockEnvironBootstrapCall wrap *gomock.Call
type MockEnvironBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironBootstrapCall) Return(arg0 *environs.BootstrapResult, arg1 error) *MockEnvironBootstrapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironBootstrapCall) Do(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockEnvironBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockEnvironBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockEnviron) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockEnvironMockRecorder) Config() *MockEnvironConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockEnviron)(nil).Config))
	return &MockEnvironConfigCall{Call: call}
}

// MockEnvironConfigCall wrap *gomock.Call
type MockEnvironConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironConfigCall) Return(arg0 *config.Config) *MockEnvironConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironConfigCall) Do(f func() *config.Config) *MockEnvironConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironConfigCall) DoAndReturn(f func() *config.Config) *MockEnvironConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsValidator mocks base method.
func (m *MockEnviron) ConstraintsValidator(arg0 envcontext.ProviderCallContext) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockEnvironMockRecorder) ConstraintsValidator(arg0 any) *MockEnvironConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockEnviron)(nil).ConstraintsValidator), arg0)
	return &MockEnvironConstraintsValidatorCall{Call: call}
}

// MockEnvironConstraintsValidatorCall wrap *gomock.Call
type MockEnvironConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockEnvironConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironConstraintsValidatorCall) Do(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockEnvironConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironConstraintsValidatorCall) DoAndReturn(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockEnvironConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerInstances mocks base method.
func (m *MockEnviron) ControllerInstances(arg0 envcontext.ProviderCallContext, arg1 string) ([]instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerInstances", arg0, arg1)
	ret0, _ := ret[0].([]instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerInstances indicates an expected call of ControllerInstances.
func (mr *MockEnvironMockRecorder) ControllerInstances(arg0, arg1 any) *MockEnvironControllerInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerInstances", reflect.TypeOf((*MockEnviron)(nil).ControllerInstances), arg0, arg1)
	return &MockEnvironControllerInstancesCall{Call: call}
}

// MockEnvironControllerInstancesCall wrap *gomock.Call
type MockEnvironControllerInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironControllerInstancesCall) Return(arg0 []instance.Id, arg1 error) *MockEnvironControllerInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironControllerInstancesCall) Do(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockEnvironControllerInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironControllerInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockEnvironControllerInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockEnviron) Create(arg0 envcontext.ProviderCallContext, arg1 environs.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEnvironMockRecorder) Create(arg0, arg1 any) *MockEnvironCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnviron)(nil).Create), arg0, arg1)
	return &MockEnvironCreateCall{Call: call}
}

// MockEnvironCreateCall wrap *gomock.Call
type MockEnvironCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironCreateCall) Return(arg0 error) *MockEnvironCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironCreateCall) Do(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockEnvironCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironCreateCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockEnvironCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockEnviron) Destroy(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockEnvironMockRecorder) Destroy(arg0 any) *MockEnvironDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockEnviron)(nil).Destroy), arg0)
	return &MockEnvironDestroyCall{Call: call}
}

// MockEnvironDestroyCall wrap *gomock.Call
type MockEnvironDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironDestroyCall) Return(arg0 error) *MockEnvironDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironDestroyCall) Do(f func(envcontext.ProviderCallContext) error) *MockEnvironDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironDestroyCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockEnvironDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyController mocks base method.
func (m *MockEnviron) DestroyController(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyController indicates an expected call of DestroyController.
func (mr *MockEnvironMockRecorder) DestroyController(arg0, arg1 any) *MockEnvironDestroyControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyController", reflect.TypeOf((*MockEnviron)(nil).DestroyController), arg0, arg1)
	return &MockEnvironDestroyControllerCall{Call: call}
}

// MockEnvironDestroyControllerCall wrap *gomock.Call
type MockEnvironDestroyControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironDestroyControllerCall) Return(arg0 error) *MockEnvironDestroyControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironDestroyControllerCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockEnvironDestroyControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironDestroyControllerCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockEnvironDestroyControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceTypes mocks base method.
func (m *MockEnviron) InstanceTypes(arg0 envcontext.ProviderCallContext, arg1 constraints.Value) (instances.InstanceTypesWithCostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(instances.InstanceTypesWithCostMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceTypes indicates an expected call of InstanceTypes.
func (mr *MockEnvironMockRecorder) InstanceTypes(arg0, arg1 any) *MockEnvironInstanceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceTypes", reflect.TypeOf((*MockEnviron)(nil).InstanceTypes), arg0, arg1)
	return &MockEnvironInstanceTypesCall{Call: call}
}

// MockEnvironInstanceTypesCall wrap *gomock.Call
type MockEnvironInstanceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceTypesCall) Return(arg0 instances.InstanceTypesWithCostMetadata, arg1 error) *MockEnvironInstanceTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceTypesCall) Do(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockEnvironInstanceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceTypesCall) DoAndReturn(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockEnvironInstanceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Instances mocks base method.
func (m *MockEnviron) Instances(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances", arg0, arg1)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockEnvironMockRecorder) Instances(arg0, arg1 any) *MockEnvironInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockEnviron)(nil).Instances), arg0, arg1)
	return &MockEnvironInstancesCall{Call: call}
}

// MockEnvironInstancesCall wrap *gomock.Call
type MockEnvironInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockEnvironInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstancesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockEnvironInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockEnvironInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrecheckInstance mocks base method.
func (m *MockEnviron) PrecheckInstance(arg0 envcontext.ProviderCallContext, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockEnvironMockRecorder) PrecheckInstance(arg0, arg1 any) *MockEnvironPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockEnviron)(nil).PrecheckInstance), arg0, arg1)
	return &MockEnvironPrecheckInstanceCall{Call: call}
}

// MockEnvironPrecheckInstanceCall wrap *gomock.Call
type MockEnvironPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironPrecheckInstanceCall) Return(arg0 error) *MockEnvironPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironPrecheckInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockEnvironPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironPrecheckInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockEnvironPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareForBootstrap mocks base method.
func (m *MockEnviron) PrepareForBootstrap(arg0 environs.BootstrapContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForBootstrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareForBootstrap indicates an expected call of PrepareForBootstrap.
func (mr *MockEnvironMockRecorder) PrepareForBootstrap(arg0, arg1 any) *MockEnvironPrepareForBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForBootstrap", reflect.TypeOf((*MockEnviron)(nil).PrepareForBootstrap), arg0, arg1)
	return &MockEnvironPrepareForBootstrapCall{Call: call}
}

// MockEnvironPrepareForBootstrapCall wrap *gomock.Call
type MockEnvironPrepareForBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironPrepareForBootstrapCall) Return(arg0 error) *MockEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironPrepareForBootstrapCall) Do(f func(environs.BootstrapContext, string) error) *MockEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironPrepareForBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, string) error) *MockEnvironPrepareForBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Provider mocks base method.
func (m *MockEnviron) Provider() environs.EnvironProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(environs.EnvironProvider)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockEnvironMockRecorder) Provider() *MockEnvironProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockEnviron)(nil).Provider))
	return &MockEnvironProviderCall{Call: call}
}

// MockEnvironProviderCall wrap *gomock.Call
type MockEnvironProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderCall) Return(arg0 environs.EnvironProvider) *MockEnvironProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderCall) Do(f func() environs.EnvironProvider) *MockEnvironProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderCall) DoAndReturn(f func() environs.EnvironProvider) *MockEnvironProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockEnviron) SetConfig(arg0 context.Context, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockEnvironMockRecorder) SetConfig(arg0, arg1 any) *MockEnvironSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockEnviron)(nil).SetConfig), arg0, arg1)
	return &MockEnvironSetConfigCall{Call: call}
}

// MockEnvironSetConfigCall wrap *gomock.Call
type MockEnvironSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironSetConfigCall) Return(arg0 error) *MockEnvironSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironSetConfigCall) Do(f func(context.Context, *config.Config) error) *MockEnvironSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironSetConfigCall) DoAndReturn(f func(context.Context, *config.Config) error) *MockEnvironSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartInstance mocks base method.
func (m *MockEnviron) StartInstance(arg0 envcontext.ProviderCallContext, arg1 environs.StartInstanceParams) (*environs.StartInstanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1)
	ret0, _ := ret[0].(*environs.StartInstanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockEnvironMockRecorder) StartInstance(arg0, arg1 any) *MockEnvironStartInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockEnviron)(nil).StartInstance), arg0, arg1)
	return &MockEnvironStartInstanceCall{Call: call}
}

// MockEnvironStartInstanceCall wrap *gomock.Call
type MockEnvironStartInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStartInstanceCall) Return(arg0 *environs.StartInstanceResult, arg1 error) *MockEnvironStartInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStartInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockEnvironStartInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStartInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockEnvironStartInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopInstances mocks base method.
func (m *MockEnviron) StopInstances(arg0 envcontext.ProviderCallContext, arg1 ...instance.Id) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstances indicates an expected call of StopInstances.
func (mr *MockEnvironMockRecorder) StopInstances(arg0 any, arg1 ...any) *MockEnvironStopInstancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockEnviron)(nil).StopInstances), varargs...)
	return &MockEnvironStopInstancesCall{Call: call}
}

// MockEnvironStopInstancesCall wrap *gomock.Call
type MockEnvironStopInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStopInstancesCall) Return(arg0 error) *MockEnvironStopInstancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStopInstancesCall) Do(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockEnvironStopInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStopInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockEnvironStopInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockEnviron) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockEnvironMockRecorder) StorageProvider(arg0 any) *MockEnvironStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockEnviron)(nil).StorageProvider), arg0)
	return &MockEnvironStorageProviderCall{Call: call}
}

// MockEnvironStorageProviderCall wrap *gomock.Call
type MockEnvironStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockEnvironStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockEnvironStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockEnvironStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockEnviron) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockEnvironMockRecorder) StorageProviderTypes() *MockEnvironStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockEnviron)(nil).StorageProviderTypes))
	return &MockEnvironStorageProviderTypesCall{Call: call}
}

// MockEnvironStorageProviderTypesCall wrap *gomock.Call
type MockEnvironStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockEnvironStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockEnvironStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockEnvironStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkingEnviron is a mock of NetworkingEnviron interface.
type MockNetworkingEnviron struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingEnvironMockRecorder
}

// MockNetworkingEnvironMockRecorder is the mock recorder for MockNetworkingEnviron.
type MockNetworkingEnvironMockRecorder struct {
	mock *MockNetworkingEnviron
}

// NewMockNetworkingEnviron creates a new mock instance.
func NewMockNetworkingEnviron(ctrl *gomock.Controller) *MockNetworkingEnviron {
	mock := &MockNetworkingEnviron{ctrl: ctrl}
	mock.recorder = &MockNetworkingEnvironMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingEnviron) EXPECT() *MockNetworkingEnvironMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingEnviron) ISGOMOCK() struct{} {
	return struct{}{}
}

// AdoptResources mocks base method.
func (m *MockNetworkingEnviron) AdoptResources(arg0 envcontext.ProviderCallContext, arg1 string, arg2 version.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptResources indicates an expected call of AdoptResources.
func (mr *MockNetworkingEnvironMockRecorder) AdoptResources(arg0, arg1, arg2 any) *MockNetworkingEnvironAdoptResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptResources", reflect.TypeOf((*MockNetworkingEnviron)(nil).AdoptResources), arg0, arg1, arg2)
	return &MockNetworkingEnvironAdoptResourcesCall{Call: call}
}

// MockNetworkingEnvironAdoptResourcesCall wrap *gomock.Call
type MockNetworkingEnvironAdoptResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAdoptResourcesCall) Return(arg0 error) *MockNetworkingEnvironAdoptResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAdoptResourcesCall) Do(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockNetworkingEnvironAdoptResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAdoptResourcesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockNetworkingEnvironAdoptResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllInstances mocks base method.
func (m *MockNetworkingEnviron) AllInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockNetworkingEnvironMockRecorder) AllInstances(arg0 any) *MockNetworkingEnvironAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).AllInstances), arg0)
	return &MockNetworkingEnvironAllInstancesCall{Call: call}
}

// MockNetworkingEnvironAllInstancesCall wrap *gomock.Call
type MockNetworkingEnvironAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockNetworkingEnvironAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAllInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAllInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRunningInstances mocks base method.
func (m *MockNetworkingEnviron) AllRunningInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRunningInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRunningInstances indicates an expected call of AllRunningInstances.
func (mr *MockNetworkingEnvironMockRecorder) AllRunningInstances(arg0 any) *MockNetworkingEnvironAllRunningInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRunningInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).AllRunningInstances), arg0)
	return &MockNetworkingEnvironAllRunningInstancesCall{Call: call}
}

// MockNetworkingEnvironAllRunningInstancesCall wrap *gomock.Call
type MockNetworkingEnvironAllRunningInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAllRunningInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockNetworkingEnvironAllRunningInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAllRunningInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllRunningInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAllRunningInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllRunningInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllocateContainerAddresses mocks base method.
func (m *MockNetworkingEnviron) AllocateContainerAddresses(arg0 envcontext.ProviderCallContext, arg1 instance.Id, arg2 names.MachineTag, arg3 network.InterfaceInfos) (network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateContainerAddresses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateContainerAddresses indicates an expected call of AllocateContainerAddresses.
func (mr *MockNetworkingEnvironMockRecorder) AllocateContainerAddresses(arg0, arg1, arg2, arg3 any) *MockNetworkingEnvironAllocateContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateContainerAddresses", reflect.TypeOf((*MockNetworkingEnviron)(nil).AllocateContainerAddresses), arg0, arg1, arg2, arg3)
	return &MockNetworkingEnvironAllocateContainerAddressesCall{Call: call}
}

// MockNetworkingEnvironAllocateContainerAddressesCall wrap *gomock.Call
type MockNetworkingEnvironAllocateContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAllocateContainerAddressesCall) Return(arg0 network.InterfaceInfos, arg1 error) *MockNetworkingEnvironAllocateContainerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAllocateContainerAddressesCall) Do(f func(envcontext.ProviderCallContext, instance.Id, names.MachineTag, network.InterfaceInfos) (network.InterfaceInfos, error)) *MockNetworkingEnvironAllocateContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAllocateContainerAddressesCall) DoAndReturn(f func(envcontext.ProviderCallContext, instance.Id, names.MachineTag, network.InterfaceInfos) (network.InterfaceInfos, error)) *MockNetworkingEnvironAllocateContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bootstrap mocks base method.
func (m *MockNetworkingEnviron) Bootstrap(arg0 environs.BootstrapContext, arg1 envcontext.ProviderCallContext, arg2 environs.BootstrapParams) (*environs.BootstrapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*environs.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockNetworkingEnvironMockRecorder) Bootstrap(arg0, arg1, arg2 any) *MockNetworkingEnvironBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockNetworkingEnviron)(nil).Bootstrap), arg0, arg1, arg2)
	return &MockNetworkingEnvironBootstrapCall{Call: call}
}

// MockNetworkingEnvironBootstrapCall wrap *gomock.Call
type MockNetworkingEnvironBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironBootstrapCall) Return(arg0 *environs.BootstrapResult, arg1 error) *MockNetworkingEnvironBootstrapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironBootstrapCall) Do(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockNetworkingEnvironBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockNetworkingEnvironBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockNetworkingEnviron) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockNetworkingEnvironMockRecorder) Config() *MockNetworkingEnvironConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockNetworkingEnviron)(nil).Config))
	return &MockNetworkingEnvironConfigCall{Call: call}
}

// MockNetworkingEnvironConfigCall wrap *gomock.Call
type MockNetworkingEnvironConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironConfigCall) Return(arg0 *config.Config) *MockNetworkingEnvironConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironConfigCall) Do(f func() *config.Config) *MockNetworkingEnvironConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironConfigCall) DoAndReturn(f func() *config.Config) *MockNetworkingEnvironConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsValidator mocks base method.
func (m *MockNetworkingEnviron) ConstraintsValidator(arg0 envcontext.ProviderCallContext) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockNetworkingEnvironMockRecorder) ConstraintsValidator(arg0 any) *MockNetworkingEnvironConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockNetworkingEnviron)(nil).ConstraintsValidator), arg0)
	return &MockNetworkingEnvironConstraintsValidatorCall{Call: call}
}

// MockNetworkingEnvironConstraintsValidatorCall wrap *gomock.Call
type MockNetworkingEnvironConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockNetworkingEnvironConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironConstraintsValidatorCall) Do(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockNetworkingEnvironConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironConstraintsValidatorCall) DoAndReturn(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockNetworkingEnvironConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerInstances mocks base method.
func (m *MockNetworkingEnviron) ControllerInstances(arg0 envcontext.ProviderCallContext, arg1 string) ([]instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerInstances", arg0, arg1)
	ret0, _ := ret[0].([]instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerInstances indicates an expected call of ControllerInstances.
func (mr *MockNetworkingEnvironMockRecorder) ControllerInstances(arg0, arg1 any) *MockNetworkingEnvironControllerInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).ControllerInstances), arg0, arg1)
	return &MockNetworkingEnvironControllerInstancesCall{Call: call}
}

// MockNetworkingEnvironControllerInstancesCall wrap *gomock.Call
type MockNetworkingEnvironControllerInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironControllerInstancesCall) Return(arg0 []instance.Id, arg1 error) *MockNetworkingEnvironControllerInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironControllerInstancesCall) Do(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockNetworkingEnvironControllerInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironControllerInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockNetworkingEnvironControllerInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockNetworkingEnviron) Create(arg0 envcontext.ProviderCallContext, arg1 environs.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNetworkingEnvironMockRecorder) Create(arg0, arg1 any) *MockNetworkingEnvironCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkingEnviron)(nil).Create), arg0, arg1)
	return &MockNetworkingEnvironCreateCall{Call: call}
}

// MockNetworkingEnvironCreateCall wrap *gomock.Call
type MockNetworkingEnvironCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironCreateCall) Return(arg0 error) *MockNetworkingEnvironCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironCreateCall) Do(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockNetworkingEnvironCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironCreateCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockNetworkingEnvironCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockNetworkingEnviron) Destroy(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockNetworkingEnvironMockRecorder) Destroy(arg0 any) *MockNetworkingEnvironDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockNetworkingEnviron)(nil).Destroy), arg0)
	return &MockNetworkingEnvironDestroyCall{Call: call}
}

// MockNetworkingEnvironDestroyCall wrap *gomock.Call
type MockNetworkingEnvironDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironDestroyCall) Return(arg0 error) *MockNetworkingEnvironDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironDestroyCall) Do(f func(envcontext.ProviderCallContext) error) *MockNetworkingEnvironDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironDestroyCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockNetworkingEnvironDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyController mocks base method.
func (m *MockNetworkingEnviron) DestroyController(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyController indicates an expected call of DestroyController.
func (mr *MockNetworkingEnvironMockRecorder) DestroyController(arg0, arg1 any) *MockNetworkingEnvironDestroyControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyController", reflect.TypeOf((*MockNetworkingEnviron)(nil).DestroyController), arg0, arg1)
	return &MockNetworkingEnvironDestroyControllerCall{Call: call}
}

// MockNetworkingEnvironDestroyControllerCall wrap *gomock.Call
type MockNetworkingEnvironDestroyControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironDestroyControllerCall) Return(arg0 error) *MockNetworkingEnvironDestroyControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironDestroyControllerCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockNetworkingEnvironDestroyControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironDestroyControllerCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockNetworkingEnvironDestroyControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceTypes mocks base method.
func (m *MockNetworkingEnviron) InstanceTypes(arg0 envcontext.ProviderCallContext, arg1 constraints.Value) (instances.InstanceTypesWithCostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(instances.InstanceTypesWithCostMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceTypes indicates an expected call of InstanceTypes.
func (mr *MockNetworkingEnvironMockRecorder) InstanceTypes(arg0, arg1 any) *MockNetworkingEnvironInstanceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceTypes", reflect.TypeOf((*MockNetworkingEnviron)(nil).InstanceTypes), arg0, arg1)
	return &MockNetworkingEnvironInstanceTypesCall{Call: call}
}

// MockNetworkingEnvironInstanceTypesCall wrap *gomock.Call
type MockNetworkingEnvironInstanceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironInstanceTypesCall) Return(arg0 instances.InstanceTypesWithCostMetadata, arg1 error) *MockNetworkingEnvironInstanceTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironInstanceTypesCall) Do(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockNetworkingEnvironInstanceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironInstanceTypesCall) DoAndReturn(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockNetworkingEnvironInstanceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Instances mocks base method.
func (m *MockNetworkingEnviron) Instances(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances", arg0, arg1)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockNetworkingEnvironMockRecorder) Instances(arg0, arg1 any) *MockNetworkingEnvironInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockNetworkingEnviron)(nil).Instances), arg0, arg1)
	return &MockNetworkingEnvironInstancesCall{Call: call}
}

// MockNetworkingEnvironInstancesCall wrap *gomock.Call
type MockNetworkingEnvironInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockNetworkingEnvironInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironInstancesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockNetworkingEnvironInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockNetworkingEnvironInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NetworkInterfaces mocks base method.
func (m *MockNetworkingEnviron) NetworkInterfaces(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInterfaces", arg0, arg1)
	ret0, _ := ret[0].([]network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInterfaces indicates an expected call of NetworkInterfaces.
func (mr *MockNetworkingEnvironMockRecorder) NetworkInterfaces(arg0, arg1 any) *MockNetworkingEnvironNetworkInterfacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInterfaces", reflect.TypeOf((*MockNetworkingEnviron)(nil).NetworkInterfaces), arg0, arg1)
	return &MockNetworkingEnvironNetworkInterfacesCall{Call: call}
}

// MockNetworkingEnvironNetworkInterfacesCall wrap *gomock.Call
type MockNetworkingEnvironNetworkInterfacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironNetworkInterfacesCall) Return(arg0 []network.InterfaceInfos, arg1 error) *MockNetworkingEnvironNetworkInterfacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironNetworkInterfacesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]network.InterfaceInfos, error)) *MockNetworkingEnvironNetworkInterfacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironNetworkInterfacesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]network.InterfaceInfos, error)) *MockNetworkingEnvironNetworkInterfacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrecheckInstance mocks base method.
func (m *MockNetworkingEnviron) PrecheckInstance(arg0 envcontext.ProviderCallContext, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockNetworkingEnvironMockRecorder) PrecheckInstance(arg0, arg1 any) *MockNetworkingEnvironPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockNetworkingEnviron)(nil).PrecheckInstance), arg0, arg1)
	return &MockNetworkingEnvironPrecheckInstanceCall{Call: call}
}

// MockNetworkingEnvironPrecheckInstanceCall wrap *gomock.Call
type MockNetworkingEnvironPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironPrecheckInstanceCall) Return(arg0 error) *MockNetworkingEnvironPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironPrecheckInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockNetworkingEnvironPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironPrecheckInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockNetworkingEnvironPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareForBootstrap mocks base method.
func (m *MockNetworkingEnviron) PrepareForBootstrap(arg0 environs.BootstrapContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForBootstrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareForBootstrap indicates an expected call of PrepareForBootstrap.
func (mr *MockNetworkingEnvironMockRecorder) PrepareForBootstrap(arg0, arg1 any) *MockNetworkingEnvironPrepareForBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForBootstrap", reflect.TypeOf((*MockNetworkingEnviron)(nil).PrepareForBootstrap), arg0, arg1)
	return &MockNetworkingEnvironPrepareForBootstrapCall{Call: call}
}

// MockNetworkingEnvironPrepareForBootstrapCall wrap *gomock.Call
type MockNetworkingEnvironPrepareForBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironPrepareForBootstrapCall) Return(arg0 error) *MockNetworkingEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironPrepareForBootstrapCall) Do(f func(environs.BootstrapContext, string) error) *MockNetworkingEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironPrepareForBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, string) error) *MockNetworkingEnvironPrepareForBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Provider mocks base method.
func (m *MockNetworkingEnviron) Provider() environs.EnvironProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(environs.EnvironProvider)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockNetworkingEnvironMockRecorder) Provider() *MockNetworkingEnvironProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockNetworkingEnviron)(nil).Provider))
	return &MockNetworkingEnvironProviderCall{Call: call}
}

// MockNetworkingEnvironProviderCall wrap *gomock.Call
type MockNetworkingEnvironProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironProviderCall) Return(arg0 environs.EnvironProvider) *MockNetworkingEnvironProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironProviderCall) Do(f func() environs.EnvironProvider) *MockNetworkingEnvironProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironProviderCall) DoAndReturn(f func() environs.EnvironProvider) *MockNetworkingEnvironProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderSpaceInfo mocks base method.
func (m *MockNetworkingEnviron) ProviderSpaceInfo(arg0 envcontext.ProviderCallContext, arg1 *network.SpaceInfo) (*environs.ProviderSpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderSpaceInfo", arg0, arg1)
	ret0, _ := ret[0].(*environs.ProviderSpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderSpaceInfo indicates an expected call of ProviderSpaceInfo.
func (mr *MockNetworkingEnvironMockRecorder) ProviderSpaceInfo(arg0, arg1 any) *MockNetworkingEnvironProviderSpaceInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderSpaceInfo", reflect.TypeOf((*MockNetworkingEnviron)(nil).ProviderSpaceInfo), arg0, arg1)
	return &MockNetworkingEnvironProviderSpaceInfoCall{Call: call}
}

// MockNetworkingEnvironProviderSpaceInfoCall wrap *gomock.Call
type MockNetworkingEnvironProviderSpaceInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironProviderSpaceInfoCall) Return(arg0 *environs.ProviderSpaceInfo, arg1 error) *MockNetworkingEnvironProviderSpaceInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironProviderSpaceInfoCall) Do(f func(envcontext.ProviderCallContext, *network.SpaceInfo) (*environs.ProviderSpaceInfo, error)) *MockNetworkingEnvironProviderSpaceInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironProviderSpaceInfoCall) DoAndReturn(f func(envcontext.ProviderCallContext, *network.SpaceInfo) (*environs.ProviderSpaceInfo, error)) *MockNetworkingEnvironProviderSpaceInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseContainerAddresses mocks base method.
func (m *MockNetworkingEnviron) ReleaseContainerAddresses(arg0 envcontext.ProviderCallContext, arg1 []network.ProviderInterfaceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerAddresses indicates an expected call of ReleaseContainerAddresses.
func (mr *MockNetworkingEnvironMockRecorder) ReleaseContainerAddresses(arg0, arg1 any) *MockNetworkingEnvironReleaseContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerAddresses", reflect.TypeOf((*MockNetworkingEnviron)(nil).ReleaseContainerAddresses), arg0, arg1)
	return &MockNetworkingEnvironReleaseContainerAddressesCall{Call: call}
}

// MockNetworkingEnvironReleaseContainerAddressesCall wrap *gomock.Call
type MockNetworkingEnvironReleaseContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironReleaseContainerAddressesCall) Return(arg0 error) *MockNetworkingEnvironReleaseContainerAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironReleaseContainerAddressesCall) Do(f func(envcontext.ProviderCallContext, []network.ProviderInterfaceInfo) error) *MockNetworkingEnvironReleaseContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironReleaseContainerAddressesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []network.ProviderInterfaceInfo) error) *MockNetworkingEnvironReleaseContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockNetworkingEnviron) SetConfig(arg0 context.Context, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockNetworkingEnvironMockRecorder) SetConfig(arg0, arg1 any) *MockNetworkingEnvironSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockNetworkingEnviron)(nil).SetConfig), arg0, arg1)
	return &MockNetworkingEnvironSetConfigCall{Call: call}
}

// MockNetworkingEnvironSetConfigCall wrap *gomock.Call
type MockNetworkingEnvironSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSetConfigCall) Return(arg0 error) *MockNetworkingEnvironSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSetConfigCall) Do(f func(context.Context, *config.Config) error) *MockNetworkingEnvironSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSetConfigCall) DoAndReturn(f func(context.Context, *config.Config) error) *MockNetworkingEnvironSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Spaces mocks base method.
func (m *MockNetworkingEnviron) Spaces(arg0 envcontext.ProviderCallContext) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spaces indicates an expected call of Spaces.
func (mr *MockNetworkingEnvironMockRecorder) Spaces(arg0 any) *MockNetworkingEnvironSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockNetworkingEnviron)(nil).Spaces), arg0)
	return &MockNetworkingEnvironSpacesCall{Call: call}
}

// MockNetworkingEnvironSpacesCall wrap *gomock.Call
type MockNetworkingEnvironSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkingEnvironSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSpacesCall) Do(f func(envcontext.ProviderCallContext) (network.SpaceInfos, error)) *MockNetworkingEnvironSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSpacesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (network.SpaceInfos, error)) *MockNetworkingEnvironSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartInstance mocks base method.
func (m *MockNetworkingEnviron) StartInstance(arg0 envcontext.ProviderCallContext, arg1 environs.StartInstanceParams) (*environs.StartInstanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1)
	ret0, _ := ret[0].(*environs.StartInstanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockNetworkingEnvironMockRecorder) StartInstance(arg0, arg1 any) *MockNetworkingEnvironStartInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockNetworkingEnviron)(nil).StartInstance), arg0, arg1)
	return &MockNetworkingEnvironStartInstanceCall{Call: call}
}

// MockNetworkingEnvironStartInstanceCall wrap *gomock.Call
type MockNetworkingEnvironStartInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStartInstanceCall) Return(arg0 *environs.StartInstanceResult, arg1 error) *MockNetworkingEnvironStartInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStartInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockNetworkingEnvironStartInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStartInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockNetworkingEnvironStartInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopInstances mocks base method.
func (m *MockNetworkingEnviron) StopInstances(arg0 envcontext.ProviderCallContext, arg1 ...instance.Id) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstances indicates an expected call of StopInstances.
func (mr *MockNetworkingEnvironMockRecorder) StopInstances(arg0 any, arg1 ...any) *MockNetworkingEnvironStopInstancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).StopInstances), varargs...)
	return &MockNetworkingEnvironStopInstancesCall{Call: call}
}

// MockNetworkingEnvironStopInstancesCall wrap *gomock.Call
type MockNetworkingEnvironStopInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStopInstancesCall) Return(arg0 error) *MockNetworkingEnvironStopInstancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStopInstancesCall) Do(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockNetworkingEnvironStopInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStopInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockNetworkingEnvironStopInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockNetworkingEnviron) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockNetworkingEnvironMockRecorder) StorageProvider(arg0 any) *MockNetworkingEnvironStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockNetworkingEnviron)(nil).StorageProvider), arg0)
	return &MockNetworkingEnvironStorageProviderCall{Call: call}
}

// MockNetworkingEnvironStorageProviderCall wrap *gomock.Call
type MockNetworkingEnvironStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockNetworkingEnvironStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockNetworkingEnvironStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockNetworkingEnvironStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockNetworkingEnviron) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockNetworkingEnvironMockRecorder) StorageProviderTypes() *MockNetworkingEnvironStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockNetworkingEnviron)(nil).StorageProviderTypes))
	return &MockNetworkingEnvironStorageProviderTypesCall{Call: call}
}

// MockNetworkingEnvironStorageProviderTypesCall wrap *gomock.Call
type MockNetworkingEnvironStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockNetworkingEnvironStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockNetworkingEnvironStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockNetworkingEnvironStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subnets mocks base method.
func (m *MockNetworkingEnviron) Subnets(arg0 envcontext.ProviderCallContext, arg1 instance.Id, arg2 []network.Id) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets", arg0, arg1, arg2)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnets indicates an expected call of Subnets.
func (mr *MockNetworkingEnvironMockRecorder) Subnets(arg0, arg1, arg2 any) *MockNetworkingEnvironSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockNetworkingEnviron)(nil).Subnets), arg0, arg1, arg2)
	return &MockNetworkingEnvironSubnetsCall{Call: call}
}

// MockNetworkingEnvironSubnetsCall wrap *gomock.Call
type MockNetworkingEnvironSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSubnetsCall) Return(arg0 []network.SubnetInfo, arg1 error) *MockNetworkingEnvironSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSubnetsCall) Do(f func(envcontext.ProviderCallContext, instance.Id, []network.Id) ([]network.SubnetInfo, error)) *MockNetworkingEnvironSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSubnetsCall) DoAndReturn(f func(envcontext.ProviderCallContext, instance.Id, []network.Id) ([]network.SubnetInfo, error)) *MockNetworkingEnvironSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsContainerAddresses mocks base method.
func (m *MockNetworkingEnviron) SupportsContainerAddresses(arg0 envcontext.ProviderCallContext) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsContainerAddresses", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsContainerAddresses indicates an expected call of SupportsContainerAddresses.
func (mr *MockNetworkingEnvironMockRecorder) SupportsContainerAddresses(arg0 any) *MockNetworkingEnvironSupportsContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsContainerAddresses", reflect.TypeOf((*MockNetworkingEnviron)(nil).SupportsContainerAddresses), arg0)
	return &MockNetworkingEnvironSupportsContainerAddressesCall{Call: call}
}

// MockNetworkingEnvironSupportsContainerAddressesCall wrap *gomock.Call
type MockNetworkingEnvironSupportsContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSupportsContainerAddressesCall) Return(arg0 bool, arg1 error) *MockNetworkingEnvironSupportsContainerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSupportsContainerAddressesCall) Do(f func(envcontext.ProviderCallContext) (bool, error)) *MockNetworkingEnvironSupportsContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSupportsContainerAddressesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (bool, error)) *MockNetworkingEnvironSupportsContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaceDiscovery mocks base method.
func (m *MockNetworkingEnviron) SupportsSpaceDiscovery() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaceDiscovery")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaceDiscovery indicates an expected call of SupportsSpaceDiscovery.
func (mr *MockNetworkingEnvironMockRecorder) SupportsSpaceDiscovery() *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaceDiscovery", reflect.TypeOf((*MockNetworkingEnviron)(nil).SupportsSpaceDiscovery))
	return &MockNetworkingEnvironSupportsSpaceDiscoveryCall{Call: call}
}

// MockNetworkingEnvironSupportsSpaceDiscoveryCall wrap *gomock.Call
type MockNetworkingEnvironSupportsSpaceDiscoveryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSupportsSpaceDiscoveryCall) Return(arg0 bool, arg1 error) *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSupportsSpaceDiscoveryCall) Do(f func() (bool, error)) *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSupportsSpaceDiscoveryCall) DoAndReturn(f func() (bool, error)) *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaces mocks base method.
func (m *MockNetworkingEnviron) SupportsSpaces() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaces")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaces indicates an expected call of SupportsSpaces.
func (mr *MockNetworkingEnvironMockRecorder) SupportsSpaces() *MockNetworkingEnvironSupportsSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaces", reflect.TypeOf((*MockNetworkingEnviron)(nil).SupportsSpaces))
	return &MockNetworkingEnvironSupportsSpacesCall{Call: call}
}

// MockNetworkingEnvironSupportsSpacesCall wrap *gomock.Call
type MockNetworkingEnvironSupportsSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSupportsSpacesCall) Return(arg0 bool, arg1 error) *MockNetworkingEnvironSupportsSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSupportsSpacesCall) Do(f func() (bool, error)) *MockNetworkingEnvironSupportsSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSupportsSpacesCall) DoAndReturn(f func() (bool, error)) *MockNetworkingEnvironSupportsSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudEnvironProvider is a mock of CloudEnvironProvider interface.
type MockCloudEnvironProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCloudEnvironProviderMockRecorder
}

// MockCloudEnvironProviderMockRecorder is the mock recorder for MockCloudEnvironProvider.
type MockCloudEnvironProviderMockRecorder struct {
	mock *MockCloudEnvironProvider
}

// NewMockCloudEnvironProvider creates a new mock instance.
func NewMockCloudEnvironProvider(ctrl *gomock.Controller) *MockCloudEnvironProvider {
	mock := &MockCloudEnvironProvider{ctrl: ctrl}
	mock.recorder = &MockCloudEnvironProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudEnvironProvider) EXPECT() *MockCloudEnvironProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudEnvironProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// CloudSchema mocks base method.
func (m *MockCloudEnvironProvider) CloudSchema() *jsonschema.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSchema")
	ret0, _ := ret[0].(*jsonschema.Schema)
	return ret0
}

// CloudSchema indicates an expected call of CloudSchema.
func (mr *MockCloudEnvironProviderMockRecorder) CloudSchema() *MockCloudEnvironProviderCloudSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSchema", reflect.TypeOf((*MockCloudEnvironProvider)(nil).CloudSchema))
	return &MockCloudEnvironProviderCloudSchemaCall{Call: call}
}

// MockCloudEnvironProviderCloudSchemaCall wrap *gomock.Call
type MockCloudEnvironProviderCloudSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderCloudSchemaCall) Return(arg0 *jsonschema.Schema) *MockCloudEnvironProviderCloudSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderCloudSchemaCall) Do(f func() *jsonschema.Schema) *MockCloudEnvironProviderCloudSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderCloudSchemaCall) DoAndReturn(f func() *jsonschema.Schema) *MockCloudEnvironProviderCloudSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CredentialSchemas mocks base method.
func (m *MockCloudEnvironProvider) CredentialSchemas() map[cloud.AuthType]cloud.CredentialSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialSchemas")
	ret0, _ := ret[0].(map[cloud.AuthType]cloud.CredentialSchema)
	return ret0
}

// CredentialSchemas indicates an expected call of CredentialSchemas.
func (mr *MockCloudEnvironProviderMockRecorder) CredentialSchemas() *MockCloudEnvironProviderCredentialSchemasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialSchemas", reflect.TypeOf((*MockCloudEnvironProvider)(nil).CredentialSchemas))
	return &MockCloudEnvironProviderCredentialSchemasCall{Call: call}
}

// MockCloudEnvironProviderCredentialSchemasCall wrap *gomock.Call
type MockCloudEnvironProviderCredentialSchemasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderCredentialSchemasCall) Return(arg0 map[cloud.AuthType]cloud.CredentialSchema) *MockCloudEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderCredentialSchemasCall) Do(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockCloudEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderCredentialSchemasCall) DoAndReturn(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockCloudEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetectCredentials mocks base method.
func (m *MockCloudEnvironProvider) DetectCredentials(arg0 string) (*cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCredentials", arg0)
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCredentials indicates an expected call of DetectCredentials.
func (mr *MockCloudEnvironProviderMockRecorder) DetectCredentials(arg0 any) *MockCloudEnvironProviderDetectCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCredentials", reflect.TypeOf((*MockCloudEnvironProvider)(nil).DetectCredentials), arg0)
	return &MockCloudEnvironProviderDetectCredentialsCall{Call: call}
}

// MockCloudEnvironProviderDetectCredentialsCall wrap *gomock.Call
type MockCloudEnvironProviderDetectCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderDetectCredentialsCall) Return(arg0 *cloud.CloudCredential, arg1 error) *MockCloudEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderDetectCredentialsCall) Do(f func(string) (*cloud.CloudCredential, error)) *MockCloudEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderDetectCredentialsCall) DoAndReturn(f func(string) (*cloud.CloudCredential, error)) *MockCloudEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FinalizeCredential mocks base method.
func (m *MockCloudEnvironProvider) FinalizeCredential(arg0 environs.FinalizeCredentialContext, arg1 environs.FinalizeCredentialParams) (*cloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCredential", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCredential indicates an expected call of FinalizeCredential.
func (mr *MockCloudEnvironProviderMockRecorder) FinalizeCredential(arg0, arg1 any) *MockCloudEnvironProviderFinalizeCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCredential", reflect.TypeOf((*MockCloudEnvironProvider)(nil).FinalizeCredential), arg0, arg1)
	return &MockCloudEnvironProviderFinalizeCredentialCall{Call: call}
}

// MockCloudEnvironProviderFinalizeCredentialCall wrap *gomock.Call
type MockCloudEnvironProviderFinalizeCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderFinalizeCredentialCall) Return(arg0 *cloud.Credential, arg1 error) *MockCloudEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderFinalizeCredentialCall) Do(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockCloudEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderFinalizeCredentialCall) DoAndReturn(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockCloudEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockCloudEnvironProvider) Open(arg0 context.Context, arg1 environs.OpenParams) (environs.Environ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(environs.Environ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockCloudEnvironProviderMockRecorder) Open(arg0, arg1 any) *MockCloudEnvironProviderOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Open), arg0, arg1)
	return &MockCloudEnvironProviderOpenCall{Call: call}
}

// MockCloudEnvironProviderOpenCall wrap *gomock.Call
type MockCloudEnvironProviderOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderOpenCall) Return(arg0 environs.Environ, arg1 error) *MockCloudEnvironProviderOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderOpenCall) Do(f func(context.Context, environs.OpenParams) (environs.Environ, error)) *MockCloudEnvironProviderOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderOpenCall) DoAndReturn(f func(context.Context, environs.OpenParams) (environs.Environ, error)) *MockCloudEnvironProviderOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *MockCloudEnvironProvider) Ping(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCloudEnvironProviderMockRecorder) Ping(arg0, arg1 any) *MockCloudEnvironProviderPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Ping), arg0, arg1)
	return &MockCloudEnvironProviderPingCall{Call: call}
}

// MockCloudEnvironProviderPingCall wrap *gomock.Call
type MockCloudEnvironProviderPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderPingCall) Return(arg0 error) *MockCloudEnvironProviderPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderPingCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockCloudEnvironProviderPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderPingCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockCloudEnvironProviderPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockCloudEnvironProvider) Validate(arg0 context.Context, arg1, arg2 *config.Config) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockCloudEnvironProviderMockRecorder) Validate(arg0, arg1, arg2 any) *MockCloudEnvironProviderValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Validate), arg0, arg1, arg2)
	return &MockCloudEnvironProviderValidateCall{Call: call}
}

// MockCloudEnvironProviderValidateCall wrap *gomock.Call
type MockCloudEnvironProviderValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderValidateCall) Return(arg0 *config.Config, arg1 error) *MockCloudEnvironProviderValidateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderValidateCall) Do(f func(context.Context, *config.Config, *config.Config) (*config.Config, error)) *MockCloudEnvironProviderValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderValidateCall) DoAndReturn(f func(context.Context, *config.Config, *config.Config) (*config.Config, error)) *MockCloudEnvironProviderValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateCloud mocks base method.
func (m *MockCloudEnvironProvider) ValidateCloud(arg0 context.Context, arg1 cloudspec.CloudSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCloud", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCloud indicates an expected call of ValidateCloud.
func (mr *MockCloudEnvironProviderMockRecorder) ValidateCloud(arg0, arg1 any) *MockCloudEnvironProviderValidateCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCloud", reflect.TypeOf((*MockCloudEnvironProvider)(nil).ValidateCloud), arg0, arg1)
	return &MockCloudEnvironProviderValidateCloudCall{Call: call}
}

// MockCloudEnvironProviderValidateCloudCall wrap *gomock.Call
type MockCloudEnvironProviderValidateCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderValidateCloudCall) Return(arg0 error) *MockCloudEnvironProviderValidateCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderValidateCloudCall) Do(f func(context.Context, cloudspec.CloudSpec) error) *MockCloudEnvironProviderValidateCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderValidateCloudCall) DoAndReturn(f func(context.Context, cloudspec.CloudSpec) error) *MockCloudEnvironProviderValidateCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Version mocks base method.
func (m *MockCloudEnvironProvider) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockCloudEnvironProviderMockRecorder) Version() *MockCloudEnvironProviderVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Version))
	return &MockCloudEnvironProviderVersionCall{Call: call}
}

// MockCloudEnvironProviderVersionCall wrap *gomock.Call
type MockCloudEnvironProviderVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderVersionCall) Return(arg0 int) *MockCloudEnvironProviderVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderVersionCall) Do(f func() int) *MockCloudEnvironProviderVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderVersionCall) DoAndReturn(f func() int) *MockCloudEnvironProviderVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstanceTypesFetcher is a mock of InstanceTypesFetcher interface.
type MockInstanceTypesFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceTypesFetcherMockRecorder
}

// MockInstanceTypesFetcherMockRecorder is the mock recorder for MockInstanceTypesFetcher.
type MockInstanceTypesFetcherMockRecorder struct {
	mock *MockInstanceTypesFetcher
}

// NewMockInstanceTypesFetcher creates a new mock instance.
func NewMockInstanceTypesFetcher(ctrl *gomock.Controller) *MockInstanceTypesFetcher {
	mock := &MockInstanceTypesFetcher{ctrl: ctrl}
	mock.recorder = &MockInstanceTypesFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceTypesFetcher) EXPECT() *MockInstanceTypesFetcherMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstanceTypesFetcher) ISGOMOCK() struct{} {
	return struct{}{}
}

// InstanceTypes mocks base method.
func (m *MockInstanceTypesFetcher) InstanceTypes(arg0 envcontext.ProviderCallContext, arg1 constraints.Value) (instances.InstanceTypesWithCostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(instances.InstanceTypesWithCostMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceTypes indicates an expected call of InstanceTypes.
func (mr *MockInstanceTypesFetcherMockRecorder) InstanceTypes(arg0, arg1 any) *MockInstanceTypesFetcherInstanceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceTypes", reflect.TypeOf((*MockInstanceTypesFetcher)(nil).InstanceTypes), arg0, arg1)
	return &MockInstanceTypesFetcherInstanceTypesCall{Call: call}
}

// MockInstanceTypesFetcherInstanceTypesCall wrap *gomock.Call
type MockInstanceTypesFetcherInstanceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceTypesFetcherInstanceTypesCall) Return(arg0 instances.InstanceTypesWithCostMetadata, arg1 error) *MockInstanceTypesFetcherInstanceTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceTypesFetcherInstanceTypesCall) Do(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockInstanceTypesFetcherInstanceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceTypesFetcherInstanceTypesCall) DoAndReturn(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockInstanceTypesFetcherInstanceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
