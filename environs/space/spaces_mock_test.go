// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs/space (interfaces: ReloadSpacesState,Space,Constraints)

// Package space is a generated GoMock package.
package space

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	set "github.com/juju/collections/set"
	network "github.com/juju/juju/v3/core/network"
	state "github.com/juju/juju/v3/state"
)

// MockReloadSpacesState is a mock of ReloadSpacesState interface.
type MockReloadSpacesState struct {
	ctrl     *gomock.Controller
	recorder *MockReloadSpacesStateMockRecorder
}

// MockReloadSpacesStateMockRecorder is the mock recorder for MockReloadSpacesState.
type MockReloadSpacesStateMockRecorder struct {
	mock *MockReloadSpacesState
}

// NewMockReloadSpacesState creates a new mock instance.
func NewMockReloadSpacesState(ctrl *gomock.Controller) *MockReloadSpacesState {
	mock := &MockReloadSpacesState{ctrl: ctrl}
	mock.recorder = &MockReloadSpacesStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReloadSpacesState) EXPECT() *MockReloadSpacesStateMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockReloadSpacesState) AddSpace(arg0 string, arg1 network.Id, arg2 []string, arg3 bool) (Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockReloadSpacesStateMockRecorder) AddSpace(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockReloadSpacesState)(nil).AddSpace), arg0, arg1, arg2, arg3)
}

// AllEndpointBindingsSpaceNames mocks base method.
func (m *MockReloadSpacesState) AllEndpointBindingsSpaceNames() (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllEndpointBindingsSpaceNames")
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllEndpointBindingsSpaceNames indicates an expected call of AllEndpointBindingsSpaceNames.
func (mr *MockReloadSpacesStateMockRecorder) AllEndpointBindingsSpaceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllEndpointBindingsSpaceNames", reflect.TypeOf((*MockReloadSpacesState)(nil).AllEndpointBindingsSpaceNames))
}

// AllSpaces mocks base method.
func (m *MockReloadSpacesState) AllSpaces() ([]Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSpaces")
	ret0, _ := ret[0].([]Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSpaces indicates an expected call of AllSpaces.
func (mr *MockReloadSpacesStateMockRecorder) AllSpaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSpaces", reflect.TypeOf((*MockReloadSpacesState)(nil).AllSpaces))
}

// ConstraintsBySpaceName mocks base method.
func (m *MockReloadSpacesState) ConstraintsBySpaceName(arg0 string) ([]Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsBySpaceName", arg0)
	ret0, _ := ret[0].([]Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsBySpaceName indicates an expected call of ConstraintsBySpaceName.
func (mr *MockReloadSpacesStateMockRecorder) ConstraintsBySpaceName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsBySpaceName", reflect.TypeOf((*MockReloadSpacesState)(nil).ConstraintsBySpaceName), arg0)
}

// DefaultEndpointBindingSpace mocks base method.
func (m *MockReloadSpacesState) DefaultEndpointBindingSpace() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultEndpointBindingSpace")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultEndpointBindingSpace indicates an expected call of DefaultEndpointBindingSpace.
func (mr *MockReloadSpacesStateMockRecorder) DefaultEndpointBindingSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultEndpointBindingSpace", reflect.TypeOf((*MockReloadSpacesState)(nil).DefaultEndpointBindingSpace))
}

// SaveProviderSubnets mocks base method.
func (m *MockReloadSpacesState) SaveProviderSubnets(arg0 []network.SubnetInfo, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProviderSubnets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProviderSubnets indicates an expected call of SaveProviderSubnets.
func (mr *MockReloadSpacesStateMockRecorder) SaveProviderSubnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProviderSubnets", reflect.TypeOf((*MockReloadSpacesState)(nil).SaveProviderSubnets), arg0, arg1)
}

// MockSpace is a mock of Space interface.
type MockSpace struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceMockRecorder
}

// MockSpaceMockRecorder is the mock recorder for MockSpace.
type MockSpaceMockRecorder struct {
	mock *MockSpace
}

// NewMockSpace creates a new mock instance.
func NewMockSpace(ctrl *gomock.Controller) *MockSpace {
	mock := &MockSpace{ctrl: ctrl}
	mock.recorder = &MockSpaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpace) EXPECT() *MockSpaceMockRecorder {
	return m.recorder
}

// EnsureDead mocks base method.
func (m *MockSpace) EnsureDead() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDead")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDead indicates an expected call of EnsureDead.
func (mr *MockSpaceMockRecorder) EnsureDead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDead", reflect.TypeOf((*MockSpace)(nil).EnsureDead))
}

// Id mocks base method.
func (m *MockSpace) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockSpaceMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockSpace)(nil).Id))
}

// Life mocks base method.
func (m *MockSpace) Life() state.Life {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(state.Life)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockSpaceMockRecorder) Life() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockSpace)(nil).Life))
}

// Name mocks base method.
func (m *MockSpace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSpaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSpace)(nil).Name))
}

// ProviderId mocks base method.
func (m *MockSpace) ProviderId() network.Id {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderId")
	ret0, _ := ret[0].(network.Id)
	return ret0
}

// ProviderId indicates an expected call of ProviderId.
func (mr *MockSpaceMockRecorder) ProviderId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderId", reflect.TypeOf((*MockSpace)(nil).ProviderId))
}

// Remove mocks base method.
func (m *MockSpace) Remove() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSpaceMockRecorder) Remove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSpace)(nil).Remove))
}

// MockConstraints is a mock of Constraints interface.
type MockConstraints struct {
	ctrl     *gomock.Controller
	recorder *MockConstraintsMockRecorder
}

// MockConstraintsMockRecorder is the mock recorder for MockConstraints.
type MockConstraintsMockRecorder struct {
	mock *MockConstraints
}

// NewMockConstraints creates a new mock instance.
func NewMockConstraints(ctrl *gomock.Controller) *MockConstraints {
	mock := &MockConstraints{ctrl: ctrl}
	mock.recorder = &MockConstraintsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConstraints) EXPECT() *MockConstraintsMockRecorder {
	return m.recorder
}
