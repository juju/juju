// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs/manual (interfaces: CommandExec,CommandRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	manual "github.com/juju/juju/environs/manual"
	io "io"
	reflect "reflect"
)

// MockCommandExec is a mock of CommandExec interface
type MockCommandExec struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecMockRecorder
}

// MockCommandExecMockRecorder is the mock recorder for MockCommandExec
type MockCommandExecMockRecorder struct {
	mock *MockCommandExec
}

// NewMockCommandExec creates a new mock instance
func NewMockCommandExec(ctrl *gomock.Controller) *MockCommandExec {
	mock := &MockCommandExec{ctrl: ctrl}
	mock.recorder = &MockCommandExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandExec) EXPECT() *MockCommandExecMockRecorder {
	return m.recorder
}

// Command mocks base method
func (m *MockCommandExec) Command(arg0 string, arg1 []string) manual.CommandRunner {
	ret := m.ctrl.Call(m, "Command", arg0, arg1)
	ret0, _ := ret[0].(manual.CommandRunner)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MockCommandExecMockRecorder) Command(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockCommandExec)(nil).Command), arg0, arg1)
}

// MockCommandRunner is a mock of CommandRunner interface
type MockCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRunnerMockRecorder
}

// MockCommandRunnerMockRecorder is the mock recorder for MockCommandRunner
type MockCommandRunnerMockRecorder struct {
	mock *MockCommandRunner
}

// NewMockCommandRunner creates a new mock instance
func NewMockCommandRunner(ctrl *gomock.Controller) *MockCommandRunner {
	mock := &MockCommandRunner{ctrl: ctrl}
	mock.recorder = &MockCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandRunner) EXPECT() *MockCommandRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockCommandRunner) Run() error {
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockCommandRunnerMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandRunner)(nil).Run))
}

// SetStderr mocks base method
func (m *MockCommandRunner) SetStderr(arg0 io.Writer) {
	m.ctrl.Call(m, "SetStderr", arg0)
}

// SetStderr indicates an expected call of SetStderr
func (mr *MockCommandRunnerMockRecorder) SetStderr(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStderr", reflect.TypeOf((*MockCommandRunner)(nil).SetStderr), arg0)
}

// SetStdin mocks base method
func (m *MockCommandRunner) SetStdin(arg0 io.Reader) {
	m.ctrl.Call(m, "SetStdin", arg0)
}

// SetStdin indicates an expected call of SetStdin
func (mr *MockCommandRunnerMockRecorder) SetStdin(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdin", reflect.TypeOf((*MockCommandRunner)(nil).SetStdin), arg0)
}

// SetStdout mocks base method
func (m *MockCommandRunner) SetStdout(arg0 io.Writer) {
	m.ctrl.Call(m, "SetStdout", arg0)
}

// SetStdout indicates an expected call of SetStdout
func (mr *MockCommandRunnerMockRecorder) SetStdout(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdout", reflect.TypeOf((*MockCommandRunner)(nil).SetStdout), arg0)
}
