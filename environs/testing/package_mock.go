// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs (interfaces: EnvironProvider,CloudEnvironProvider,ProviderSchema,ProviderCredentials,FinalizeCredentialContext,FinalizeCloudContext,CloudFinalizer,CloudDetector,CloudRegionDetector,ConfigGetter,CloudDestroyer,Environ,InstancePrechecker,Firewaller,InstanceTagger,InstanceTypesFetcher,Upgrader,UpgradeStep,DefaultConstraintsChecker,ProviderCredentialsRegister,RequestFinalizeCredential,NetworkingEnviron)
//
// Generated by this command:
//
//	mockgen -typed -package testing -destination testing/package_mock.go -write_package_comment=false github.com/juju/juju/environs EnvironProvider,CloudEnvironProvider,ProviderSchema,ProviderCredentials,FinalizeCredentialContext,FinalizeCloudContext,CloudFinalizer,CloudDetector,CloudRegionDetector,ConfigGetter,CloudDestroyer,Environ,InstancePrechecker,Firewaller,InstanceTagger,InstanceTypesFetcher,Upgrader,UpgradeStep,DefaultConstraintsChecker,ProviderCredentialsRegister,RequestFinalizeCredential,NetworkingEnviron
//

package testing

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	jsonschema "github.com/juju/jsonschema"
	cloud "github.com/juju/juju/cloud"
	constraints "github.com/juju/juju/core/constraints"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	firewall "github.com/juju/juju/core/network/firewall"
	environs "github.com/juju/juju/environs"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	config "github.com/juju/juju/environs/config"
	envcontext "github.com/juju/juju/environs/envcontext"
	instances "github.com/juju/juju/environs/instances"
	configschema "github.com/juju/juju/internal/configschema"
	storage "github.com/juju/juju/internal/storage"
	names "github.com/juju/names/v6"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironProvider is a mock of EnvironProvider interface.
type MockEnvironProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironProviderMockRecorder
}

// MockEnvironProviderMockRecorder is the mock recorder for MockEnvironProvider.
type MockEnvironProviderMockRecorder struct {
	mock *MockEnvironProvider
}

// NewMockEnvironProvider creates a new mock instance.
func NewMockEnvironProvider(ctrl *gomock.Controller) *MockEnvironProvider {
	mock := &MockEnvironProvider{ctrl: ctrl}
	mock.recorder = &MockEnvironProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironProvider) EXPECT() *MockEnvironProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnvironProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// CloudSchema mocks base method.
func (m *MockEnvironProvider) CloudSchema() *jsonschema.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSchema")
	ret0, _ := ret[0].(*jsonschema.Schema)
	return ret0
}

// CloudSchema indicates an expected call of CloudSchema.
func (mr *MockEnvironProviderMockRecorder) CloudSchema() *MockEnvironProviderCloudSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSchema", reflect.TypeOf((*MockEnvironProvider)(nil).CloudSchema))
	return &MockEnvironProviderCloudSchemaCall{Call: call}
}

// MockEnvironProviderCloudSchemaCall wrap *gomock.Call
type MockEnvironProviderCloudSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderCloudSchemaCall) Return(arg0 *jsonschema.Schema) *MockEnvironProviderCloudSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderCloudSchemaCall) Do(f func() *jsonschema.Schema) *MockEnvironProviderCloudSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderCloudSchemaCall) DoAndReturn(f func() *jsonschema.Schema) *MockEnvironProviderCloudSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CredentialSchemas mocks base method.
func (m *MockEnvironProvider) CredentialSchemas() map[cloud.AuthType]cloud.CredentialSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialSchemas")
	ret0, _ := ret[0].(map[cloud.AuthType]cloud.CredentialSchema)
	return ret0
}

// CredentialSchemas indicates an expected call of CredentialSchemas.
func (mr *MockEnvironProviderMockRecorder) CredentialSchemas() *MockEnvironProviderCredentialSchemasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialSchemas", reflect.TypeOf((*MockEnvironProvider)(nil).CredentialSchemas))
	return &MockEnvironProviderCredentialSchemasCall{Call: call}
}

// MockEnvironProviderCredentialSchemasCall wrap *gomock.Call
type MockEnvironProviderCredentialSchemasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderCredentialSchemasCall) Return(arg0 map[cloud.AuthType]cloud.CredentialSchema) *MockEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderCredentialSchemasCall) Do(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderCredentialSchemasCall) DoAndReturn(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetectCredentials mocks base method.
func (m *MockEnvironProvider) DetectCredentials(arg0 string) (*cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCredentials", arg0)
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCredentials indicates an expected call of DetectCredentials.
func (mr *MockEnvironProviderMockRecorder) DetectCredentials(arg0 any) *MockEnvironProviderDetectCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCredentials", reflect.TypeOf((*MockEnvironProvider)(nil).DetectCredentials), arg0)
	return &MockEnvironProviderDetectCredentialsCall{Call: call}
}

// MockEnvironProviderDetectCredentialsCall wrap *gomock.Call
type MockEnvironProviderDetectCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderDetectCredentialsCall) Return(arg0 *cloud.CloudCredential, arg1 error) *MockEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderDetectCredentialsCall) Do(f func(string) (*cloud.CloudCredential, error)) *MockEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderDetectCredentialsCall) DoAndReturn(f func(string) (*cloud.CloudCredential, error)) *MockEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FinalizeCredential mocks base method.
func (m *MockEnvironProvider) FinalizeCredential(arg0 environs.FinalizeCredentialContext, arg1 environs.FinalizeCredentialParams) (*cloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCredential", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCredential indicates an expected call of FinalizeCredential.
func (mr *MockEnvironProviderMockRecorder) FinalizeCredential(arg0, arg1 any) *MockEnvironProviderFinalizeCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCredential", reflect.TypeOf((*MockEnvironProvider)(nil).FinalizeCredential), arg0, arg1)
	return &MockEnvironProviderFinalizeCredentialCall{Call: call}
}

// MockEnvironProviderFinalizeCredentialCall wrap *gomock.Call
type MockEnvironProviderFinalizeCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderFinalizeCredentialCall) Return(arg0 *cloud.Credential, arg1 error) *MockEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderFinalizeCredentialCall) Do(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderFinalizeCredentialCall) DoAndReturn(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *MockEnvironProvider) Ping(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockEnvironProviderMockRecorder) Ping(arg0, arg1 any) *MockEnvironProviderPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockEnvironProvider)(nil).Ping), arg0, arg1)
	return &MockEnvironProviderPingCall{Call: call}
}

// MockEnvironProviderPingCall wrap *gomock.Call
type MockEnvironProviderPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderPingCall) Return(arg0 error) *MockEnvironProviderPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderPingCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockEnvironProviderPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderPingCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockEnvironProviderPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockEnvironProvider) Validate(arg0 context.Context, arg1, arg2 *config.Config) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockEnvironProviderMockRecorder) Validate(arg0, arg1, arg2 any) *MockEnvironProviderValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockEnvironProvider)(nil).Validate), arg0, arg1, arg2)
	return &MockEnvironProviderValidateCall{Call: call}
}

// MockEnvironProviderValidateCall wrap *gomock.Call
type MockEnvironProviderValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderValidateCall) Return(arg0 *config.Config, arg1 error) *MockEnvironProviderValidateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderValidateCall) Do(f func(context.Context, *config.Config, *config.Config) (*config.Config, error)) *MockEnvironProviderValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderValidateCall) DoAndReturn(f func(context.Context, *config.Config, *config.Config) (*config.Config, error)) *MockEnvironProviderValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateCloud mocks base method.
func (m *MockEnvironProvider) ValidateCloud(arg0 context.Context, arg1 cloudspec.CloudSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCloud", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCloud indicates an expected call of ValidateCloud.
func (mr *MockEnvironProviderMockRecorder) ValidateCloud(arg0, arg1 any) *MockEnvironProviderValidateCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCloud", reflect.TypeOf((*MockEnvironProvider)(nil).ValidateCloud), arg0, arg1)
	return &MockEnvironProviderValidateCloudCall{Call: call}
}

// MockEnvironProviderValidateCloudCall wrap *gomock.Call
type MockEnvironProviderValidateCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderValidateCloudCall) Return(arg0 error) *MockEnvironProviderValidateCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderValidateCloudCall) Do(f func(context.Context, cloudspec.CloudSpec) error) *MockEnvironProviderValidateCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderValidateCloudCall) DoAndReturn(f func(context.Context, cloudspec.CloudSpec) error) *MockEnvironProviderValidateCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Version mocks base method.
func (m *MockEnvironProvider) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockEnvironProviderMockRecorder) Version() *MockEnvironProviderVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEnvironProvider)(nil).Version))
	return &MockEnvironProviderVersionCall{Call: call}
}

// MockEnvironProviderVersionCall wrap *gomock.Call
type MockEnvironProviderVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderVersionCall) Return(arg0 int) *MockEnvironProviderVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderVersionCall) Do(f func() int) *MockEnvironProviderVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderVersionCall) DoAndReturn(f func() int) *MockEnvironProviderVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudEnvironProvider is a mock of CloudEnvironProvider interface.
type MockCloudEnvironProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCloudEnvironProviderMockRecorder
}

// MockCloudEnvironProviderMockRecorder is the mock recorder for MockCloudEnvironProvider.
type MockCloudEnvironProviderMockRecorder struct {
	mock *MockCloudEnvironProvider
}

// NewMockCloudEnvironProvider creates a new mock instance.
func NewMockCloudEnvironProvider(ctrl *gomock.Controller) *MockCloudEnvironProvider {
	mock := &MockCloudEnvironProvider{ctrl: ctrl}
	mock.recorder = &MockCloudEnvironProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudEnvironProvider) EXPECT() *MockCloudEnvironProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudEnvironProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// CloudSchema mocks base method.
func (m *MockCloudEnvironProvider) CloudSchema() *jsonschema.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSchema")
	ret0, _ := ret[0].(*jsonschema.Schema)
	return ret0
}

// CloudSchema indicates an expected call of CloudSchema.
func (mr *MockCloudEnvironProviderMockRecorder) CloudSchema() *MockCloudEnvironProviderCloudSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSchema", reflect.TypeOf((*MockCloudEnvironProvider)(nil).CloudSchema))
	return &MockCloudEnvironProviderCloudSchemaCall{Call: call}
}

// MockCloudEnvironProviderCloudSchemaCall wrap *gomock.Call
type MockCloudEnvironProviderCloudSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderCloudSchemaCall) Return(arg0 *jsonschema.Schema) *MockCloudEnvironProviderCloudSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderCloudSchemaCall) Do(f func() *jsonschema.Schema) *MockCloudEnvironProviderCloudSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderCloudSchemaCall) DoAndReturn(f func() *jsonschema.Schema) *MockCloudEnvironProviderCloudSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CredentialSchemas mocks base method.
func (m *MockCloudEnvironProvider) CredentialSchemas() map[cloud.AuthType]cloud.CredentialSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialSchemas")
	ret0, _ := ret[0].(map[cloud.AuthType]cloud.CredentialSchema)
	return ret0
}

// CredentialSchemas indicates an expected call of CredentialSchemas.
func (mr *MockCloudEnvironProviderMockRecorder) CredentialSchemas() *MockCloudEnvironProviderCredentialSchemasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialSchemas", reflect.TypeOf((*MockCloudEnvironProvider)(nil).CredentialSchemas))
	return &MockCloudEnvironProviderCredentialSchemasCall{Call: call}
}

// MockCloudEnvironProviderCredentialSchemasCall wrap *gomock.Call
type MockCloudEnvironProviderCredentialSchemasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderCredentialSchemasCall) Return(arg0 map[cloud.AuthType]cloud.CredentialSchema) *MockCloudEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderCredentialSchemasCall) Do(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockCloudEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderCredentialSchemasCall) DoAndReturn(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockCloudEnvironProviderCredentialSchemasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetectCredentials mocks base method.
func (m *MockCloudEnvironProvider) DetectCredentials(arg0 string) (*cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCredentials", arg0)
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCredentials indicates an expected call of DetectCredentials.
func (mr *MockCloudEnvironProviderMockRecorder) DetectCredentials(arg0 any) *MockCloudEnvironProviderDetectCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCredentials", reflect.TypeOf((*MockCloudEnvironProvider)(nil).DetectCredentials), arg0)
	return &MockCloudEnvironProviderDetectCredentialsCall{Call: call}
}

// MockCloudEnvironProviderDetectCredentialsCall wrap *gomock.Call
type MockCloudEnvironProviderDetectCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderDetectCredentialsCall) Return(arg0 *cloud.CloudCredential, arg1 error) *MockCloudEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderDetectCredentialsCall) Do(f func(string) (*cloud.CloudCredential, error)) *MockCloudEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderDetectCredentialsCall) DoAndReturn(f func(string) (*cloud.CloudCredential, error)) *MockCloudEnvironProviderDetectCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FinalizeCredential mocks base method.
func (m *MockCloudEnvironProvider) FinalizeCredential(arg0 environs.FinalizeCredentialContext, arg1 environs.FinalizeCredentialParams) (*cloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCredential", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCredential indicates an expected call of FinalizeCredential.
func (mr *MockCloudEnvironProviderMockRecorder) FinalizeCredential(arg0, arg1 any) *MockCloudEnvironProviderFinalizeCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCredential", reflect.TypeOf((*MockCloudEnvironProvider)(nil).FinalizeCredential), arg0, arg1)
	return &MockCloudEnvironProviderFinalizeCredentialCall{Call: call}
}

// MockCloudEnvironProviderFinalizeCredentialCall wrap *gomock.Call
type MockCloudEnvironProviderFinalizeCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderFinalizeCredentialCall) Return(arg0 *cloud.Credential, arg1 error) *MockCloudEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderFinalizeCredentialCall) Do(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockCloudEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderFinalizeCredentialCall) DoAndReturn(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockCloudEnvironProviderFinalizeCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockCloudEnvironProvider) Open(arg0 context.Context, arg1 environs.OpenParams) (environs.Environ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(environs.Environ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockCloudEnvironProviderMockRecorder) Open(arg0, arg1 any) *MockCloudEnvironProviderOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Open), arg0, arg1)
	return &MockCloudEnvironProviderOpenCall{Call: call}
}

// MockCloudEnvironProviderOpenCall wrap *gomock.Call
type MockCloudEnvironProviderOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderOpenCall) Return(arg0 environs.Environ, arg1 error) *MockCloudEnvironProviderOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderOpenCall) Do(f func(context.Context, environs.OpenParams) (environs.Environ, error)) *MockCloudEnvironProviderOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderOpenCall) DoAndReturn(f func(context.Context, environs.OpenParams) (environs.Environ, error)) *MockCloudEnvironProviderOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *MockCloudEnvironProvider) Ping(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCloudEnvironProviderMockRecorder) Ping(arg0, arg1 any) *MockCloudEnvironProviderPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Ping), arg0, arg1)
	return &MockCloudEnvironProviderPingCall{Call: call}
}

// MockCloudEnvironProviderPingCall wrap *gomock.Call
type MockCloudEnvironProviderPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderPingCall) Return(arg0 error) *MockCloudEnvironProviderPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderPingCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockCloudEnvironProviderPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderPingCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockCloudEnvironProviderPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockCloudEnvironProvider) Validate(arg0 context.Context, arg1, arg2 *config.Config) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockCloudEnvironProviderMockRecorder) Validate(arg0, arg1, arg2 any) *MockCloudEnvironProviderValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Validate), arg0, arg1, arg2)
	return &MockCloudEnvironProviderValidateCall{Call: call}
}

// MockCloudEnvironProviderValidateCall wrap *gomock.Call
type MockCloudEnvironProviderValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderValidateCall) Return(arg0 *config.Config, arg1 error) *MockCloudEnvironProviderValidateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderValidateCall) Do(f func(context.Context, *config.Config, *config.Config) (*config.Config, error)) *MockCloudEnvironProviderValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderValidateCall) DoAndReturn(f func(context.Context, *config.Config, *config.Config) (*config.Config, error)) *MockCloudEnvironProviderValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateCloud mocks base method.
func (m *MockCloudEnvironProvider) ValidateCloud(arg0 context.Context, arg1 cloudspec.CloudSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCloud", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCloud indicates an expected call of ValidateCloud.
func (mr *MockCloudEnvironProviderMockRecorder) ValidateCloud(arg0, arg1 any) *MockCloudEnvironProviderValidateCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCloud", reflect.TypeOf((*MockCloudEnvironProvider)(nil).ValidateCloud), arg0, arg1)
	return &MockCloudEnvironProviderValidateCloudCall{Call: call}
}

// MockCloudEnvironProviderValidateCloudCall wrap *gomock.Call
type MockCloudEnvironProviderValidateCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderValidateCloudCall) Return(arg0 error) *MockCloudEnvironProviderValidateCloudCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderValidateCloudCall) Do(f func(context.Context, cloudspec.CloudSpec) error) *MockCloudEnvironProviderValidateCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderValidateCloudCall) DoAndReturn(f func(context.Context, cloudspec.CloudSpec) error) *MockCloudEnvironProviderValidateCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Version mocks base method.
func (m *MockCloudEnvironProvider) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockCloudEnvironProviderMockRecorder) Version() *MockCloudEnvironProviderVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCloudEnvironProvider)(nil).Version))
	return &MockCloudEnvironProviderVersionCall{Call: call}
}

// MockCloudEnvironProviderVersionCall wrap *gomock.Call
type MockCloudEnvironProviderVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudEnvironProviderVersionCall) Return(arg0 int) *MockCloudEnvironProviderVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudEnvironProviderVersionCall) Do(f func() int) *MockCloudEnvironProviderVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudEnvironProviderVersionCall) DoAndReturn(f func() int) *MockCloudEnvironProviderVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderSchema is a mock of ProviderSchema interface.
type MockProviderSchema struct {
	ctrl     *gomock.Controller
	recorder *MockProviderSchemaMockRecorder
}

// MockProviderSchemaMockRecorder is the mock recorder for MockProviderSchema.
type MockProviderSchemaMockRecorder struct {
	mock *MockProviderSchema
}

// NewMockProviderSchema creates a new mock instance.
func NewMockProviderSchema(ctrl *gomock.Controller) *MockProviderSchema {
	mock := &MockProviderSchema{ctrl: ctrl}
	mock.recorder = &MockProviderSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderSchema) EXPECT() *MockProviderSchemaMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProviderSchema) ISGOMOCK() struct{} {
	return struct{}{}
}

// Schema mocks base method.
func (m *MockProviderSchema) Schema() configschema.Fields {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(configschema.Fields)
	return ret0
}

// Schema indicates an expected call of Schema.
func (mr *MockProviderSchemaMockRecorder) Schema() *MockProviderSchemaSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockProviderSchema)(nil).Schema))
	return &MockProviderSchemaSchemaCall{Call: call}
}

// MockProviderSchemaSchemaCall wrap *gomock.Call
type MockProviderSchemaSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderSchemaSchemaCall) Return(arg0 configschema.Fields) *MockProviderSchemaSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderSchemaSchemaCall) Do(f func() configschema.Fields) *MockProviderSchemaSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderSchemaSchemaCall) DoAndReturn(f func() configschema.Fields) *MockProviderSchemaSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderCredentials is a mock of ProviderCredentials interface.
type MockProviderCredentials struct {
	ctrl     *gomock.Controller
	recorder *MockProviderCredentialsMockRecorder
}

// MockProviderCredentialsMockRecorder is the mock recorder for MockProviderCredentials.
type MockProviderCredentialsMockRecorder struct {
	mock *MockProviderCredentials
}

// NewMockProviderCredentials creates a new mock instance.
func NewMockProviderCredentials(ctrl *gomock.Controller) *MockProviderCredentials {
	mock := &MockProviderCredentials{ctrl: ctrl}
	mock.recorder = &MockProviderCredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderCredentials) EXPECT() *MockProviderCredentialsMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProviderCredentials) ISGOMOCK() struct{} {
	return struct{}{}
}

// CredentialSchemas mocks base method.
func (m *MockProviderCredentials) CredentialSchemas() map[cloud.AuthType]cloud.CredentialSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialSchemas")
	ret0, _ := ret[0].(map[cloud.AuthType]cloud.CredentialSchema)
	return ret0
}

// CredentialSchemas indicates an expected call of CredentialSchemas.
func (mr *MockProviderCredentialsMockRecorder) CredentialSchemas() *MockProviderCredentialsCredentialSchemasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialSchemas", reflect.TypeOf((*MockProviderCredentials)(nil).CredentialSchemas))
	return &MockProviderCredentialsCredentialSchemasCall{Call: call}
}

// MockProviderCredentialsCredentialSchemasCall wrap *gomock.Call
type MockProviderCredentialsCredentialSchemasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderCredentialsCredentialSchemasCall) Return(arg0 map[cloud.AuthType]cloud.CredentialSchema) *MockProviderCredentialsCredentialSchemasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderCredentialsCredentialSchemasCall) Do(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockProviderCredentialsCredentialSchemasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderCredentialsCredentialSchemasCall) DoAndReturn(f func() map[cloud.AuthType]cloud.CredentialSchema) *MockProviderCredentialsCredentialSchemasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetectCredentials mocks base method.
func (m *MockProviderCredentials) DetectCredentials(arg0 string) (*cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCredentials", arg0)
	ret0, _ := ret[0].(*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCredentials indicates an expected call of DetectCredentials.
func (mr *MockProviderCredentialsMockRecorder) DetectCredentials(arg0 any) *MockProviderCredentialsDetectCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCredentials", reflect.TypeOf((*MockProviderCredentials)(nil).DetectCredentials), arg0)
	return &MockProviderCredentialsDetectCredentialsCall{Call: call}
}

// MockProviderCredentialsDetectCredentialsCall wrap *gomock.Call
type MockProviderCredentialsDetectCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderCredentialsDetectCredentialsCall) Return(arg0 *cloud.CloudCredential, arg1 error) *MockProviderCredentialsDetectCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderCredentialsDetectCredentialsCall) Do(f func(string) (*cloud.CloudCredential, error)) *MockProviderCredentialsDetectCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderCredentialsDetectCredentialsCall) DoAndReturn(f func(string) (*cloud.CloudCredential, error)) *MockProviderCredentialsDetectCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FinalizeCredential mocks base method.
func (m *MockProviderCredentials) FinalizeCredential(arg0 environs.FinalizeCredentialContext, arg1 environs.FinalizeCredentialParams) (*cloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCredential", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCredential indicates an expected call of FinalizeCredential.
func (mr *MockProviderCredentialsMockRecorder) FinalizeCredential(arg0, arg1 any) *MockProviderCredentialsFinalizeCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCredential", reflect.TypeOf((*MockProviderCredentials)(nil).FinalizeCredential), arg0, arg1)
	return &MockProviderCredentialsFinalizeCredentialCall{Call: call}
}

// MockProviderCredentialsFinalizeCredentialCall wrap *gomock.Call
type MockProviderCredentialsFinalizeCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderCredentialsFinalizeCredentialCall) Return(arg0 *cloud.Credential, arg1 error) *MockProviderCredentialsFinalizeCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderCredentialsFinalizeCredentialCall) Do(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockProviderCredentialsFinalizeCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderCredentialsFinalizeCredentialCall) DoAndReturn(f func(environs.FinalizeCredentialContext, environs.FinalizeCredentialParams) (*cloud.Credential, error)) *MockProviderCredentialsFinalizeCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFinalizeCredentialContext is a mock of FinalizeCredentialContext interface.
type MockFinalizeCredentialContext struct {
	ctrl     *gomock.Controller
	recorder *MockFinalizeCredentialContextMockRecorder
}

// MockFinalizeCredentialContextMockRecorder is the mock recorder for MockFinalizeCredentialContext.
type MockFinalizeCredentialContextMockRecorder struct {
	mock *MockFinalizeCredentialContext
}

// NewMockFinalizeCredentialContext creates a new mock instance.
func NewMockFinalizeCredentialContext(ctrl *gomock.Controller) *MockFinalizeCredentialContext {
	mock := &MockFinalizeCredentialContext{ctrl: ctrl}
	mock.recorder = &MockFinalizeCredentialContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalizeCredentialContext) EXPECT() *MockFinalizeCredentialContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFinalizeCredentialContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetStderr mocks base method.
func (m *MockFinalizeCredentialContext) GetStderr() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStderr")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// GetStderr indicates an expected call of GetStderr.
func (mr *MockFinalizeCredentialContextMockRecorder) GetStderr() *MockFinalizeCredentialContextGetStderrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStderr", reflect.TypeOf((*MockFinalizeCredentialContext)(nil).GetStderr))
	return &MockFinalizeCredentialContextGetStderrCall{Call: call}
}

// MockFinalizeCredentialContextGetStderrCall wrap *gomock.Call
type MockFinalizeCredentialContextGetStderrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizeCredentialContextGetStderrCall) Return(arg0 io.Writer) *MockFinalizeCredentialContextGetStderrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizeCredentialContextGetStderrCall) Do(f func() io.Writer) *MockFinalizeCredentialContextGetStderrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizeCredentialContextGetStderrCall) DoAndReturn(f func() io.Writer) *MockFinalizeCredentialContextGetStderrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verbosef mocks base method.
func (m *MockFinalizeCredentialContext) Verbosef(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Verbosef", varargs...)
}

// Verbosef indicates an expected call of Verbosef.
func (mr *MockFinalizeCredentialContextMockRecorder) Verbosef(arg0 any, arg1 ...any) *MockFinalizeCredentialContextVerbosefCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verbosef", reflect.TypeOf((*MockFinalizeCredentialContext)(nil).Verbosef), varargs...)
	return &MockFinalizeCredentialContextVerbosefCall{Call: call}
}

// MockFinalizeCredentialContextVerbosefCall wrap *gomock.Call
type MockFinalizeCredentialContextVerbosefCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizeCredentialContextVerbosefCall) Return() *MockFinalizeCredentialContextVerbosefCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizeCredentialContextVerbosefCall) Do(f func(string, ...any)) *MockFinalizeCredentialContextVerbosefCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizeCredentialContextVerbosefCall) DoAndReturn(f func(string, ...any)) *MockFinalizeCredentialContextVerbosefCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFinalizeCloudContext is a mock of FinalizeCloudContext interface.
type MockFinalizeCloudContext struct {
	ctrl     *gomock.Controller
	recorder *MockFinalizeCloudContextMockRecorder
}

// MockFinalizeCloudContextMockRecorder is the mock recorder for MockFinalizeCloudContext.
type MockFinalizeCloudContextMockRecorder struct {
	mock *MockFinalizeCloudContext
}

// NewMockFinalizeCloudContext creates a new mock instance.
func NewMockFinalizeCloudContext(ctrl *gomock.Controller) *MockFinalizeCloudContext {
	mock := &MockFinalizeCloudContext{ctrl: ctrl}
	mock.recorder = &MockFinalizeCloudContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalizeCloudContext) EXPECT() *MockFinalizeCloudContextMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFinalizeCloudContext) ISGOMOCK() struct{} {
	return struct{}{}
}

// Deadline mocks base method.
func (m *MockFinalizeCloudContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockFinalizeCloudContextMockRecorder) Deadline() *MockFinalizeCloudContextDeadlineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockFinalizeCloudContext)(nil).Deadline))
	return &MockFinalizeCloudContextDeadlineCall{Call: call}
}

// MockFinalizeCloudContextDeadlineCall wrap *gomock.Call
type MockFinalizeCloudContextDeadlineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizeCloudContextDeadlineCall) Return(arg0 time.Time, arg1 bool) *MockFinalizeCloudContextDeadlineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizeCloudContextDeadlineCall) Do(f func() (time.Time, bool)) *MockFinalizeCloudContextDeadlineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizeCloudContextDeadlineCall) DoAndReturn(f func() (time.Time, bool)) *MockFinalizeCloudContextDeadlineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockFinalizeCloudContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockFinalizeCloudContextMockRecorder) Done() *MockFinalizeCloudContextDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockFinalizeCloudContext)(nil).Done))
	return &MockFinalizeCloudContextDoneCall{Call: call}
}

// MockFinalizeCloudContextDoneCall wrap *gomock.Call
type MockFinalizeCloudContextDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizeCloudContextDoneCall) Return(arg0 <-chan struct{}) *MockFinalizeCloudContextDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizeCloudContextDoneCall) Do(f func() <-chan struct{}) *MockFinalizeCloudContextDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizeCloudContextDoneCall) DoAndReturn(f func() <-chan struct{}) *MockFinalizeCloudContextDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Err mocks base method.
func (m *MockFinalizeCloudContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockFinalizeCloudContextMockRecorder) Err() *MockFinalizeCloudContextErrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockFinalizeCloudContext)(nil).Err))
	return &MockFinalizeCloudContextErrCall{Call: call}
}

// MockFinalizeCloudContextErrCall wrap *gomock.Call
type MockFinalizeCloudContextErrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizeCloudContextErrCall) Return(arg0 error) *MockFinalizeCloudContextErrCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizeCloudContextErrCall) Do(f func() error) *MockFinalizeCloudContextErrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizeCloudContextErrCall) DoAndReturn(f func() error) *MockFinalizeCloudContextErrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockFinalizeCloudContext) Value(arg0 any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockFinalizeCloudContextMockRecorder) Value(arg0 any) *MockFinalizeCloudContextValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockFinalizeCloudContext)(nil).Value), arg0)
	return &MockFinalizeCloudContextValueCall{Call: call}
}

// MockFinalizeCloudContextValueCall wrap *gomock.Call
type MockFinalizeCloudContextValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizeCloudContextValueCall) Return(arg0 any) *MockFinalizeCloudContextValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizeCloudContextValueCall) Do(f func(any) any) *MockFinalizeCloudContextValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizeCloudContextValueCall) DoAndReturn(f func(any) any) *MockFinalizeCloudContextValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verbosef mocks base method.
func (m *MockFinalizeCloudContext) Verbosef(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Verbosef", varargs...)
}

// Verbosef indicates an expected call of Verbosef.
func (mr *MockFinalizeCloudContextMockRecorder) Verbosef(arg0 any, arg1 ...any) *MockFinalizeCloudContextVerbosefCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verbosef", reflect.TypeOf((*MockFinalizeCloudContext)(nil).Verbosef), varargs...)
	return &MockFinalizeCloudContextVerbosefCall{Call: call}
}

// MockFinalizeCloudContextVerbosefCall wrap *gomock.Call
type MockFinalizeCloudContextVerbosefCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFinalizeCloudContextVerbosefCall) Return() *MockFinalizeCloudContextVerbosefCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFinalizeCloudContextVerbosefCall) Do(f func(string, ...any)) *MockFinalizeCloudContextVerbosefCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFinalizeCloudContextVerbosefCall) DoAndReturn(f func(string, ...any)) *MockFinalizeCloudContextVerbosefCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudFinalizer is a mock of CloudFinalizer interface.
type MockCloudFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFinalizerMockRecorder
}

// MockCloudFinalizerMockRecorder is the mock recorder for MockCloudFinalizer.
type MockCloudFinalizerMockRecorder struct {
	mock *MockCloudFinalizer
}

// NewMockCloudFinalizer creates a new mock instance.
func NewMockCloudFinalizer(ctrl *gomock.Controller) *MockCloudFinalizer {
	mock := &MockCloudFinalizer{ctrl: ctrl}
	mock.recorder = &MockCloudFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudFinalizer) EXPECT() *MockCloudFinalizerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudFinalizer) ISGOMOCK() struct{} {
	return struct{}{}
}

// FinalizeCloud mocks base method.
func (m *MockCloudFinalizer) FinalizeCloud(arg0 environs.FinalizeCloudContext, arg1 cloud.Cloud) (cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCloud", arg0, arg1)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCloud indicates an expected call of FinalizeCloud.
func (mr *MockCloudFinalizerMockRecorder) FinalizeCloud(arg0, arg1 any) *MockCloudFinalizerFinalizeCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCloud", reflect.TypeOf((*MockCloudFinalizer)(nil).FinalizeCloud), arg0, arg1)
	return &MockCloudFinalizerFinalizeCloudCall{Call: call}
}

// MockCloudFinalizerFinalizeCloudCall wrap *gomock.Call
type MockCloudFinalizerFinalizeCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudFinalizerFinalizeCloudCall) Return(arg0 cloud.Cloud, arg1 error) *MockCloudFinalizerFinalizeCloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudFinalizerFinalizeCloudCall) Do(f func(environs.FinalizeCloudContext, cloud.Cloud) (cloud.Cloud, error)) *MockCloudFinalizerFinalizeCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudFinalizerFinalizeCloudCall) DoAndReturn(f func(environs.FinalizeCloudContext, cloud.Cloud) (cloud.Cloud, error)) *MockCloudFinalizerFinalizeCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudDetector is a mock of CloudDetector interface.
type MockCloudDetector struct {
	ctrl     *gomock.Controller
	recorder *MockCloudDetectorMockRecorder
}

// MockCloudDetectorMockRecorder is the mock recorder for MockCloudDetector.
type MockCloudDetectorMockRecorder struct {
	mock *MockCloudDetector
}

// NewMockCloudDetector creates a new mock instance.
func NewMockCloudDetector(ctrl *gomock.Controller) *MockCloudDetector {
	mock := &MockCloudDetector{ctrl: ctrl}
	mock.recorder = &MockCloudDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudDetector) EXPECT() *MockCloudDetectorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudDetector) ISGOMOCK() struct{} {
	return struct{}{}
}

// DetectCloud mocks base method.
func (m *MockCloudDetector) DetectCloud(arg0 string) (cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCloud", arg0)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCloud indicates an expected call of DetectCloud.
func (mr *MockCloudDetectorMockRecorder) DetectCloud(arg0 any) *MockCloudDetectorDetectCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCloud", reflect.TypeOf((*MockCloudDetector)(nil).DetectCloud), arg0)
	return &MockCloudDetectorDetectCloudCall{Call: call}
}

// MockCloudDetectorDetectCloudCall wrap *gomock.Call
type MockCloudDetectorDetectCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudDetectorDetectCloudCall) Return(arg0 cloud.Cloud, arg1 error) *MockCloudDetectorDetectCloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudDetectorDetectCloudCall) Do(f func(string) (cloud.Cloud, error)) *MockCloudDetectorDetectCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudDetectorDetectCloudCall) DoAndReturn(f func(string) (cloud.Cloud, error)) *MockCloudDetectorDetectCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetectClouds mocks base method.
func (m *MockCloudDetector) DetectClouds() ([]cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectClouds")
	ret0, _ := ret[0].([]cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectClouds indicates an expected call of DetectClouds.
func (mr *MockCloudDetectorMockRecorder) DetectClouds() *MockCloudDetectorDetectCloudsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectClouds", reflect.TypeOf((*MockCloudDetector)(nil).DetectClouds))
	return &MockCloudDetectorDetectCloudsCall{Call: call}
}

// MockCloudDetectorDetectCloudsCall wrap *gomock.Call
type MockCloudDetectorDetectCloudsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudDetectorDetectCloudsCall) Return(arg0 []cloud.Cloud, arg1 error) *MockCloudDetectorDetectCloudsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudDetectorDetectCloudsCall) Do(f func() ([]cloud.Cloud, error)) *MockCloudDetectorDetectCloudsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudDetectorDetectCloudsCall) DoAndReturn(f func() ([]cloud.Cloud, error)) *MockCloudDetectorDetectCloudsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudRegionDetector is a mock of CloudRegionDetector interface.
type MockCloudRegionDetector struct {
	ctrl     *gomock.Controller
	recorder *MockCloudRegionDetectorMockRecorder
}

// MockCloudRegionDetectorMockRecorder is the mock recorder for MockCloudRegionDetector.
type MockCloudRegionDetectorMockRecorder struct {
	mock *MockCloudRegionDetector
}

// NewMockCloudRegionDetector creates a new mock instance.
func NewMockCloudRegionDetector(ctrl *gomock.Controller) *MockCloudRegionDetector {
	mock := &MockCloudRegionDetector{ctrl: ctrl}
	mock.recorder = &MockCloudRegionDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudRegionDetector) EXPECT() *MockCloudRegionDetectorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudRegionDetector) ISGOMOCK() struct{} {
	return struct{}{}
}

// DetectRegions mocks base method.
func (m *MockCloudRegionDetector) DetectRegions() ([]cloud.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectRegions")
	ret0, _ := ret[0].([]cloud.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectRegions indicates an expected call of DetectRegions.
func (mr *MockCloudRegionDetectorMockRecorder) DetectRegions() *MockCloudRegionDetectorDetectRegionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectRegions", reflect.TypeOf((*MockCloudRegionDetector)(nil).DetectRegions))
	return &MockCloudRegionDetectorDetectRegionsCall{Call: call}
}

// MockCloudRegionDetectorDetectRegionsCall wrap *gomock.Call
type MockCloudRegionDetectorDetectRegionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudRegionDetectorDetectRegionsCall) Return(arg0 []cloud.Region, arg1 error) *MockCloudRegionDetectorDetectRegionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudRegionDetectorDetectRegionsCall) Do(f func() ([]cloud.Region, error)) *MockCloudRegionDetectorDetectRegionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudRegionDetectorDetectRegionsCall) DoAndReturn(f func() ([]cloud.Region, error)) *MockCloudRegionDetectorDetectRegionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockConfigGetter) ISGOMOCK() struct{} {
	return struct{}{}
}

// Config mocks base method.
func (m *MockConfigGetter) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockConfigGetterMockRecorder) Config() *MockConfigGetterConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockConfigGetter)(nil).Config))
	return &MockConfigGetterConfigCall{Call: call}
}

// MockConfigGetterConfigCall wrap *gomock.Call
type MockConfigGetterConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigGetterConfigCall) Return(arg0 *config.Config) *MockConfigGetterConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigGetterConfigCall) Do(f func() *config.Config) *MockConfigGetterConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigGetterConfigCall) DoAndReturn(f func() *config.Config) *MockConfigGetterConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudDestroyer is a mock of CloudDestroyer interface.
type MockCloudDestroyer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudDestroyerMockRecorder
}

// MockCloudDestroyerMockRecorder is the mock recorder for MockCloudDestroyer.
type MockCloudDestroyerMockRecorder struct {
	mock *MockCloudDestroyer
}

// NewMockCloudDestroyer creates a new mock instance.
func NewMockCloudDestroyer(ctrl *gomock.Controller) *MockCloudDestroyer {
	mock := &MockCloudDestroyer{ctrl: ctrl}
	mock.recorder = &MockCloudDestroyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudDestroyer) EXPECT() *MockCloudDestroyerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCloudDestroyer) ISGOMOCK() struct{} {
	return struct{}{}
}

// Destroy mocks base method.
func (m *MockCloudDestroyer) Destroy(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockCloudDestroyerMockRecorder) Destroy(arg0 any) *MockCloudDestroyerDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockCloudDestroyer)(nil).Destroy), arg0)
	return &MockCloudDestroyerDestroyCall{Call: call}
}

// MockCloudDestroyerDestroyCall wrap *gomock.Call
type MockCloudDestroyerDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudDestroyerDestroyCall) Return(arg0 error) *MockCloudDestroyerDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudDestroyerDestroyCall) Do(f func(envcontext.ProviderCallContext) error) *MockCloudDestroyerDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudDestroyerDestroyCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockCloudDestroyerDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEnviron is a mock of Environ interface.
type MockEnviron struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironMockRecorder
}

// MockEnvironMockRecorder is the mock recorder for MockEnviron.
type MockEnvironMockRecorder struct {
	mock *MockEnviron
}

// NewMockEnviron creates a new mock instance.
func NewMockEnviron(ctrl *gomock.Controller) *MockEnviron {
	mock := &MockEnviron{ctrl: ctrl}
	mock.recorder = &MockEnvironMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnviron) EXPECT() *MockEnvironMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnviron) ISGOMOCK() struct{} {
	return struct{}{}
}

// AdoptResources mocks base method.
func (m *MockEnviron) AdoptResources(arg0 envcontext.ProviderCallContext, arg1 string, arg2 version.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptResources indicates an expected call of AdoptResources.
func (mr *MockEnvironMockRecorder) AdoptResources(arg0, arg1, arg2 any) *MockEnvironAdoptResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptResources", reflect.TypeOf((*MockEnviron)(nil).AdoptResources), arg0, arg1, arg2)
	return &MockEnvironAdoptResourcesCall{Call: call}
}

// MockEnvironAdoptResourcesCall wrap *gomock.Call
type MockEnvironAdoptResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironAdoptResourcesCall) Return(arg0 error) *MockEnvironAdoptResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironAdoptResourcesCall) Do(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockEnvironAdoptResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironAdoptResourcesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockEnvironAdoptResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllInstances mocks base method.
func (m *MockEnviron) AllInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockEnvironMockRecorder) AllInstances(arg0 any) *MockEnvironAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockEnviron)(nil).AllInstances), arg0)
	return &MockEnvironAllInstancesCall{Call: call}
}

// MockEnvironAllInstancesCall wrap *gomock.Call
type MockEnvironAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockEnvironAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironAllInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironAllInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRunningInstances mocks base method.
func (m *MockEnviron) AllRunningInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRunningInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRunningInstances indicates an expected call of AllRunningInstances.
func (mr *MockEnvironMockRecorder) AllRunningInstances(arg0 any) *MockEnvironAllRunningInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRunningInstances", reflect.TypeOf((*MockEnviron)(nil).AllRunningInstances), arg0)
	return &MockEnvironAllRunningInstancesCall{Call: call}
}

// MockEnvironAllRunningInstancesCall wrap *gomock.Call
type MockEnvironAllRunningInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironAllRunningInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockEnvironAllRunningInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironAllRunningInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllRunningInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironAllRunningInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockEnvironAllRunningInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bootstrap mocks base method.
func (m *MockEnviron) Bootstrap(arg0 environs.BootstrapContext, arg1 envcontext.ProviderCallContext, arg2 environs.BootstrapParams) (*environs.BootstrapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*environs.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockEnvironMockRecorder) Bootstrap(arg0, arg1, arg2 any) *MockEnvironBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockEnviron)(nil).Bootstrap), arg0, arg1, arg2)
	return &MockEnvironBootstrapCall{Call: call}
}

// MockEnvironBootstrapCall wrap *gomock.Call
type MockEnvironBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironBootstrapCall) Return(arg0 *environs.BootstrapResult, arg1 error) *MockEnvironBootstrapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironBootstrapCall) Do(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockEnvironBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockEnvironBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockEnviron) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockEnvironMockRecorder) Config() *MockEnvironConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockEnviron)(nil).Config))
	return &MockEnvironConfigCall{Call: call}
}

// MockEnvironConfigCall wrap *gomock.Call
type MockEnvironConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironConfigCall) Return(arg0 *config.Config) *MockEnvironConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironConfigCall) Do(f func() *config.Config) *MockEnvironConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironConfigCall) DoAndReturn(f func() *config.Config) *MockEnvironConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsValidator mocks base method.
func (m *MockEnviron) ConstraintsValidator(arg0 envcontext.ProviderCallContext) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockEnvironMockRecorder) ConstraintsValidator(arg0 any) *MockEnvironConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockEnviron)(nil).ConstraintsValidator), arg0)
	return &MockEnvironConstraintsValidatorCall{Call: call}
}

// MockEnvironConstraintsValidatorCall wrap *gomock.Call
type MockEnvironConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockEnvironConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironConstraintsValidatorCall) Do(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockEnvironConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironConstraintsValidatorCall) DoAndReturn(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockEnvironConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerInstances mocks base method.
func (m *MockEnviron) ControllerInstances(arg0 envcontext.ProviderCallContext, arg1 string) ([]instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerInstances", arg0, arg1)
	ret0, _ := ret[0].([]instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerInstances indicates an expected call of ControllerInstances.
func (mr *MockEnvironMockRecorder) ControllerInstances(arg0, arg1 any) *MockEnvironControllerInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerInstances", reflect.TypeOf((*MockEnviron)(nil).ControllerInstances), arg0, arg1)
	return &MockEnvironControllerInstancesCall{Call: call}
}

// MockEnvironControllerInstancesCall wrap *gomock.Call
type MockEnvironControllerInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironControllerInstancesCall) Return(arg0 []instance.Id, arg1 error) *MockEnvironControllerInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironControllerInstancesCall) Do(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockEnvironControllerInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironControllerInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockEnvironControllerInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockEnviron) Create(arg0 envcontext.ProviderCallContext, arg1 environs.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEnvironMockRecorder) Create(arg0, arg1 any) *MockEnvironCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnviron)(nil).Create), arg0, arg1)
	return &MockEnvironCreateCall{Call: call}
}

// MockEnvironCreateCall wrap *gomock.Call
type MockEnvironCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironCreateCall) Return(arg0 error) *MockEnvironCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironCreateCall) Do(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockEnvironCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironCreateCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockEnvironCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockEnviron) Destroy(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockEnvironMockRecorder) Destroy(arg0 any) *MockEnvironDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockEnviron)(nil).Destroy), arg0)
	return &MockEnvironDestroyCall{Call: call}
}

// MockEnvironDestroyCall wrap *gomock.Call
type MockEnvironDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironDestroyCall) Return(arg0 error) *MockEnvironDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironDestroyCall) Do(f func(envcontext.ProviderCallContext) error) *MockEnvironDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironDestroyCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockEnvironDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyController mocks base method.
func (m *MockEnviron) DestroyController(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyController indicates an expected call of DestroyController.
func (mr *MockEnvironMockRecorder) DestroyController(arg0, arg1 any) *MockEnvironDestroyControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyController", reflect.TypeOf((*MockEnviron)(nil).DestroyController), arg0, arg1)
	return &MockEnvironDestroyControllerCall{Call: call}
}

// MockEnvironDestroyControllerCall wrap *gomock.Call
type MockEnvironDestroyControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironDestroyControllerCall) Return(arg0 error) *MockEnvironDestroyControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironDestroyControllerCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockEnvironDestroyControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironDestroyControllerCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockEnvironDestroyControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceTypes mocks base method.
func (m *MockEnviron) InstanceTypes(arg0 envcontext.ProviderCallContext, arg1 constraints.Value) (instances.InstanceTypesWithCostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(instances.InstanceTypesWithCostMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceTypes indicates an expected call of InstanceTypes.
func (mr *MockEnvironMockRecorder) InstanceTypes(arg0, arg1 any) *MockEnvironInstanceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceTypes", reflect.TypeOf((*MockEnviron)(nil).InstanceTypes), arg0, arg1)
	return &MockEnvironInstanceTypesCall{Call: call}
}

// MockEnvironInstanceTypesCall wrap *gomock.Call
type MockEnvironInstanceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstanceTypesCall) Return(arg0 instances.InstanceTypesWithCostMetadata, arg1 error) *MockEnvironInstanceTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstanceTypesCall) Do(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockEnvironInstanceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstanceTypesCall) DoAndReturn(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockEnvironInstanceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Instances mocks base method.
func (m *MockEnviron) Instances(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances", arg0, arg1)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockEnvironMockRecorder) Instances(arg0, arg1 any) *MockEnvironInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockEnviron)(nil).Instances), arg0, arg1)
	return &MockEnvironInstancesCall{Call: call}
}

// MockEnvironInstancesCall wrap *gomock.Call
type MockEnvironInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockEnvironInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironInstancesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockEnvironInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockEnvironInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrecheckInstance mocks base method.
func (m *MockEnviron) PrecheckInstance(arg0 envcontext.ProviderCallContext, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockEnvironMockRecorder) PrecheckInstance(arg0, arg1 any) *MockEnvironPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockEnviron)(nil).PrecheckInstance), arg0, arg1)
	return &MockEnvironPrecheckInstanceCall{Call: call}
}

// MockEnvironPrecheckInstanceCall wrap *gomock.Call
type MockEnvironPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironPrecheckInstanceCall) Return(arg0 error) *MockEnvironPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironPrecheckInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockEnvironPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironPrecheckInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockEnvironPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareForBootstrap mocks base method.
func (m *MockEnviron) PrepareForBootstrap(arg0 environs.BootstrapContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForBootstrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareForBootstrap indicates an expected call of PrepareForBootstrap.
func (mr *MockEnvironMockRecorder) PrepareForBootstrap(arg0, arg1 any) *MockEnvironPrepareForBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForBootstrap", reflect.TypeOf((*MockEnviron)(nil).PrepareForBootstrap), arg0, arg1)
	return &MockEnvironPrepareForBootstrapCall{Call: call}
}

// MockEnvironPrepareForBootstrapCall wrap *gomock.Call
type MockEnvironPrepareForBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironPrepareForBootstrapCall) Return(arg0 error) *MockEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironPrepareForBootstrapCall) Do(f func(environs.BootstrapContext, string) error) *MockEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironPrepareForBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, string) error) *MockEnvironPrepareForBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Provider mocks base method.
func (m *MockEnviron) Provider() environs.EnvironProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(environs.EnvironProvider)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockEnvironMockRecorder) Provider() *MockEnvironProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockEnviron)(nil).Provider))
	return &MockEnvironProviderCall{Call: call}
}

// MockEnvironProviderCall wrap *gomock.Call
type MockEnvironProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironProviderCall) Return(arg0 environs.EnvironProvider) *MockEnvironProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironProviderCall) Do(f func() environs.EnvironProvider) *MockEnvironProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironProviderCall) DoAndReturn(f func() environs.EnvironProvider) *MockEnvironProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockEnviron) SetConfig(arg0 context.Context, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockEnvironMockRecorder) SetConfig(arg0, arg1 any) *MockEnvironSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockEnviron)(nil).SetConfig), arg0, arg1)
	return &MockEnvironSetConfigCall{Call: call}
}

// MockEnvironSetConfigCall wrap *gomock.Call
type MockEnvironSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironSetConfigCall) Return(arg0 error) *MockEnvironSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironSetConfigCall) Do(f func(context.Context, *config.Config) error) *MockEnvironSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironSetConfigCall) DoAndReturn(f func(context.Context, *config.Config) error) *MockEnvironSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartInstance mocks base method.
func (m *MockEnviron) StartInstance(arg0 envcontext.ProviderCallContext, arg1 environs.StartInstanceParams) (*environs.StartInstanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1)
	ret0, _ := ret[0].(*environs.StartInstanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockEnvironMockRecorder) StartInstance(arg0, arg1 any) *MockEnvironStartInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockEnviron)(nil).StartInstance), arg0, arg1)
	return &MockEnvironStartInstanceCall{Call: call}
}

// MockEnvironStartInstanceCall wrap *gomock.Call
type MockEnvironStartInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStartInstanceCall) Return(arg0 *environs.StartInstanceResult, arg1 error) *MockEnvironStartInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStartInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockEnvironStartInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStartInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockEnvironStartInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopInstances mocks base method.
func (m *MockEnviron) StopInstances(arg0 envcontext.ProviderCallContext, arg1 ...instance.Id) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstances indicates an expected call of StopInstances.
func (mr *MockEnvironMockRecorder) StopInstances(arg0 any, arg1 ...any) *MockEnvironStopInstancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockEnviron)(nil).StopInstances), varargs...)
	return &MockEnvironStopInstancesCall{Call: call}
}

// MockEnvironStopInstancesCall wrap *gomock.Call
type MockEnvironStopInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStopInstancesCall) Return(arg0 error) *MockEnvironStopInstancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStopInstancesCall) Do(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockEnvironStopInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStopInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockEnvironStopInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockEnviron) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockEnvironMockRecorder) StorageProvider(arg0 any) *MockEnvironStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockEnviron)(nil).StorageProvider), arg0)
	return &MockEnvironStorageProviderCall{Call: call}
}

// MockEnvironStorageProviderCall wrap *gomock.Call
type MockEnvironStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockEnvironStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockEnvironStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockEnvironStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockEnviron) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockEnvironMockRecorder) StorageProviderTypes() *MockEnvironStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockEnviron)(nil).StorageProviderTypes))
	return &MockEnvironStorageProviderTypesCall{Call: call}
}

// MockEnvironStorageProviderTypesCall wrap *gomock.Call
type MockEnvironStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockEnvironStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockEnvironStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockEnvironStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstancePrechecker is a mock of InstancePrechecker interface.
type MockInstancePrechecker struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePrecheckerMockRecorder
}

// MockInstancePrecheckerMockRecorder is the mock recorder for MockInstancePrechecker.
type MockInstancePrecheckerMockRecorder struct {
	mock *MockInstancePrechecker
}

// NewMockInstancePrechecker creates a new mock instance.
func NewMockInstancePrechecker(ctrl *gomock.Controller) *MockInstancePrechecker {
	mock := &MockInstancePrechecker{ctrl: ctrl}
	mock.recorder = &MockInstancePrecheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePrechecker) EXPECT() *MockInstancePrecheckerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstancePrechecker) ISGOMOCK() struct{} {
	return struct{}{}
}

// PrecheckInstance mocks base method.
func (m *MockInstancePrechecker) PrecheckInstance(arg0 envcontext.ProviderCallContext, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockInstancePrecheckerMockRecorder) PrecheckInstance(arg0, arg1 any) *MockInstancePrecheckerPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockInstancePrechecker)(nil).PrecheckInstance), arg0, arg1)
	return &MockInstancePrecheckerPrecheckInstanceCall{Call: call}
}

// MockInstancePrecheckerPrecheckInstanceCall wrap *gomock.Call
type MockInstancePrecheckerPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstancePrecheckerPrecheckInstanceCall) Return(arg0 error) *MockInstancePrecheckerPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstancePrecheckerPrecheckInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockInstancePrecheckerPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstancePrecheckerPrecheckInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockInstancePrecheckerPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFirewaller is a mock of Firewaller interface.
type MockFirewaller struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallerMockRecorder
}

// MockFirewallerMockRecorder is the mock recorder for MockFirewaller.
type MockFirewallerMockRecorder struct {
	mock *MockFirewaller
}

// NewMockFirewaller creates a new mock instance.
func NewMockFirewaller(ctrl *gomock.Controller) *MockFirewaller {
	mock := &MockFirewaller{ctrl: ctrl}
	mock.recorder = &MockFirewallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewaller) EXPECT() *MockFirewallerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFirewaller) ISGOMOCK() struct{} {
	return struct{}{}
}

// ClosePorts mocks base method.
func (m *MockFirewaller) ClosePorts(arg0 envcontext.ProviderCallContext, arg1 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePorts indicates an expected call of ClosePorts.
func (mr *MockFirewallerMockRecorder) ClosePorts(arg0, arg1 any) *MockFirewallerClosePortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePorts", reflect.TypeOf((*MockFirewaller)(nil).ClosePorts), arg0, arg1)
	return &MockFirewallerClosePortsCall{Call: call}
}

// MockFirewallerClosePortsCall wrap *gomock.Call
type MockFirewallerClosePortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerClosePortsCall) Return(arg0 error) *MockFirewallerClosePortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerClosePortsCall) Do(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockFirewallerClosePortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerClosePortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockFirewallerClosePortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IngressRules mocks base method.
func (m *MockFirewaller) IngressRules(arg0 envcontext.ProviderCallContext) (firewall.IngressRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngressRules", arg0)
	ret0, _ := ret[0].(firewall.IngressRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngressRules indicates an expected call of IngressRules.
func (mr *MockFirewallerMockRecorder) IngressRules(arg0 any) *MockFirewallerIngressRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngressRules", reflect.TypeOf((*MockFirewaller)(nil).IngressRules), arg0)
	return &MockFirewallerIngressRulesCall{Call: call}
}

// MockFirewallerIngressRulesCall wrap *gomock.Call
type MockFirewallerIngressRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerIngressRulesCall) Return(arg0 firewall.IngressRules, arg1 error) *MockFirewallerIngressRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerIngressRulesCall) Do(f func(envcontext.ProviderCallContext) (firewall.IngressRules, error)) *MockFirewallerIngressRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerIngressRulesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (firewall.IngressRules, error)) *MockFirewallerIngressRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenPorts mocks base method.
func (m *MockFirewaller) OpenPorts(arg0 envcontext.ProviderCallContext, arg1 firewall.IngressRules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenPorts indicates an expected call of OpenPorts.
func (mr *MockFirewallerMockRecorder) OpenPorts(arg0, arg1 any) *MockFirewallerOpenPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPorts", reflect.TypeOf((*MockFirewaller)(nil).OpenPorts), arg0, arg1)
	return &MockFirewallerOpenPortsCall{Call: call}
}

// MockFirewallerOpenPortsCall wrap *gomock.Call
type MockFirewallerOpenPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFirewallerOpenPortsCall) Return(arg0 error) *MockFirewallerOpenPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFirewallerOpenPortsCall) Do(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockFirewallerOpenPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFirewallerOpenPortsCall) DoAndReturn(f func(envcontext.ProviderCallContext, firewall.IngressRules) error) *MockFirewallerOpenPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstanceTagger is a mock of InstanceTagger interface.
type MockInstanceTagger struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceTaggerMockRecorder
}

// MockInstanceTaggerMockRecorder is the mock recorder for MockInstanceTagger.
type MockInstanceTaggerMockRecorder struct {
	mock *MockInstanceTagger
}

// NewMockInstanceTagger creates a new mock instance.
func NewMockInstanceTagger(ctrl *gomock.Controller) *MockInstanceTagger {
	mock := &MockInstanceTagger{ctrl: ctrl}
	mock.recorder = &MockInstanceTaggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceTagger) EXPECT() *MockInstanceTaggerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstanceTagger) ISGOMOCK() struct{} {
	return struct{}{}
}

// TagInstance mocks base method.
func (m *MockInstanceTagger) TagInstance(arg0 envcontext.ProviderCallContext, arg1 instance.Id, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagInstance indicates an expected call of TagInstance.
func (mr *MockInstanceTaggerMockRecorder) TagInstance(arg0, arg1, arg2 any) *MockInstanceTaggerTagInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagInstance", reflect.TypeOf((*MockInstanceTagger)(nil).TagInstance), arg0, arg1, arg2)
	return &MockInstanceTaggerTagInstanceCall{Call: call}
}

// MockInstanceTaggerTagInstanceCall wrap *gomock.Call
type MockInstanceTaggerTagInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceTaggerTagInstanceCall) Return(arg0 error) *MockInstanceTaggerTagInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceTaggerTagInstanceCall) Do(f func(envcontext.ProviderCallContext, instance.Id, map[string]string) error) *MockInstanceTaggerTagInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceTaggerTagInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, instance.Id, map[string]string) error) *MockInstanceTaggerTagInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstanceTypesFetcher is a mock of InstanceTypesFetcher interface.
type MockInstanceTypesFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceTypesFetcherMockRecorder
}

// MockInstanceTypesFetcherMockRecorder is the mock recorder for MockInstanceTypesFetcher.
type MockInstanceTypesFetcherMockRecorder struct {
	mock *MockInstanceTypesFetcher
}

// NewMockInstanceTypesFetcher creates a new mock instance.
func NewMockInstanceTypesFetcher(ctrl *gomock.Controller) *MockInstanceTypesFetcher {
	mock := &MockInstanceTypesFetcher{ctrl: ctrl}
	mock.recorder = &MockInstanceTypesFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceTypesFetcher) EXPECT() *MockInstanceTypesFetcherMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockInstanceTypesFetcher) ISGOMOCK() struct{} {
	return struct{}{}
}

// InstanceTypes mocks base method.
func (m *MockInstanceTypesFetcher) InstanceTypes(arg0 envcontext.ProviderCallContext, arg1 constraints.Value) (instances.InstanceTypesWithCostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(instances.InstanceTypesWithCostMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceTypes indicates an expected call of InstanceTypes.
func (mr *MockInstanceTypesFetcherMockRecorder) InstanceTypes(arg0, arg1 any) *MockInstanceTypesFetcherInstanceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceTypes", reflect.TypeOf((*MockInstanceTypesFetcher)(nil).InstanceTypes), arg0, arg1)
	return &MockInstanceTypesFetcherInstanceTypesCall{Call: call}
}

// MockInstanceTypesFetcherInstanceTypesCall wrap *gomock.Call
type MockInstanceTypesFetcherInstanceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceTypesFetcherInstanceTypesCall) Return(arg0 instances.InstanceTypesWithCostMetadata, arg1 error) *MockInstanceTypesFetcherInstanceTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceTypesFetcherInstanceTypesCall) Do(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockInstanceTypesFetcherInstanceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceTypesFetcherInstanceTypesCall) DoAndReturn(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockInstanceTypesFetcherInstanceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgrader is a mock of Upgrader interface.
type MockUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockUpgraderMockRecorder
}

// MockUpgraderMockRecorder is the mock recorder for MockUpgrader.
type MockUpgraderMockRecorder struct {
	mock *MockUpgrader
}

// NewMockUpgrader creates a new mock instance.
func NewMockUpgrader(ctrl *gomock.Controller) *MockUpgrader {
	mock := &MockUpgrader{ctrl: ctrl}
	mock.recorder = &MockUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgrader) EXPECT() *MockUpgraderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUpgrader) ISGOMOCK() struct{} {
	return struct{}{}
}

// UpgradeOperations mocks base method.
func (m *MockUpgrader) UpgradeOperations(arg0 envcontext.ProviderCallContext, arg1 environs.UpgradeOperationsParams) []environs.UpgradeOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeOperations", arg0, arg1)
	ret0, _ := ret[0].([]environs.UpgradeOperation)
	return ret0
}

// UpgradeOperations indicates an expected call of UpgradeOperations.
func (mr *MockUpgraderMockRecorder) UpgradeOperations(arg0, arg1 any) *MockUpgraderUpgradeOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeOperations", reflect.TypeOf((*MockUpgrader)(nil).UpgradeOperations), arg0, arg1)
	return &MockUpgraderUpgradeOperationsCall{Call: call}
}

// MockUpgraderUpgradeOperationsCall wrap *gomock.Call
type MockUpgraderUpgradeOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgraderUpgradeOperationsCall) Return(arg0 []environs.UpgradeOperation) *MockUpgraderUpgradeOperationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgraderUpgradeOperationsCall) Do(f func(envcontext.ProviderCallContext, environs.UpgradeOperationsParams) []environs.UpgradeOperation) *MockUpgraderUpgradeOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgraderUpgradeOperationsCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.UpgradeOperationsParams) []environs.UpgradeOperation) *MockUpgraderUpgradeOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgradeStep is a mock of UpgradeStep interface.
type MockUpgradeStep struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeStepMockRecorder
}

// MockUpgradeStepMockRecorder is the mock recorder for MockUpgradeStep.
type MockUpgradeStepMockRecorder struct {
	mock *MockUpgradeStep
}

// NewMockUpgradeStep creates a new mock instance.
func NewMockUpgradeStep(ctrl *gomock.Controller) *MockUpgradeStep {
	mock := &MockUpgradeStep{ctrl: ctrl}
	mock.recorder = &MockUpgradeStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeStep) EXPECT() *MockUpgradeStepMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUpgradeStep) ISGOMOCK() struct{} {
	return struct{}{}
}

// Description mocks base method.
func (m *MockUpgradeStep) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockUpgradeStepMockRecorder) Description() *MockUpgradeStepDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockUpgradeStep)(nil).Description))
	return &MockUpgradeStepDescriptionCall{Call: call}
}

// MockUpgradeStepDescriptionCall wrap *gomock.Call
type MockUpgradeStepDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeStepDescriptionCall) Return(arg0 string) *MockUpgradeStepDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeStepDescriptionCall) Do(f func() string) *MockUpgradeStepDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeStepDescriptionCall) DoAndReturn(f func() string) *MockUpgradeStepDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Run mocks base method.
func (m *MockUpgradeStep) Run(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockUpgradeStepMockRecorder) Run(arg0 any) *MockUpgradeStepRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUpgradeStep)(nil).Run), arg0)
	return &MockUpgradeStepRunCall{Call: call}
}

// MockUpgradeStepRunCall wrap *gomock.Call
type MockUpgradeStepRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeStepRunCall) Return(arg0 error) *MockUpgradeStepRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeStepRunCall) Do(f func(envcontext.ProviderCallContext) error) *MockUpgradeStepRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeStepRunCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockUpgradeStepRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDefaultConstraintsChecker is a mock of DefaultConstraintsChecker interface.
type MockDefaultConstraintsChecker struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultConstraintsCheckerMockRecorder
}

// MockDefaultConstraintsCheckerMockRecorder is the mock recorder for MockDefaultConstraintsChecker.
type MockDefaultConstraintsCheckerMockRecorder struct {
	mock *MockDefaultConstraintsChecker
}

// NewMockDefaultConstraintsChecker creates a new mock instance.
func NewMockDefaultConstraintsChecker(ctrl *gomock.Controller) *MockDefaultConstraintsChecker {
	mock := &MockDefaultConstraintsChecker{ctrl: ctrl}
	mock.recorder = &MockDefaultConstraintsCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultConstraintsChecker) EXPECT() *MockDefaultConstraintsCheckerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDefaultConstraintsChecker) ISGOMOCK() struct{} {
	return struct{}{}
}

// ShouldApplyControllerConstraints mocks base method.
func (m *MockDefaultConstraintsChecker) ShouldApplyControllerConstraints(arg0 constraints.Value) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldApplyControllerConstraints", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldApplyControllerConstraints indicates an expected call of ShouldApplyControllerConstraints.
func (mr *MockDefaultConstraintsCheckerMockRecorder) ShouldApplyControllerConstraints(arg0 any) *MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldApplyControllerConstraints", reflect.TypeOf((*MockDefaultConstraintsChecker)(nil).ShouldApplyControllerConstraints), arg0)
	return &MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall{Call: call}
}

// MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall wrap *gomock.Call
type MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall) Return(arg0 bool) *MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall) Do(f func(constraints.Value) bool) *MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall) DoAndReturn(f func(constraints.Value) bool) *MockDefaultConstraintsCheckerShouldApplyControllerConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderCredentialsRegister is a mock of ProviderCredentialsRegister interface.
type MockProviderCredentialsRegister struct {
	ctrl     *gomock.Controller
	recorder *MockProviderCredentialsRegisterMockRecorder
}

// MockProviderCredentialsRegisterMockRecorder is the mock recorder for MockProviderCredentialsRegister.
type MockProviderCredentialsRegisterMockRecorder struct {
	mock *MockProviderCredentialsRegister
}

// NewMockProviderCredentialsRegister creates a new mock instance.
func NewMockProviderCredentialsRegister(ctrl *gomock.Controller) *MockProviderCredentialsRegister {
	mock := &MockProviderCredentialsRegister{ctrl: ctrl}
	mock.recorder = &MockProviderCredentialsRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderCredentialsRegister) EXPECT() *MockProviderCredentialsRegisterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProviderCredentialsRegister) ISGOMOCK() struct{} {
	return struct{}{}
}

// RegisterCredentials mocks base method.
func (m *MockProviderCredentialsRegister) RegisterCredentials(arg0 cloud.Cloud) (map[string]*cloud.CloudCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCredentials", arg0)
	ret0, _ := ret[0].(map[string]*cloud.CloudCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCredentials indicates an expected call of RegisterCredentials.
func (mr *MockProviderCredentialsRegisterMockRecorder) RegisterCredentials(arg0 any) *MockProviderCredentialsRegisterRegisterCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCredentials", reflect.TypeOf((*MockProviderCredentialsRegister)(nil).RegisterCredentials), arg0)
	return &MockProviderCredentialsRegisterRegisterCredentialsCall{Call: call}
}

// MockProviderCredentialsRegisterRegisterCredentialsCall wrap *gomock.Call
type MockProviderCredentialsRegisterRegisterCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderCredentialsRegisterRegisterCredentialsCall) Return(arg0 map[string]*cloud.CloudCredential, arg1 error) *MockProviderCredentialsRegisterRegisterCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderCredentialsRegisterRegisterCredentialsCall) Do(f func(cloud.Cloud) (map[string]*cloud.CloudCredential, error)) *MockProviderCredentialsRegisterRegisterCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderCredentialsRegisterRegisterCredentialsCall) DoAndReturn(f func(cloud.Cloud) (map[string]*cloud.CloudCredential, error)) *MockProviderCredentialsRegisterRegisterCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRequestFinalizeCredential is a mock of RequestFinalizeCredential interface.
type MockRequestFinalizeCredential struct {
	ctrl     *gomock.Controller
	recorder *MockRequestFinalizeCredentialMockRecorder
}

// MockRequestFinalizeCredentialMockRecorder is the mock recorder for MockRequestFinalizeCredential.
type MockRequestFinalizeCredentialMockRecorder struct {
	mock *MockRequestFinalizeCredential
}

// NewMockRequestFinalizeCredential creates a new mock instance.
func NewMockRequestFinalizeCredential(ctrl *gomock.Controller) *MockRequestFinalizeCredential {
	mock := &MockRequestFinalizeCredential{ctrl: ctrl}
	mock.recorder = &MockRequestFinalizeCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestFinalizeCredential) EXPECT() *MockRequestFinalizeCredentialMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockRequestFinalizeCredential) ISGOMOCK() struct{} {
	return struct{}{}
}

// ShouldFinalizeCredential mocks base method.
func (m *MockRequestFinalizeCredential) ShouldFinalizeCredential(arg0 cloud.Credential) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldFinalizeCredential", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldFinalizeCredential indicates an expected call of ShouldFinalizeCredential.
func (mr *MockRequestFinalizeCredentialMockRecorder) ShouldFinalizeCredential(arg0 any) *MockRequestFinalizeCredentialShouldFinalizeCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldFinalizeCredential", reflect.TypeOf((*MockRequestFinalizeCredential)(nil).ShouldFinalizeCredential), arg0)
	return &MockRequestFinalizeCredentialShouldFinalizeCredentialCall{Call: call}
}

// MockRequestFinalizeCredentialShouldFinalizeCredentialCall wrap *gomock.Call
type MockRequestFinalizeCredentialShouldFinalizeCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRequestFinalizeCredentialShouldFinalizeCredentialCall) Return(arg0 bool) *MockRequestFinalizeCredentialShouldFinalizeCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRequestFinalizeCredentialShouldFinalizeCredentialCall) Do(f func(cloud.Credential) bool) *MockRequestFinalizeCredentialShouldFinalizeCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRequestFinalizeCredentialShouldFinalizeCredentialCall) DoAndReturn(f func(cloud.Credential) bool) *MockRequestFinalizeCredentialShouldFinalizeCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkingEnviron is a mock of NetworkingEnviron interface.
type MockNetworkingEnviron struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingEnvironMockRecorder
}

// MockNetworkingEnvironMockRecorder is the mock recorder for MockNetworkingEnviron.
type MockNetworkingEnvironMockRecorder struct {
	mock *MockNetworkingEnviron
}

// NewMockNetworkingEnviron creates a new mock instance.
func NewMockNetworkingEnviron(ctrl *gomock.Controller) *MockNetworkingEnviron {
	mock := &MockNetworkingEnviron{ctrl: ctrl}
	mock.recorder = &MockNetworkingEnvironMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingEnviron) EXPECT() *MockNetworkingEnvironMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkingEnviron) ISGOMOCK() struct{} {
	return struct{}{}
}

// AdoptResources mocks base method.
func (m *MockNetworkingEnviron) AdoptResources(arg0 envcontext.ProviderCallContext, arg1 string, arg2 version.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptResources indicates an expected call of AdoptResources.
func (mr *MockNetworkingEnvironMockRecorder) AdoptResources(arg0, arg1, arg2 any) *MockNetworkingEnvironAdoptResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptResources", reflect.TypeOf((*MockNetworkingEnviron)(nil).AdoptResources), arg0, arg1, arg2)
	return &MockNetworkingEnvironAdoptResourcesCall{Call: call}
}

// MockNetworkingEnvironAdoptResourcesCall wrap *gomock.Call
type MockNetworkingEnvironAdoptResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAdoptResourcesCall) Return(arg0 error) *MockNetworkingEnvironAdoptResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAdoptResourcesCall) Do(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockNetworkingEnvironAdoptResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAdoptResourcesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockNetworkingEnvironAdoptResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllInstances mocks base method.
func (m *MockNetworkingEnviron) AllInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockNetworkingEnvironMockRecorder) AllInstances(arg0 any) *MockNetworkingEnvironAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).AllInstances), arg0)
	return &MockNetworkingEnvironAllInstancesCall{Call: call}
}

// MockNetworkingEnvironAllInstancesCall wrap *gomock.Call
type MockNetworkingEnvironAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockNetworkingEnvironAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAllInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAllInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRunningInstances mocks base method.
func (m *MockNetworkingEnviron) AllRunningInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRunningInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRunningInstances indicates an expected call of AllRunningInstances.
func (mr *MockNetworkingEnvironMockRecorder) AllRunningInstances(arg0 any) *MockNetworkingEnvironAllRunningInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRunningInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).AllRunningInstances), arg0)
	return &MockNetworkingEnvironAllRunningInstancesCall{Call: call}
}

// MockNetworkingEnvironAllRunningInstancesCall wrap *gomock.Call
type MockNetworkingEnvironAllRunningInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAllRunningInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockNetworkingEnvironAllRunningInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAllRunningInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllRunningInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAllRunningInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockNetworkingEnvironAllRunningInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllocateContainerAddresses mocks base method.
func (m *MockNetworkingEnviron) AllocateContainerAddresses(arg0 envcontext.ProviderCallContext, arg1 instance.Id, arg2 names.MachineTag, arg3 network.InterfaceInfos) (network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateContainerAddresses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateContainerAddresses indicates an expected call of AllocateContainerAddresses.
func (mr *MockNetworkingEnvironMockRecorder) AllocateContainerAddresses(arg0, arg1, arg2, arg3 any) *MockNetworkingEnvironAllocateContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateContainerAddresses", reflect.TypeOf((*MockNetworkingEnviron)(nil).AllocateContainerAddresses), arg0, arg1, arg2, arg3)
	return &MockNetworkingEnvironAllocateContainerAddressesCall{Call: call}
}

// MockNetworkingEnvironAllocateContainerAddressesCall wrap *gomock.Call
type MockNetworkingEnvironAllocateContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironAllocateContainerAddressesCall) Return(arg0 network.InterfaceInfos, arg1 error) *MockNetworkingEnvironAllocateContainerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironAllocateContainerAddressesCall) Do(f func(envcontext.ProviderCallContext, instance.Id, names.MachineTag, network.InterfaceInfos) (network.InterfaceInfos, error)) *MockNetworkingEnvironAllocateContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironAllocateContainerAddressesCall) DoAndReturn(f func(envcontext.ProviderCallContext, instance.Id, names.MachineTag, network.InterfaceInfos) (network.InterfaceInfos, error)) *MockNetworkingEnvironAllocateContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Bootstrap mocks base method.
func (m *MockNetworkingEnviron) Bootstrap(arg0 environs.BootstrapContext, arg1 envcontext.ProviderCallContext, arg2 environs.BootstrapParams) (*environs.BootstrapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0, arg1, arg2)
	ret0, _ := ret[0].(*environs.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockNetworkingEnvironMockRecorder) Bootstrap(arg0, arg1, arg2 any) *MockNetworkingEnvironBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockNetworkingEnviron)(nil).Bootstrap), arg0, arg1, arg2)
	return &MockNetworkingEnvironBootstrapCall{Call: call}
}

// MockNetworkingEnvironBootstrapCall wrap *gomock.Call
type MockNetworkingEnvironBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironBootstrapCall) Return(arg0 *environs.BootstrapResult, arg1 error) *MockNetworkingEnvironBootstrapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironBootstrapCall) Do(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockNetworkingEnvironBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, envcontext.ProviderCallContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockNetworkingEnvironBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockNetworkingEnviron) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockNetworkingEnvironMockRecorder) Config() *MockNetworkingEnvironConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockNetworkingEnviron)(nil).Config))
	return &MockNetworkingEnvironConfigCall{Call: call}
}

// MockNetworkingEnvironConfigCall wrap *gomock.Call
type MockNetworkingEnvironConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironConfigCall) Return(arg0 *config.Config) *MockNetworkingEnvironConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironConfigCall) Do(f func() *config.Config) *MockNetworkingEnvironConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironConfigCall) DoAndReturn(f func() *config.Config) *MockNetworkingEnvironConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsValidator mocks base method.
func (m *MockNetworkingEnviron) ConstraintsValidator(arg0 envcontext.ProviderCallContext) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockNetworkingEnvironMockRecorder) ConstraintsValidator(arg0 any) *MockNetworkingEnvironConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockNetworkingEnviron)(nil).ConstraintsValidator), arg0)
	return &MockNetworkingEnvironConstraintsValidatorCall{Call: call}
}

// MockNetworkingEnvironConstraintsValidatorCall wrap *gomock.Call
type MockNetworkingEnvironConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockNetworkingEnvironConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironConstraintsValidatorCall) Do(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockNetworkingEnvironConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironConstraintsValidatorCall) DoAndReturn(f func(envcontext.ProviderCallContext) (constraints.Validator, error)) *MockNetworkingEnvironConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerInstances mocks base method.
func (m *MockNetworkingEnviron) ControllerInstances(arg0 envcontext.ProviderCallContext, arg1 string) ([]instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerInstances", arg0, arg1)
	ret0, _ := ret[0].([]instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerInstances indicates an expected call of ControllerInstances.
func (mr *MockNetworkingEnvironMockRecorder) ControllerInstances(arg0, arg1 any) *MockNetworkingEnvironControllerInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).ControllerInstances), arg0, arg1)
	return &MockNetworkingEnvironControllerInstancesCall{Call: call}
}

// MockNetworkingEnvironControllerInstancesCall wrap *gomock.Call
type MockNetworkingEnvironControllerInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironControllerInstancesCall) Return(arg0 []instance.Id, arg1 error) *MockNetworkingEnvironControllerInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironControllerInstancesCall) Do(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockNetworkingEnvironControllerInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironControllerInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) ([]instance.Id, error)) *MockNetworkingEnvironControllerInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockNetworkingEnviron) Create(arg0 envcontext.ProviderCallContext, arg1 environs.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNetworkingEnvironMockRecorder) Create(arg0, arg1 any) *MockNetworkingEnvironCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkingEnviron)(nil).Create), arg0, arg1)
	return &MockNetworkingEnvironCreateCall{Call: call}
}

// MockNetworkingEnvironCreateCall wrap *gomock.Call
type MockNetworkingEnvironCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironCreateCall) Return(arg0 error) *MockNetworkingEnvironCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironCreateCall) Do(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockNetworkingEnvironCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironCreateCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.CreateParams) error) *MockNetworkingEnvironCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockNetworkingEnviron) Destroy(arg0 envcontext.ProviderCallContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockNetworkingEnvironMockRecorder) Destroy(arg0 any) *MockNetworkingEnvironDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockNetworkingEnviron)(nil).Destroy), arg0)
	return &MockNetworkingEnvironDestroyCall{Call: call}
}

// MockNetworkingEnvironDestroyCall wrap *gomock.Call
type MockNetworkingEnvironDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironDestroyCall) Return(arg0 error) *MockNetworkingEnvironDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironDestroyCall) Do(f func(envcontext.ProviderCallContext) error) *MockNetworkingEnvironDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironDestroyCall) DoAndReturn(f func(envcontext.ProviderCallContext) error) *MockNetworkingEnvironDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyController mocks base method.
func (m *MockNetworkingEnviron) DestroyController(arg0 envcontext.ProviderCallContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyController indicates an expected call of DestroyController.
func (mr *MockNetworkingEnvironMockRecorder) DestroyController(arg0, arg1 any) *MockNetworkingEnvironDestroyControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyController", reflect.TypeOf((*MockNetworkingEnviron)(nil).DestroyController), arg0, arg1)
	return &MockNetworkingEnvironDestroyControllerCall{Call: call}
}

// MockNetworkingEnvironDestroyControllerCall wrap *gomock.Call
type MockNetworkingEnvironDestroyControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironDestroyControllerCall) Return(arg0 error) *MockNetworkingEnvironDestroyControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironDestroyControllerCall) Do(f func(envcontext.ProviderCallContext, string) error) *MockNetworkingEnvironDestroyControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironDestroyControllerCall) DoAndReturn(f func(envcontext.ProviderCallContext, string) error) *MockNetworkingEnvironDestroyControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceTypes mocks base method.
func (m *MockNetworkingEnviron) InstanceTypes(arg0 envcontext.ProviderCallContext, arg1 constraints.Value) (instances.InstanceTypesWithCostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceTypes", arg0, arg1)
	ret0, _ := ret[0].(instances.InstanceTypesWithCostMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceTypes indicates an expected call of InstanceTypes.
func (mr *MockNetworkingEnvironMockRecorder) InstanceTypes(arg0, arg1 any) *MockNetworkingEnvironInstanceTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceTypes", reflect.TypeOf((*MockNetworkingEnviron)(nil).InstanceTypes), arg0, arg1)
	return &MockNetworkingEnvironInstanceTypesCall{Call: call}
}

// MockNetworkingEnvironInstanceTypesCall wrap *gomock.Call
type MockNetworkingEnvironInstanceTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironInstanceTypesCall) Return(arg0 instances.InstanceTypesWithCostMetadata, arg1 error) *MockNetworkingEnvironInstanceTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironInstanceTypesCall) Do(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockNetworkingEnvironInstanceTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironInstanceTypesCall) DoAndReturn(f func(envcontext.ProviderCallContext, constraints.Value) (instances.InstanceTypesWithCostMetadata, error)) *MockNetworkingEnvironInstanceTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Instances mocks base method.
func (m *MockNetworkingEnviron) Instances(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances", arg0, arg1)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances.
func (mr *MockNetworkingEnvironMockRecorder) Instances(arg0, arg1 any) *MockNetworkingEnvironInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockNetworkingEnviron)(nil).Instances), arg0, arg1)
	return &MockNetworkingEnvironInstancesCall{Call: call}
}

// MockNetworkingEnvironInstancesCall wrap *gomock.Call
type MockNetworkingEnvironInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockNetworkingEnvironInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironInstancesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockNetworkingEnvironInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]instances.Instance, error)) *MockNetworkingEnvironInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NetworkInterfaces mocks base method.
func (m *MockNetworkingEnviron) NetworkInterfaces(arg0 envcontext.ProviderCallContext, arg1 []instance.Id) ([]network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInterfaces", arg0, arg1)
	ret0, _ := ret[0].([]network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInterfaces indicates an expected call of NetworkInterfaces.
func (mr *MockNetworkingEnvironMockRecorder) NetworkInterfaces(arg0, arg1 any) *MockNetworkingEnvironNetworkInterfacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInterfaces", reflect.TypeOf((*MockNetworkingEnviron)(nil).NetworkInterfaces), arg0, arg1)
	return &MockNetworkingEnvironNetworkInterfacesCall{Call: call}
}

// MockNetworkingEnvironNetworkInterfacesCall wrap *gomock.Call
type MockNetworkingEnvironNetworkInterfacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironNetworkInterfacesCall) Return(arg0 []network.InterfaceInfos, arg1 error) *MockNetworkingEnvironNetworkInterfacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironNetworkInterfacesCall) Do(f func(envcontext.ProviderCallContext, []instance.Id) ([]network.InterfaceInfos, error)) *MockNetworkingEnvironNetworkInterfacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironNetworkInterfacesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []instance.Id) ([]network.InterfaceInfos, error)) *MockNetworkingEnvironNetworkInterfacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrecheckInstance mocks base method.
func (m *MockNetworkingEnviron) PrecheckInstance(arg0 envcontext.ProviderCallContext, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockNetworkingEnvironMockRecorder) PrecheckInstance(arg0, arg1 any) *MockNetworkingEnvironPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockNetworkingEnviron)(nil).PrecheckInstance), arg0, arg1)
	return &MockNetworkingEnvironPrecheckInstanceCall{Call: call}
}

// MockNetworkingEnvironPrecheckInstanceCall wrap *gomock.Call
type MockNetworkingEnvironPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironPrecheckInstanceCall) Return(arg0 error) *MockNetworkingEnvironPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironPrecheckInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockNetworkingEnvironPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironPrecheckInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.PrecheckInstanceParams) error) *MockNetworkingEnvironPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareForBootstrap mocks base method.
func (m *MockNetworkingEnviron) PrepareForBootstrap(arg0 environs.BootstrapContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForBootstrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareForBootstrap indicates an expected call of PrepareForBootstrap.
func (mr *MockNetworkingEnvironMockRecorder) PrepareForBootstrap(arg0, arg1 any) *MockNetworkingEnvironPrepareForBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForBootstrap", reflect.TypeOf((*MockNetworkingEnviron)(nil).PrepareForBootstrap), arg0, arg1)
	return &MockNetworkingEnvironPrepareForBootstrapCall{Call: call}
}

// MockNetworkingEnvironPrepareForBootstrapCall wrap *gomock.Call
type MockNetworkingEnvironPrepareForBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironPrepareForBootstrapCall) Return(arg0 error) *MockNetworkingEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironPrepareForBootstrapCall) Do(f func(environs.BootstrapContext, string) error) *MockNetworkingEnvironPrepareForBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironPrepareForBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, string) error) *MockNetworkingEnvironPrepareForBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Provider mocks base method.
func (m *MockNetworkingEnviron) Provider() environs.EnvironProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(environs.EnvironProvider)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockNetworkingEnvironMockRecorder) Provider() *MockNetworkingEnvironProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockNetworkingEnviron)(nil).Provider))
	return &MockNetworkingEnvironProviderCall{Call: call}
}

// MockNetworkingEnvironProviderCall wrap *gomock.Call
type MockNetworkingEnvironProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironProviderCall) Return(arg0 environs.EnvironProvider) *MockNetworkingEnvironProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironProviderCall) Do(f func() environs.EnvironProvider) *MockNetworkingEnvironProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironProviderCall) DoAndReturn(f func() environs.EnvironProvider) *MockNetworkingEnvironProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderSpaceInfo mocks base method.
func (m *MockNetworkingEnviron) ProviderSpaceInfo(arg0 envcontext.ProviderCallContext, arg1 *network.SpaceInfo) (*environs.ProviderSpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderSpaceInfo", arg0, arg1)
	ret0, _ := ret[0].(*environs.ProviderSpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderSpaceInfo indicates an expected call of ProviderSpaceInfo.
func (mr *MockNetworkingEnvironMockRecorder) ProviderSpaceInfo(arg0, arg1 any) *MockNetworkingEnvironProviderSpaceInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderSpaceInfo", reflect.TypeOf((*MockNetworkingEnviron)(nil).ProviderSpaceInfo), arg0, arg1)
	return &MockNetworkingEnvironProviderSpaceInfoCall{Call: call}
}

// MockNetworkingEnvironProviderSpaceInfoCall wrap *gomock.Call
type MockNetworkingEnvironProviderSpaceInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironProviderSpaceInfoCall) Return(arg0 *environs.ProviderSpaceInfo, arg1 error) *MockNetworkingEnvironProviderSpaceInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironProviderSpaceInfoCall) Do(f func(envcontext.ProviderCallContext, *network.SpaceInfo) (*environs.ProviderSpaceInfo, error)) *MockNetworkingEnvironProviderSpaceInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironProviderSpaceInfoCall) DoAndReturn(f func(envcontext.ProviderCallContext, *network.SpaceInfo) (*environs.ProviderSpaceInfo, error)) *MockNetworkingEnvironProviderSpaceInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseContainerAddresses mocks base method.
func (m *MockNetworkingEnviron) ReleaseContainerAddresses(arg0 envcontext.ProviderCallContext, arg1 []network.ProviderInterfaceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerAddresses indicates an expected call of ReleaseContainerAddresses.
func (mr *MockNetworkingEnvironMockRecorder) ReleaseContainerAddresses(arg0, arg1 any) *MockNetworkingEnvironReleaseContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerAddresses", reflect.TypeOf((*MockNetworkingEnviron)(nil).ReleaseContainerAddresses), arg0, arg1)
	return &MockNetworkingEnvironReleaseContainerAddressesCall{Call: call}
}

// MockNetworkingEnvironReleaseContainerAddressesCall wrap *gomock.Call
type MockNetworkingEnvironReleaseContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironReleaseContainerAddressesCall) Return(arg0 error) *MockNetworkingEnvironReleaseContainerAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironReleaseContainerAddressesCall) Do(f func(envcontext.ProviderCallContext, []network.ProviderInterfaceInfo) error) *MockNetworkingEnvironReleaseContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironReleaseContainerAddressesCall) DoAndReturn(f func(envcontext.ProviderCallContext, []network.ProviderInterfaceInfo) error) *MockNetworkingEnvironReleaseContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockNetworkingEnviron) SetConfig(arg0 context.Context, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockNetworkingEnvironMockRecorder) SetConfig(arg0, arg1 any) *MockNetworkingEnvironSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockNetworkingEnviron)(nil).SetConfig), arg0, arg1)
	return &MockNetworkingEnvironSetConfigCall{Call: call}
}

// MockNetworkingEnvironSetConfigCall wrap *gomock.Call
type MockNetworkingEnvironSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSetConfigCall) Return(arg0 error) *MockNetworkingEnvironSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSetConfigCall) Do(f func(context.Context, *config.Config) error) *MockNetworkingEnvironSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSetConfigCall) DoAndReturn(f func(context.Context, *config.Config) error) *MockNetworkingEnvironSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Spaces mocks base method.
func (m *MockNetworkingEnviron) Spaces(arg0 envcontext.ProviderCallContext) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spaces indicates an expected call of Spaces.
func (mr *MockNetworkingEnvironMockRecorder) Spaces(arg0 any) *MockNetworkingEnvironSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockNetworkingEnviron)(nil).Spaces), arg0)
	return &MockNetworkingEnvironSpacesCall{Call: call}
}

// MockNetworkingEnvironSpacesCall wrap *gomock.Call
type MockNetworkingEnvironSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkingEnvironSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSpacesCall) Do(f func(envcontext.ProviderCallContext) (network.SpaceInfos, error)) *MockNetworkingEnvironSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSpacesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (network.SpaceInfos, error)) *MockNetworkingEnvironSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartInstance mocks base method.
func (m *MockNetworkingEnviron) StartInstance(arg0 envcontext.ProviderCallContext, arg1 environs.StartInstanceParams) (*environs.StartInstanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0, arg1)
	ret0, _ := ret[0].(*environs.StartInstanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockNetworkingEnvironMockRecorder) StartInstance(arg0, arg1 any) *MockNetworkingEnvironStartInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockNetworkingEnviron)(nil).StartInstance), arg0, arg1)
	return &MockNetworkingEnvironStartInstanceCall{Call: call}
}

// MockNetworkingEnvironStartInstanceCall wrap *gomock.Call
type MockNetworkingEnvironStartInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStartInstanceCall) Return(arg0 *environs.StartInstanceResult, arg1 error) *MockNetworkingEnvironStartInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStartInstanceCall) Do(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockNetworkingEnvironStartInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStartInstanceCall) DoAndReturn(f func(envcontext.ProviderCallContext, environs.StartInstanceParams) (*environs.StartInstanceResult, error)) *MockNetworkingEnvironStartInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopInstances mocks base method.
func (m *MockNetworkingEnviron) StopInstances(arg0 envcontext.ProviderCallContext, arg1 ...instance.Id) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstances indicates an expected call of StopInstances.
func (mr *MockNetworkingEnvironMockRecorder) StopInstances(arg0 any, arg1 ...any) *MockNetworkingEnvironStopInstancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstances", reflect.TypeOf((*MockNetworkingEnviron)(nil).StopInstances), varargs...)
	return &MockNetworkingEnvironStopInstancesCall{Call: call}
}

// MockNetworkingEnvironStopInstancesCall wrap *gomock.Call
type MockNetworkingEnvironStopInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStopInstancesCall) Return(arg0 error) *MockNetworkingEnvironStopInstancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStopInstancesCall) Do(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockNetworkingEnvironStopInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStopInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext, ...instance.Id) error) *MockNetworkingEnvironStopInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockNetworkingEnviron) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockNetworkingEnvironMockRecorder) StorageProvider(arg0 any) *MockNetworkingEnvironStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockNetworkingEnviron)(nil).StorageProvider), arg0)
	return &MockNetworkingEnvironStorageProviderCall{Call: call}
}

// MockNetworkingEnvironStorageProviderCall wrap *gomock.Call
type MockNetworkingEnvironStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockNetworkingEnvironStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockNetworkingEnvironStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockNetworkingEnvironStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockNetworkingEnviron) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockNetworkingEnvironMockRecorder) StorageProviderTypes() *MockNetworkingEnvironStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockNetworkingEnviron)(nil).StorageProviderTypes))
	return &MockNetworkingEnvironStorageProviderTypesCall{Call: call}
}

// MockNetworkingEnvironStorageProviderTypesCall wrap *gomock.Call
type MockNetworkingEnvironStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockNetworkingEnvironStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockNetworkingEnvironStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockNetworkingEnvironStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subnets mocks base method.
func (m *MockNetworkingEnviron) Subnets(arg0 envcontext.ProviderCallContext, arg1 instance.Id, arg2 []network.Id) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets", arg0, arg1, arg2)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnets indicates an expected call of Subnets.
func (mr *MockNetworkingEnvironMockRecorder) Subnets(arg0, arg1, arg2 any) *MockNetworkingEnvironSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockNetworkingEnviron)(nil).Subnets), arg0, arg1, arg2)
	return &MockNetworkingEnvironSubnetsCall{Call: call}
}

// MockNetworkingEnvironSubnetsCall wrap *gomock.Call
type MockNetworkingEnvironSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSubnetsCall) Return(arg0 []network.SubnetInfo, arg1 error) *MockNetworkingEnvironSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSubnetsCall) Do(f func(envcontext.ProviderCallContext, instance.Id, []network.Id) ([]network.SubnetInfo, error)) *MockNetworkingEnvironSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSubnetsCall) DoAndReturn(f func(envcontext.ProviderCallContext, instance.Id, []network.Id) ([]network.SubnetInfo, error)) *MockNetworkingEnvironSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsContainerAddresses mocks base method.
func (m *MockNetworkingEnviron) SupportsContainerAddresses(arg0 envcontext.ProviderCallContext) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsContainerAddresses", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsContainerAddresses indicates an expected call of SupportsContainerAddresses.
func (mr *MockNetworkingEnvironMockRecorder) SupportsContainerAddresses(arg0 any) *MockNetworkingEnvironSupportsContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsContainerAddresses", reflect.TypeOf((*MockNetworkingEnviron)(nil).SupportsContainerAddresses), arg0)
	return &MockNetworkingEnvironSupportsContainerAddressesCall{Call: call}
}

// MockNetworkingEnvironSupportsContainerAddressesCall wrap *gomock.Call
type MockNetworkingEnvironSupportsContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSupportsContainerAddressesCall) Return(arg0 bool, arg1 error) *MockNetworkingEnvironSupportsContainerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSupportsContainerAddressesCall) Do(f func(envcontext.ProviderCallContext) (bool, error)) *MockNetworkingEnvironSupportsContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSupportsContainerAddressesCall) DoAndReturn(f func(envcontext.ProviderCallContext) (bool, error)) *MockNetworkingEnvironSupportsContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaceDiscovery mocks base method.
func (m *MockNetworkingEnviron) SupportsSpaceDiscovery() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaceDiscovery")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaceDiscovery indicates an expected call of SupportsSpaceDiscovery.
func (mr *MockNetworkingEnvironMockRecorder) SupportsSpaceDiscovery() *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaceDiscovery", reflect.TypeOf((*MockNetworkingEnviron)(nil).SupportsSpaceDiscovery))
	return &MockNetworkingEnvironSupportsSpaceDiscoveryCall{Call: call}
}

// MockNetworkingEnvironSupportsSpaceDiscoveryCall wrap *gomock.Call
type MockNetworkingEnvironSupportsSpaceDiscoveryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSupportsSpaceDiscoveryCall) Return(arg0 bool, arg1 error) *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSupportsSpaceDiscoveryCall) Do(f func() (bool, error)) *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSupportsSpaceDiscoveryCall) DoAndReturn(f func() (bool, error)) *MockNetworkingEnvironSupportsSpaceDiscoveryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaces mocks base method.
func (m *MockNetworkingEnviron) SupportsSpaces() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaces")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaces indicates an expected call of SupportsSpaces.
func (mr *MockNetworkingEnvironMockRecorder) SupportsSpaces() *MockNetworkingEnvironSupportsSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaces", reflect.TypeOf((*MockNetworkingEnviron)(nil).SupportsSpaces))
	return &MockNetworkingEnvironSupportsSpacesCall{Call: call}
}

// MockNetworkingEnvironSupportsSpacesCall wrap *gomock.Call
type MockNetworkingEnvironSupportsSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkingEnvironSupportsSpacesCall) Return(arg0 bool, arg1 error) *MockNetworkingEnvironSupportsSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkingEnvironSupportsSpacesCall) Do(f func() (bool, error)) *MockNetworkingEnvironSupportsSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkingEnvironSupportsSpacesCall) DoAndReturn(f func() (bool, error)) *MockNetworkingEnvironSupportsSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
