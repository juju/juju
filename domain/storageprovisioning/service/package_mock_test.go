// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go -source service.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	life "github.com/juju/juju/domain/life"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// CheckMachineIsDead mocks base method.
func (m *MockState) CheckMachineIsDead(arg0 context.Context, arg1 machine.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMachineIsDead", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMachineIsDead indicates an expected call of CheckMachineIsDead.
func (mr *MockStateMockRecorder) CheckMachineIsDead(arg0, arg1 any) *MockStateCheckMachineIsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMachineIsDead", reflect.TypeOf((*MockState)(nil).CheckMachineIsDead), arg0, arg1)
	return &MockStateCheckMachineIsDeadCall{Call: call}
}

// MockStateCheckMachineIsDeadCall wrap *gomock.Call
type MockStateCheckMachineIsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckMachineIsDeadCall) Return(arg0 bool, arg1 error) *MockStateCheckMachineIsDeadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckMachineIsDeadCall) Do(f func(context.Context, machine.UUID) (bool, error)) *MockStateCheckMachineIsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckMachineIsDeadCall) DoAndReturn(f func(context.Context, machine.UUID) (bool, error)) *MockStateCheckMachineIsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentLifeForNetNode mocks base method.
func (m *MockState) GetFilesystemAttachmentLifeForNetNode(ctx context.Context, netNodeUUID string) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentLifeForNetNode", ctx, netNodeUUID)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentLifeForNetNode indicates an expected call of GetFilesystemAttachmentLifeForNetNode.
func (mr *MockStateMockRecorder) GetFilesystemAttachmentLifeForNetNode(ctx, netNodeUUID any) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetFilesystemAttachmentLifeForNetNode), ctx, netNodeUUID)
	return &MockStateGetFilesystemAttachmentLifeForNetNodeCall{Call: call}
}

// MockStateGetFilesystemAttachmentLifeForNetNodeCall wrap *gomock.Call
type MockStateGetFilesystemAttachmentLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemAttachmentLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemAttachmentLifeForNetNodeCall) Do(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemAttachmentLifeForNetNodeCall) DoAndReturn(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemLifeForNetNode mocks base method.
func (m *MockState) GetFilesystemLifeForNetNode(ctx context.Context, netNodeUUID string) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemLifeForNetNode", ctx, netNodeUUID)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemLifeForNetNode indicates an expected call of GetFilesystemLifeForNetNode.
func (mr *MockStateMockRecorder) GetFilesystemLifeForNetNode(ctx, netNodeUUID any) *MockStateGetFilesystemLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetFilesystemLifeForNetNode), ctx, netNodeUUID)
	return &MockStateGetFilesystemLifeForNetNodeCall{Call: call}
}

// MockStateGetFilesystemLifeForNetNodeCall wrap *gomock.Call
type MockStateGetFilesystemLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetFilesystemLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemLifeForNetNodeCall) Do(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetFilesystemLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemLifeForNetNodeCall) DoAndReturn(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetFilesystemLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineNetNodeUUID mocks base method.
func (m *MockState) GetMachineNetNodeUUID(arg0 context.Context, arg1 machine.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineNetNodeUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineNetNodeUUID indicates an expected call of GetMachineNetNodeUUID.
func (mr *MockStateMockRecorder) GetMachineNetNodeUUID(arg0, arg1 any) *MockStateGetMachineNetNodeUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineNetNodeUUID", reflect.TypeOf((*MockState)(nil).GetMachineNetNodeUUID), arg0, arg1)
	return &MockStateGetMachineNetNodeUUIDCall{Call: call}
}

// MockStateGetMachineNetNodeUUIDCall wrap *gomock.Call
type MockStateGetMachineNetNodeUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineNetNodeUUIDCall) Return(arg0 string, arg1 error) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineNetNodeUUIDCall) Do(f func(context.Context, machine.UUID) (string, error)) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineNetNodeUUIDCall) DoAndReturn(f func(context.Context, machine.UUID) (string, error)) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentLifeForNetNode mocks base method.
func (m *MockState) GetVolumeAttachmentLifeForNetNode(ctx context.Context, netNodeUUID string) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentLifeForNetNode", ctx, netNodeUUID)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentLifeForNetNode indicates an expected call of GetVolumeAttachmentLifeForNetNode.
func (mr *MockStateMockRecorder) GetVolumeAttachmentLifeForNetNode(ctx, netNodeUUID any) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentLifeForNetNode), ctx, netNodeUUID)
	return &MockStateGetVolumeAttachmentLifeForNetNodeCall{Call: call}
}

// MockStateGetVolumeAttachmentLifeForNetNodeCall wrap *gomock.Call
type MockStateGetVolumeAttachmentLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentLifeForNetNodeCall) Do(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentLifeForNetNodeCall) DoAndReturn(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentPlanLifeForNetNode mocks base method.
func (m *MockState) GetVolumeAttachmentPlanLifeForNetNode(ctx context.Context, netNodeUUID string) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentPlanLifeForNetNode", ctx, netNodeUUID)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentPlanLifeForNetNode indicates an expected call of GetVolumeAttachmentPlanLifeForNetNode.
func (mr *MockStateMockRecorder) GetVolumeAttachmentPlanLifeForNetNode(ctx, netNodeUUID any) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentPlanLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentPlanLifeForNetNode), ctx, netNodeUUID)
	return &MockStateGetVolumeAttachmentPlanLifeForNetNodeCall{Call: call}
}

// MockStateGetVolumeAttachmentPlanLifeForNetNodeCall wrap *gomock.Call
type MockStateGetVolumeAttachmentPlanLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall) Do(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall) DoAndReturn(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeLifeForNetNode mocks base method.
func (m *MockState) GetVolumeLifeForNetNode(ctx context.Context, netNodeUUID string) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeLifeForNetNode", ctx, netNodeUUID)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeLifeForNetNode indicates an expected call of GetVolumeLifeForNetNode.
func (mr *MockStateMockRecorder) GetVolumeLifeForNetNode(ctx, netNodeUUID any) *MockStateGetVolumeLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeLifeForNetNode), ctx, netNodeUUID)
	return &MockStateGetVolumeLifeForNetNodeCall{Call: call}
}

// MockStateGetVolumeLifeForNetNodeCall wrap *gomock.Call
type MockStateGetVolumeLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetVolumeLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeLifeForNetNodeCall) Do(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetVolumeLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeLifeForNetNodeCall) DoAndReturn(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetVolumeLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedFilesystemAttachments mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedFilesystemAttachments(netNodeUUID string) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedFilesystemAttachments", netNodeUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedFilesystemAttachments indicates an expected call of InitialWatchStatementMachineProvisionedFilesystemAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedFilesystemAttachments(netNodeUUID any) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedFilesystemAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedFilesystemAttachments), netNodeUUID)
	return &MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall) Do(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall) DoAndReturn(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedFilesystems mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedFilesystems(netNodeUUID string) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedFilesystems", netNodeUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedFilesystems indicates an expected call of InitialWatchStatementMachineProvisionedFilesystems.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedFilesystems(netNodeUUID any) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedFilesystems", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedFilesystems), netNodeUUID)
	return &MockStateInitialWatchStatementMachineProvisionedFilesystemsCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedFilesystemsCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall) Do(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall) DoAndReturn(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedVolumeAttachments mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedVolumeAttachments(netNodeUUID string) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedVolumeAttachments", netNodeUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedVolumeAttachments indicates an expected call of InitialWatchStatementMachineProvisionedVolumeAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedVolumeAttachments(netNodeUUID any) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedVolumeAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedVolumeAttachments), netNodeUUID)
	return &MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall) Do(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall) DoAndReturn(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedVolumes mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedVolumes(netNodeUUID string) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedVolumes", netNodeUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedVolumes indicates an expected call of InitialWatchStatementMachineProvisionedVolumes.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedVolumes(netNodeUUID any) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedVolumes", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedVolumes), netNodeUUID)
	return &MockStateInitialWatchStatementMachineProvisionedVolumesCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedVolumesCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedVolumesCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedVolumesCall) Do(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedVolumesCall) DoAndReturn(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedFilesystemAttachments mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedFilesystemAttachments() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedFilesystemAttachments")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedFilesystemAttachments indicates an expected call of InitialWatchStatementModelProvisionedFilesystemAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedFilesystemAttachments() *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedFilesystemAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedFilesystemAttachments))
	return &MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedFilesystems mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedFilesystems() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedFilesystems")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedFilesystems indicates an expected call of InitialWatchStatementModelProvisionedFilesystems.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedFilesystems() *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedFilesystems", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedFilesystems))
	return &MockStateInitialWatchStatementModelProvisionedFilesystemsCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedFilesystemsCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedVolumeAttachments mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedVolumeAttachments() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedVolumeAttachments")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedVolumeAttachments indicates an expected call of InitialWatchStatementModelProvisionedVolumeAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedVolumeAttachments() *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedVolumeAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedVolumeAttachments))
	return &MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedVolumes mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedVolumes() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedVolumes")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedVolumes indicates an expected call of InitialWatchStatementModelProvisionedVolumes.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedVolumes() *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedVolumes", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedVolumes))
	return &MockStateInitialWatchStatementModelProvisionedVolumesCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedVolumesCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedVolumesCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedVolumesCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedVolumesCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementVolumeAttachmentPlans mocks base method.
func (m *MockState) InitialWatchStatementVolumeAttachmentPlans(netNodeUUID string) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementVolumeAttachmentPlans", netNodeUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementVolumeAttachmentPlans indicates an expected call of InitialWatchStatementVolumeAttachmentPlans.
func (mr *MockStateMockRecorder) InitialWatchStatementVolumeAttachmentPlans(netNodeUUID any) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementVolumeAttachmentPlans", reflect.TypeOf((*MockState)(nil).InitialWatchStatementVolumeAttachmentPlans), netNodeUUID)
	return &MockStateInitialWatchStatementVolumeAttachmentPlansCall{Call: call}
}

// MockStateInitialWatchStatementVolumeAttachmentPlansCall wrap *gomock.Call
type MockStateInitialWatchStatementVolumeAttachmentPlansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementVolumeAttachmentPlansCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementVolumeAttachmentPlansCall) Do(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementVolumeAttachmentPlansCall) DoAndReturn(f func(string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchMachineCloudInstance mocks base method.
func (m *MockState) NamespaceForWatchMachineCloudInstance() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchMachineCloudInstance")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchMachineCloudInstance indicates an expected call of NamespaceForWatchMachineCloudInstance.
func (mr *MockStateMockRecorder) NamespaceForWatchMachineCloudInstance() *MockStateNamespaceForWatchMachineCloudInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchMachineCloudInstance", reflect.TypeOf((*MockState)(nil).NamespaceForWatchMachineCloudInstance))
	return &MockStateNamespaceForWatchMachineCloudInstanceCall{Call: call}
}

// MockStateNamespaceForWatchMachineCloudInstanceCall wrap *gomock.Call
type MockStateNamespaceForWatchMachineCloudInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) Return(arg0 string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) Do(f func() string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(initialStateQuery eventsource.NamespaceQuery, mapper eventsource.Mapper, filterOption eventsource.FilterOption, filterOptions ...eventsource.FilterOption) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{initialStateQuery, mapper, filterOption}
	for _, a := range filterOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(initialStateQuery, mapper, filterOption any, filterOptions ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{initialStateQuery, mapper, filterOption}, filterOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNamespaceWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceWatcher(initialQuery eventsource.NamespaceQuery, filterOption eventsource.FilterOption, filterOptions ...eventsource.FilterOption) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{initialQuery, filterOption}
	for _, a := range filterOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceWatcher", varargs...)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceWatcher indicates an expected call of NewNamespaceWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceWatcher(initialQuery, filterOption any, filterOptions ...any) *MockWatcherFactoryNewNamespaceWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{initialQuery, filterOption}, filterOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Do(f func(eventsource.NamespaceQuery, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceWatcherCall) DoAndReturn(f func(eventsource.NamespaceQuery, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(filterOption eventsource.FilterOption, filterOptions ...eventsource.FilterOption) (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{filterOption}
	for _, a := range filterOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(filterOption any, filterOptions ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{filterOption}, filterOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.NotifyWatcher, arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.NotifyWatcher, error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.NotifyWatcher, error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
