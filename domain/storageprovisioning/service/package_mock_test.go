// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go -source service.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	life "github.com/juju/juju/domain/life"
	network "github.com/juju/juju/domain/network"
	storageprovisioning "github.com/juju/juju/domain/storageprovisioning"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// CheckFilesystemForIDExists mocks base method.
func (m *MockState) CheckFilesystemForIDExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFilesystemForIDExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFilesystemForIDExists indicates an expected call of CheckFilesystemForIDExists.
func (mr *MockStateMockRecorder) CheckFilesystemForIDExists(arg0, arg1 any) *MockStateCheckFilesystemForIDExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFilesystemForIDExists", reflect.TypeOf((*MockState)(nil).CheckFilesystemForIDExists), arg0, arg1)
	return &MockStateCheckFilesystemForIDExistsCall{Call: call}
}

// MockStateCheckFilesystemForIDExistsCall wrap *gomock.Call
type MockStateCheckFilesystemForIDExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckFilesystemForIDExistsCall) Return(arg0 bool, arg1 error) *MockStateCheckFilesystemForIDExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckFilesystemForIDExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStateCheckFilesystemForIDExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckFilesystemForIDExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateCheckFilesystemForIDExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckMachineIsDead mocks base method.
func (m *MockState) CheckMachineIsDead(arg0 context.Context, arg1 machine.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMachineIsDead", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMachineIsDead indicates an expected call of CheckMachineIsDead.
func (mr *MockStateMockRecorder) CheckMachineIsDead(arg0, arg1 any) *MockStateCheckMachineIsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMachineIsDead", reflect.TypeOf((*MockState)(nil).CheckMachineIsDead), arg0, arg1)
	return &MockStateCheckMachineIsDeadCall{Call: call}
}

// MockStateCheckMachineIsDeadCall wrap *gomock.Call
type MockStateCheckMachineIsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckMachineIsDeadCall) Return(arg0 bool, arg1 error) *MockStateCheckMachineIsDeadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckMachineIsDeadCall) Do(f func(context.Context, machine.UUID) (bool, error)) *MockStateCheckMachineIsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckMachineIsDeadCall) DoAndReturn(f func(context.Context, machine.UUID) (bool, error)) *MockStateCheckMachineIsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystem mocks base method.
func (m *MockState) GetFilesystem(arg0 context.Context, arg1 storageprovisioning.FilesystemUUID) (storageprovisioning.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystem", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystem indicates an expected call of GetFilesystem.
func (mr *MockStateMockRecorder) GetFilesystem(arg0, arg1 any) *MockStateGetFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystem", reflect.TypeOf((*MockState)(nil).GetFilesystem), arg0, arg1)
	return &MockStateGetFilesystemCall{Call: call}
}

// MockStateGetFilesystemCall wrap *gomock.Call
type MockStateGetFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemCall) Return(arg0 storageprovisioning.Filesystem, arg1 error) *MockStateGetFilesystemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemCall) Do(f func(context.Context, storageprovisioning.FilesystemUUID) (storageprovisioning.Filesystem, error)) *MockStateGetFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemUUID) (storageprovisioning.Filesystem, error)) *MockStateGetFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachment mocks base method.
func (m *MockState) GetFilesystemAttachment(arg0 context.Context, arg1 storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachment", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachment indicates an expected call of GetFilesystemAttachment.
func (mr *MockStateMockRecorder) GetFilesystemAttachment(arg0, arg1 any) *MockStateGetFilesystemAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachment", reflect.TypeOf((*MockState)(nil).GetFilesystemAttachment), arg0, arg1)
	return &MockStateGetFilesystemAttachmentCall{Call: call}
}

// MockStateGetFilesystemAttachmentCall wrap *gomock.Call
type MockStateGetFilesystemAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemAttachmentCall) Return(arg0 storageprovisioning.FilesystemAttachment, arg1 error) *MockStateGetFilesystemAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemAttachmentCall) Do(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachment, error)) *MockStateGetFilesystemAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemAttachmentCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachment, error)) *MockStateGetFilesystemAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentIDs mocks base method.
func (m *MockState) GetFilesystemAttachmentIDs(ctx context.Context, uuids []string) (map[string]storageprovisioning.FilesystemAttachmentID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentIDs", ctx, uuids)
	ret0, _ := ret[0].(map[string]storageprovisioning.FilesystemAttachmentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentIDs indicates an expected call of GetFilesystemAttachmentIDs.
func (mr *MockStateMockRecorder) GetFilesystemAttachmentIDs(ctx, uuids any) *MockStateGetFilesystemAttachmentIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentIDs", reflect.TypeOf((*MockState)(nil).GetFilesystemAttachmentIDs), ctx, uuids)
	return &MockStateGetFilesystemAttachmentIDsCall{Call: call}
}

// MockStateGetFilesystemAttachmentIDsCall wrap *gomock.Call
type MockStateGetFilesystemAttachmentIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemAttachmentIDsCall) Return(arg0 map[string]storageprovisioning.FilesystemAttachmentID, arg1 error) *MockStateGetFilesystemAttachmentIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemAttachmentIDsCall) Do(f func(context.Context, []string) (map[string]storageprovisioning.FilesystemAttachmentID, error)) *MockStateGetFilesystemAttachmentIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemAttachmentIDsCall) DoAndReturn(f func(context.Context, []string) (map[string]storageprovisioning.FilesystemAttachmentID, error)) *MockStateGetFilesystemAttachmentIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentLife mocks base method.
func (m *MockState) GetFilesystemAttachmentLife(arg0 context.Context, arg1 storageprovisioning.FilesystemAttachmentUUID) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentLife indicates an expected call of GetFilesystemAttachmentLife.
func (mr *MockStateMockRecorder) GetFilesystemAttachmentLife(arg0, arg1 any) *MockStateGetFilesystemAttachmentLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentLife", reflect.TypeOf((*MockState)(nil).GetFilesystemAttachmentLife), arg0, arg1)
	return &MockStateGetFilesystemAttachmentLifeCall{Call: call}
}

// MockStateGetFilesystemAttachmentLifeCall wrap *gomock.Call
type MockStateGetFilesystemAttachmentLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemAttachmentLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetFilesystemAttachmentLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemAttachmentLifeCall) Do(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (life.Life, error)) *MockStateGetFilesystemAttachmentLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemAttachmentLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (life.Life, error)) *MockStateGetFilesystemAttachmentLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentLifeForNetNode mocks base method.
func (m *MockState) GetFilesystemAttachmentLifeForNetNode(ctx context.Context, netNodeUUID network.NetNodeUUID) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentLifeForNetNode", ctx, netNodeUUID)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentLifeForNetNode indicates an expected call of GetFilesystemAttachmentLifeForNetNode.
func (mr *MockStateMockRecorder) GetFilesystemAttachmentLifeForNetNode(ctx, netNodeUUID any) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetFilesystemAttachmentLifeForNetNode), ctx, netNodeUUID)
	return &MockStateGetFilesystemAttachmentLifeForNetNodeCall{Call: call}
}

// MockStateGetFilesystemAttachmentLifeForNetNodeCall wrap *gomock.Call
type MockStateGetFilesystemAttachmentLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemAttachmentLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemAttachmentLifeForNetNodeCall) Do(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemAttachmentLifeForNetNodeCall) DoAndReturn(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetFilesystemAttachmentLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentParams mocks base method.
func (m *MockState) GetFilesystemAttachmentParams(arg0 context.Context, arg1 storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachmentParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachmentParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentParams indicates an expected call of GetFilesystemAttachmentParams.
func (mr *MockStateMockRecorder) GetFilesystemAttachmentParams(arg0, arg1 any) *MockStateGetFilesystemAttachmentParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentParams", reflect.TypeOf((*MockState)(nil).GetFilesystemAttachmentParams), arg0, arg1)
	return &MockStateGetFilesystemAttachmentParamsCall{Call: call}
}

// MockStateGetFilesystemAttachmentParamsCall wrap *gomock.Call
type MockStateGetFilesystemAttachmentParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemAttachmentParamsCall) Return(arg0 storageprovisioning.FilesystemAttachmentParams, arg1 error) *MockStateGetFilesystemAttachmentParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemAttachmentParamsCall) Do(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachmentParams, error)) *MockStateGetFilesystemAttachmentParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemAttachmentParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachmentParams, error)) *MockStateGetFilesystemAttachmentParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentUUIDForFilesystemNetNode mocks base method.
func (m *MockState) GetFilesystemAttachmentUUIDForFilesystemNetNode(arg0 context.Context, arg1 storageprovisioning.FilesystemUUID, arg2 network.NetNodeUUID) (storageprovisioning.FilesystemAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentUUIDForFilesystemNetNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentUUIDForFilesystemNetNode indicates an expected call of GetFilesystemAttachmentUUIDForFilesystemNetNode.
func (mr *MockStateMockRecorder) GetFilesystemAttachmentUUIDForFilesystemNetNode(arg0, arg1, arg2 any) *MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentUUIDForFilesystemNetNode", reflect.TypeOf((*MockState)(nil).GetFilesystemAttachmentUUIDForFilesystemNetNode), arg0, arg1, arg2)
	return &MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall{Call: call}
}

// MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall wrap *gomock.Call
type MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall) Return(arg0 storageprovisioning.FilesystemAttachmentUUID, arg1 error) *MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall) Do(f func(context.Context, storageprovisioning.FilesystemUUID, network.NetNodeUUID) (storageprovisioning.FilesystemAttachmentUUID, error)) *MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemUUID, network.NetNodeUUID) (storageprovisioning.FilesystemAttachmentUUID, error)) *MockStateGetFilesystemAttachmentUUIDForFilesystemNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemLife mocks base method.
func (m *MockState) GetFilesystemLife(arg0 context.Context, arg1 storageprovisioning.FilesystemUUID) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemLife indicates an expected call of GetFilesystemLife.
func (mr *MockStateMockRecorder) GetFilesystemLife(arg0, arg1 any) *MockStateGetFilesystemLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemLife", reflect.TypeOf((*MockState)(nil).GetFilesystemLife), arg0, arg1)
	return &MockStateGetFilesystemLifeCall{Call: call}
}

// MockStateGetFilesystemLifeCall wrap *gomock.Call
type MockStateGetFilesystemLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetFilesystemLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemLifeCall) Do(f func(context.Context, storageprovisioning.FilesystemUUID) (life.Life, error)) *MockStateGetFilesystemLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemUUID) (life.Life, error)) *MockStateGetFilesystemLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemLifeForNetNode mocks base method.
func (m *MockState) GetFilesystemLifeForNetNode(arg0 context.Context, arg1 network.NetNodeUUID) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemLifeForNetNode", arg0, arg1)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemLifeForNetNode indicates an expected call of GetFilesystemLifeForNetNode.
func (mr *MockStateMockRecorder) GetFilesystemLifeForNetNode(arg0, arg1 any) *MockStateGetFilesystemLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetFilesystemLifeForNetNode), arg0, arg1)
	return &MockStateGetFilesystemLifeForNetNodeCall{Call: call}
}

// MockStateGetFilesystemLifeForNetNodeCall wrap *gomock.Call
type MockStateGetFilesystemLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetFilesystemLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemLifeForNetNodeCall) Do(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetFilesystemLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemLifeForNetNodeCall) DoAndReturn(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetFilesystemLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemParams mocks base method.
func (m *MockState) GetFilesystemParams(arg0 context.Context, arg1 storageprovisioning.FilesystemUUID) (storageprovisioning.FilesystemParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.FilesystemParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemParams indicates an expected call of GetFilesystemParams.
func (mr *MockStateMockRecorder) GetFilesystemParams(arg0, arg1 any) *MockStateGetFilesystemParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemParams", reflect.TypeOf((*MockState)(nil).GetFilesystemParams), arg0, arg1)
	return &MockStateGetFilesystemParamsCall{Call: call}
}

// MockStateGetFilesystemParamsCall wrap *gomock.Call
type MockStateGetFilesystemParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemParamsCall) Return(arg0 storageprovisioning.FilesystemParams, arg1 error) *MockStateGetFilesystemParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemParamsCall) Do(f func(context.Context, storageprovisioning.FilesystemUUID) (storageprovisioning.FilesystemParams, error)) *MockStateGetFilesystemParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemUUID) (storageprovisioning.FilesystemParams, error)) *MockStateGetFilesystemParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemTemplatesForApplication mocks base method.
func (m *MockState) GetFilesystemTemplatesForApplication(arg0 context.Context, arg1 application.ID) ([]storageprovisioning.FilesystemTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemTemplatesForApplication", arg0, arg1)
	ret0, _ := ret[0].([]storageprovisioning.FilesystemTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemTemplatesForApplication indicates an expected call of GetFilesystemTemplatesForApplication.
func (mr *MockStateMockRecorder) GetFilesystemTemplatesForApplication(arg0, arg1 any) *MockStateGetFilesystemTemplatesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemTemplatesForApplication", reflect.TypeOf((*MockState)(nil).GetFilesystemTemplatesForApplication), arg0, arg1)
	return &MockStateGetFilesystemTemplatesForApplicationCall{Call: call}
}

// MockStateGetFilesystemTemplatesForApplicationCall wrap *gomock.Call
type MockStateGetFilesystemTemplatesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemTemplatesForApplicationCall) Return(arg0 []storageprovisioning.FilesystemTemplate, arg1 error) *MockStateGetFilesystemTemplatesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemTemplatesForApplicationCall) Do(f func(context.Context, application.ID) ([]storageprovisioning.FilesystemTemplate, error)) *MockStateGetFilesystemTemplatesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemTemplatesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) ([]storageprovisioning.FilesystemTemplate, error)) *MockStateGetFilesystemTemplatesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemUUIDForID mocks base method.
func (m *MockState) GetFilesystemUUIDForID(arg0 context.Context, arg1 string) (storageprovisioning.FilesystemUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemUUIDForID", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.FilesystemUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemUUIDForID indicates an expected call of GetFilesystemUUIDForID.
func (mr *MockStateMockRecorder) GetFilesystemUUIDForID(arg0, arg1 any) *MockStateGetFilesystemUUIDForIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemUUIDForID", reflect.TypeOf((*MockState)(nil).GetFilesystemUUIDForID), arg0, arg1)
	return &MockStateGetFilesystemUUIDForIDCall{Call: call}
}

// MockStateGetFilesystemUUIDForIDCall wrap *gomock.Call
type MockStateGetFilesystemUUIDForIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFilesystemUUIDForIDCall) Return(arg0 storageprovisioning.FilesystemUUID, arg1 error) *MockStateGetFilesystemUUIDForIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFilesystemUUIDForIDCall) Do(f func(context.Context, string) (storageprovisioning.FilesystemUUID, error)) *MockStateGetFilesystemUUIDForIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFilesystemUUIDForIDCall) DoAndReturn(f func(context.Context, string) (storageprovisioning.FilesystemUUID, error)) *MockStateGetFilesystemUUIDForIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineNetNodeUUID mocks base method.
func (m *MockState) GetMachineNetNodeUUID(arg0 context.Context, arg1 machine.UUID) (network.NetNodeUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineNetNodeUUID", arg0, arg1)
	ret0, _ := ret[0].(network.NetNodeUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineNetNodeUUID indicates an expected call of GetMachineNetNodeUUID.
func (mr *MockStateMockRecorder) GetMachineNetNodeUUID(arg0, arg1 any) *MockStateGetMachineNetNodeUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineNetNodeUUID", reflect.TypeOf((*MockState)(nil).GetMachineNetNodeUUID), arg0, arg1)
	return &MockStateGetMachineNetNodeUUIDCall{Call: call}
}

// MockStateGetMachineNetNodeUUIDCall wrap *gomock.Call
type MockStateGetMachineNetNodeUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineNetNodeUUIDCall) Return(arg0 network.NetNodeUUID, arg1 error) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineNetNodeUUIDCall) Do(f func(context.Context, machine.UUID) (network.NetNodeUUID, error)) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineNetNodeUUIDCall) DoAndReturn(f func(context.Context, machine.UUID) (network.NetNodeUUID, error)) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageAttachmentIDsForUnit mocks base method.
func (m *MockState) GetStorageAttachmentIDsForUnit(ctx context.Context, unitUUID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAttachmentIDsForUnit", ctx, unitUUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAttachmentIDsForUnit indicates an expected call of GetStorageAttachmentIDsForUnit.
func (mr *MockStateMockRecorder) GetStorageAttachmentIDsForUnit(ctx, unitUUID any) *MockStateGetStorageAttachmentIDsForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAttachmentIDsForUnit", reflect.TypeOf((*MockState)(nil).GetStorageAttachmentIDsForUnit), ctx, unitUUID)
	return &MockStateGetStorageAttachmentIDsForUnitCall{Call: call}
}

// MockStateGetStorageAttachmentIDsForUnitCall wrap *gomock.Call
type MockStateGetStorageAttachmentIDsForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageAttachmentIDsForUnitCall) Return(arg0 []string, arg1 error) *MockStateGetStorageAttachmentIDsForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageAttachmentIDsForUnitCall) Do(f func(context.Context, string) ([]string, error)) *MockStateGetStorageAttachmentIDsForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageAttachmentIDsForUnitCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStateGetStorageAttachmentIDsForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageAttachmentLife mocks base method.
func (m *MockState) GetStorageAttachmentLife(ctx context.Context, unitUUID, storageInstanceUUID string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAttachmentLife", ctx, unitUUID, storageInstanceUUID)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAttachmentLife indicates an expected call of GetStorageAttachmentLife.
func (mr *MockStateMockRecorder) GetStorageAttachmentLife(ctx, unitUUID, storageInstanceUUID any) *MockStateGetStorageAttachmentLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAttachmentLife", reflect.TypeOf((*MockState)(nil).GetStorageAttachmentLife), ctx, unitUUID, storageInstanceUUID)
	return &MockStateGetStorageAttachmentLifeCall{Call: call}
}

// MockStateGetStorageAttachmentLifeCall wrap *gomock.Call
type MockStateGetStorageAttachmentLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageAttachmentLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetStorageAttachmentLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageAttachmentLifeCall) Do(f func(context.Context, string, string) (life.Life, error)) *MockStateGetStorageAttachmentLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageAttachmentLifeCall) DoAndReturn(f func(context.Context, string, string) (life.Life, error)) *MockStateGetStorageAttachmentLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageAttachmentLifeForUnit mocks base method.
func (m *MockState) GetStorageAttachmentLifeForUnit(ctx context.Context, unitUUID string) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAttachmentLifeForUnit", ctx, unitUUID)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAttachmentLifeForUnit indicates an expected call of GetStorageAttachmentLifeForUnit.
func (mr *MockStateMockRecorder) GetStorageAttachmentLifeForUnit(ctx, unitUUID any) *MockStateGetStorageAttachmentLifeForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAttachmentLifeForUnit", reflect.TypeOf((*MockState)(nil).GetStorageAttachmentLifeForUnit), ctx, unitUUID)
	return &MockStateGetStorageAttachmentLifeForUnitCall{Call: call}
}

// MockStateGetStorageAttachmentLifeForUnitCall wrap *gomock.Call
type MockStateGetStorageAttachmentLifeForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageAttachmentLifeForUnitCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetStorageAttachmentLifeForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageAttachmentLifeForUnitCall) Do(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetStorageAttachmentLifeForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageAttachmentLifeForUnitCall) DoAndReturn(f func(context.Context, string) (map[string]life.Life, error)) *MockStateGetStorageAttachmentLifeForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageAttachmentUUIDForUnit mocks base method.
func (m *MockState) GetStorageAttachmentUUIDForUnit(ctx context.Context, storageID, unitUUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAttachmentUUIDForUnit", ctx, storageID, unitUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAttachmentUUIDForUnit indicates an expected call of GetStorageAttachmentUUIDForUnit.
func (mr *MockStateMockRecorder) GetStorageAttachmentUUIDForUnit(ctx, storageID, unitUUID any) *MockStateGetStorageAttachmentUUIDForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAttachmentUUIDForUnit", reflect.TypeOf((*MockState)(nil).GetStorageAttachmentUUIDForUnit), ctx, storageID, unitUUID)
	return &MockStateGetStorageAttachmentUUIDForUnitCall{Call: call}
}

// MockStateGetStorageAttachmentUUIDForUnitCall wrap *gomock.Call
type MockStateGetStorageAttachmentUUIDForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageAttachmentUUIDForUnitCall) Return(arg0 string, arg1 error) *MockStateGetStorageAttachmentUUIDForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageAttachmentUUIDForUnitCall) Do(f func(context.Context, string, string) (string, error)) *MockStateGetStorageAttachmentUUIDForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageAttachmentUUIDForUnitCall) DoAndReturn(f func(context.Context, string, string) (string, error)) *MockStateGetStorageAttachmentUUIDForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageInstanceUUIDByID mocks base method.
func (m *MockState) GetStorageInstanceUUIDByID(ctx context.Context, storageID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageInstanceUUIDByID", ctx, storageID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageInstanceUUIDByID indicates an expected call of GetStorageInstanceUUIDByID.
func (mr *MockStateMockRecorder) GetStorageInstanceUUIDByID(ctx, storageID any) *MockStateGetStorageInstanceUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageInstanceUUIDByID", reflect.TypeOf((*MockState)(nil).GetStorageInstanceUUIDByID), ctx, storageID)
	return &MockStateGetStorageInstanceUUIDByIDCall{Call: call}
}

// MockStateGetStorageInstanceUUIDByIDCall wrap *gomock.Call
type MockStateGetStorageInstanceUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageInstanceUUIDByIDCall) Return(arg0 string, arg1 error) *MockStateGetStorageInstanceUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageInstanceUUIDByIDCall) Do(f func(context.Context, string) (string, error)) *MockStateGetStorageInstanceUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageInstanceUUIDByIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateGetStorageInstanceUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageResourceTagInfoForApplication mocks base method.
func (m *MockState) GetStorageResourceTagInfoForApplication(arg0 context.Context, arg1 application.ID, arg2 string) (storageprovisioning.ApplicationResourceTagInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageResourceTagInfoForApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.ApplicationResourceTagInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageResourceTagInfoForApplication indicates an expected call of GetStorageResourceTagInfoForApplication.
func (mr *MockStateMockRecorder) GetStorageResourceTagInfoForApplication(arg0, arg1, arg2 any) *MockStateGetStorageResourceTagInfoForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageResourceTagInfoForApplication", reflect.TypeOf((*MockState)(nil).GetStorageResourceTagInfoForApplication), arg0, arg1, arg2)
	return &MockStateGetStorageResourceTagInfoForApplicationCall{Call: call}
}

// MockStateGetStorageResourceTagInfoForApplicationCall wrap *gomock.Call
type MockStateGetStorageResourceTagInfoForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageResourceTagInfoForApplicationCall) Return(arg0 storageprovisioning.ApplicationResourceTagInfo, arg1 error) *MockStateGetStorageResourceTagInfoForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageResourceTagInfoForApplicationCall) Do(f func(context.Context, application.ID, string) (storageprovisioning.ApplicationResourceTagInfo, error)) *MockStateGetStorageResourceTagInfoForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageResourceTagInfoForApplicationCall) DoAndReturn(f func(context.Context, application.ID, string) (storageprovisioning.ApplicationResourceTagInfo, error)) *MockStateGetStorageResourceTagInfoForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageResourceTagInfoForModel mocks base method.
func (m *MockState) GetStorageResourceTagInfoForModel(arg0 context.Context, arg1 string) (storageprovisioning.ModelResourceTagInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageResourceTagInfoForModel", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.ModelResourceTagInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageResourceTagInfoForModel indicates an expected call of GetStorageResourceTagInfoForModel.
func (mr *MockStateMockRecorder) GetStorageResourceTagInfoForModel(arg0, arg1 any) *MockStateGetStorageResourceTagInfoForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageResourceTagInfoForModel", reflect.TypeOf((*MockState)(nil).GetStorageResourceTagInfoForModel), arg0, arg1)
	return &MockStateGetStorageResourceTagInfoForModelCall{Call: call}
}

// MockStateGetStorageResourceTagInfoForModelCall wrap *gomock.Call
type MockStateGetStorageResourceTagInfoForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageResourceTagInfoForModelCall) Return(arg0 storageprovisioning.ModelResourceTagInfo, arg1 error) *MockStateGetStorageResourceTagInfoForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageResourceTagInfoForModelCall) Do(f func(context.Context, string) (storageprovisioning.ModelResourceTagInfo, error)) *MockStateGetStorageResourceTagInfoForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageResourceTagInfoForModelCall) DoAndReturn(f func(context.Context, string) (storageprovisioning.ModelResourceTagInfo, error)) *MockStateGetStorageResourceTagInfoForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitNetNodeUUID mocks base method.
func (m *MockState) GetUnitNetNodeUUID(arg0 context.Context, arg1 unit.UUID) (network.NetNodeUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNetNodeUUID", arg0, arg1)
	ret0, _ := ret[0].(network.NetNodeUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNetNodeUUID indicates an expected call of GetUnitNetNodeUUID.
func (mr *MockStateMockRecorder) GetUnitNetNodeUUID(arg0, arg1 any) *MockStateGetUnitNetNodeUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNetNodeUUID", reflect.TypeOf((*MockState)(nil).GetUnitNetNodeUUID), arg0, arg1)
	return &MockStateGetUnitNetNodeUUIDCall{Call: call}
}

// MockStateGetUnitNetNodeUUIDCall wrap *gomock.Call
type MockStateGetUnitNetNodeUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitNetNodeUUIDCall) Return(arg0 network.NetNodeUUID, arg1 error) *MockStateGetUnitNetNodeUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitNetNodeUUIDCall) Do(f func(context.Context, unit.UUID) (network.NetNodeUUID, error)) *MockStateGetUnitNetNodeUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitNetNodeUUIDCall) DoAndReturn(f func(context.Context, unit.UUID) (network.NetNodeUUID, error)) *MockStateGetUnitNetNodeUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolume mocks base method.
func (m *MockState) GetVolume(arg0 context.Context, arg1 storageprovisioning.VolumeUUID) (storageprovisioning.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockStateMockRecorder) GetVolume(arg0, arg1 any) *MockStateGetVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockState)(nil).GetVolume), arg0, arg1)
	return &MockStateGetVolumeCall{Call: call}
}

// MockStateGetVolumeCall wrap *gomock.Call
type MockStateGetVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeCall) Return(arg0 storageprovisioning.Volume, arg1 error) *MockStateGetVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeCall) Do(f func(context.Context, storageprovisioning.VolumeUUID) (storageprovisioning.Volume, error)) *MockStateGetVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID) (storageprovisioning.Volume, error)) *MockStateGetVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachment mocks base method.
func (m *MockState) GetVolumeAttachment(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachment", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachment indicates an expected call of GetVolumeAttachment.
func (mr *MockStateMockRecorder) GetVolumeAttachment(arg0, arg1 any) *MockStateGetVolumeAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachment", reflect.TypeOf((*MockState)(nil).GetVolumeAttachment), arg0, arg1)
	return &MockStateGetVolumeAttachmentCall{Call: call}
}

// MockStateGetVolumeAttachmentCall wrap *gomock.Call
type MockStateGetVolumeAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentCall) Return(arg0 storageprovisioning.VolumeAttachment, arg1 error) *MockStateGetVolumeAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachment, error)) *MockStateGetVolumeAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachment, error)) *MockStateGetVolumeAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentIDs mocks base method.
func (m *MockState) GetVolumeAttachmentIDs(ctx context.Context, uuids []string) (map[string]storageprovisioning.VolumeAttachmentID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentIDs", ctx, uuids)
	ret0, _ := ret[0].(map[string]storageprovisioning.VolumeAttachmentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentIDs indicates an expected call of GetVolumeAttachmentIDs.
func (mr *MockStateMockRecorder) GetVolumeAttachmentIDs(ctx, uuids any) *MockStateGetVolumeAttachmentIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentIDs", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentIDs), ctx, uuids)
	return &MockStateGetVolumeAttachmentIDsCall{Call: call}
}

// MockStateGetVolumeAttachmentIDsCall wrap *gomock.Call
type MockStateGetVolumeAttachmentIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentIDsCall) Return(arg0 map[string]storageprovisioning.VolumeAttachmentID, arg1 error) *MockStateGetVolumeAttachmentIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentIDsCall) Do(f func(context.Context, []string) (map[string]storageprovisioning.VolumeAttachmentID, error)) *MockStateGetVolumeAttachmentIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentIDsCall) DoAndReturn(f func(context.Context, []string) (map[string]storageprovisioning.VolumeAttachmentID, error)) *MockStateGetVolumeAttachmentIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentLife mocks base method.
func (m *MockState) GetVolumeAttachmentLife(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentLife indicates an expected call of GetVolumeAttachmentLife.
func (mr *MockStateMockRecorder) GetVolumeAttachmentLife(arg0, arg1 any) *MockStateGetVolumeAttachmentLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentLife", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentLife), arg0, arg1)
	return &MockStateGetVolumeAttachmentLifeCall{Call: call}
}

// MockStateGetVolumeAttachmentLifeCall wrap *gomock.Call
type MockStateGetVolumeAttachmentLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetVolumeAttachmentLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentLifeCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (life.Life, error)) *MockStateGetVolumeAttachmentLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (life.Life, error)) *MockStateGetVolumeAttachmentLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentLifeForNetNode mocks base method.
func (m *MockState) GetVolumeAttachmentLifeForNetNode(arg0 context.Context, arg1 network.NetNodeUUID) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentLifeForNetNode", arg0, arg1)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentLifeForNetNode indicates an expected call of GetVolumeAttachmentLifeForNetNode.
func (mr *MockStateMockRecorder) GetVolumeAttachmentLifeForNetNode(arg0, arg1 any) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentLifeForNetNode), arg0, arg1)
	return &MockStateGetVolumeAttachmentLifeForNetNodeCall{Call: call}
}

// MockStateGetVolumeAttachmentLifeForNetNodeCall wrap *gomock.Call
type MockStateGetVolumeAttachmentLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentLifeForNetNodeCall) Do(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentLifeForNetNodeCall) DoAndReturn(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentParams mocks base method.
func (m *MockState) GetVolumeAttachmentParams(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachmentParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentParams indicates an expected call of GetVolumeAttachmentParams.
func (mr *MockStateMockRecorder) GetVolumeAttachmentParams(arg0, arg1 any) *MockStateGetVolumeAttachmentParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentParams", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentParams), arg0, arg1)
	return &MockStateGetVolumeAttachmentParamsCall{Call: call}
}

// MockStateGetVolumeAttachmentParamsCall wrap *gomock.Call
type MockStateGetVolumeAttachmentParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentParamsCall) Return(arg0 storageprovisioning.VolumeAttachmentParams, arg1 error) *MockStateGetVolumeAttachmentParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentParamsCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachmentParams, error)) *MockStateGetVolumeAttachmentParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachmentParams, error)) *MockStateGetVolumeAttachmentParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentPlanLifeForNetNode mocks base method.
func (m *MockState) GetVolumeAttachmentPlanLifeForNetNode(arg0 context.Context, arg1 network.NetNodeUUID) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentPlanLifeForNetNode", arg0, arg1)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentPlanLifeForNetNode indicates an expected call of GetVolumeAttachmentPlanLifeForNetNode.
func (mr *MockStateMockRecorder) GetVolumeAttachmentPlanLifeForNetNode(arg0, arg1 any) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentPlanLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentPlanLifeForNetNode), arg0, arg1)
	return &MockStateGetVolumeAttachmentPlanLifeForNetNodeCall{Call: call}
}

// MockStateGetVolumeAttachmentPlanLifeForNetNodeCall wrap *gomock.Call
type MockStateGetVolumeAttachmentPlanLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall) Do(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall) DoAndReturn(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetVolumeAttachmentPlanLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentPlanUUIDForVolumeNetNode mocks base method.
func (m *MockState) GetVolumeAttachmentPlanUUIDForVolumeNetNode(arg0 context.Context, arg1 storageprovisioning.VolumeUUID, arg2 network.NetNodeUUID) (storageprovisioning.VolumeAttachmentPlanUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentPlanUUIDForVolumeNetNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentPlanUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentPlanUUIDForVolumeNetNode indicates an expected call of GetVolumeAttachmentPlanUUIDForVolumeNetNode.
func (mr *MockStateMockRecorder) GetVolumeAttachmentPlanUUIDForVolumeNetNode(arg0, arg1, arg2 any) *MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentPlanUUIDForVolumeNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentPlanUUIDForVolumeNetNode), arg0, arg1, arg2)
	return &MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall{Call: call}
}

// MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall wrap *gomock.Call
type MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall) Return(arg0 storageprovisioning.VolumeAttachmentPlanUUID, arg1 error) *MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall) Do(f func(context.Context, storageprovisioning.VolumeUUID, network.NetNodeUUID) (storageprovisioning.VolumeAttachmentPlanUUID, error)) *MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID, network.NetNodeUUID) (storageprovisioning.VolumeAttachmentPlanUUID, error)) *MockStateGetVolumeAttachmentPlanUUIDForVolumeNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentUUIDForVolumeNetNode mocks base method.
func (m *MockState) GetVolumeAttachmentUUIDForVolumeNetNode(arg0 context.Context, arg1 storageprovisioning.VolumeUUID, arg2 network.NetNodeUUID) (storageprovisioning.VolumeAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentUUIDForVolumeNetNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentUUIDForVolumeNetNode indicates an expected call of GetVolumeAttachmentUUIDForVolumeNetNode.
func (mr *MockStateMockRecorder) GetVolumeAttachmentUUIDForVolumeNetNode(arg0, arg1, arg2 any) *MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentUUIDForVolumeNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeAttachmentUUIDForVolumeNetNode), arg0, arg1, arg2)
	return &MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall{Call: call}
}

// MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall wrap *gomock.Call
type MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall) Return(arg0 storageprovisioning.VolumeAttachmentUUID, arg1 error) *MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall) Do(f func(context.Context, storageprovisioning.VolumeUUID, network.NetNodeUUID) (storageprovisioning.VolumeAttachmentUUID, error)) *MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID, network.NetNodeUUID) (storageprovisioning.VolumeAttachmentUUID, error)) *MockStateGetVolumeAttachmentUUIDForVolumeNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeLife mocks base method.
func (m *MockState) GetVolumeLife(arg0 context.Context, arg1 storageprovisioning.VolumeUUID) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeLife indicates an expected call of GetVolumeLife.
func (mr *MockStateMockRecorder) GetVolumeLife(arg0, arg1 any) *MockStateGetVolumeLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeLife", reflect.TypeOf((*MockState)(nil).GetVolumeLife), arg0, arg1)
	return &MockStateGetVolumeLifeCall{Call: call}
}

// MockStateGetVolumeLifeCall wrap *gomock.Call
type MockStateGetVolumeLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetVolumeLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeLifeCall) Do(f func(context.Context, storageprovisioning.VolumeUUID) (life.Life, error)) *MockStateGetVolumeLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID) (life.Life, error)) *MockStateGetVolumeLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeLifeForNetNode mocks base method.
func (m *MockState) GetVolumeLifeForNetNode(arg0 context.Context, arg1 network.NetNodeUUID) (map[string]life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeLifeForNetNode", arg0, arg1)
	ret0, _ := ret[0].(map[string]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeLifeForNetNode indicates an expected call of GetVolumeLifeForNetNode.
func (mr *MockStateMockRecorder) GetVolumeLifeForNetNode(arg0, arg1 any) *MockStateGetVolumeLifeForNetNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeLifeForNetNode", reflect.TypeOf((*MockState)(nil).GetVolumeLifeForNetNode), arg0, arg1)
	return &MockStateGetVolumeLifeForNetNodeCall{Call: call}
}

// MockStateGetVolumeLifeForNetNodeCall wrap *gomock.Call
type MockStateGetVolumeLifeForNetNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeLifeForNetNodeCall) Return(arg0 map[string]life.Life, arg1 error) *MockStateGetVolumeLifeForNetNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeLifeForNetNodeCall) Do(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetVolumeLifeForNetNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeLifeForNetNodeCall) DoAndReturn(f func(context.Context, network.NetNodeUUID) (map[string]life.Life, error)) *MockStateGetVolumeLifeForNetNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeParams mocks base method.
func (m *MockState) GetVolumeParams(arg0 context.Context, arg1 storageprovisioning.VolumeUUID) (storageprovisioning.VolumeParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeParams indicates an expected call of GetVolumeParams.
func (mr *MockStateMockRecorder) GetVolumeParams(arg0, arg1 any) *MockStateGetVolumeParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeParams", reflect.TypeOf((*MockState)(nil).GetVolumeParams), arg0, arg1)
	return &MockStateGetVolumeParamsCall{Call: call}
}

// MockStateGetVolumeParamsCall wrap *gomock.Call
type MockStateGetVolumeParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeParamsCall) Return(arg0 storageprovisioning.VolumeParams, arg1 error) *MockStateGetVolumeParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeParamsCall) Do(f func(context.Context, storageprovisioning.VolumeUUID) (storageprovisioning.VolumeParams, error)) *MockStateGetVolumeParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID) (storageprovisioning.VolumeParams, error)) *MockStateGetVolumeParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeUUIDForID mocks base method.
func (m *MockState) GetVolumeUUIDForID(arg0 context.Context, arg1 string) (storageprovisioning.VolumeUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeUUIDForID", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeUUIDForID indicates an expected call of GetVolumeUUIDForID.
func (mr *MockStateMockRecorder) GetVolumeUUIDForID(arg0, arg1 any) *MockStateGetVolumeUUIDForIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeUUIDForID", reflect.TypeOf((*MockState)(nil).GetVolumeUUIDForID), arg0, arg1)
	return &MockStateGetVolumeUUIDForIDCall{Call: call}
}

// MockStateGetVolumeUUIDForIDCall wrap *gomock.Call
type MockStateGetVolumeUUIDForIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetVolumeUUIDForIDCall) Return(arg0 storageprovisioning.VolumeUUID, arg1 error) *MockStateGetVolumeUUIDForIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetVolumeUUIDForIDCall) Do(f func(context.Context, string) (storageprovisioning.VolumeUUID, error)) *MockStateGetVolumeUUIDForIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetVolumeUUIDForIDCall) DoAndReturn(f func(context.Context, string) (storageprovisioning.VolumeUUID, error)) *MockStateGetVolumeUUIDForIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForUnitStorageAttachments mocks base method.
func (m *MockState) InitialWatchStatementForUnitStorageAttachments(ctx context.Context, unitUUID string) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForUnitStorageAttachments", ctx, unitUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementForUnitStorageAttachments indicates an expected call of InitialWatchStatementForUnitStorageAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementForUnitStorageAttachments(ctx, unitUUID any) *MockStateInitialWatchStatementForUnitStorageAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForUnitStorageAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForUnitStorageAttachments), ctx, unitUUID)
	return &MockStateInitialWatchStatementForUnitStorageAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementForUnitStorageAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementForUnitStorageAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForUnitStorageAttachmentsCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementForUnitStorageAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForUnitStorageAttachmentsCall) Do(f func(context.Context, string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementForUnitStorageAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForUnitStorageAttachmentsCall) DoAndReturn(f func(context.Context, string) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementForUnitStorageAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedFilesystemAttachments mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedFilesystemAttachments(netNodeUUID network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedFilesystemAttachments", netNodeUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedFilesystemAttachments indicates an expected call of InitialWatchStatementMachineProvisionedFilesystemAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedFilesystemAttachments(netNodeUUID any) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedFilesystemAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedFilesystemAttachments), netNodeUUID)
	return &MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall) Do(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall) DoAndReturn(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedFilesystems mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedFilesystems(netNodeUUID network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedFilesystems", netNodeUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedFilesystems indicates an expected call of InitialWatchStatementMachineProvisionedFilesystems.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedFilesystems(netNodeUUID any) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedFilesystems", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedFilesystems), netNodeUUID)
	return &MockStateInitialWatchStatementMachineProvisionedFilesystemsCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedFilesystemsCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall) Do(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall) DoAndReturn(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedVolumeAttachments mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedVolumeAttachments(arg0 network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedVolumeAttachments", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedVolumeAttachments indicates an expected call of InitialWatchStatementMachineProvisionedVolumeAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedVolumeAttachments(arg0 any) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedVolumeAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedVolumeAttachments), arg0)
	return &MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall) Do(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall) DoAndReturn(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineProvisionedVolumes mocks base method.
func (m *MockState) InitialWatchStatementMachineProvisionedVolumes(arg0 network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineProvisionedVolumes", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementMachineProvisionedVolumes indicates an expected call of InitialWatchStatementMachineProvisionedVolumes.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineProvisionedVolumes(arg0 any) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineProvisionedVolumes", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineProvisionedVolumes), arg0)
	return &MockStateInitialWatchStatementMachineProvisionedVolumesCall{Call: call}
}

// MockStateInitialWatchStatementMachineProvisionedVolumesCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineProvisionedVolumesCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineProvisionedVolumesCall) Do(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineProvisionedVolumesCall) DoAndReturn(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementMachineProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedFilesystemAttachments mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedFilesystemAttachments() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedFilesystemAttachments")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedFilesystemAttachments indicates an expected call of InitialWatchStatementModelProvisionedFilesystemAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedFilesystemAttachments() *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedFilesystemAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedFilesystemAttachments))
	return &MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedFilesystems mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedFilesystems() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedFilesystems")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedFilesystems indicates an expected call of InitialWatchStatementModelProvisionedFilesystems.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedFilesystems() *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedFilesystems", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedFilesystems))
	return &MockStateInitialWatchStatementModelProvisionedFilesystemsCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedFilesystemsCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedFilesystemsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedVolumeAttachments mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedVolumeAttachments() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedVolumeAttachments")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedVolumeAttachments indicates an expected call of InitialWatchStatementModelProvisionedVolumeAttachments.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedVolumeAttachments() *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedVolumeAttachments", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedVolumeAttachments))
	return &MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementModelProvisionedVolumes mocks base method.
func (m *MockState) InitialWatchStatementModelProvisionedVolumes() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementModelProvisionedVolumes")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementModelProvisionedVolumes indicates an expected call of InitialWatchStatementModelProvisionedVolumes.
func (mr *MockStateMockRecorder) InitialWatchStatementModelProvisionedVolumes() *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementModelProvisionedVolumes", reflect.TypeOf((*MockState)(nil).InitialWatchStatementModelProvisionedVolumes))
	return &MockStateInitialWatchStatementModelProvisionedVolumesCall{Call: call}
}

// MockStateInitialWatchStatementModelProvisionedVolumesCall wrap *gomock.Call
type MockStateInitialWatchStatementModelProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementModelProvisionedVolumesCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementModelProvisionedVolumesCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementModelProvisionedVolumesCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementModelProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementVolumeAttachmentPlans mocks base method.
func (m *MockState) InitialWatchStatementVolumeAttachmentPlans(arg0 network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementVolumeAttachmentPlans", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.Query[map[string]life.Life])
	return ret0, ret1
}

// InitialWatchStatementVolumeAttachmentPlans indicates an expected call of InitialWatchStatementVolumeAttachmentPlans.
func (mr *MockStateMockRecorder) InitialWatchStatementVolumeAttachmentPlans(arg0 any) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementVolumeAttachmentPlans", reflect.TypeOf((*MockState)(nil).InitialWatchStatementVolumeAttachmentPlans), arg0)
	return &MockStateInitialWatchStatementVolumeAttachmentPlansCall{Call: call}
}

// MockStateInitialWatchStatementVolumeAttachmentPlansCall wrap *gomock.Call
type MockStateInitialWatchStatementVolumeAttachmentPlansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementVolumeAttachmentPlansCall) Return(arg0 string, arg1 eventsource.Query[map[string]life.Life]) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementVolumeAttachmentPlansCall) Do(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementVolumeAttachmentPlansCall) DoAndReturn(f func(network.NetNodeUUID) (string, eventsource.Query[map[string]life.Life])) *MockStateInitialWatchStatementVolumeAttachmentPlansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForStorageAttachment mocks base method.
func (m *MockState) NamespaceForStorageAttachment() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForStorageAttachment")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForStorageAttachment indicates an expected call of NamespaceForStorageAttachment.
func (mr *MockStateMockRecorder) NamespaceForStorageAttachment() *MockStateNamespaceForStorageAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForStorageAttachment", reflect.TypeOf((*MockState)(nil).NamespaceForStorageAttachment))
	return &MockStateNamespaceForStorageAttachmentCall{Call: call}
}

// MockStateNamespaceForStorageAttachmentCall wrap *gomock.Call
type MockStateNamespaceForStorageAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForStorageAttachmentCall) Return(arg0 string) *MockStateNamespaceForStorageAttachmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForStorageAttachmentCall) Do(f func() string) *MockStateNamespaceForStorageAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForStorageAttachmentCall) DoAndReturn(f func() string) *MockStateNamespaceForStorageAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchMachineCloudInstance mocks base method.
func (m *MockState) NamespaceForWatchMachineCloudInstance() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchMachineCloudInstance")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchMachineCloudInstance indicates an expected call of NamespaceForWatchMachineCloudInstance.
func (mr *MockStateMockRecorder) NamespaceForWatchMachineCloudInstance() *MockStateNamespaceForWatchMachineCloudInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchMachineCloudInstance", reflect.TypeOf((*MockState)(nil).NamespaceForWatchMachineCloudInstance))
	return &MockStateNamespaceForWatchMachineCloudInstanceCall{Call: call}
}

// MockStateNamespaceForWatchMachineCloudInstanceCall wrap *gomock.Call
type MockStateNamespaceForWatchMachineCloudInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) Return(arg0 string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) Do(f func() string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemAttachmentProvisionedInfo mocks base method.
func (m *MockState) SetFilesystemAttachmentProvisionedInfo(ctx context.Context, filesystemAttachmentUUID storageprovisioning.FilesystemAttachmentUUID, info storageprovisioning.FilesystemAttachmentProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemAttachmentProvisionedInfo", ctx, filesystemAttachmentUUID, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemAttachmentProvisionedInfo indicates an expected call of SetFilesystemAttachmentProvisionedInfo.
func (mr *MockStateMockRecorder) SetFilesystemAttachmentProvisionedInfo(ctx, filesystemAttachmentUUID, info any) *MockStateSetFilesystemAttachmentProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemAttachmentProvisionedInfo", reflect.TypeOf((*MockState)(nil).SetFilesystemAttachmentProvisionedInfo), ctx, filesystemAttachmentUUID, info)
	return &MockStateSetFilesystemAttachmentProvisionedInfoCall{Call: call}
}

// MockStateSetFilesystemAttachmentProvisionedInfoCall wrap *gomock.Call
type MockStateSetFilesystemAttachmentProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetFilesystemAttachmentProvisionedInfoCall) Return(arg0 error) *MockStateSetFilesystemAttachmentProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetFilesystemAttachmentProvisionedInfoCall) Do(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID, storageprovisioning.FilesystemAttachmentProvisionedInfo) error) *MockStateSetFilesystemAttachmentProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetFilesystemAttachmentProvisionedInfoCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID, storageprovisioning.FilesystemAttachmentProvisionedInfo) error) *MockStateSetFilesystemAttachmentProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemProvisionedInfo mocks base method.
func (m *MockState) SetFilesystemProvisionedInfo(ctx context.Context, filesystemUUID storageprovisioning.FilesystemUUID, info storageprovisioning.FilesystemProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemProvisionedInfo", ctx, filesystemUUID, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemProvisionedInfo indicates an expected call of SetFilesystemProvisionedInfo.
func (mr *MockStateMockRecorder) SetFilesystemProvisionedInfo(ctx, filesystemUUID, info any) *MockStateSetFilesystemProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemProvisionedInfo", reflect.TypeOf((*MockState)(nil).SetFilesystemProvisionedInfo), ctx, filesystemUUID, info)
	return &MockStateSetFilesystemProvisionedInfoCall{Call: call}
}

// MockStateSetFilesystemProvisionedInfoCall wrap *gomock.Call
type MockStateSetFilesystemProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetFilesystemProvisionedInfoCall) Return(arg0 error) *MockStateSetFilesystemProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetFilesystemProvisionedInfoCall) Do(f func(context.Context, storageprovisioning.FilesystemUUID, storageprovisioning.FilesystemProvisionedInfo) error) *MockStateSetFilesystemProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetFilesystemProvisionedInfoCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemUUID, storageprovisioning.FilesystemProvisionedInfo) error) *MockStateSetFilesystemProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeAttachmentProvisionedInfo mocks base method.
func (m *MockState) SetVolumeAttachmentProvisionedInfo(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID, arg2 storageprovisioning.VolumeAttachmentProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeAttachmentProvisionedInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeAttachmentProvisionedInfo indicates an expected call of SetVolumeAttachmentProvisionedInfo.
func (mr *MockStateMockRecorder) SetVolumeAttachmentProvisionedInfo(arg0, arg1, arg2 any) *MockStateSetVolumeAttachmentProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeAttachmentProvisionedInfo", reflect.TypeOf((*MockState)(nil).SetVolumeAttachmentProvisionedInfo), arg0, arg1, arg2)
	return &MockStateSetVolumeAttachmentProvisionedInfoCall{Call: call}
}

// MockStateSetVolumeAttachmentProvisionedInfoCall wrap *gomock.Call
type MockStateSetVolumeAttachmentProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetVolumeAttachmentProvisionedInfoCall) Return(arg0 error) *MockStateSetVolumeAttachmentProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetVolumeAttachmentProvisionedInfoCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID, storageprovisioning.VolumeAttachmentProvisionedInfo) error) *MockStateSetVolumeAttachmentProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetVolumeAttachmentProvisionedInfoCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID, storageprovisioning.VolumeAttachmentProvisionedInfo) error) *MockStateSetVolumeAttachmentProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeProvisionedInfo mocks base method.
func (m *MockState) SetVolumeProvisionedInfo(arg0 context.Context, arg1 storageprovisioning.VolumeUUID, arg2 storageprovisioning.VolumeProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeProvisionedInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeProvisionedInfo indicates an expected call of SetVolumeProvisionedInfo.
func (mr *MockStateMockRecorder) SetVolumeProvisionedInfo(arg0, arg1, arg2 any) *MockStateSetVolumeProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeProvisionedInfo", reflect.TypeOf((*MockState)(nil).SetVolumeProvisionedInfo), arg0, arg1, arg2)
	return &MockStateSetVolumeProvisionedInfoCall{Call: call}
}

// MockStateSetVolumeProvisionedInfoCall wrap *gomock.Call
type MockStateSetVolumeProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetVolumeProvisionedInfoCall) Return(arg0 error) *MockStateSetVolumeProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetVolumeProvisionedInfoCall) Do(f func(context.Context, storageprovisioning.VolumeUUID, storageprovisioning.VolumeProvisionedInfo) error) *MockStateSetVolumeProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetVolumeProvisionedInfoCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID, storageprovisioning.VolumeProvisionedInfo) error) *MockStateSetVolumeProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(ctx context.Context, initialStateQuery eventsource.NamespaceQuery, summary string, mapper eventsource.Mapper, filterOption eventsource.FilterOption, filterOptions ...eventsource.FilterOption) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, initialStateQuery, summary, mapper, filterOption}
	for _, a := range filterOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(ctx, initialStateQuery, summary, mapper, filterOption any, filterOptions ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, initialStateQuery, summary, mapper, filterOption}, filterOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNamespaceWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceWatcher(ctx context.Context, initialQuery eventsource.NamespaceQuery, summary string, filterOption eventsource.FilterOption, filterOptions ...eventsource.FilterOption) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, initialQuery, summary, filterOption}
	for _, a := range filterOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceWatcher", varargs...)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceWatcher indicates an expected call of NewNamespaceWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceWatcher(ctx, initialQuery, summary, filterOption any, filterOptions ...any) *MockWatcherFactoryNewNamespaceWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, initialQuery, summary, filterOption}, filterOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Do(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceWatcherCall) DoAndReturn(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(ctx context.Context, summary string, filterOption eventsource.FilterOption, filterOptions ...eventsource.FilterOption) (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, summary, filterOption}
	for _, a := range filterOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(ctx, summary, filterOption any, filterOptions ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, summary, filterOption}, filterOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.NotifyWatcher, arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.NotifyWatcher, error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.NotifyWatcher, error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
