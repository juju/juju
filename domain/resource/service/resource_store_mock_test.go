// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/resource/store (interfaces: ResourceStore)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination resource_store_mock_test.go github.com/juju/juju/core/resource/store ResourceStore
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	io "io"
	reflect "reflect"

	store "github.com/juju/juju/core/resource/store"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceStore is a mock of ResourceStore interface.
type MockResourceStore struct {
	ctrl     *gomock.Controller
	recorder *MockResourceStoreMockRecorder
}

// MockResourceStoreMockRecorder is the mock recorder for MockResourceStore.
type MockResourceStoreMockRecorder struct {
	mock *MockResourceStore
}

// NewMockResourceStore creates a new mock instance.
func NewMockResourceStore(ctrl *gomock.Controller) *MockResourceStore {
	mock := &MockResourceStore{ctrl: ctrl}
	mock.recorder = &MockResourceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceStore) EXPECT() *MockResourceStoreMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockResourceStore) ISGOMOCK() struct{} {
	return struct{}{}
}

// Get mocks base method.
func (m *MockResourceStore) Get(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockResourceStoreMockRecorder) Get(arg0, arg1 any) *MockResourceStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceStore)(nil).Get), arg0, arg1)
	return &MockResourceStoreGetCall{Call: call}
}

// MockResourceStoreGetCall wrap *gomock.Call
type MockResourceStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceStoreGetCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockResourceStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceStoreGetCall) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockResourceStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceStoreGetCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockResourceStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Put mocks base method.
func (m *MockResourceStore) Put(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 store.Fingerprint) (store.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(store.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockResourceStoreMockRecorder) Put(arg0, arg1, arg2, arg3, arg4 any) *MockResourceStorePutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockResourceStore)(nil).Put), arg0, arg1, arg2, arg3, arg4)
	return &MockResourceStorePutCall{Call: call}
}

// MockResourceStorePutCall wrap *gomock.Call
type MockResourceStorePutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceStorePutCall) Return(arg0 store.ID, arg1 error) *MockResourceStorePutCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceStorePutCall) Do(f func(context.Context, string, io.Reader, int64, store.Fingerprint) (store.ID, error)) *MockResourceStorePutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceStorePutCall) DoAndReturn(f func(context.Context, string, io.Reader, int64, store.Fingerprint) (store.ID, error)) *MockResourceStorePutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockResourceStore) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockResourceStoreMockRecorder) Remove(arg0, arg1 any) *MockResourceStoreRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockResourceStore)(nil).Remove), arg0, arg1)
	return &MockResourceStoreRemoveCall{Call: call}
}

// MockResourceStoreRemoveCall wrap *gomock.Call
type MockResourceStoreRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceStoreRemoveCall) Return(arg0 error) *MockResourceStoreRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceStoreRemoveCall) Do(f func(context.Context, string) error) *MockResourceStoreRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceStoreRemoveCall) DoAndReturn(f func(context.Context, string) error) *MockResourceStoreRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
