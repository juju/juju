// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelmanager/service (interfaces: ModelRemover,ModelTypeState,State,WatchableState,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/modelmanager/service ModelRemover,ModelTypeState,State,WatchableState,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	cloud "github.com/juju/juju/cloud"
	model "github.com/juju/juju/core/model"
	user "github.com/juju/juju/core/user"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	modelmanager "github.com/juju/juju/domain/modelmanager"
	gomock "go.uber.org/mock/gomock"
)

// MockModelRemover is a mock of ModelRemover interface.
type MockModelRemover struct {
	ctrl     *gomock.Controller
	recorder *MockModelRemoverMockRecorder
}

// MockModelRemoverMockRecorder is the mock recorder for MockModelRemover.
type MockModelRemoverMockRecorder struct {
	mock *MockModelRemover
}

// NewMockModelRemover creates a new mock instance.
func NewMockModelRemover(ctrl *gomock.Controller) *MockModelRemover {
	mock := &MockModelRemover{ctrl: ctrl}
	mock.recorder = &MockModelRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelRemover) EXPECT() *MockModelRemoverMockRecorder {
	return m.recorder
}

// DeleteDB mocks base method.
func (m *MockModelRemover) DeleteDB(arg0 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDB indicates an expected call of DeleteDB.
func (mr *MockModelRemoverMockRecorder) DeleteDB(arg0 any) *MockModelRemoverDeleteDBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDB", reflect.TypeOf((*MockModelRemover)(nil).DeleteDB), arg0)
	return &MockModelRemoverDeleteDBCall{Call: call}
}

// MockModelRemoverDeleteDBCall wrap *gomock.Call
type MockModelRemoverDeleteDBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelRemoverDeleteDBCall) Return(arg0 error) *MockModelRemoverDeleteDBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelRemoverDeleteDBCall) Do(f func(model.UUID) error) *MockModelRemoverDeleteDBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelRemoverDeleteDBCall) DoAndReturn(f func(model.UUID) error) *MockModelRemoverDeleteDBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelTypeState is a mock of ModelTypeState interface.
type MockModelTypeState struct {
	ctrl     *gomock.Controller
	recorder *MockModelTypeStateMockRecorder
}

// MockModelTypeStateMockRecorder is the mock recorder for MockModelTypeState.
type MockModelTypeStateMockRecorder struct {
	mock *MockModelTypeState
}

// NewMockModelTypeState creates a new mock instance.
func NewMockModelTypeState(ctrl *gomock.Controller) *MockModelTypeState {
	mock := &MockModelTypeState{ctrl: ctrl}
	mock.recorder = &MockModelTypeStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelTypeState) EXPECT() *MockModelTypeStateMockRecorder {
	return m.recorder
}

// GetCloudType mocks base method.
func (m *MockModelTypeState) GetCloudType(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudType indicates an expected call of GetCloudType.
func (mr *MockModelTypeStateMockRecorder) GetCloudType(arg0, arg1 any) *MockModelTypeStateGetCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudType", reflect.TypeOf((*MockModelTypeState)(nil).GetCloudType), arg0, arg1)
	return &MockModelTypeStateGetCloudTypeCall{Call: call}
}

// MockModelTypeStateGetCloudTypeCall wrap *gomock.Call
type MockModelTypeStateGetCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelTypeStateGetCloudTypeCall) Return(arg0 string, arg1 error) *MockModelTypeStateGetCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelTypeStateGetCloudTypeCall) Do(f func(context.Context, string) (string, error)) *MockModelTypeStateGetCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelTypeStateGetCloudTypeCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockModelTypeStateGetCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ActivateModel mocks base method.
func (m *MockState) ActivateModel(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateModel indicates an expected call of ActivateModel.
func (mr *MockStateMockRecorder) ActivateModel(arg0, arg1 any) *MockStateActivateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateModel", reflect.TypeOf((*MockState)(nil).ActivateModel), arg0, arg1)
	return &MockStateActivateModelCall{Call: call}
}

// MockStateActivateModelCall wrap *gomock.Call
type MockStateActivateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateActivateModelCall) Return(arg0 error) *MockStateActivateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateActivateModelCall) Do(f func(context.Context, model.UUID) error) *MockStateActivateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateActivateModelCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockStateActivateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckCloudSupportsAuthType mocks base method.
func (m *MockState) CheckCloudSupportsAuthType(arg0 context.Context, arg1 string, arg2 cloud.AuthType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCloudSupportsAuthType", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCloudSupportsAuthType indicates an expected call of CheckCloudSupportsAuthType.
func (mr *MockStateMockRecorder) CheckCloudSupportsAuthType(arg0, arg1, arg2 any) *MockStateCheckCloudSupportsAuthTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCloudSupportsAuthType", reflect.TypeOf((*MockState)(nil).CheckCloudSupportsAuthType), arg0, arg1, arg2)
	return &MockStateCheckCloudSupportsAuthTypeCall{Call: call}
}

// MockStateCheckCloudSupportsAuthTypeCall wrap *gomock.Call
type MockStateCheckCloudSupportsAuthTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckCloudSupportsAuthTypeCall) Return(arg0 bool, arg1 error) *MockStateCheckCloudSupportsAuthTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckCloudSupportsAuthTypeCall) Do(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockStateCheckCloudSupportsAuthTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckCloudSupportsAuthTypeCall) DoAndReturn(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockStateCheckCloudSupportsAuthTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckModelExists mocks base method.
func (m *MockState) CheckModelExists(arg0 context.Context, arg1 model.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckModelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckModelExists indicates an expected call of CheckModelExists.
func (mr *MockStateMockRecorder) CheckModelExists(arg0, arg1 any) *MockStateCheckModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckModelExists", reflect.TypeOf((*MockState)(nil).CheckModelExists), arg0, arg1)
	return &MockStateCheckModelExistsCall{Call: call}
}

// MockStateCheckModelExistsCall wrap *gomock.Call
type MockStateCheckModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckModelExistsCall) Return(arg0 bool, arg1 error) *MockStateCheckModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckModelExistsCall) Do(f func(context.Context, model.UUID) (bool, error)) *MockStateCheckModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckModelExistsCall) DoAndReturn(f func(context.Context, model.UUID) (bool, error)) *MockStateCheckModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateModel mocks base method.
func (m *MockState) CreateModel(arg0 context.Context, arg1 model.UUID, arg2 model.ModelType, arg3 modelmanager.CreationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockStateMockRecorder) CreateModel(arg0, arg1, arg2, arg3 any) *MockStateCreateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockState)(nil).CreateModel), arg0, arg1, arg2, arg3)
	return &MockStateCreateModelCall{Call: call}
}

// MockStateCreateModelCall wrap *gomock.Call
type MockStateCreateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateModelCall) Return(arg0 error) *MockStateCreateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateModelCall) Do(f func(context.Context, model.UUID, model.ModelType, modelmanager.CreationArgs) error) *MockStateCreateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateModelCall) DoAndReturn(f func(context.Context, model.UUID, model.ModelType, modelmanager.CreationArgs) error) *MockStateCreateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCloudType mocks base method.
func (m *MockState) GetCloudType(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudType indicates an expected call of GetCloudType.
func (mr *MockStateMockRecorder) GetCloudType(arg0, arg1 any) *MockStateGetCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudType", reflect.TypeOf((*MockState)(nil).GetCloudType), arg0, arg1)
	return &MockStateGetCloudTypeCall{Call: call}
}

// MockStateGetCloudTypeCall wrap *gomock.Call
type MockStateGetCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCloudTypeCall) Return(arg0 string, arg1 error) *MockStateGetCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCloudTypeCall) Do(f func(context.Context, string) (string, error)) *MockStateGetCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCloudTypeCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateGetCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerModelUUID mocks base method.
func (m *MockState) GetControllerModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModelUUID indicates an expected call of GetControllerModelUUID.
func (mr *MockStateMockRecorder) GetControllerModelUUID(arg0 any) *MockStateGetControllerModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModelUUID", reflect.TypeOf((*MockState)(nil).GetControllerModelUUID), arg0)
	return &MockStateGetControllerModelUUIDCall{Call: call}
}

// MockStateGetControllerModelUUIDCall wrap *gomock.Call
type MockStateGetControllerModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCloudNameAndRegion mocks base method.
func (m *MockState) GetModelCloudNameAndRegion(arg0 context.Context, arg1 model.UUID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudNameAndRegion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelCloudNameAndRegion indicates an expected call of GetModelCloudNameAndRegion.
func (mr *MockStateMockRecorder) GetModelCloudNameAndRegion(arg0, arg1 any) *MockStateGetModelCloudNameAndRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudNameAndRegion", reflect.TypeOf((*MockState)(nil).GetModelCloudNameAndRegion), arg0, arg1)
	return &MockStateGetModelCloudNameAndRegionCall{Call: call}
}

// MockStateGetModelCloudNameAndRegionCall wrap *gomock.Call
type MockStateGetModelCloudNameAndRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCloudNameAndRegionCall) Return(arg0, arg1 string, arg2 error) *MockStateGetModelCloudNameAndRegionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCloudNameAndRegionCall) Do(f func(context.Context, model.UUID) (string, string, error)) *MockStateGetModelCloudNameAndRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCloudNameAndRegionCall) DoAndReturn(f func(context.Context, model.UUID) (string, string, error)) *MockStateGetModelCloudNameAndRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUUIDForNameAndOwner mocks base method.
func (m *MockState) GetModelUUIDForNameAndOwner(arg0 context.Context, arg1 string, arg2 user.Name) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUUIDForNameAndOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUUIDForNameAndOwner indicates an expected call of GetModelUUIDForNameAndOwner.
func (mr *MockStateMockRecorder) GetModelUUIDForNameAndOwner(arg0, arg1, arg2 any) *MockStateGetModelUUIDForNameAndOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUUIDForNameAndOwner", reflect.TypeOf((*MockState)(nil).GetModelUUIDForNameAndOwner), arg0, arg1, arg2)
	return &MockStateGetModelUUIDForNameAndOwnerCall{Call: call}
}

// MockStateGetModelUUIDForNameAndOwnerCall wrap *gomock.Call
type MockStateGetModelUUIDForNameAndOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelUUIDForNameAndOwnerCall) Return(arg0 model.UUID, arg1 error) *MockStateGetModelUUIDForNameAndOwnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelUUIDForNameAndOwnerCall) Do(f func(context.Context, string, user.Name) (model.UUID, error)) *MockStateGetModelUUIDForNameAndOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelUUIDForNameAndOwnerCall) DoAndReturn(f func(context.Context, string, user.Name) (model.UUID, error)) *MockStateGetModelUUIDForNameAndOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDs mocks base method.
func (m *MockState) ListModelUUIDs(arg0 context.Context) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDs", arg0)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDs indicates an expected call of ListModelUUIDs.
func (mr *MockStateMockRecorder) ListModelUUIDs(arg0 any) *MockStateListModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDs", reflect.TypeOf((*MockState)(nil).ListModelUUIDs), arg0)
	return &MockStateListModelUUIDsCall{Call: call}
}

// MockStateListModelUUIDsCall wrap *gomock.Call
type MockStateListModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelUUIDsCall) Return(arg0 []model.UUID, arg1 error) *MockStateListModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelUUIDsCall) Do(f func(context.Context) ([]model.UUID, error)) *MockStateListModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelUUIDsCall) DoAndReturn(f func(context.Context) ([]model.UUID, error)) *MockStateListModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDsForUser mocks base method.
func (m *MockState) ListModelUUIDsForUser(arg0 context.Context, arg1 user.UUID) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDsForUser indicates an expected call of ListModelUUIDsForUser.
func (mr *MockStateMockRecorder) ListModelUUIDsForUser(arg0, arg1 any) *MockStateListModelUUIDsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDsForUser", reflect.TypeOf((*MockState)(nil).ListModelUUIDsForUser), arg0, arg1)
	return &MockStateListModelUUIDsForUserCall{Call: call}
}

// MockStateListModelUUIDsForUserCall wrap *gomock.Call
type MockStateListModelUUIDsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelUUIDsForUserCall) Return(arg0 []model.UUID, arg1 error) *MockStateListModelUUIDsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelUUIDsForUserCall) Do(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockStateListModelUUIDsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelUUIDsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockStateListModelUUIDsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveNonActivatedModel mocks base method.
func (m *MockState) RemoveNonActivatedModel(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNonActivatedModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNonActivatedModel indicates an expected call of RemoveNonActivatedModel.
func (mr *MockStateMockRecorder) RemoveNonActivatedModel(arg0, arg1 any) *MockStateRemoveNonActivatedModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNonActivatedModel", reflect.TypeOf((*MockState)(nil).RemoveNonActivatedModel), arg0, arg1)
	return &MockStateRemoveNonActivatedModelCall{Call: call}
}

// MockStateRemoveNonActivatedModelCall wrap *gomock.Call
type MockStateRemoveNonActivatedModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveNonActivatedModelCall) Return(arg0 error) *MockStateRemoveNonActivatedModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveNonActivatedModelCall) Do(f func(context.Context, model.UUID) error) *MockStateRemoveNonActivatedModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveNonActivatedModelCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockStateRemoveNonActivatedModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatchableState is a mock of WatchableState interface.
type MockWatchableState struct {
	ctrl     *gomock.Controller
	recorder *MockWatchableStateMockRecorder
}

// MockWatchableStateMockRecorder is the mock recorder for MockWatchableState.
type MockWatchableStateMockRecorder struct {
	mock *MockWatchableState
}

// NewMockWatchableState creates a new mock instance.
func NewMockWatchableState(ctrl *gomock.Controller) *MockWatchableState {
	mock := &MockWatchableState{ctrl: ctrl}
	mock.recorder = &MockWatchableStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchableState) EXPECT() *MockWatchableStateMockRecorder {
	return m.recorder
}

// ActivateModel mocks base method.
func (m *MockWatchableState) ActivateModel(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateModel indicates an expected call of ActivateModel.
func (mr *MockWatchableStateMockRecorder) ActivateModel(arg0, arg1 any) *MockWatchableStateActivateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateModel", reflect.TypeOf((*MockWatchableState)(nil).ActivateModel), arg0, arg1)
	return &MockWatchableStateActivateModelCall{Call: call}
}

// MockWatchableStateActivateModelCall wrap *gomock.Call
type MockWatchableStateActivateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateActivateModelCall) Return(arg0 error) *MockWatchableStateActivateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateActivateModelCall) Do(f func(context.Context, model.UUID) error) *MockWatchableStateActivateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateActivateModelCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockWatchableStateActivateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckCloudSupportsAuthType mocks base method.
func (m *MockWatchableState) CheckCloudSupportsAuthType(arg0 context.Context, arg1 string, arg2 cloud.AuthType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCloudSupportsAuthType", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCloudSupportsAuthType indicates an expected call of CheckCloudSupportsAuthType.
func (mr *MockWatchableStateMockRecorder) CheckCloudSupportsAuthType(arg0, arg1, arg2 any) *MockWatchableStateCheckCloudSupportsAuthTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCloudSupportsAuthType", reflect.TypeOf((*MockWatchableState)(nil).CheckCloudSupportsAuthType), arg0, arg1, arg2)
	return &MockWatchableStateCheckCloudSupportsAuthTypeCall{Call: call}
}

// MockWatchableStateCheckCloudSupportsAuthTypeCall wrap *gomock.Call
type MockWatchableStateCheckCloudSupportsAuthTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateCheckCloudSupportsAuthTypeCall) Return(arg0 bool, arg1 error) *MockWatchableStateCheckCloudSupportsAuthTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateCheckCloudSupportsAuthTypeCall) Do(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockWatchableStateCheckCloudSupportsAuthTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateCheckCloudSupportsAuthTypeCall) DoAndReturn(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockWatchableStateCheckCloudSupportsAuthTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckModelExists mocks base method.
func (m *MockWatchableState) CheckModelExists(arg0 context.Context, arg1 model.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckModelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckModelExists indicates an expected call of CheckModelExists.
func (mr *MockWatchableStateMockRecorder) CheckModelExists(arg0, arg1 any) *MockWatchableStateCheckModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckModelExists", reflect.TypeOf((*MockWatchableState)(nil).CheckModelExists), arg0, arg1)
	return &MockWatchableStateCheckModelExistsCall{Call: call}
}

// MockWatchableStateCheckModelExistsCall wrap *gomock.Call
type MockWatchableStateCheckModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateCheckModelExistsCall) Return(arg0 bool, arg1 error) *MockWatchableStateCheckModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateCheckModelExistsCall) Do(f func(context.Context, model.UUID) (bool, error)) *MockWatchableStateCheckModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateCheckModelExistsCall) DoAndReturn(f func(context.Context, model.UUID) (bool, error)) *MockWatchableStateCheckModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateModel mocks base method.
func (m *MockWatchableState) CreateModel(arg0 context.Context, arg1 model.UUID, arg2 model.ModelType, arg3 modelmanager.CreationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockWatchableStateMockRecorder) CreateModel(arg0, arg1, arg2, arg3 any) *MockWatchableStateCreateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockWatchableState)(nil).CreateModel), arg0, arg1, arg2, arg3)
	return &MockWatchableStateCreateModelCall{Call: call}
}

// MockWatchableStateCreateModelCall wrap *gomock.Call
type MockWatchableStateCreateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateCreateModelCall) Return(arg0 error) *MockWatchableStateCreateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateCreateModelCall) Do(f func(context.Context, model.UUID, model.ModelType, modelmanager.CreationArgs) error) *MockWatchableStateCreateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateCreateModelCall) DoAndReturn(f func(context.Context, model.UUID, model.ModelType, modelmanager.CreationArgs) error) *MockWatchableStateCreateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCloudType mocks base method.
func (m *MockWatchableState) GetCloudType(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudType indicates an expected call of GetCloudType.
func (mr *MockWatchableStateMockRecorder) GetCloudType(arg0, arg1 any) *MockWatchableStateGetCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudType", reflect.TypeOf((*MockWatchableState)(nil).GetCloudType), arg0, arg1)
	return &MockWatchableStateGetCloudTypeCall{Call: call}
}

// MockWatchableStateGetCloudTypeCall wrap *gomock.Call
type MockWatchableStateGetCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateGetCloudTypeCall) Return(arg0 string, arg1 error) *MockWatchableStateGetCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateGetCloudTypeCall) Do(f func(context.Context, string) (string, error)) *MockWatchableStateGetCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateGetCloudTypeCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockWatchableStateGetCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerModelUUID mocks base method.
func (m *MockWatchableState) GetControllerModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModelUUID indicates an expected call of GetControllerModelUUID.
func (mr *MockWatchableStateMockRecorder) GetControllerModelUUID(arg0 any) *MockWatchableStateGetControllerModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModelUUID", reflect.TypeOf((*MockWatchableState)(nil).GetControllerModelUUID), arg0)
	return &MockWatchableStateGetControllerModelUUIDCall{Call: call}
}

// MockWatchableStateGetControllerModelUUIDCall wrap *gomock.Call
type MockWatchableStateGetControllerModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateGetControllerModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockWatchableStateGetControllerModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateGetControllerModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockWatchableStateGetControllerModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateGetControllerModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockWatchableStateGetControllerModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCloudNameAndRegion mocks base method.
func (m *MockWatchableState) GetModelCloudNameAndRegion(arg0 context.Context, arg1 model.UUID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudNameAndRegion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelCloudNameAndRegion indicates an expected call of GetModelCloudNameAndRegion.
func (mr *MockWatchableStateMockRecorder) GetModelCloudNameAndRegion(arg0, arg1 any) *MockWatchableStateGetModelCloudNameAndRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudNameAndRegion", reflect.TypeOf((*MockWatchableState)(nil).GetModelCloudNameAndRegion), arg0, arg1)
	return &MockWatchableStateGetModelCloudNameAndRegionCall{Call: call}
}

// MockWatchableStateGetModelCloudNameAndRegionCall wrap *gomock.Call
type MockWatchableStateGetModelCloudNameAndRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateGetModelCloudNameAndRegionCall) Return(arg0, arg1 string, arg2 error) *MockWatchableStateGetModelCloudNameAndRegionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateGetModelCloudNameAndRegionCall) Do(f func(context.Context, model.UUID) (string, string, error)) *MockWatchableStateGetModelCloudNameAndRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateGetModelCloudNameAndRegionCall) DoAndReturn(f func(context.Context, model.UUID) (string, string, error)) *MockWatchableStateGetModelCloudNameAndRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUUIDForNameAndOwner mocks base method.
func (m *MockWatchableState) GetModelUUIDForNameAndOwner(arg0 context.Context, arg1 string, arg2 user.Name) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUUIDForNameAndOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUUIDForNameAndOwner indicates an expected call of GetModelUUIDForNameAndOwner.
func (mr *MockWatchableStateMockRecorder) GetModelUUIDForNameAndOwner(arg0, arg1, arg2 any) *MockWatchableStateGetModelUUIDForNameAndOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUUIDForNameAndOwner", reflect.TypeOf((*MockWatchableState)(nil).GetModelUUIDForNameAndOwner), arg0, arg1, arg2)
	return &MockWatchableStateGetModelUUIDForNameAndOwnerCall{Call: call}
}

// MockWatchableStateGetModelUUIDForNameAndOwnerCall wrap *gomock.Call
type MockWatchableStateGetModelUUIDForNameAndOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateGetModelUUIDForNameAndOwnerCall) Return(arg0 model.UUID, arg1 error) *MockWatchableStateGetModelUUIDForNameAndOwnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateGetModelUUIDForNameAndOwnerCall) Do(f func(context.Context, string, user.Name) (model.UUID, error)) *MockWatchableStateGetModelUUIDForNameAndOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateGetModelUUIDForNameAndOwnerCall) DoAndReturn(f func(context.Context, string, user.Name) (model.UUID, error)) *MockWatchableStateGetModelUUIDForNameAndOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IdentifyActiveModelsFromList mocks base method.
func (m *MockWatchableState) IdentifyActiveModelsFromList(arg0 context.Context, arg1 []model.UUID) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifyActiveModelsFromList", arg0, arg1)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentifyActiveModelsFromList indicates an expected call of IdentifyActiveModelsFromList.
func (mr *MockWatchableStateMockRecorder) IdentifyActiveModelsFromList(arg0, arg1 any) *MockWatchableStateIdentifyActiveModelsFromListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifyActiveModelsFromList", reflect.TypeOf((*MockWatchableState)(nil).IdentifyActiveModelsFromList), arg0, arg1)
	return &MockWatchableStateIdentifyActiveModelsFromListCall{Call: call}
}

// MockWatchableStateIdentifyActiveModelsFromListCall wrap *gomock.Call
type MockWatchableStateIdentifyActiveModelsFromListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateIdentifyActiveModelsFromListCall) Return(arg0 []model.UUID, arg1 error) *MockWatchableStateIdentifyActiveModelsFromListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateIdentifyActiveModelsFromListCall) Do(f func(context.Context, []model.UUID) ([]model.UUID, error)) *MockWatchableStateIdentifyActiveModelsFromListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateIdentifyActiveModelsFromListCall) DoAndReturn(f func(context.Context, []model.UUID) ([]model.UUID, error)) *MockWatchableStateIdentifyActiveModelsFromListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchActivatedModelsStatement mocks base method.
func (m *MockWatchableState) InitialWatchActivatedModelsStatement() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchActivatedModelsStatement")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// InitialWatchActivatedModelsStatement indicates an expected call of InitialWatchActivatedModelsStatement.
func (mr *MockWatchableStateMockRecorder) InitialWatchActivatedModelsStatement() *MockWatchableStateInitialWatchActivatedModelsStatementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchActivatedModelsStatement", reflect.TypeOf((*MockWatchableState)(nil).InitialWatchActivatedModelsStatement))
	return &MockWatchableStateInitialWatchActivatedModelsStatementCall{Call: call}
}

// MockWatchableStateInitialWatchActivatedModelsStatementCall wrap *gomock.Call
type MockWatchableStateInitialWatchActivatedModelsStatementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateInitialWatchActivatedModelsStatementCall) Return(arg0, arg1 string) *MockWatchableStateInitialWatchActivatedModelsStatementCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateInitialWatchActivatedModelsStatementCall) Do(f func() (string, string)) *MockWatchableStateInitialWatchActivatedModelsStatementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateInitialWatchActivatedModelsStatementCall) DoAndReturn(f func() (string, string)) *MockWatchableStateInitialWatchActivatedModelsStatementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDs mocks base method.
func (m *MockWatchableState) ListModelUUIDs(arg0 context.Context) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDs", arg0)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDs indicates an expected call of ListModelUUIDs.
func (mr *MockWatchableStateMockRecorder) ListModelUUIDs(arg0 any) *MockWatchableStateListModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDs", reflect.TypeOf((*MockWatchableState)(nil).ListModelUUIDs), arg0)
	return &MockWatchableStateListModelUUIDsCall{Call: call}
}

// MockWatchableStateListModelUUIDsCall wrap *gomock.Call
type MockWatchableStateListModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateListModelUUIDsCall) Return(arg0 []model.UUID, arg1 error) *MockWatchableStateListModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateListModelUUIDsCall) Do(f func(context.Context) ([]model.UUID, error)) *MockWatchableStateListModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateListModelUUIDsCall) DoAndReturn(f func(context.Context) ([]model.UUID, error)) *MockWatchableStateListModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDsForUser mocks base method.
func (m *MockWatchableState) ListModelUUIDsForUser(arg0 context.Context, arg1 user.UUID) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDsForUser indicates an expected call of ListModelUUIDsForUser.
func (mr *MockWatchableStateMockRecorder) ListModelUUIDsForUser(arg0, arg1 any) *MockWatchableStateListModelUUIDsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDsForUser", reflect.TypeOf((*MockWatchableState)(nil).ListModelUUIDsForUser), arg0, arg1)
	return &MockWatchableStateListModelUUIDsForUserCall{Call: call}
}

// MockWatchableStateListModelUUIDsForUserCall wrap *gomock.Call
type MockWatchableStateListModelUUIDsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateListModelUUIDsForUserCall) Return(arg0 []model.UUID, arg1 error) *MockWatchableStateListModelUUIDsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateListModelUUIDsForUserCall) Do(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockWatchableStateListModelUUIDsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateListModelUUIDsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockWatchableStateListModelUUIDsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveNonActivatedModel mocks base method.
func (m *MockWatchableState) RemoveNonActivatedModel(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNonActivatedModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNonActivatedModel indicates an expected call of RemoveNonActivatedModel.
func (mr *MockWatchableStateMockRecorder) RemoveNonActivatedModel(arg0, arg1 any) *MockWatchableStateRemoveNonActivatedModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNonActivatedModel", reflect.TypeOf((*MockWatchableState)(nil).RemoveNonActivatedModel), arg0, arg1)
	return &MockWatchableStateRemoveNonActivatedModelCall{Call: call}
}

// MockWatchableStateRemoveNonActivatedModelCall wrap *gomock.Call
type MockWatchableStateRemoveNonActivatedModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableStateRemoveNonActivatedModelCall) Return(arg0 error) *MockWatchableStateRemoveNonActivatedModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableStateRemoveNonActivatedModelCall) Do(f func(context.Context, model.UUID) error) *MockWatchableStateRemoveNonActivatedModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableStateRemoveNonActivatedModelCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockWatchableStateRemoveNonActivatedModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(arg0 eventsource.NamespaceQuery, arg1 eventsource.Mapper, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
