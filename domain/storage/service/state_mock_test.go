// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/storage/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/storage/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	storage "github.com/juju/juju/core/storage"
	storage0 "github.com/juju/juju/domain/storage"
	state "github.com/juju/juju/domain/storage/state"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// CreateStoragePool mocks base method.
func (m *MockState) CreateStoragePool(arg0 context.Context, arg1 storage0.StoragePool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockStateMockRecorder) CreateStoragePool(arg0, arg1 any) *MockStateCreateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockState)(nil).CreateStoragePool), arg0, arg1)
	return &MockStateCreateStoragePoolCall{Call: call}
}

// MockStateCreateStoragePoolCall wrap *gomock.Call
type MockStateCreateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateStoragePoolCall) Return(arg0 error) *MockStateCreateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateStoragePoolCall) Do(f func(context.Context, storage0.StoragePool) error) *MockStateCreateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateStoragePoolCall) DoAndReturn(f func(context.Context, storage0.StoragePool) error) *MockStateCreateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePool mocks base method.
func (m *MockState) DeleteStoragePool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockStateMockRecorder) DeleteStoragePool(arg0, arg1 any) *MockStateDeleteStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockState)(nil).DeleteStoragePool), arg0, arg1)
	return &MockStateDeleteStoragePoolCall{Call: call}
}

// MockStateDeleteStoragePoolCall wrap *gomock.Call
type MockStateDeleteStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteStoragePoolCall) Return(arg0 error) *MockStateDeleteStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteStoragePoolCall) Do(f func(context.Context, string) error) *MockStateDeleteStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteStoragePoolCall) DoAndReturn(f func(context.Context, string) error) *MockStateDeleteStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelDetails mocks base method.
func (m *MockState) GetModelDetails() (storage0.ModelDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelDetails")
	ret0, _ := ret[0].(storage0.ModelDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelDetails indicates an expected call of GetModelDetails.
func (mr *MockStateMockRecorder) GetModelDetails() *MockStateGetModelDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelDetails", reflect.TypeOf((*MockState)(nil).GetModelDetails))
	return &MockStateGetModelDetailsCall{Call: call}
}

// MockStateGetModelDetailsCall wrap *gomock.Call
type MockStateGetModelDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelDetailsCall) Return(arg0 storage0.ModelDetails, arg1 error) *MockStateGetModelDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelDetailsCall) Do(f func() (storage0.ModelDetails, error)) *MockStateGetModelDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelDetailsCall) DoAndReturn(f func() (storage0.ModelDetails, error)) *MockStateGetModelDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePool mocks base method.
func (m *MockState) GetStoragePool(arg0 context.Context, arg1 storage0.StoragePoolUUID) (storage0.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", arg0, arg1)
	ret0, _ := ret[0].(storage0.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePool indicates an expected call of GetStoragePool.
func (mr *MockStateMockRecorder) GetStoragePool(arg0, arg1 any) *MockStateGetStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockState)(nil).GetStoragePool), arg0, arg1)
	return &MockStateGetStoragePoolCall{Call: call}
}

// MockStateGetStoragePoolCall wrap *gomock.Call
type MockStateGetStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStoragePoolCall) Return(arg0 storage0.StoragePool, arg1 error) *MockStateGetStoragePoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStoragePoolCall) Do(f func(context.Context, storage0.StoragePoolUUID) (storage0.StoragePool, error)) *MockStateGetStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStoragePoolCall) DoAndReturn(f func(context.Context, storage0.StoragePoolUUID) (storage0.StoragePool, error)) *MockStateGetStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolUUID mocks base method.
func (m *MockState) GetStoragePoolUUID(arg0 context.Context, arg1 string) (storage0.StoragePoolUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolUUID", arg0, arg1)
	ret0, _ := ret[0].(storage0.StoragePoolUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolUUID indicates an expected call of GetStoragePoolUUID.
func (mr *MockStateMockRecorder) GetStoragePoolUUID(arg0, arg1 any) *MockStateGetStoragePoolUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolUUID", reflect.TypeOf((*MockState)(nil).GetStoragePoolUUID), arg0, arg1)
	return &MockStateGetStoragePoolUUIDCall{Call: call}
}

// MockStateGetStoragePoolUUIDCall wrap *gomock.Call
type MockStateGetStoragePoolUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStoragePoolUUIDCall) Return(arg0 storage0.StoragePoolUUID, arg1 error) *MockStateGetStoragePoolUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStoragePoolUUIDCall) Do(f func(context.Context, string) (storage0.StoragePoolUUID, error)) *MockStateGetStoragePoolUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStoragePoolUUIDCall) DoAndReturn(f func(context.Context, string) (storage0.StoragePoolUUID, error)) *MockStateGetStoragePoolUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportFilesystem mocks base method.
func (m *MockState) ImportFilesystem(arg0 context.Context, arg1 storage.Name, arg2 storage0.FilesystemInfo) (storage.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportFilesystem", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFilesystem indicates an expected call of ImportFilesystem.
func (mr *MockStateMockRecorder) ImportFilesystem(arg0, arg1, arg2 any) *MockStateImportFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFilesystem", reflect.TypeOf((*MockState)(nil).ImportFilesystem), arg0, arg1, arg2)
	return &MockStateImportFilesystemCall{Call: call}
}

// MockStateImportFilesystemCall wrap *gomock.Call
type MockStateImportFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateImportFilesystemCall) Return(arg0 storage.ID, arg1 error) *MockStateImportFilesystemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateImportFilesystemCall) Do(f func(context.Context, storage.Name, storage0.FilesystemInfo) (storage.ID, error)) *MockStateImportFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateImportFilesystemCall) DoAndReturn(f func(context.Context, storage.Name, storage0.FilesystemInfo) (storage.ID, error)) *MockStateImportFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFilesystemWithAttachments mocks base method.
func (m *MockState) ListFilesystemWithAttachments(arg0 context.Context, arg1 ...string) (map[string]state.FilesystemDetails, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFilesystemWithAttachments", varargs...)
	ret0, _ := ret[0].(map[string]state.FilesystemDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystemWithAttachments indicates an expected call of ListFilesystemWithAttachments.
func (mr *MockStateMockRecorder) ListFilesystemWithAttachments(arg0 any, arg1 ...any) *MockStateListFilesystemWithAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystemWithAttachments", reflect.TypeOf((*MockState)(nil).ListFilesystemWithAttachments), varargs...)
	return &MockStateListFilesystemWithAttachmentsCall{Call: call}
}

// MockStateListFilesystemWithAttachmentsCall wrap *gomock.Call
type MockStateListFilesystemWithAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListFilesystemWithAttachmentsCall) Return(arg0 map[string]state.FilesystemDetails, arg1 error) *MockStateListFilesystemWithAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListFilesystemWithAttachmentsCall) Do(f func(context.Context, ...string) (map[string]state.FilesystemDetails, error)) *MockStateListFilesystemWithAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListFilesystemWithAttachmentsCall) DoAndReturn(f func(context.Context, ...string) (map[string]state.FilesystemDetails, error)) *MockStateListFilesystemWithAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStorageInstances mocks base method.
func (m *MockState) ListStorageInstances(arg0 context.Context) ([]storage0.StorageInstanceDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageInstances", arg0)
	ret0, _ := ret[0].([]storage0.StorageInstanceDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageInstances indicates an expected call of ListStorageInstances.
func (mr *MockStateMockRecorder) ListStorageInstances(arg0 any) *MockStateListStorageInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageInstances", reflect.TypeOf((*MockState)(nil).ListStorageInstances), arg0)
	return &MockStateListStorageInstancesCall{Call: call}
}

// MockStateListStorageInstancesCall wrap *gomock.Call
type MockStateListStorageInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListStorageInstancesCall) Return(arg0 []storage0.StorageInstanceDetails, arg1 error) *MockStateListStorageInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListStorageInstancesCall) Do(f func(context.Context) ([]storage0.StorageInstanceDetails, error)) *MockStateListStorageInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListStorageInstancesCall) DoAndReturn(f func(context.Context) ([]storage0.StorageInstanceDetails, error)) *MockStateListStorageInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePools mocks base method.
func (m *MockState) ListStoragePools(arg0 context.Context) ([]storage0.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePools", arg0)
	ret0, _ := ret[0].([]storage0.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePools indicates an expected call of ListStoragePools.
func (mr *MockStateMockRecorder) ListStoragePools(arg0 any) *MockStateListStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePools", reflect.TypeOf((*MockState)(nil).ListStoragePools), arg0)
	return &MockStateListStoragePoolsCall{Call: call}
}

// MockStateListStoragePoolsCall wrap *gomock.Call
type MockStateListStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListStoragePoolsCall) Return(arg0 []storage0.StoragePool, arg1 error) *MockStateListStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListStoragePoolsCall) Do(f func(context.Context) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListStoragePoolsCall) DoAndReturn(f func(context.Context) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePoolsByNames mocks base method.
func (m *MockState) ListStoragePoolsByNames(arg0 context.Context, arg1 []string) ([]storage0.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePoolsByNames", arg0, arg1)
	ret0, _ := ret[0].([]storage0.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePoolsByNames indicates an expected call of ListStoragePoolsByNames.
func (mr *MockStateMockRecorder) ListStoragePoolsByNames(arg0, arg1 any) *MockStateListStoragePoolsByNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePoolsByNames", reflect.TypeOf((*MockState)(nil).ListStoragePoolsByNames), arg0, arg1)
	return &MockStateListStoragePoolsByNamesCall{Call: call}
}

// MockStateListStoragePoolsByNamesCall wrap *gomock.Call
type MockStateListStoragePoolsByNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListStoragePoolsByNamesCall) Return(arg0 []storage0.StoragePool, arg1 error) *MockStateListStoragePoolsByNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListStoragePoolsByNamesCall) Do(f func(context.Context, []string) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsByNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListStoragePoolsByNamesCall) DoAndReturn(f func(context.Context, []string) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsByNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePoolsByNamesAndProviders mocks base method.
func (m *MockState) ListStoragePoolsByNamesAndProviders(arg0 context.Context, arg1, arg2 []string) ([]storage0.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePoolsByNamesAndProviders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storage0.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePoolsByNamesAndProviders indicates an expected call of ListStoragePoolsByNamesAndProviders.
func (mr *MockStateMockRecorder) ListStoragePoolsByNamesAndProviders(arg0, arg1, arg2 any) *MockStateListStoragePoolsByNamesAndProvidersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePoolsByNamesAndProviders", reflect.TypeOf((*MockState)(nil).ListStoragePoolsByNamesAndProviders), arg0, arg1, arg2)
	return &MockStateListStoragePoolsByNamesAndProvidersCall{Call: call}
}

// MockStateListStoragePoolsByNamesAndProvidersCall wrap *gomock.Call
type MockStateListStoragePoolsByNamesAndProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListStoragePoolsByNamesAndProvidersCall) Return(arg0 []storage0.StoragePool, arg1 error) *MockStateListStoragePoolsByNamesAndProvidersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListStoragePoolsByNamesAndProvidersCall) Do(f func(context.Context, []string, []string) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsByNamesAndProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListStoragePoolsByNamesAndProvidersCall) DoAndReturn(f func(context.Context, []string, []string) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsByNamesAndProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePoolsByProviders mocks base method.
func (m *MockState) ListStoragePoolsByProviders(arg0 context.Context, arg1 []string) ([]storage0.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePoolsByProviders", arg0, arg1)
	ret0, _ := ret[0].([]storage0.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePoolsByProviders indicates an expected call of ListStoragePoolsByProviders.
func (mr *MockStateMockRecorder) ListStoragePoolsByProviders(arg0, arg1 any) *MockStateListStoragePoolsByProvidersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePoolsByProviders", reflect.TypeOf((*MockState)(nil).ListStoragePoolsByProviders), arg0, arg1)
	return &MockStateListStoragePoolsByProvidersCall{Call: call}
}

// MockStateListStoragePoolsByProvidersCall wrap *gomock.Call
type MockStateListStoragePoolsByProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListStoragePoolsByProvidersCall) Return(arg0 []storage0.StoragePool, arg1 error) *MockStateListStoragePoolsByProvidersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListStoragePoolsByProvidersCall) Do(f func(context.Context, []string) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsByProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListStoragePoolsByProvidersCall) DoAndReturn(f func(context.Context, []string) ([]storage0.StoragePool, error)) *MockStateListStoragePoolsByProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVolumeWithAttachments mocks base method.
func (m *MockState) ListVolumeWithAttachments(arg0 context.Context, arg1 ...string) (map[string]state.VolumeDetails, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVolumeWithAttachments", varargs...)
	ret0, _ := ret[0].(map[string]state.VolumeDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumeWithAttachments indicates an expected call of ListVolumeWithAttachments.
func (mr *MockStateMockRecorder) ListVolumeWithAttachments(arg0 any, arg1 ...any) *MockStateListVolumeWithAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeWithAttachments", reflect.TypeOf((*MockState)(nil).ListVolumeWithAttachments), varargs...)
	return &MockStateListVolumeWithAttachmentsCall{Call: call}
}

// MockStateListVolumeWithAttachmentsCall wrap *gomock.Call
type MockStateListVolumeWithAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListVolumeWithAttachmentsCall) Return(arg0 map[string]state.VolumeDetails, arg1 error) *MockStateListVolumeWithAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListVolumeWithAttachmentsCall) Do(f func(context.Context, ...string) (map[string]state.VolumeDetails, error)) *MockStateListVolumeWithAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListVolumeWithAttachmentsCall) DoAndReturn(f func(context.Context, ...string) (map[string]state.VolumeDetails, error)) *MockStateListVolumeWithAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplaceStoragePool mocks base method.
func (m *MockState) ReplaceStoragePool(arg0 context.Context, arg1 storage0.StoragePool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceStoragePool indicates an expected call of ReplaceStoragePool.
func (mr *MockStateMockRecorder) ReplaceStoragePool(arg0, arg1 any) *MockStateReplaceStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceStoragePool", reflect.TypeOf((*MockState)(nil).ReplaceStoragePool), arg0, arg1)
	return &MockStateReplaceStoragePoolCall{Call: call}
}

// MockStateReplaceStoragePoolCall wrap *gomock.Call
type MockStateReplaceStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReplaceStoragePoolCall) Return(arg0 error) *MockStateReplaceStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReplaceStoragePoolCall) Do(f func(context.Context, storage0.StoragePool) error) *MockStateReplaceStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReplaceStoragePoolCall) DoAndReturn(f func(context.Context, storage0.StoragePool) error) *MockStateReplaceStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
