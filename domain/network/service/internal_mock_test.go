// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/network/internal (interfaces: CheckableMachine)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination internal_mock_test.go github.com/juju/juju/domain/network/internal CheckableMachine
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	gomock "go.uber.org/mock/gomock"
)

// MockCheckableMachine is a mock of CheckableMachine interface.
type MockCheckableMachine struct {
	ctrl     *gomock.Controller
	recorder *MockCheckableMachineMockRecorder
}

// MockCheckableMachineMockRecorder is the mock recorder for MockCheckableMachine.
type MockCheckableMachineMockRecorder struct {
	mock *MockCheckableMachine
}

// NewMockCheckableMachine creates a new mock instance.
func NewMockCheckableMachine(ctrl *gomock.Controller) *MockCheckableMachine {
	mock := &MockCheckableMachine{ctrl: ctrl}
	mock.recorder = &MockCheckableMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckableMachine) EXPECT() *MockCheckableMachineMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockCheckableMachine) Accept(arg0 context.Context, arg1 network.SpaceInfos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockCheckableMachineMockRecorder) Accept(arg0, arg1 any) *MockCheckableMachineAcceptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockCheckableMachine)(nil).Accept), arg0, arg1)
	return &MockCheckableMachineAcceptCall{Call: call}
}

// MockCheckableMachineAcceptCall wrap *gomock.Call
type MockCheckableMachineAcceptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckableMachineAcceptCall) Return(arg0 error) *MockCheckableMachineAcceptCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckableMachineAcceptCall) Do(f func(context.Context, network.SpaceInfos) error) *MockCheckableMachineAcceptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckableMachineAcceptCall) DoAndReturn(f func(context.Context, network.SpaceInfos) error) *MockCheckableMachineAcceptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
