// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/network/service (interfaces: State,ProviderWithNetworking,ProviderWithZones)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/network/service State,ProviderWithNetworking,ProviderWithZones
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	database "github.com/juju/juju/core/database"
	instance "github.com/juju/juju/core/instance"
	network "github.com/juju/juju/core/network"
	unit "github.com/juju/juju/core/unit"
	network0 "github.com/juju/juju/domain/network"
	internal "github.com/juju/juju/domain/network/internal"
	environs "github.com/juju/juju/environs"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockState) AddSpace(arg0 context.Context, arg1 network.SpaceUUID, arg2 network.SpaceName, arg3 network.Id, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockStateMockRecorder) AddSpace(arg0, arg1, arg2, arg3, arg4 any) *MockStateAddSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockState)(nil).AddSpace), arg0, arg1, arg2, arg3, arg4)
	return &MockStateAddSpaceCall{Call: call}
}

// MockStateAddSpaceCall wrap *gomock.Call
type MockStateAddSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddSpaceCall) Return(arg0 error) *MockStateAddSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddSpaceCall) Do(f func(context.Context, network.SpaceUUID, network.SpaceName, network.Id, []string) error) *MockStateAddSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID, network.SpaceName, network.Id, []string) error) *MockStateAddSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddSubnet mocks base method.
func (m *MockState) AddSubnet(arg0 context.Context, arg1 network.SubnetInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockStateMockRecorder) AddSubnet(arg0, arg1 any) *MockStateAddSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockState)(nil).AddSubnet), arg0, arg1)
	return &MockStateAddSubnetCall{Call: call}
}

// MockStateAddSubnetCall wrap *gomock.Call
type MockStateAddSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddSubnetCall) Return(arg0 error) *MockStateAddSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddSubnetCall) Do(f func(context.Context, network.SubnetInfo) error) *MockStateAddSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddSubnetCall) DoAndReturn(f func(context.Context, network.SubnetInfo) error) *MockStateAddSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllMachinesAndNetNodes mocks base method.
func (m *MockState) AllMachinesAndNetNodes(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachinesAndNetNodes", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachinesAndNetNodes indicates an expected call of AllMachinesAndNetNodes.
func (mr *MockStateMockRecorder) AllMachinesAndNetNodes(arg0 any) *MockStateAllMachinesAndNetNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachinesAndNetNodes", reflect.TypeOf((*MockState)(nil).AllMachinesAndNetNodes), arg0)
	return &MockStateAllMachinesAndNetNodesCall{Call: call}
}

// MockStateAllMachinesAndNetNodesCall wrap *gomock.Call
type MockStateAllMachinesAndNetNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllMachinesAndNetNodesCall) Return(arg0 map[string]string, arg1 error) *MockStateAllMachinesAndNetNodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllMachinesAndNetNodesCall) Do(f func(context.Context) (map[string]string, error)) *MockStateAllMachinesAndNetNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllMachinesAndNetNodesCall) DoAndReturn(f func(context.Context) (map[string]string, error)) *MockStateAllMachinesAndNetNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllSubnetsQuery mocks base method.
func (m *MockState) AllSubnetsQuery(arg0 context.Context, arg1 database.TxnRunner) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSubnetsQuery", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSubnetsQuery indicates an expected call of AllSubnetsQuery.
func (mr *MockStateMockRecorder) AllSubnetsQuery(arg0, arg1 any) *MockStateAllSubnetsQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSubnetsQuery", reflect.TypeOf((*MockState)(nil).AllSubnetsQuery), arg0, arg1)
	return &MockStateAllSubnetsQueryCall{Call: call}
}

// MockStateAllSubnetsQueryCall wrap *gomock.Call
type MockStateAllSubnetsQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllSubnetsQueryCall) Return(arg0 []string, arg1 error) *MockStateAllSubnetsQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllSubnetsQueryCall) Do(f func(context.Context, database.TxnRunner) ([]string, error)) *MockStateAllSubnetsQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllSubnetsQueryCall) DoAndReturn(f func(context.Context, database.TxnRunner) ([]string, error)) *MockStateAllSubnetsQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteImportedLinkLayerDevices mocks base method.
func (m *MockState) DeleteImportedLinkLayerDevices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImportedLinkLayerDevices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImportedLinkLayerDevices indicates an expected call of DeleteImportedLinkLayerDevices.
func (mr *MockStateMockRecorder) DeleteImportedLinkLayerDevices(arg0 any) *MockStateDeleteImportedLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportedLinkLayerDevices", reflect.TypeOf((*MockState)(nil).DeleteImportedLinkLayerDevices), arg0)
	return &MockStateDeleteImportedLinkLayerDevicesCall{Call: call}
}

// MockStateDeleteImportedLinkLayerDevicesCall wrap *gomock.Call
type MockStateDeleteImportedLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteImportedLinkLayerDevicesCall) Return(arg0 error) *MockStateDeleteImportedLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteImportedLinkLayerDevicesCall) Do(f func(context.Context) error) *MockStateDeleteImportedLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteImportedLinkLayerDevicesCall) DoAndReturn(f func(context.Context) error) *MockStateDeleteImportedLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSpace mocks base method.
func (m *MockState) DeleteSpace(arg0 context.Context, arg1 network.SpaceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpace indicates an expected call of DeleteSpace.
func (mr *MockStateMockRecorder) DeleteSpace(arg0, arg1 any) *MockStateDeleteSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpace", reflect.TypeOf((*MockState)(nil).DeleteSpace), arg0, arg1)
	return &MockStateDeleteSpaceCall{Call: call}
}

// MockStateDeleteSpaceCall wrap *gomock.Call
type MockStateDeleteSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteSpaceCall) Return(arg0 error) *MockStateDeleteSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteSpaceCall) Do(f func(context.Context, network.SpaceUUID) error) *MockStateDeleteSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID) error) *MockStateDeleteSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSubnet mocks base method.
func (m *MockState) DeleteSubnet(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockStateMockRecorder) DeleteSubnet(arg0, arg1 any) *MockStateDeleteSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockState)(nil).DeleteSubnet), arg0, arg1)
	return &MockStateDeleteSubnetCall{Call: call}
}

// MockStateDeleteSubnetCall wrap *gomock.Call
type MockStateDeleteSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteSubnetCall) Return(arg0 error) *MockStateDeleteSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteSubnetCall) Do(f func(context.Context, string) error) *MockStateDeleteSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteSubnetCall) DoAndReturn(f func(context.Context, string) error) *MockStateDeleteSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllLinkLayerDevicesByNetNodeUUIDs mocks base method.
func (m *MockState) GetAllLinkLayerDevicesByNetNodeUUIDs(arg0 context.Context) (map[string][]network0.NetInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLinkLayerDevicesByNetNodeUUIDs", arg0)
	ret0, _ := ret[0].(map[string][]network0.NetInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLinkLayerDevicesByNetNodeUUIDs indicates an expected call of GetAllLinkLayerDevicesByNetNodeUUIDs.
func (mr *MockStateMockRecorder) GetAllLinkLayerDevicesByNetNodeUUIDs(arg0 any) *MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLinkLayerDevicesByNetNodeUUIDs", reflect.TypeOf((*MockState)(nil).GetAllLinkLayerDevicesByNetNodeUUIDs), arg0)
	return &MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall{Call: call}
}

// MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall wrap *gomock.Call
type MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall) Return(arg0 map[string][]network0.NetInterface, arg1 error) *MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall) Do(f func(context.Context) (map[string][]network0.NetInterface, error)) *MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall) DoAndReturn(f func(context.Context) (map[string][]network0.NetInterface, error)) *MockStateGetAllLinkLayerDevicesByNetNodeUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSpaces mocks base method.
func (m *MockState) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockStateMockRecorder) GetAllSpaces(arg0 any) *MockStateGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockState)(nil).GetAllSpaces), arg0)
	return &MockStateGetAllSpacesCall{Call: call}
}

// MockStateGetAllSpacesCall wrap *gomock.Call
type MockStateGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockStateGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockStateGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockStateGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSubnets mocks base method.
func (m *MockState) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockStateMockRecorder) GetAllSubnets(arg0 any) *MockStateGetAllSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockState)(nil).GetAllSubnets), arg0)
	return &MockStateGetAllSubnetsCall{Call: call}
}

// MockStateGetAllSubnetsCall wrap *gomock.Call
type MockStateGetAllSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllSubnetsCall) Return(arg0 network.SubnetInfos, arg1 error) *MockStateGetAllSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllSubnetsCall) Do(f func(context.Context) (network.SubnetInfos, error)) *MockStateGetAllSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllSubnetsCall) DoAndReturn(f func(context.Context) (network.SubnetInfos, error)) *MockStateGetAllSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerNetworkingMethod mocks base method.
func (m *MockState) GetContainerNetworkingMethod(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerNetworkingMethod", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerNetworkingMethod indicates an expected call of GetContainerNetworkingMethod.
func (mr *MockStateMockRecorder) GetContainerNetworkingMethod(arg0 any) *MockStateGetContainerNetworkingMethodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerNetworkingMethod", reflect.TypeOf((*MockState)(nil).GetContainerNetworkingMethod), arg0)
	return &MockStateGetContainerNetworkingMethodCall{Call: call}
}

// MockStateGetContainerNetworkingMethodCall wrap *gomock.Call
type MockStateGetContainerNetworkingMethodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetContainerNetworkingMethodCall) Return(arg0 string, arg1 error) *MockStateGetContainerNetworkingMethodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetContainerNetworkingMethodCall) Do(f func(context.Context) (string, error)) *MockStateGetContainerNetworkingMethodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetContainerNetworkingMethodCall) DoAndReturn(f func(context.Context) (string, error)) *MockStateGetContainerNetworkingMethodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineAppBindings mocks base method.
func (m *MockState) GetMachineAppBindings(arg0 context.Context, arg1 string) ([]internal.SpaceName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineAppBindings", arg0, arg1)
	ret0, _ := ret[0].([]internal.SpaceName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineAppBindings indicates an expected call of GetMachineAppBindings.
func (mr *MockStateMockRecorder) GetMachineAppBindings(arg0, arg1 any) *MockStateGetMachineAppBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineAppBindings", reflect.TypeOf((*MockState)(nil).GetMachineAppBindings), arg0, arg1)
	return &MockStateGetMachineAppBindingsCall{Call: call}
}

// MockStateGetMachineAppBindingsCall wrap *gomock.Call
type MockStateGetMachineAppBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineAppBindingsCall) Return(arg0 []internal.SpaceName, arg1 error) *MockStateGetMachineAppBindingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineAppBindingsCall) Do(f func(context.Context, string) ([]internal.SpaceName, error)) *MockStateGetMachineAppBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineAppBindingsCall) DoAndReturn(f func(context.Context, string) ([]internal.SpaceName, error)) *MockStateGetMachineAppBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineNetNodeUUID mocks base method.
func (m *MockState) GetMachineNetNodeUUID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineNetNodeUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineNetNodeUUID indicates an expected call of GetMachineNetNodeUUID.
func (mr *MockStateMockRecorder) GetMachineNetNodeUUID(arg0, arg1 any) *MockStateGetMachineNetNodeUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineNetNodeUUID", reflect.TypeOf((*MockState)(nil).GetMachineNetNodeUUID), arg0, arg1)
	return &MockStateGetMachineNetNodeUUIDCall{Call: call}
}

// MockStateGetMachineNetNodeUUIDCall wrap *gomock.Call
type MockStateGetMachineNetNodeUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineNetNodeUUIDCall) Return(arg0 string, arg1 error) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineNetNodeUUIDCall) Do(f func(context.Context, string) (string, error)) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineNetNodeUUIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateGetMachineNetNodeUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineSpaceConstraints mocks base method.
func (m *MockState) GetMachineSpaceConstraints(arg0 context.Context, arg1 string) ([]internal.SpaceName, []internal.SpaceName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineSpaceConstraints", arg0, arg1)
	ret0, _ := ret[0].([]internal.SpaceName)
	ret1, _ := ret[1].([]internal.SpaceName)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMachineSpaceConstraints indicates an expected call of GetMachineSpaceConstraints.
func (mr *MockStateMockRecorder) GetMachineSpaceConstraints(arg0, arg1 any) *MockStateGetMachineSpaceConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineSpaceConstraints", reflect.TypeOf((*MockState)(nil).GetMachineSpaceConstraints), arg0, arg1)
	return &MockStateGetMachineSpaceConstraintsCall{Call: call}
}

// MockStateGetMachineSpaceConstraintsCall wrap *gomock.Call
type MockStateGetMachineSpaceConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineSpaceConstraintsCall) Return(arg0, arg1 []internal.SpaceName, arg2 error) *MockStateGetMachineSpaceConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineSpaceConstraintsCall) Do(f func(context.Context, string) ([]internal.SpaceName, []internal.SpaceName, error)) *MockStateGetMachineSpaceConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineSpaceConstraintsCall) DoAndReturn(f func(context.Context, string) ([]internal.SpaceName, []internal.SpaceName, error)) *MockStateGetMachineSpaceConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSpace mocks base method.
func (m *MockState) GetSpace(arg0 context.Context, arg1 network.SpaceUUID) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpace", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpace indicates an expected call of GetSpace.
func (mr *MockStateMockRecorder) GetSpace(arg0, arg1 any) *MockStateGetSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpace", reflect.TypeOf((*MockState)(nil).GetSpace), arg0, arg1)
	return &MockStateGetSpaceCall{Call: call}
}

// MockStateGetSpaceCall wrap *gomock.Call
type MockStateGetSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSpaceCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockStateGetSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSpaceCall) Do(f func(context.Context, network.SpaceUUID) (*network.SpaceInfo, error)) *MockStateGetSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID) (*network.SpaceInfo, error)) *MockStateGetSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSpaceByName mocks base method.
func (m *MockState) GetSpaceByName(arg0 context.Context, arg1 network.SpaceName) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByName indicates an expected call of GetSpaceByName.
func (mr *MockStateMockRecorder) GetSpaceByName(arg0, arg1 any) *MockStateGetSpaceByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByName", reflect.TypeOf((*MockState)(nil).GetSpaceByName), arg0, arg1)
	return &MockStateGetSpaceByNameCall{Call: call}
}

// MockStateGetSpaceByNameCall wrap *gomock.Call
type MockStateGetSpaceByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSpaceByNameCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockStateGetSpaceByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSpaceByNameCall) Do(f func(context.Context, network.SpaceName) (*network.SpaceInfo, error)) *MockStateGetSpaceByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSpaceByNameCall) DoAndReturn(f func(context.Context, network.SpaceName) (*network.SpaceInfo, error)) *MockStateGetSpaceByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSubnet mocks base method.
func (m *MockState) GetSubnet(arg0 context.Context, arg1 string) (*network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", arg0, arg1)
	ret0, _ := ret[0].(*network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockStateMockRecorder) GetSubnet(arg0, arg1 any) *MockStateGetSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockState)(nil).GetSubnet), arg0, arg1)
	return &MockStateGetSubnetCall{Call: call}
}

// MockStateGetSubnetCall wrap *gomock.Call
type MockStateGetSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSubnetCall) Return(arg0 *network.SubnetInfo, arg1 error) *MockStateGetSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSubnetCall) Do(f func(context.Context, string) (*network.SubnetInfo, error)) *MockStateGetSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSubnetCall) DoAndReturn(f func(context.Context, string) (*network.SubnetInfo, error)) *MockStateGetSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSubnetsByCIDR mocks base method.
func (m *MockState) GetSubnetsByCIDR(arg0 context.Context, arg1 ...string) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnetsByCIDR", varargs...)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetsByCIDR indicates an expected call of GetSubnetsByCIDR.
func (mr *MockStateMockRecorder) GetSubnetsByCIDR(arg0 any, arg1 ...any) *MockStateGetSubnetsByCIDRCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetsByCIDR", reflect.TypeOf((*MockState)(nil).GetSubnetsByCIDR), varargs...)
	return &MockStateGetSubnetsByCIDRCall{Call: call}
}

// MockStateGetSubnetsByCIDRCall wrap *gomock.Call
type MockStateGetSubnetsByCIDRCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSubnetsByCIDRCall) Return(arg0 network.SubnetInfos, arg1 error) *MockStateGetSubnetsByCIDRCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSubnetsByCIDRCall) Do(f func(context.Context, ...string) (network.SubnetInfos, error)) *MockStateGetSubnetsByCIDRCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSubnetsByCIDRCall) DoAndReturn(f func(context.Context, ...string) (network.SubnetInfos, error)) *MockStateGetSubnetsByCIDRCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitAddresses mocks base method.
func (m *MockState) GetUnitAddresses(arg0 context.Context, arg1 unit.UUID) (network.SpaceAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitAddresses", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitAddresses indicates an expected call of GetUnitAddresses.
func (mr *MockStateMockRecorder) GetUnitAddresses(arg0, arg1 any) *MockStateGetUnitAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitAddresses", reflect.TypeOf((*MockState)(nil).GetUnitAddresses), arg0, arg1)
	return &MockStateGetUnitAddressesCall{Call: call}
}

// MockStateGetUnitAddressesCall wrap *gomock.Call
type MockStateGetUnitAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitAddressesCall) Return(arg0 network.SpaceAddresses, arg1 error) *MockStateGetUnitAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitAddressesCall) Do(f func(context.Context, unit.UUID) (network.SpaceAddresses, error)) *MockStateGetUnitAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitAddressesCall) DoAndReturn(f func(context.Context, unit.UUID) (network.SpaceAddresses, error)) *MockStateGetUnitAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitAndK8sServiceAddresses mocks base method.
func (m *MockState) GetUnitAndK8sServiceAddresses(arg0 context.Context, arg1 unit.UUID) (network.SpaceAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitAndK8sServiceAddresses", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitAndK8sServiceAddresses indicates an expected call of GetUnitAndK8sServiceAddresses.
func (mr *MockStateMockRecorder) GetUnitAndK8sServiceAddresses(arg0, arg1 any) *MockStateGetUnitAndK8sServiceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitAndK8sServiceAddresses", reflect.TypeOf((*MockState)(nil).GetUnitAndK8sServiceAddresses), arg0, arg1)
	return &MockStateGetUnitAndK8sServiceAddressesCall{Call: call}
}

// MockStateGetUnitAndK8sServiceAddressesCall wrap *gomock.Call
type MockStateGetUnitAndK8sServiceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitAndK8sServiceAddressesCall) Return(arg0 network.SpaceAddresses, arg1 error) *MockStateGetUnitAndK8sServiceAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitAndK8sServiceAddressesCall) Do(f func(context.Context, unit.UUID) (network.SpaceAddresses, error)) *MockStateGetUnitAndK8sServiceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitAndK8sServiceAddressesCall) DoAndReturn(f func(context.Context, unit.UUID) (network.SpaceAddresses, error)) *MockStateGetUnitAndK8sServiceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDByName mocks base method.
func (m *MockState) GetUnitUUIDByName(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDByName indicates an expected call of GetUnitUUIDByName.
func (mr *MockStateMockRecorder) GetUnitUUIDByName(arg0, arg1 any) *MockStateGetUnitUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDByName", reflect.TypeOf((*MockState)(nil).GetUnitUUIDByName), arg0, arg1)
	return &MockStateGetUnitUUIDByNameCall{Call: call}
}

// MockStateGetUnitUUIDByNameCall wrap *gomock.Call
type MockStateGetUnitUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDByNameCall) Return(arg0 unit.UUID, arg1 error) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDByNameCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDByNameCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportLinkLayerDevices mocks base method.
func (m *MockState) ImportLinkLayerDevices(arg0 context.Context, arg1 []internal.ImportLinkLayerDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportLinkLayerDevices", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportLinkLayerDevices indicates an expected call of ImportLinkLayerDevices.
func (mr *MockStateMockRecorder) ImportLinkLayerDevices(arg0, arg1 any) *MockStateImportLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportLinkLayerDevices", reflect.TypeOf((*MockState)(nil).ImportLinkLayerDevices), arg0, arg1)
	return &MockStateImportLinkLayerDevicesCall{Call: call}
}

// MockStateImportLinkLayerDevicesCall wrap *gomock.Call
type MockStateImportLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateImportLinkLayerDevicesCall) Return(arg0 error) *MockStateImportLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateImportLinkLayerDevicesCall) Do(f func(context.Context, []internal.ImportLinkLayerDevice) error) *MockStateImportLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateImportLinkLayerDevicesCall) DoAndReturn(f func(context.Context, []internal.ImportLinkLayerDevice) error) *MockStateImportLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsSpaceUsedInConstraints mocks base method.
func (m *MockState) IsSpaceUsedInConstraints(arg0 context.Context, arg1 network.SpaceName) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSpaceUsedInConstraints", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSpaceUsedInConstraints indicates an expected call of IsSpaceUsedInConstraints.
func (mr *MockStateMockRecorder) IsSpaceUsedInConstraints(arg0, arg1 any) *MockStateIsSpaceUsedInConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSpaceUsedInConstraints", reflect.TypeOf((*MockState)(nil).IsSpaceUsedInConstraints), arg0, arg1)
	return &MockStateIsSpaceUsedInConstraintsCall{Call: call}
}

// MockStateIsSpaceUsedInConstraintsCall wrap *gomock.Call
type MockStateIsSpaceUsedInConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsSpaceUsedInConstraintsCall) Return(arg0 bool, arg1 error) *MockStateIsSpaceUsedInConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsSpaceUsedInConstraintsCall) Do(f func(context.Context, network.SpaceName) (bool, error)) *MockStateIsSpaceUsedInConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsSpaceUsedInConstraintsCall) DoAndReturn(f func(context.Context, network.SpaceName) (bool, error)) *MockStateIsSpaceUsedInConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MergeLinkLayerDevice mocks base method.
func (m *MockState) MergeLinkLayerDevice(arg0 context.Context, arg1 string, arg2 []network0.NetInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeLinkLayerDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeLinkLayerDevice indicates an expected call of MergeLinkLayerDevice.
func (mr *MockStateMockRecorder) MergeLinkLayerDevice(arg0, arg1, arg2 any) *MockStateMergeLinkLayerDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeLinkLayerDevice", reflect.TypeOf((*MockState)(nil).MergeLinkLayerDevice), arg0, arg1, arg2)
	return &MockStateMergeLinkLayerDeviceCall{Call: call}
}

// MockStateMergeLinkLayerDeviceCall wrap *gomock.Call
type MockStateMergeLinkLayerDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMergeLinkLayerDeviceCall) Return(arg0 error) *MockStateMergeLinkLayerDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMergeLinkLayerDeviceCall) Do(f func(context.Context, string, []network0.NetInterface) error) *MockStateMergeLinkLayerDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMergeLinkLayerDeviceCall) DoAndReturn(f func(context.Context, string, []network0.NetInterface) error) *MockStateMergeLinkLayerDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NICsInSpaces mocks base method.
func (m *MockState) NICsInSpaces(arg0 context.Context, arg1 string) (map[string][]network0.NetInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NICsInSpaces", arg0, arg1)
	ret0, _ := ret[0].(map[string][]network0.NetInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NICsInSpaces indicates an expected call of NICsInSpaces.
func (mr *MockStateMockRecorder) NICsInSpaces(arg0, arg1 any) *MockStateNICsInSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NICsInSpaces", reflect.TypeOf((*MockState)(nil).NICsInSpaces), arg0, arg1)
	return &MockStateNICsInSpacesCall{Call: call}
}

// MockStateNICsInSpacesCall wrap *gomock.Call
type MockStateNICsInSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNICsInSpacesCall) Return(arg0 map[string][]network0.NetInterface, arg1 error) *MockStateNICsInSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNICsInSpacesCall) Do(f func(context.Context, string) (map[string][]network0.NetInterface, error)) *MockStateNICsInSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNICsInSpacesCall) DoAndReturn(f func(context.Context, string) (map[string][]network0.NetInterface, error)) *MockStateNICsInSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchSubnet mocks base method.
func (m *MockState) NamespaceForWatchSubnet() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchSubnet")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchSubnet indicates an expected call of NamespaceForWatchSubnet.
func (mr *MockStateMockRecorder) NamespaceForWatchSubnet() *MockStateNamespaceForWatchSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchSubnet", reflect.TypeOf((*MockState)(nil).NamespaceForWatchSubnet))
	return &MockStateNamespaceForWatchSubnetCall{Call: call}
}

// MockStateNamespaceForWatchSubnetCall wrap *gomock.Call
type MockStateNamespaceForWatchSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchSubnetCall) Return(arg0 string) *MockStateNamespaceForWatchSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchSubnetCall) Do(f func() string) *MockStateNamespaceForWatchSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchSubnetCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineNetConfig mocks base method.
func (m *MockState) SetMachineNetConfig(arg0 context.Context, arg1 string, arg2 []network0.NetInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineNetConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineNetConfig indicates an expected call of SetMachineNetConfig.
func (mr *MockStateMockRecorder) SetMachineNetConfig(arg0, arg1, arg2 any) *MockStateSetMachineNetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineNetConfig", reflect.TypeOf((*MockState)(nil).SetMachineNetConfig), arg0, arg1, arg2)
	return &MockStateSetMachineNetConfigCall{Call: call}
}

// MockStateSetMachineNetConfigCall wrap *gomock.Call
type MockStateSetMachineNetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetMachineNetConfigCall) Return(arg0 error) *MockStateSetMachineNetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetMachineNetConfigCall) Do(f func(context.Context, string, []network0.NetInterface) error) *MockStateSetMachineNetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetMachineNetConfigCall) DoAndReturn(f func(context.Context, string, []network0.NetInterface) error) *MockStateSetMachineNetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSpace mocks base method.
func (m *MockState) UpdateSpace(arg0 context.Context, arg1 network.SpaceUUID, arg2 network.SpaceName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpace indicates an expected call of UpdateSpace.
func (mr *MockStateMockRecorder) UpdateSpace(arg0, arg1, arg2 any) *MockStateUpdateSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpace", reflect.TypeOf((*MockState)(nil).UpdateSpace), arg0, arg1, arg2)
	return &MockStateUpdateSpaceCall{Call: call}
}

// MockStateUpdateSpaceCall wrap *gomock.Call
type MockStateUpdateSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateSpaceCall) Return(arg0 error) *MockStateUpdateSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateSpaceCall) Do(f func(context.Context, network.SpaceUUID, network.SpaceName) error) *MockStateUpdateSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID, network.SpaceName) error) *MockStateUpdateSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSubnet mocks base method.
func (m *MockState) UpdateSubnet(arg0 context.Context, arg1 string, arg2 network.SpaceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubnet indicates an expected call of UpdateSubnet.
func (mr *MockStateMockRecorder) UpdateSubnet(arg0, arg1, arg2 any) *MockStateUpdateSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnet", reflect.TypeOf((*MockState)(nil).UpdateSubnet), arg0, arg1, arg2)
	return &MockStateUpdateSubnetCall{Call: call}
}

// MockStateUpdateSubnetCall wrap *gomock.Call
type MockStateUpdateSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateSubnetCall) Return(arg0 error) *MockStateUpdateSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateSubnetCall) Do(f func(context.Context, string, network.SpaceUUID) error) *MockStateUpdateSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateSubnetCall) DoAndReturn(f func(context.Context, string, network.SpaceUUID) error) *MockStateUpdateSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertSubnets mocks base method.
func (m *MockState) UpsertSubnets(arg0 context.Context, arg1 []network.SubnetInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSubnets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSubnets indicates an expected call of UpsertSubnets.
func (mr *MockStateMockRecorder) UpsertSubnets(arg0, arg1 any) *MockStateUpsertSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSubnets", reflect.TypeOf((*MockState)(nil).UpsertSubnets), arg0, arg1)
	return &MockStateUpsertSubnetsCall{Call: call}
}

// MockStateUpsertSubnetsCall wrap *gomock.Call
type MockStateUpsertSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpsertSubnetsCall) Return(arg0 error) *MockStateUpsertSubnetsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpsertSubnetsCall) Do(f func(context.Context, []network.SubnetInfo) error) *MockStateUpsertSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpsertSubnetsCall) DoAndReturn(f func(context.Context, []network.SubnetInfo) error) *MockStateUpsertSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderWithNetworking is a mock of ProviderWithNetworking interface.
type MockProviderWithNetworking struct {
	ctrl     *gomock.Controller
	recorder *MockProviderWithNetworkingMockRecorder
}

// MockProviderWithNetworkingMockRecorder is the mock recorder for MockProviderWithNetworking.
type MockProviderWithNetworkingMockRecorder struct {
	mock *MockProviderWithNetworking
}

// NewMockProviderWithNetworking creates a new mock instance.
func NewMockProviderWithNetworking(ctrl *gomock.Controller) *MockProviderWithNetworking {
	mock := &MockProviderWithNetworking{ctrl: ctrl}
	mock.recorder = &MockProviderWithNetworkingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderWithNetworking) EXPECT() *MockProviderWithNetworkingMockRecorder {
	return m.recorder
}

// AllocateContainerAddresses mocks base method.
func (m *MockProviderWithNetworking) AllocateContainerAddresses(arg0 context.Context, arg1 instance.Id, arg2 names.MachineTag, arg3 network.InterfaceInfos) (network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateContainerAddresses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateContainerAddresses indicates an expected call of AllocateContainerAddresses.
func (mr *MockProviderWithNetworkingMockRecorder) AllocateContainerAddresses(arg0, arg1, arg2, arg3 any) *MockProviderWithNetworkingAllocateContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateContainerAddresses", reflect.TypeOf((*MockProviderWithNetworking)(nil).AllocateContainerAddresses), arg0, arg1, arg2, arg3)
	return &MockProviderWithNetworkingAllocateContainerAddressesCall{Call: call}
}

// MockProviderWithNetworkingAllocateContainerAddressesCall wrap *gomock.Call
type MockProviderWithNetworkingAllocateContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingAllocateContainerAddressesCall) Return(arg0 network.InterfaceInfos, arg1 error) *MockProviderWithNetworkingAllocateContainerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingAllocateContainerAddressesCall) Do(f func(context.Context, instance.Id, names.MachineTag, network.InterfaceInfos) (network.InterfaceInfos, error)) *MockProviderWithNetworkingAllocateContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingAllocateContainerAddressesCall) DoAndReturn(f func(context.Context, instance.Id, names.MachineTag, network.InterfaceInfos) (network.InterfaceInfos, error)) *MockProviderWithNetworkingAllocateContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NetworkInterfaces mocks base method.
func (m *MockProviderWithNetworking) NetworkInterfaces(arg0 context.Context, arg1 []instance.Id) ([]network.InterfaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInterfaces", arg0, arg1)
	ret0, _ := ret[0].([]network.InterfaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInterfaces indicates an expected call of NetworkInterfaces.
func (mr *MockProviderWithNetworkingMockRecorder) NetworkInterfaces(arg0, arg1 any) *MockProviderWithNetworkingNetworkInterfacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInterfaces", reflect.TypeOf((*MockProviderWithNetworking)(nil).NetworkInterfaces), arg0, arg1)
	return &MockProviderWithNetworkingNetworkInterfacesCall{Call: call}
}

// MockProviderWithNetworkingNetworkInterfacesCall wrap *gomock.Call
type MockProviderWithNetworkingNetworkInterfacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingNetworkInterfacesCall) Return(arg0 []network.InterfaceInfos, arg1 error) *MockProviderWithNetworkingNetworkInterfacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingNetworkInterfacesCall) Do(f func(context.Context, []instance.Id) ([]network.InterfaceInfos, error)) *MockProviderWithNetworkingNetworkInterfacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingNetworkInterfacesCall) DoAndReturn(f func(context.Context, []instance.Id) ([]network.InterfaceInfos, error)) *MockProviderWithNetworkingNetworkInterfacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderSpaceInfo mocks base method.
func (m *MockProviderWithNetworking) ProviderSpaceInfo(arg0 context.Context, arg1 *network.SpaceInfo) (*environs.ProviderSpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderSpaceInfo", arg0, arg1)
	ret0, _ := ret[0].(*environs.ProviderSpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderSpaceInfo indicates an expected call of ProviderSpaceInfo.
func (mr *MockProviderWithNetworkingMockRecorder) ProviderSpaceInfo(arg0, arg1 any) *MockProviderWithNetworkingProviderSpaceInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderSpaceInfo", reflect.TypeOf((*MockProviderWithNetworking)(nil).ProviderSpaceInfo), arg0, arg1)
	return &MockProviderWithNetworkingProviderSpaceInfoCall{Call: call}
}

// MockProviderWithNetworkingProviderSpaceInfoCall wrap *gomock.Call
type MockProviderWithNetworkingProviderSpaceInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingProviderSpaceInfoCall) Return(arg0 *environs.ProviderSpaceInfo, arg1 error) *MockProviderWithNetworkingProviderSpaceInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingProviderSpaceInfoCall) Do(f func(context.Context, *network.SpaceInfo) (*environs.ProviderSpaceInfo, error)) *MockProviderWithNetworkingProviderSpaceInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingProviderSpaceInfoCall) DoAndReturn(f func(context.Context, *network.SpaceInfo) (*environs.ProviderSpaceInfo, error)) *MockProviderWithNetworkingProviderSpaceInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseContainerAddresses mocks base method.
func (m *MockProviderWithNetworking) ReleaseContainerAddresses(arg0 context.Context, arg1 []network.ProviderInterfaceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseContainerAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseContainerAddresses indicates an expected call of ReleaseContainerAddresses.
func (mr *MockProviderWithNetworkingMockRecorder) ReleaseContainerAddresses(arg0, arg1 any) *MockProviderWithNetworkingReleaseContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseContainerAddresses", reflect.TypeOf((*MockProviderWithNetworking)(nil).ReleaseContainerAddresses), arg0, arg1)
	return &MockProviderWithNetworkingReleaseContainerAddressesCall{Call: call}
}

// MockProviderWithNetworkingReleaseContainerAddressesCall wrap *gomock.Call
type MockProviderWithNetworkingReleaseContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingReleaseContainerAddressesCall) Return(arg0 error) *MockProviderWithNetworkingReleaseContainerAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingReleaseContainerAddressesCall) Do(f func(context.Context, []network.ProviderInterfaceInfo) error) *MockProviderWithNetworkingReleaseContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingReleaseContainerAddressesCall) DoAndReturn(f func(context.Context, []network.ProviderInterfaceInfo) error) *MockProviderWithNetworkingReleaseContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Spaces mocks base method.
func (m *MockProviderWithNetworking) Spaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spaces indicates an expected call of Spaces.
func (mr *MockProviderWithNetworkingMockRecorder) Spaces(arg0 any) *MockProviderWithNetworkingSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockProviderWithNetworking)(nil).Spaces), arg0)
	return &MockProviderWithNetworkingSpacesCall{Call: call}
}

// MockProviderWithNetworkingSpacesCall wrap *gomock.Call
type MockProviderWithNetworkingSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockProviderWithNetworkingSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockProviderWithNetworkingSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockProviderWithNetworkingSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subnets mocks base method.
func (m *MockProviderWithNetworking) Subnets(arg0 context.Context, arg1 []network.Id) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets", arg0, arg1)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnets indicates an expected call of Subnets.
func (mr *MockProviderWithNetworkingMockRecorder) Subnets(arg0, arg1 any) *MockProviderWithNetworkingSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockProviderWithNetworking)(nil).Subnets), arg0, arg1)
	return &MockProviderWithNetworkingSubnetsCall{Call: call}
}

// MockProviderWithNetworkingSubnetsCall wrap *gomock.Call
type MockProviderWithNetworkingSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingSubnetsCall) Return(arg0 []network.SubnetInfo, arg1 error) *MockProviderWithNetworkingSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingSubnetsCall) Do(f func(context.Context, []network.Id) ([]network.SubnetInfo, error)) *MockProviderWithNetworkingSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingSubnetsCall) DoAndReturn(f func(context.Context, []network.Id) ([]network.SubnetInfo, error)) *MockProviderWithNetworkingSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsContainerAddresses mocks base method.
func (m *MockProviderWithNetworking) SupportsContainerAddresses(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsContainerAddresses", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsContainerAddresses indicates an expected call of SupportsContainerAddresses.
func (mr *MockProviderWithNetworkingMockRecorder) SupportsContainerAddresses(arg0 any) *MockProviderWithNetworkingSupportsContainerAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsContainerAddresses", reflect.TypeOf((*MockProviderWithNetworking)(nil).SupportsContainerAddresses), arg0)
	return &MockProviderWithNetworkingSupportsContainerAddressesCall{Call: call}
}

// MockProviderWithNetworkingSupportsContainerAddressesCall wrap *gomock.Call
type MockProviderWithNetworkingSupportsContainerAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingSupportsContainerAddressesCall) Return(arg0 bool, arg1 error) *MockProviderWithNetworkingSupportsContainerAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingSupportsContainerAddressesCall) Do(f func(context.Context) (bool, error)) *MockProviderWithNetworkingSupportsContainerAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingSupportsContainerAddressesCall) DoAndReturn(f func(context.Context) (bool, error)) *MockProviderWithNetworkingSupportsContainerAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaceDiscovery mocks base method.
func (m *MockProviderWithNetworking) SupportsSpaceDiscovery() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaceDiscovery")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaceDiscovery indicates an expected call of SupportsSpaceDiscovery.
func (mr *MockProviderWithNetworkingMockRecorder) SupportsSpaceDiscovery() *MockProviderWithNetworkingSupportsSpaceDiscoveryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaceDiscovery", reflect.TypeOf((*MockProviderWithNetworking)(nil).SupportsSpaceDiscovery))
	return &MockProviderWithNetworkingSupportsSpaceDiscoveryCall{Call: call}
}

// MockProviderWithNetworkingSupportsSpaceDiscoveryCall wrap *gomock.Call
type MockProviderWithNetworkingSupportsSpaceDiscoveryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingSupportsSpaceDiscoveryCall) Return(arg0 bool, arg1 error) *MockProviderWithNetworkingSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingSupportsSpaceDiscoveryCall) Do(f func() (bool, error)) *MockProviderWithNetworkingSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingSupportsSpaceDiscoveryCall) DoAndReturn(f func() (bool, error)) *MockProviderWithNetworkingSupportsSpaceDiscoveryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaces mocks base method.
func (m *MockProviderWithNetworking) SupportsSpaces() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaces")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaces indicates an expected call of SupportsSpaces.
func (mr *MockProviderWithNetworkingMockRecorder) SupportsSpaces() *MockProviderWithNetworkingSupportsSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaces", reflect.TypeOf((*MockProviderWithNetworking)(nil).SupportsSpaces))
	return &MockProviderWithNetworkingSupportsSpacesCall{Call: call}
}

// MockProviderWithNetworkingSupportsSpacesCall wrap *gomock.Call
type MockProviderWithNetworkingSupportsSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithNetworkingSupportsSpacesCall) Return(arg0 bool, arg1 error) *MockProviderWithNetworkingSupportsSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithNetworkingSupportsSpacesCall) Do(f func() (bool, error)) *MockProviderWithNetworkingSupportsSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithNetworkingSupportsSpacesCall) DoAndReturn(f func() (bool, error)) *MockProviderWithNetworkingSupportsSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderWithZones is a mock of ProviderWithZones interface.
type MockProviderWithZones struct {
	ctrl     *gomock.Controller
	recorder *MockProviderWithZonesMockRecorder
}

// MockProviderWithZonesMockRecorder is the mock recorder for MockProviderWithZones.
type MockProviderWithZonesMockRecorder struct {
	mock *MockProviderWithZones
}

// NewMockProviderWithZones creates a new mock instance.
func NewMockProviderWithZones(ctrl *gomock.Controller) *MockProviderWithZones {
	mock := &MockProviderWithZones{ctrl: ctrl}
	mock.recorder = &MockProviderWithZonesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderWithZones) EXPECT() *MockProviderWithZonesMockRecorder {
	return m.recorder
}

// AvailabilityZones mocks base method.
func (m *MockProviderWithZones) AvailabilityZones(arg0 context.Context) (network.AvailabilityZones, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZones", arg0)
	ret0, _ := ret[0].(network.AvailabilityZones)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZones indicates an expected call of AvailabilityZones.
func (mr *MockProviderWithZonesMockRecorder) AvailabilityZones(arg0 any) *MockProviderWithZonesAvailabilityZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZones", reflect.TypeOf((*MockProviderWithZones)(nil).AvailabilityZones), arg0)
	return &MockProviderWithZonesAvailabilityZonesCall{Call: call}
}

// MockProviderWithZonesAvailabilityZonesCall wrap *gomock.Call
type MockProviderWithZonesAvailabilityZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithZonesAvailabilityZonesCall) Return(arg0 network.AvailabilityZones, arg1 error) *MockProviderWithZonesAvailabilityZonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithZonesAvailabilityZonesCall) Do(f func(context.Context) (network.AvailabilityZones, error)) *MockProviderWithZonesAvailabilityZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithZonesAvailabilityZonesCall) DoAndReturn(f func(context.Context) (network.AvailabilityZones, error)) *MockProviderWithZonesAvailabilityZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
