// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/network/modelmigration (interfaces: ImportService,ExportService,MigrationService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/network/modelmigration ImportService,ExportService,MigrationService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	internal "github.com/juju/juju/domain/network/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockImportService) AddSpace(arg0 context.Context, arg1 network.SpaceInfo) (network.SpaceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockImportServiceMockRecorder) AddSpace(arg0, arg1 any) *MockImportServiceAddSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockImportService)(nil).AddSpace), arg0, arg1)
	return &MockImportServiceAddSpaceCall{Call: call}
}

// MockImportServiceAddSpaceCall wrap *gomock.Call
type MockImportServiceAddSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceAddSpaceCall) Return(arg0 network.SpaceUUID, arg1 error) *MockImportServiceAddSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceAddSpaceCall) Do(f func(context.Context, network.SpaceInfo) (network.SpaceUUID, error)) *MockImportServiceAddSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceAddSpaceCall) DoAndReturn(f func(context.Context, network.SpaceInfo) (network.SpaceUUID, error)) *MockImportServiceAddSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddSubnet mocks base method.
func (m *MockImportService) AddSubnet(arg0 context.Context, arg1 network.SubnetInfo) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0, arg1)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockImportServiceMockRecorder) AddSubnet(arg0, arg1 any) *MockImportServiceAddSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockImportService)(nil).AddSubnet), arg0, arg1)
	return &MockImportServiceAddSubnetCall{Call: call}
}

// MockImportServiceAddSubnetCall wrap *gomock.Call
type MockImportServiceAddSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceAddSubnetCall) Return(arg0 network.Id, arg1 error) *MockImportServiceAddSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceAddSubnetCall) Do(f func(context.Context, network.SubnetInfo) (network.Id, error)) *MockImportServiceAddSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceAddSubnetCall) DoAndReturn(f func(context.Context, network.SubnetInfo) (network.Id, error)) *MockImportServiceAddSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Space mocks base method.
func (m *MockImportService) Space(arg0 context.Context, arg1 network.SpaceUUID) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Space", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Space indicates an expected call of Space.
func (mr *MockImportServiceMockRecorder) Space(arg0, arg1 any) *MockImportServiceSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Space", reflect.TypeOf((*MockImportService)(nil).Space), arg0, arg1)
	return &MockImportServiceSpaceCall{Call: call}
}

// MockImportServiceSpaceCall wrap *gomock.Call
type MockImportServiceSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceSpaceCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockImportServiceSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceSpaceCall) Do(f func(context.Context, network.SpaceUUID) (*network.SpaceInfo, error)) *MockImportServiceSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID) (*network.SpaceInfo, error)) *MockImportServiceSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockExportService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockExportServiceMockRecorder) GetAllSpaces(arg0 any) *MockExportServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockExportService)(nil).GetAllSpaces), arg0)
	return &MockExportServiceGetAllSpacesCall{Call: call}
}

// MockExportServiceGetAllSpacesCall wrap *gomock.Call
type MockExportServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockExportServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockExportServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockExportServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSubnets mocks base method.
func (m *MockExportService) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockExportServiceMockRecorder) GetAllSubnets(arg0 any) *MockExportServiceGetAllSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockExportService)(nil).GetAllSubnets), arg0)
	return &MockExportServiceGetAllSubnetsCall{Call: call}
}

// MockExportServiceGetAllSubnetsCall wrap *gomock.Call
type MockExportServiceGetAllSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetAllSubnetsCall) Return(arg0 network.SubnetInfos, arg1 error) *MockExportServiceGetAllSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetAllSubnetsCall) Do(f func(context.Context) (network.SubnetInfos, error)) *MockExportServiceGetAllSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetAllSubnetsCall) DoAndReturn(f func(context.Context) (network.SubnetInfos, error)) *MockExportServiceGetAllSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMigrationService is a mock of MigrationService interface.
type MockMigrationService struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationServiceMockRecorder
}

// MockMigrationServiceMockRecorder is the mock recorder for MockMigrationService.
type MockMigrationServiceMockRecorder struct {
	mock *MockMigrationService
}

// NewMockMigrationService creates a new mock instance.
func NewMockMigrationService(ctrl *gomock.Controller) *MockMigrationService {
	mock := &MockMigrationService{ctrl: ctrl}
	mock.recorder = &MockMigrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationService) EXPECT() *MockMigrationServiceMockRecorder {
	return m.recorder
}

// DeleteImportedLinkLayerDevices mocks base method.
func (m *MockMigrationService) DeleteImportedLinkLayerDevices(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImportedLinkLayerDevices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImportedLinkLayerDevices indicates an expected call of DeleteImportedLinkLayerDevices.
func (mr *MockMigrationServiceMockRecorder) DeleteImportedLinkLayerDevices(arg0 any) *MockMigrationServiceDeleteImportedLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportedLinkLayerDevices", reflect.TypeOf((*MockMigrationService)(nil).DeleteImportedLinkLayerDevices), arg0)
	return &MockMigrationServiceDeleteImportedLinkLayerDevicesCall{Call: call}
}

// MockMigrationServiceDeleteImportedLinkLayerDevicesCall wrap *gomock.Call
type MockMigrationServiceDeleteImportedLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationServiceDeleteImportedLinkLayerDevicesCall) Return(arg0 error) *MockMigrationServiceDeleteImportedLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationServiceDeleteImportedLinkLayerDevicesCall) Do(f func(context.Context) error) *MockMigrationServiceDeleteImportedLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationServiceDeleteImportedLinkLayerDevicesCall) DoAndReturn(f func(context.Context) error) *MockMigrationServiceDeleteImportedLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportLinkLayerDevices mocks base method.
func (m *MockMigrationService) ImportLinkLayerDevices(arg0 context.Context, arg1 []internal.ImportLinkLayerDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportLinkLayerDevices", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportLinkLayerDevices indicates an expected call of ImportLinkLayerDevices.
func (mr *MockMigrationServiceMockRecorder) ImportLinkLayerDevices(arg0, arg1 any) *MockMigrationServiceImportLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportLinkLayerDevices", reflect.TypeOf((*MockMigrationService)(nil).ImportLinkLayerDevices), arg0, arg1)
	return &MockMigrationServiceImportLinkLayerDevicesCall{Call: call}
}

// MockMigrationServiceImportLinkLayerDevicesCall wrap *gomock.Call
type MockMigrationServiceImportLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationServiceImportLinkLayerDevicesCall) Return(arg0 error) *MockMigrationServiceImportLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationServiceImportLinkLayerDevicesCall) Do(f func(context.Context, []internal.ImportLinkLayerDevice) error) *MockMigrationServiceImportLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationServiceImportLinkLayerDevicesCall) DoAndReturn(f func(context.Context, []internal.ImportLinkLayerDevice) error) *MockMigrationServiceImportLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
