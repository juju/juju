// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/status/service (interfaces: ControllerState)
//
// Generated by this command:
//
//	mockgen -typed -package status_test -destination leadership_mock_test.go github.com/juju/juju/domain/status/service ControllerState
//

// Package status_test is a generated GoMock package.
package status_test

import (
	context "context"
	reflect "reflect"

	status "github.com/juju/juju/domain/status"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetModelStatusContext mocks base method.
func (m *MockControllerState) GetModelStatusContext(arg0 context.Context) (status.ModelStatusContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatusContext", arg0)
	ret0, _ := ret[0].(status.ModelStatusContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatusContext indicates an expected call of GetModelStatusContext.
func (mr *MockControllerStateMockRecorder) GetModelStatusContext(arg0 any) *MockControllerStateGetModelStatusContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatusContext", reflect.TypeOf((*MockControllerState)(nil).GetModelStatusContext), arg0)
	return &MockControllerStateGetModelStatusContextCall{Call: call}
}

// MockControllerStateGetModelStatusContextCall wrap *gomock.Call
type MockControllerStateGetModelStatusContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelStatusContextCall) Return(arg0 status.ModelStatusContext, arg1 error) *MockControllerStateGetModelStatusContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelStatusContextCall) Do(f func(context.Context) (status.ModelStatusContext, error)) *MockControllerStateGetModelStatusContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelStatusContextCall) DoAndReturn(f func(context.Context) (status.ModelStatusContext, error)) *MockControllerStateGetModelStatusContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
