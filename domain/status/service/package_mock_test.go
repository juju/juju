// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go -source=./service.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	model "github.com/juju/juju/core/model"
	relation "github.com/juju/juju/core/relation"
	unit "github.com/juju/juju/core/unit"
	status "github.com/juju/juju/domain/status"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// DeleteUnitPresence mocks base method.
func (m *MockState) DeleteUnitPresence(ctx context.Context, name unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnitPresence", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnitPresence indicates an expected call of DeleteUnitPresence.
func (mr *MockStateMockRecorder) DeleteUnitPresence(ctx, name any) *MockStateDeleteUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnitPresence", reflect.TypeOf((*MockState)(nil).DeleteUnitPresence), ctx, name)
	return &MockStateDeleteUnitPresenceCall{Call: call}
}

// MockStateDeleteUnitPresenceCall wrap *gomock.Call
type MockStateDeleteUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteUnitPresenceCall) Return(arg0 error) *MockStateDeleteUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockStateDeleteUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockStateDeleteUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllApplicationStatuses mocks base method.
func (m *MockState) GetAllApplicationStatuses(arg0 context.Context) (map[string]status.StatusInfo[status.WorkloadStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllApplicationStatuses", arg0)
	ret0, _ := ret[0].(map[string]status.StatusInfo[status.WorkloadStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllApplicationStatuses indicates an expected call of GetAllApplicationStatuses.
func (mr *MockStateMockRecorder) GetAllApplicationStatuses(arg0 any) *MockStateGetAllApplicationStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllApplicationStatuses", reflect.TypeOf((*MockState)(nil).GetAllApplicationStatuses), arg0)
	return &MockStateGetAllApplicationStatusesCall{Call: call}
}

// MockStateGetAllApplicationStatusesCall wrap *gomock.Call
type MockStateGetAllApplicationStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllApplicationStatusesCall) Return(arg0 map[string]status.StatusInfo[status.WorkloadStatusType], arg1 error) *MockStateGetAllApplicationStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllApplicationStatusesCall) Do(f func(context.Context) (map[string]status.StatusInfo[status.WorkloadStatusType], error)) *MockStateGetAllApplicationStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllApplicationStatusesCall) DoAndReturn(f func(context.Context) (map[string]status.StatusInfo[status.WorkloadStatusType], error)) *MockStateGetAllApplicationStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllFullUnitStatusesForApplication mocks base method.
func (m *MockState) GetAllFullUnitStatusesForApplication(arg0 context.Context, arg1 application.ID) (status.FullUnitStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFullUnitStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(status.FullUnitStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFullUnitStatusesForApplication indicates an expected call of GetAllFullUnitStatusesForApplication.
func (mr *MockStateMockRecorder) GetAllFullUnitStatusesForApplication(arg0, arg1 any) *MockStateGetAllFullUnitStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFullUnitStatusesForApplication", reflect.TypeOf((*MockState)(nil).GetAllFullUnitStatusesForApplication), arg0, arg1)
	return &MockStateGetAllFullUnitStatusesForApplicationCall{Call: call}
}

// MockStateGetAllFullUnitStatusesForApplicationCall wrap *gomock.Call
type MockStateGetAllFullUnitStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllFullUnitStatusesForApplicationCall) Return(arg0 status.FullUnitStatuses, arg1 error) *MockStateGetAllFullUnitStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllFullUnitStatusesForApplicationCall) Do(f func(context.Context, application.ID) (status.FullUnitStatuses, error)) *MockStateGetAllFullUnitStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllFullUnitStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) (status.FullUnitStatuses, error)) *MockStateGetAllFullUnitStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllRelationStatuses mocks base method.
func (m *MockState) GetAllRelationStatuses(ctx context.Context) ([]status.RelationStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationStatuses", ctx)
	ret0, _ := ret[0].([]status.RelationStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationStatuses indicates an expected call of GetAllRelationStatuses.
func (mr *MockStateMockRecorder) GetAllRelationStatuses(ctx any) *MockStateGetAllRelationStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationStatuses", reflect.TypeOf((*MockState)(nil).GetAllRelationStatuses), ctx)
	return &MockStateGetAllRelationStatusesCall{Call: call}
}

// MockStateGetAllRelationStatusesCall wrap *gomock.Call
type MockStateGetAllRelationStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllRelationStatusesCall) Return(arg0 []status.RelationStatusInfo, arg1 error) *MockStateGetAllRelationStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllRelationStatusesCall) Do(f func(context.Context) ([]status.RelationStatusInfo, error)) *MockStateGetAllRelationStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllRelationStatusesCall) DoAndReturn(f func(context.Context) ([]status.RelationStatusInfo, error)) *MockStateGetAllRelationStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUnitWorkloadAgentStatuses mocks base method.
func (m *MockState) GetAllUnitWorkloadAgentStatuses(arg0 context.Context) (status.UnitWorkloadAgentStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnitWorkloadAgentStatuses", arg0)
	ret0, _ := ret[0].(status.UnitWorkloadAgentStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnitWorkloadAgentStatuses indicates an expected call of GetAllUnitWorkloadAgentStatuses.
func (mr *MockStateMockRecorder) GetAllUnitWorkloadAgentStatuses(arg0 any) *MockStateGetAllUnitWorkloadAgentStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnitWorkloadAgentStatuses", reflect.TypeOf((*MockState)(nil).GetAllUnitWorkloadAgentStatuses), arg0)
	return &MockStateGetAllUnitWorkloadAgentStatusesCall{Call: call}
}

// MockStateGetAllUnitWorkloadAgentStatusesCall wrap *gomock.Call
type MockStateGetAllUnitWorkloadAgentStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllUnitWorkloadAgentStatusesCall) Return(arg0 status.UnitWorkloadAgentStatuses, arg1 error) *MockStateGetAllUnitWorkloadAgentStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllUnitWorkloadAgentStatusesCall) Do(f func(context.Context) (status.UnitWorkloadAgentStatuses, error)) *MockStateGetAllUnitWorkloadAgentStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllUnitWorkloadAgentStatusesCall) DoAndReturn(f func(context.Context) (status.UnitWorkloadAgentStatuses, error)) *MockStateGetAllUnitWorkloadAgentStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationAndUnitModelStatuses mocks base method.
func (m *MockState) GetApplicationAndUnitModelStatuses(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitModelStatuses", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndUnitModelStatuses indicates an expected call of GetApplicationAndUnitModelStatuses.
func (mr *MockStateMockRecorder) GetApplicationAndUnitModelStatuses(ctx any) *MockStateGetApplicationAndUnitModelStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitModelStatuses", reflect.TypeOf((*MockState)(nil).GetApplicationAndUnitModelStatuses), ctx)
	return &MockStateGetApplicationAndUnitModelStatusesCall{Call: call}
}

// MockStateGetApplicationAndUnitModelStatusesCall wrap *gomock.Call
type MockStateGetApplicationAndUnitModelStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationAndUnitModelStatusesCall) Return(arg0 map[string]int, arg1 error) *MockStateGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationAndUnitModelStatusesCall) Do(f func(context.Context) (map[string]int, error)) *MockStateGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationAndUnitModelStatusesCall) DoAndReturn(f func(context.Context) (map[string]int, error)) *MockStateGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationAndUnitStatuses mocks base method.
func (m *MockState) GetApplicationAndUnitStatuses(ctx context.Context) (map[string]status.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitStatuses", ctx)
	ret0, _ := ret[0].(map[string]status.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndUnitStatuses indicates an expected call of GetApplicationAndUnitStatuses.
func (mr *MockStateMockRecorder) GetApplicationAndUnitStatuses(ctx any) *MockStateGetApplicationAndUnitStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitStatuses", reflect.TypeOf((*MockState)(nil).GetApplicationAndUnitStatuses), ctx)
	return &MockStateGetApplicationAndUnitStatusesCall{Call: call}
}

// MockStateGetApplicationAndUnitStatusesCall wrap *gomock.Call
type MockStateGetApplicationAndUnitStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationAndUnitStatusesCall) Return(arg0 map[string]status.Application, arg1 error) *MockStateGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationAndUnitStatusesCall) Do(f func(context.Context) (map[string]status.Application, error)) *MockStateGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationAndUnitStatusesCall) DoAndReturn(f func(context.Context) (map[string]status.Application, error)) *MockStateGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDAndNameByUnitName mocks base method.
func (m *MockState) GetApplicationIDAndNameByUnitName(ctx context.Context, name unit.Name) (application.ID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDAndNameByUnitName", ctx, name)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationIDAndNameByUnitName indicates an expected call of GetApplicationIDAndNameByUnitName.
func (mr *MockStateMockRecorder) GetApplicationIDAndNameByUnitName(ctx, name any) *MockStateGetApplicationIDAndNameByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDAndNameByUnitName", reflect.TypeOf((*MockState)(nil).GetApplicationIDAndNameByUnitName), ctx, name)
	return &MockStateGetApplicationIDAndNameByUnitNameCall{Call: call}
}

// MockStateGetApplicationIDAndNameByUnitNameCall wrap *gomock.Call
type MockStateGetApplicationIDAndNameByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationIDAndNameByUnitNameCall) Return(arg0 application.ID, arg1 string, arg2 error) *MockStateGetApplicationIDAndNameByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationIDAndNameByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, string, error)) *MockStateGetApplicationIDAndNameByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationIDAndNameByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, string, error)) *MockStateGetApplicationIDAndNameByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByName mocks base method.
func (m *MockState) GetApplicationIDByName(ctx context.Context, name string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", ctx, name)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockStateMockRecorder) GetApplicationIDByName(ctx, name any) *MockStateGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockState)(nil).GetApplicationIDByName), ctx, name)
	return &MockStateGetApplicationIDByNameCall{Call: call}
}

// MockStateGetApplicationIDByNameCall wrap *gomock.Call
type MockStateGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockStateGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockStateGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockStateGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationStatus mocks base method.
func (m *MockState) GetApplicationStatus(ctx context.Context, appID application.ID) (status.StatusInfo[status.WorkloadStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStatus", ctx, appID)
	ret0, _ := ret[0].(status.StatusInfo[status.WorkloadStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationStatus indicates an expected call of GetApplicationStatus.
func (mr *MockStateMockRecorder) GetApplicationStatus(ctx, appID any) *MockStateGetApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStatus", reflect.TypeOf((*MockState)(nil).GetApplicationStatus), ctx, appID)
	return &MockStateGetApplicationStatusCall{Call: call}
}

// MockStateGetApplicationStatusCall wrap *gomock.Call
type MockStateGetApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationStatusCall) Return(arg0 status.StatusInfo[status.WorkloadStatusType], arg1 error) *MockStateGetApplicationStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationStatusCall) Do(f func(context.Context, application.ID) (status.StatusInfo[status.WorkloadStatusType], error)) *MockStateGetApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationStatusCall) DoAndReturn(f func(context.Context, application.ID) (status.StatusInfo[status.WorkloadStatusType], error)) *MockStateGetApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelStatusInfo mocks base method.
func (m *MockState) GetModelStatusInfo(ctx context.Context) (status.ModelStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatusInfo", ctx)
	ret0, _ := ret[0].(status.ModelStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatusInfo indicates an expected call of GetModelStatusInfo.
func (mr *MockStateMockRecorder) GetModelStatusInfo(ctx any) *MockStateGetModelStatusInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatusInfo", reflect.TypeOf((*MockState)(nil).GetModelStatusInfo), ctx)
	return &MockStateGetModelStatusInfoCall{Call: call}
}

// MockStateGetModelStatusInfoCall wrap *gomock.Call
type MockStateGetModelStatusInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelStatusInfoCall) Return(arg0 status.ModelStatusInfo, arg1 error) *MockStateGetModelStatusInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelStatusInfoCall) Do(f func(context.Context) (status.ModelStatusInfo, error)) *MockStateGetModelStatusInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelStatusInfoCall) DoAndReturn(f func(context.Context) (status.ModelStatusInfo, error)) *MockStateGetModelStatusInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitAgentStatus mocks base method.
func (m *MockState) GetUnitAgentStatus(arg0 context.Context, arg1 unit.UUID) (status.UnitStatusInfo[status.UnitAgentStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitAgentStatus", arg0, arg1)
	ret0, _ := ret[0].(status.UnitStatusInfo[status.UnitAgentStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitAgentStatus indicates an expected call of GetUnitAgentStatus.
func (mr *MockStateMockRecorder) GetUnitAgentStatus(arg0, arg1 any) *MockStateGetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitAgentStatus", reflect.TypeOf((*MockState)(nil).GetUnitAgentStatus), arg0, arg1)
	return &MockStateGetUnitAgentStatusCall{Call: call}
}

// MockStateGetUnitAgentStatusCall wrap *gomock.Call
type MockStateGetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitAgentStatusCall) Return(arg0 status.UnitStatusInfo[status.UnitAgentStatusType], arg1 error) *MockStateGetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitAgentStatusCall) Do(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.UnitAgentStatusType], error)) *MockStateGetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.UnitAgentStatusType], error)) *MockStateGetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitK8sPodStatus mocks base method.
func (m *MockState) GetUnitK8sPodStatus(arg0 context.Context, arg1 unit.UUID) (status.StatusInfo[status.K8sPodStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitK8sPodStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo[status.K8sPodStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitK8sPodStatus indicates an expected call of GetUnitK8sPodStatus.
func (mr *MockStateMockRecorder) GetUnitK8sPodStatus(arg0, arg1 any) *MockStateGetUnitK8sPodStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitK8sPodStatus", reflect.TypeOf((*MockState)(nil).GetUnitK8sPodStatus), arg0, arg1)
	return &MockStateGetUnitK8sPodStatusCall{Call: call}
}

// MockStateGetUnitK8sPodStatusCall wrap *gomock.Call
type MockStateGetUnitK8sPodStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitK8sPodStatusCall) Return(arg0 status.StatusInfo[status.K8sPodStatusType], arg1 error) *MockStateGetUnitK8sPodStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitK8sPodStatusCall) Do(f func(context.Context, unit.UUID) (status.StatusInfo[status.K8sPodStatusType], error)) *MockStateGetUnitK8sPodStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitK8sPodStatusCall) DoAndReturn(f func(context.Context, unit.UUID) (status.StatusInfo[status.K8sPodStatusType], error)) *MockStateGetUnitK8sPodStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDByName mocks base method.
func (m *MockState) GetUnitUUIDByName(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDByName indicates an expected call of GetUnitUUIDByName.
func (mr *MockStateMockRecorder) GetUnitUUIDByName(arg0, arg1 any) *MockStateGetUnitUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDByName", reflect.TypeOf((*MockState)(nil).GetUnitUUIDByName), arg0, arg1)
	return &MockStateGetUnitUUIDByNameCall{Call: call}
}

// MockStateGetUnitUUIDByNameCall wrap *gomock.Call
type MockStateGetUnitUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDByNameCall) Return(arg0 unit.UUID, arg1 error) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDByNameCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDByNameCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatus mocks base method.
func (m *MockState) GetUnitWorkloadStatus(arg0 context.Context, arg1 unit.UUID) (status.UnitStatusInfo[status.WorkloadStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatus", arg0, arg1)
	ret0, _ := ret[0].(status.UnitStatusInfo[status.WorkloadStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatus indicates an expected call of GetUnitWorkloadStatus.
func (mr *MockStateMockRecorder) GetUnitWorkloadStatus(arg0, arg1 any) *MockStateGetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatus", reflect.TypeOf((*MockState)(nil).GetUnitWorkloadStatus), arg0, arg1)
	return &MockStateGetUnitWorkloadStatusCall{Call: call}
}

// MockStateGetUnitWorkloadStatusCall wrap *gomock.Call
type MockStateGetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitWorkloadStatusCall) Return(arg0 status.UnitStatusInfo[status.WorkloadStatusType], arg1 error) *MockStateGetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitWorkloadStatusCall) Do(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.WorkloadStatusType], error)) *MockStateGetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.WorkloadStatusType], error)) *MockStateGetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatusesForApplication mocks base method.
func (m *MockState) GetUnitWorkloadStatusesForApplication(arg0 context.Context, arg1 application.ID) (status.UnitWorkloadStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(status.UnitWorkloadStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatusesForApplication indicates an expected call of GetUnitWorkloadStatusesForApplication.
func (mr *MockStateMockRecorder) GetUnitWorkloadStatusesForApplication(arg0, arg1 any) *MockStateGetUnitWorkloadStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatusesForApplication", reflect.TypeOf((*MockState)(nil).GetUnitWorkloadStatusesForApplication), arg0, arg1)
	return &MockStateGetUnitWorkloadStatusesForApplicationCall{Call: call}
}

// MockStateGetUnitWorkloadStatusesForApplicationCall wrap *gomock.Call
type MockStateGetUnitWorkloadStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitWorkloadStatusesForApplicationCall) Return(arg0 status.UnitWorkloadStatuses, arg1 error) *MockStateGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitWorkloadStatusesForApplicationCall) Do(f func(context.Context, application.ID) (status.UnitWorkloadStatuses, error)) *MockStateGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitWorkloadStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) (status.UnitWorkloadStatuses, error)) *MockStateGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportRelationStatus mocks base method.
func (m *MockState) ImportRelationStatus(ctx context.Context, relationID int, sts status.StatusInfo[status.RelationStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRelationStatus", ctx, relationID, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportRelationStatus indicates an expected call of ImportRelationStatus.
func (mr *MockStateMockRecorder) ImportRelationStatus(ctx, relationID, sts any) *MockStateImportRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRelationStatus", reflect.TypeOf((*MockState)(nil).ImportRelationStatus), ctx, relationID, sts)
	return &MockStateImportRelationStatusCall{Call: call}
}

// MockStateImportRelationStatusCall wrap *gomock.Call
type MockStateImportRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateImportRelationStatusCall) Return(arg0 error) *MockStateImportRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateImportRelationStatusCall) Do(f func(context.Context, int, status.StatusInfo[status.RelationStatusType]) error) *MockStateImportRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateImportRelationStatusCall) DoAndReturn(f func(context.Context, int, status.StatusInfo[status.RelationStatusType]) error) *MockStateImportRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationStatus mocks base method.
func (m *MockState) SetApplicationStatus(ctx context.Context, applicationID application.ID, status status.StatusInfo[status.WorkloadStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationStatus", ctx, applicationID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationStatus indicates an expected call of SetApplicationStatus.
func (mr *MockStateMockRecorder) SetApplicationStatus(ctx, applicationID, status any) *MockStateSetApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationStatus", reflect.TypeOf((*MockState)(nil).SetApplicationStatus), ctx, applicationID, status)
	return &MockStateSetApplicationStatusCall{Call: call}
}

// MockStateSetApplicationStatusCall wrap *gomock.Call
type MockStateSetApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetApplicationStatusCall) Return(arg0 error) *MockStateSetApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetApplicationStatusCall) Do(f func(context.Context, application.ID, status.StatusInfo[status.WorkloadStatusType]) error) *MockStateSetApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetApplicationStatusCall) DoAndReturn(f func(context.Context, application.ID, status.StatusInfo[status.WorkloadStatusType]) error) *MockStateSetApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationStatus mocks base method.
func (m *MockState) SetRelationStatus(ctx context.Context, relationUUID relation.UUID, sts status.StatusInfo[status.RelationStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationStatus", ctx, relationUUID, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationStatus indicates an expected call of SetRelationStatus.
func (mr *MockStateMockRecorder) SetRelationStatus(ctx, relationUUID, sts any) *MockStateSetRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationStatus", reflect.TypeOf((*MockState)(nil).SetRelationStatus), ctx, relationUUID, sts)
	return &MockStateSetRelationStatusCall{Call: call}
}

// MockStateSetRelationStatusCall wrap *gomock.Call
type MockStateSetRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationStatusCall) Return(arg0 error) *MockStateSetRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationStatusCall) Do(f func(context.Context, relation.UUID, status.StatusInfo[status.RelationStatusType]) error) *MockStateSetRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationStatusCall) DoAndReturn(f func(context.Context, relation.UUID, status.StatusInfo[status.RelationStatusType]) error) *MockStateSetRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitAgentStatus mocks base method.
func (m *MockState) SetUnitAgentStatus(arg0 context.Context, arg1 unit.UUID, arg2 status.StatusInfo[status.UnitAgentStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitAgentStatus indicates an expected call of SetUnitAgentStatus.
func (mr *MockStateMockRecorder) SetUnitAgentStatus(arg0, arg1, arg2 any) *MockStateSetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitAgentStatus", reflect.TypeOf((*MockState)(nil).SetUnitAgentStatus), arg0, arg1, arg2)
	return &MockStateSetUnitAgentStatusCall{Call: call}
}

// MockStateSetUnitAgentStatusCall wrap *gomock.Call
type MockStateSetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitAgentStatusCall) Return(arg0 error) *MockStateSetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitAgentStatusCall) Do(f func(context.Context, unit.UUID, status.StatusInfo[status.UnitAgentStatusType]) error) *MockStateSetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.UUID, status.StatusInfo[status.UnitAgentStatusType]) error) *MockStateSetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPresence mocks base method.
func (m *MockState) SetUnitPresence(ctx context.Context, name unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPresence", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPresence indicates an expected call of SetUnitPresence.
func (mr *MockStateMockRecorder) SetUnitPresence(ctx, name any) *MockStateSetUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPresence", reflect.TypeOf((*MockState)(nil).SetUnitPresence), ctx, name)
	return &MockStateSetUnitPresenceCall{Call: call}
}

// MockStateSetUnitPresenceCall wrap *gomock.Call
type MockStateSetUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitPresenceCall) Return(arg0 error) *MockStateSetUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockStateSetUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockStateSetUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadStatus mocks base method.
func (m *MockState) SetUnitWorkloadStatus(arg0 context.Context, arg1 unit.UUID, arg2 status.StatusInfo[status.WorkloadStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadStatus indicates an expected call of SetUnitWorkloadStatus.
func (mr *MockStateMockRecorder) SetUnitWorkloadStatus(arg0, arg1, arg2 any) *MockStateSetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadStatus", reflect.TypeOf((*MockState)(nil).SetUnitWorkloadStatus), arg0, arg1, arg2)
	return &MockStateSetUnitWorkloadStatusCall{Call: call}
}

// MockStateSetUnitWorkloadStatusCall wrap *gomock.Call
type MockStateSetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitWorkloadStatusCall) Return(arg0 error) *MockStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitWorkloadStatusCall) Do(f func(context.Context, unit.UUID, status.StatusInfo[status.WorkloadStatusType]) error) *MockStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.UUID, status.StatusInfo[status.WorkloadStatusType]) error) *MockStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetModel mocks base method.
func (m *MockControllerState) GetModel(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockControllerStateMockRecorder) GetModel(arg0, arg1 any) *MockControllerStateGetModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockControllerState)(nil).GetModel), arg0, arg1)
	return &MockControllerStateGetModelCall{Call: call}
}

// MockControllerStateGetModelCall wrap *gomock.Call
type MockControllerStateGetModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelCall) Return(arg0 model.Model, arg1 error) *MockControllerStateGetModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockControllerStateGetModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockControllerStateGetModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelState mocks base method.
func (m *MockControllerState) GetModelState(arg0 context.Context, arg1 model.UUID) (status.ModelState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelState", arg0, arg1)
	ret0, _ := ret[0].(status.ModelState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelState indicates an expected call of GetModelState.
func (mr *MockControllerStateMockRecorder) GetModelState(arg0, arg1 any) *MockControllerStateGetModelStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelState", reflect.TypeOf((*MockControllerState)(nil).GetModelState), arg0, arg1)
	return &MockControllerStateGetModelStateCall{Call: call}
}

// MockControllerStateGetModelStateCall wrap *gomock.Call
type MockControllerStateGetModelStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelStateCall) Return(arg0 status.ModelState, arg1 error) *MockControllerStateGetModelStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelStateCall) Do(f func(context.Context, model.UUID) (status.ModelState, error)) *MockControllerStateGetModelStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelStateCall) DoAndReturn(f func(context.Context, model.UUID) (status.ModelState, error)) *MockControllerStateGetModelStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
