// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go -source=./service.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	relation "github.com/juju/juju/core/relation"
	storage "github.com/juju/juju/core/storage"
	unit "github.com/juju/juju/core/unit"
	status "github.com/juju/juju/domain/status"
	gomock "go.uber.org/mock/gomock"
)

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// DeleteUnitPresence mocks base method.
func (m *MockModelState) DeleteUnitPresence(ctx context.Context, name unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnitPresence", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnitPresence indicates an expected call of DeleteUnitPresence.
func (mr *MockModelStateMockRecorder) DeleteUnitPresence(ctx, name any) *MockModelStateDeleteUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnitPresence", reflect.TypeOf((*MockModelState)(nil).DeleteUnitPresence), ctx, name)
	return &MockModelStateDeleteUnitPresenceCall{Call: call}
}

// MockModelStateDeleteUnitPresenceCall wrap *gomock.Call
type MockModelStateDeleteUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateDeleteUnitPresenceCall) Return(arg0 error) *MockModelStateDeleteUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateDeleteUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockModelStateDeleteUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateDeleteUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockModelStateDeleteUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllApplicationStatuses mocks base method.
func (m *MockModelState) GetAllApplicationStatuses(arg0 context.Context) (map[string]status.StatusInfo[status.WorkloadStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllApplicationStatuses", arg0)
	ret0, _ := ret[0].(map[string]status.StatusInfo[status.WorkloadStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllApplicationStatuses indicates an expected call of GetAllApplicationStatuses.
func (mr *MockModelStateMockRecorder) GetAllApplicationStatuses(arg0 any) *MockModelStateGetAllApplicationStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllApplicationStatuses", reflect.TypeOf((*MockModelState)(nil).GetAllApplicationStatuses), arg0)
	return &MockModelStateGetAllApplicationStatusesCall{Call: call}
}

// MockModelStateGetAllApplicationStatusesCall wrap *gomock.Call
type MockModelStateGetAllApplicationStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllApplicationStatusesCall) Return(arg0 map[string]status.StatusInfo[status.WorkloadStatusType], arg1 error) *MockModelStateGetAllApplicationStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllApplicationStatusesCall) Do(f func(context.Context) (map[string]status.StatusInfo[status.WorkloadStatusType], error)) *MockModelStateGetAllApplicationStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllApplicationStatusesCall) DoAndReturn(f func(context.Context) (map[string]status.StatusInfo[status.WorkloadStatusType], error)) *MockModelStateGetAllApplicationStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllFullUnitStatusesForApplication mocks base method.
func (m *MockModelState) GetAllFullUnitStatusesForApplication(arg0 context.Context, arg1 application.ID) (status.FullUnitStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFullUnitStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(status.FullUnitStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFullUnitStatusesForApplication indicates an expected call of GetAllFullUnitStatusesForApplication.
func (mr *MockModelStateMockRecorder) GetAllFullUnitStatusesForApplication(arg0, arg1 any) *MockModelStateGetAllFullUnitStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFullUnitStatusesForApplication", reflect.TypeOf((*MockModelState)(nil).GetAllFullUnitStatusesForApplication), arg0, arg1)
	return &MockModelStateGetAllFullUnitStatusesForApplicationCall{Call: call}
}

// MockModelStateGetAllFullUnitStatusesForApplicationCall wrap *gomock.Call
type MockModelStateGetAllFullUnitStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllFullUnitStatusesForApplicationCall) Return(arg0 status.FullUnitStatuses, arg1 error) *MockModelStateGetAllFullUnitStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllFullUnitStatusesForApplicationCall) Do(f func(context.Context, application.ID) (status.FullUnitStatuses, error)) *MockModelStateGetAllFullUnitStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllFullUnitStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) (status.FullUnitStatuses, error)) *MockModelStateGetAllFullUnitStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllInstanceStatuses mocks base method.
func (m *MockModelState) GetAllInstanceStatuses(arg0 context.Context) (map[string]status.StatusInfo[status.InstanceStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInstanceStatuses", arg0)
	ret0, _ := ret[0].(map[string]status.StatusInfo[status.InstanceStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInstanceStatuses indicates an expected call of GetAllInstanceStatuses.
func (mr *MockModelStateMockRecorder) GetAllInstanceStatuses(arg0 any) *MockModelStateGetAllInstanceStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInstanceStatuses", reflect.TypeOf((*MockModelState)(nil).GetAllInstanceStatuses), arg0)
	return &MockModelStateGetAllInstanceStatusesCall{Call: call}
}

// MockModelStateGetAllInstanceStatusesCall wrap *gomock.Call
type MockModelStateGetAllInstanceStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllInstanceStatusesCall) Return(arg0 map[string]status.StatusInfo[status.InstanceStatusType], arg1 error) *MockModelStateGetAllInstanceStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllInstanceStatusesCall) Do(f func(context.Context) (map[string]status.StatusInfo[status.InstanceStatusType], error)) *MockModelStateGetAllInstanceStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllInstanceStatusesCall) DoAndReturn(f func(context.Context) (map[string]status.StatusInfo[status.InstanceStatusType], error)) *MockModelStateGetAllInstanceStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllMachineStatuses mocks base method.
func (m *MockModelState) GetAllMachineStatuses(arg0 context.Context) (map[string]status.StatusInfo[status.MachineStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMachineStatuses", arg0)
	ret0, _ := ret[0].(map[string]status.StatusInfo[status.MachineStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMachineStatuses indicates an expected call of GetAllMachineStatuses.
func (mr *MockModelStateMockRecorder) GetAllMachineStatuses(arg0 any) *MockModelStateGetAllMachineStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMachineStatuses", reflect.TypeOf((*MockModelState)(nil).GetAllMachineStatuses), arg0)
	return &MockModelStateGetAllMachineStatusesCall{Call: call}
}

// MockModelStateGetAllMachineStatusesCall wrap *gomock.Call
type MockModelStateGetAllMachineStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllMachineStatusesCall) Return(arg0 map[string]status.StatusInfo[status.MachineStatusType], arg1 error) *MockModelStateGetAllMachineStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllMachineStatusesCall) Do(f func(context.Context) (map[string]status.StatusInfo[status.MachineStatusType], error)) *MockModelStateGetAllMachineStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllMachineStatusesCall) DoAndReturn(f func(context.Context) (map[string]status.StatusInfo[status.MachineStatusType], error)) *MockModelStateGetAllMachineStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllRelationStatuses mocks base method.
func (m *MockModelState) GetAllRelationStatuses(ctx context.Context) ([]status.RelationStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationStatuses", ctx)
	ret0, _ := ret[0].([]status.RelationStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationStatuses indicates an expected call of GetAllRelationStatuses.
func (mr *MockModelStateMockRecorder) GetAllRelationStatuses(ctx any) *MockModelStateGetAllRelationStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationStatuses", reflect.TypeOf((*MockModelState)(nil).GetAllRelationStatuses), ctx)
	return &MockModelStateGetAllRelationStatusesCall{Call: call}
}

// MockModelStateGetAllRelationStatusesCall wrap *gomock.Call
type MockModelStateGetAllRelationStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllRelationStatusesCall) Return(arg0 []status.RelationStatusInfo, arg1 error) *MockModelStateGetAllRelationStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllRelationStatusesCall) Do(f func(context.Context) ([]status.RelationStatusInfo, error)) *MockModelStateGetAllRelationStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllRelationStatusesCall) DoAndReturn(f func(context.Context) ([]status.RelationStatusInfo, error)) *MockModelStateGetAllRelationStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUnitWorkloadAgentStatuses mocks base method.
func (m *MockModelState) GetAllUnitWorkloadAgentStatuses(arg0 context.Context) (status.UnitWorkloadAgentStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnitWorkloadAgentStatuses", arg0)
	ret0, _ := ret[0].(status.UnitWorkloadAgentStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnitWorkloadAgentStatuses indicates an expected call of GetAllUnitWorkloadAgentStatuses.
func (mr *MockModelStateMockRecorder) GetAllUnitWorkloadAgentStatuses(arg0 any) *MockModelStateGetAllUnitWorkloadAgentStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnitWorkloadAgentStatuses", reflect.TypeOf((*MockModelState)(nil).GetAllUnitWorkloadAgentStatuses), arg0)
	return &MockModelStateGetAllUnitWorkloadAgentStatusesCall{Call: call}
}

// MockModelStateGetAllUnitWorkloadAgentStatusesCall wrap *gomock.Call
type MockModelStateGetAllUnitWorkloadAgentStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllUnitWorkloadAgentStatusesCall) Return(arg0 status.UnitWorkloadAgentStatuses, arg1 error) *MockModelStateGetAllUnitWorkloadAgentStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllUnitWorkloadAgentStatusesCall) Do(f func(context.Context) (status.UnitWorkloadAgentStatuses, error)) *MockModelStateGetAllUnitWorkloadAgentStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllUnitWorkloadAgentStatusesCall) DoAndReturn(f func(context.Context) (status.UnitWorkloadAgentStatuses, error)) *MockModelStateGetAllUnitWorkloadAgentStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationAndUnitModelStatuses mocks base method.
func (m *MockModelState) GetApplicationAndUnitModelStatuses(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitModelStatuses", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndUnitModelStatuses indicates an expected call of GetApplicationAndUnitModelStatuses.
func (mr *MockModelStateMockRecorder) GetApplicationAndUnitModelStatuses(ctx any) *MockModelStateGetApplicationAndUnitModelStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitModelStatuses", reflect.TypeOf((*MockModelState)(nil).GetApplicationAndUnitModelStatuses), ctx)
	return &MockModelStateGetApplicationAndUnitModelStatusesCall{Call: call}
}

// MockModelStateGetApplicationAndUnitModelStatusesCall wrap *gomock.Call
type MockModelStateGetApplicationAndUnitModelStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationAndUnitModelStatusesCall) Return(arg0 map[string]int, arg1 error) *MockModelStateGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationAndUnitModelStatusesCall) Do(f func(context.Context) (map[string]int, error)) *MockModelStateGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationAndUnitModelStatusesCall) DoAndReturn(f func(context.Context) (map[string]int, error)) *MockModelStateGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationAndUnitStatuses mocks base method.
func (m *MockModelState) GetApplicationAndUnitStatuses(ctx context.Context) (map[string]status.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitStatuses", ctx)
	ret0, _ := ret[0].(map[string]status.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndUnitStatuses indicates an expected call of GetApplicationAndUnitStatuses.
func (mr *MockModelStateMockRecorder) GetApplicationAndUnitStatuses(ctx any) *MockModelStateGetApplicationAndUnitStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitStatuses", reflect.TypeOf((*MockModelState)(nil).GetApplicationAndUnitStatuses), ctx)
	return &MockModelStateGetApplicationAndUnitStatusesCall{Call: call}
}

// MockModelStateGetApplicationAndUnitStatusesCall wrap *gomock.Call
type MockModelStateGetApplicationAndUnitStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationAndUnitStatusesCall) Return(arg0 map[string]status.Application, arg1 error) *MockModelStateGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationAndUnitStatusesCall) Do(f func(context.Context) (map[string]status.Application, error)) *MockModelStateGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationAndUnitStatusesCall) DoAndReturn(f func(context.Context) (map[string]status.Application, error)) *MockModelStateGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDAndNameByUnitName mocks base method.
func (m *MockModelState) GetApplicationIDAndNameByUnitName(ctx context.Context, name unit.Name) (application.ID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDAndNameByUnitName", ctx, name)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationIDAndNameByUnitName indicates an expected call of GetApplicationIDAndNameByUnitName.
func (mr *MockModelStateMockRecorder) GetApplicationIDAndNameByUnitName(ctx, name any) *MockModelStateGetApplicationIDAndNameByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDAndNameByUnitName", reflect.TypeOf((*MockModelState)(nil).GetApplicationIDAndNameByUnitName), ctx, name)
	return &MockModelStateGetApplicationIDAndNameByUnitNameCall{Call: call}
}

// MockModelStateGetApplicationIDAndNameByUnitNameCall wrap *gomock.Call
type MockModelStateGetApplicationIDAndNameByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationIDAndNameByUnitNameCall) Return(arg0 application.ID, arg1 string, arg2 error) *MockModelStateGetApplicationIDAndNameByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationIDAndNameByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, string, error)) *MockModelStateGetApplicationIDAndNameByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationIDAndNameByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, string, error)) *MockModelStateGetApplicationIDAndNameByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByName mocks base method.
func (m *MockModelState) GetApplicationIDByName(ctx context.Context, name string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", ctx, name)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockModelStateMockRecorder) GetApplicationIDByName(ctx, name any) *MockModelStateGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockModelState)(nil).GetApplicationIDByName), ctx, name)
	return &MockModelStateGetApplicationIDByNameCall{Call: call}
}

// MockModelStateGetApplicationIDByNameCall wrap *gomock.Call
type MockModelStateGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockModelStateGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockModelStateGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockModelStateGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationStatus mocks base method.
func (m *MockModelState) GetApplicationStatus(ctx context.Context, appID application.ID) (status.StatusInfo[status.WorkloadStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStatus", ctx, appID)
	ret0, _ := ret[0].(status.StatusInfo[status.WorkloadStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationStatus indicates an expected call of GetApplicationStatus.
func (mr *MockModelStateMockRecorder) GetApplicationStatus(ctx, appID any) *MockModelStateGetApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStatus", reflect.TypeOf((*MockModelState)(nil).GetApplicationStatus), ctx, appID)
	return &MockModelStateGetApplicationStatusCall{Call: call}
}

// MockModelStateGetApplicationStatusCall wrap *gomock.Call
type MockModelStateGetApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetApplicationStatusCall) Return(arg0 status.StatusInfo[status.WorkloadStatusType], arg1 error) *MockModelStateGetApplicationStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetApplicationStatusCall) Do(f func(context.Context, application.ID) (status.StatusInfo[status.WorkloadStatusType], error)) *MockModelStateGetApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetApplicationStatusCall) DoAndReturn(f func(context.Context, application.ID) (status.StatusInfo[status.WorkloadStatusType], error)) *MockModelStateGetApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemUUIDByID mocks base method.
func (m *MockModelState) GetFilesystemUUIDByID(ctx context.Context, id string) (storage.FilesystemUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemUUIDByID", ctx, id)
	ret0, _ := ret[0].(storage.FilesystemUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemUUIDByID indicates an expected call of GetFilesystemUUIDByID.
func (mr *MockModelStateMockRecorder) GetFilesystemUUIDByID(ctx, id any) *MockModelStateGetFilesystemUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemUUIDByID", reflect.TypeOf((*MockModelState)(nil).GetFilesystemUUIDByID), ctx, id)
	return &MockModelStateGetFilesystemUUIDByIDCall{Call: call}
}

// MockModelStateGetFilesystemUUIDByIDCall wrap *gomock.Call
type MockModelStateGetFilesystemUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetFilesystemUUIDByIDCall) Return(arg0 storage.FilesystemUUID, arg1 error) *MockModelStateGetFilesystemUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetFilesystemUUIDByIDCall) Do(f func(context.Context, string) (storage.FilesystemUUID, error)) *MockModelStateGetFilesystemUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetFilesystemUUIDByIDCall) DoAndReturn(f func(context.Context, string) (storage.FilesystemUUID, error)) *MockModelStateGetFilesystemUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceStatus mocks base method.
func (m *MockModelState) GetInstanceStatus(ctx context.Context, machineName string) (status.StatusInfo[status.InstanceStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceStatus", ctx, machineName)
	ret0, _ := ret[0].(status.StatusInfo[status.InstanceStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceStatus indicates an expected call of GetInstanceStatus.
func (mr *MockModelStateMockRecorder) GetInstanceStatus(ctx, machineName any) *MockModelStateGetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceStatus", reflect.TypeOf((*MockModelState)(nil).GetInstanceStatus), ctx, machineName)
	return &MockModelStateGetInstanceStatusCall{Call: call}
}

// MockModelStateGetInstanceStatusCall wrap *gomock.Call
type MockModelStateGetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetInstanceStatusCall) Return(arg0 status.StatusInfo[status.InstanceStatusType], arg1 error) *MockModelStateGetInstanceStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetInstanceStatusCall) Do(f func(context.Context, string) (status.StatusInfo[status.InstanceStatusType], error)) *MockModelStateGetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetInstanceStatusCall) DoAndReturn(f func(context.Context, string) (status.StatusInfo[status.InstanceStatusType], error)) *MockModelStateGetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineStatus mocks base method.
func (m *MockModelState) GetMachineStatus(ctx context.Context, machineName string) (status.StatusInfo[status.MachineStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineStatus", ctx, machineName)
	ret0, _ := ret[0].(status.StatusInfo[status.MachineStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineStatus indicates an expected call of GetMachineStatus.
func (mr *MockModelStateMockRecorder) GetMachineStatus(ctx, machineName any) *MockModelStateGetMachineStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineStatus", reflect.TypeOf((*MockModelState)(nil).GetMachineStatus), ctx, machineName)
	return &MockModelStateGetMachineStatusCall{Call: call}
}

// MockModelStateGetMachineStatusCall wrap *gomock.Call
type MockModelStateGetMachineStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetMachineStatusCall) Return(arg0 status.StatusInfo[status.MachineStatusType], arg1 error) *MockModelStateGetMachineStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetMachineStatusCall) Do(f func(context.Context, string) (status.StatusInfo[status.MachineStatusType], error)) *MockModelStateGetMachineStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetMachineStatusCall) DoAndReturn(f func(context.Context, string) (status.StatusInfo[status.MachineStatusType], error)) *MockModelStateGetMachineStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelStatusInfo mocks base method.
func (m *MockModelState) GetModelStatusInfo(ctx context.Context) (status.ModelStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatusInfo", ctx)
	ret0, _ := ret[0].(status.ModelStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatusInfo indicates an expected call of GetModelStatusInfo.
func (mr *MockModelStateMockRecorder) GetModelStatusInfo(ctx any) *MockModelStateGetModelStatusInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatusInfo", reflect.TypeOf((*MockModelState)(nil).GetModelStatusInfo), ctx)
	return &MockModelStateGetModelStatusInfoCall{Call: call}
}

// MockModelStateGetModelStatusInfoCall wrap *gomock.Call
type MockModelStateGetModelStatusInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelStatusInfoCall) Return(arg0 status.ModelStatusInfo, arg1 error) *MockModelStateGetModelStatusInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelStatusInfoCall) Do(f func(context.Context) (status.ModelStatusInfo, error)) *MockModelStateGetModelStatusInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelStatusInfoCall) DoAndReturn(f func(context.Context) (status.ModelStatusInfo, error)) *MockModelStateGetModelStatusInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByID mocks base method.
func (m *MockModelState) GetRelationUUIDByID(ctx context.Context, id int) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByID", ctx, id)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByID indicates an expected call of GetRelationUUIDByID.
func (mr *MockModelStateMockRecorder) GetRelationUUIDByID(ctx, id any) *MockModelStateGetRelationUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByID", reflect.TypeOf((*MockModelState)(nil).GetRelationUUIDByID), ctx, id)
	return &MockModelStateGetRelationUUIDByIDCall{Call: call}
}

// MockModelStateGetRelationUUIDByIDCall wrap *gomock.Call
type MockModelStateGetRelationUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetRelationUUIDByIDCall) Return(arg0 relation.UUID, arg1 error) *MockModelStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetRelationUUIDByIDCall) Do(f func(context.Context, int) (relation.UUID, error)) *MockModelStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetRelationUUIDByIDCall) DoAndReturn(f func(context.Context, int) (relation.UUID, error)) *MockModelStateGetRelationUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitAgentStatus mocks base method.
func (m *MockModelState) GetUnitAgentStatus(arg0 context.Context, arg1 unit.UUID) (status.UnitStatusInfo[status.UnitAgentStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitAgentStatus", arg0, arg1)
	ret0, _ := ret[0].(status.UnitStatusInfo[status.UnitAgentStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitAgentStatus indicates an expected call of GetUnitAgentStatus.
func (mr *MockModelStateMockRecorder) GetUnitAgentStatus(arg0, arg1 any) *MockModelStateGetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitAgentStatus", reflect.TypeOf((*MockModelState)(nil).GetUnitAgentStatus), arg0, arg1)
	return &MockModelStateGetUnitAgentStatusCall{Call: call}
}

// MockModelStateGetUnitAgentStatusCall wrap *gomock.Call
type MockModelStateGetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitAgentStatusCall) Return(arg0 status.UnitStatusInfo[status.UnitAgentStatusType], arg1 error) *MockModelStateGetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitAgentStatusCall) Do(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.UnitAgentStatusType], error)) *MockModelStateGetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.UnitAgentStatusType], error)) *MockModelStateGetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitAgentStatusesForApplication mocks base method.
func (m *MockModelState) GetUnitAgentStatusesForApplication(arg0 context.Context, arg1 application.ID) (status.UnitAgentStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitAgentStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(status.UnitAgentStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitAgentStatusesForApplication indicates an expected call of GetUnitAgentStatusesForApplication.
func (mr *MockModelStateMockRecorder) GetUnitAgentStatusesForApplication(arg0, arg1 any) *MockModelStateGetUnitAgentStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitAgentStatusesForApplication", reflect.TypeOf((*MockModelState)(nil).GetUnitAgentStatusesForApplication), arg0, arg1)
	return &MockModelStateGetUnitAgentStatusesForApplicationCall{Call: call}
}

// MockModelStateGetUnitAgentStatusesForApplicationCall wrap *gomock.Call
type MockModelStateGetUnitAgentStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitAgentStatusesForApplicationCall) Return(arg0 status.UnitAgentStatuses, arg1 error) *MockModelStateGetUnitAgentStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitAgentStatusesForApplicationCall) Do(f func(context.Context, application.ID) (status.UnitAgentStatuses, error)) *MockModelStateGetUnitAgentStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitAgentStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) (status.UnitAgentStatuses, error)) *MockModelStateGetUnitAgentStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitK8sPodStatus mocks base method.
func (m *MockModelState) GetUnitK8sPodStatus(arg0 context.Context, arg1 unit.UUID) (status.StatusInfo[status.K8sPodStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitK8sPodStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo[status.K8sPodStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitK8sPodStatus indicates an expected call of GetUnitK8sPodStatus.
func (mr *MockModelStateMockRecorder) GetUnitK8sPodStatus(arg0, arg1 any) *MockModelStateGetUnitK8sPodStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitK8sPodStatus", reflect.TypeOf((*MockModelState)(nil).GetUnitK8sPodStatus), arg0, arg1)
	return &MockModelStateGetUnitK8sPodStatusCall{Call: call}
}

// MockModelStateGetUnitK8sPodStatusCall wrap *gomock.Call
type MockModelStateGetUnitK8sPodStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitK8sPodStatusCall) Return(arg0 status.StatusInfo[status.K8sPodStatusType], arg1 error) *MockModelStateGetUnitK8sPodStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitK8sPodStatusCall) Do(f func(context.Context, unit.UUID) (status.StatusInfo[status.K8sPodStatusType], error)) *MockModelStateGetUnitK8sPodStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitK8sPodStatusCall) DoAndReturn(f func(context.Context, unit.UUID) (status.StatusInfo[status.K8sPodStatusType], error)) *MockModelStateGetUnitK8sPodStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDByName mocks base method.
func (m *MockModelState) GetUnitUUIDByName(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDByName indicates an expected call of GetUnitUUIDByName.
func (mr *MockModelStateMockRecorder) GetUnitUUIDByName(arg0, arg1 any) *MockModelStateGetUnitUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDByName", reflect.TypeOf((*MockModelState)(nil).GetUnitUUIDByName), arg0, arg1)
	return &MockModelStateGetUnitUUIDByNameCall{Call: call}
}

// MockModelStateGetUnitUUIDByNameCall wrap *gomock.Call
type MockModelStateGetUnitUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitUUIDByNameCall) Return(arg0 unit.UUID, arg1 error) *MockModelStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitUUIDByNameCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockModelStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitUUIDByNameCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockModelStateGetUnitUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatus mocks base method.
func (m *MockModelState) GetUnitWorkloadStatus(arg0 context.Context, arg1 unit.UUID) (status.UnitStatusInfo[status.WorkloadStatusType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatus", arg0, arg1)
	ret0, _ := ret[0].(status.UnitStatusInfo[status.WorkloadStatusType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatus indicates an expected call of GetUnitWorkloadStatus.
func (mr *MockModelStateMockRecorder) GetUnitWorkloadStatus(arg0, arg1 any) *MockModelStateGetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatus", reflect.TypeOf((*MockModelState)(nil).GetUnitWorkloadStatus), arg0, arg1)
	return &MockModelStateGetUnitWorkloadStatusCall{Call: call}
}

// MockModelStateGetUnitWorkloadStatusCall wrap *gomock.Call
type MockModelStateGetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitWorkloadStatusCall) Return(arg0 status.UnitStatusInfo[status.WorkloadStatusType], arg1 error) *MockModelStateGetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitWorkloadStatusCall) Do(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.WorkloadStatusType], error)) *MockModelStateGetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.UUID) (status.UnitStatusInfo[status.WorkloadStatusType], error)) *MockModelStateGetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatusesForApplication mocks base method.
func (m *MockModelState) GetUnitWorkloadStatusesForApplication(arg0 context.Context, arg1 application.ID) (status.UnitWorkloadStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(status.UnitWorkloadStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatusesForApplication indicates an expected call of GetUnitWorkloadStatusesForApplication.
func (mr *MockModelStateMockRecorder) GetUnitWorkloadStatusesForApplication(arg0, arg1 any) *MockModelStateGetUnitWorkloadStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatusesForApplication", reflect.TypeOf((*MockModelState)(nil).GetUnitWorkloadStatusesForApplication), arg0, arg1)
	return &MockModelStateGetUnitWorkloadStatusesForApplicationCall{Call: call}
}

// MockModelStateGetUnitWorkloadStatusesForApplicationCall wrap *gomock.Call
type MockModelStateGetUnitWorkloadStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetUnitWorkloadStatusesForApplicationCall) Return(arg0 status.UnitWorkloadStatuses, arg1 error) *MockModelStateGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetUnitWorkloadStatusesForApplicationCall) Do(f func(context.Context, application.ID) (status.UnitWorkloadStatuses, error)) *MockModelStateGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetUnitWorkloadStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) (status.UnitWorkloadStatuses, error)) *MockModelStateGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeUUIDByID mocks base method.
func (m *MockModelState) GetVolumeUUIDByID(ctx context.Context, id string) (storage.VolumeUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeUUIDByID", ctx, id)
	ret0, _ := ret[0].(storage.VolumeUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeUUIDByID indicates an expected call of GetVolumeUUIDByID.
func (mr *MockModelStateMockRecorder) GetVolumeUUIDByID(ctx, id any) *MockModelStateGetVolumeUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeUUIDByID", reflect.TypeOf((*MockModelState)(nil).GetVolumeUUIDByID), ctx, id)
	return &MockModelStateGetVolumeUUIDByIDCall{Call: call}
}

// MockModelStateGetVolumeUUIDByIDCall wrap *gomock.Call
type MockModelStateGetVolumeUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetVolumeUUIDByIDCall) Return(arg0 storage.VolumeUUID, arg1 error) *MockModelStateGetVolumeUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetVolumeUUIDByIDCall) Do(f func(context.Context, string) (storage.VolumeUUID, error)) *MockModelStateGetVolumeUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetVolumeUUIDByIDCall) DoAndReturn(f func(context.Context, string) (storage.VolumeUUID, error)) *MockModelStateGetVolumeUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportRelationStatus mocks base method.
func (m *MockModelState) ImportRelationStatus(ctx context.Context, relationUUID relation.UUID, sts status.StatusInfo[status.RelationStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRelationStatus", ctx, relationUUID, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportRelationStatus indicates an expected call of ImportRelationStatus.
func (mr *MockModelStateMockRecorder) ImportRelationStatus(ctx, relationUUID, sts any) *MockModelStateImportRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRelationStatus", reflect.TypeOf((*MockModelState)(nil).ImportRelationStatus), ctx, relationUUID, sts)
	return &MockModelStateImportRelationStatusCall{Call: call}
}

// MockModelStateImportRelationStatusCall wrap *gomock.Call
type MockModelStateImportRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateImportRelationStatusCall) Return(arg0 error) *MockModelStateImportRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateImportRelationStatusCall) Do(f func(context.Context, relation.UUID, status.StatusInfo[status.RelationStatusType]) error) *MockModelStateImportRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateImportRelationStatusCall) DoAndReturn(f func(context.Context, relation.UUID, status.StatusInfo[status.RelationStatusType]) error) *MockModelStateImportRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationStatus mocks base method.
func (m *MockModelState) SetApplicationStatus(ctx context.Context, applicationID application.ID, status status.StatusInfo[status.WorkloadStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationStatus", ctx, applicationID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationStatus indicates an expected call of SetApplicationStatus.
func (mr *MockModelStateMockRecorder) SetApplicationStatus(ctx, applicationID, status any) *MockModelStateSetApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationStatus", reflect.TypeOf((*MockModelState)(nil).SetApplicationStatus), ctx, applicationID, status)
	return &MockModelStateSetApplicationStatusCall{Call: call}
}

// MockModelStateSetApplicationStatusCall wrap *gomock.Call
type MockModelStateSetApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetApplicationStatusCall) Return(arg0 error) *MockModelStateSetApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetApplicationStatusCall) Do(f func(context.Context, application.ID, status.StatusInfo[status.WorkloadStatusType]) error) *MockModelStateSetApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetApplicationStatusCall) DoAndReturn(f func(context.Context, application.ID, status.StatusInfo[status.WorkloadStatusType]) error) *MockModelStateSetApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemStatus mocks base method.
func (m *MockModelState) SetFilesystemStatus(ctx context.Context, filesystemUUID storage.FilesystemUUID, sts status.StatusInfo[status.StorageFilesystemStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemStatus", ctx, filesystemUUID, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemStatus indicates an expected call of SetFilesystemStatus.
func (mr *MockModelStateMockRecorder) SetFilesystemStatus(ctx, filesystemUUID, sts any) *MockModelStateSetFilesystemStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemStatus", reflect.TypeOf((*MockModelState)(nil).SetFilesystemStatus), ctx, filesystemUUID, sts)
	return &MockModelStateSetFilesystemStatusCall{Call: call}
}

// MockModelStateSetFilesystemStatusCall wrap *gomock.Call
type MockModelStateSetFilesystemStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetFilesystemStatusCall) Return(arg0 error) *MockModelStateSetFilesystemStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetFilesystemStatusCall) Do(f func(context.Context, storage.FilesystemUUID, status.StatusInfo[status.StorageFilesystemStatusType]) error) *MockModelStateSetFilesystemStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetFilesystemStatusCall) DoAndReturn(f func(context.Context, storage.FilesystemUUID, status.StatusInfo[status.StorageFilesystemStatusType]) error) *MockModelStateSetFilesystemStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetInstanceStatus mocks base method.
func (m *MockModelState) SetInstanceStatus(ctx context.Context, machienName string, status status.StatusInfo[status.InstanceStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceStatus", ctx, machienName, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceStatus indicates an expected call of SetInstanceStatus.
func (mr *MockModelStateMockRecorder) SetInstanceStatus(ctx, machienName, status any) *MockModelStateSetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceStatus", reflect.TypeOf((*MockModelState)(nil).SetInstanceStatus), ctx, machienName, status)
	return &MockModelStateSetInstanceStatusCall{Call: call}
}

// MockModelStateSetInstanceStatusCall wrap *gomock.Call
type MockModelStateSetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetInstanceStatusCall) Return(arg0 error) *MockModelStateSetInstanceStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetInstanceStatusCall) Do(f func(context.Context, string, status.StatusInfo[status.InstanceStatusType]) error) *MockModelStateSetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetInstanceStatusCall) DoAndReturn(f func(context.Context, string, status.StatusInfo[status.InstanceStatusType]) error) *MockModelStateSetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineStatus mocks base method.
func (m *MockModelState) SetMachineStatus(ctx context.Context, machineName string, status status.StatusInfo[status.MachineStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineStatus", ctx, machineName, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineStatus indicates an expected call of SetMachineStatus.
func (mr *MockModelStateMockRecorder) SetMachineStatus(ctx, machineName, status any) *MockModelStateSetMachineStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineStatus", reflect.TypeOf((*MockModelState)(nil).SetMachineStatus), ctx, machineName, status)
	return &MockModelStateSetMachineStatusCall{Call: call}
}

// MockModelStateSetMachineStatusCall wrap *gomock.Call
type MockModelStateSetMachineStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetMachineStatusCall) Return(arg0 error) *MockModelStateSetMachineStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetMachineStatusCall) Do(f func(context.Context, string, status.StatusInfo[status.MachineStatusType]) error) *MockModelStateSetMachineStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetMachineStatusCall) DoAndReturn(f func(context.Context, string, status.StatusInfo[status.MachineStatusType]) error) *MockModelStateSetMachineStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationStatus mocks base method.
func (m *MockModelState) SetRelationStatus(ctx context.Context, relationUUID relation.UUID, sts status.StatusInfo[status.RelationStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationStatus", ctx, relationUUID, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationStatus indicates an expected call of SetRelationStatus.
func (mr *MockModelStateMockRecorder) SetRelationStatus(ctx, relationUUID, sts any) *MockModelStateSetRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationStatus", reflect.TypeOf((*MockModelState)(nil).SetRelationStatus), ctx, relationUUID, sts)
	return &MockModelStateSetRelationStatusCall{Call: call}
}

// MockModelStateSetRelationStatusCall wrap *gomock.Call
type MockModelStateSetRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetRelationStatusCall) Return(arg0 error) *MockModelStateSetRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetRelationStatusCall) Do(f func(context.Context, relation.UUID, status.StatusInfo[status.RelationStatusType]) error) *MockModelStateSetRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetRelationStatusCall) DoAndReturn(f func(context.Context, relation.UUID, status.StatusInfo[status.RelationStatusType]) error) *MockModelStateSetRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitAgentStatus mocks base method.
func (m *MockModelState) SetUnitAgentStatus(arg0 context.Context, arg1 unit.UUID, arg2 status.StatusInfo[status.UnitAgentStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitAgentStatus indicates an expected call of SetUnitAgentStatus.
func (mr *MockModelStateMockRecorder) SetUnitAgentStatus(arg0, arg1, arg2 any) *MockModelStateSetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitAgentStatus", reflect.TypeOf((*MockModelState)(nil).SetUnitAgentStatus), arg0, arg1, arg2)
	return &MockModelStateSetUnitAgentStatusCall{Call: call}
}

// MockModelStateSetUnitAgentStatusCall wrap *gomock.Call
type MockModelStateSetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetUnitAgentStatusCall) Return(arg0 error) *MockModelStateSetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetUnitAgentStatusCall) Do(f func(context.Context, unit.UUID, status.StatusInfo[status.UnitAgentStatusType]) error) *MockModelStateSetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.UUID, status.StatusInfo[status.UnitAgentStatusType]) error) *MockModelStateSetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPresence mocks base method.
func (m *MockModelState) SetUnitPresence(ctx context.Context, name unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPresence", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPresence indicates an expected call of SetUnitPresence.
func (mr *MockModelStateMockRecorder) SetUnitPresence(ctx, name any) *MockModelStateSetUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPresence", reflect.TypeOf((*MockModelState)(nil).SetUnitPresence), ctx, name)
	return &MockModelStateSetUnitPresenceCall{Call: call}
}

// MockModelStateSetUnitPresenceCall wrap *gomock.Call
type MockModelStateSetUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetUnitPresenceCall) Return(arg0 error) *MockModelStateSetUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockModelStateSetUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockModelStateSetUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadStatus mocks base method.
func (m *MockModelState) SetUnitWorkloadStatus(arg0 context.Context, arg1 unit.UUID, arg2 status.StatusInfo[status.WorkloadStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadStatus indicates an expected call of SetUnitWorkloadStatus.
func (mr *MockModelStateMockRecorder) SetUnitWorkloadStatus(arg0, arg1, arg2 any) *MockModelStateSetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadStatus", reflect.TypeOf((*MockModelState)(nil).SetUnitWorkloadStatus), arg0, arg1, arg2)
	return &MockModelStateSetUnitWorkloadStatusCall{Call: call}
}

// MockModelStateSetUnitWorkloadStatusCall wrap *gomock.Call
type MockModelStateSetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetUnitWorkloadStatusCall) Return(arg0 error) *MockModelStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetUnitWorkloadStatusCall) Do(f func(context.Context, unit.UUID, status.StatusInfo[status.WorkloadStatusType]) error) *MockModelStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.UUID, status.StatusInfo[status.WorkloadStatusType]) error) *MockModelStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeStatus mocks base method.
func (m *MockModelState) SetVolumeStatus(ctx context.Context, volumeUUID storage.VolumeUUID, sts status.StatusInfo[status.StorageVolumeStatusType]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeStatus", ctx, volumeUUID, sts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeStatus indicates an expected call of SetVolumeStatus.
func (mr *MockModelStateMockRecorder) SetVolumeStatus(ctx, volumeUUID, sts any) *MockModelStateSetVolumeStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeStatus", reflect.TypeOf((*MockModelState)(nil).SetVolumeStatus), ctx, volumeUUID, sts)
	return &MockModelStateSetVolumeStatusCall{Call: call}
}

// MockModelStateSetVolumeStatusCall wrap *gomock.Call
type MockModelStateSetVolumeStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetVolumeStatusCall) Return(arg0 error) *MockModelStateSetVolumeStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetVolumeStatusCall) Do(f func(context.Context, storage.VolumeUUID, status.StatusInfo[status.StorageVolumeStatusType]) error) *MockModelStateSetVolumeStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetVolumeStatusCall) DoAndReturn(f func(context.Context, storage.VolumeUUID, status.StatusInfo[status.StorageVolumeStatusType]) error) *MockModelStateSetVolumeStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetModelStatusContext mocks base method.
func (m *MockControllerState) GetModelStatusContext(arg0 context.Context) (status.ModelStatusContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatusContext", arg0)
	ret0, _ := ret[0].(status.ModelStatusContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatusContext indicates an expected call of GetModelStatusContext.
func (mr *MockControllerStateMockRecorder) GetModelStatusContext(arg0 any) *MockControllerStateGetModelStatusContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatusContext", reflect.TypeOf((*MockControllerState)(nil).GetModelStatusContext), arg0)
	return &MockControllerStateGetModelStatusContextCall{Call: call}
}

// MockControllerStateGetModelStatusContextCall wrap *gomock.Call
type MockControllerStateGetModelStatusContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelStatusContextCall) Return(arg0 status.ModelStatusContext, arg1 error) *MockControllerStateGetModelStatusContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelStatusContextCall) Do(f func(context.Context) (status.ModelStatusContext, error)) *MockControllerStateGetModelStatusContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelStatusContextCall) DoAndReturn(f func(context.Context) (status.ModelStatusContext, error)) *MockControllerStateGetModelStatusContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
