// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/blockdevice/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/blockdevice/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	blockdevice "github.com/juju/juju/core/blockdevice"
	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	blockdevice0 "github.com/juju/juju/domain/blockdevice"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetBlockDevicesForAllMachines mocks base method.
func (m *MockState) GetBlockDevicesForAllMachines(arg0 context.Context) (map[machine.Name][]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevicesForAllMachines", arg0)
	ret0, _ := ret[0].(map[machine.Name][]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDevicesForAllMachines indicates an expected call of GetBlockDevicesForAllMachines.
func (mr *MockStateMockRecorder) GetBlockDevicesForAllMachines(arg0 any) *MockStateGetBlockDevicesForAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevicesForAllMachines", reflect.TypeOf((*MockState)(nil).GetBlockDevicesForAllMachines), arg0)
	return &MockStateGetBlockDevicesForAllMachinesCall{Call: call}
}

// MockStateGetBlockDevicesForAllMachinesCall wrap *gomock.Call
type MockStateGetBlockDevicesForAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetBlockDevicesForAllMachinesCall) Return(arg0 map[machine.Name][]blockdevice.BlockDevice, arg1 error) *MockStateGetBlockDevicesForAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetBlockDevicesForAllMachinesCall) Do(f func(context.Context) (map[machine.Name][]blockdevice.BlockDevice, error)) *MockStateGetBlockDevicesForAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetBlockDevicesForAllMachinesCall) DoAndReturn(f func(context.Context) (map[machine.Name][]blockdevice.BlockDevice, error)) *MockStateGetBlockDevicesForAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockDevicesForMachine mocks base method.
func (m *MockState) GetBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID) (map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevicesForMachine", arg0, arg1)
	ret0, _ := ret[0].(map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDevicesForMachine indicates an expected call of GetBlockDevicesForMachine.
func (mr *MockStateMockRecorder) GetBlockDevicesForMachine(arg0, arg1 any) *MockStateGetBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevicesForMachine", reflect.TypeOf((*MockState)(nil).GetBlockDevicesForMachine), arg0, arg1)
	return &MockStateGetBlockDevicesForMachineCall{Call: call}
}

// MockStateGetBlockDevicesForMachineCall wrap *gomock.Call
type MockStateGetBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetBlockDevicesForMachineCall) Return(arg0 map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, arg1 error) *MockStateGetBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID) (map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, error)) *MockStateGetBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID) (map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, error)) *MockStateGetBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUIDByName mocks base method.
func (m *MockState) GetMachineUUIDByName(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUIDByName indicates an expected call of GetMachineUUIDByName.
func (mr *MockStateMockRecorder) GetMachineUUIDByName(arg0, arg1 any) *MockStateGetMachineUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUIDByName", reflect.TypeOf((*MockState)(nil).GetMachineUUIDByName), arg0, arg1)
	return &MockStateGetMachineUUIDByNameCall{Call: call}
}

// MockStateGetMachineUUIDByNameCall wrap *gomock.Call
type MockStateGetMachineUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineUUIDByNameCall) Return(arg0 machine.UUID, arg1 error) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineUUIDByNameCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineUUIDByNameCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchBlockDevices mocks base method.
func (m *MockState) NamespaceForWatchBlockDevices() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchBlockDevices")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchBlockDevices indicates an expected call of NamespaceForWatchBlockDevices.
func (mr *MockStateMockRecorder) NamespaceForWatchBlockDevices() *MockStateNamespaceForWatchBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchBlockDevices", reflect.TypeOf((*MockState)(nil).NamespaceForWatchBlockDevices))
	return &MockStateNamespaceForWatchBlockDevicesCall{Call: call}
}

// MockStateNamespaceForWatchBlockDevicesCall wrap *gomock.Call
type MockStateNamespaceForWatchBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchBlockDevicesCall) Return(arg0 string) *MockStateNamespaceForWatchBlockDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchBlockDevicesCall) Do(f func() string) *MockStateNamespaceForWatchBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchBlockDevicesCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateBlockDevicesForMachine mocks base method.
func (m *MockState) UpdateBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID, arg2, arg3 map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, arg4 []blockdevice0.BlockDeviceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockDevicesForMachine", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockDevicesForMachine indicates an expected call of UpdateBlockDevicesForMachine.
func (mr *MockStateMockRecorder) UpdateBlockDevicesForMachine(arg0, arg1, arg2, arg3, arg4 any) *MockStateUpdateBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockDevicesForMachine", reflect.TypeOf((*MockState)(nil).UpdateBlockDevicesForMachine), arg0, arg1, arg2, arg3, arg4)
	return &MockStateUpdateBlockDevicesForMachineCall{Call: call}
}

// MockStateUpdateBlockDevicesForMachineCall wrap *gomock.Call
type MockStateUpdateBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateBlockDevicesForMachineCall) Return(arg0 error) *MockStateUpdateBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID, map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, []blockdevice0.BlockDeviceUUID) error) *MockStateUpdateBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID, map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, map[blockdevice0.BlockDeviceUUID]blockdevice.BlockDevice, []blockdevice0.BlockDeviceUUID) error) *MockStateUpdateBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 context.Context, arg1 string, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
