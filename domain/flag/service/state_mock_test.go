// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/flag/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/flag/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetFlag mocks base method.
func (m *MockState) GetFlag(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlag", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlag indicates an expected call of GetFlag.
func (mr *MockStateMockRecorder) GetFlag(arg0, arg1 any) *MockStateGetFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlag", reflect.TypeOf((*MockState)(nil).GetFlag), arg0, arg1)
	return &MockStateGetFlagCall{Call: call}
}

// MockStateGetFlagCall wrap *gomock.Call
type MockStateGetFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFlagCall) Return(arg0 bool, arg1 error) *MockStateGetFlagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFlagCall) Do(f func(context.Context, string) (bool, error)) *MockStateGetFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFlagCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateGetFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFlag mocks base method.
func (m *MockState) SetFlag(arg0 context.Context, arg1 string, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFlag indicates an expected call of SetFlag.
func (mr *MockStateMockRecorder) SetFlag(arg0, arg1, arg2, arg3 any) *MockStateSetFlagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlag", reflect.TypeOf((*MockState)(nil).SetFlag), arg0, arg1, arg2, arg3)
	return &MockStateSetFlagCall{Call: call}
}

// MockStateSetFlagCall wrap *gomock.Call
type MockStateSetFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetFlagCall) Return(arg0 error) *MockStateSetFlagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetFlagCall) Do(f func(context.Context, string, bool, string) error) *MockStateSetFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetFlagCall) DoAndReturn(f func(context.Context, string, bool, string) error) *MockStateSetFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
