// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/blockcommand/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/blockcommand/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	blockcommand "github.com/juju/juju/domain/blockcommand"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetBlockMessage mocks base method.
func (m *MockState) GetBlockMessage(arg0 context.Context, arg1 blockcommand.BlockType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockMessage", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockMessage indicates an expected call of GetBlockMessage.
func (mr *MockStateMockRecorder) GetBlockMessage(arg0, arg1 any) *MockStateGetBlockMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockMessage", reflect.TypeOf((*MockState)(nil).GetBlockMessage), arg0, arg1)
	return &MockStateGetBlockMessageCall{Call: call}
}

// MockStateGetBlockMessageCall wrap *gomock.Call
type MockStateGetBlockMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetBlockMessageCall) Return(arg0 string, arg1 error) *MockStateGetBlockMessageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetBlockMessageCall) Do(f func(context.Context, blockcommand.BlockType) (string, error)) *MockStateGetBlockMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetBlockMessageCall) DoAndReturn(f func(context.Context, blockcommand.BlockType) (string, error)) *MockStateGetBlockMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlocks mocks base method.
func (m *MockState) GetBlocks(arg0 context.Context) ([]blockcommand.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", arg0)
	ret0, _ := ret[0].([]blockcommand.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockStateMockRecorder) GetBlocks(arg0 any) *MockStateGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockState)(nil).GetBlocks), arg0)
	return &MockStateGetBlocksCall{Call: call}
}

// MockStateGetBlocksCall wrap *gomock.Call
type MockStateGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetBlocksCall) Return(arg0 []blockcommand.Block, arg1 error) *MockStateGetBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetBlocksCall) Do(f func(context.Context) ([]blockcommand.Block, error)) *MockStateGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetBlocksCall) DoAndReturn(f func(context.Context) ([]blockcommand.Block, error)) *MockStateGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAllBlocks mocks base method.
func (m *MockState) RemoveAllBlocks(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllBlocks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllBlocks indicates an expected call of RemoveAllBlocks.
func (mr *MockStateMockRecorder) RemoveAllBlocks(arg0 any) *MockStateRemoveAllBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllBlocks", reflect.TypeOf((*MockState)(nil).RemoveAllBlocks), arg0)
	return &MockStateRemoveAllBlocksCall{Call: call}
}

// MockStateRemoveAllBlocksCall wrap *gomock.Call
type MockStateRemoveAllBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveAllBlocksCall) Return(arg0 error) *MockStateRemoveAllBlocksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveAllBlocksCall) Do(f func(context.Context) error) *MockStateRemoveAllBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveAllBlocksCall) DoAndReturn(f func(context.Context) error) *MockStateRemoveAllBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveBlock mocks base method.
func (m *MockState) RemoveBlock(arg0 context.Context, arg1 blockcommand.BlockType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBlock indicates an expected call of RemoveBlock.
func (mr *MockStateMockRecorder) RemoveBlock(arg0, arg1 any) *MockStateRemoveBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBlock", reflect.TypeOf((*MockState)(nil).RemoveBlock), arg0, arg1)
	return &MockStateRemoveBlockCall{Call: call}
}

// MockStateRemoveBlockCall wrap *gomock.Call
type MockStateRemoveBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveBlockCall) Return(arg0 error) *MockStateRemoveBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveBlockCall) Do(f func(context.Context, blockcommand.BlockType) error) *MockStateRemoveBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveBlockCall) DoAndReturn(f func(context.Context, blockcommand.BlockType) error) *MockStateRemoveBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetBlock mocks base method.
func (m *MockState) SetBlock(arg0 context.Context, arg1 blockcommand.BlockType, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBlock indicates an expected call of SetBlock.
func (mr *MockStateMockRecorder) SetBlock(arg0, arg1, arg2 any) *MockStateSetBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlock", reflect.TypeOf((*MockState)(nil).SetBlock), arg0, arg1, arg2)
	return &MockStateSetBlockCall{Call: call}
}

// MockStateSetBlockCall wrap *gomock.Call
type MockStateSetBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetBlockCall) Return(arg0 error) *MockStateSetBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetBlockCall) Do(f func(context.Context, blockcommand.BlockType, string) error) *MockStateSetBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetBlockCall) DoAndReturn(f func(context.Context, blockcommand.BlockType, string) error) *MockStateSetBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
