// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/leadership (interfaces: Token)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination token_mock_test.go github.com/juju/juju/core/leadership Token
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockToken is a mock of Token interface.
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken.
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance.
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockToken) ISGOMOCK() struct{} {
	return struct{}{}
}

// Check mocks base method.
func (m *MockToken) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockTokenMockRecorder) Check() *MockTokenCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockToken)(nil).Check))
	return &MockTokenCheckCall{Call: call}
}

// MockTokenCheckCall wrap *gomock.Call
type MockTokenCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTokenCheckCall) Return(arg0 error) *MockTokenCheckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTokenCheckCall) Do(f func() error) *MockTokenCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTokenCheckCall) DoAndReturn(f func() error) *MockTokenCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
