// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/controllerupgrader/service (interfaces: AgentBinaryFinder,ControllerState,ControllerModelState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/controllerupgrader/service AgentBinaryFinder,ControllerState,ControllerModelState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	semversion "github.com/juju/juju/core/semversion"
	modelagent "github.com/juju/juju/domain/modelagent"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryFinder is a mock of AgentBinaryFinder interface.
type MockAgentBinaryFinder struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryFinderMockRecorder
}

// MockAgentBinaryFinderMockRecorder is the mock recorder for MockAgentBinaryFinder.
type MockAgentBinaryFinderMockRecorder struct {
	mock *MockAgentBinaryFinder
}

// NewMockAgentBinaryFinder creates a new mock instance.
func NewMockAgentBinaryFinder(ctrl *gomock.Controller) *MockAgentBinaryFinder {
	mock := &MockAgentBinaryFinder{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryFinder) EXPECT() *MockAgentBinaryFinderMockRecorder {
	return m.recorder
}

// GetHighestPatchVersionAvailable mocks base method.
func (m *MockAgentBinaryFinder) GetHighestPatchVersionAvailable(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestPatchVersionAvailable", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestPatchVersionAvailable indicates an expected call of GetHighestPatchVersionAvailable.
func (mr *MockAgentBinaryFinderMockRecorder) GetHighestPatchVersionAvailable(arg0 any) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestPatchVersionAvailable", reflect.TypeOf((*MockAgentBinaryFinder)(nil).GetHighestPatchVersionAvailable), arg0)
	return &MockAgentBinaryFinderGetHighestPatchVersionAvailableCall{Call: call}
}

// MockAgentBinaryFinderGetHighestPatchVersionAvailableCall wrap *gomock.Call
type MockAgentBinaryFinderGetHighestPatchVersionAvailableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall) Return(arg0 semversion.Number, arg1 error) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall) Do(f func(context.Context) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHighestPatchVersionAvailableForStream mocks base method.
func (m *MockAgentBinaryFinder) GetHighestPatchVersionAvailableForStream(arg0 context.Context, arg1 modelagent.AgentStream) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestPatchVersionAvailableForStream", arg0, arg1)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestPatchVersionAvailableForStream indicates an expected call of GetHighestPatchVersionAvailableForStream.
func (mr *MockAgentBinaryFinderMockRecorder) GetHighestPatchVersionAvailableForStream(arg0, arg1 any) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestPatchVersionAvailableForStream", reflect.TypeOf((*MockAgentBinaryFinder)(nil).GetHighestPatchVersionAvailableForStream), arg0, arg1)
	return &MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall{Call: call}
}

// MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall wrap *gomock.Call
type MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall) Return(arg0 semversion.Number, arg1 error) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall) Do(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall) DoAndReturn(f func(context.Context, modelagent.AgentStream) (semversion.Number, error)) *MockAgentBinaryFinderGetHighestPatchVersionAvailableForStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasBinariesForVersion mocks base method.
func (m *MockAgentBinaryFinder) HasBinariesForVersion(arg0 context.Context, arg1 semversion.Number) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBinariesForVersion", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBinariesForVersion indicates an expected call of HasBinariesForVersion.
func (mr *MockAgentBinaryFinderMockRecorder) HasBinariesForVersion(arg0, arg1 any) *MockAgentBinaryFinderHasBinariesForVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBinariesForVersion", reflect.TypeOf((*MockAgentBinaryFinder)(nil).HasBinariesForVersion), arg0, arg1)
	return &MockAgentBinaryFinderHasBinariesForVersionCall{Call: call}
}

// MockAgentBinaryFinderHasBinariesForVersionCall wrap *gomock.Call
type MockAgentBinaryFinderHasBinariesForVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderHasBinariesForVersionCall) Return(arg0 bool, arg1 error) *MockAgentBinaryFinderHasBinariesForVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderHasBinariesForVersionCall) Do(f func(context.Context, semversion.Number) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderHasBinariesForVersionCall) DoAndReturn(f func(context.Context, semversion.Number) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasBinariesForVersionAndStream mocks base method.
func (m *MockAgentBinaryFinder) HasBinariesForVersionAndStream(arg0 context.Context, arg1 semversion.Number, arg2 modelagent.AgentStream) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBinariesForVersionAndStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBinariesForVersionAndStream indicates an expected call of HasBinariesForVersionAndStream.
func (mr *MockAgentBinaryFinderMockRecorder) HasBinariesForVersionAndStream(arg0, arg1, arg2 any) *MockAgentBinaryFinderHasBinariesForVersionAndStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBinariesForVersionAndStream", reflect.TypeOf((*MockAgentBinaryFinder)(nil).HasBinariesForVersionAndStream), arg0, arg1, arg2)
	return &MockAgentBinaryFinderHasBinariesForVersionAndStreamCall{Call: call}
}

// MockAgentBinaryFinderHasBinariesForVersionAndStreamCall wrap *gomock.Call
type MockAgentBinaryFinderHasBinariesForVersionAndStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryFinderHasBinariesForVersionAndStreamCall) Return(arg0 bool, arg1 error) *MockAgentBinaryFinderHasBinariesForVersionAndStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryFinderHasBinariesForVersionAndStreamCall) Do(f func(context.Context, semversion.Number, modelagent.AgentStream) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionAndStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryFinderHasBinariesForVersionAndStreamCall) DoAndReturn(f func(context.Context, semversion.Number, modelagent.AgentStream) (bool, error)) *MockAgentBinaryFinderHasBinariesForVersionAndStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetControllerNodeVersions mocks base method.
func (m *MockControllerState) GetControllerNodeVersions(arg0 context.Context) (map[string]semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerNodeVersions", arg0)
	ret0, _ := ret[0].(map[string]semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerNodeVersions indicates an expected call of GetControllerNodeVersions.
func (mr *MockControllerStateMockRecorder) GetControllerNodeVersions(arg0 any) *MockControllerStateGetControllerNodeVersionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerNodeVersions", reflect.TypeOf((*MockControllerState)(nil).GetControllerNodeVersions), arg0)
	return &MockControllerStateGetControllerNodeVersionsCall{Call: call}
}

// MockControllerStateGetControllerNodeVersionsCall wrap *gomock.Call
type MockControllerStateGetControllerNodeVersionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetControllerNodeVersionsCall) Return(arg0 map[string]semversion.Number, arg1 error) *MockControllerStateGetControllerNodeVersionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetControllerNodeVersionsCall) Do(f func(context.Context) (map[string]semversion.Number, error)) *MockControllerStateGetControllerNodeVersionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetControllerNodeVersionsCall) DoAndReturn(f func(context.Context) (map[string]semversion.Number, error)) *MockControllerStateGetControllerNodeVersionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerTargetVersion mocks base method.
func (m *MockControllerState) GetControllerTargetVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerTargetVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerTargetVersion indicates an expected call of GetControllerTargetVersion.
func (mr *MockControllerStateMockRecorder) GetControllerTargetVersion(arg0 any) *MockControllerStateGetControllerTargetVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerTargetVersion", reflect.TypeOf((*MockControllerState)(nil).GetControllerTargetVersion), arg0)
	return &MockControllerStateGetControllerTargetVersionCall{Call: call}
}

// MockControllerStateGetControllerTargetVersionCall wrap *gomock.Call
type MockControllerStateGetControllerTargetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetControllerTargetVersionCall) Return(arg0 semversion.Number, arg1 error) *MockControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetControllerTargetVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetControllerTargetVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerStateGetControllerTargetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetControllerTargetVersion mocks base method.
func (m *MockControllerState) SetControllerTargetVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerTargetVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerTargetVersion indicates an expected call of SetControllerTargetVersion.
func (mr *MockControllerStateMockRecorder) SetControllerTargetVersion(arg0, arg1 any) *MockControllerStateSetControllerTargetVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerTargetVersion", reflect.TypeOf((*MockControllerState)(nil).SetControllerTargetVersion), arg0, arg1)
	return &MockControllerStateSetControllerTargetVersionCall{Call: call}
}

// MockControllerStateSetControllerTargetVersionCall wrap *gomock.Call
type MockControllerStateSetControllerTargetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateSetControllerTargetVersionCall) Return(arg0 error) *MockControllerStateSetControllerTargetVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateSetControllerTargetVersionCall) Do(f func(context.Context, semversion.Number) error) *MockControllerStateSetControllerTargetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateSetControllerTargetVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockControllerStateSetControllerTargetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerModelState is a mock of ControllerModelState interface.
type MockControllerModelState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerModelStateMockRecorder
}

// MockControllerModelStateMockRecorder is the mock recorder for MockControllerModelState.
type MockControllerModelStateMockRecorder struct {
	mock *MockControllerModelState
}

// NewMockControllerModelState creates a new mock instance.
func NewMockControllerModelState(ctrl *gomock.Controller) *MockControllerModelState {
	mock := &MockControllerModelState{ctrl: ctrl}
	mock.recorder = &MockControllerModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerModelState) EXPECT() *MockControllerModelStateMockRecorder {
	return m.recorder
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockControllerModelState) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockControllerModelStateMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockControllerModelStateGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockControllerModelState)(nil).GetModelTargetAgentVersion), arg0)
	return &MockControllerModelStateGetModelTargetAgentVersionCall{Call: call}
}

// MockControllerModelStateGetModelTargetAgentVersionCall wrap *gomock.Call
type MockControllerModelStateGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelStateGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockControllerModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelStateGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockControllerModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelStateGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockControllerModelStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelTargetAgentVersion mocks base method.
func (m *MockControllerModelState) SetModelTargetAgentVersion(arg0 context.Context, arg1, arg2 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelTargetAgentVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelTargetAgentVersion indicates an expected call of SetModelTargetAgentVersion.
func (mr *MockControllerModelStateMockRecorder) SetModelTargetAgentVersion(arg0, arg1, arg2 any) *MockControllerModelStateSetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelTargetAgentVersion", reflect.TypeOf((*MockControllerModelState)(nil).SetModelTargetAgentVersion), arg0, arg1, arg2)
	return &MockControllerModelStateSetModelTargetAgentVersionCall{Call: call}
}

// MockControllerModelStateSetModelTargetAgentVersionCall wrap *gomock.Call
type MockControllerModelStateSetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelStateSetModelTargetAgentVersionCall) Return(arg0 error) *MockControllerModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelStateSetModelTargetAgentVersionCall) Do(f func(context.Context, semversion.Number, semversion.Number) error) *MockControllerModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelStateSetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context, semversion.Number, semversion.Number) error) *MockControllerModelStateSetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelTargetAgentVersionAndStream mocks base method.
func (m *MockControllerModelState) SetModelTargetAgentVersionAndStream(arg0 context.Context, arg1, arg2 semversion.Number, arg3 modelagent.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelTargetAgentVersionAndStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelTargetAgentVersionAndStream indicates an expected call of SetModelTargetAgentVersionAndStream.
func (mr *MockControllerModelStateMockRecorder) SetModelTargetAgentVersionAndStream(arg0, arg1, arg2, arg3 any) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelTargetAgentVersionAndStream", reflect.TypeOf((*MockControllerModelState)(nil).SetModelTargetAgentVersionAndStream), arg0, arg1, arg2, arg3)
	return &MockControllerModelStateSetModelTargetAgentVersionAndStreamCall{Call: call}
}

// MockControllerModelStateSetModelTargetAgentVersionAndStreamCall wrap *gomock.Call
type MockControllerModelStateSetModelTargetAgentVersionAndStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall) Return(arg0 error) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall) Do(f func(context.Context, semversion.Number, semversion.Number, modelagent.AgentStream) error) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall) DoAndReturn(f func(context.Context, semversion.Number, semversion.Number, modelagent.AgentStream) error) *MockControllerModelStateSetModelTargetAgentVersionAndStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
