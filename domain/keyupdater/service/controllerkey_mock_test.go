// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/keyupdater/service (interfaces: ControllerKeyState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination controllerkey_mock_test.go github.com/juju/juju/domain/keyupdater/service ControllerKeyState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockControllerKeyState is a mock of ControllerKeyState interface.
type MockControllerKeyState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerKeyStateMockRecorder
}

// MockControllerKeyStateMockRecorder is the mock recorder for MockControllerKeyState.
type MockControllerKeyStateMockRecorder struct {
	mock *MockControllerKeyState
}

// NewMockControllerKeyState creates a new mock instance.
func NewMockControllerKeyState(ctrl *gomock.Controller) *MockControllerKeyState {
	mock := &MockControllerKeyState{ctrl: ctrl}
	mock.recorder = &MockControllerKeyStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerKeyState) EXPECT() *MockControllerKeyStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockControllerKeyState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetControllerConfigKeys mocks base method.
func (m *MockControllerKeyState) GetControllerConfigKeys(arg0 context.Context, arg1 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerConfigKeys", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerConfigKeys indicates an expected call of GetControllerConfigKeys.
func (mr *MockControllerKeyStateMockRecorder) GetControllerConfigKeys(arg0, arg1 any) *MockControllerKeyStateGetControllerConfigKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerConfigKeys", reflect.TypeOf((*MockControllerKeyState)(nil).GetControllerConfigKeys), arg0, arg1)
	return &MockControllerKeyStateGetControllerConfigKeysCall{Call: call}
}

// MockControllerKeyStateGetControllerConfigKeysCall wrap *gomock.Call
type MockControllerKeyStateGetControllerConfigKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerKeyStateGetControllerConfigKeysCall) Return(arg0 map[string]string, arg1 error) *MockControllerKeyStateGetControllerConfigKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerKeyStateGetControllerConfigKeysCall) Do(f func(context.Context, []string) (map[string]string, error)) *MockControllerKeyStateGetControllerConfigKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerKeyStateGetControllerConfigKeysCall) DoAndReturn(f func(context.Context, []string) (map[string]string, error)) *MockControllerKeyStateGetControllerConfigKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
