// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/keyupdater/service (interfaces: ControllerKeyProvider,State,ControllerState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/keyupdater/service ControllerKeyProvider,State,ControllerState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerKeyProvider is a mock of ControllerKeyProvider interface.
type MockControllerKeyProvider struct {
	ctrl     *gomock.Controller
	recorder *MockControllerKeyProviderMockRecorder
}

// MockControllerKeyProviderMockRecorder is the mock recorder for MockControllerKeyProvider.
type MockControllerKeyProviderMockRecorder struct {
	mock *MockControllerKeyProvider
}

// NewMockControllerKeyProvider creates a new mock instance.
func NewMockControllerKeyProvider(ctrl *gomock.Controller) *MockControllerKeyProvider {
	mock := &MockControllerKeyProvider{ctrl: ctrl}
	mock.recorder = &MockControllerKeyProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerKeyProvider) EXPECT() *MockControllerKeyProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockControllerKeyProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// ControllerAuthorisedKeys mocks base method.
func (m *MockControllerKeyProvider) ControllerAuthorisedKeys(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAuthorisedKeys", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerAuthorisedKeys indicates an expected call of ControllerAuthorisedKeys.
func (mr *MockControllerKeyProviderMockRecorder) ControllerAuthorisedKeys(arg0 any) *MockControllerKeyProviderControllerAuthorisedKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAuthorisedKeys", reflect.TypeOf((*MockControllerKeyProvider)(nil).ControllerAuthorisedKeys), arg0)
	return &MockControllerKeyProviderControllerAuthorisedKeysCall{Call: call}
}

// MockControllerKeyProviderControllerAuthorisedKeysCall wrap *gomock.Call
type MockControllerKeyProviderControllerAuthorisedKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerKeyProviderControllerAuthorisedKeysCall) Return(arg0 []string, arg1 error) *MockControllerKeyProviderControllerAuthorisedKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerKeyProviderControllerAuthorisedKeysCall) Do(f func(context.Context) ([]string, error)) *MockControllerKeyProviderControllerAuthorisedKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerKeyProviderControllerAuthorisedKeysCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerKeyProviderControllerAuthorisedKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// CheckMachineExists mocks base method.
func (m *MockState) CheckMachineExists(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMachineExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckMachineExists indicates an expected call of CheckMachineExists.
func (mr *MockStateMockRecorder) CheckMachineExists(arg0, arg1 any) *MockStateCheckMachineExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMachineExists", reflect.TypeOf((*MockState)(nil).CheckMachineExists), arg0, arg1)
	return &MockStateCheckMachineExistsCall{Call: call}
}

// MockStateCheckMachineExistsCall wrap *gomock.Call
type MockStateCheckMachineExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckMachineExistsCall) Return(arg0 error) *MockStateCheckMachineExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckMachineExistsCall) Do(f func(context.Context, machine.Name) error) *MockStateCheckMachineExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckMachineExistsCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockStateCheckMachineExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUUID mocks base method.
func (m *MockState) GetModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUUID indicates an expected call of GetModelUUID.
func (mr *MockStateMockRecorder) GetModelUUID(arg0 any) *MockStateGetModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUUID", reflect.TypeOf((*MockState)(nil).GetModelUUID), arg0)
	return &MockStateGetModelUUIDCall{Call: call}
}

// MockStateGetModelUUIDCall wrap *gomock.Call
type MockStateGetModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockStateGetModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockStateGetModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockStateGetModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockControllerState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetUserAuthorizedKeysForModel mocks base method.
func (m *MockControllerState) GetUserAuthorizedKeysForModel(arg0 context.Context, arg1 model.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthorizedKeysForModel", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthorizedKeysForModel indicates an expected call of GetUserAuthorizedKeysForModel.
func (mr *MockControllerStateMockRecorder) GetUserAuthorizedKeysForModel(arg0, arg1 any) *MockControllerStateGetUserAuthorizedKeysForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthorizedKeysForModel", reflect.TypeOf((*MockControllerState)(nil).GetUserAuthorizedKeysForModel), arg0, arg1)
	return &MockControllerStateGetUserAuthorizedKeysForModelCall{Call: call}
}

// MockControllerStateGetUserAuthorizedKeysForModelCall wrap *gomock.Call
type MockControllerStateGetUserAuthorizedKeysForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetUserAuthorizedKeysForModelCall) Return(arg0 []string, arg1 error) *MockControllerStateGetUserAuthorizedKeysForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetUserAuthorizedKeysForModelCall) Do(f func(context.Context, model.UUID) ([]string, error)) *MockControllerStateGetUserAuthorizedKeysForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetUserAuthorizedKeysForModelCall) DoAndReturn(f func(context.Context, model.UUID) ([]string, error)) *MockControllerStateGetUserAuthorizedKeysForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
