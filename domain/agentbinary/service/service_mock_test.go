// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/agentbinary/service (interfaces: AgentBinaryLocalStore,AgentBinaryDiscoverableStore,ModelState,ControllerState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/agentbinary/service AgentBinaryLocalStore,AgentBinaryDiscoverableStore,ModelState,ControllerState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	io "io"
	reflect "reflect"

	agentbinary "github.com/juju/juju/core/agentbinary"
	agentbinary0 "github.com/juju/juju/domain/agentbinary"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryLocalStore is a mock of AgentBinaryLocalStore interface.
type MockAgentBinaryLocalStore struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryLocalStoreMockRecorder
}

// MockAgentBinaryLocalStoreMockRecorder is the mock recorder for MockAgentBinaryLocalStore.
type MockAgentBinaryLocalStoreMockRecorder struct {
	mock *MockAgentBinaryLocalStore
}

// NewMockAgentBinaryLocalStore creates a new mock instance.
func NewMockAgentBinaryLocalStore(ctrl *gomock.Controller) *MockAgentBinaryLocalStore {
	mock := &MockAgentBinaryLocalStore{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryLocalStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryLocalStore) EXPECT() *MockAgentBinaryLocalStoreMockRecorder {
	return m.recorder
}

// AddAgentBinaryWithSHA256 mocks base method.
func (m *MockAgentBinaryLocalStore) AddAgentBinaryWithSHA256(arg0 context.Context, arg1 io.Reader, arg2 agentbinary.Version, arg3 int64, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAgentBinaryWithSHA256", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAgentBinaryWithSHA256 indicates an expected call of AddAgentBinaryWithSHA256.
func (mr *MockAgentBinaryLocalStoreMockRecorder) AddAgentBinaryWithSHA256(arg0, arg1, arg2, arg3, arg4 any) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAgentBinaryWithSHA256", reflect.TypeOf((*MockAgentBinaryLocalStore)(nil).AddAgentBinaryWithSHA256), arg0, arg1, arg2, arg3, arg4)
	return &MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call{Call: call}
}

// MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call wrap *gomock.Call
type MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call) Return(arg0 error) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call) Do(f func(context.Context, io.Reader, agentbinary.Version, int64, string) error) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call) DoAndReturn(f func(context.Context, io.Reader, agentbinary.Version, int64, string) error) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddAgentBinaryWithSHA384 mocks base method.
func (m *MockAgentBinaryLocalStore) AddAgentBinaryWithSHA384(arg0 context.Context, arg1 io.Reader, arg2 agentbinary.Version, arg3 int64, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAgentBinaryWithSHA384", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAgentBinaryWithSHA384 indicates an expected call of AddAgentBinaryWithSHA384.
func (mr *MockAgentBinaryLocalStoreMockRecorder) AddAgentBinaryWithSHA384(arg0, arg1, arg2, arg3, arg4 any) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAgentBinaryWithSHA384", reflect.TypeOf((*MockAgentBinaryLocalStore)(nil).AddAgentBinaryWithSHA384), arg0, arg1, arg2, arg3, arg4)
	return &MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call{Call: call}
}

// MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call wrap *gomock.Call
type MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call) Return(arg0 error) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call) Do(f func(context.Context, io.Reader, agentbinary.Version, int64, string) error) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call) DoAndReturn(f func(context.Context, io.Reader, agentbinary.Version, int64, string) error) *MockAgentBinaryLocalStoreAddAgentBinaryWithSHA384Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAgentBinaryUsingSHA256 mocks base method.
func (m *MockAgentBinaryLocalStore) GetAgentBinaryUsingSHA256(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentBinaryUsingSHA256", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAgentBinaryUsingSHA256 indicates an expected call of GetAgentBinaryUsingSHA256.
func (mr *MockAgentBinaryLocalStoreMockRecorder) GetAgentBinaryUsingSHA256(arg0, arg1 any) *MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentBinaryUsingSHA256", reflect.TypeOf((*MockAgentBinaryLocalStore)(nil).GetAgentBinaryUsingSHA256), arg0, arg1)
	return &MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call{Call: call}
}

// MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call wrap *gomock.Call
type MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockAgentBinaryLocalStoreGetAgentBinaryUsingSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAgentBinaryWithSHA256 mocks base method.
func (m *MockAgentBinaryLocalStore) GetAgentBinaryWithSHA256(arg0 context.Context, arg1 agentbinary.Version, arg2 agentbinary0.Stream) (io.ReadCloser, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentBinaryWithSHA256", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAgentBinaryWithSHA256 indicates an expected call of GetAgentBinaryWithSHA256.
func (mr *MockAgentBinaryLocalStoreMockRecorder) GetAgentBinaryWithSHA256(arg0, arg1, arg2 any) *MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentBinaryWithSHA256", reflect.TypeOf((*MockAgentBinaryLocalStore)(nil).GetAgentBinaryWithSHA256), arg0, arg1, arg2)
	return &MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call{Call: call}
}

// MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call wrap *gomock.Call
type MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call) Return(arg0 io.ReadCloser, arg1 int64, arg2 string, arg3 error) *MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call) Do(f func(context.Context, agentbinary.Version, agentbinary0.Stream) (io.ReadCloser, int64, string, error)) *MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call) DoAndReturn(f func(context.Context, agentbinary.Version, agentbinary0.Stream) (io.ReadCloser, int64, string, error)) *MockAgentBinaryLocalStoreGetAgentBinaryWithSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentBinaryDiscoverableStore is a mock of AgentBinaryDiscoverableStore interface.
type MockAgentBinaryDiscoverableStore struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryDiscoverableStoreMockRecorder
}

// MockAgentBinaryDiscoverableStoreMockRecorder is the mock recorder for MockAgentBinaryDiscoverableStore.
type MockAgentBinaryDiscoverableStoreMockRecorder struct {
	mock *MockAgentBinaryDiscoverableStore
}

// NewMockAgentBinaryDiscoverableStore creates a new mock instance.
func NewMockAgentBinaryDiscoverableStore(ctrl *gomock.Controller) *MockAgentBinaryDiscoverableStore {
	mock := &MockAgentBinaryDiscoverableStore{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryDiscoverableStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryDiscoverableStore) EXPECT() *MockAgentBinaryDiscoverableStoreMockRecorder {
	return m.recorder
}

// GetAgentBinaryWithSHA256 mocks base method.
func (m *MockAgentBinaryDiscoverableStore) GetAgentBinaryWithSHA256(arg0 context.Context, arg1 agentbinary.Version, arg2 agentbinary0.Stream) (io.ReadCloser, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentBinaryWithSHA256", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAgentBinaryWithSHA256 indicates an expected call of GetAgentBinaryWithSHA256.
func (mr *MockAgentBinaryDiscoverableStoreMockRecorder) GetAgentBinaryWithSHA256(arg0, arg1, arg2 any) *MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentBinaryWithSHA256", reflect.TypeOf((*MockAgentBinaryDiscoverableStore)(nil).GetAgentBinaryWithSHA256), arg0, arg1, arg2)
	return &MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call{Call: call}
}

// MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call wrap *gomock.Call
type MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call) Return(arg0 io.ReadCloser, arg1 int64, arg2 string, arg3 error) *MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call) Do(f func(context.Context, agentbinary.Version, agentbinary0.Stream) (io.ReadCloser, int64, string, error)) *MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call) DoAndReturn(f func(context.Context, agentbinary.Version, agentbinary0.Stream) (io.ReadCloser, int64, string, error)) *MockAgentBinaryDiscoverableStoreGetAgentBinaryWithSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// GetAgentStream mocks base method.
func (m *MockModelState) GetAgentStream(arg0 context.Context) (agentbinary0.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentStream", arg0)
	ret0, _ := ret[0].(agentbinary0.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentStream indicates an expected call of GetAgentStream.
func (mr *MockModelStateMockRecorder) GetAgentStream(arg0 any) *MockModelStateGetAgentStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentStream", reflect.TypeOf((*MockModelState)(nil).GetAgentStream), arg0)
	return &MockModelStateGetAgentStreamCall{Call: call}
}

// MockModelStateGetAgentStreamCall wrap *gomock.Call
type MockModelStateGetAgentStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAgentStreamCall) Return(arg0 agentbinary0.Stream, arg1 error) *MockModelStateGetAgentStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAgentStreamCall) Do(f func(context.Context) (agentbinary0.Stream, error)) *MockModelStateGetAgentStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAgentStreamCall) DoAndReturn(f func(context.Context) (agentbinary0.Stream, error)) *MockModelStateGetAgentStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAgentBinaries mocks base method.
func (m *MockModelState) ListAgentBinaries(arg0 context.Context) ([]agentbinary0.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentBinaries", arg0)
	ret0, _ := ret[0].([]agentbinary0.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentBinaries indicates an expected call of ListAgentBinaries.
func (mr *MockModelStateMockRecorder) ListAgentBinaries(arg0 any) *MockModelStateListAgentBinariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentBinaries", reflect.TypeOf((*MockModelState)(nil).ListAgentBinaries), arg0)
	return &MockModelStateListAgentBinariesCall{Call: call}
}

// MockModelStateListAgentBinariesCall wrap *gomock.Call
type MockModelStateListAgentBinariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateListAgentBinariesCall) Return(arg0 []agentbinary0.Metadata, arg1 error) *MockModelStateListAgentBinariesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateListAgentBinariesCall) Do(f func(context.Context) ([]agentbinary0.Metadata, error)) *MockModelStateListAgentBinariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateListAgentBinariesCall) DoAndReturn(f func(context.Context) ([]agentbinary0.Metadata, error)) *MockModelStateListAgentBinariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// ListAgentBinaries mocks base method.
func (m *MockControllerState) ListAgentBinaries(arg0 context.Context) ([]agentbinary0.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentBinaries", arg0)
	ret0, _ := ret[0].([]agentbinary0.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentBinaries indicates an expected call of ListAgentBinaries.
func (mr *MockControllerStateMockRecorder) ListAgentBinaries(arg0 any) *MockControllerStateListAgentBinariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentBinaries", reflect.TypeOf((*MockControllerState)(nil).ListAgentBinaries), arg0)
	return &MockControllerStateListAgentBinariesCall{Call: call}
}

// MockControllerStateListAgentBinariesCall wrap *gomock.Call
type MockControllerStateListAgentBinariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateListAgentBinariesCall) Return(arg0 []agentbinary0.Metadata, arg1 error) *MockControllerStateListAgentBinariesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateListAgentBinariesCall) Do(f func(context.Context) ([]agentbinary0.Metadata, error)) *MockControllerStateListAgentBinariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateListAgentBinariesCall) DoAndReturn(f func(context.Context) ([]agentbinary0.Metadata, error)) *MockControllerStateListAgentBinariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
