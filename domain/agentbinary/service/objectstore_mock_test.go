// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/objectstore (interfaces: ModelObjectStoreGetter,ObjectStore)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination objectstore_mock_test.go github.com/juju/juju/core/objectstore ModelObjectStoreGetter,ObjectStore
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	io "io"
	reflect "reflect"

	objectstore "github.com/juju/juju/core/objectstore"
	gomock "go.uber.org/mock/gomock"
)

// MockModelObjectStoreGetter is a mock of ModelObjectStoreGetter interface.
type MockModelObjectStoreGetter struct {
	ctrl     *gomock.Controller
	recorder *MockModelObjectStoreGetterMockRecorder
}

// MockModelObjectStoreGetterMockRecorder is the mock recorder for MockModelObjectStoreGetter.
type MockModelObjectStoreGetterMockRecorder struct {
	mock *MockModelObjectStoreGetter
}

// NewMockModelObjectStoreGetter creates a new mock instance.
func NewMockModelObjectStoreGetter(ctrl *gomock.Controller) *MockModelObjectStoreGetter {
	mock := &MockModelObjectStoreGetter{ctrl: ctrl}
	mock.recorder = &MockModelObjectStoreGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelObjectStoreGetter) EXPECT() *MockModelObjectStoreGetterMockRecorder {
	return m.recorder
}

// GetObjectStore mocks base method.
func (m *MockModelObjectStoreGetter) GetObjectStore(arg0 context.Context) (objectstore.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectStore", arg0)
	ret0, _ := ret[0].(objectstore.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectStore indicates an expected call of GetObjectStore.
func (mr *MockModelObjectStoreGetterMockRecorder) GetObjectStore(arg0 any) *MockModelObjectStoreGetterGetObjectStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectStore", reflect.TypeOf((*MockModelObjectStoreGetter)(nil).GetObjectStore), arg0)
	return &MockModelObjectStoreGetterGetObjectStoreCall{Call: call}
}

// MockModelObjectStoreGetterGetObjectStoreCall wrap *gomock.Call
type MockModelObjectStoreGetterGetObjectStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelObjectStoreGetterGetObjectStoreCall) Return(arg0 objectstore.ObjectStore, arg1 error) *MockModelObjectStoreGetterGetObjectStoreCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelObjectStoreGetterGetObjectStoreCall) Do(f func(context.Context) (objectstore.ObjectStore, error)) *MockModelObjectStoreGetterGetObjectStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelObjectStoreGetterGetObjectStoreCall) DoAndReturn(f func(context.Context) (objectstore.ObjectStore, error)) *MockModelObjectStoreGetterGetObjectStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockObjectStore is a mock of ObjectStore interface.
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore.
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance.
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockObjectStore) Get(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockObjectStoreMockRecorder) Get(arg0, arg1 any) *MockObjectStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockObjectStore)(nil).Get), arg0, arg1)
	return &MockObjectStoreGetCall{Call: call}
}

// MockObjectStoreGetCall wrap *gomock.Call
type MockObjectStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreGetCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockObjectStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreGetCall) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreGetCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBySHA256 mocks base method.
func (m *MockObjectStore) GetBySHA256(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySHA256", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBySHA256 indicates an expected call of GetBySHA256.
func (mr *MockObjectStoreMockRecorder) GetBySHA256(arg0, arg1 any) *MockObjectStoreGetBySHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySHA256", reflect.TypeOf((*MockObjectStore)(nil).GetBySHA256), arg0, arg1)
	return &MockObjectStoreGetBySHA256Call{Call: call}
}

// MockObjectStoreGetBySHA256Call wrap *gomock.Call
type MockObjectStoreGetBySHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreGetBySHA256Call) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockObjectStoreGetBySHA256Call {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreGetBySHA256Call) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreGetBySHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreGetBySHA256Call) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreGetBySHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBySHA256Prefix mocks base method.
func (m *MockObjectStore) GetBySHA256Prefix(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySHA256Prefix", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBySHA256Prefix indicates an expected call of GetBySHA256Prefix.
func (mr *MockObjectStoreMockRecorder) GetBySHA256Prefix(arg0, arg1 any) *MockObjectStoreGetBySHA256PrefixCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySHA256Prefix", reflect.TypeOf((*MockObjectStore)(nil).GetBySHA256Prefix), arg0, arg1)
	return &MockObjectStoreGetBySHA256PrefixCall{Call: call}
}

// MockObjectStoreGetBySHA256PrefixCall wrap *gomock.Call
type MockObjectStoreGetBySHA256PrefixCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreGetBySHA256PrefixCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockObjectStoreGetBySHA256PrefixCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreGetBySHA256PrefixCall) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreGetBySHA256PrefixCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreGetBySHA256PrefixCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreGetBySHA256PrefixCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Put mocks base method.
func (m *MockObjectStore) Put(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockObjectStoreMockRecorder) Put(arg0, arg1, arg2, arg3 any) *MockObjectStorePutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockObjectStore)(nil).Put), arg0, arg1, arg2, arg3)
	return &MockObjectStorePutCall{Call: call}
}

// MockObjectStorePutCall wrap *gomock.Call
type MockObjectStorePutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStorePutCall) Return(arg0 objectstore.UUID, arg1 error) *MockObjectStorePutCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStorePutCall) Do(f func(context.Context, string, io.Reader, int64) (objectstore.UUID, error)) *MockObjectStorePutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStorePutCall) DoAndReturn(f func(context.Context, string, io.Reader, int64) (objectstore.UUID, error)) *MockObjectStorePutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutAndCheckHash mocks base method.
func (m *MockObjectStore) PutAndCheckHash(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 string) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAndCheckHash", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAndCheckHash indicates an expected call of PutAndCheckHash.
func (mr *MockObjectStoreMockRecorder) PutAndCheckHash(arg0, arg1, arg2, arg3, arg4 any) *MockObjectStorePutAndCheckHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAndCheckHash", reflect.TypeOf((*MockObjectStore)(nil).PutAndCheckHash), arg0, arg1, arg2, arg3, arg4)
	return &MockObjectStorePutAndCheckHashCall{Call: call}
}

// MockObjectStorePutAndCheckHashCall wrap *gomock.Call
type MockObjectStorePutAndCheckHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStorePutAndCheckHashCall) Return(arg0 objectstore.UUID, arg1 error) *MockObjectStorePutAndCheckHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStorePutAndCheckHashCall) Do(f func(context.Context, string, io.Reader, int64, string) (objectstore.UUID, error)) *MockObjectStorePutAndCheckHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStorePutAndCheckHashCall) DoAndReturn(f func(context.Context, string, io.Reader, int64, string) (objectstore.UUID, error)) *MockObjectStorePutAndCheckHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockObjectStore) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockObjectStoreMockRecorder) Remove(arg0, arg1 any) *MockObjectStoreRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockObjectStore)(nil).Remove), arg0, arg1)
	return &MockObjectStoreRemoveCall{Call: call}
}

// MockObjectStoreRemoveCall wrap *gomock.Call
type MockObjectStoreRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreRemoveCall) Return(arg0 error) *MockObjectStoreRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreRemoveCall) Do(f func(context.Context, string) error) *MockObjectStoreRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreRemoveCall) DoAndReturn(f func(context.Context, string) error) *MockObjectStoreRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
