// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/agentbinary/service (interfaces: ProviderForAgentBinaryFinder)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination simplestreamstore_mock_test.go github.com/juju/juju/domain/agentbinary/service ProviderForAgentBinaryFinder
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	constraints "github.com/juju/juju/core/constraints"
	environs "github.com/juju/juju/environs"
	config "github.com/juju/juju/environs/config"
	storage "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderForAgentBinaryFinder is a mock of ProviderForAgentBinaryFinder interface.
type MockProviderForAgentBinaryFinder struct {
	ctrl     *gomock.Controller
	recorder *MockProviderForAgentBinaryFinderMockRecorder
}

// MockProviderForAgentBinaryFinderMockRecorder is the mock recorder for MockProviderForAgentBinaryFinder.
type MockProviderForAgentBinaryFinderMockRecorder struct {
	mock *MockProviderForAgentBinaryFinder
}

// NewMockProviderForAgentBinaryFinder creates a new mock instance.
func NewMockProviderForAgentBinaryFinder(ctrl *gomock.Controller) *MockProviderForAgentBinaryFinder {
	mock := &MockProviderForAgentBinaryFinder{ctrl: ctrl}
	mock.recorder = &MockProviderForAgentBinaryFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderForAgentBinaryFinder) EXPECT() *MockProviderForAgentBinaryFinderMockRecorder {
	return m.recorder
}

// Bootstrap mocks base method.
func (m *MockProviderForAgentBinaryFinder) Bootstrap(arg0 environs.BootstrapContext, arg1 environs.BootstrapParams) (*environs.BootstrapResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", arg0, arg1)
	ret0, _ := ret[0].(*environs.BootstrapResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) Bootstrap(arg0, arg1 any) *MockProviderForAgentBinaryFinderBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).Bootstrap), arg0, arg1)
	return &MockProviderForAgentBinaryFinderBootstrapCall{Call: call}
}

// MockProviderForAgentBinaryFinderBootstrapCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderBootstrapCall) Return(arg0 *environs.BootstrapResult, arg1 error) *MockProviderForAgentBinaryFinderBootstrapCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderBootstrapCall) Do(f func(environs.BootstrapContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockProviderForAgentBinaryFinderBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, environs.BootstrapParams) (*environs.BootstrapResult, error)) *MockProviderForAgentBinaryFinderBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockProviderForAgentBinaryFinder) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) Config() *MockProviderForAgentBinaryFinderConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).Config))
	return &MockProviderForAgentBinaryFinderConfigCall{Call: call}
}

// MockProviderForAgentBinaryFinderConfigCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderConfigCall) Return(arg0 *config.Config) *MockProviderForAgentBinaryFinderConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderConfigCall) Do(f func() *config.Config) *MockProviderForAgentBinaryFinderConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderConfigCall) DoAndReturn(f func() *config.Config) *MockProviderForAgentBinaryFinderConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsValidator mocks base method.
func (m *MockProviderForAgentBinaryFinder) ConstraintsValidator(arg0 context.Context) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) ConstraintsValidator(arg0 any) *MockProviderForAgentBinaryFinderConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).ConstraintsValidator), arg0)
	return &MockProviderForAgentBinaryFinderConstraintsValidatorCall{Call: call}
}

// MockProviderForAgentBinaryFinderConstraintsValidatorCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockProviderForAgentBinaryFinderConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderConstraintsValidatorCall) Do(f func(context.Context) (constraints.Validator, error)) *MockProviderForAgentBinaryFinderConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderConstraintsValidatorCall) DoAndReturn(f func(context.Context) (constraints.Validator, error)) *MockProviderForAgentBinaryFinderConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockProviderForAgentBinaryFinder) Destroy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) Destroy(arg0 any) *MockProviderForAgentBinaryFinderDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).Destroy), arg0)
	return &MockProviderForAgentBinaryFinderDestroyCall{Call: call}
}

// MockProviderForAgentBinaryFinderDestroyCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderDestroyCall) Return(arg0 error) *MockProviderForAgentBinaryFinderDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderDestroyCall) Do(f func(context.Context) error) *MockProviderForAgentBinaryFinderDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderDestroyCall) DoAndReturn(f func(context.Context) error) *MockProviderForAgentBinaryFinderDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyController mocks base method.
func (m *MockProviderForAgentBinaryFinder) DestroyController(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyController indicates an expected call of DestroyController.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) DestroyController(arg0, arg1 any) *MockProviderForAgentBinaryFinderDestroyControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyController", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).DestroyController), arg0, arg1)
	return &MockProviderForAgentBinaryFinderDestroyControllerCall{Call: call}
}

// MockProviderForAgentBinaryFinderDestroyControllerCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderDestroyControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderDestroyControllerCall) Return(arg0 error) *MockProviderForAgentBinaryFinderDestroyControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderDestroyControllerCall) Do(f func(context.Context, string) error) *MockProviderForAgentBinaryFinderDestroyControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderDestroyControllerCall) DoAndReturn(f func(context.Context, string) error) *MockProviderForAgentBinaryFinderDestroyControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareForBootstrap mocks base method.
func (m *MockProviderForAgentBinaryFinder) PrepareForBootstrap(arg0 environs.BootstrapContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForBootstrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareForBootstrap indicates an expected call of PrepareForBootstrap.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) PrepareForBootstrap(arg0, arg1 any) *MockProviderForAgentBinaryFinderPrepareForBootstrapCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForBootstrap", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).PrepareForBootstrap), arg0, arg1)
	return &MockProviderForAgentBinaryFinderPrepareForBootstrapCall{Call: call}
}

// MockProviderForAgentBinaryFinderPrepareForBootstrapCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderPrepareForBootstrapCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderPrepareForBootstrapCall) Return(arg0 error) *MockProviderForAgentBinaryFinderPrepareForBootstrapCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderPrepareForBootstrapCall) Do(f func(environs.BootstrapContext, string) error) *MockProviderForAgentBinaryFinderPrepareForBootstrapCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderPrepareForBootstrapCall) DoAndReturn(f func(environs.BootstrapContext, string) error) *MockProviderForAgentBinaryFinderPrepareForBootstrapCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecommendedPoolForKind mocks base method.
func (m *MockProviderForAgentBinaryFinder) RecommendedPoolForKind(arg0 storage.StorageKind) *storage.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendedPoolForKind", arg0)
	ret0, _ := ret[0].(*storage.Config)
	return ret0
}

// RecommendedPoolForKind indicates an expected call of RecommendedPoolForKind.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) RecommendedPoolForKind(arg0 any) *MockProviderForAgentBinaryFinderRecommendedPoolForKindCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendedPoolForKind", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).RecommendedPoolForKind), arg0)
	return &MockProviderForAgentBinaryFinderRecommendedPoolForKindCall{Call: call}
}

// MockProviderForAgentBinaryFinderRecommendedPoolForKindCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderRecommendedPoolForKindCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderRecommendedPoolForKindCall) Return(arg0 *storage.Config) *MockProviderForAgentBinaryFinderRecommendedPoolForKindCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderRecommendedPoolForKindCall) Do(f func(storage.StorageKind) *storage.Config) *MockProviderForAgentBinaryFinderRecommendedPoolForKindCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderRecommendedPoolForKindCall) DoAndReturn(f func(storage.StorageKind) *storage.Config) *MockProviderForAgentBinaryFinderRecommendedPoolForKindCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConfig mocks base method.
func (m *MockProviderForAgentBinaryFinder) SetConfig(arg0 context.Context, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) SetConfig(arg0, arg1 any) *MockProviderForAgentBinaryFinderSetConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).SetConfig), arg0, arg1)
	return &MockProviderForAgentBinaryFinderSetConfigCall{Call: call}
}

// MockProviderForAgentBinaryFinderSetConfigCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderSetConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderSetConfigCall) Return(arg0 error) *MockProviderForAgentBinaryFinderSetConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderSetConfigCall) Do(f func(context.Context, *config.Config) error) *MockProviderForAgentBinaryFinderSetConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderSetConfigCall) DoAndReturn(f func(context.Context, *config.Config) error) *MockProviderForAgentBinaryFinderSetConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProvider mocks base method.
func (m *MockProviderForAgentBinaryFinder) StorageProvider(arg0 storage.ProviderType) (storage.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) StorageProvider(arg0 any) *MockProviderForAgentBinaryFinderStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).StorageProvider), arg0)
	return &MockProviderForAgentBinaryFinderStorageProviderCall{Call: call}
}

// MockProviderForAgentBinaryFinderStorageProviderCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderStorageProviderCall) Return(arg0 storage.Provider, arg1 error) *MockProviderForAgentBinaryFinderStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderStorageProviderCall) Do(f func(storage.ProviderType) (storage.Provider, error)) *MockProviderForAgentBinaryFinderStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderStorageProviderCall) DoAndReturn(f func(storage.ProviderType) (storage.Provider, error)) *MockProviderForAgentBinaryFinderStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageProviderTypes mocks base method.
func (m *MockProviderForAgentBinaryFinder) StorageProviderTypes() ([]storage.ProviderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProviderTypes")
	ret0, _ := ret[0].([]storage.ProviderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProviderTypes indicates an expected call of StorageProviderTypes.
func (mr *MockProviderForAgentBinaryFinderMockRecorder) StorageProviderTypes() *MockProviderForAgentBinaryFinderStorageProviderTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProviderTypes", reflect.TypeOf((*MockProviderForAgentBinaryFinder)(nil).StorageProviderTypes))
	return &MockProviderForAgentBinaryFinderStorageProviderTypesCall{Call: call}
}

// MockProviderForAgentBinaryFinderStorageProviderTypesCall wrap *gomock.Call
type MockProviderForAgentBinaryFinderStorageProviderTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderForAgentBinaryFinderStorageProviderTypesCall) Return(arg0 []storage.ProviderType, arg1 error) *MockProviderForAgentBinaryFinderStorageProviderTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderForAgentBinaryFinderStorageProviderTypesCall) Do(f func() ([]storage.ProviderType, error)) *MockProviderForAgentBinaryFinderStorageProviderTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderForAgentBinaryFinderStorageProviderTypesCall) DoAndReturn(f func() ([]storage.ProviderType, error)) *MockProviderForAgentBinaryFinderStorageProviderTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
