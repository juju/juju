// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/agentbinary/service (interfaces: AgentBinaryStoreState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination store_mock_test.go github.com/juju/juju/domain/agentbinary/service AgentBinaryStoreState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	agentbinary "github.com/juju/juju/core/agentbinary"
	objectstore "github.com/juju/juju/core/objectstore"
	agentbinary0 "github.com/juju/juju/domain/agentbinary"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentBinaryStoreState is a mock of AgentBinaryStoreState interface.
type MockAgentBinaryStoreState struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryStoreStateMockRecorder
}

// MockAgentBinaryStoreStateMockRecorder is the mock recorder for MockAgentBinaryStoreState.
type MockAgentBinaryStoreStateMockRecorder struct {
	mock *MockAgentBinaryStoreState
}

// NewMockAgentBinaryStoreState creates a new mock instance.
func NewMockAgentBinaryStoreState(ctrl *gomock.Controller) *MockAgentBinaryStoreState {
	mock := &MockAgentBinaryStoreState{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryStoreStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryStoreState) EXPECT() *MockAgentBinaryStoreStateMockRecorder {
	return m.recorder
}

// CheckAgentBinarySHA256Exists mocks base method.
func (m *MockAgentBinaryStoreState) CheckAgentBinarySHA256Exists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAgentBinarySHA256Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAgentBinarySHA256Exists indicates an expected call of CheckAgentBinarySHA256Exists.
func (mr *MockAgentBinaryStoreStateMockRecorder) CheckAgentBinarySHA256Exists(arg0, arg1 any) *MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAgentBinarySHA256Exists", reflect.TypeOf((*MockAgentBinaryStoreState)(nil).CheckAgentBinarySHA256Exists), arg0, arg1)
	return &MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall{Call: call}
}

// MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall wrap *gomock.Call
type MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall) Return(arg0 bool, arg1 error) *MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall) Do(f func(context.Context, string) (bool, error)) *MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockAgentBinaryStoreStateCheckAgentBinarySHA256ExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAgentBinarySHA256 mocks base method.
func (m *MockAgentBinaryStoreState) GetAgentBinarySHA256(arg0 context.Context, arg1 agentbinary.Version, arg2 agentbinary0.Stream) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentBinarySHA256", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAgentBinarySHA256 indicates an expected call of GetAgentBinarySHA256.
func (mr *MockAgentBinaryStoreStateMockRecorder) GetAgentBinarySHA256(arg0, arg1, arg2 any) *MockAgentBinaryStoreStateGetAgentBinarySHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentBinarySHA256", reflect.TypeOf((*MockAgentBinaryStoreState)(nil).GetAgentBinarySHA256), arg0, arg1, arg2)
	return &MockAgentBinaryStoreStateGetAgentBinarySHA256Call{Call: call}
}

// MockAgentBinaryStoreStateGetAgentBinarySHA256Call wrap *gomock.Call
type MockAgentBinaryStoreStateGetAgentBinarySHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStoreStateGetAgentBinarySHA256Call) Return(arg0 bool, arg1 string, arg2 error) *MockAgentBinaryStoreStateGetAgentBinarySHA256Call {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStoreStateGetAgentBinarySHA256Call) Do(f func(context.Context, agentbinary.Version, agentbinary0.Stream) (bool, string, error)) *MockAgentBinaryStoreStateGetAgentBinarySHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStoreStateGetAgentBinarySHA256Call) DoAndReturn(f func(context.Context, agentbinary.Version, agentbinary0.Stream) (bool, string, error)) *MockAgentBinaryStoreStateGetAgentBinarySHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetObjectUUID mocks base method.
func (m *MockAgentBinaryStoreState) GetObjectUUID(arg0 context.Context, arg1 string) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectUUID", arg0, arg1)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectUUID indicates an expected call of GetObjectUUID.
func (mr *MockAgentBinaryStoreStateMockRecorder) GetObjectUUID(arg0, arg1 any) *MockAgentBinaryStoreStateGetObjectUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectUUID", reflect.TypeOf((*MockAgentBinaryStoreState)(nil).GetObjectUUID), arg0, arg1)
	return &MockAgentBinaryStoreStateGetObjectUUIDCall{Call: call}
}

// MockAgentBinaryStoreStateGetObjectUUIDCall wrap *gomock.Call
type MockAgentBinaryStoreStateGetObjectUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStoreStateGetObjectUUIDCall) Return(arg0 objectstore.UUID, arg1 error) *MockAgentBinaryStoreStateGetObjectUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStoreStateGetObjectUUIDCall) Do(f func(context.Context, string) (objectstore.UUID, error)) *MockAgentBinaryStoreStateGetObjectUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStoreStateGetObjectUUIDCall) DoAndReturn(f func(context.Context, string) (objectstore.UUID, error)) *MockAgentBinaryStoreStateGetObjectUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterAgentBinary mocks base method.
func (m *MockAgentBinaryStoreState) RegisterAgentBinary(arg0 context.Context, arg1 agentbinary0.RegisterAgentBinaryArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgentBinary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAgentBinary indicates an expected call of RegisterAgentBinary.
func (mr *MockAgentBinaryStoreStateMockRecorder) RegisterAgentBinary(arg0, arg1 any) *MockAgentBinaryStoreStateRegisterAgentBinaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgentBinary", reflect.TypeOf((*MockAgentBinaryStoreState)(nil).RegisterAgentBinary), arg0, arg1)
	return &MockAgentBinaryStoreStateRegisterAgentBinaryCall{Call: call}
}

// MockAgentBinaryStoreStateRegisterAgentBinaryCall wrap *gomock.Call
type MockAgentBinaryStoreStateRegisterAgentBinaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStoreStateRegisterAgentBinaryCall) Return(arg0 error) *MockAgentBinaryStoreStateRegisterAgentBinaryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStoreStateRegisterAgentBinaryCall) Do(f func(context.Context, agentbinary0.RegisterAgentBinaryArg) error) *MockAgentBinaryStoreStateRegisterAgentBinaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStoreStateRegisterAgentBinaryCall) DoAndReturn(f func(context.Context, agentbinary0.RegisterAgentBinaryArg) error) *MockAgentBinaryStoreStateRegisterAgentBinaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
