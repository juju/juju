// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/annotation/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/annotation/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	annotations "github.com/juju/juju/core/annotations"
	annotation "github.com/juju/juju/domain/annotation"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetAnnotations mocks base method.
func (m *MockState) GetAnnotations(arg0 context.Context, arg1 annotations.ID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotations", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotations indicates an expected call of GetAnnotations.
func (mr *MockStateMockRecorder) GetAnnotations(arg0, arg1 any) *MockStateGetAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotations", reflect.TypeOf((*MockState)(nil).GetAnnotations), arg0, arg1)
	return &MockStateGetAnnotationsCall{Call: call}
}

// MockStateGetAnnotationsCall wrap *gomock.Call
type MockStateGetAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAnnotationsCall) Return(arg0 map[string]string, arg1 error) *MockStateGetAnnotationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAnnotationsCall) Do(f func(context.Context, annotations.ID) (map[string]string, error)) *MockStateGetAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAnnotationsCall) DoAndReturn(f func(context.Context, annotations.ID) (map[string]string, error)) *MockStateGetAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmAnnotations mocks base method.
func (m *MockState) GetCharmAnnotations(arg0 context.Context, arg1 annotation.GetCharmArgs) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmAnnotations", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmAnnotations indicates an expected call of GetCharmAnnotations.
func (mr *MockStateMockRecorder) GetCharmAnnotations(arg0, arg1 any) *MockStateGetCharmAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmAnnotations", reflect.TypeOf((*MockState)(nil).GetCharmAnnotations), arg0, arg1)
	return &MockStateGetCharmAnnotationsCall{Call: call}
}

// MockStateGetCharmAnnotationsCall wrap *gomock.Call
type MockStateGetCharmAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmAnnotationsCall) Return(arg0 map[string]string, arg1 error) *MockStateGetCharmAnnotationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmAnnotationsCall) Do(f func(context.Context, annotation.GetCharmArgs) (map[string]string, error)) *MockStateGetCharmAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmAnnotationsCall) DoAndReturn(f func(context.Context, annotation.GetCharmArgs) (map[string]string, error)) *MockStateGetCharmAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAnnotations mocks base method.
func (m *MockState) SetAnnotations(arg0 context.Context, arg1 annotations.ID, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAnnotations", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockStateMockRecorder) SetAnnotations(arg0, arg1, arg2 any) *MockStateSetAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockState)(nil).SetAnnotations), arg0, arg1, arg2)
	return &MockStateSetAnnotationsCall{Call: call}
}

// MockStateSetAnnotationsCall wrap *gomock.Call
type MockStateSetAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetAnnotationsCall) Return(arg0 error) *MockStateSetAnnotationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetAnnotationsCall) Do(f func(context.Context, annotations.ID, map[string]string) error) *MockStateSetAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetAnnotationsCall) DoAndReturn(f func(context.Context, annotations.ID, map[string]string) error) *MockStateSetAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmAnnotations mocks base method.
func (m *MockState) SetCharmAnnotations(arg0 context.Context, arg1 annotation.GetCharmArgs, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharmAnnotations", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharmAnnotations indicates an expected call of SetCharmAnnotations.
func (mr *MockStateMockRecorder) SetCharmAnnotations(arg0, arg1, arg2 any) *MockStateSetCharmAnnotationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmAnnotations", reflect.TypeOf((*MockState)(nil).SetCharmAnnotations), arg0, arg1, arg2)
	return &MockStateSetCharmAnnotationsCall{Call: call}
}

// MockStateSetCharmAnnotationsCall wrap *gomock.Call
type MockStateSetCharmAnnotationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetCharmAnnotationsCall) Return(arg0 error) *MockStateSetCharmAnnotationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetCharmAnnotationsCall) Do(f func(context.Context, annotation.GetCharmArgs, map[string]string) error) *MockStateSetCharmAnnotationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetCharmAnnotationsCall) DoAndReturn(f func(context.Context, annotation.GetCharmArgs, map[string]string) error) *MockStateSetCharmAnnotationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
