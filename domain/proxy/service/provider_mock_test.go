// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/proxy/service (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination provider_mock_test.go github.com/juju/juju/domain/proxy/service Provider
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	proxy "github.com/juju/juju/internal/proxy"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// ConnectionProxyInfo mocks base method.
func (m *MockProvider) ConnectionProxyInfo(arg0 context.Context) (proxy.Proxier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionProxyInfo", arg0)
	ret0, _ := ret[0].(proxy.Proxier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectionProxyInfo indicates an expected call of ConnectionProxyInfo.
func (mr *MockProviderMockRecorder) ConnectionProxyInfo(arg0 any) *MockProviderConnectionProxyInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionProxyInfo", reflect.TypeOf((*MockProvider)(nil).ConnectionProxyInfo), arg0)
	return &MockProviderConnectionProxyInfoCall{Call: call}
}

// MockProviderConnectionProxyInfoCall wrap *gomock.Call
type MockProviderConnectionProxyInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderConnectionProxyInfoCall) Return(arg0 proxy.Proxier, arg1 error) *MockProviderConnectionProxyInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderConnectionProxyInfoCall) Do(f func(context.Context) (proxy.Proxier, error)) *MockProviderConnectionProxyInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderConnectionProxyInfoCall) DoAndReturn(f func(context.Context) (proxy.Proxier, error)) *MockProviderConnectionProxyInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProxyToApplication mocks base method.
func (m *MockProvider) ProxyToApplication(arg0 context.Context, arg1, arg2 string) (proxy.Proxier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyToApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(proxy.Proxier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyToApplication indicates an expected call of ProxyToApplication.
func (mr *MockProviderMockRecorder) ProxyToApplication(arg0, arg1, arg2 any) *MockProviderProxyToApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyToApplication", reflect.TypeOf((*MockProvider)(nil).ProxyToApplication), arg0, arg1, arg2)
	return &MockProviderProxyToApplicationCall{Call: call}
}

// MockProviderProxyToApplicationCall wrap *gomock.Call
type MockProviderProxyToApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderProxyToApplicationCall) Return(arg0 proxy.Proxier, arg1 error) *MockProviderProxyToApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderProxyToApplicationCall) Do(f func(context.Context, string, string) (proxy.Proxier, error)) *MockProviderProxyToApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderProxyToApplicationCall) DoAndReturn(f func(context.Context, string, string) (proxy.Proxier, error)) *MockProviderProxyToApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
