// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service/storage (interfaces: ProviderState,State,StoragePoolProvider)
//
// Generated by this command:
//
//	mockgen -typed -package storage -destination storage_mock_test.go github.com/juju/juju/domain/application/service/storage ProviderState,State,StoragePoolProvider
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	storage "github.com/juju/juju/core/storage"
	unit "github.com/juju/juju/core/unit"
	application0 "github.com/juju/juju/domain/application"
	charm "github.com/juju/juju/domain/application/charm"
	internal "github.com/juju/juju/domain/application/internal"
	storage0 "github.com/juju/juju/domain/storage"
	storage1 "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderState is a mock of ProviderState interface.
type MockProviderState struct {
	ctrl     *gomock.Controller
	recorder *MockProviderStateMockRecorder
}

// MockProviderStateMockRecorder is the mock recorder for MockProviderState.
type MockProviderStateMockRecorder struct {
	mock *MockProviderState
}

// NewMockProviderState creates a new mock instance.
func NewMockProviderState(ctrl *gomock.Controller) *MockProviderState {
	mock := &MockProviderState{ctrl: ctrl}
	mock.recorder = &MockProviderStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderState) EXPECT() *MockProviderStateMockRecorder {
	return m.recorder
}

// GetProviderTypeForPool mocks base method.
func (m *MockProviderState) GetProviderTypeForPool(arg0 context.Context, arg1 storage0.StoragePoolUUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderTypeForPool", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderTypeForPool indicates an expected call of GetProviderTypeForPool.
func (mr *MockProviderStateMockRecorder) GetProviderTypeForPool(arg0, arg1 any) *MockProviderStateGetProviderTypeForPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderTypeForPool", reflect.TypeOf((*MockProviderState)(nil).GetProviderTypeForPool), arg0, arg1)
	return &MockProviderStateGetProviderTypeForPoolCall{Call: call}
}

// MockProviderStateGetProviderTypeForPoolCall wrap *gomock.Call
type MockProviderStateGetProviderTypeForPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderStateGetProviderTypeForPoolCall) Return(arg0 string, arg1 error) *MockProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderStateGetProviderTypeForPoolCall) Do(f func(context.Context, storage0.StoragePoolUUID) (string, error)) *MockProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderStateGetProviderTypeForPoolCall) DoAndReturn(f func(context.Context, storage0.StoragePoolUUID) (string, error)) *MockProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddStorageForUnit mocks base method.
func (m *MockState) AddStorageForUnit(arg0 context.Context, arg1 storage.Name, arg2 unit.UUID, arg3 storage1.Directive) ([]storage.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorageForUnit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]storage.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStorageForUnit indicates an expected call of AddStorageForUnit.
func (mr *MockStateMockRecorder) AddStorageForUnit(arg0, arg1, arg2, arg3 any) *MockStateAddStorageForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorageForUnit", reflect.TypeOf((*MockState)(nil).AddStorageForUnit), arg0, arg1, arg2, arg3)
	return &MockStateAddStorageForUnitCall{Call: call}
}

// MockStateAddStorageForUnitCall wrap *gomock.Call
type MockStateAddStorageForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddStorageForUnitCall) Return(arg0 []storage.ID, arg1 error) *MockStateAddStorageForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddStorageForUnitCall) Do(f func(context.Context, storage.Name, unit.UUID, storage1.Directive) ([]storage.ID, error)) *MockStateAddStorageForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddStorageForUnitCall) DoAndReturn(f func(context.Context, storage.Name, unit.UUID, storage1.Directive) ([]storage.ID, error)) *MockStateAddStorageForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AttachStorage mocks base method.
func (m *MockState) AttachStorage(arg0 context.Context, arg1 storage0.StorageInstanceUUID, arg2 unit.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachStorage indicates an expected call of AttachStorage.
func (mr *MockStateMockRecorder) AttachStorage(arg0, arg1, arg2 any) *MockStateAttachStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStorage", reflect.TypeOf((*MockState)(nil).AttachStorage), arg0, arg1, arg2)
	return &MockStateAttachStorageCall{Call: call}
}

// MockStateAttachStorageCall wrap *gomock.Call
type MockStateAttachStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAttachStorageCall) Return(arg0 error) *MockStateAttachStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAttachStorageCall) Do(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStateAttachStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAttachStorageCall) DoAndReturn(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStateAttachStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachStorage mocks base method.
func (m *MockState) DetachStorage(arg0 context.Context, arg1 storage0.StorageInstanceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachStorage indicates an expected call of DetachStorage.
func (mr *MockStateMockRecorder) DetachStorage(arg0, arg1 any) *MockStateDetachStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorage", reflect.TypeOf((*MockState)(nil).DetachStorage), arg0, arg1)
	return &MockStateDetachStorageCall{Call: call}
}

// MockStateDetachStorageCall wrap *gomock.Call
type MockStateDetachStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDetachStorageCall) Return(arg0 error) *MockStateDetachStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDetachStorageCall) Do(f func(context.Context, storage0.StorageInstanceUUID) error) *MockStateDetachStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDetachStorageCall) DoAndReturn(f func(context.Context, storage0.StorageInstanceUUID) error) *MockStateDetachStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachStorageForUnit mocks base method.
func (m *MockState) DetachStorageForUnit(arg0 context.Context, arg1 storage0.StorageInstanceUUID, arg2 unit.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorageForUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachStorageForUnit indicates an expected call of DetachStorageForUnit.
func (mr *MockStateMockRecorder) DetachStorageForUnit(arg0, arg1, arg2 any) *MockStateDetachStorageForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorageForUnit", reflect.TypeOf((*MockState)(nil).DetachStorageForUnit), arg0, arg1, arg2)
	return &MockStateDetachStorageForUnitCall{Call: call}
}

// MockStateDetachStorageForUnitCall wrap *gomock.Call
type MockStateDetachStorageForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDetachStorageForUnitCall) Return(arg0 error) *MockStateDetachStorageForUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDetachStorageForUnitCall) Do(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStateDetachStorageForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDetachStorageForUnitCall) DoAndReturn(f func(context.Context, storage0.StorageInstanceUUID, unit.UUID) error) *MockStateDetachStorageForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationStorage mocks base method.
func (m *MockState) GetApplicationStorage(arg0 context.Context, arg1 application.UUID) (application0.ApplicationStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStorage", arg0, arg1)
	ret0, _ := ret[0].(application0.ApplicationStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationStorage indicates an expected call of GetApplicationStorage.
func (mr *MockStateMockRecorder) GetApplicationStorage(arg0, arg1 any) *MockStateGetApplicationStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStorage", reflect.TypeOf((*MockState)(nil).GetApplicationStorage), arg0, arg1)
	return &MockStateGetApplicationStorageCall{Call: call}
}

// MockStateGetApplicationStorageCall wrap *gomock.Call
type MockStateGetApplicationStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationStorageCall) Return(arg0 application0.ApplicationStorage, arg1 error) *MockStateGetApplicationStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationStorageCall) Do(f func(context.Context, application.UUID) (application0.ApplicationStorage, error)) *MockStateGetApplicationStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationStorageCall) DoAndReturn(f func(context.Context, application.UUID) (application0.ApplicationStorage, error)) *MockStateGetApplicationStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationStorageDirectives mocks base method.
func (m *MockState) GetApplicationStorageDirectives(arg0 context.Context, arg1 application.UUID) ([]application0.StorageDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStorageDirectives", arg0, arg1)
	ret0, _ := ret[0].([]application0.StorageDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationStorageDirectives indicates an expected call of GetApplicationStorageDirectives.
func (mr *MockStateMockRecorder) GetApplicationStorageDirectives(arg0, arg1 any) *MockStateGetApplicationStorageDirectivesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStorageDirectives", reflect.TypeOf((*MockState)(nil).GetApplicationStorageDirectives), arg0, arg1)
	return &MockStateGetApplicationStorageDirectivesCall{Call: call}
}

// MockStateGetApplicationStorageDirectivesCall wrap *gomock.Call
type MockStateGetApplicationStorageDirectivesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationStorageDirectivesCall) Return(arg0 []application0.StorageDirective, arg1 error) *MockStateGetApplicationStorageDirectivesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationStorageDirectivesCall) Do(f func(context.Context, application.UUID) ([]application0.StorageDirective, error)) *MockStateGetApplicationStorageDirectivesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationStorageDirectivesCall) DoAndReturn(f func(context.Context, application.UUID) ([]application0.StorageDirective, error)) *MockStateGetApplicationStorageDirectivesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelStoragePools mocks base method.
func (m *MockState) GetModelStoragePools(arg0 context.Context) (internal.ModelStoragePools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStoragePools", arg0)
	ret0, _ := ret[0].(internal.ModelStoragePools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStoragePools indicates an expected call of GetModelStoragePools.
func (mr *MockStateMockRecorder) GetModelStoragePools(arg0 any) *MockStateGetModelStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStoragePools", reflect.TypeOf((*MockState)(nil).GetModelStoragePools), arg0)
	return &MockStateGetModelStoragePoolsCall{Call: call}
}

// MockStateGetModelStoragePoolsCall wrap *gomock.Call
type MockStateGetModelStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelStoragePoolsCall) Return(arg0 internal.ModelStoragePools, arg1 error) *MockStateGetModelStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelStoragePoolsCall) Do(f func(context.Context) (internal.ModelStoragePools, error)) *MockStateGetModelStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelStoragePoolsCall) DoAndReturn(f func(context.Context) (internal.ModelStoragePools, error)) *MockStateGetModelStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageInstancesForProviderIDs mocks base method.
func (m *MockState) GetStorageInstancesForProviderIDs(arg0 context.Context, arg1 []string) ([]internal.StorageInstanceComposition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageInstancesForProviderIDs", arg0, arg1)
	ret0, _ := ret[0].([]internal.StorageInstanceComposition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageInstancesForProviderIDs indicates an expected call of GetStorageInstancesForProviderIDs.
func (mr *MockStateMockRecorder) GetStorageInstancesForProviderIDs(arg0, arg1 any) *MockStateGetStorageInstancesForProviderIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageInstancesForProviderIDs", reflect.TypeOf((*MockState)(nil).GetStorageInstancesForProviderIDs), arg0, arg1)
	return &MockStateGetStorageInstancesForProviderIDsCall{Call: call}
}

// MockStateGetStorageInstancesForProviderIDsCall wrap *gomock.Call
type MockStateGetStorageInstancesForProviderIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageInstancesForProviderIDsCall) Return(arg0 []internal.StorageInstanceComposition, arg1 error) *MockStateGetStorageInstancesForProviderIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageInstancesForProviderIDsCall) Do(f func(context.Context, []string) ([]internal.StorageInstanceComposition, error)) *MockStateGetStorageInstancesForProviderIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageInstancesForProviderIDsCall) DoAndReturn(f func(context.Context, []string) ([]internal.StorageInstanceComposition, error)) *MockStateGetStorageInstancesForProviderIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageUUIDByID mocks base method.
func (m *MockState) GetStorageUUIDByID(arg0 context.Context, arg1 storage.ID) (storage0.StorageInstanceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(storage0.StorageInstanceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageUUIDByID indicates an expected call of GetStorageUUIDByID.
func (mr *MockStateMockRecorder) GetStorageUUIDByID(arg0, arg1 any) *MockStateGetStorageUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageUUIDByID", reflect.TypeOf((*MockState)(nil).GetStorageUUIDByID), arg0, arg1)
	return &MockStateGetStorageUUIDByIDCall{Call: call}
}

// MockStateGetStorageUUIDByIDCall wrap *gomock.Call
type MockStateGetStorageUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStorageUUIDByIDCall) Return(arg0 storage0.StorageInstanceUUID, arg1 error) *MockStateGetStorageUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStorageUUIDByIDCall) Do(f func(context.Context, storage.ID) (storage0.StorageInstanceUUID, error)) *MockStateGetStorageUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStorageUUIDByIDCall) DoAndReturn(f func(context.Context, storage.ID) (storage0.StorageInstanceUUID, error)) *MockStateGetStorageUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitOwnedStorageInstances mocks base method.
func (m *MockState) GetUnitOwnedStorageInstances(arg0 context.Context, arg1 unit.UUID) ([]internal.StorageInstanceComposition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitOwnedStorageInstances", arg0, arg1)
	ret0, _ := ret[0].([]internal.StorageInstanceComposition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitOwnedStorageInstances indicates an expected call of GetUnitOwnedStorageInstances.
func (mr *MockStateMockRecorder) GetUnitOwnedStorageInstances(arg0, arg1 any) *MockStateGetUnitOwnedStorageInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitOwnedStorageInstances", reflect.TypeOf((*MockState)(nil).GetUnitOwnedStorageInstances), arg0, arg1)
	return &MockStateGetUnitOwnedStorageInstancesCall{Call: call}
}

// MockStateGetUnitOwnedStorageInstancesCall wrap *gomock.Call
type MockStateGetUnitOwnedStorageInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitOwnedStorageInstancesCall) Return(arg0 []internal.StorageInstanceComposition, arg1 error) *MockStateGetUnitOwnedStorageInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitOwnedStorageInstancesCall) Do(f func(context.Context, unit.UUID) ([]internal.StorageInstanceComposition, error)) *MockStateGetUnitOwnedStorageInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitOwnedStorageInstancesCall) DoAndReturn(f func(context.Context, unit.UUID) ([]internal.StorageInstanceComposition, error)) *MockStateGetUnitOwnedStorageInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitStorageDirectives mocks base method.
func (m *MockState) GetUnitStorageDirectives(arg0 context.Context, arg1 unit.UUID) ([]application0.StorageDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitStorageDirectives", arg0, arg1)
	ret0, _ := ret[0].([]application0.StorageDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitStorageDirectives indicates an expected call of GetUnitStorageDirectives.
func (mr *MockStateMockRecorder) GetUnitStorageDirectives(arg0, arg1 any) *MockStateGetUnitStorageDirectivesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitStorageDirectives", reflect.TypeOf((*MockState)(nil).GetUnitStorageDirectives), arg0, arg1)
	return &MockStateGetUnitStorageDirectivesCall{Call: call}
}

// MockStateGetUnitStorageDirectivesCall wrap *gomock.Call
type MockStateGetUnitStorageDirectivesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitStorageDirectivesCall) Return(arg0 []application0.StorageDirective, arg1 error) *MockStateGetUnitStorageDirectivesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitStorageDirectivesCall) Do(f func(context.Context, unit.UUID) ([]application0.StorageDirective, error)) *MockStateGetUnitStorageDirectivesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitStorageDirectivesCall) DoAndReturn(f func(context.Context, unit.UUID) ([]application0.StorageDirective, error)) *MockStateGetUnitStorageDirectivesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStoragePoolProvider is a mock of StoragePoolProvider interface.
type MockStoragePoolProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePoolProviderMockRecorder
}

// MockStoragePoolProviderMockRecorder is the mock recorder for MockStoragePoolProvider.
type MockStoragePoolProviderMockRecorder struct {
	mock *MockStoragePoolProvider
}

// NewMockStoragePoolProvider creates a new mock instance.
func NewMockStoragePoolProvider(ctrl *gomock.Controller) *MockStoragePoolProvider {
	mock := &MockStoragePoolProvider{ctrl: ctrl}
	mock.recorder = &MockStoragePoolProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePoolProvider) EXPECT() *MockStoragePoolProviderMockRecorder {
	return m.recorder
}

// CheckPoolSupportsCharmStorage mocks base method.
func (m *MockStoragePoolProvider) CheckPoolSupportsCharmStorage(arg0 context.Context, arg1 storage0.StoragePoolUUID, arg2 charm.StorageType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPoolSupportsCharmStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPoolSupportsCharmStorage indicates an expected call of CheckPoolSupportsCharmStorage.
func (mr *MockStoragePoolProviderMockRecorder) CheckPoolSupportsCharmStorage(arg0, arg1, arg2 any) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPoolSupportsCharmStorage", reflect.TypeOf((*MockStoragePoolProvider)(nil).CheckPoolSupportsCharmStorage), arg0, arg1, arg2)
	return &MockStoragePoolProviderCheckPoolSupportsCharmStorageCall{Call: call}
}

// MockStoragePoolProviderCheckPoolSupportsCharmStorageCall wrap *gomock.Call
type MockStoragePoolProviderCheckPoolSupportsCharmStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) Return(arg0 bool, arg1 error) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) Do(f func(context.Context, storage0.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) DoAndReturn(f func(context.Context, storage0.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderForPool mocks base method.
func (m *MockStoragePoolProvider) GetProviderForPool(arg0 context.Context, arg1 storage0.StoragePoolUUID) (storage1.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderForPool", arg0, arg1)
	ret0, _ := ret[0].(storage1.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderForPool indicates an expected call of GetProviderForPool.
func (mr *MockStoragePoolProviderMockRecorder) GetProviderForPool(arg0, arg1 any) *MockStoragePoolProviderGetProviderForPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderForPool", reflect.TypeOf((*MockStoragePoolProvider)(nil).GetProviderForPool), arg0, arg1)
	return &MockStoragePoolProviderGetProviderForPoolCall{Call: call}
}

// MockStoragePoolProviderGetProviderForPoolCall wrap *gomock.Call
type MockStoragePoolProviderGetProviderForPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolProviderGetProviderForPoolCall) Return(arg0 storage1.Provider, arg1 error) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolProviderGetProviderForPoolCall) Do(f func(context.Context, storage0.StoragePoolUUID) (storage1.Provider, error)) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolProviderGetProviderForPoolCall) DoAndReturn(f func(context.Context, storage0.StoragePoolUUID) (storage1.Provider, error)) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
