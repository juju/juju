// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/description/v10 (interfaces: CharmMetadata,CharmMetadataRelation,CharmMetadataStorage,CharmMetadataDevice,CharmMetadataResource,CharmMetadataContainer,CharmMetadataContainerMount,CharmManifest,CharmManifestBase,CharmActions,CharmAction,CharmConfigs,CharmConfig)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination description_mock_test.go github.com/juju/description/v10 CharmMetadata,CharmMetadataRelation,CharmMetadataStorage,CharmMetadataDevice,CharmMetadataResource,CharmMetadataContainer,CharmMetadataContainerMount,CharmManifest,CharmManifestBase,CharmActions,CharmAction,CharmConfigs,CharmConfig
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	reflect "reflect"

	description "github.com/juju/description/v10"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmMetadata is a mock of CharmMetadata interface.
type MockCharmMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetadataMockRecorder
}

// MockCharmMetadataMockRecorder is the mock recorder for MockCharmMetadata.
type MockCharmMetadataMockRecorder struct {
	mock *MockCharmMetadata
}

// NewMockCharmMetadata creates a new mock instance.
func NewMockCharmMetadata(ctrl *gomock.Controller) *MockCharmMetadata {
	mock := &MockCharmMetadata{ctrl: ctrl}
	mock.recorder = &MockCharmMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMetadata) EXPECT() *MockCharmMetadataMockRecorder {
	return m.recorder
}

// Assumes mocks base method.
func (m *MockCharmMetadata) Assumes() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assumes")
	ret0, _ := ret[0].(string)
	return ret0
}

// Assumes indicates an expected call of Assumes.
func (mr *MockCharmMetadataMockRecorder) Assumes() *MockCharmMetadataAssumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assumes", reflect.TypeOf((*MockCharmMetadata)(nil).Assumes))
	return &MockCharmMetadataAssumesCall{Call: call}
}

// MockCharmMetadataAssumesCall wrap *gomock.Call
type MockCharmMetadataAssumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataAssumesCall) Return(arg0 string) *MockCharmMetadataAssumesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataAssumesCall) Do(f func() string) *MockCharmMetadataAssumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataAssumesCall) DoAndReturn(f func() string) *MockCharmMetadataAssumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Categories mocks base method.
func (m *MockCharmMetadata) Categories() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Categories")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Categories indicates an expected call of Categories.
func (mr *MockCharmMetadataMockRecorder) Categories() *MockCharmMetadataCategoriesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Categories", reflect.TypeOf((*MockCharmMetadata)(nil).Categories))
	return &MockCharmMetadataCategoriesCall{Call: call}
}

// MockCharmMetadataCategoriesCall wrap *gomock.Call
type MockCharmMetadataCategoriesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataCategoriesCall) Return(arg0 []string) *MockCharmMetadataCategoriesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataCategoriesCall) Do(f func() []string) *MockCharmMetadataCategoriesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataCategoriesCall) DoAndReturn(f func() []string) *MockCharmMetadataCategoriesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Containers mocks base method.
func (m *MockCharmMetadata) Containers() map[string]description.CharmMetadataContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers")
	ret0, _ := ret[0].(map[string]description.CharmMetadataContainer)
	return ret0
}

// Containers indicates an expected call of Containers.
func (mr *MockCharmMetadataMockRecorder) Containers() *MockCharmMetadataContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockCharmMetadata)(nil).Containers))
	return &MockCharmMetadataContainersCall{Call: call}
}

// MockCharmMetadataContainersCall wrap *gomock.Call
type MockCharmMetadataContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataContainersCall) Return(arg0 map[string]description.CharmMetadataContainer) *MockCharmMetadataContainersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataContainersCall) Do(f func() map[string]description.CharmMetadataContainer) *MockCharmMetadataContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataContainersCall) DoAndReturn(f func() map[string]description.CharmMetadataContainer) *MockCharmMetadataContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Description mocks base method.
func (m *MockCharmMetadata) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockCharmMetadataMockRecorder) Description() *MockCharmMetadataDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCharmMetadata)(nil).Description))
	return &MockCharmMetadataDescriptionCall{Call: call}
}

// MockCharmMetadataDescriptionCall wrap *gomock.Call
type MockCharmMetadataDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataDescriptionCall) Return(arg0 string) *MockCharmMetadataDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataDescriptionCall) Do(f func() string) *MockCharmMetadataDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataDescriptionCall) DoAndReturn(f func() string) *MockCharmMetadataDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Devices mocks base method.
func (m *MockCharmMetadata) Devices() map[string]description.CharmMetadataDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Devices")
	ret0, _ := ret[0].(map[string]description.CharmMetadataDevice)
	return ret0
}

// Devices indicates an expected call of Devices.
func (mr *MockCharmMetadataMockRecorder) Devices() *MockCharmMetadataDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockCharmMetadata)(nil).Devices))
	return &MockCharmMetadataDevicesCall{Call: call}
}

// MockCharmMetadataDevicesCall wrap *gomock.Call
type MockCharmMetadataDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataDevicesCall) Return(arg0 map[string]description.CharmMetadataDevice) *MockCharmMetadataDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataDevicesCall) Do(f func() map[string]description.CharmMetadataDevice) *MockCharmMetadataDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataDevicesCall) DoAndReturn(f func() map[string]description.CharmMetadataDevice) *MockCharmMetadataDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtraBindings mocks base method.
func (m *MockCharmMetadata) ExtraBindings() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtraBindings")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ExtraBindings indicates an expected call of ExtraBindings.
func (mr *MockCharmMetadataMockRecorder) ExtraBindings() *MockCharmMetadataExtraBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtraBindings", reflect.TypeOf((*MockCharmMetadata)(nil).ExtraBindings))
	return &MockCharmMetadataExtraBindingsCall{Call: call}
}

// MockCharmMetadataExtraBindingsCall wrap *gomock.Call
type MockCharmMetadataExtraBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataExtraBindingsCall) Return(arg0 map[string]string) *MockCharmMetadataExtraBindingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataExtraBindingsCall) Do(f func() map[string]string) *MockCharmMetadataExtraBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataExtraBindingsCall) DoAndReturn(f func() map[string]string) *MockCharmMetadataExtraBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LXDProfile mocks base method.
func (m *MockCharmMetadata) LXDProfile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfile")
	ret0, _ := ret[0].(string)
	return ret0
}

// LXDProfile indicates an expected call of LXDProfile.
func (mr *MockCharmMetadataMockRecorder) LXDProfile() *MockCharmMetadataLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfile", reflect.TypeOf((*MockCharmMetadata)(nil).LXDProfile))
	return &MockCharmMetadataLXDProfileCall{Call: call}
}

// MockCharmMetadataLXDProfileCall wrap *gomock.Call
type MockCharmMetadataLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataLXDProfileCall) Return(arg0 string) *MockCharmMetadataLXDProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataLXDProfileCall) Do(f func() string) *MockCharmMetadataLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataLXDProfileCall) DoAndReturn(f func() string) *MockCharmMetadataLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MinJujuVersion mocks base method.
func (m *MockCharmMetadata) MinJujuVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinJujuVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// MinJujuVersion indicates an expected call of MinJujuVersion.
func (mr *MockCharmMetadataMockRecorder) MinJujuVersion() *MockCharmMetadataMinJujuVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinJujuVersion", reflect.TypeOf((*MockCharmMetadata)(nil).MinJujuVersion))
	return &MockCharmMetadataMinJujuVersionCall{Call: call}
}

// MockCharmMetadataMinJujuVersionCall wrap *gomock.Call
type MockCharmMetadataMinJujuVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataMinJujuVersionCall) Return(arg0 string) *MockCharmMetadataMinJujuVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataMinJujuVersionCall) Do(f func() string) *MockCharmMetadataMinJujuVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataMinJujuVersionCall) DoAndReturn(f func() string) *MockCharmMetadataMinJujuVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockCharmMetadata) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCharmMetadataMockRecorder) Name() *MockCharmMetadataNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCharmMetadata)(nil).Name))
	return &MockCharmMetadataNameCall{Call: call}
}

// MockCharmMetadataNameCall wrap *gomock.Call
type MockCharmMetadataNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataNameCall) Return(arg0 string) *MockCharmMetadataNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataNameCall) Do(f func() string) *MockCharmMetadataNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataNameCall) DoAndReturn(f func() string) *MockCharmMetadataNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Payloads mocks base method.
func (m *MockCharmMetadata) Payloads() map[string]description.CharmMetadataPayload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payloads")
	ret0, _ := ret[0].(map[string]description.CharmMetadataPayload)
	return ret0
}

// Payloads indicates an expected call of Payloads.
func (mr *MockCharmMetadataMockRecorder) Payloads() *MockCharmMetadataPayloadsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payloads", reflect.TypeOf((*MockCharmMetadata)(nil).Payloads))
	return &MockCharmMetadataPayloadsCall{Call: call}
}

// MockCharmMetadataPayloadsCall wrap *gomock.Call
type MockCharmMetadataPayloadsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataPayloadsCall) Return(arg0 map[string]description.CharmMetadataPayload) *MockCharmMetadataPayloadsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataPayloadsCall) Do(f func() map[string]description.CharmMetadataPayload) *MockCharmMetadataPayloadsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataPayloadsCall) DoAndReturn(f func() map[string]description.CharmMetadataPayload) *MockCharmMetadataPayloadsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Peers mocks base method.
func (m *MockCharmMetadata) Peers() map[string]description.CharmMetadataRelation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].(map[string]description.CharmMetadataRelation)
	return ret0
}

// Peers indicates an expected call of Peers.
func (mr *MockCharmMetadataMockRecorder) Peers() *MockCharmMetadataPeersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockCharmMetadata)(nil).Peers))
	return &MockCharmMetadataPeersCall{Call: call}
}

// MockCharmMetadataPeersCall wrap *gomock.Call
type MockCharmMetadataPeersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataPeersCall) Return(arg0 map[string]description.CharmMetadataRelation) *MockCharmMetadataPeersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataPeersCall) Do(f func() map[string]description.CharmMetadataRelation) *MockCharmMetadataPeersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataPeersCall) DoAndReturn(f func() map[string]description.CharmMetadataRelation) *MockCharmMetadataPeersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Provides mocks base method.
func (m *MockCharmMetadata) Provides() map[string]description.CharmMetadataRelation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provides")
	ret0, _ := ret[0].(map[string]description.CharmMetadataRelation)
	return ret0
}

// Provides indicates an expected call of Provides.
func (mr *MockCharmMetadataMockRecorder) Provides() *MockCharmMetadataProvidesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provides", reflect.TypeOf((*MockCharmMetadata)(nil).Provides))
	return &MockCharmMetadataProvidesCall{Call: call}
}

// MockCharmMetadataProvidesCall wrap *gomock.Call
type MockCharmMetadataProvidesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataProvidesCall) Return(arg0 map[string]description.CharmMetadataRelation) *MockCharmMetadataProvidesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataProvidesCall) Do(f func() map[string]description.CharmMetadataRelation) *MockCharmMetadataProvidesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataProvidesCall) DoAndReturn(f func() map[string]description.CharmMetadataRelation) *MockCharmMetadataProvidesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Requires mocks base method.
func (m *MockCharmMetadata) Requires() map[string]description.CharmMetadataRelation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requires")
	ret0, _ := ret[0].(map[string]description.CharmMetadataRelation)
	return ret0
}

// Requires indicates an expected call of Requires.
func (mr *MockCharmMetadataMockRecorder) Requires() *MockCharmMetadataRequiresCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requires", reflect.TypeOf((*MockCharmMetadata)(nil).Requires))
	return &MockCharmMetadataRequiresCall{Call: call}
}

// MockCharmMetadataRequiresCall wrap *gomock.Call
type MockCharmMetadataRequiresCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRequiresCall) Return(arg0 map[string]description.CharmMetadataRelation) *MockCharmMetadataRequiresCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRequiresCall) Do(f func() map[string]description.CharmMetadataRelation) *MockCharmMetadataRequiresCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRequiresCall) DoAndReturn(f func() map[string]description.CharmMetadataRelation) *MockCharmMetadataRequiresCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resources mocks base method.
func (m *MockCharmMetadata) Resources() map[string]description.CharmMetadataResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resources")
	ret0, _ := ret[0].(map[string]description.CharmMetadataResource)
	return ret0
}

// Resources indicates an expected call of Resources.
func (mr *MockCharmMetadataMockRecorder) Resources() *MockCharmMetadataResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resources", reflect.TypeOf((*MockCharmMetadata)(nil).Resources))
	return &MockCharmMetadataResourcesCall{Call: call}
}

// MockCharmMetadataResourcesCall wrap *gomock.Call
type MockCharmMetadataResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataResourcesCall) Return(arg0 map[string]description.CharmMetadataResource) *MockCharmMetadataResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataResourcesCall) Do(f func() map[string]description.CharmMetadataResource) *MockCharmMetadataResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataResourcesCall) DoAndReturn(f func() map[string]description.CharmMetadataResource) *MockCharmMetadataResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunAs mocks base method.
func (m *MockCharmMetadata) RunAs() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAs")
	ret0, _ := ret[0].(string)
	return ret0
}

// RunAs indicates an expected call of RunAs.
func (mr *MockCharmMetadataMockRecorder) RunAs() *MockCharmMetadataRunAsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAs", reflect.TypeOf((*MockCharmMetadata)(nil).RunAs))
	return &MockCharmMetadataRunAsCall{Call: call}
}

// MockCharmMetadataRunAsCall wrap *gomock.Call
type MockCharmMetadataRunAsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRunAsCall) Return(arg0 string) *MockCharmMetadataRunAsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRunAsCall) Do(f func() string) *MockCharmMetadataRunAsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRunAsCall) DoAndReturn(f func() string) *MockCharmMetadataRunAsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storage mocks base method.
func (m *MockCharmMetadata) Storage() map[string]description.CharmMetadataStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(map[string]description.CharmMetadataStorage)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockCharmMetadataMockRecorder) Storage() *MockCharmMetadataStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockCharmMetadata)(nil).Storage))
	return &MockCharmMetadataStorageCall{Call: call}
}

// MockCharmMetadataStorageCall wrap *gomock.Call
type MockCharmMetadataStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageCall) Return(arg0 map[string]description.CharmMetadataStorage) *MockCharmMetadataStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageCall) Do(f func() map[string]description.CharmMetadataStorage) *MockCharmMetadataStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageCall) DoAndReturn(f func() map[string]description.CharmMetadataStorage) *MockCharmMetadataStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subordinate mocks base method.
func (m *MockCharmMetadata) Subordinate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subordinate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Subordinate indicates an expected call of Subordinate.
func (mr *MockCharmMetadataMockRecorder) Subordinate() *MockCharmMetadataSubordinateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subordinate", reflect.TypeOf((*MockCharmMetadata)(nil).Subordinate))
	return &MockCharmMetadataSubordinateCall{Call: call}
}

// MockCharmMetadataSubordinateCall wrap *gomock.Call
type MockCharmMetadataSubordinateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataSubordinateCall) Return(arg0 bool) *MockCharmMetadataSubordinateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataSubordinateCall) Do(f func() bool) *MockCharmMetadataSubordinateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataSubordinateCall) DoAndReturn(f func() bool) *MockCharmMetadataSubordinateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Summary mocks base method.
func (m *MockCharmMetadata) Summary() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(string)
	return ret0
}

// Summary indicates an expected call of Summary.
func (mr *MockCharmMetadataMockRecorder) Summary() *MockCharmMetadataSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockCharmMetadata)(nil).Summary))
	return &MockCharmMetadataSummaryCall{Call: call}
}

// MockCharmMetadataSummaryCall wrap *gomock.Call
type MockCharmMetadataSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataSummaryCall) Return(arg0 string) *MockCharmMetadataSummaryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataSummaryCall) Do(f func() string) *MockCharmMetadataSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataSummaryCall) DoAndReturn(f func() string) *MockCharmMetadataSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tags mocks base method.
func (m *MockCharmMetadata) Tags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockCharmMetadataMockRecorder) Tags() *MockCharmMetadataTagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockCharmMetadata)(nil).Tags))
	return &MockCharmMetadataTagsCall{Call: call}
}

// MockCharmMetadataTagsCall wrap *gomock.Call
type MockCharmMetadataTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataTagsCall) Return(arg0 []string) *MockCharmMetadataTagsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataTagsCall) Do(f func() []string) *MockCharmMetadataTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataTagsCall) DoAndReturn(f func() []string) *MockCharmMetadataTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Terms mocks base method.
func (m *MockCharmMetadata) Terms() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terms")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Terms indicates an expected call of Terms.
func (mr *MockCharmMetadataMockRecorder) Terms() *MockCharmMetadataTermsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terms", reflect.TypeOf((*MockCharmMetadata)(nil).Terms))
	return &MockCharmMetadataTermsCall{Call: call}
}

// MockCharmMetadataTermsCall wrap *gomock.Call
type MockCharmMetadataTermsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataTermsCall) Return(arg0 []string) *MockCharmMetadataTermsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataTermsCall) Do(f func() []string) *MockCharmMetadataTermsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataTermsCall) DoAndReturn(f func() []string) *MockCharmMetadataTermsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmMetadataRelation is a mock of CharmMetadataRelation interface.
type MockCharmMetadataRelation struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetadataRelationMockRecorder
}

// MockCharmMetadataRelationMockRecorder is the mock recorder for MockCharmMetadataRelation.
type MockCharmMetadataRelationMockRecorder struct {
	mock *MockCharmMetadataRelation
}

// NewMockCharmMetadataRelation creates a new mock instance.
func NewMockCharmMetadataRelation(ctrl *gomock.Controller) *MockCharmMetadataRelation {
	mock := &MockCharmMetadataRelation{ctrl: ctrl}
	mock.recorder = &MockCharmMetadataRelationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMetadataRelation) EXPECT() *MockCharmMetadataRelationMockRecorder {
	return m.recorder
}

// Interface mocks base method.
func (m *MockCharmMetadataRelation) Interface() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interface")
	ret0, _ := ret[0].(string)
	return ret0
}

// Interface indicates an expected call of Interface.
func (mr *MockCharmMetadataRelationMockRecorder) Interface() *MockCharmMetadataRelationInterfaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interface", reflect.TypeOf((*MockCharmMetadataRelation)(nil).Interface))
	return &MockCharmMetadataRelationInterfaceCall{Call: call}
}

// MockCharmMetadataRelationInterfaceCall wrap *gomock.Call
type MockCharmMetadataRelationInterfaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRelationInterfaceCall) Return(arg0 string) *MockCharmMetadataRelationInterfaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRelationInterfaceCall) Do(f func() string) *MockCharmMetadataRelationInterfaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRelationInterfaceCall) DoAndReturn(f func() string) *MockCharmMetadataRelationInterfaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Limit mocks base method.
func (m *MockCharmMetadataRelation) Limit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit")
	ret0, _ := ret[0].(int)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockCharmMetadataRelationMockRecorder) Limit() *MockCharmMetadataRelationLimitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockCharmMetadataRelation)(nil).Limit))
	return &MockCharmMetadataRelationLimitCall{Call: call}
}

// MockCharmMetadataRelationLimitCall wrap *gomock.Call
type MockCharmMetadataRelationLimitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRelationLimitCall) Return(arg0 int) *MockCharmMetadataRelationLimitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRelationLimitCall) Do(f func() int) *MockCharmMetadataRelationLimitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRelationLimitCall) DoAndReturn(f func() int) *MockCharmMetadataRelationLimitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockCharmMetadataRelation) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCharmMetadataRelationMockRecorder) Name() *MockCharmMetadataRelationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCharmMetadataRelation)(nil).Name))
	return &MockCharmMetadataRelationNameCall{Call: call}
}

// MockCharmMetadataRelationNameCall wrap *gomock.Call
type MockCharmMetadataRelationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRelationNameCall) Return(arg0 string) *MockCharmMetadataRelationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRelationNameCall) Do(f func() string) *MockCharmMetadataRelationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRelationNameCall) DoAndReturn(f func() string) *MockCharmMetadataRelationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Optional mocks base method.
func (m *MockCharmMetadataRelation) Optional() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Optional")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Optional indicates an expected call of Optional.
func (mr *MockCharmMetadataRelationMockRecorder) Optional() *MockCharmMetadataRelationOptionalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Optional", reflect.TypeOf((*MockCharmMetadataRelation)(nil).Optional))
	return &MockCharmMetadataRelationOptionalCall{Call: call}
}

// MockCharmMetadataRelationOptionalCall wrap *gomock.Call
type MockCharmMetadataRelationOptionalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRelationOptionalCall) Return(arg0 bool) *MockCharmMetadataRelationOptionalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRelationOptionalCall) Do(f func() bool) *MockCharmMetadataRelationOptionalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRelationOptionalCall) DoAndReturn(f func() bool) *MockCharmMetadataRelationOptionalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Role mocks base method.
func (m *MockCharmMetadataRelation) Role() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role")
	ret0, _ := ret[0].(string)
	return ret0
}

// Role indicates an expected call of Role.
func (mr *MockCharmMetadataRelationMockRecorder) Role() *MockCharmMetadataRelationRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockCharmMetadataRelation)(nil).Role))
	return &MockCharmMetadataRelationRoleCall{Call: call}
}

// MockCharmMetadataRelationRoleCall wrap *gomock.Call
type MockCharmMetadataRelationRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRelationRoleCall) Return(arg0 string) *MockCharmMetadataRelationRoleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRelationRoleCall) Do(f func() string) *MockCharmMetadataRelationRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRelationRoleCall) DoAndReturn(f func() string) *MockCharmMetadataRelationRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Scope mocks base method.
func (m *MockCharmMetadataRelation) Scope() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scope")
	ret0, _ := ret[0].(string)
	return ret0
}

// Scope indicates an expected call of Scope.
func (mr *MockCharmMetadataRelationMockRecorder) Scope() *MockCharmMetadataRelationScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockCharmMetadataRelation)(nil).Scope))
	return &MockCharmMetadataRelationScopeCall{Call: call}
}

// MockCharmMetadataRelationScopeCall wrap *gomock.Call
type MockCharmMetadataRelationScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataRelationScopeCall) Return(arg0 string) *MockCharmMetadataRelationScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataRelationScopeCall) Do(f func() string) *MockCharmMetadataRelationScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataRelationScopeCall) DoAndReturn(f func() string) *MockCharmMetadataRelationScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmMetadataStorage is a mock of CharmMetadataStorage interface.
type MockCharmMetadataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetadataStorageMockRecorder
}

// MockCharmMetadataStorageMockRecorder is the mock recorder for MockCharmMetadataStorage.
type MockCharmMetadataStorageMockRecorder struct {
	mock *MockCharmMetadataStorage
}

// NewMockCharmMetadataStorage creates a new mock instance.
func NewMockCharmMetadataStorage(ctrl *gomock.Controller) *MockCharmMetadataStorage {
	mock := &MockCharmMetadataStorage{ctrl: ctrl}
	mock.recorder = &MockCharmMetadataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMetadataStorage) EXPECT() *MockCharmMetadataStorageMockRecorder {
	return m.recorder
}

// CountMax mocks base method.
func (m *MockCharmMetadataStorage) CountMax() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMax")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountMax indicates an expected call of CountMax.
func (mr *MockCharmMetadataStorageMockRecorder) CountMax() *MockCharmMetadataStorageCountMaxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMax", reflect.TypeOf((*MockCharmMetadataStorage)(nil).CountMax))
	return &MockCharmMetadataStorageCountMaxCall{Call: call}
}

// MockCharmMetadataStorageCountMaxCall wrap *gomock.Call
type MockCharmMetadataStorageCountMaxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageCountMaxCall) Return(arg0 int) *MockCharmMetadataStorageCountMaxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageCountMaxCall) Do(f func() int) *MockCharmMetadataStorageCountMaxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageCountMaxCall) DoAndReturn(f func() int) *MockCharmMetadataStorageCountMaxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountMin mocks base method.
func (m *MockCharmMetadataStorage) CountMin() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMin")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountMin indicates an expected call of CountMin.
func (mr *MockCharmMetadataStorageMockRecorder) CountMin() *MockCharmMetadataStorageCountMinCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMin", reflect.TypeOf((*MockCharmMetadataStorage)(nil).CountMin))
	return &MockCharmMetadataStorageCountMinCall{Call: call}
}

// MockCharmMetadataStorageCountMinCall wrap *gomock.Call
type MockCharmMetadataStorageCountMinCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageCountMinCall) Return(arg0 int) *MockCharmMetadataStorageCountMinCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageCountMinCall) Do(f func() int) *MockCharmMetadataStorageCountMinCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageCountMinCall) DoAndReturn(f func() int) *MockCharmMetadataStorageCountMinCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Description mocks base method.
func (m *MockCharmMetadataStorage) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockCharmMetadataStorageMockRecorder) Description() *MockCharmMetadataStorageDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCharmMetadataStorage)(nil).Description))
	return &MockCharmMetadataStorageDescriptionCall{Call: call}
}

// MockCharmMetadataStorageDescriptionCall wrap *gomock.Call
type MockCharmMetadataStorageDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageDescriptionCall) Return(arg0 string) *MockCharmMetadataStorageDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageDescriptionCall) Do(f func() string) *MockCharmMetadataStorageDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageDescriptionCall) DoAndReturn(f func() string) *MockCharmMetadataStorageDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Location mocks base method.
func (m *MockCharmMetadataStorage) Location() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(string)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockCharmMetadataStorageMockRecorder) Location() *MockCharmMetadataStorageLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockCharmMetadataStorage)(nil).Location))
	return &MockCharmMetadataStorageLocationCall{Call: call}
}

// MockCharmMetadataStorageLocationCall wrap *gomock.Call
type MockCharmMetadataStorageLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageLocationCall) Return(arg0 string) *MockCharmMetadataStorageLocationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageLocationCall) Do(f func() string) *MockCharmMetadataStorageLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageLocationCall) DoAndReturn(f func() string) *MockCharmMetadataStorageLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MinimumSize mocks base method.
func (m *MockCharmMetadataStorage) MinimumSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinimumSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// MinimumSize indicates an expected call of MinimumSize.
func (mr *MockCharmMetadataStorageMockRecorder) MinimumSize() *MockCharmMetadataStorageMinimumSizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinimumSize", reflect.TypeOf((*MockCharmMetadataStorage)(nil).MinimumSize))
	return &MockCharmMetadataStorageMinimumSizeCall{Call: call}
}

// MockCharmMetadataStorageMinimumSizeCall wrap *gomock.Call
type MockCharmMetadataStorageMinimumSizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageMinimumSizeCall) Return(arg0 int) *MockCharmMetadataStorageMinimumSizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageMinimumSizeCall) Do(f func() int) *MockCharmMetadataStorageMinimumSizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageMinimumSizeCall) DoAndReturn(f func() int) *MockCharmMetadataStorageMinimumSizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockCharmMetadataStorage) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCharmMetadataStorageMockRecorder) Name() *MockCharmMetadataStorageNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCharmMetadataStorage)(nil).Name))
	return &MockCharmMetadataStorageNameCall{Call: call}
}

// MockCharmMetadataStorageNameCall wrap *gomock.Call
type MockCharmMetadataStorageNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageNameCall) Return(arg0 string) *MockCharmMetadataStorageNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageNameCall) Do(f func() string) *MockCharmMetadataStorageNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageNameCall) DoAndReturn(f func() string) *MockCharmMetadataStorageNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Properties mocks base method.
func (m *MockCharmMetadataStorage) Properties() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Properties indicates an expected call of Properties.
func (mr *MockCharmMetadataStorageMockRecorder) Properties() *MockCharmMetadataStoragePropertiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockCharmMetadataStorage)(nil).Properties))
	return &MockCharmMetadataStoragePropertiesCall{Call: call}
}

// MockCharmMetadataStoragePropertiesCall wrap *gomock.Call
type MockCharmMetadataStoragePropertiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStoragePropertiesCall) Return(arg0 []string) *MockCharmMetadataStoragePropertiesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStoragePropertiesCall) Do(f func() []string) *MockCharmMetadataStoragePropertiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStoragePropertiesCall) DoAndReturn(f func() []string) *MockCharmMetadataStoragePropertiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Readonly mocks base method.
func (m *MockCharmMetadataStorage) Readonly() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readonly")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Readonly indicates an expected call of Readonly.
func (mr *MockCharmMetadataStorageMockRecorder) Readonly() *MockCharmMetadataStorageReadonlyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readonly", reflect.TypeOf((*MockCharmMetadataStorage)(nil).Readonly))
	return &MockCharmMetadataStorageReadonlyCall{Call: call}
}

// MockCharmMetadataStorageReadonlyCall wrap *gomock.Call
type MockCharmMetadataStorageReadonlyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageReadonlyCall) Return(arg0 bool) *MockCharmMetadataStorageReadonlyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageReadonlyCall) Do(f func() bool) *MockCharmMetadataStorageReadonlyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageReadonlyCall) DoAndReturn(f func() bool) *MockCharmMetadataStorageReadonlyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shared mocks base method.
func (m *MockCharmMetadataStorage) Shared() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shared")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Shared indicates an expected call of Shared.
func (mr *MockCharmMetadataStorageMockRecorder) Shared() *MockCharmMetadataStorageSharedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shared", reflect.TypeOf((*MockCharmMetadataStorage)(nil).Shared))
	return &MockCharmMetadataStorageSharedCall{Call: call}
}

// MockCharmMetadataStorageSharedCall wrap *gomock.Call
type MockCharmMetadataStorageSharedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageSharedCall) Return(arg0 bool) *MockCharmMetadataStorageSharedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageSharedCall) Do(f func() bool) *MockCharmMetadataStorageSharedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageSharedCall) DoAndReturn(f func() bool) *MockCharmMetadataStorageSharedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockCharmMetadataStorage) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockCharmMetadataStorageMockRecorder) Type() *MockCharmMetadataStorageTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCharmMetadataStorage)(nil).Type))
	return &MockCharmMetadataStorageTypeCall{Call: call}
}

// MockCharmMetadataStorageTypeCall wrap *gomock.Call
type MockCharmMetadataStorageTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataStorageTypeCall) Return(arg0 string) *MockCharmMetadataStorageTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataStorageTypeCall) Do(f func() string) *MockCharmMetadataStorageTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataStorageTypeCall) DoAndReturn(f func() string) *MockCharmMetadataStorageTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmMetadataDevice is a mock of CharmMetadataDevice interface.
type MockCharmMetadataDevice struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetadataDeviceMockRecorder
}

// MockCharmMetadataDeviceMockRecorder is the mock recorder for MockCharmMetadataDevice.
type MockCharmMetadataDeviceMockRecorder struct {
	mock *MockCharmMetadataDevice
}

// NewMockCharmMetadataDevice creates a new mock instance.
func NewMockCharmMetadataDevice(ctrl *gomock.Controller) *MockCharmMetadataDevice {
	mock := &MockCharmMetadataDevice{ctrl: ctrl}
	mock.recorder = &MockCharmMetadataDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMetadataDevice) EXPECT() *MockCharmMetadataDeviceMockRecorder {
	return m.recorder
}

// CountMax mocks base method.
func (m *MockCharmMetadataDevice) CountMax() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMax")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountMax indicates an expected call of CountMax.
func (mr *MockCharmMetadataDeviceMockRecorder) CountMax() *MockCharmMetadataDeviceCountMaxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMax", reflect.TypeOf((*MockCharmMetadataDevice)(nil).CountMax))
	return &MockCharmMetadataDeviceCountMaxCall{Call: call}
}

// MockCharmMetadataDeviceCountMaxCall wrap *gomock.Call
type MockCharmMetadataDeviceCountMaxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataDeviceCountMaxCall) Return(arg0 int) *MockCharmMetadataDeviceCountMaxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataDeviceCountMaxCall) Do(f func() int) *MockCharmMetadataDeviceCountMaxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataDeviceCountMaxCall) DoAndReturn(f func() int) *MockCharmMetadataDeviceCountMaxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountMin mocks base method.
func (m *MockCharmMetadataDevice) CountMin() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMin")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountMin indicates an expected call of CountMin.
func (mr *MockCharmMetadataDeviceMockRecorder) CountMin() *MockCharmMetadataDeviceCountMinCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMin", reflect.TypeOf((*MockCharmMetadataDevice)(nil).CountMin))
	return &MockCharmMetadataDeviceCountMinCall{Call: call}
}

// MockCharmMetadataDeviceCountMinCall wrap *gomock.Call
type MockCharmMetadataDeviceCountMinCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataDeviceCountMinCall) Return(arg0 int) *MockCharmMetadataDeviceCountMinCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataDeviceCountMinCall) Do(f func() int) *MockCharmMetadataDeviceCountMinCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataDeviceCountMinCall) DoAndReturn(f func() int) *MockCharmMetadataDeviceCountMinCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Description mocks base method.
func (m *MockCharmMetadataDevice) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockCharmMetadataDeviceMockRecorder) Description() *MockCharmMetadataDeviceDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCharmMetadataDevice)(nil).Description))
	return &MockCharmMetadataDeviceDescriptionCall{Call: call}
}

// MockCharmMetadataDeviceDescriptionCall wrap *gomock.Call
type MockCharmMetadataDeviceDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataDeviceDescriptionCall) Return(arg0 string) *MockCharmMetadataDeviceDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataDeviceDescriptionCall) Do(f func() string) *MockCharmMetadataDeviceDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataDeviceDescriptionCall) DoAndReturn(f func() string) *MockCharmMetadataDeviceDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockCharmMetadataDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCharmMetadataDeviceMockRecorder) Name() *MockCharmMetadataDeviceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCharmMetadataDevice)(nil).Name))
	return &MockCharmMetadataDeviceNameCall{Call: call}
}

// MockCharmMetadataDeviceNameCall wrap *gomock.Call
type MockCharmMetadataDeviceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataDeviceNameCall) Return(arg0 string) *MockCharmMetadataDeviceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataDeviceNameCall) Do(f func() string) *MockCharmMetadataDeviceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataDeviceNameCall) DoAndReturn(f func() string) *MockCharmMetadataDeviceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockCharmMetadataDevice) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockCharmMetadataDeviceMockRecorder) Type() *MockCharmMetadataDeviceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCharmMetadataDevice)(nil).Type))
	return &MockCharmMetadataDeviceTypeCall{Call: call}
}

// MockCharmMetadataDeviceTypeCall wrap *gomock.Call
type MockCharmMetadataDeviceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataDeviceTypeCall) Return(arg0 string) *MockCharmMetadataDeviceTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataDeviceTypeCall) Do(f func() string) *MockCharmMetadataDeviceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataDeviceTypeCall) DoAndReturn(f func() string) *MockCharmMetadataDeviceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmMetadataResource is a mock of CharmMetadataResource interface.
type MockCharmMetadataResource struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetadataResourceMockRecorder
}

// MockCharmMetadataResourceMockRecorder is the mock recorder for MockCharmMetadataResource.
type MockCharmMetadataResourceMockRecorder struct {
	mock *MockCharmMetadataResource
}

// NewMockCharmMetadataResource creates a new mock instance.
func NewMockCharmMetadataResource(ctrl *gomock.Controller) *MockCharmMetadataResource {
	mock := &MockCharmMetadataResource{ctrl: ctrl}
	mock.recorder = &MockCharmMetadataResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMetadataResource) EXPECT() *MockCharmMetadataResourceMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockCharmMetadataResource) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockCharmMetadataResourceMockRecorder) Description() *MockCharmMetadataResourceDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCharmMetadataResource)(nil).Description))
	return &MockCharmMetadataResourceDescriptionCall{Call: call}
}

// MockCharmMetadataResourceDescriptionCall wrap *gomock.Call
type MockCharmMetadataResourceDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataResourceDescriptionCall) Return(arg0 string) *MockCharmMetadataResourceDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataResourceDescriptionCall) Do(f func() string) *MockCharmMetadataResourceDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataResourceDescriptionCall) DoAndReturn(f func() string) *MockCharmMetadataResourceDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockCharmMetadataResource) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCharmMetadataResourceMockRecorder) Name() *MockCharmMetadataResourceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCharmMetadataResource)(nil).Name))
	return &MockCharmMetadataResourceNameCall{Call: call}
}

// MockCharmMetadataResourceNameCall wrap *gomock.Call
type MockCharmMetadataResourceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataResourceNameCall) Return(arg0 string) *MockCharmMetadataResourceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataResourceNameCall) Do(f func() string) *MockCharmMetadataResourceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataResourceNameCall) DoAndReturn(f func() string) *MockCharmMetadataResourceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Path mocks base method.
func (m *MockCharmMetadataResource) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockCharmMetadataResourceMockRecorder) Path() *MockCharmMetadataResourcePathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockCharmMetadataResource)(nil).Path))
	return &MockCharmMetadataResourcePathCall{Call: call}
}

// MockCharmMetadataResourcePathCall wrap *gomock.Call
type MockCharmMetadataResourcePathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataResourcePathCall) Return(arg0 string) *MockCharmMetadataResourcePathCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataResourcePathCall) Do(f func() string) *MockCharmMetadataResourcePathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataResourcePathCall) DoAndReturn(f func() string) *MockCharmMetadataResourcePathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockCharmMetadataResource) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockCharmMetadataResourceMockRecorder) Type() *MockCharmMetadataResourceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCharmMetadataResource)(nil).Type))
	return &MockCharmMetadataResourceTypeCall{Call: call}
}

// MockCharmMetadataResourceTypeCall wrap *gomock.Call
type MockCharmMetadataResourceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataResourceTypeCall) Return(arg0 string) *MockCharmMetadataResourceTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataResourceTypeCall) Do(f func() string) *MockCharmMetadataResourceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataResourceTypeCall) DoAndReturn(f func() string) *MockCharmMetadataResourceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmMetadataContainer is a mock of CharmMetadataContainer interface.
type MockCharmMetadataContainer struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetadataContainerMockRecorder
}

// MockCharmMetadataContainerMockRecorder is the mock recorder for MockCharmMetadataContainer.
type MockCharmMetadataContainerMockRecorder struct {
	mock *MockCharmMetadataContainer
}

// NewMockCharmMetadataContainer creates a new mock instance.
func NewMockCharmMetadataContainer(ctrl *gomock.Controller) *MockCharmMetadataContainer {
	mock := &MockCharmMetadataContainer{ctrl: ctrl}
	mock.recorder = &MockCharmMetadataContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMetadataContainer) EXPECT() *MockCharmMetadataContainerMockRecorder {
	return m.recorder
}

// Gid mocks base method.
func (m *MockCharmMetadataContainer) Gid() *int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gid")
	ret0, _ := ret[0].(*int)
	return ret0
}

// Gid indicates an expected call of Gid.
func (mr *MockCharmMetadataContainerMockRecorder) Gid() *MockCharmMetadataContainerGidCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gid", reflect.TypeOf((*MockCharmMetadataContainer)(nil).Gid))
	return &MockCharmMetadataContainerGidCall{Call: call}
}

// MockCharmMetadataContainerGidCall wrap *gomock.Call
type MockCharmMetadataContainerGidCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataContainerGidCall) Return(arg0 *int) *MockCharmMetadataContainerGidCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataContainerGidCall) Do(f func() *int) *MockCharmMetadataContainerGidCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataContainerGidCall) DoAndReturn(f func() *int) *MockCharmMetadataContainerGidCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mounts mocks base method.
func (m *MockCharmMetadataContainer) Mounts() []description.CharmMetadataContainerMount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mounts")
	ret0, _ := ret[0].([]description.CharmMetadataContainerMount)
	return ret0
}

// Mounts indicates an expected call of Mounts.
func (mr *MockCharmMetadataContainerMockRecorder) Mounts() *MockCharmMetadataContainerMountsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mounts", reflect.TypeOf((*MockCharmMetadataContainer)(nil).Mounts))
	return &MockCharmMetadataContainerMountsCall{Call: call}
}

// MockCharmMetadataContainerMountsCall wrap *gomock.Call
type MockCharmMetadataContainerMountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataContainerMountsCall) Return(arg0 []description.CharmMetadataContainerMount) *MockCharmMetadataContainerMountsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataContainerMountsCall) Do(f func() []description.CharmMetadataContainerMount) *MockCharmMetadataContainerMountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataContainerMountsCall) DoAndReturn(f func() []description.CharmMetadataContainerMount) *MockCharmMetadataContainerMountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resource mocks base method.
func (m *MockCharmMetadataContainer) Resource() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource")
	ret0, _ := ret[0].(string)
	return ret0
}

// Resource indicates an expected call of Resource.
func (mr *MockCharmMetadataContainerMockRecorder) Resource() *MockCharmMetadataContainerResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockCharmMetadataContainer)(nil).Resource))
	return &MockCharmMetadataContainerResourceCall{Call: call}
}

// MockCharmMetadataContainerResourceCall wrap *gomock.Call
type MockCharmMetadataContainerResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataContainerResourceCall) Return(arg0 string) *MockCharmMetadataContainerResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataContainerResourceCall) Do(f func() string) *MockCharmMetadataContainerResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataContainerResourceCall) DoAndReturn(f func() string) *MockCharmMetadataContainerResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Uid mocks base method.
func (m *MockCharmMetadataContainer) Uid() *int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uid")
	ret0, _ := ret[0].(*int)
	return ret0
}

// Uid indicates an expected call of Uid.
func (mr *MockCharmMetadataContainerMockRecorder) Uid() *MockCharmMetadataContainerUidCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uid", reflect.TypeOf((*MockCharmMetadataContainer)(nil).Uid))
	return &MockCharmMetadataContainerUidCall{Call: call}
}

// MockCharmMetadataContainerUidCall wrap *gomock.Call
type MockCharmMetadataContainerUidCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataContainerUidCall) Return(arg0 *int) *MockCharmMetadataContainerUidCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataContainerUidCall) Do(f func() *int) *MockCharmMetadataContainerUidCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataContainerUidCall) DoAndReturn(f func() *int) *MockCharmMetadataContainerUidCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmMetadataContainerMount is a mock of CharmMetadataContainerMount interface.
type MockCharmMetadataContainerMount struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMetadataContainerMountMockRecorder
}

// MockCharmMetadataContainerMountMockRecorder is the mock recorder for MockCharmMetadataContainerMount.
type MockCharmMetadataContainerMountMockRecorder struct {
	mock *MockCharmMetadataContainerMount
}

// NewMockCharmMetadataContainerMount creates a new mock instance.
func NewMockCharmMetadataContainerMount(ctrl *gomock.Controller) *MockCharmMetadataContainerMount {
	mock := &MockCharmMetadataContainerMount{ctrl: ctrl}
	mock.recorder = &MockCharmMetadataContainerMountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmMetadataContainerMount) EXPECT() *MockCharmMetadataContainerMountMockRecorder {
	return m.recorder
}

// Location mocks base method.
func (m *MockCharmMetadataContainerMount) Location() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(string)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockCharmMetadataContainerMountMockRecorder) Location() *MockCharmMetadataContainerMountLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockCharmMetadataContainerMount)(nil).Location))
	return &MockCharmMetadataContainerMountLocationCall{Call: call}
}

// MockCharmMetadataContainerMountLocationCall wrap *gomock.Call
type MockCharmMetadataContainerMountLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataContainerMountLocationCall) Return(arg0 string) *MockCharmMetadataContainerMountLocationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataContainerMountLocationCall) Do(f func() string) *MockCharmMetadataContainerMountLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataContainerMountLocationCall) DoAndReturn(f func() string) *MockCharmMetadataContainerMountLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storage mocks base method.
func (m *MockCharmMetadataContainerMount) Storage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(string)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockCharmMetadataContainerMountMockRecorder) Storage() *MockCharmMetadataContainerMountStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockCharmMetadataContainerMount)(nil).Storage))
	return &MockCharmMetadataContainerMountStorageCall{Call: call}
}

// MockCharmMetadataContainerMountStorageCall wrap *gomock.Call
type MockCharmMetadataContainerMountStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmMetadataContainerMountStorageCall) Return(arg0 string) *MockCharmMetadataContainerMountStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmMetadataContainerMountStorageCall) Do(f func() string) *MockCharmMetadataContainerMountStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmMetadataContainerMountStorageCall) DoAndReturn(f func() string) *MockCharmMetadataContainerMountStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmManifest is a mock of CharmManifest interface.
type MockCharmManifest struct {
	ctrl     *gomock.Controller
	recorder *MockCharmManifestMockRecorder
}

// MockCharmManifestMockRecorder is the mock recorder for MockCharmManifest.
type MockCharmManifestMockRecorder struct {
	mock *MockCharmManifest
}

// NewMockCharmManifest creates a new mock instance.
func NewMockCharmManifest(ctrl *gomock.Controller) *MockCharmManifest {
	mock := &MockCharmManifest{ctrl: ctrl}
	mock.recorder = &MockCharmManifestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmManifest) EXPECT() *MockCharmManifestMockRecorder {
	return m.recorder
}

// Bases mocks base method.
func (m *MockCharmManifest) Bases() []description.CharmManifestBase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bases")
	ret0, _ := ret[0].([]description.CharmManifestBase)
	return ret0
}

// Bases indicates an expected call of Bases.
func (mr *MockCharmManifestMockRecorder) Bases() *MockCharmManifestBasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bases", reflect.TypeOf((*MockCharmManifest)(nil).Bases))
	return &MockCharmManifestBasesCall{Call: call}
}

// MockCharmManifestBasesCall wrap *gomock.Call
type MockCharmManifestBasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmManifestBasesCall) Return(arg0 []description.CharmManifestBase) *MockCharmManifestBasesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmManifestBasesCall) Do(f func() []description.CharmManifestBase) *MockCharmManifestBasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmManifestBasesCall) DoAndReturn(f func() []description.CharmManifestBase) *MockCharmManifestBasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmManifestBase is a mock of CharmManifestBase interface.
type MockCharmManifestBase struct {
	ctrl     *gomock.Controller
	recorder *MockCharmManifestBaseMockRecorder
}

// MockCharmManifestBaseMockRecorder is the mock recorder for MockCharmManifestBase.
type MockCharmManifestBaseMockRecorder struct {
	mock *MockCharmManifestBase
}

// NewMockCharmManifestBase creates a new mock instance.
func NewMockCharmManifestBase(ctrl *gomock.Controller) *MockCharmManifestBase {
	mock := &MockCharmManifestBase{ctrl: ctrl}
	mock.recorder = &MockCharmManifestBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmManifestBase) EXPECT() *MockCharmManifestBaseMockRecorder {
	return m.recorder
}

// Architectures mocks base method.
func (m *MockCharmManifestBase) Architectures() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Architectures")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Architectures indicates an expected call of Architectures.
func (mr *MockCharmManifestBaseMockRecorder) Architectures() *MockCharmManifestBaseArchitecturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Architectures", reflect.TypeOf((*MockCharmManifestBase)(nil).Architectures))
	return &MockCharmManifestBaseArchitecturesCall{Call: call}
}

// MockCharmManifestBaseArchitecturesCall wrap *gomock.Call
type MockCharmManifestBaseArchitecturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmManifestBaseArchitecturesCall) Return(arg0 []string) *MockCharmManifestBaseArchitecturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmManifestBaseArchitecturesCall) Do(f func() []string) *MockCharmManifestBaseArchitecturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmManifestBaseArchitecturesCall) DoAndReturn(f func() []string) *MockCharmManifestBaseArchitecturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Channel mocks base method.
func (m *MockCharmManifestBase) Channel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(string)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockCharmManifestBaseMockRecorder) Channel() *MockCharmManifestBaseChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockCharmManifestBase)(nil).Channel))
	return &MockCharmManifestBaseChannelCall{Call: call}
}

// MockCharmManifestBaseChannelCall wrap *gomock.Call
type MockCharmManifestBaseChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmManifestBaseChannelCall) Return(arg0 string) *MockCharmManifestBaseChannelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmManifestBaseChannelCall) Do(f func() string) *MockCharmManifestBaseChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmManifestBaseChannelCall) DoAndReturn(f func() string) *MockCharmManifestBaseChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockCharmManifestBase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCharmManifestBaseMockRecorder) Name() *MockCharmManifestBaseNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCharmManifestBase)(nil).Name))
	return &MockCharmManifestBaseNameCall{Call: call}
}

// MockCharmManifestBaseNameCall wrap *gomock.Call
type MockCharmManifestBaseNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmManifestBaseNameCall) Return(arg0 string) *MockCharmManifestBaseNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmManifestBaseNameCall) Do(f func() string) *MockCharmManifestBaseNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmManifestBaseNameCall) DoAndReturn(f func() string) *MockCharmManifestBaseNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmActions is a mock of CharmActions interface.
type MockCharmActions struct {
	ctrl     *gomock.Controller
	recorder *MockCharmActionsMockRecorder
}

// MockCharmActionsMockRecorder is the mock recorder for MockCharmActions.
type MockCharmActionsMockRecorder struct {
	mock *MockCharmActions
}

// NewMockCharmActions creates a new mock instance.
func NewMockCharmActions(ctrl *gomock.Controller) *MockCharmActions {
	mock := &MockCharmActions{ctrl: ctrl}
	mock.recorder = &MockCharmActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmActions) EXPECT() *MockCharmActionsMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockCharmActions) Actions() map[string]description.CharmAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].(map[string]description.CharmAction)
	return ret0
}

// Actions indicates an expected call of Actions.
func (mr *MockCharmActionsMockRecorder) Actions() *MockCharmActionsActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockCharmActions)(nil).Actions))
	return &MockCharmActionsActionsCall{Call: call}
}

// MockCharmActionsActionsCall wrap *gomock.Call
type MockCharmActionsActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmActionsActionsCall) Return(arg0 map[string]description.CharmAction) *MockCharmActionsActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmActionsActionsCall) Do(f func() map[string]description.CharmAction) *MockCharmActionsActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmActionsActionsCall) DoAndReturn(f func() map[string]description.CharmAction) *MockCharmActionsActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmAction is a mock of CharmAction interface.
type MockCharmAction struct {
	ctrl     *gomock.Controller
	recorder *MockCharmActionMockRecorder
}

// MockCharmActionMockRecorder is the mock recorder for MockCharmAction.
type MockCharmActionMockRecorder struct {
	mock *MockCharmAction
}

// NewMockCharmAction creates a new mock instance.
func NewMockCharmAction(ctrl *gomock.Controller) *MockCharmAction {
	mock := &MockCharmAction{ctrl: ctrl}
	mock.recorder = &MockCharmActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmAction) EXPECT() *MockCharmActionMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockCharmAction) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockCharmActionMockRecorder) Description() *MockCharmActionDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCharmAction)(nil).Description))
	return &MockCharmActionDescriptionCall{Call: call}
}

// MockCharmActionDescriptionCall wrap *gomock.Call
type MockCharmActionDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmActionDescriptionCall) Return(arg0 string) *MockCharmActionDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmActionDescriptionCall) Do(f func() string) *MockCharmActionDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmActionDescriptionCall) DoAndReturn(f func() string) *MockCharmActionDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecutionGroup mocks base method.
func (m *MockCharmAction) ExecutionGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExecutionGroup indicates an expected call of ExecutionGroup.
func (mr *MockCharmActionMockRecorder) ExecutionGroup() *MockCharmActionExecutionGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionGroup", reflect.TypeOf((*MockCharmAction)(nil).ExecutionGroup))
	return &MockCharmActionExecutionGroupCall{Call: call}
}

// MockCharmActionExecutionGroupCall wrap *gomock.Call
type MockCharmActionExecutionGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmActionExecutionGroupCall) Return(arg0 string) *MockCharmActionExecutionGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmActionExecutionGroupCall) Do(f func() string) *MockCharmActionExecutionGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmActionExecutionGroupCall) DoAndReturn(f func() string) *MockCharmActionExecutionGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Parallel mocks base method.
func (m *MockCharmAction) Parallel() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parallel")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Parallel indicates an expected call of Parallel.
func (mr *MockCharmActionMockRecorder) Parallel() *MockCharmActionParallelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parallel", reflect.TypeOf((*MockCharmAction)(nil).Parallel))
	return &MockCharmActionParallelCall{Call: call}
}

// MockCharmActionParallelCall wrap *gomock.Call
type MockCharmActionParallelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmActionParallelCall) Return(arg0 bool) *MockCharmActionParallelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmActionParallelCall) Do(f func() bool) *MockCharmActionParallelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmActionParallelCall) DoAndReturn(f func() bool) *MockCharmActionParallelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Parameters mocks base method.
func (m *MockCharmAction) Parameters() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockCharmActionMockRecorder) Parameters() *MockCharmActionParametersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockCharmAction)(nil).Parameters))
	return &MockCharmActionParametersCall{Call: call}
}

// MockCharmActionParametersCall wrap *gomock.Call
type MockCharmActionParametersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmActionParametersCall) Return(arg0 map[string]any) *MockCharmActionParametersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmActionParametersCall) Do(f func() map[string]any) *MockCharmActionParametersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmActionParametersCall) DoAndReturn(f func() map[string]any) *MockCharmActionParametersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmConfigs is a mock of CharmConfigs interface.
type MockCharmConfigs struct {
	ctrl     *gomock.Controller
	recorder *MockCharmConfigsMockRecorder
}

// MockCharmConfigsMockRecorder is the mock recorder for MockCharmConfigs.
type MockCharmConfigsMockRecorder struct {
	mock *MockCharmConfigs
}

// NewMockCharmConfigs creates a new mock instance.
func NewMockCharmConfigs(ctrl *gomock.Controller) *MockCharmConfigs {
	mock := &MockCharmConfigs{ctrl: ctrl}
	mock.recorder = &MockCharmConfigsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmConfigs) EXPECT() *MockCharmConfigsMockRecorder {
	return m.recorder
}

// Configs mocks base method.
func (m *MockCharmConfigs) Configs() map[string]description.CharmConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configs")
	ret0, _ := ret[0].(map[string]description.CharmConfig)
	return ret0
}

// Configs indicates an expected call of Configs.
func (mr *MockCharmConfigsMockRecorder) Configs() *MockCharmConfigsConfigsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configs", reflect.TypeOf((*MockCharmConfigs)(nil).Configs))
	return &MockCharmConfigsConfigsCall{Call: call}
}

// MockCharmConfigsConfigsCall wrap *gomock.Call
type MockCharmConfigsConfigsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmConfigsConfigsCall) Return(arg0 map[string]description.CharmConfig) *MockCharmConfigsConfigsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmConfigsConfigsCall) Do(f func() map[string]description.CharmConfig) *MockCharmConfigsConfigsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmConfigsConfigsCall) DoAndReturn(f func() map[string]description.CharmConfig) *MockCharmConfigsConfigsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmConfig is a mock of CharmConfig interface.
type MockCharmConfig struct {
	ctrl     *gomock.Controller
	recorder *MockCharmConfigMockRecorder
}

// MockCharmConfigMockRecorder is the mock recorder for MockCharmConfig.
type MockCharmConfigMockRecorder struct {
	mock *MockCharmConfig
}

// NewMockCharmConfig creates a new mock instance.
func NewMockCharmConfig(ctrl *gomock.Controller) *MockCharmConfig {
	mock := &MockCharmConfig{ctrl: ctrl}
	mock.recorder = &MockCharmConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmConfig) EXPECT() *MockCharmConfigMockRecorder {
	return m.recorder
}

// Default mocks base method.
func (m *MockCharmConfig) Default() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Default")
	ret0, _ := ret[0].(any)
	return ret0
}

// Default indicates an expected call of Default.
func (mr *MockCharmConfigMockRecorder) Default() *MockCharmConfigDefaultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Default", reflect.TypeOf((*MockCharmConfig)(nil).Default))
	return &MockCharmConfigDefaultCall{Call: call}
}

// MockCharmConfigDefaultCall wrap *gomock.Call
type MockCharmConfigDefaultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmConfigDefaultCall) Return(arg0 any) *MockCharmConfigDefaultCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmConfigDefaultCall) Do(f func() any) *MockCharmConfigDefaultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmConfigDefaultCall) DoAndReturn(f func() any) *MockCharmConfigDefaultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Description mocks base method.
func (m *MockCharmConfig) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockCharmConfigMockRecorder) Description() *MockCharmConfigDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCharmConfig)(nil).Description))
	return &MockCharmConfigDescriptionCall{Call: call}
}

// MockCharmConfigDescriptionCall wrap *gomock.Call
type MockCharmConfigDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmConfigDescriptionCall) Return(arg0 string) *MockCharmConfigDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmConfigDescriptionCall) Do(f func() string) *MockCharmConfigDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmConfigDescriptionCall) DoAndReturn(f func() string) *MockCharmConfigDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockCharmConfig) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockCharmConfigMockRecorder) Type() *MockCharmConfigTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCharmConfig)(nil).Type))
	return &MockCharmConfigTypeCall{Call: call}
}

// MockCharmConfigTypeCall wrap *gomock.Call
type MockCharmConfigTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmConfigTypeCall) Return(arg0 string) *MockCharmConfigTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmConfigTypeCall) Do(f func() string) *MockCharmConfigTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmConfigTypeCall) DoAndReturn(f func() string) *MockCharmConfigTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
