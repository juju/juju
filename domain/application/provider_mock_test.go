// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: Provider,CAASProvider)
//
// Generated by this command:
//
//	mockgen -typed -package application_test -destination provider_mock_test.go github.com/juju/juju/domain/application/service Provider,CAASProvider
//

// Package application_test is a generated GoMock package.
package application_test

import (
	context "context"
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	assumes "github.com/juju/juju/core/assumes"
	constraints "github.com/juju/juju/core/constraints"
	environs "github.com/juju/juju/environs"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ConstraintsValidator mocks base method.
func (m *MockProvider) ConstraintsValidator(arg0 context.Context) (constraints.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsValidator", arg0)
	ret0, _ := ret[0].(constraints.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsValidator indicates an expected call of ConstraintsValidator.
func (mr *MockProviderMockRecorder) ConstraintsValidator(arg0 any) *MockProviderConstraintsValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsValidator", reflect.TypeOf((*MockProvider)(nil).ConstraintsValidator), arg0)
	return &MockProviderConstraintsValidatorCall{Call: call}
}

// MockProviderConstraintsValidatorCall wrap *gomock.Call
type MockProviderConstraintsValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderConstraintsValidatorCall) Return(arg0 constraints.Validator, arg1 error) *MockProviderConstraintsValidatorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderConstraintsValidatorCall) Do(f func(context.Context) (constraints.Validator, error)) *MockProviderConstraintsValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderConstraintsValidatorCall) DoAndReturn(f func(context.Context) (constraints.Validator, error)) *MockProviderConstraintsValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrecheckInstance mocks base method.
func (m *MockProvider) PrecheckInstance(arg0 context.Context, arg1 environs.PrecheckInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrecheckInstance indicates an expected call of PrecheckInstance.
func (mr *MockProviderMockRecorder) PrecheckInstance(arg0, arg1 any) *MockProviderPrecheckInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckInstance", reflect.TypeOf((*MockProvider)(nil).PrecheckInstance), arg0, arg1)
	return &MockProviderPrecheckInstanceCall{Call: call}
}

// MockProviderPrecheckInstanceCall wrap *gomock.Call
type MockProviderPrecheckInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderPrecheckInstanceCall) Return(arg0 error) *MockProviderPrecheckInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderPrecheckInstanceCall) Do(f func(context.Context, environs.PrecheckInstanceParams) error) *MockProviderPrecheckInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderPrecheckInstanceCall) DoAndReturn(f func(context.Context, environs.PrecheckInstanceParams) error) *MockProviderPrecheckInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCAASProvider is a mock of CAASProvider interface.
type MockCAASProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCAASProviderMockRecorder
}

// MockCAASProviderMockRecorder is the mock recorder for MockCAASProvider.
type MockCAASProviderMockRecorder struct {
	mock *MockCAASProvider
}

// NewMockCAASProvider creates a new mock instance.
func NewMockCAASProvider(ctrl *gomock.Controller) *MockCAASProvider {
	mock := &MockCAASProvider{ctrl: ctrl}
	mock.recorder = &MockCAASProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAASProvider) EXPECT() *MockCAASProviderMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockCAASProvider) Application(arg0 string, arg1 caas.DeploymentType) caas.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0, arg1)
	ret0, _ := ret[0].(caas.Application)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockCAASProviderMockRecorder) Application(arg0, arg1 any) *MockCAASProviderApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockCAASProvider)(nil).Application), arg0, arg1)
	return &MockCAASProviderApplicationCall{Call: call}
}

// MockCAASProviderApplicationCall wrap *gomock.Call
type MockCAASProviderApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASProviderApplicationCall) Return(arg0 caas.Application) *MockCAASProviderApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASProviderApplicationCall) Do(f func(string, caas.DeploymentType) caas.Application) *MockCAASProviderApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASProviderApplicationCall) DoAndReturn(f func(string, caas.DeploymentType) caas.Application) *MockCAASProviderApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportedFeatures mocks base method.
func (m *MockCAASProvider) SupportedFeatures() (assumes.FeatureSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedFeatures")
	ret0, _ := ret[0].(assumes.FeatureSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedFeatures indicates an expected call of SupportedFeatures.
func (mr *MockCAASProviderMockRecorder) SupportedFeatures() *MockCAASProviderSupportedFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedFeatures", reflect.TypeOf((*MockCAASProvider)(nil).SupportedFeatures))
	return &MockCAASProviderSupportedFeaturesCall{Call: call}
}

// MockCAASProviderSupportedFeaturesCall wrap *gomock.Call
type MockCAASProviderSupportedFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASProviderSupportedFeaturesCall) Return(arg0 assumes.FeatureSet, arg1 error) *MockCAASProviderSupportedFeaturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASProviderSupportedFeaturesCall) Do(f func() (assumes.FeatureSet, error)) *MockCAASProviderSupportedFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASProviderSupportedFeaturesCall) DoAndReturn(f func() (assumes.FeatureSet, error)) *MockCAASProviderSupportedFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
