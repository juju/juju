// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: ExecTokenProvider,CAASApplicationProvider)
//
// Generated by this command:
//
//	mockgen -typed -package application -destination package_mock_test.go github.com/juju/juju/domain/application/service ExecTokenProvider,CAASApplicationProvider
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	gomock "go.uber.org/mock/gomock"
)

// MockExecTokenProvider is a mock of ExecTokenProvider interface.
type MockExecTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockExecTokenProviderMockRecorder
}

// MockExecTokenProviderMockRecorder is the mock recorder for MockExecTokenProvider.
type MockExecTokenProviderMockRecorder struct {
	mock *MockExecTokenProvider
}

// NewMockExecTokenProvider creates a new mock instance.
func NewMockExecTokenProvider(ctrl *gomock.Controller) *MockExecTokenProvider {
	mock := &MockExecTokenProvider{ctrl: ctrl}
	mock.recorder = &MockExecTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecTokenProvider) EXPECT() *MockExecTokenProviderMockRecorder {
	return m.recorder
}

// GetSecretToken mocks base method.
func (m *MockExecTokenProvider) GetSecretToken(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretToken indicates an expected call of GetSecretToken.
func (mr *MockExecTokenProviderMockRecorder) GetSecretToken(arg0, arg1 any) *MockExecTokenProviderGetSecretTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretToken", reflect.TypeOf((*MockExecTokenProvider)(nil).GetSecretToken), arg0, arg1)
	return &MockExecTokenProviderGetSecretTokenCall{Call: call}
}

// MockExecTokenProviderGetSecretTokenCall wrap *gomock.Call
type MockExecTokenProviderGetSecretTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecTokenProviderGetSecretTokenCall) Return(arg0 string, arg1 error) *MockExecTokenProviderGetSecretTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecTokenProviderGetSecretTokenCall) Do(f func(context.Context, string) (string, error)) *MockExecTokenProviderGetSecretTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecTokenProviderGetSecretTokenCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockExecTokenProviderGetSecretTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCAASApplicationProvider is a mock of CAASApplicationProvider interface.
type MockCAASApplicationProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCAASApplicationProviderMockRecorder
}

// MockCAASApplicationProviderMockRecorder is the mock recorder for MockCAASApplicationProvider.
type MockCAASApplicationProviderMockRecorder struct {
	mock *MockCAASApplicationProvider
}

// NewMockCAASApplicationProvider creates a new mock instance.
func NewMockCAASApplicationProvider(ctrl *gomock.Controller) *MockCAASApplicationProvider {
	mock := &MockCAASApplicationProvider{ctrl: ctrl}
	mock.recorder = &MockCAASApplicationProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAASApplicationProvider) EXPECT() *MockCAASApplicationProviderMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockCAASApplicationProvider) Application(arg0 string, arg1 caas.DeploymentType) caas.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0, arg1)
	ret0, _ := ret[0].(caas.Application)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockCAASApplicationProviderMockRecorder) Application(arg0, arg1 any) *MockCAASApplicationProviderApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockCAASApplicationProvider)(nil).Application), arg0, arg1)
	return &MockCAASApplicationProviderApplicationCall{Call: call}
}

// MockCAASApplicationProviderApplicationCall wrap *gomock.Call
type MockCAASApplicationProviderApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCAASApplicationProviderApplicationCall) Return(arg0 caas.Application) *MockCAASApplicationProviderApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCAASApplicationProviderApplicationCall) Do(f func(string, caas.DeploymentType) caas.Application) *MockCAASApplicationProviderApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCAASApplicationProviderApplicationCall) DoAndReturn(f func(string, caas.DeploymentType) caas.Application) *MockCAASApplicationProviderApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
