// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: Broker)
//
// Generated by this command:
//
//	mockgen -typed -package application -destination package_mock_test.go github.com/juju/juju/domain/application/service Broker
//

// Package application is a generated GoMock package.
package application

import (
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	k8s "github.com/juju/juju/core/k8s"
	gomock "go.uber.org/mock/gomock"
)

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockBroker) Application(arg0 string, arg1 k8s.K8sDeploymentType) caas.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0, arg1)
	ret0, _ := ret[0].(caas.Application)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockBrokerMockRecorder) Application(arg0, arg1 any) *MockBrokerApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockBroker)(nil).Application), arg0, arg1)
	return &MockBrokerApplicationCall{Call: call}
}

// MockBrokerApplicationCall wrap *gomock.Call
type MockBrokerApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBrokerApplicationCall) Return(arg0 caas.Application) *MockBrokerApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBrokerApplicationCall) Do(f func(string, k8s.K8sDeploymentType) caas.Application) *MockBrokerApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBrokerApplicationCall) DoAndReturn(f func(string, k8s.K8sDeploymentType) caas.Application) *MockBrokerApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
