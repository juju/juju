// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelupgrade/service (interfaces: State,JujuUpgradePrechecker)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/modelupgrade/service State,JujuUpgradePrechecker
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	semversion "github.com/juju/juju/core/semversion"
	environs "github.com/juju/juju/environs"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetModelVersionInfo mocks base method.
func (m *MockState) GetModelVersionInfo(arg0 context.Context) (semversion.Number, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersionInfo", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelVersionInfo indicates an expected call of GetModelVersionInfo.
func (mr *MockStateMockRecorder) GetModelVersionInfo(arg0 any) *MockStateGetModelVersionInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersionInfo", reflect.TypeOf((*MockState)(nil).GetModelVersionInfo), arg0)
	return &MockStateGetModelVersionInfoCall{Call: call}
}

// MockStateGetModelVersionInfoCall wrap *gomock.Call
type MockStateGetModelVersionInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelVersionInfoCall) Return(arg0 semversion.Number, arg1 bool, arg2 error) *MockStateGetModelVersionInfoCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelVersionInfoCall) Do(f func(context.Context) (semversion.Number, bool, error)) *MockStateGetModelVersionInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelVersionInfoCall) DoAndReturn(f func(context.Context) (semversion.Number, bool, error)) *MockStateGetModelVersionInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockJujuUpgradePrechecker is a mock of JujuUpgradePrechecker interface.
type MockJujuUpgradePrechecker struct {
	ctrl     *gomock.Controller
	recorder *MockJujuUpgradePrecheckerMockRecorder
}

// MockJujuUpgradePrecheckerMockRecorder is the mock recorder for MockJujuUpgradePrechecker.
type MockJujuUpgradePrecheckerMockRecorder struct {
	mock *MockJujuUpgradePrechecker
}

// NewMockJujuUpgradePrechecker creates a new mock instance.
func NewMockJujuUpgradePrechecker(ctrl *gomock.Controller) *MockJujuUpgradePrechecker {
	mock := &MockJujuUpgradePrechecker{ctrl: ctrl}
	mock.recorder = &MockJujuUpgradePrecheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJujuUpgradePrechecker) EXPECT() *MockJujuUpgradePrecheckerMockRecorder {
	return m.recorder
}

// PrecheckUpgradeOperations mocks base method.
func (m *MockJujuUpgradePrechecker) PrecheckUpgradeOperations() []environs.PrecheckJujuUpgradeOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecheckUpgradeOperations")
	ret0, _ := ret[0].([]environs.PrecheckJujuUpgradeOperation)
	return ret0
}

// PrecheckUpgradeOperations indicates an expected call of PrecheckUpgradeOperations.
func (mr *MockJujuUpgradePrecheckerMockRecorder) PrecheckUpgradeOperations() *MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecheckUpgradeOperations", reflect.TypeOf((*MockJujuUpgradePrechecker)(nil).PrecheckUpgradeOperations))
	return &MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall{Call: call}
}

// MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall wrap *gomock.Call
type MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall) Return(arg0 []environs.PrecheckJujuUpgradeOperation) *MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall) Do(f func() []environs.PrecheckJujuUpgradeOperation) *MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall) DoAndReturn(f func() []environs.PrecheckJujuUpgradeOperation) *MockJujuUpgradePrecheckerPrecheckUpgradeOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreparePrechecker mocks base method.
func (m *MockJujuUpgradePrechecker) PreparePrechecker(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreparePrechecker", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreparePrechecker indicates an expected call of PreparePrechecker.
func (mr *MockJujuUpgradePrecheckerMockRecorder) PreparePrechecker(arg0 any) *MockJujuUpgradePrecheckerPreparePrecheckerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparePrechecker", reflect.TypeOf((*MockJujuUpgradePrechecker)(nil).PreparePrechecker), arg0)
	return &MockJujuUpgradePrecheckerPreparePrecheckerCall{Call: call}
}

// MockJujuUpgradePrecheckerPreparePrecheckerCall wrap *gomock.Call
type MockJujuUpgradePrecheckerPreparePrecheckerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJujuUpgradePrecheckerPreparePrecheckerCall) Return(arg0 error) *MockJujuUpgradePrecheckerPreparePrecheckerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJujuUpgradePrecheckerPreparePrecheckerCall) Do(f func(context.Context) error) *MockJujuUpgradePrecheckerPreparePrecheckerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJujuUpgradePrecheckerPreparePrecheckerCall) DoAndReturn(f func(context.Context) error) *MockJujuUpgradePrecheckerPreparePrecheckerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
