// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modeldefaults/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/modeldefaults/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	cloud "github.com/juju/juju/core/cloud"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// CloudAllRegionDefaults mocks base method.
func (m *MockState) CloudAllRegionDefaults(arg0 context.Context, arg1 cloud.UUID) (map[string]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudAllRegionDefaults", arg0, arg1)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudAllRegionDefaults indicates an expected call of CloudAllRegionDefaults.
func (mr *MockStateMockRecorder) CloudAllRegionDefaults(arg0, arg1 any) *MockStateCloudAllRegionDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudAllRegionDefaults", reflect.TypeOf((*MockState)(nil).CloudAllRegionDefaults), arg0, arg1)
	return &MockStateCloudAllRegionDefaultsCall{Call: call}
}

// MockStateCloudAllRegionDefaultsCall wrap *gomock.Call
type MockStateCloudAllRegionDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudAllRegionDefaultsCall) Return(arg0 map[string]map[string]string, arg1 error) *MockStateCloudAllRegionDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudAllRegionDefaultsCall) Do(f func(context.Context, cloud.UUID) (map[string]map[string]string, error)) *MockStateCloudAllRegionDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudAllRegionDefaultsCall) DoAndReturn(f func(context.Context, cloud.UUID) (map[string]map[string]string, error)) *MockStateCloudAllRegionDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudDefaults mocks base method.
func (m *MockState) CloudDefaults(arg0 context.Context, arg1 cloud.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudDefaults", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudDefaults indicates an expected call of CloudDefaults.
func (mr *MockStateMockRecorder) CloudDefaults(arg0, arg1 any) *MockStateCloudDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudDefaults", reflect.TypeOf((*MockState)(nil).CloudDefaults), arg0, arg1)
	return &MockStateCloudDefaultsCall{Call: call}
}

// MockStateCloudDefaultsCall wrap *gomock.Call
type MockStateCloudDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudDefaultsCall) Return(arg0 map[string]string, arg1 error) *MockStateCloudDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudDefaultsCall) Do(f func(context.Context, cloud.UUID) (map[string]string, error)) *MockStateCloudDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudDefaultsCall) DoAndReturn(f func(context.Context, cloud.UUID) (map[string]string, error)) *MockStateCloudDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudType mocks base method.
func (m *MockState) CloudType(arg0 context.Context, arg1 cloud.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudType indicates an expected call of CloudType.
func (mr *MockStateMockRecorder) CloudType(arg0, arg1 any) *MockStateCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudType", reflect.TypeOf((*MockState)(nil).CloudType), arg0, arg1)
	return &MockStateCloudTypeCall{Call: call}
}

// MockStateCloudTypeCall wrap *gomock.Call
type MockStateCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudTypeCall) Return(arg0 string, arg1 error) *MockStateCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudTypeCall) Do(f func(context.Context, cloud.UUID) (string, error)) *MockStateCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudTypeCall) DoAndReturn(f func(context.Context, cloud.UUID) (string, error)) *MockStateCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfigDefaults mocks base method.
func (m *MockState) ConfigDefaults(arg0 context.Context) map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigDefaults", arg0)
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// ConfigDefaults indicates an expected call of ConfigDefaults.
func (mr *MockStateMockRecorder) ConfigDefaults(arg0 any) *MockStateConfigDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigDefaults", reflect.TypeOf((*MockState)(nil).ConfigDefaults), arg0)
	return &MockStateConfigDefaultsCall{Call: call}
}

// MockStateConfigDefaultsCall wrap *gomock.Call
type MockStateConfigDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateConfigDefaultsCall) Return(arg0 map[string]any) *MockStateConfigDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateConfigDefaultsCall) Do(f func(context.Context) map[string]any) *MockStateConfigDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateConfigDefaultsCall) DoAndReturn(f func(context.Context) map[string]any) *MockStateConfigDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCloudDefaults mocks base method.
func (m *MockState) DeleteCloudDefaults(arg0 context.Context, arg1 cloud.UUID, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudDefaults", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudDefaults indicates an expected call of DeleteCloudDefaults.
func (mr *MockStateMockRecorder) DeleteCloudDefaults(arg0, arg1, arg2 any) *MockStateDeleteCloudDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudDefaults", reflect.TypeOf((*MockState)(nil).DeleteCloudDefaults), arg0, arg1, arg2)
	return &MockStateDeleteCloudDefaultsCall{Call: call}
}

// MockStateDeleteCloudDefaultsCall wrap *gomock.Call
type MockStateDeleteCloudDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteCloudDefaultsCall) Return(arg0 error) *MockStateDeleteCloudDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteCloudDefaultsCall) Do(f func(context.Context, cloud.UUID, []string) error) *MockStateDeleteCloudDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteCloudDefaultsCall) DoAndReturn(f func(context.Context, cloud.UUID, []string) error) *MockStateDeleteCloudDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCloudRegionDefaults mocks base method.
func (m *MockState) DeleteCloudRegionDefaults(arg0 context.Context, arg1 cloud.UUID, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudRegionDefaults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudRegionDefaults indicates an expected call of DeleteCloudRegionDefaults.
func (mr *MockStateMockRecorder) DeleteCloudRegionDefaults(arg0, arg1, arg2, arg3 any) *MockStateDeleteCloudRegionDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudRegionDefaults", reflect.TypeOf((*MockState)(nil).DeleteCloudRegionDefaults), arg0, arg1, arg2, arg3)
	return &MockStateDeleteCloudRegionDefaultsCall{Call: call}
}

// MockStateDeleteCloudRegionDefaultsCall wrap *gomock.Call
type MockStateDeleteCloudRegionDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteCloudRegionDefaultsCall) Return(arg0 error) *MockStateDeleteCloudRegionDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteCloudRegionDefaultsCall) Do(f func(context.Context, cloud.UUID, string, []string) error) *MockStateDeleteCloudRegionDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteCloudRegionDefaultsCall) DoAndReturn(f func(context.Context, cloud.UUID, string, []string) error) *MockStateDeleteCloudRegionDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCloudUUID mocks base method.
func (m *MockState) GetCloudUUID(arg0 context.Context, arg1 string) (cloud.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudUUID", arg0, arg1)
	ret0, _ := ret[0].(cloud.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudUUID indicates an expected call of GetCloudUUID.
func (mr *MockStateMockRecorder) GetCloudUUID(arg0, arg1 any) *MockStateGetCloudUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudUUID", reflect.TypeOf((*MockState)(nil).GetCloudUUID), arg0, arg1)
	return &MockStateGetCloudUUIDCall{Call: call}
}

// MockStateGetCloudUUIDCall wrap *gomock.Call
type MockStateGetCloudUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCloudUUIDCall) Return(arg0 cloud.UUID, arg1 error) *MockStateGetCloudUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCloudUUIDCall) Do(f func(context.Context, string) (cloud.UUID, error)) *MockStateGetCloudUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCloudUUIDCall) DoAndReturn(f func(context.Context, string) (cloud.UUID, error)) *MockStateGetCloudUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCloudUUID mocks base method.
func (m *MockState) GetModelCloudUUID(arg0 context.Context, arg1 model.UUID) (cloud.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudUUID", arg0, arg1)
	ret0, _ := ret[0].(cloud.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelCloudUUID indicates an expected call of GetModelCloudUUID.
func (mr *MockStateMockRecorder) GetModelCloudUUID(arg0, arg1 any) *MockStateGetModelCloudUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudUUID", reflect.TypeOf((*MockState)(nil).GetModelCloudUUID), arg0, arg1)
	return &MockStateGetModelCloudUUIDCall{Call: call}
}

// MockStateGetModelCloudUUIDCall wrap *gomock.Call
type MockStateGetModelCloudUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCloudUUIDCall) Return(arg0 cloud.UUID, arg1 error) *MockStateGetModelCloudUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCloudUUIDCall) Do(f func(context.Context, model.UUID) (cloud.UUID, error)) *MockStateGetModelCloudUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCloudUUIDCall) DoAndReturn(f func(context.Context, model.UUID) (cloud.UUID, error)) *MockStateGetModelCloudUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelCloudRegionDefaults mocks base method.
func (m *MockState) ModelCloudRegionDefaults(arg0 context.Context, arg1 model.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelCloudRegionDefaults", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelCloudRegionDefaults indicates an expected call of ModelCloudRegionDefaults.
func (mr *MockStateMockRecorder) ModelCloudRegionDefaults(arg0, arg1 any) *MockStateModelCloudRegionDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelCloudRegionDefaults", reflect.TypeOf((*MockState)(nil).ModelCloudRegionDefaults), arg0, arg1)
	return &MockStateModelCloudRegionDefaultsCall{Call: call}
}

// MockStateModelCloudRegionDefaultsCall wrap *gomock.Call
type MockStateModelCloudRegionDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelCloudRegionDefaultsCall) Return(arg0 map[string]string, arg1 error) *MockStateModelCloudRegionDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelCloudRegionDefaultsCall) Do(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelCloudRegionDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelCloudRegionDefaultsCall) DoAndReturn(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelCloudRegionDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelMetadataDefaults mocks base method.
func (m *MockState) ModelMetadataDefaults(arg0 context.Context, arg1 model.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMetadataDefaults", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelMetadataDefaults indicates an expected call of ModelMetadataDefaults.
func (mr *MockStateMockRecorder) ModelMetadataDefaults(arg0, arg1 any) *MockStateModelMetadataDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMetadataDefaults", reflect.TypeOf((*MockState)(nil).ModelMetadataDefaults), arg0, arg1)
	return &MockStateModelMetadataDefaultsCall{Call: call}
}

// MockStateModelMetadataDefaultsCall wrap *gomock.Call
type MockStateModelMetadataDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelMetadataDefaultsCall) Return(arg0 map[string]string, arg1 error) *MockStateModelMetadataDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelMetadataDefaultsCall) Do(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelMetadataDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelMetadataDefaultsCall) DoAndReturn(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelMetadataDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloudDefaults mocks base method.
func (m *MockState) UpdateCloudDefaults(arg0 context.Context, arg1 cloud.UUID, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudDefaults", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudDefaults indicates an expected call of UpdateCloudDefaults.
func (mr *MockStateMockRecorder) UpdateCloudDefaults(arg0, arg1, arg2 any) *MockStateUpdateCloudDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudDefaults", reflect.TypeOf((*MockState)(nil).UpdateCloudDefaults), arg0, arg1, arg2)
	return &MockStateUpdateCloudDefaultsCall{Call: call}
}

// MockStateUpdateCloudDefaultsCall wrap *gomock.Call
type MockStateUpdateCloudDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateCloudDefaultsCall) Return(arg0 error) *MockStateUpdateCloudDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateCloudDefaultsCall) Do(f func(context.Context, cloud.UUID, map[string]string) error) *MockStateUpdateCloudDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateCloudDefaultsCall) DoAndReturn(f func(context.Context, cloud.UUID, map[string]string) error) *MockStateUpdateCloudDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloudRegionDefaults mocks base method.
func (m *MockState) UpdateCloudRegionDefaults(arg0 context.Context, arg1 cloud.UUID, arg2 string, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudRegionDefaults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudRegionDefaults indicates an expected call of UpdateCloudRegionDefaults.
func (mr *MockStateMockRecorder) UpdateCloudRegionDefaults(arg0, arg1, arg2, arg3 any) *MockStateUpdateCloudRegionDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudRegionDefaults", reflect.TypeOf((*MockState)(nil).UpdateCloudRegionDefaults), arg0, arg1, arg2, arg3)
	return &MockStateUpdateCloudRegionDefaultsCall{Call: call}
}

// MockStateUpdateCloudRegionDefaultsCall wrap *gomock.Call
type MockStateUpdateCloudRegionDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateCloudRegionDefaultsCall) Return(arg0 error) *MockStateUpdateCloudRegionDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateCloudRegionDefaultsCall) Do(f func(context.Context, cloud.UUID, string, map[string]string) error) *MockStateUpdateCloudRegionDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateCloudRegionDefaultsCall) DoAndReturn(f func(context.Context, cloud.UUID, string, map[string]string) error) *MockStateUpdateCloudRegionDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
