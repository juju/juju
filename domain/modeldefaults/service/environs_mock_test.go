// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs (interfaces: ModelConfigProvider)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination environs_mock_test.go github.com/juju/juju/environs ModelConfigProvider
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	schema "github.com/juju/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockModelConfigProvider is a mock of ModelConfigProvider interface.
type MockModelConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigProviderMockRecorder
}

// MockModelConfigProviderMockRecorder is the mock recorder for MockModelConfigProvider.
type MockModelConfigProviderMockRecorder struct {
	mock *MockModelConfigProvider
}

// NewMockModelConfigProvider creates a new mock instance.
func NewMockModelConfigProvider(ctrl *gomock.Controller) *MockModelConfigProvider {
	mock := &MockModelConfigProvider{ctrl: ctrl}
	mock.recorder = &MockModelConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigProvider) EXPECT() *MockModelConfigProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelConfigProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// ConfigDefaults mocks base method.
func (m *MockModelConfigProvider) ConfigDefaults() schema.Defaults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigDefaults")
	ret0, _ := ret[0].(schema.Defaults)
	return ret0
}

// ConfigDefaults indicates an expected call of ConfigDefaults.
func (mr *MockModelConfigProviderMockRecorder) ConfigDefaults() *MockModelConfigProviderConfigDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigDefaults", reflect.TypeOf((*MockModelConfigProvider)(nil).ConfigDefaults))
	return &MockModelConfigProviderConfigDefaultsCall{Call: call}
}

// MockModelConfigProviderConfigDefaultsCall wrap *gomock.Call
type MockModelConfigProviderConfigDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigProviderConfigDefaultsCall) Return(arg0 schema.Defaults) *MockModelConfigProviderConfigDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigProviderConfigDefaultsCall) Do(f func() schema.Defaults) *MockModelConfigProviderConfigDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigProviderConfigDefaultsCall) DoAndReturn(f func() schema.Defaults) *MockModelConfigProviderConfigDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfigSchema mocks base method.
func (m *MockModelConfigProvider) ConfigSchema() schema.Fields {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSchema")
	ret0, _ := ret[0].(schema.Fields)
	return ret0
}

// ConfigSchema indicates an expected call of ConfigSchema.
func (mr *MockModelConfigProviderMockRecorder) ConfigSchema() *MockModelConfigProviderConfigSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSchema", reflect.TypeOf((*MockModelConfigProvider)(nil).ConfigSchema))
	return &MockModelConfigProviderConfigSchemaCall{Call: call}
}

// MockModelConfigProviderConfigSchemaCall wrap *gomock.Call
type MockModelConfigProviderConfigSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigProviderConfigSchemaCall) Return(arg0 schema.Fields) *MockModelConfigProviderConfigSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigProviderConfigSchemaCall) Do(f func() schema.Fields) *MockModelConfigProviderConfigSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigProviderConfigSchemaCall) DoAndReturn(f func() schema.Fields) *MockModelConfigProviderConfigSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelConfigDefaults mocks base method.
func (m *MockModelConfigProvider) ModelConfigDefaults(arg0 context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfigDefaults", arg0)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfigDefaults indicates an expected call of ModelConfigDefaults.
func (mr *MockModelConfigProviderMockRecorder) ModelConfigDefaults(arg0 any) *MockModelConfigProviderModelConfigDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfigDefaults", reflect.TypeOf((*MockModelConfigProvider)(nil).ModelConfigDefaults), arg0)
	return &MockModelConfigProviderModelConfigDefaultsCall{Call: call}
}

// MockModelConfigProviderModelConfigDefaultsCall wrap *gomock.Call
type MockModelConfigProviderModelConfigDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigProviderModelConfigDefaultsCall) Return(arg0 map[string]any, arg1 error) *MockModelConfigProviderModelConfigDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigProviderModelConfigDefaultsCall) Do(f func(context.Context) (map[string]any, error)) *MockModelConfigProviderModelConfigDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigProviderModelConfigDefaultsCall) DoAndReturn(f func(context.Context) (map[string]any, error)) *MockModelConfigProviderModelConfigDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
