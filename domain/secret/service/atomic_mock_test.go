// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain (interfaces: AtomicContext)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination atomic_mock_test.go github.com/juju/juju/domain AtomicContext
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAtomicContext is a mock of AtomicContext interface.
type MockAtomicContext struct {
	ctrl     *gomock.Controller
	recorder *MockAtomicContextMockRecorder
}

// MockAtomicContextMockRecorder is the mock recorder for MockAtomicContext.
type MockAtomicContextMockRecorder struct {
	mock *MockAtomicContext
}

// NewMockAtomicContext creates a new mock instance.
func NewMockAtomicContext(ctrl *gomock.Controller) *MockAtomicContext {
	mock := &MockAtomicContext{ctrl: ctrl}
	mock.recorder = &MockAtomicContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtomicContext) EXPECT() *MockAtomicContextMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAtomicContext) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAtomicContextMockRecorder) Context() *MockAtomicContextContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAtomicContext)(nil).Context))
	return &MockAtomicContextContextCall{Call: call}
}

// MockAtomicContextContextCall wrap *gomock.Call
type MockAtomicContextContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtomicContextContextCall) Return(arg0 context.Context) *MockAtomicContextContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtomicContextContextCall) Do(f func() context.Context) *MockAtomicContextContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtomicContextContextCall) DoAndReturn(f func() context.Context) *MockAtomicContextContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
