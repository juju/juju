// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/secret/service (interfaces: State,SecretBackendState,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/secret/service State,SecretBackendState,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	application "github.com/juju/juju/core/application"
	model "github.com/juju/juju/core/model"
	secrets "github.com/juju/juju/core/secrets"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	domain "github.com/juju/juju/domain"
	secret "github.com/juju/juju/domain/secret"
	secretbackend "github.com/juju/juju/domain/secretbackend"
	provider "github.com/juju/juju/internal/secrets/provider"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AllRemoteSecrets mocks base method.
func (m *MockState) AllRemoteSecrets(arg0 context.Context) ([]secret.RemoteSecretInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRemoteSecrets", arg0)
	ret0, _ := ret[0].([]secret.RemoteSecretInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRemoteSecrets indicates an expected call of AllRemoteSecrets.
func (mr *MockStateMockRecorder) AllRemoteSecrets(arg0 any) *MockStateAllRemoteSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRemoteSecrets", reflect.TypeOf((*MockState)(nil).AllRemoteSecrets), arg0)
	return &MockStateAllRemoteSecretsCall{Call: call}
}

// MockStateAllRemoteSecretsCall wrap *gomock.Call
type MockStateAllRemoteSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllRemoteSecretsCall) Return(arg0 []secret.RemoteSecretInfo, arg1 error) *MockStateAllRemoteSecretsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllRemoteSecretsCall) Do(f func(context.Context) ([]secret.RemoteSecretInfo, error)) *MockStateAllRemoteSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllRemoteSecretsCall) DoAndReturn(f func(context.Context) ([]secret.RemoteSecretInfo, error)) *MockStateAllRemoteSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllSecretConsumers mocks base method.
func (m *MockState) AllSecretConsumers(arg0 context.Context) (map[string][]secret.ConsumerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSecretConsumers", arg0)
	ret0, _ := ret[0].(map[string][]secret.ConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSecretConsumers indicates an expected call of AllSecretConsumers.
func (mr *MockStateMockRecorder) AllSecretConsumers(arg0 any) *MockStateAllSecretConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSecretConsumers", reflect.TypeOf((*MockState)(nil).AllSecretConsumers), arg0)
	return &MockStateAllSecretConsumersCall{Call: call}
}

// MockStateAllSecretConsumersCall wrap *gomock.Call
type MockStateAllSecretConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllSecretConsumersCall) Return(arg0 map[string][]secret.ConsumerInfo, arg1 error) *MockStateAllSecretConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllSecretConsumersCall) Do(f func(context.Context) (map[string][]secret.ConsumerInfo, error)) *MockStateAllSecretConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllSecretConsumersCall) DoAndReturn(f func(context.Context) (map[string][]secret.ConsumerInfo, error)) *MockStateAllSecretConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllSecretGrants mocks base method.
func (m *MockState) AllSecretGrants(arg0 context.Context) (map[string][]secret.GrantParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSecretGrants", arg0)
	ret0, _ := ret[0].(map[string][]secret.GrantParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSecretGrants indicates an expected call of AllSecretGrants.
func (mr *MockStateMockRecorder) AllSecretGrants(arg0 any) *MockStateAllSecretGrantsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSecretGrants", reflect.TypeOf((*MockState)(nil).AllSecretGrants), arg0)
	return &MockStateAllSecretGrantsCall{Call: call}
}

// MockStateAllSecretGrantsCall wrap *gomock.Call
type MockStateAllSecretGrantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllSecretGrantsCall) Return(arg0 map[string][]secret.GrantParams, arg1 error) *MockStateAllSecretGrantsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllSecretGrantsCall) Do(f func(context.Context) (map[string][]secret.GrantParams, error)) *MockStateAllSecretGrantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllSecretGrantsCall) DoAndReturn(f func(context.Context) (map[string][]secret.GrantParams, error)) *MockStateAllSecretGrantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllSecretRemoteConsumers mocks base method.
func (m *MockState) AllSecretRemoteConsumers(arg0 context.Context) (map[string][]secret.ConsumerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSecretRemoteConsumers", arg0)
	ret0, _ := ret[0].(map[string][]secret.ConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSecretRemoteConsumers indicates an expected call of AllSecretRemoteConsumers.
func (mr *MockStateMockRecorder) AllSecretRemoteConsumers(arg0 any) *MockStateAllSecretRemoteConsumersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSecretRemoteConsumers", reflect.TypeOf((*MockState)(nil).AllSecretRemoteConsumers), arg0)
	return &MockStateAllSecretRemoteConsumersCall{Call: call}
}

// MockStateAllSecretRemoteConsumersCall wrap *gomock.Call
type MockStateAllSecretRemoteConsumersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllSecretRemoteConsumersCall) Return(arg0 map[string][]secret.ConsumerInfo, arg1 error) *MockStateAllSecretRemoteConsumersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllSecretRemoteConsumersCall) Do(f func(context.Context) (map[string][]secret.ConsumerInfo, error)) *MockStateAllSecretRemoteConsumersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllSecretRemoteConsumersCall) DoAndReturn(f func(context.Context) (map[string][]secret.ConsumerInfo, error)) *MockStateAllSecretRemoteConsumersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChangeSecretBackend mocks base method.
func (m *MockState) ChangeSecretBackend(arg0 context.Context, arg1 uuid.UUID, arg2 *secrets.ValueRef, arg3 secrets.SecretData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSecretBackend", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSecretBackend indicates an expected call of ChangeSecretBackend.
func (mr *MockStateMockRecorder) ChangeSecretBackend(arg0, arg1, arg2, arg3 any) *MockStateChangeSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSecretBackend", reflect.TypeOf((*MockState)(nil).ChangeSecretBackend), arg0, arg1, arg2, arg3)
	return &MockStateChangeSecretBackendCall{Call: call}
}

// MockStateChangeSecretBackendCall wrap *gomock.Call
type MockStateChangeSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateChangeSecretBackendCall) Return(arg0 error) *MockStateChangeSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateChangeSecretBackendCall) Do(f func(context.Context, uuid.UUID, *secrets.ValueRef, secrets.SecretData) error) *MockStateChangeSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateChangeSecretBackendCall) DoAndReturn(f func(context.Context, uuid.UUID, *secrets.ValueRef, secrets.SecretData) error) *MockStateChangeSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckApplicationSecretLabelExists mocks base method.
func (m *MockState) CheckApplicationSecretLabelExists(arg0 domain.AtomicContext, arg1 application.ID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckApplicationSecretLabelExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckApplicationSecretLabelExists indicates an expected call of CheckApplicationSecretLabelExists.
func (mr *MockStateMockRecorder) CheckApplicationSecretLabelExists(arg0, arg1, arg2 any) *MockStateCheckApplicationSecretLabelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckApplicationSecretLabelExists", reflect.TypeOf((*MockState)(nil).CheckApplicationSecretLabelExists), arg0, arg1, arg2)
	return &MockStateCheckApplicationSecretLabelExistsCall{Call: call}
}

// MockStateCheckApplicationSecretLabelExistsCall wrap *gomock.Call
type MockStateCheckApplicationSecretLabelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckApplicationSecretLabelExistsCall) Return(arg0 bool, arg1 error) *MockStateCheckApplicationSecretLabelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckApplicationSecretLabelExistsCall) Do(f func(domain.AtomicContext, application.ID, string) (bool, error)) *MockStateCheckApplicationSecretLabelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckApplicationSecretLabelExistsCall) DoAndReturn(f func(domain.AtomicContext, application.ID, string) (bool, error)) *MockStateCheckApplicationSecretLabelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUnitSecretLabelExists mocks base method.
func (m *MockState) CheckUnitSecretLabelExists(arg0 domain.AtomicContext, arg1 unit.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnitSecretLabelExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUnitSecretLabelExists indicates an expected call of CheckUnitSecretLabelExists.
func (mr *MockStateMockRecorder) CheckUnitSecretLabelExists(arg0, arg1, arg2 any) *MockStateCheckUnitSecretLabelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnitSecretLabelExists", reflect.TypeOf((*MockState)(nil).CheckUnitSecretLabelExists), arg0, arg1, arg2)
	return &MockStateCheckUnitSecretLabelExistsCall{Call: call}
}

// MockStateCheckUnitSecretLabelExistsCall wrap *gomock.Call
type MockStateCheckUnitSecretLabelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckUnitSecretLabelExistsCall) Return(arg0 bool, arg1 error) *MockStateCheckUnitSecretLabelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckUnitSecretLabelExistsCall) Do(f func(domain.AtomicContext, unit.UUID, string) (bool, error)) *MockStateCheckUnitSecretLabelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckUnitSecretLabelExistsCall) DoAndReturn(f func(domain.AtomicContext, unit.UUID, string) (bool, error)) *MockStateCheckUnitSecretLabelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUserSecretLabelExists mocks base method.
func (m *MockState) CheckUserSecretLabelExists(arg0 domain.AtomicContext, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserSecretLabelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserSecretLabelExists indicates an expected call of CheckUserSecretLabelExists.
func (mr *MockStateMockRecorder) CheckUserSecretLabelExists(arg0, arg1 any) *MockStateCheckUserSecretLabelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserSecretLabelExists", reflect.TypeOf((*MockState)(nil).CheckUserSecretLabelExists), arg0, arg1)
	return &MockStateCheckUserSecretLabelExistsCall{Call: call}
}

// MockStateCheckUserSecretLabelExistsCall wrap *gomock.Call
type MockStateCheckUserSecretLabelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckUserSecretLabelExistsCall) Return(arg0 bool, arg1 error) *MockStateCheckUserSecretLabelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckUserSecretLabelExistsCall) Do(f func(domain.AtomicContext, string) (bool, error)) *MockStateCheckUserSecretLabelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckUserSecretLabelExistsCall) DoAndReturn(f func(domain.AtomicContext, string) (bool, error)) *MockStateCheckUserSecretLabelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCharmApplicationSecret mocks base method.
func (m *MockState) CreateCharmApplicationSecret(arg0 domain.AtomicContext, arg1 int, arg2 *secrets.URI, arg3 application.ID, arg4 secret.UpsertSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharmApplicationSecret", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCharmApplicationSecret indicates an expected call of CreateCharmApplicationSecret.
func (mr *MockStateMockRecorder) CreateCharmApplicationSecret(arg0, arg1, arg2, arg3, arg4 any) *MockStateCreateCharmApplicationSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharmApplicationSecret", reflect.TypeOf((*MockState)(nil).CreateCharmApplicationSecret), arg0, arg1, arg2, arg3, arg4)
	return &MockStateCreateCharmApplicationSecretCall{Call: call}
}

// MockStateCreateCharmApplicationSecretCall wrap *gomock.Call
type MockStateCreateCharmApplicationSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateCharmApplicationSecretCall) Return(arg0 error) *MockStateCreateCharmApplicationSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateCharmApplicationSecretCall) Do(f func(domain.AtomicContext, int, *secrets.URI, application.ID, secret.UpsertSecretParams) error) *MockStateCreateCharmApplicationSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateCharmApplicationSecretCall) DoAndReturn(f func(domain.AtomicContext, int, *secrets.URI, application.ID, secret.UpsertSecretParams) error) *MockStateCreateCharmApplicationSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCharmUnitSecret mocks base method.
func (m *MockState) CreateCharmUnitSecret(arg0 domain.AtomicContext, arg1 int, arg2 *secrets.URI, arg3 unit.UUID, arg4 secret.UpsertSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharmUnitSecret", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCharmUnitSecret indicates an expected call of CreateCharmUnitSecret.
func (mr *MockStateMockRecorder) CreateCharmUnitSecret(arg0, arg1, arg2, arg3, arg4 any) *MockStateCreateCharmUnitSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharmUnitSecret", reflect.TypeOf((*MockState)(nil).CreateCharmUnitSecret), arg0, arg1, arg2, arg3, arg4)
	return &MockStateCreateCharmUnitSecretCall{Call: call}
}

// MockStateCreateCharmUnitSecretCall wrap *gomock.Call
type MockStateCreateCharmUnitSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateCharmUnitSecretCall) Return(arg0 error) *MockStateCreateCharmUnitSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateCharmUnitSecretCall) Do(f func(domain.AtomicContext, int, *secrets.URI, unit.UUID, secret.UpsertSecretParams) error) *MockStateCreateCharmUnitSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateCharmUnitSecretCall) DoAndReturn(f func(domain.AtomicContext, int, *secrets.URI, unit.UUID, secret.UpsertSecretParams) error) *MockStateCreateCharmUnitSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateUserSecret mocks base method.
func (m *MockState) CreateUserSecret(arg0 domain.AtomicContext, arg1 int, arg2 *secrets.URI, arg3 secret.UpsertSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserSecret indicates an expected call of CreateUserSecret.
func (mr *MockStateMockRecorder) CreateUserSecret(arg0, arg1, arg2, arg3 any) *MockStateCreateUserSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSecret", reflect.TypeOf((*MockState)(nil).CreateUserSecret), arg0, arg1, arg2, arg3)
	return &MockStateCreateUserSecretCall{Call: call}
}

// MockStateCreateUserSecretCall wrap *gomock.Call
type MockStateCreateUserSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateUserSecretCall) Return(arg0 error) *MockStateCreateUserSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateUserSecretCall) Do(f func(domain.AtomicContext, int, *secrets.URI, secret.UpsertSecretParams) error) *MockStateCreateUserSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateUserSecretCall) DoAndReturn(f func(domain.AtomicContext, int, *secrets.URI, secret.UpsertSecretParams) error) *MockStateCreateUserSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteObsoleteUserSecretRevisions mocks base method.
func (m *MockState) DeleteObsoleteUserSecretRevisions(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObsoleteUserSecretRevisions", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObsoleteUserSecretRevisions indicates an expected call of DeleteObsoleteUserSecretRevisions.
func (mr *MockStateMockRecorder) DeleteObsoleteUserSecretRevisions(arg0 any) *MockStateDeleteObsoleteUserSecretRevisionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObsoleteUserSecretRevisions", reflect.TypeOf((*MockState)(nil).DeleteObsoleteUserSecretRevisions), arg0)
	return &MockStateDeleteObsoleteUserSecretRevisionsCall{Call: call}
}

// MockStateDeleteObsoleteUserSecretRevisionsCall wrap *gomock.Call
type MockStateDeleteObsoleteUserSecretRevisionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteObsoleteUserSecretRevisionsCall) Return(arg0 []string, arg1 error) *MockStateDeleteObsoleteUserSecretRevisionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteObsoleteUserSecretRevisionsCall) Do(f func(context.Context) ([]string, error)) *MockStateDeleteObsoleteUserSecretRevisionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteObsoleteUserSecretRevisionsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockStateDeleteObsoleteUserSecretRevisionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSecret mocks base method.
func (m *MockState) DeleteSecret(arg0 domain.AtomicContext, arg1 *secrets.URI, arg2 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockStateMockRecorder) DeleteSecret(arg0, arg1, arg2 any) *MockStateDeleteSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockState)(nil).DeleteSecret), arg0, arg1, arg2)
	return &MockStateDeleteSecretCall{Call: call}
}

// MockStateDeleteSecretCall wrap *gomock.Call
type MockStateDeleteSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteSecretCall) Return(arg0 error) *MockStateDeleteSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteSecretCall) Do(f func(domain.AtomicContext, *secrets.URI, []int) error) *MockStateDeleteSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteSecretCall) DoAndReturn(f func(domain.AtomicContext, *secrets.URI, []int) error) *MockStateDeleteSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationUUID mocks base method.
func (m *MockState) GetApplicationUUID(arg0 domain.AtomicContext, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationUUID", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationUUID indicates an expected call of GetApplicationUUID.
func (mr *MockStateMockRecorder) GetApplicationUUID(arg0, arg1 any) *MockStateGetApplicationUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUUID", reflect.TypeOf((*MockState)(nil).GetApplicationUUID), arg0, arg1)
	return &MockStateGetApplicationUUIDCall{Call: call}
}

// MockStateGetApplicationUUIDCall wrap *gomock.Call
type MockStateGetApplicationUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationUUIDCall) Return(arg0 application.ID, arg1 error) *MockStateGetApplicationUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationUUIDCall) Do(f func(domain.AtomicContext, string) (application.ID, error)) *MockStateGetApplicationUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationUUIDCall) DoAndReturn(f func(domain.AtomicContext, string) (application.ID, error)) *MockStateGetApplicationUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConsumedRemoteSecretURIsWithChanges mocks base method.
func (m *MockState) GetConsumedRemoteSecretURIsWithChanges(arg0 context.Context, arg1 unit.Name, arg2 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsumedRemoteSecretURIsWithChanges", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumedRemoteSecretURIsWithChanges indicates an expected call of GetConsumedRemoteSecretURIsWithChanges.
func (mr *MockStateMockRecorder) GetConsumedRemoteSecretURIsWithChanges(arg0, arg1 any, arg2 ...any) *MockStateGetConsumedRemoteSecretURIsWithChangesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumedRemoteSecretURIsWithChanges", reflect.TypeOf((*MockState)(nil).GetConsumedRemoteSecretURIsWithChanges), varargs...)
	return &MockStateGetConsumedRemoteSecretURIsWithChangesCall{Call: call}
}

// MockStateGetConsumedRemoteSecretURIsWithChangesCall wrap *gomock.Call
type MockStateGetConsumedRemoteSecretURIsWithChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetConsumedRemoteSecretURIsWithChangesCall) Return(arg0 []string, arg1 error) *MockStateGetConsumedRemoteSecretURIsWithChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetConsumedRemoteSecretURIsWithChangesCall) Do(f func(context.Context, unit.Name, ...string) ([]string, error)) *MockStateGetConsumedRemoteSecretURIsWithChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetConsumedRemoteSecretURIsWithChangesCall) DoAndReturn(f func(context.Context, unit.Name, ...string) ([]string, error)) *MockStateGetConsumedRemoteSecretURIsWithChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConsumedSecretURIsWithChanges mocks base method.
func (m *MockState) GetConsumedSecretURIsWithChanges(arg0 context.Context, arg1 unit.Name, arg2 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsumedSecretURIsWithChanges", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumedSecretURIsWithChanges indicates an expected call of GetConsumedSecretURIsWithChanges.
func (mr *MockStateMockRecorder) GetConsumedSecretURIsWithChanges(arg0, arg1 any, arg2 ...any) *MockStateGetConsumedSecretURIsWithChangesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumedSecretURIsWithChanges", reflect.TypeOf((*MockState)(nil).GetConsumedSecretURIsWithChanges), varargs...)
	return &MockStateGetConsumedSecretURIsWithChangesCall{Call: call}
}

// MockStateGetConsumedSecretURIsWithChangesCall wrap *gomock.Call
type MockStateGetConsumedSecretURIsWithChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetConsumedSecretURIsWithChangesCall) Return(arg0 []string, arg1 error) *MockStateGetConsumedSecretURIsWithChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetConsumedSecretURIsWithChangesCall) Do(f func(context.Context, unit.Name, ...string) ([]string, error)) *MockStateGetConsumedSecretURIsWithChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetConsumedSecretURIsWithChangesCall) DoAndReturn(f func(context.Context, unit.Name, ...string) ([]string, error)) *MockStateGetConsumedSecretURIsWithChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLatestRevision mocks base method.
func (m *MockState) GetLatestRevision(arg0 context.Context, arg1 *secrets.URI) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRevision", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRevision indicates an expected call of GetLatestRevision.
func (mr *MockStateMockRecorder) GetLatestRevision(arg0, arg1 any) *MockStateGetLatestRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRevision", reflect.TypeOf((*MockState)(nil).GetLatestRevision), arg0, arg1)
	return &MockStateGetLatestRevisionCall{Call: call}
}

// MockStateGetLatestRevisionCall wrap *gomock.Call
type MockStateGetLatestRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetLatestRevisionCall) Return(arg0 int, arg1 error) *MockStateGetLatestRevisionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetLatestRevisionCall) Do(f func(context.Context, *secrets.URI) (int, error)) *MockStateGetLatestRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetLatestRevisionCall) DoAndReturn(f func(context.Context, *secrets.URI) (int, error)) *MockStateGetLatestRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUUID mocks base method.
func (m *MockState) GetModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUUID indicates an expected call of GetModelUUID.
func (mr *MockStateMockRecorder) GetModelUUID(arg0 any) *MockStateGetModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUUID", reflect.TypeOf((*MockState)(nil).GetModelUUID), arg0)
	return &MockStateGetModelUUIDCall{Call: call}
}

// MockStateGetModelUUIDCall wrap *gomock.Call
type MockStateGetModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockStateGetModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockStateGetModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockStateGetModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetObsoleteUserSecretRevisionsReadyToPrune mocks base method.
func (m *MockState) GetObsoleteUserSecretRevisionsReadyToPrune(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObsoleteUserSecretRevisionsReadyToPrune", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObsoleteUserSecretRevisionsReadyToPrune indicates an expected call of GetObsoleteUserSecretRevisionsReadyToPrune.
func (mr *MockStateMockRecorder) GetObsoleteUserSecretRevisionsReadyToPrune(arg0 any) *MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObsoleteUserSecretRevisionsReadyToPrune", reflect.TypeOf((*MockState)(nil).GetObsoleteUserSecretRevisionsReadyToPrune), arg0)
	return &MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall{Call: call}
}

// MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall wrap *gomock.Call
type MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall) Return(arg0 []string, arg1 error) *MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall) Do(f func(context.Context) ([]string, error)) *MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockStateGetObsoleteUserSecretRevisionsReadyToPruneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOwnedSecretIDs mocks base method.
func (m *MockState) GetOwnedSecretIDs(arg0 context.Context, arg1 secret.ApplicationOwners, arg2 secret.UnitOwners) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnedSecretIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnedSecretIDs indicates an expected call of GetOwnedSecretIDs.
func (mr *MockStateMockRecorder) GetOwnedSecretIDs(arg0, arg1, arg2 any) *MockStateGetOwnedSecretIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnedSecretIDs", reflect.TypeOf((*MockState)(nil).GetOwnedSecretIDs), arg0, arg1, arg2)
	return &MockStateGetOwnedSecretIDsCall{Call: call}
}

// MockStateGetOwnedSecretIDsCall wrap *gomock.Call
type MockStateGetOwnedSecretIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetOwnedSecretIDsCall) Return(arg0 []string, arg1 error) *MockStateGetOwnedSecretIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetOwnedSecretIDsCall) Do(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners) ([]string, error)) *MockStateGetOwnedSecretIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetOwnedSecretIDsCall) DoAndReturn(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners) ([]string, error)) *MockStateGetOwnedSecretIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteConsumedSecretURIsWithChangesFromOfferingSide mocks base method.
func (m *MockState) GetRemoteConsumedSecretURIsWithChangesFromOfferingSide(arg0 context.Context, arg1 string, arg2 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRemoteConsumedSecretURIsWithChangesFromOfferingSide", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteConsumedSecretURIsWithChangesFromOfferingSide indicates an expected call of GetRemoteConsumedSecretURIsWithChangesFromOfferingSide.
func (mr *MockStateMockRecorder) GetRemoteConsumedSecretURIsWithChangesFromOfferingSide(arg0, arg1 any, arg2 ...any) *MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteConsumedSecretURIsWithChangesFromOfferingSide", reflect.TypeOf((*MockState)(nil).GetRemoteConsumedSecretURIsWithChangesFromOfferingSide), varargs...)
	return &MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall{Call: call}
}

// MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall wrap *gomock.Call
type MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall) Return(arg0 []string, arg1 error) *MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall) Do(f func(context.Context, string, ...string) ([]string, error)) *MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall) DoAndReturn(f func(context.Context, string, ...string) ([]string, error)) *MockStateGetRemoteConsumedSecretURIsWithChangesFromOfferingSideCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRevisionIDsForObsolete mocks base method.
func (m *MockState) GetRevisionIDsForObsolete(arg0 context.Context, arg1 secret.ApplicationOwners, arg2 secret.UnitOwners, arg3 ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRevisionIDsForObsolete", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisionIDsForObsolete indicates an expected call of GetRevisionIDsForObsolete.
func (mr *MockStateMockRecorder) GetRevisionIDsForObsolete(arg0, arg1, arg2 any, arg3 ...any) *MockStateGetRevisionIDsForObsoleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionIDsForObsolete", reflect.TypeOf((*MockState)(nil).GetRevisionIDsForObsolete), varargs...)
	return &MockStateGetRevisionIDsForObsoleteCall{Call: call}
}

// MockStateGetRevisionIDsForObsoleteCall wrap *gomock.Call
type MockStateGetRevisionIDsForObsoleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRevisionIDsForObsoleteCall) Return(arg0 map[string]string, arg1 error) *MockStateGetRevisionIDsForObsoleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRevisionIDsForObsoleteCall) Do(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners, ...string) (map[string]string, error)) *MockStateGetRevisionIDsForObsoleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRevisionIDsForObsoleteCall) DoAndReturn(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners, ...string) (map[string]string, error)) *MockStateGetRevisionIDsForObsoleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRotatePolicy mocks base method.
func (m *MockState) GetRotatePolicy(arg0 context.Context, arg1 *secrets.URI) (secrets.RotatePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRotatePolicy", arg0, arg1)
	ret0, _ := ret[0].(secrets.RotatePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRotatePolicy indicates an expected call of GetRotatePolicy.
func (mr *MockStateMockRecorder) GetRotatePolicy(arg0, arg1 any) *MockStateGetRotatePolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRotatePolicy", reflect.TypeOf((*MockState)(nil).GetRotatePolicy), arg0, arg1)
	return &MockStateGetRotatePolicyCall{Call: call}
}

// MockStateGetRotatePolicyCall wrap *gomock.Call
type MockStateGetRotatePolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRotatePolicyCall) Return(arg0 secrets.RotatePolicy, arg1 error) *MockStateGetRotatePolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRotatePolicyCall) Do(f func(context.Context, *secrets.URI) (secrets.RotatePolicy, error)) *MockStateGetRotatePolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRotatePolicyCall) DoAndReturn(f func(context.Context, *secrets.URI) (secrets.RotatePolicy, error)) *MockStateGetRotatePolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRotationExpiryInfo mocks base method.
func (m *MockState) GetRotationExpiryInfo(arg0 context.Context, arg1 *secrets.URI) (*secret.RotationExpiryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRotationExpiryInfo", arg0, arg1)
	ret0, _ := ret[0].(*secret.RotationExpiryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRotationExpiryInfo indicates an expected call of GetRotationExpiryInfo.
func (mr *MockStateMockRecorder) GetRotationExpiryInfo(arg0, arg1 any) *MockStateGetRotationExpiryInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRotationExpiryInfo", reflect.TypeOf((*MockState)(nil).GetRotationExpiryInfo), arg0, arg1)
	return &MockStateGetRotationExpiryInfoCall{Call: call}
}

// MockStateGetRotationExpiryInfoCall wrap *gomock.Call
type MockStateGetRotationExpiryInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRotationExpiryInfoCall) Return(arg0 *secret.RotationExpiryInfo, arg1 error) *MockStateGetRotationExpiryInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRotationExpiryInfoCall) Do(f func(context.Context, *secrets.URI) (*secret.RotationExpiryInfo, error)) *MockStateGetRotationExpiryInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRotationExpiryInfoCall) DoAndReturn(f func(context.Context, *secrets.URI) (*secret.RotationExpiryInfo, error)) *MockStateGetRotationExpiryInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecret mocks base method.
func (m *MockState) GetSecret(arg0 context.Context, arg1 *secrets.URI) (*secrets.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockStateMockRecorder) GetSecret(arg0, arg1 any) *MockStateGetSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockState)(nil).GetSecret), arg0, arg1)
	return &MockStateGetSecretCall{Call: call}
}

// MockStateGetSecretCall wrap *gomock.Call
type MockStateGetSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretCall) Return(arg0 *secrets.SecretMetadata, arg1 error) *MockStateGetSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretCall) Do(f func(context.Context, *secrets.URI) (*secrets.SecretMetadata, error)) *MockStateGetSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretCall) DoAndReturn(f func(context.Context, *secrets.URI) (*secrets.SecretMetadata, error)) *MockStateGetSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretAccess mocks base method.
func (m *MockState) GetSecretAccess(arg0 context.Context, arg1 *secrets.URI, arg2 secret.AccessParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretAccess indicates an expected call of GetSecretAccess.
func (mr *MockStateMockRecorder) GetSecretAccess(arg0, arg1, arg2 any) *MockStateGetSecretAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretAccess", reflect.TypeOf((*MockState)(nil).GetSecretAccess), arg0, arg1, arg2)
	return &MockStateGetSecretAccessCall{Call: call}
}

// MockStateGetSecretAccessCall wrap *gomock.Call
type MockStateGetSecretAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretAccessCall) Return(arg0 string, arg1 error) *MockStateGetSecretAccessCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretAccessCall) Do(f func(context.Context, *secrets.URI, secret.AccessParams) (string, error)) *MockStateGetSecretAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretAccessCall) DoAndReturn(f func(context.Context, *secrets.URI, secret.AccessParams) (string, error)) *MockStateGetSecretAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretAccessScope mocks base method.
func (m *MockState) GetSecretAccessScope(arg0 context.Context, arg1 *secrets.URI, arg2 secret.AccessParams) (*secret.AccessScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretAccessScope", arg0, arg1, arg2)
	ret0, _ := ret[0].(*secret.AccessScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretAccessScope indicates an expected call of GetSecretAccessScope.
func (mr *MockStateMockRecorder) GetSecretAccessScope(arg0, arg1, arg2 any) *MockStateGetSecretAccessScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretAccessScope", reflect.TypeOf((*MockState)(nil).GetSecretAccessScope), arg0, arg1, arg2)
	return &MockStateGetSecretAccessScopeCall{Call: call}
}

// MockStateGetSecretAccessScopeCall wrap *gomock.Call
type MockStateGetSecretAccessScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretAccessScopeCall) Return(arg0 *secret.AccessScope, arg1 error) *MockStateGetSecretAccessScopeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretAccessScopeCall) Do(f func(context.Context, *secrets.URI, secret.AccessParams) (*secret.AccessScope, error)) *MockStateGetSecretAccessScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretAccessScopeCall) DoAndReturn(f func(context.Context, *secrets.URI, secret.AccessParams) (*secret.AccessScope, error)) *MockStateGetSecretAccessScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretConsumer mocks base method.
func (m *MockState) GetSecretConsumer(arg0 context.Context, arg1 *secrets.URI, arg2 unit.Name) (*secrets.SecretConsumerMetadata, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretConsumer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*secrets.SecretConsumerMetadata)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretConsumer indicates an expected call of GetSecretConsumer.
func (mr *MockStateMockRecorder) GetSecretConsumer(arg0, arg1, arg2 any) *MockStateGetSecretConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretConsumer", reflect.TypeOf((*MockState)(nil).GetSecretConsumer), arg0, arg1, arg2)
	return &MockStateGetSecretConsumerCall{Call: call}
}

// MockStateGetSecretConsumerCall wrap *gomock.Call
type MockStateGetSecretConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretConsumerCall) Return(arg0 *secrets.SecretConsumerMetadata, arg1 int, arg2 error) *MockStateGetSecretConsumerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretConsumerCall) Do(f func(context.Context, *secrets.URI, unit.Name) (*secrets.SecretConsumerMetadata, int, error)) *MockStateGetSecretConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, unit.Name) (*secrets.SecretConsumerMetadata, int, error)) *MockStateGetSecretConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretGrants mocks base method.
func (m *MockState) GetSecretGrants(arg0 context.Context, arg1 *secrets.URI, arg2 secrets.SecretRole) ([]secret.GrantParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretGrants", arg0, arg1, arg2)
	ret0, _ := ret[0].([]secret.GrantParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretGrants indicates an expected call of GetSecretGrants.
func (mr *MockStateMockRecorder) GetSecretGrants(arg0, arg1, arg2 any) *MockStateGetSecretGrantsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretGrants", reflect.TypeOf((*MockState)(nil).GetSecretGrants), arg0, arg1, arg2)
	return &MockStateGetSecretGrantsCall{Call: call}
}

// MockStateGetSecretGrantsCall wrap *gomock.Call
type MockStateGetSecretGrantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretGrantsCall) Return(arg0 []secret.GrantParams, arg1 error) *MockStateGetSecretGrantsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretGrantsCall) Do(f func(context.Context, *secrets.URI, secrets.SecretRole) ([]secret.GrantParams, error)) *MockStateGetSecretGrantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretGrantsCall) DoAndReturn(f func(context.Context, *secrets.URI, secrets.SecretRole) ([]secret.GrantParams, error)) *MockStateGetSecretGrantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretOwner mocks base method.
func (m *MockState) GetSecretOwner(arg0 domain.AtomicContext, arg1 *secrets.URI) (secret.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretOwner", arg0, arg1)
	ret0, _ := ret[0].(secret.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretOwner indicates an expected call of GetSecretOwner.
func (mr *MockStateMockRecorder) GetSecretOwner(arg0, arg1 any) *MockStateGetSecretOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretOwner", reflect.TypeOf((*MockState)(nil).GetSecretOwner), arg0, arg1)
	return &MockStateGetSecretOwnerCall{Call: call}
}

// MockStateGetSecretOwnerCall wrap *gomock.Call
type MockStateGetSecretOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretOwnerCall) Return(arg0 secret.Owner, arg1 error) *MockStateGetSecretOwnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretOwnerCall) Do(f func(domain.AtomicContext, *secrets.URI) (secret.Owner, error)) *MockStateGetSecretOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretOwnerCall) DoAndReturn(f func(domain.AtomicContext, *secrets.URI) (secret.Owner, error)) *MockStateGetSecretOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretRemoteConsumer mocks base method.
func (m *MockState) GetSecretRemoteConsumer(arg0 context.Context, arg1 *secrets.URI, arg2 unit.Name) (*secrets.SecretConsumerMetadata, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretRemoteConsumer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*secrets.SecretConsumerMetadata)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretRemoteConsumer indicates an expected call of GetSecretRemoteConsumer.
func (mr *MockStateMockRecorder) GetSecretRemoteConsumer(arg0, arg1, arg2 any) *MockStateGetSecretRemoteConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretRemoteConsumer", reflect.TypeOf((*MockState)(nil).GetSecretRemoteConsumer), arg0, arg1, arg2)
	return &MockStateGetSecretRemoteConsumerCall{Call: call}
}

// MockStateGetSecretRemoteConsumerCall wrap *gomock.Call
type MockStateGetSecretRemoteConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretRemoteConsumerCall) Return(arg0 *secrets.SecretConsumerMetadata, arg1 int, arg2 error) *MockStateGetSecretRemoteConsumerCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretRemoteConsumerCall) Do(f func(context.Context, *secrets.URI, unit.Name) (*secrets.SecretConsumerMetadata, int, error)) *MockStateGetSecretRemoteConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretRemoteConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, unit.Name) (*secrets.SecretConsumerMetadata, int, error)) *MockStateGetSecretRemoteConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretRevisionID mocks base method.
func (m *MockState) GetSecretRevisionID(arg0 context.Context, arg1 *secrets.URI, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretRevisionID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretRevisionID indicates an expected call of GetSecretRevisionID.
func (mr *MockStateMockRecorder) GetSecretRevisionID(arg0, arg1, arg2 any) *MockStateGetSecretRevisionIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretRevisionID", reflect.TypeOf((*MockState)(nil).GetSecretRevisionID), arg0, arg1, arg2)
	return &MockStateGetSecretRevisionIDCall{Call: call}
}

// MockStateGetSecretRevisionIDCall wrap *gomock.Call
type MockStateGetSecretRevisionIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretRevisionIDCall) Return(arg0 string, arg1 error) *MockStateGetSecretRevisionIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretRevisionIDCall) Do(f func(context.Context, *secrets.URI, int) (string, error)) *MockStateGetSecretRevisionIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretRevisionIDCall) DoAndReturn(f func(context.Context, *secrets.URI, int) (string, error)) *MockStateGetSecretRevisionIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretValue mocks base method.
func (m *MockState) GetSecretValue(arg0 context.Context, arg1 *secrets.URI, arg2 int) (secrets.SecretData, *secrets.ValueRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(secrets.SecretData)
	ret1, _ := ret[1].(*secrets.ValueRef)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockStateMockRecorder) GetSecretValue(arg0, arg1, arg2 any) *MockStateGetSecretValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockState)(nil).GetSecretValue), arg0, arg1, arg2)
	return &MockStateGetSecretValueCall{Call: call}
}

// MockStateGetSecretValueCall wrap *gomock.Call
type MockStateGetSecretValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretValueCall) Return(arg0 secrets.SecretData, arg1 *secrets.ValueRef, arg2 error) *MockStateGetSecretValueCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretValueCall) Do(f func(context.Context, *secrets.URI, int) (secrets.SecretData, *secrets.ValueRef, error)) *MockStateGetSecretValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretValueCall) DoAndReturn(f func(context.Context, *secrets.URI, int) (secrets.SecretData, *secrets.ValueRef, error)) *MockStateGetSecretValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretsRevisionExpiryChanges mocks base method.
func (m *MockState) GetSecretsRevisionExpiryChanges(arg0 context.Context, arg1 secret.ApplicationOwners, arg2 secret.UnitOwners, arg3 ...string) ([]secret.ExpiryInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecretsRevisionExpiryChanges", varargs...)
	ret0, _ := ret[0].([]secret.ExpiryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsRevisionExpiryChanges indicates an expected call of GetSecretsRevisionExpiryChanges.
func (mr *MockStateMockRecorder) GetSecretsRevisionExpiryChanges(arg0, arg1, arg2 any, arg3 ...any) *MockStateGetSecretsRevisionExpiryChangesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsRevisionExpiryChanges", reflect.TypeOf((*MockState)(nil).GetSecretsRevisionExpiryChanges), varargs...)
	return &MockStateGetSecretsRevisionExpiryChangesCall{Call: call}
}

// MockStateGetSecretsRevisionExpiryChangesCall wrap *gomock.Call
type MockStateGetSecretsRevisionExpiryChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretsRevisionExpiryChangesCall) Return(arg0 []secret.ExpiryInfo, arg1 error) *MockStateGetSecretsRevisionExpiryChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretsRevisionExpiryChangesCall) Do(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners, ...string) ([]secret.ExpiryInfo, error)) *MockStateGetSecretsRevisionExpiryChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretsRevisionExpiryChangesCall) DoAndReturn(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners, ...string) ([]secret.ExpiryInfo, error)) *MockStateGetSecretsRevisionExpiryChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretsRotationChanges mocks base method.
func (m *MockState) GetSecretsRotationChanges(arg0 context.Context, arg1 secret.ApplicationOwners, arg2 secret.UnitOwners, arg3 ...string) ([]secret.RotationInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecretsRotationChanges", varargs...)
	ret0, _ := ret[0].([]secret.RotationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsRotationChanges indicates an expected call of GetSecretsRotationChanges.
func (mr *MockStateMockRecorder) GetSecretsRotationChanges(arg0, arg1, arg2 any, arg3 ...any) *MockStateGetSecretsRotationChangesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsRotationChanges", reflect.TypeOf((*MockState)(nil).GetSecretsRotationChanges), varargs...)
	return &MockStateGetSecretsRotationChangesCall{Call: call}
}

// MockStateGetSecretsRotationChangesCall wrap *gomock.Call
type MockStateGetSecretsRotationChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretsRotationChangesCall) Return(arg0 []secret.RotationInfo, arg1 error) *MockStateGetSecretsRotationChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretsRotationChangesCall) Do(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners, ...string) ([]secret.RotationInfo, error)) *MockStateGetSecretsRotationChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretsRotationChangesCall) DoAndReturn(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners, ...string) ([]secret.RotationInfo, error)) *MockStateGetSecretsRotationChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetURIByConsumerLabel mocks base method.
func (m *MockState) GetURIByConsumerLabel(arg0 context.Context, arg1 string, arg2 unit.Name) (*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURIByConsumerLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURIByConsumerLabel indicates an expected call of GetURIByConsumerLabel.
func (mr *MockStateMockRecorder) GetURIByConsumerLabel(arg0, arg1, arg2 any) *MockStateGetURIByConsumerLabelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURIByConsumerLabel", reflect.TypeOf((*MockState)(nil).GetURIByConsumerLabel), arg0, arg1, arg2)
	return &MockStateGetURIByConsumerLabelCall{Call: call}
}

// MockStateGetURIByConsumerLabelCall wrap *gomock.Call
type MockStateGetURIByConsumerLabelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetURIByConsumerLabelCall) Return(arg0 *secrets.URI, arg1 error) *MockStateGetURIByConsumerLabelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetURIByConsumerLabelCall) Do(f func(context.Context, string, unit.Name) (*secrets.URI, error)) *MockStateGetURIByConsumerLabelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetURIByConsumerLabelCall) DoAndReturn(f func(context.Context, string, unit.Name) (*secrets.URI, error)) *MockStateGetURIByConsumerLabelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockState) GetUnitUUID(arg0 domain.AtomicContext, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockStateMockRecorder) GetUnitUUID(arg0, arg1 any) *MockStateGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockState)(nil).GetUnitUUID), arg0, arg1)
	return &MockStateGetUnitUUIDCall{Call: call}
}

// MockStateGetUnitUUIDCall wrap *gomock.Call
type MockStateGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDCall) Do(f func(domain.AtomicContext, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDCall) DoAndReturn(f func(domain.AtomicContext, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserSecretURIByLabel mocks base method.
func (m *MockState) GetUserSecretURIByLabel(arg0 context.Context, arg1 string) (*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSecretURIByLabel", arg0, arg1)
	ret0, _ := ret[0].(*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecretURIByLabel indicates an expected call of GetUserSecretURIByLabel.
func (mr *MockStateMockRecorder) GetUserSecretURIByLabel(arg0, arg1 any) *MockStateGetUserSecretURIByLabelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecretURIByLabel", reflect.TypeOf((*MockState)(nil).GetUserSecretURIByLabel), arg0, arg1)
	return &MockStateGetUserSecretURIByLabelCall{Call: call}
}

// MockStateGetUserSecretURIByLabelCall wrap *gomock.Call
type MockStateGetUserSecretURIByLabelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUserSecretURIByLabelCall) Return(arg0 *secrets.URI, arg1 error) *MockStateGetUserSecretURIByLabelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUserSecretURIByLabelCall) Do(f func(context.Context, string) (*secrets.URI, error)) *MockStateGetUserSecretURIByLabelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUserSecretURIByLabelCall) DoAndReturn(f func(context.Context, string) (*secrets.URI, error)) *MockStateGetUserSecretURIByLabelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GrantAccess mocks base method.
func (m *MockState) GrantAccess(arg0 context.Context, arg1 *secrets.URI, arg2 secret.GrantParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantAccess indicates an expected call of GrantAccess.
func (mr *MockStateMockRecorder) GrantAccess(arg0, arg1, arg2 any) *MockStateGrantAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockState)(nil).GrantAccess), arg0, arg1, arg2)
	return &MockStateGrantAccessCall{Call: call}
}

// MockStateGrantAccessCall wrap *gomock.Call
type MockStateGrantAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGrantAccessCall) Return(arg0 error) *MockStateGrantAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGrantAccessCall) Do(f func(context.Context, *secrets.URI, secret.GrantParams) error) *MockStateGrantAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGrantAccessCall) DoAndReturn(f func(context.Context, *secrets.URI, secret.GrantParams) error) *MockStateGrantAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForConsumedRemoteSecretsChange mocks base method.
func (m *MockState) InitialWatchStatementForConsumedRemoteSecretsChange(arg0 unit.Name) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForConsumedRemoteSecretsChange", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForConsumedRemoteSecretsChange indicates an expected call of InitialWatchStatementForConsumedRemoteSecretsChange.
func (mr *MockStateMockRecorder) InitialWatchStatementForConsumedRemoteSecretsChange(arg0 any) *MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForConsumedRemoteSecretsChange", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForConsumedRemoteSecretsChange), arg0)
	return &MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall{Call: call}
}

// MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall wrap *gomock.Call
type MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall) Do(f func(unit.Name) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall) DoAndReturn(f func(unit.Name) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForConsumedRemoteSecretsChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForConsumedSecretsChange mocks base method.
func (m *MockState) InitialWatchStatementForConsumedSecretsChange(arg0 unit.Name) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForConsumedSecretsChange", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForConsumedSecretsChange indicates an expected call of InitialWatchStatementForConsumedSecretsChange.
func (mr *MockStateMockRecorder) InitialWatchStatementForConsumedSecretsChange(arg0 any) *MockStateInitialWatchStatementForConsumedSecretsChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForConsumedSecretsChange", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForConsumedSecretsChange), arg0)
	return &MockStateInitialWatchStatementForConsumedSecretsChangeCall{Call: call}
}

// MockStateInitialWatchStatementForConsumedSecretsChangeCall wrap *gomock.Call
type MockStateInitialWatchStatementForConsumedSecretsChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForConsumedSecretsChangeCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementForConsumedSecretsChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForConsumedSecretsChangeCall) Do(f func(unit.Name) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForConsumedSecretsChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForConsumedSecretsChangeCall) DoAndReturn(f func(unit.Name) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForConsumedSecretsChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForObsoleteRevision mocks base method.
func (m *MockState) InitialWatchStatementForObsoleteRevision(arg0 secret.ApplicationOwners, arg1 secret.UnitOwners) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForObsoleteRevision", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForObsoleteRevision indicates an expected call of InitialWatchStatementForObsoleteRevision.
func (mr *MockStateMockRecorder) InitialWatchStatementForObsoleteRevision(arg0, arg1 any) *MockStateInitialWatchStatementForObsoleteRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForObsoleteRevision", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForObsoleteRevision), arg0, arg1)
	return &MockStateInitialWatchStatementForObsoleteRevisionCall{Call: call}
}

// MockStateInitialWatchStatementForObsoleteRevisionCall wrap *gomock.Call
type MockStateInitialWatchStatementForObsoleteRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForObsoleteRevisionCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementForObsoleteRevisionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForObsoleteRevisionCall) Do(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForObsoleteRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForObsoleteRevisionCall) DoAndReturn(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForObsoleteRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForOwnedSecrets mocks base method.
func (m *MockState) InitialWatchStatementForOwnedSecrets(arg0 secret.ApplicationOwners, arg1 secret.UnitOwners) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForOwnedSecrets", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForOwnedSecrets indicates an expected call of InitialWatchStatementForOwnedSecrets.
func (mr *MockStateMockRecorder) InitialWatchStatementForOwnedSecrets(arg0, arg1 any) *MockStateInitialWatchStatementForOwnedSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForOwnedSecrets", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForOwnedSecrets), arg0, arg1)
	return &MockStateInitialWatchStatementForOwnedSecretsCall{Call: call}
}

// MockStateInitialWatchStatementForOwnedSecretsCall wrap *gomock.Call
type MockStateInitialWatchStatementForOwnedSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForOwnedSecretsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementForOwnedSecretsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForOwnedSecretsCall) Do(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForOwnedSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForOwnedSecretsCall) DoAndReturn(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForOwnedSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide mocks base method.
func (m *MockState) InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide(arg0 string) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide indicates an expected call of InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide.
func (mr *MockStateMockRecorder) InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide(arg0 any) *MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSide), arg0)
	return &MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall{Call: call}
}

// MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall wrap *gomock.Call
type MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall) Do(f func(string) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall) DoAndReturn(f func(string) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForRemoteConsumedSecretsChangesFromOfferingSideCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForSecretsRevisionExpiryChanges mocks base method.
func (m *MockState) InitialWatchStatementForSecretsRevisionExpiryChanges(arg0 secret.ApplicationOwners, arg1 secret.UnitOwners) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForSecretsRevisionExpiryChanges", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForSecretsRevisionExpiryChanges indicates an expected call of InitialWatchStatementForSecretsRevisionExpiryChanges.
func (mr *MockStateMockRecorder) InitialWatchStatementForSecretsRevisionExpiryChanges(arg0, arg1 any) *MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForSecretsRevisionExpiryChanges", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForSecretsRevisionExpiryChanges), arg0, arg1)
	return &MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall{Call: call}
}

// MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall wrap *gomock.Call
type MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall) Do(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall) DoAndReturn(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForSecretsRevisionExpiryChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementForSecretsRotationChanges mocks base method.
func (m *MockState) InitialWatchStatementForSecretsRotationChanges(arg0 secret.ApplicationOwners, arg1 secret.UnitOwners) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementForSecretsRotationChanges", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementForSecretsRotationChanges indicates an expected call of InitialWatchStatementForSecretsRotationChanges.
func (mr *MockStateMockRecorder) InitialWatchStatementForSecretsRotationChanges(arg0, arg1 any) *MockStateInitialWatchStatementForSecretsRotationChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementForSecretsRotationChanges", reflect.TypeOf((*MockState)(nil).InitialWatchStatementForSecretsRotationChanges), arg0, arg1)
	return &MockStateInitialWatchStatementForSecretsRotationChangesCall{Call: call}
}

// MockStateInitialWatchStatementForSecretsRotationChangesCall wrap *gomock.Call
type MockStateInitialWatchStatementForSecretsRotationChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementForSecretsRotationChangesCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementForSecretsRotationChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementForSecretsRotationChangesCall) Do(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForSecretsRotationChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementForSecretsRotationChangesCall) DoAndReturn(f func(secret.ApplicationOwners, secret.UnitOwners) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementForSecretsRotationChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCharmSecrets mocks base method.
func (m *MockState) ListCharmSecrets(arg0 context.Context, arg1 secret.ApplicationOwners, arg2 secret.UnitOwners) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharmSecrets", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*secrets.SecretMetadata)
	ret1, _ := ret[1].([][]*secrets.SecretRevisionMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCharmSecrets indicates an expected call of ListCharmSecrets.
func (mr *MockStateMockRecorder) ListCharmSecrets(arg0, arg1, arg2 any) *MockStateListCharmSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmSecrets", reflect.TypeOf((*MockState)(nil).ListCharmSecrets), arg0, arg1, arg2)
	return &MockStateListCharmSecretsCall{Call: call}
}

// MockStateListCharmSecretsCall wrap *gomock.Call
type MockStateListCharmSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListCharmSecretsCall) Return(arg0 []*secrets.SecretMetadata, arg1 [][]*secrets.SecretRevisionMetadata, arg2 error) *MockStateListCharmSecretsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListCharmSecretsCall) Do(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error)) *MockStateListCharmSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListCharmSecretsCall) DoAndReturn(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error)) *MockStateListCharmSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCharmSecretsToDrain mocks base method.
func (m *MockState) ListCharmSecretsToDrain(arg0 context.Context, arg1 secret.ApplicationOwners, arg2 secret.UnitOwners) ([]*secrets.SecretMetadataForDrain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharmSecretsToDrain", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*secrets.SecretMetadataForDrain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharmSecretsToDrain indicates an expected call of ListCharmSecretsToDrain.
func (mr *MockStateMockRecorder) ListCharmSecretsToDrain(arg0, arg1, arg2 any) *MockStateListCharmSecretsToDrainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmSecretsToDrain", reflect.TypeOf((*MockState)(nil).ListCharmSecretsToDrain), arg0, arg1, arg2)
	return &MockStateListCharmSecretsToDrainCall{Call: call}
}

// MockStateListCharmSecretsToDrainCall wrap *gomock.Call
type MockStateListCharmSecretsToDrainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListCharmSecretsToDrainCall) Return(arg0 []*secrets.SecretMetadataForDrain, arg1 error) *MockStateListCharmSecretsToDrainCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListCharmSecretsToDrainCall) Do(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners) ([]*secrets.SecretMetadataForDrain, error)) *MockStateListCharmSecretsToDrainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListCharmSecretsToDrainCall) DoAndReturn(f func(context.Context, secret.ApplicationOwners, secret.UnitOwners) ([]*secrets.SecretMetadataForDrain, error)) *MockStateListCharmSecretsToDrainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGrantedSecretsForBackend mocks base method.
func (m *MockState) ListGrantedSecretsForBackend(arg0 context.Context, arg1 string, arg2 []secret.AccessParams, arg3 secrets.SecretRole) ([]*secrets.SecretRevisionRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGrantedSecretsForBackend", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*secrets.SecretRevisionRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGrantedSecretsForBackend indicates an expected call of ListGrantedSecretsForBackend.
func (mr *MockStateMockRecorder) ListGrantedSecretsForBackend(arg0, arg1, arg2, arg3 any) *MockStateListGrantedSecretsForBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGrantedSecretsForBackend", reflect.TypeOf((*MockState)(nil).ListGrantedSecretsForBackend), arg0, arg1, arg2, arg3)
	return &MockStateListGrantedSecretsForBackendCall{Call: call}
}

// MockStateListGrantedSecretsForBackendCall wrap *gomock.Call
type MockStateListGrantedSecretsForBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListGrantedSecretsForBackendCall) Return(arg0 []*secrets.SecretRevisionRef, arg1 error) *MockStateListGrantedSecretsForBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListGrantedSecretsForBackendCall) Do(f func(context.Context, string, []secret.AccessParams, secrets.SecretRole) ([]*secrets.SecretRevisionRef, error)) *MockStateListGrantedSecretsForBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListGrantedSecretsForBackendCall) DoAndReturn(f func(context.Context, string, []secret.AccessParams, secrets.SecretRole) ([]*secrets.SecretRevisionRef, error)) *MockStateListGrantedSecretsForBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecrets mocks base method.
func (m *MockState) ListSecrets(arg0 context.Context, arg1 *secrets.URI, arg2 *int, arg3 secret.Labels) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*secrets.SecretMetadata)
	ret1, _ := ret[1].([][]*secrets.SecretRevisionMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockStateMockRecorder) ListSecrets(arg0, arg1, arg2, arg3 any) *MockStateListSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockState)(nil).ListSecrets), arg0, arg1, arg2, arg3)
	return &MockStateListSecretsCall{Call: call}
}

// MockStateListSecretsCall wrap *gomock.Call
type MockStateListSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListSecretsCall) Return(arg0 []*secrets.SecretMetadata, arg1 [][]*secrets.SecretRevisionMetadata, arg2 error) *MockStateListSecretsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListSecretsCall) Do(f func(context.Context, *secrets.URI, *int, secret.Labels) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error)) *MockStateListSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListSecretsCall) DoAndReturn(f func(context.Context, *secrets.URI, *int, secret.Labels) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error)) *MockStateListSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUserSecretsToDrain mocks base method.
func (m *MockState) ListUserSecretsToDrain(arg0 context.Context) ([]*secrets.SecretMetadataForDrain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserSecretsToDrain", arg0)
	ret0, _ := ret[0].([]*secrets.SecretMetadataForDrain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserSecretsToDrain indicates an expected call of ListUserSecretsToDrain.
func (mr *MockStateMockRecorder) ListUserSecretsToDrain(arg0 any) *MockStateListUserSecretsToDrainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSecretsToDrain", reflect.TypeOf((*MockState)(nil).ListUserSecretsToDrain), arg0)
	return &MockStateListUserSecretsToDrainCall{Call: call}
}

// MockStateListUserSecretsToDrainCall wrap *gomock.Call
type MockStateListUserSecretsToDrainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListUserSecretsToDrainCall) Return(arg0 []*secrets.SecretMetadataForDrain, arg1 error) *MockStateListUserSecretsToDrainCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListUserSecretsToDrainCall) Do(f func(context.Context) ([]*secrets.SecretMetadataForDrain, error)) *MockStateListUserSecretsToDrainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListUserSecretsToDrainCall) DoAndReturn(f func(context.Context) ([]*secrets.SecretMetadataForDrain, error)) *MockStateListUserSecretsToDrainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchSecretMetadata mocks base method.
func (m *MockState) NamespaceForWatchSecretMetadata() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchSecretMetadata")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchSecretMetadata indicates an expected call of NamespaceForWatchSecretMetadata.
func (mr *MockStateMockRecorder) NamespaceForWatchSecretMetadata() *MockStateNamespaceForWatchSecretMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchSecretMetadata", reflect.TypeOf((*MockState)(nil).NamespaceForWatchSecretMetadata))
	return &MockStateNamespaceForWatchSecretMetadataCall{Call: call}
}

// MockStateNamespaceForWatchSecretMetadataCall wrap *gomock.Call
type MockStateNamespaceForWatchSecretMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchSecretMetadataCall) Return(arg0 string) *MockStateNamespaceForWatchSecretMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchSecretMetadataCall) Do(f func() string) *MockStateNamespaceForWatchSecretMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchSecretMetadataCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchSecretMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchSecretRevisionObsolete mocks base method.
func (m *MockState) NamespaceForWatchSecretRevisionObsolete() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchSecretRevisionObsolete")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchSecretRevisionObsolete indicates an expected call of NamespaceForWatchSecretRevisionObsolete.
func (mr *MockStateMockRecorder) NamespaceForWatchSecretRevisionObsolete() *MockStateNamespaceForWatchSecretRevisionObsoleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchSecretRevisionObsolete", reflect.TypeOf((*MockState)(nil).NamespaceForWatchSecretRevisionObsolete))
	return &MockStateNamespaceForWatchSecretRevisionObsoleteCall{Call: call}
}

// MockStateNamespaceForWatchSecretRevisionObsoleteCall wrap *gomock.Call
type MockStateNamespaceForWatchSecretRevisionObsoleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchSecretRevisionObsoleteCall) Return(arg0 string) *MockStateNamespaceForWatchSecretRevisionObsoleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchSecretRevisionObsoleteCall) Do(f func() string) *MockStateNamespaceForWatchSecretRevisionObsoleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchSecretRevisionObsoleteCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchSecretRevisionObsoleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokeAccess mocks base method.
func (m *MockState) RevokeAccess(arg0 context.Context, arg1 *secrets.URI, arg2 secret.AccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAccess indicates an expected call of RevokeAccess.
func (mr *MockStateMockRecorder) RevokeAccess(arg0, arg1, arg2 any) *MockStateRevokeAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccess", reflect.TypeOf((*MockState)(nil).RevokeAccess), arg0, arg1, arg2)
	return &MockStateRevokeAccessCall{Call: call}
}

// MockStateRevokeAccessCall wrap *gomock.Call
type MockStateRevokeAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRevokeAccessCall) Return(arg0 error) *MockStateRevokeAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRevokeAccessCall) Do(f func(context.Context, *secrets.URI, secret.AccessParams) error) *MockStateRevokeAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRevokeAccessCall) DoAndReturn(f func(context.Context, *secrets.URI, secret.AccessParams) error) *MockStateRevokeAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunAtomic mocks base method.
func (m *MockState) RunAtomic(arg0 context.Context, arg1 func(domain.AtomicContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAtomic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAtomic indicates an expected call of RunAtomic.
func (mr *MockStateMockRecorder) RunAtomic(arg0, arg1 any) *MockStateRunAtomicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAtomic", reflect.TypeOf((*MockState)(nil).RunAtomic), arg0, arg1)
	return &MockStateRunAtomicCall{Call: call}
}

// MockStateRunAtomicCall wrap *gomock.Call
type MockStateRunAtomicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRunAtomicCall) Return(arg0 error) *MockStateRunAtomicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRunAtomicCall) Do(f func(context.Context, func(domain.AtomicContext) error) error) *MockStateRunAtomicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRunAtomicCall) DoAndReturn(f func(context.Context, func(domain.AtomicContext) error) error) *MockStateRunAtomicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveSecretConsumer mocks base method.
func (m *MockState) SaveSecretConsumer(arg0 context.Context, arg1 *secrets.URI, arg2 unit.Name, arg3 *secrets.SecretConsumerMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecretConsumer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSecretConsumer indicates an expected call of SaveSecretConsumer.
func (mr *MockStateMockRecorder) SaveSecretConsumer(arg0, arg1, arg2, arg3 any) *MockStateSaveSecretConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecretConsumer", reflect.TypeOf((*MockState)(nil).SaveSecretConsumer), arg0, arg1, arg2, arg3)
	return &MockStateSaveSecretConsumerCall{Call: call}
}

// MockStateSaveSecretConsumerCall wrap *gomock.Call
type MockStateSaveSecretConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSaveSecretConsumerCall) Return(arg0 error) *MockStateSaveSecretConsumerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSaveSecretConsumerCall) Do(f func(context.Context, *secrets.URI, unit.Name, *secrets.SecretConsumerMetadata) error) *MockStateSaveSecretConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSaveSecretConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, unit.Name, *secrets.SecretConsumerMetadata) error) *MockStateSaveSecretConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveSecretRemoteConsumer mocks base method.
func (m *MockState) SaveSecretRemoteConsumer(arg0 context.Context, arg1 *secrets.URI, arg2 unit.Name, arg3 *secrets.SecretConsumerMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecretRemoteConsumer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSecretRemoteConsumer indicates an expected call of SaveSecretRemoteConsumer.
func (mr *MockStateMockRecorder) SaveSecretRemoteConsumer(arg0, arg1, arg2, arg3 any) *MockStateSaveSecretRemoteConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecretRemoteConsumer", reflect.TypeOf((*MockState)(nil).SaveSecretRemoteConsumer), arg0, arg1, arg2, arg3)
	return &MockStateSaveSecretRemoteConsumerCall{Call: call}
}

// MockStateSaveSecretRemoteConsumerCall wrap *gomock.Call
type MockStateSaveSecretRemoteConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSaveSecretRemoteConsumerCall) Return(arg0 error) *MockStateSaveSecretRemoteConsumerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSaveSecretRemoteConsumerCall) Do(f func(context.Context, *secrets.URI, unit.Name, *secrets.SecretConsumerMetadata) error) *MockStateSaveSecretRemoteConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSaveSecretRemoteConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, unit.Name, *secrets.SecretConsumerMetadata) error) *MockStateSaveSecretRemoteConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SecretRotated mocks base method.
func (m *MockState) SecretRotated(arg0 context.Context, arg1 *secrets.URI, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretRotated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretRotated indicates an expected call of SecretRotated.
func (mr *MockStateMockRecorder) SecretRotated(arg0, arg1, arg2 any) *MockStateSecretRotatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretRotated", reflect.TypeOf((*MockState)(nil).SecretRotated), arg0, arg1, arg2)
	return &MockStateSecretRotatedCall{Call: call}
}

// MockStateSecretRotatedCall wrap *gomock.Call
type MockStateSecretRotatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSecretRotatedCall) Return(arg0 error) *MockStateSecretRotatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSecretRotatedCall) Do(f func(context.Context, *secrets.URI, time.Time) error) *MockStateSecretRotatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSecretRotatedCall) DoAndReturn(f func(context.Context, *secrets.URI, time.Time) error) *MockStateSecretRotatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRemoteSecretRevision mocks base method.
func (m *MockState) UpdateRemoteSecretRevision(arg0 context.Context, arg1 *secrets.URI, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteSecretRevision", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemoteSecretRevision indicates an expected call of UpdateRemoteSecretRevision.
func (mr *MockStateMockRecorder) UpdateRemoteSecretRevision(arg0, arg1, arg2 any) *MockStateUpdateRemoteSecretRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteSecretRevision", reflect.TypeOf((*MockState)(nil).UpdateRemoteSecretRevision), arg0, arg1, arg2)
	return &MockStateUpdateRemoteSecretRevisionCall{Call: call}
}

// MockStateUpdateRemoteSecretRevisionCall wrap *gomock.Call
type MockStateUpdateRemoteSecretRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateRemoteSecretRevisionCall) Return(arg0 error) *MockStateUpdateRemoteSecretRevisionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateRemoteSecretRevisionCall) Do(f func(context.Context, *secrets.URI, int) error) *MockStateUpdateRemoteSecretRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateRemoteSecretRevisionCall) DoAndReturn(f func(context.Context, *secrets.URI, int) error) *MockStateUpdateRemoteSecretRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecret mocks base method.
func (m *MockState) UpdateSecret(arg0 domain.AtomicContext, arg1 *secrets.URI, arg2 secret.UpsertSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockStateMockRecorder) UpdateSecret(arg0, arg1, arg2 any) *MockStateUpdateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockState)(nil).UpdateSecret), arg0, arg1, arg2)
	return &MockStateUpdateSecretCall{Call: call}
}

// MockStateUpdateSecretCall wrap *gomock.Call
type MockStateUpdateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateSecretCall) Return(arg0 error) *MockStateUpdateSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateSecretCall) Do(f func(domain.AtomicContext, *secrets.URI, secret.UpsertSecretParams) error) *MockStateUpdateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateSecretCall) DoAndReturn(f func(domain.AtomicContext, *secrets.URI, secret.UpsertSecretParams) error) *MockStateUpdateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretBackendState is a mock of SecretBackendState interface.
type MockSecretBackendState struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendStateMockRecorder
}

// MockSecretBackendStateMockRecorder is the mock recorder for MockSecretBackendState.
type MockSecretBackendStateMockRecorder struct {
	mock *MockSecretBackendState
}

// NewMockSecretBackendState creates a new mock instance.
func NewMockSecretBackendState(ctrl *gomock.Controller) *MockSecretBackendState {
	mock := &MockSecretBackendState{ctrl: ctrl}
	mock.recorder = &MockSecretBackendStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendState) EXPECT() *MockSecretBackendStateMockRecorder {
	return m.recorder
}

// AddSecretBackendReference mocks base method.
func (m *MockSecretBackendState) AddSecretBackendReference(arg0 context.Context, arg1 *secrets.ValueRef, arg2 model.UUID, arg3 string) (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecretBackendReference", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecretBackendReference indicates an expected call of AddSecretBackendReference.
func (mr *MockSecretBackendStateMockRecorder) AddSecretBackendReference(arg0, arg1, arg2, arg3 any) *MockSecretBackendStateAddSecretBackendReferenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretBackendReference", reflect.TypeOf((*MockSecretBackendState)(nil).AddSecretBackendReference), arg0, arg1, arg2, arg3)
	return &MockSecretBackendStateAddSecretBackendReferenceCall{Call: call}
}

// MockSecretBackendStateAddSecretBackendReferenceCall wrap *gomock.Call
type MockSecretBackendStateAddSecretBackendReferenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateAddSecretBackendReferenceCall) Return(arg0 func() error, arg1 error) *MockSecretBackendStateAddSecretBackendReferenceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateAddSecretBackendReferenceCall) Do(f func(context.Context, *secrets.ValueRef, model.UUID, string) (func() error, error)) *MockSecretBackendStateAddSecretBackendReferenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateAddSecretBackendReferenceCall) DoAndReturn(f func(context.Context, *secrets.ValueRef, model.UUID, string) (func() error, error)) *MockSecretBackendStateAddSecretBackendReferenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetActiveModelSecretBackend mocks base method.
func (m *MockSecretBackendState) GetActiveModelSecretBackend(arg0 context.Context, arg1 model.UUID) (string, *provider.ModelBackendConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveModelSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*provider.ModelBackendConfig)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveModelSecretBackend indicates an expected call of GetActiveModelSecretBackend.
func (mr *MockSecretBackendStateMockRecorder) GetActiveModelSecretBackend(arg0, arg1 any) *MockSecretBackendStateGetActiveModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveModelSecretBackend", reflect.TypeOf((*MockSecretBackendState)(nil).GetActiveModelSecretBackend), arg0, arg1)
	return &MockSecretBackendStateGetActiveModelSecretBackendCall{Call: call}
}

// MockSecretBackendStateGetActiveModelSecretBackendCall wrap *gomock.Call
type MockSecretBackendStateGetActiveModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateGetActiveModelSecretBackendCall) Return(arg0 string, arg1 *provider.ModelBackendConfig, arg2 error) *MockSecretBackendStateGetActiveModelSecretBackendCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateGetActiveModelSecretBackendCall) Do(f func(context.Context, model.UUID) (string, *provider.ModelBackendConfig, error)) *MockSecretBackendStateGetActiveModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateGetActiveModelSecretBackendCall) DoAndReturn(f func(context.Context, model.UUID) (string, *provider.ModelBackendConfig, error)) *MockSecretBackendStateGetActiveModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelSecretBackendDetails mocks base method.
func (m *MockSecretBackendState) GetModelSecretBackendDetails(arg0 context.Context, arg1 model.UUID) (secretbackend.ModelSecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSecretBackendDetails", arg0, arg1)
	ret0, _ := ret[0].(secretbackend.ModelSecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSecretBackendDetails indicates an expected call of GetModelSecretBackendDetails.
func (mr *MockSecretBackendStateMockRecorder) GetModelSecretBackendDetails(arg0, arg1 any) *MockSecretBackendStateGetModelSecretBackendDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSecretBackendDetails", reflect.TypeOf((*MockSecretBackendState)(nil).GetModelSecretBackendDetails), arg0, arg1)
	return &MockSecretBackendStateGetModelSecretBackendDetailsCall{Call: call}
}

// MockSecretBackendStateGetModelSecretBackendDetailsCall wrap *gomock.Call
type MockSecretBackendStateGetModelSecretBackendDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateGetModelSecretBackendDetailsCall) Return(arg0 secretbackend.ModelSecretBackend, arg1 error) *MockSecretBackendStateGetModelSecretBackendDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateGetModelSecretBackendDetailsCall) Do(f func(context.Context, model.UUID) (secretbackend.ModelSecretBackend, error)) *MockSecretBackendStateGetModelSecretBackendDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateGetModelSecretBackendDetailsCall) DoAndReturn(f func(context.Context, model.UUID) (secretbackend.ModelSecretBackend, error)) *MockSecretBackendStateGetModelSecretBackendDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecretBackendsForModel mocks base method.
func (m *MockSecretBackendState) ListSecretBackendsForModel(arg0 context.Context, arg1 model.UUID, arg2 bool) ([]*secretbackend.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretBackendsForModel", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*secretbackend.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretBackendsForModel indicates an expected call of ListSecretBackendsForModel.
func (mr *MockSecretBackendStateMockRecorder) ListSecretBackendsForModel(arg0, arg1, arg2 any) *MockSecretBackendStateListSecretBackendsForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretBackendsForModel", reflect.TypeOf((*MockSecretBackendState)(nil).ListSecretBackendsForModel), arg0, arg1, arg2)
	return &MockSecretBackendStateListSecretBackendsForModelCall{Call: call}
}

// MockSecretBackendStateListSecretBackendsForModelCall wrap *gomock.Call
type MockSecretBackendStateListSecretBackendsForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateListSecretBackendsForModelCall) Return(arg0 []*secretbackend.SecretBackend, arg1 error) *MockSecretBackendStateListSecretBackendsForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateListSecretBackendsForModelCall) Do(f func(context.Context, model.UUID, bool) ([]*secretbackend.SecretBackend, error)) *MockSecretBackendStateListSecretBackendsForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateListSecretBackendsForModelCall) DoAndReturn(f func(context.Context, model.UUID, bool) ([]*secretbackend.SecretBackend, error)) *MockSecretBackendStateListSecretBackendsForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSecretBackendReference mocks base method.
func (m *MockSecretBackendState) RemoveSecretBackendReference(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSecretBackendReference", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecretBackendReference indicates an expected call of RemoveSecretBackendReference.
func (mr *MockSecretBackendStateMockRecorder) RemoveSecretBackendReference(arg0 any, arg1 ...any) *MockSecretBackendStateRemoveSecretBackendReferenceCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecretBackendReference", reflect.TypeOf((*MockSecretBackendState)(nil).RemoveSecretBackendReference), varargs...)
	return &MockSecretBackendStateRemoveSecretBackendReferenceCall{Call: call}
}

// MockSecretBackendStateRemoveSecretBackendReferenceCall wrap *gomock.Call
type MockSecretBackendStateRemoveSecretBackendReferenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateRemoveSecretBackendReferenceCall) Return(arg0 error) *MockSecretBackendStateRemoveSecretBackendReferenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateRemoveSecretBackendReferenceCall) Do(f func(context.Context, ...string) error) *MockSecretBackendStateRemoveSecretBackendReferenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateRemoveSecretBackendReferenceCall) DoAndReturn(f func(context.Context, ...string) error) *MockSecretBackendStateRemoveSecretBackendReferenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecretBackendReference mocks base method.
func (m *MockSecretBackendState) UpdateSecretBackendReference(arg0 context.Context, arg1 *secrets.ValueRef, arg2 model.UUID, arg3 string) (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretBackendReference", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecretBackendReference indicates an expected call of UpdateSecretBackendReference.
func (mr *MockSecretBackendStateMockRecorder) UpdateSecretBackendReference(arg0, arg1, arg2, arg3 any) *MockSecretBackendStateUpdateSecretBackendReferenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretBackendReference", reflect.TypeOf((*MockSecretBackendState)(nil).UpdateSecretBackendReference), arg0, arg1, arg2, arg3)
	return &MockSecretBackendStateUpdateSecretBackendReferenceCall{Call: call}
}

// MockSecretBackendStateUpdateSecretBackendReferenceCall wrap *gomock.Call
type MockSecretBackendStateUpdateSecretBackendReferenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateUpdateSecretBackendReferenceCall) Return(arg0 func() error, arg1 error) *MockSecretBackendStateUpdateSecretBackendReferenceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateUpdateSecretBackendReferenceCall) Do(f func(context.Context, *secrets.ValueRef, model.UUID, string) (func() error, error)) *MockSecretBackendStateUpdateSecretBackendReferenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateUpdateSecretBackendReferenceCall) DoAndReturn(f func(context.Context, *secrets.ValueRef, model.UUID, string) (func() error, error)) *MockSecretBackendStateUpdateSecretBackendReferenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(arg0 context.Context, arg1 eventsource.NamespaceQuery, arg2 eventsource.Mapper, arg3 eventsource.FilterOption, arg4 ...eventsource.FilterOption) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(arg0, arg1, arg2, arg3 any, arg4 ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(context.Context, eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(context.Context, eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNamespaceWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceWatcher(arg0 context.Context, arg1 eventsource.NamespaceQuery, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceWatcher indicates an expected call of NewNamespaceWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNamespaceWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Do(f func(context.Context, eventsource.NamespaceQuery, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceWatcherCall) DoAndReturn(f func(context.Context, eventsource.NamespaceQuery, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyMapperWatcher(arg0 context.Context, arg1 eventsource.Mapper, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyMapperWatcher indicates an expected call of NewNotifyMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyMapperWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) Do(f func(context.Context, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) DoAndReturn(f func(context.Context, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
