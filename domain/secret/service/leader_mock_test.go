// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/leadership (interfaces: Ensurer)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination leader_mock_test.go github.com/juju/juju/core/leadership Ensurer
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	leadership "github.com/juju/juju/core/leadership"
	gomock "go.uber.org/mock/gomock"
)

// MockEnsurer is a mock of Ensurer interface.
type MockEnsurer struct {
	ctrl     *gomock.Controller
	recorder *MockEnsurerMockRecorder
}

// MockEnsurerMockRecorder is the mock recorder for MockEnsurer.
type MockEnsurerMockRecorder struct {
	mock *MockEnsurer
}

// NewMockEnsurer creates a new mock instance.
func NewMockEnsurer(ctrl *gomock.Controller) *MockEnsurer {
	mock := &MockEnsurer{ctrl: ctrl}
	mock.recorder = &MockEnsurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnsurer) EXPECT() *MockEnsurerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEnsurer) ISGOMOCK() struct{} {
	return struct{}{}
}

// LeadershipCheck mocks base method.
func (m *MockEnsurer) LeadershipCheck(arg0, arg1 string) leadership.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeadershipCheck", arg0, arg1)
	ret0, _ := ret[0].(leadership.Token)
	return ret0
}

// LeadershipCheck indicates an expected call of LeadershipCheck.
func (mr *MockEnsurerMockRecorder) LeadershipCheck(arg0, arg1 any) *MockEnsurerLeadershipCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeadershipCheck", reflect.TypeOf((*MockEnsurer)(nil).LeadershipCheck), arg0, arg1)
	return &MockEnsurerLeadershipCheckCall{Call: call}
}

// MockEnsurerLeadershipCheckCall wrap *gomock.Call
type MockEnsurerLeadershipCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnsurerLeadershipCheckCall) Return(arg0 leadership.Token) *MockEnsurerLeadershipCheckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnsurerLeadershipCheckCall) Do(f func(string, string) leadership.Token) *MockEnsurerLeadershipCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnsurerLeadershipCheckCall) DoAndReturn(f func(string, string) leadership.Token) *MockEnsurerLeadershipCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithLeader mocks base method.
func (m *MockEnsurer) WithLeader(arg0 context.Context, arg1, arg2 string, arg3 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLeader", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithLeader indicates an expected call of WithLeader.
func (mr *MockEnsurerMockRecorder) WithLeader(arg0, arg1, arg2, arg3 any) *MockEnsurerWithLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLeader", reflect.TypeOf((*MockEnsurer)(nil).WithLeader), arg0, arg1, arg2, arg3)
	return &MockEnsurerWithLeaderCall{Call: call}
}

// MockEnsurerWithLeaderCall wrap *gomock.Call
type MockEnsurerWithLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnsurerWithLeaderCall) Return(arg0 error) *MockEnsurerWithLeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnsurerWithLeaderCall) Do(f func(context.Context, string, string, func(context.Context) error) error) *MockEnsurerWithLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnsurerWithLeaderCall) DoAndReturn(f func(context.Context, string, string, func(context.Context) error) error) *MockEnsurerWithLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
