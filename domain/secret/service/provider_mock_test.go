// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/secrets/provider (interfaces: SecretBackendProvider,SecretsBackend)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination provider_mock_test.go github.com/juju/juju/internal/secrets/provider SecretBackendProvider,SecretsBackend
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	secrets "github.com/juju/juju/core/secrets"
	provider "github.com/juju/juju/internal/secrets/provider"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendProvider is a mock of SecretBackendProvider interface.
type MockSecretBackendProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendProviderMockRecorder
}

// MockSecretBackendProviderMockRecorder is the mock recorder for MockSecretBackendProvider.
type MockSecretBackendProviderMockRecorder struct {
	mock *MockSecretBackendProvider
}

// NewMockSecretBackendProvider creates a new mock instance.
func NewMockSecretBackendProvider(ctrl *gomock.Controller) *MockSecretBackendProvider {
	mock := &MockSecretBackendProvider{ctrl: ctrl}
	mock.recorder = &MockSecretBackendProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendProvider) EXPECT() *MockSecretBackendProviderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretBackendProvider) ISGOMOCK() struct{} {
	return struct{}{}
}

// CleanupModel mocks base method.
func (m *MockSecretBackendProvider) CleanupModel(arg0 context.Context, arg1 *provider.ModelBackendConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupModel indicates an expected call of CleanupModel.
func (mr *MockSecretBackendProviderMockRecorder) CleanupModel(arg0, arg1 any) *MockSecretBackendProviderCleanupModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupModel", reflect.TypeOf((*MockSecretBackendProvider)(nil).CleanupModel), arg0, arg1)
	return &MockSecretBackendProviderCleanupModelCall{Call: call}
}

// MockSecretBackendProviderCleanupModelCall wrap *gomock.Call
type MockSecretBackendProviderCleanupModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendProviderCleanupModelCall) Return(arg0 error) *MockSecretBackendProviderCleanupModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendProviderCleanupModelCall) Do(f func(context.Context, *provider.ModelBackendConfig) error) *MockSecretBackendProviderCleanupModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendProviderCleanupModelCall) DoAndReturn(f func(context.Context, *provider.ModelBackendConfig) error) *MockSecretBackendProviderCleanupModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CleanupSecrets mocks base method.
func (m *MockSecretBackendProvider) CleanupSecrets(arg0 context.Context, arg1 *provider.ModelBackendConfig, arg2 secrets.Accessor, arg3 provider.SecretRevisions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupSecrets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupSecrets indicates an expected call of CleanupSecrets.
func (mr *MockSecretBackendProviderMockRecorder) CleanupSecrets(arg0, arg1, arg2, arg3 any) *MockSecretBackendProviderCleanupSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupSecrets", reflect.TypeOf((*MockSecretBackendProvider)(nil).CleanupSecrets), arg0, arg1, arg2, arg3)
	return &MockSecretBackendProviderCleanupSecretsCall{Call: call}
}

// MockSecretBackendProviderCleanupSecretsCall wrap *gomock.Call
type MockSecretBackendProviderCleanupSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendProviderCleanupSecretsCall) Return(arg0 error) *MockSecretBackendProviderCleanupSecretsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendProviderCleanupSecretsCall) Do(f func(context.Context, *provider.ModelBackendConfig, secrets.Accessor, provider.SecretRevisions) error) *MockSecretBackendProviderCleanupSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendProviderCleanupSecretsCall) DoAndReturn(f func(context.Context, *provider.ModelBackendConfig, secrets.Accessor, provider.SecretRevisions) error) *MockSecretBackendProviderCleanupSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Initialise mocks base method.
func (m *MockSecretBackendProvider) Initialise(arg0 *provider.ModelBackendConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialise", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialise indicates an expected call of Initialise.
func (mr *MockSecretBackendProviderMockRecorder) Initialise(arg0 any) *MockSecretBackendProviderInitialiseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialise", reflect.TypeOf((*MockSecretBackendProvider)(nil).Initialise), arg0)
	return &MockSecretBackendProviderInitialiseCall{Call: call}
}

// MockSecretBackendProviderInitialiseCall wrap *gomock.Call
type MockSecretBackendProviderInitialiseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendProviderInitialiseCall) Return(arg0 error) *MockSecretBackendProviderInitialiseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendProviderInitialiseCall) Do(f func(*provider.ModelBackendConfig) error) *MockSecretBackendProviderInitialiseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendProviderInitialiseCall) DoAndReturn(f func(*provider.ModelBackendConfig) error) *MockSecretBackendProviderInitialiseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewBackend mocks base method.
func (m *MockSecretBackendProvider) NewBackend(arg0 *provider.ModelBackendConfig) (provider.SecretsBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBackend", arg0)
	ret0, _ := ret[0].(provider.SecretsBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBackend indicates an expected call of NewBackend.
func (mr *MockSecretBackendProviderMockRecorder) NewBackend(arg0 any) *MockSecretBackendProviderNewBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBackend", reflect.TypeOf((*MockSecretBackendProvider)(nil).NewBackend), arg0)
	return &MockSecretBackendProviderNewBackendCall{Call: call}
}

// MockSecretBackendProviderNewBackendCall wrap *gomock.Call
type MockSecretBackendProviderNewBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendProviderNewBackendCall) Return(arg0 provider.SecretsBackend, arg1 error) *MockSecretBackendProviderNewBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendProviderNewBackendCall) Do(f func(*provider.ModelBackendConfig) (provider.SecretsBackend, error)) *MockSecretBackendProviderNewBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendProviderNewBackendCall) DoAndReturn(f func(*provider.ModelBackendConfig) (provider.SecretsBackend, error)) *MockSecretBackendProviderNewBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RestrictedConfig mocks base method.
func (m *MockSecretBackendProvider) RestrictedConfig(arg0 context.Context, arg1 *provider.ModelBackendConfig, arg2, arg3 bool, arg4 secrets.Accessor, arg5, arg6 provider.SecretRevisions) (*provider.BackendConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestrictedConfig", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*provider.BackendConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestrictedConfig indicates an expected call of RestrictedConfig.
func (mr *MockSecretBackendProviderMockRecorder) RestrictedConfig(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockSecretBackendProviderRestrictedConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestrictedConfig", reflect.TypeOf((*MockSecretBackendProvider)(nil).RestrictedConfig), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockSecretBackendProviderRestrictedConfigCall{Call: call}
}

// MockSecretBackendProviderRestrictedConfigCall wrap *gomock.Call
type MockSecretBackendProviderRestrictedConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendProviderRestrictedConfigCall) Return(arg0 *provider.BackendConfig, arg1 error) *MockSecretBackendProviderRestrictedConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendProviderRestrictedConfigCall) Do(f func(context.Context, *provider.ModelBackendConfig, bool, bool, secrets.Accessor, provider.SecretRevisions, provider.SecretRevisions) (*provider.BackendConfig, error)) *MockSecretBackendProviderRestrictedConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendProviderRestrictedConfigCall) DoAndReturn(f func(context.Context, *provider.ModelBackendConfig, bool, bool, secrets.Accessor, provider.SecretRevisions, provider.SecretRevisions) (*provider.BackendConfig, error)) *MockSecretBackendProviderRestrictedConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockSecretBackendProvider) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockSecretBackendProviderMockRecorder) Type() *MockSecretBackendProviderTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSecretBackendProvider)(nil).Type))
	return &MockSecretBackendProviderTypeCall{Call: call}
}

// MockSecretBackendProviderTypeCall wrap *gomock.Call
type MockSecretBackendProviderTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendProviderTypeCall) Return(arg0 string) *MockSecretBackendProviderTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendProviderTypeCall) Do(f func() string) *MockSecretBackendProviderTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendProviderTypeCall) DoAndReturn(f func() string) *MockSecretBackendProviderTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretsBackend is a mock of SecretsBackend interface.
type MockSecretsBackend struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsBackendMockRecorder
}

// MockSecretsBackendMockRecorder is the mock recorder for MockSecretsBackend.
type MockSecretsBackendMockRecorder struct {
	mock *MockSecretsBackend
}

// NewMockSecretsBackend creates a new mock instance.
func NewMockSecretsBackend(ctrl *gomock.Controller) *MockSecretsBackend {
	mock := &MockSecretsBackend{ctrl: ctrl}
	mock.recorder = &MockSecretsBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsBackend) EXPECT() *MockSecretsBackendMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretsBackend) ISGOMOCK() struct{} {
	return struct{}{}
}

// DeleteContent mocks base method.
func (m *MockSecretsBackend) DeleteContent(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContent indicates an expected call of DeleteContent.
func (mr *MockSecretsBackendMockRecorder) DeleteContent(arg0, arg1 any) *MockSecretsBackendDeleteContentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContent", reflect.TypeOf((*MockSecretsBackend)(nil).DeleteContent), arg0, arg1)
	return &MockSecretsBackendDeleteContentCall{Call: call}
}

// MockSecretsBackendDeleteContentCall wrap *gomock.Call
type MockSecretsBackendDeleteContentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsBackendDeleteContentCall) Return(arg0 error) *MockSecretsBackendDeleteContentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsBackendDeleteContentCall) Do(f func(context.Context, string) error) *MockSecretsBackendDeleteContentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsBackendDeleteContentCall) DoAndReturn(f func(context.Context, string) error) *MockSecretsBackendDeleteContentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContent mocks base method.
func (m *MockSecretsBackend) GetContent(arg0 context.Context, arg1 string) (secrets.SecretValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0, arg1)
	ret0, _ := ret[0].(secrets.SecretValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockSecretsBackendMockRecorder) GetContent(arg0, arg1 any) *MockSecretsBackendGetContentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockSecretsBackend)(nil).GetContent), arg0, arg1)
	return &MockSecretsBackendGetContentCall{Call: call}
}

// MockSecretsBackendGetContentCall wrap *gomock.Call
type MockSecretsBackendGetContentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsBackendGetContentCall) Return(arg0 secrets.SecretValue, arg1 error) *MockSecretsBackendGetContentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsBackendGetContentCall) Do(f func(context.Context, string) (secrets.SecretValue, error)) *MockSecretsBackendGetContentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsBackendGetContentCall) DoAndReturn(f func(context.Context, string) (secrets.SecretValue, error)) *MockSecretsBackendGetContentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *MockSecretsBackend) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockSecretsBackendMockRecorder) Ping() *MockSecretsBackendPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSecretsBackend)(nil).Ping))
	return &MockSecretsBackendPingCall{Call: call}
}

// MockSecretsBackendPingCall wrap *gomock.Call
type MockSecretsBackendPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsBackendPingCall) Return(arg0 error) *MockSecretsBackendPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsBackendPingCall) Do(f func() error) *MockSecretsBackendPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsBackendPingCall) DoAndReturn(f func() error) *MockSecretsBackendPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveContent mocks base method.
func (m *MockSecretsBackend) SaveContent(arg0 context.Context, arg1 *secrets.URI, arg2 int, arg3 secrets.SecretValue) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveContent indicates an expected call of SaveContent.
func (mr *MockSecretsBackendMockRecorder) SaveContent(arg0, arg1, arg2, arg3 any) *MockSecretsBackendSaveContentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContent", reflect.TypeOf((*MockSecretsBackend)(nil).SaveContent), arg0, arg1, arg2, arg3)
	return &MockSecretsBackendSaveContentCall{Call: call}
}

// MockSecretsBackendSaveContentCall wrap *gomock.Call
type MockSecretsBackendSaveContentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsBackendSaveContentCall) Return(arg0 string, arg1 error) *MockSecretsBackendSaveContentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsBackendSaveContentCall) Do(f func(context.Context, *secrets.URI, int, secrets.SecretValue) (string, error)) *MockSecretsBackendSaveContentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsBackendSaveContentCall) DoAndReturn(f func(context.Context, *secrets.URI, int, secrets.SecretValue) (string, error)) *MockSecretsBackendSaveContentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
