// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/credential/service (interfaces: State,WatcherFactory,MachineService,CloudProvider)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/credential/service State,WatcherFactory,MachineService,CloudProvider
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	credential "github.com/juju/juju/core/credential"
	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	user "github.com/juju/juju/core/user"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	credential0 "github.com/juju/juju/domain/credential"
	instances "github.com/juju/juju/environs/instances"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AllCloudCredentialsForOwner mocks base method.
func (m *MockState) AllCloudCredentialsForOwner(arg0 context.Context, arg1 user.Name) (map[credential.Key]credential0.CloudCredentialResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCloudCredentialsForOwner", arg0, arg1)
	ret0, _ := ret[0].(map[credential.Key]credential0.CloudCredentialResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCloudCredentialsForOwner indicates an expected call of AllCloudCredentialsForOwner.
func (mr *MockStateMockRecorder) AllCloudCredentialsForOwner(arg0, arg1 any) *MockStateAllCloudCredentialsForOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCloudCredentialsForOwner", reflect.TypeOf((*MockState)(nil).AllCloudCredentialsForOwner), arg0, arg1)
	return &MockStateAllCloudCredentialsForOwnerCall{Call: call}
}

// MockStateAllCloudCredentialsForOwnerCall wrap *gomock.Call
type MockStateAllCloudCredentialsForOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllCloudCredentialsForOwnerCall) Return(arg0 map[credential.Key]credential0.CloudCredentialResult, arg1 error) *MockStateAllCloudCredentialsForOwnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllCloudCredentialsForOwnerCall) Do(f func(context.Context, user.Name) (map[credential.Key]credential0.CloudCredentialResult, error)) *MockStateAllCloudCredentialsForOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllCloudCredentialsForOwnerCall) DoAndReturn(f func(context.Context, user.Name) (map[credential.Key]credential0.CloudCredentialResult, error)) *MockStateAllCloudCredentialsForOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudCredential mocks base method.
func (m *MockState) CloudCredential(arg0 context.Context, arg1 credential.Key) (credential0.CloudCredentialResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredential", arg0, arg1)
	ret0, _ := ret[0].(credential0.CloudCredentialResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredential indicates an expected call of CloudCredential.
func (mr *MockStateMockRecorder) CloudCredential(arg0, arg1 any) *MockStateCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredential", reflect.TypeOf((*MockState)(nil).CloudCredential), arg0, arg1)
	return &MockStateCloudCredentialCall{Call: call}
}

// MockStateCloudCredentialCall wrap *gomock.Call
type MockStateCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudCredentialCall) Return(arg0 credential0.CloudCredentialResult, arg1 error) *MockStateCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudCredentialCall) Do(f func(context.Context, credential.Key) (credential0.CloudCredentialResult, error)) *MockStateCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) (credential0.CloudCredentialResult, error)) *MockStateCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudCredentialsForOwner mocks base method.
func (m *MockState) CloudCredentialsForOwner(arg0 context.Context, arg1 user.Name, arg2 string) (map[string]credential0.CloudCredentialResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentialsForOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]credential0.CloudCredentialResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredentialsForOwner indicates an expected call of CloudCredentialsForOwner.
func (mr *MockStateMockRecorder) CloudCredentialsForOwner(arg0, arg1, arg2 any) *MockStateCloudCredentialsForOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentialsForOwner", reflect.TypeOf((*MockState)(nil).CloudCredentialsForOwner), arg0, arg1, arg2)
	return &MockStateCloudCredentialsForOwnerCall{Call: call}
}

// MockStateCloudCredentialsForOwnerCall wrap *gomock.Call
type MockStateCloudCredentialsForOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudCredentialsForOwnerCall) Return(arg0 map[string]credential0.CloudCredentialResult, arg1 error) *MockStateCloudCredentialsForOwnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudCredentialsForOwnerCall) Do(f func(context.Context, user.Name, string) (map[string]credential0.CloudCredentialResult, error)) *MockStateCloudCredentialsForOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudCredentialsForOwnerCall) DoAndReturn(f func(context.Context, user.Name, string) (map[string]credential0.CloudCredentialResult, error)) *MockStateCloudCredentialsForOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CredentialUUIDForKey mocks base method.
func (m *MockState) CredentialUUIDForKey(arg0 context.Context, arg1 credential.Key) (credential.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialUUIDForKey", arg0, arg1)
	ret0, _ := ret[0].(credential.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialUUIDForKey indicates an expected call of CredentialUUIDForKey.
func (mr *MockStateMockRecorder) CredentialUUIDForKey(arg0, arg1 any) *MockStateCredentialUUIDForKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialUUIDForKey", reflect.TypeOf((*MockState)(nil).CredentialUUIDForKey), arg0, arg1)
	return &MockStateCredentialUUIDForKeyCall{Call: call}
}

// MockStateCredentialUUIDForKeyCall wrap *gomock.Call
type MockStateCredentialUUIDForKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCredentialUUIDForKeyCall) Return(arg0 credential.UUID, arg1 error) *MockStateCredentialUUIDForKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCredentialUUIDForKeyCall) Do(f func(context.Context, credential.Key) (credential.UUID, error)) *MockStateCredentialUUIDForKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCredentialUUIDForKeyCall) DoAndReturn(f func(context.Context, credential.Key) (credential.UUID, error)) *MockStateCredentialUUIDForKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCredentialStatus mocks base method.
func (m *MockState) GetModelCredentialStatus(arg0 context.Context, arg1 model.UUID) (credential.Key, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCredentialStatus", arg0, arg1)
	ret0, _ := ret[0].(credential.Key)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelCredentialStatus indicates an expected call of GetModelCredentialStatus.
func (mr *MockStateMockRecorder) GetModelCredentialStatus(arg0, arg1 any) *MockStateGetModelCredentialStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCredentialStatus", reflect.TypeOf((*MockState)(nil).GetModelCredentialStatus), arg0, arg1)
	return &MockStateGetModelCredentialStatusCall{Call: call}
}

// MockStateGetModelCredentialStatusCall wrap *gomock.Call
type MockStateGetModelCredentialStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCredentialStatusCall) Return(arg0 credential.Key, arg1 bool, arg2 error) *MockStateGetModelCredentialStatusCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCredentialStatusCall) Do(f func(context.Context, model.UUID) (credential.Key, bool, error)) *MockStateGetModelCredentialStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCredentialStatusCall) DoAndReturn(f func(context.Context, model.UUID) (credential.Key, bool, error)) *MockStateGetModelCredentialStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateCloudCredential mocks base method.
func (m *MockState) InvalidateCloudCredential(arg0 context.Context, arg1 credential.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateCloudCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateCloudCredential indicates an expected call of InvalidateCloudCredential.
func (mr *MockStateMockRecorder) InvalidateCloudCredential(arg0, arg1, arg2 any) *MockStateInvalidateCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateCloudCredential", reflect.TypeOf((*MockState)(nil).InvalidateCloudCredential), arg0, arg1, arg2)
	return &MockStateInvalidateCloudCredentialCall{Call: call}
}

// MockStateInvalidateCloudCredentialCall wrap *gomock.Call
type MockStateInvalidateCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInvalidateCloudCredentialCall) Return(arg0 error) *MockStateInvalidateCloudCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInvalidateCloudCredentialCall) Do(f func(context.Context, credential.UUID, string) error) *MockStateInvalidateCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInvalidateCloudCredentialCall) DoAndReturn(f func(context.Context, credential.UUID, string) error) *MockStateInvalidateCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateModelCloudCredential mocks base method.
func (m *MockState) InvalidateModelCloudCredential(arg0 context.Context, arg1 model.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateModelCloudCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateModelCloudCredential indicates an expected call of InvalidateModelCloudCredential.
func (mr *MockStateMockRecorder) InvalidateModelCloudCredential(arg0, arg1, arg2 any) *MockStateInvalidateModelCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateModelCloudCredential", reflect.TypeOf((*MockState)(nil).InvalidateModelCloudCredential), arg0, arg1, arg2)
	return &MockStateInvalidateModelCloudCredentialCall{Call: call}
}

// MockStateInvalidateModelCloudCredentialCall wrap *gomock.Call
type MockStateInvalidateModelCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInvalidateModelCloudCredentialCall) Return(arg0 error) *MockStateInvalidateModelCloudCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInvalidateModelCloudCredentialCall) Do(f func(context.Context, model.UUID, string) error) *MockStateInvalidateModelCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInvalidateModelCloudCredentialCall) DoAndReturn(f func(context.Context, model.UUID, string) error) *MockStateInvalidateModelCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelsUsingCloudCredential mocks base method.
func (m *MockState) ModelsUsingCloudCredential(arg0 context.Context, arg1 credential.Key) (map[model.UUID]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelsUsingCloudCredential", arg0, arg1)
	ret0, _ := ret[0].(map[model.UUID]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelsUsingCloudCredential indicates an expected call of ModelsUsingCloudCredential.
func (mr *MockStateMockRecorder) ModelsUsingCloudCredential(arg0, arg1 any) *MockStateModelsUsingCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelsUsingCloudCredential", reflect.TypeOf((*MockState)(nil).ModelsUsingCloudCredential), arg0, arg1)
	return &MockStateModelsUsingCloudCredentialCall{Call: call}
}

// MockStateModelsUsingCloudCredentialCall wrap *gomock.Call
type MockStateModelsUsingCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelsUsingCloudCredentialCall) Return(arg0 map[model.UUID]string, arg1 error) *MockStateModelsUsingCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelsUsingCloudCredentialCall) Do(f func(context.Context, credential.Key) (map[model.UUID]string, error)) *MockStateModelsUsingCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelsUsingCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) (map[model.UUID]string, error)) *MockStateModelsUsingCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveCloudCredential mocks base method.
func (m *MockState) RemoveCloudCredential(arg0 context.Context, arg1 credential.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloudCredential indicates an expected call of RemoveCloudCredential.
func (mr *MockStateMockRecorder) RemoveCloudCredential(arg0, arg1 any) *MockStateRemoveCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudCredential", reflect.TypeOf((*MockState)(nil).RemoveCloudCredential), arg0, arg1)
	return &MockStateRemoveCloudCredentialCall{Call: call}
}

// MockStateRemoveCloudCredentialCall wrap *gomock.Call
type MockStateRemoveCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveCloudCredentialCall) Return(arg0 error) *MockStateRemoveCloudCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveCloudCredentialCall) Do(f func(context.Context, credential.Key) error) *MockStateRemoveCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) error) *MockStateRemoveCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertCloudCredential mocks base method.
func (m *MockState) UpsertCloudCredential(arg0 context.Context, arg1 credential.Key, arg2 credential0.CloudCredentialInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCloudCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCloudCredential indicates an expected call of UpsertCloudCredential.
func (mr *MockStateMockRecorder) UpsertCloudCredential(arg0, arg1, arg2 any) *MockStateUpsertCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCloudCredential", reflect.TypeOf((*MockState)(nil).UpsertCloudCredential), arg0, arg1, arg2)
	return &MockStateUpsertCloudCredentialCall{Call: call}
}

// MockStateUpsertCloudCredentialCall wrap *gomock.Call
type MockStateUpsertCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpsertCloudCredentialCall) Return(arg0 error) *MockStateUpsertCloudCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpsertCloudCredentialCall) Do(f func(context.Context, credential.Key, credential0.CloudCredentialInfo) error) *MockStateUpsertCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpsertCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key, credential0.CloudCredentialInfo) error) *MockStateUpsertCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchCredential mocks base method.
func (m *MockState) WatchCredential(arg0 context.Context, arg1 func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error), arg2 credential.Key) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchCredential indicates an expected call of WatchCredential.
func (mr *MockStateMockRecorder) WatchCredential(arg0, arg1, arg2 any) *MockStateWatchCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCredential", reflect.TypeOf((*MockState)(nil).WatchCredential), arg0, arg1, arg2)
	return &MockStateWatchCredentialCall{Call: call}
}

// MockStateWatchCredentialCall wrap *gomock.Call
type MockStateWatchCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateWatchCredentialCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockStateWatchCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateWatchCredentialCall) Do(f func(context.Context, func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error), credential.Key) (watcher.Watcher[struct{}], error)) *MockStateWatchCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateWatchCredentialCall) DoAndReturn(f func(context.Context, func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error), credential.Key) (watcher.Watcher[struct{}], error)) *MockStateWatchCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 eventsource.FilterOption, arg1 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0 any, arg1 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetAllProvisionedMachineInstanceID mocks base method.
func (m *MockMachineService) GetAllProvisionedMachineInstanceID(arg0 context.Context) (map[machine.Name]instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProvisionedMachineInstanceID", arg0)
	ret0, _ := ret[0].(map[machine.Name]instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProvisionedMachineInstanceID indicates an expected call of GetAllProvisionedMachineInstanceID.
func (mr *MockMachineServiceMockRecorder) GetAllProvisionedMachineInstanceID(arg0 any) *MockMachineServiceGetAllProvisionedMachineInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProvisionedMachineInstanceID", reflect.TypeOf((*MockMachineService)(nil).GetAllProvisionedMachineInstanceID), arg0)
	return &MockMachineServiceGetAllProvisionedMachineInstanceIDCall{Call: call}
}

// MockMachineServiceGetAllProvisionedMachineInstanceIDCall wrap *gomock.Call
type MockMachineServiceGetAllProvisionedMachineInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetAllProvisionedMachineInstanceIDCall) Return(arg0 map[machine.Name]instance.Id, arg1 error) *MockMachineServiceGetAllProvisionedMachineInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetAllProvisionedMachineInstanceIDCall) Do(f func(context.Context) (map[machine.Name]instance.Id, error)) *MockMachineServiceGetAllProvisionedMachineInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetAllProvisionedMachineInstanceIDCall) DoAndReturn(f func(context.Context) (map[machine.Name]instance.Id, error)) *MockMachineServiceGetAllProvisionedMachineInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceID mocks base method.
func (m *MockMachineService) InstanceID(arg0 context.Context, arg1 machine.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceID indicates an expected call of InstanceID.
func (mr *MockMachineServiceMockRecorder) InstanceID(arg0, arg1 any) *MockMachineServiceInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceID", reflect.TypeOf((*MockMachineService)(nil).InstanceID), arg0, arg1)
	return &MockMachineServiceInstanceIDCall{Call: call}
}

// MockMachineServiceInstanceIDCall wrap *gomock.Call
type MockMachineServiceInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceInstanceIDCall) Return(arg0 string, arg1 error) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceInstanceIDCall) Do(f func(context.Context, machine.UUID) (string, error)) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceInstanceIDCall) DoAndReturn(f func(context.Context, machine.UUID) (string, error)) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudProvider is a mock of CloudProvider interface.
type MockCloudProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderMockRecorder
}

// MockCloudProviderMockRecorder is the mock recorder for MockCloudProvider.
type MockCloudProviderMockRecorder struct {
	mock *MockCloudProvider
}

// NewMockCloudProvider creates a new mock instance.
func NewMockCloudProvider(ctrl *gomock.Controller) *MockCloudProvider {
	mock := &MockCloudProvider{ctrl: ctrl}
	mock.recorder = &MockCloudProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProvider) EXPECT() *MockCloudProviderMockRecorder {
	return m.recorder
}

// AllInstances mocks base method.
func (m *MockCloudProvider) AllInstances(arg0 context.Context) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockCloudProviderMockRecorder) AllInstances(arg0 any) *MockCloudProviderAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockCloudProvider)(nil).AllInstances), arg0)
	return &MockCloudProviderAllInstancesCall{Call: call}
}

// MockCloudProviderAllInstancesCall wrap *gomock.Call
type MockCloudProviderAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudProviderAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockCloudProviderAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudProviderAllInstancesCall) Do(f func(context.Context) ([]instances.Instance, error)) *MockCloudProviderAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudProviderAllInstancesCall) DoAndReturn(f func(context.Context) ([]instances.Instance, error)) *MockCloudProviderAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
