// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/keymanager/service (interfaces: PublicKeyImporter,State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/keymanager/service PublicKeyImporter,State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	url "net/url"
	reflect "reflect"

	ssh "github.com/juju/juju/core/ssh"
	user "github.com/juju/juju/core/user"
	keymanager "github.com/juju/juju/domain/keymanager"
	gomock "go.uber.org/mock/gomock"
)

// MockPublicKeyImporter is a mock of PublicKeyImporter interface.
type MockPublicKeyImporter struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyImporterMockRecorder
}

// MockPublicKeyImporterMockRecorder is the mock recorder for MockPublicKeyImporter.
type MockPublicKeyImporterMockRecorder struct {
	mock *MockPublicKeyImporter
}

// NewMockPublicKeyImporter creates a new mock instance.
func NewMockPublicKeyImporter(ctrl *gomock.Controller) *MockPublicKeyImporter {
	mock := &MockPublicKeyImporter{ctrl: ctrl}
	mock.recorder = &MockPublicKeyImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicKeyImporter) EXPECT() *MockPublicKeyImporterMockRecorder {
	return m.recorder
}

// FetchPublicKeysForSubject mocks base method.
func (m *MockPublicKeyImporter) FetchPublicKeysForSubject(arg0 context.Context, arg1 *url.URL) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPublicKeysForSubject", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPublicKeysForSubject indicates an expected call of FetchPublicKeysForSubject.
func (mr *MockPublicKeyImporterMockRecorder) FetchPublicKeysForSubject(arg0, arg1 any) *MockPublicKeyImporterFetchPublicKeysForSubjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPublicKeysForSubject", reflect.TypeOf((*MockPublicKeyImporter)(nil).FetchPublicKeysForSubject), arg0, arg1)
	return &MockPublicKeyImporterFetchPublicKeysForSubjectCall{Call: call}
}

// MockPublicKeyImporterFetchPublicKeysForSubjectCall wrap *gomock.Call
type MockPublicKeyImporterFetchPublicKeysForSubjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPublicKeyImporterFetchPublicKeysForSubjectCall) Return(arg0 []string, arg1 error) *MockPublicKeyImporterFetchPublicKeysForSubjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPublicKeyImporterFetchPublicKeysForSubjectCall) Do(f func(context.Context, *url.URL) ([]string, error)) *MockPublicKeyImporterFetchPublicKeysForSubjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPublicKeyImporterFetchPublicKeysForSubjectCall) DoAndReturn(f func(context.Context, *url.URL) ([]string, error)) *MockPublicKeyImporterFetchPublicKeysForSubjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddPublicKeyForUserIfNotFound mocks base method.
func (m *MockState) AddPublicKeyForUserIfNotFound(arg0 context.Context, arg1 user.UUID, arg2 []keymanager.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublicKeyForUserIfNotFound", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPublicKeyForUserIfNotFound indicates an expected call of AddPublicKeyForUserIfNotFound.
func (mr *MockStateMockRecorder) AddPublicKeyForUserIfNotFound(arg0, arg1, arg2 any) *MockStateAddPublicKeyForUserIfNotFoundCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublicKeyForUserIfNotFound", reflect.TypeOf((*MockState)(nil).AddPublicKeyForUserIfNotFound), arg0, arg1, arg2)
	return &MockStateAddPublicKeyForUserIfNotFoundCall{Call: call}
}

// MockStateAddPublicKeyForUserIfNotFoundCall wrap *gomock.Call
type MockStateAddPublicKeyForUserIfNotFoundCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddPublicKeyForUserIfNotFoundCall) Return(arg0 error) *MockStateAddPublicKeyForUserIfNotFoundCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddPublicKeyForUserIfNotFoundCall) Do(f func(context.Context, user.UUID, []keymanager.PublicKey) error) *MockStateAddPublicKeyForUserIfNotFoundCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddPublicKeyForUserIfNotFoundCall) DoAndReturn(f func(context.Context, user.UUID, []keymanager.PublicKey) error) *MockStateAddPublicKeyForUserIfNotFoundCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddPublicKeysForUser mocks base method.
func (m *MockState) AddPublicKeysForUser(arg0 context.Context, arg1 user.UUID, arg2 []keymanager.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublicKeysForUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPublicKeysForUser indicates an expected call of AddPublicKeysForUser.
func (mr *MockStateMockRecorder) AddPublicKeysForUser(arg0, arg1, arg2 any) *MockStateAddPublicKeysForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublicKeysForUser", reflect.TypeOf((*MockState)(nil).AddPublicKeysForUser), arg0, arg1, arg2)
	return &MockStateAddPublicKeysForUserCall{Call: call}
}

// MockStateAddPublicKeysForUserCall wrap *gomock.Call
type MockStateAddPublicKeysForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddPublicKeysForUserCall) Return(arg0 error) *MockStateAddPublicKeysForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddPublicKeysForUserCall) Do(f func(context.Context, user.UUID, []keymanager.PublicKey) error) *MockStateAddPublicKeysForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddPublicKeysForUserCall) DoAndReturn(f func(context.Context, user.UUID, []keymanager.PublicKey) error) *MockStateAddPublicKeysForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePublicKeysForUser mocks base method.
func (m *MockState) DeletePublicKeysForUser(arg0 context.Context, arg1 user.UUID, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicKeysForUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicKeysForUser indicates an expected call of DeletePublicKeysForUser.
func (mr *MockStateMockRecorder) DeletePublicKeysForUser(arg0, arg1, arg2 any) *MockStateDeletePublicKeysForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKeysForUser", reflect.TypeOf((*MockState)(nil).DeletePublicKeysForUser), arg0, arg1, arg2)
	return &MockStateDeletePublicKeysForUserCall{Call: call}
}

// MockStateDeletePublicKeysForUserCall wrap *gomock.Call
type MockStateDeletePublicKeysForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeletePublicKeysForUserCall) Return(arg0 error) *MockStateDeletePublicKeysForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeletePublicKeysForUserCall) Do(f func(context.Context, user.UUID, []string) error) *MockStateDeletePublicKeysForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeletePublicKeysForUserCall) DoAndReturn(f func(context.Context, user.UUID, []string) error) *MockStateDeletePublicKeysForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPublicKeysForUser mocks base method.
func (m *MockState) GetPublicKeysForUser(arg0 context.Context, arg1 user.UUID) ([]ssh.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeysForUser", arg0, arg1)
	ret0, _ := ret[0].([]ssh.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeysForUser indicates an expected call of GetPublicKeysForUser.
func (mr *MockStateMockRecorder) GetPublicKeysForUser(arg0, arg1 any) *MockStateGetPublicKeysForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeysForUser", reflect.TypeOf((*MockState)(nil).GetPublicKeysForUser), arg0, arg1)
	return &MockStateGetPublicKeysForUserCall{Call: call}
}

// MockStateGetPublicKeysForUserCall wrap *gomock.Call
type MockStateGetPublicKeysForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetPublicKeysForUserCall) Return(arg0 []ssh.PublicKey, arg1 error) *MockStateGetPublicKeysForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetPublicKeysForUserCall) Do(f func(context.Context, user.UUID) ([]ssh.PublicKey, error)) *MockStateGetPublicKeysForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetPublicKeysForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]ssh.PublicKey, error)) *MockStateGetPublicKeysForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
