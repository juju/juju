// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/access/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/access/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	credential "github.com/juju/juju/core/credential"
	model "github.com/juju/juju/core/model"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	access "github.com/juju/juju/domain/access"
	auth "github.com/juju/juju/internal/auth"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddUser mocks base method.
func (m *MockState) AddUser(arg0 context.Context, arg1 user.UUID, arg2 user.Name, arg3 string, arg4 bool, arg5 user.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStateMockRecorder) AddUser(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockStateAddUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockState)(nil).AddUser), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockStateAddUserCall{Call: call}
}

// MockStateAddUserCall wrap *gomock.Call
type MockStateAddUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddUserCall) Return(arg0 error) *MockStateAddUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddUserCall) Do(f func(context.Context, user.UUID, user.Name, string, bool, user.UUID) error) *MockStateAddUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddUserCall) DoAndReturn(f func(context.Context, user.UUID, user.Name, string, bool, user.UUID) error) *MockStateAddUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUserWithActivationKey mocks base method.
func (m *MockState) AddUserWithActivationKey(arg0 context.Context, arg1 user.UUID, arg2 user.Name, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec, arg6 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserWithActivationKey", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserWithActivationKey indicates an expected call of AddUserWithActivationKey.
func (mr *MockStateMockRecorder) AddUserWithActivationKey(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockStateAddUserWithActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserWithActivationKey", reflect.TypeOf((*MockState)(nil).AddUserWithActivationKey), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockStateAddUserWithActivationKeyCall{Call: call}
}

// MockStateAddUserWithActivationKeyCall wrap *gomock.Call
type MockStateAddUserWithActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddUserWithActivationKeyCall) Return(arg0 error) *MockStateAddUserWithActivationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddUserWithActivationKeyCall) Do(f func(context.Context, user.UUID, user.Name, string, user.UUID, permission.AccessSpec, []byte) error) *MockStateAddUserWithActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddUserWithActivationKeyCall) DoAndReturn(f func(context.Context, user.UUID, user.Name, string, user.UUID, permission.AccessSpec, []byte) error) *MockStateAddUserWithActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUserWithPasswordHash mocks base method.
func (m *MockState) AddUserWithPasswordHash(arg0 context.Context, arg1 user.UUID, arg2 user.Name, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec, arg6 string, arg7 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserWithPasswordHash", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserWithPasswordHash indicates an expected call of AddUserWithPasswordHash.
func (mr *MockStateMockRecorder) AddUserWithPasswordHash(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *MockStateAddUserWithPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserWithPasswordHash", reflect.TypeOf((*MockState)(nil).AddUserWithPasswordHash), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	return &MockStateAddUserWithPasswordHashCall{Call: call}
}

// MockStateAddUserWithPasswordHashCall wrap *gomock.Call
type MockStateAddUserWithPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddUserWithPasswordHashCall) Return(arg0 error) *MockStateAddUserWithPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddUserWithPasswordHashCall) Do(f func(context.Context, user.UUID, user.Name, string, user.UUID, permission.AccessSpec, string, []byte) error) *MockStateAddUserWithPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddUserWithPasswordHashCall) DoAndReturn(f func(context.Context, user.UUID, user.Name, string, user.UUID, permission.AccessSpec, string, []byte) error) *MockStateAddUserWithPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllModelAccessForCloudCredential mocks base method.
func (m *MockState) AllModelAccessForCloudCredential(arg0 context.Context, arg1 credential.Key) ([]access.CredentialOwnerModelAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelAccessForCloudCredential", arg0, arg1)
	ret0, _ := ret[0].([]access.CredentialOwnerModelAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModelAccessForCloudCredential indicates an expected call of AllModelAccessForCloudCredential.
func (mr *MockStateMockRecorder) AllModelAccessForCloudCredential(arg0, arg1 any) *MockStateAllModelAccessForCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelAccessForCloudCredential", reflect.TypeOf((*MockState)(nil).AllModelAccessForCloudCredential), arg0, arg1)
	return &MockStateAllModelAccessForCloudCredentialCall{Call: call}
}

// MockStateAllModelAccessForCloudCredentialCall wrap *gomock.Call
type MockStateAllModelAccessForCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllModelAccessForCloudCredentialCall) Return(arg0 []access.CredentialOwnerModelAccess, arg1 error) *MockStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllModelAccessForCloudCredentialCall) Do(f func(context.Context, credential.Key) ([]access.CredentialOwnerModelAccess, error)) *MockStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllModelAccessForCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) ([]access.CredentialOwnerModelAccess, error)) *MockStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePermission mocks base method.
func (m *MockState) CreatePermission(arg0 context.Context, arg1 uuid.UUID, arg2 permission.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockStateMockRecorder) CreatePermission(arg0, arg1, arg2 any) *MockStateCreatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockState)(nil).CreatePermission), arg0, arg1, arg2)
	return &MockStateCreatePermissionCall{Call: call}
}

// MockStateCreatePermissionCall wrap *gomock.Call
type MockStateCreatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreatePermissionCall) Return(arg0 permission.UserAccess, arg1 error) *MockStateCreatePermissionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreatePermissionCall) Do(f func(context.Context, uuid.UUID, permission.UserAccessSpec) (permission.UserAccess, error)) *MockStateCreatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreatePermissionCall) DoAndReturn(f func(context.Context, uuid.UUID, permission.UserAccessSpec) (permission.UserAccess, error)) *MockStateCreatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePermission mocks base method.
func (m *MockState) DeletePermission(arg0 context.Context, arg1 user.Name, arg2 permission.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockStateMockRecorder) DeletePermission(arg0, arg1, arg2 any) *MockStateDeletePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockState)(nil).DeletePermission), arg0, arg1, arg2)
	return &MockStateDeletePermissionCall{Call: call}
}

// MockStateDeletePermissionCall wrap *gomock.Call
type MockStateDeletePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeletePermissionCall) Return(arg0 error) *MockStateDeletePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeletePermissionCall) Do(f func(context.Context, user.Name, permission.ID) error) *MockStateDeletePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeletePermissionCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) error) *MockStateDeletePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableUserAuthentication mocks base method.
func (m *MockState) DisableUserAuthentication(arg0 context.Context, arg1 user.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUserAuthentication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableUserAuthentication indicates an expected call of DisableUserAuthentication.
func (mr *MockStateMockRecorder) DisableUserAuthentication(arg0, arg1 any) *MockStateDisableUserAuthenticationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserAuthentication", reflect.TypeOf((*MockState)(nil).DisableUserAuthentication), arg0, arg1)
	return &MockStateDisableUserAuthenticationCall{Call: call}
}

// MockStateDisableUserAuthenticationCall wrap *gomock.Call
type MockStateDisableUserAuthenticationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDisableUserAuthenticationCall) Return(arg0 error) *MockStateDisableUserAuthenticationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDisableUserAuthenticationCall) Do(f func(context.Context, user.Name) error) *MockStateDisableUserAuthenticationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDisableUserAuthenticationCall) DoAndReturn(f func(context.Context, user.Name) error) *MockStateDisableUserAuthenticationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableUserAuthentication mocks base method.
func (m *MockState) EnableUserAuthentication(arg0 context.Context, arg1 user.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUserAuthentication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableUserAuthentication indicates an expected call of EnableUserAuthentication.
func (mr *MockStateMockRecorder) EnableUserAuthentication(arg0, arg1 any) *MockStateEnableUserAuthenticationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserAuthentication", reflect.TypeOf((*MockState)(nil).EnableUserAuthentication), arg0, arg1)
	return &MockStateEnableUserAuthenticationCall{Call: call}
}

// MockStateEnableUserAuthenticationCall wrap *gomock.Call
type MockStateEnableUserAuthenticationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnableUserAuthenticationCall) Return(arg0 error) *MockStateEnableUserAuthenticationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnableUserAuthenticationCall) Do(f func(context.Context, user.Name) error) *MockStateEnableUserAuthenticationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnableUserAuthenticationCall) DoAndReturn(f func(context.Context, user.Name) error) *MockStateEnableUserAuthenticationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureExternalUserIfAuthorized mocks base method.
func (m *MockState) EnsureExternalUserIfAuthorized(arg0 context.Context, arg1 user.Name, arg2 permission.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureExternalUserIfAuthorized", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureExternalUserIfAuthorized indicates an expected call of EnsureExternalUserIfAuthorized.
func (mr *MockStateMockRecorder) EnsureExternalUserIfAuthorized(arg0, arg1, arg2 any) *MockStateEnsureExternalUserIfAuthorizedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureExternalUserIfAuthorized", reflect.TypeOf((*MockState)(nil).EnsureExternalUserIfAuthorized), arg0, arg1, arg2)
	return &MockStateEnsureExternalUserIfAuthorizedCall{Call: call}
}

// MockStateEnsureExternalUserIfAuthorizedCall wrap *gomock.Call
type MockStateEnsureExternalUserIfAuthorizedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnsureExternalUserIfAuthorizedCall) Return(arg0 error) *MockStateEnsureExternalUserIfAuthorizedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnsureExternalUserIfAuthorizedCall) Do(f func(context.Context, user.Name, permission.ID) error) *MockStateEnsureExternalUserIfAuthorizedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnsureExternalUserIfAuthorizedCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) error) *MockStateEnsureExternalUserIfAuthorizedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetActivationKey mocks base method.
func (m *MockState) GetActivationKey(arg0 context.Context, arg1 user.Name) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivationKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivationKey indicates an expected call of GetActivationKey.
func (mr *MockStateMockRecorder) GetActivationKey(arg0, arg1 any) *MockStateGetActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivationKey", reflect.TypeOf((*MockState)(nil).GetActivationKey), arg0, arg1)
	return &MockStateGetActivationKeyCall{Call: call}
}

// MockStateGetActivationKeyCall wrap *gomock.Call
type MockStateGetActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetActivationKeyCall) Return(arg0 []byte, arg1 error) *MockStateGetActivationKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetActivationKeyCall) Do(f func(context.Context, user.Name) ([]byte, error)) *MockStateGetActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetActivationKeyCall) DoAndReturn(f func(context.Context, user.Name) ([]byte, error)) *MockStateGetActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUsers mocks base method.
func (m *MockState) GetAllUsers(arg0 context.Context, arg1 bool) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockStateMockRecorder) GetAllUsers(arg0, arg1 any) *MockStateGetAllUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockState)(nil).GetAllUsers), arg0, arg1)
	return &MockStateGetAllUsersCall{Call: call}
}

// MockStateGetAllUsersCall wrap *gomock.Call
type MockStateGetAllUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllUsersCall) Return(arg0 []user.User, arg1 error) *MockStateGetAllUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllUsersCall) Do(f func(context.Context, bool) ([]user.User, error)) *MockStateGetAllUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllUsersCall) DoAndReturn(f func(context.Context, bool) ([]user.User, error)) *MockStateGetAllUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockState) GetUser(arg0 context.Context, arg1 user.UUID) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStateMockRecorder) GetUser(arg0, arg1 any) *MockStateGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockState)(nil).GetUser), arg0, arg1)
	return &MockStateGetUserCall{Call: call}
}

// MockStateGetUserCall wrap *gomock.Call
type MockStateGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUserCall) Return(arg0 user.User, arg1 error) *MockStateGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUserCall) Do(f func(context.Context, user.UUID) (user.User, error)) *MockStateGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUserCall) DoAndReturn(f func(context.Context, user.UUID) (user.User, error)) *MockStateGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByAuth mocks base method.
func (m *MockState) GetUserByAuth(arg0 context.Context, arg1 user.Name, arg2 auth.Password) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuth", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuth indicates an expected call of GetUserByAuth.
func (mr *MockStateMockRecorder) GetUserByAuth(arg0, arg1, arg2 any) *MockStateGetUserByAuthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuth", reflect.TypeOf((*MockState)(nil).GetUserByAuth), arg0, arg1, arg2)
	return &MockStateGetUserByAuthCall{Call: call}
}

// MockStateGetUserByAuthCall wrap *gomock.Call
type MockStateGetUserByAuthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUserByAuthCall) Return(arg0 user.User, arg1 error) *MockStateGetUserByAuthCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUserByAuthCall) Do(f func(context.Context, user.Name, auth.Password) (user.User, error)) *MockStateGetUserByAuthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUserByAuthCall) DoAndReturn(f func(context.Context, user.Name, auth.Password) (user.User, error)) *MockStateGetUserByAuthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByName mocks base method.
func (m *MockState) GetUserByName(arg0 context.Context, arg1 user.Name) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockStateMockRecorder) GetUserByName(arg0, arg1 any) *MockStateGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockState)(nil).GetUserByName), arg0, arg1)
	return &MockStateGetUserByNameCall{Call: call}
}

// MockStateGetUserByNameCall wrap *gomock.Call
type MockStateGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockStateGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUserByNameCall) Do(f func(context.Context, user.Name) (user.User, error)) *MockStateGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUserByNameCall) DoAndReturn(f func(context.Context, user.Name) (user.User, error)) *MockStateGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastModelLogin mocks base method.
func (m *MockState) LastModelLogin(arg0 context.Context, arg1 user.Name, arg2 model.UUID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastModelLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastModelLogin indicates an expected call of LastModelLogin.
func (mr *MockStateMockRecorder) LastModelLogin(arg0, arg1, arg2 any) *MockStateLastModelLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModelLogin", reflect.TypeOf((*MockState)(nil).LastModelLogin), arg0, arg1, arg2)
	return &MockStateLastModelLoginCall{Call: call}
}

// MockStateLastModelLoginCall wrap *gomock.Call
type MockStateLastModelLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateLastModelLoginCall) Return(arg0 time.Time, arg1 error) *MockStateLastModelLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateLastModelLoginCall) Do(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockStateLastModelLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateLastModelLoginCall) DoAndReturn(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockStateLastModelLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllAccessForUserAndObjectType mocks base method.
func (m *MockState) ReadAllAccessForUserAndObjectType(arg0 context.Context, arg1 user.Name, arg2 permission.ObjectType) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllAccessForUserAndObjectType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllAccessForUserAndObjectType indicates an expected call of ReadAllAccessForUserAndObjectType.
func (mr *MockStateMockRecorder) ReadAllAccessForUserAndObjectType(arg0, arg1, arg2 any) *MockStateReadAllAccessForUserAndObjectTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllAccessForUserAndObjectType", reflect.TypeOf((*MockState)(nil).ReadAllAccessForUserAndObjectType), arg0, arg1, arg2)
	return &MockStateReadAllAccessForUserAndObjectTypeCall{Call: call}
}

// MockStateReadAllAccessForUserAndObjectTypeCall wrap *gomock.Call
type MockStateReadAllAccessForUserAndObjectTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadAllAccessForUserAndObjectTypeCall) Return(arg0 []permission.UserAccess, arg1 error) *MockStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadAllAccessForUserAndObjectTypeCall) Do(f func(context.Context, user.Name, permission.ObjectType) ([]permission.UserAccess, error)) *MockStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadAllAccessForUserAndObjectTypeCall) DoAndReturn(f func(context.Context, user.Name, permission.ObjectType) ([]permission.UserAccess, error)) *MockStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllUserAccessForTarget mocks base method.
func (m *MockState) ReadAllUserAccessForTarget(arg0 context.Context, arg1 permission.ID) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUserAccessForTarget", arg0, arg1)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUserAccessForTarget indicates an expected call of ReadAllUserAccessForTarget.
func (mr *MockStateMockRecorder) ReadAllUserAccessForTarget(arg0, arg1 any) *MockStateReadAllUserAccessForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUserAccessForTarget", reflect.TypeOf((*MockState)(nil).ReadAllUserAccessForTarget), arg0, arg1)
	return &MockStateReadAllUserAccessForTargetCall{Call: call}
}

// MockStateReadAllUserAccessForTargetCall wrap *gomock.Call
type MockStateReadAllUserAccessForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadAllUserAccessForTargetCall) Return(arg0 []permission.UserAccess, arg1 error) *MockStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadAllUserAccessForTargetCall) Do(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadAllUserAccessForTargetCall) DoAndReturn(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllUserAccessForUser mocks base method.
func (m *MockState) ReadAllUserAccessForUser(arg0 context.Context, arg1 user.Name) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUserAccessForUser", arg0, arg1)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUserAccessForUser indicates an expected call of ReadAllUserAccessForUser.
func (mr *MockStateMockRecorder) ReadAllUserAccessForUser(arg0, arg1 any) *MockStateReadAllUserAccessForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUserAccessForUser", reflect.TypeOf((*MockState)(nil).ReadAllUserAccessForUser), arg0, arg1)
	return &MockStateReadAllUserAccessForUserCall{Call: call}
}

// MockStateReadAllUserAccessForUserCall wrap *gomock.Call
type MockStateReadAllUserAccessForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadAllUserAccessForUserCall) Return(arg0 []permission.UserAccess, arg1 error) *MockStateReadAllUserAccessForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadAllUserAccessForUserCall) Do(f func(context.Context, user.Name) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadAllUserAccessForUserCall) DoAndReturn(f func(context.Context, user.Name) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessForTarget mocks base method.
func (m *MockState) ReadUserAccessForTarget(arg0 context.Context, arg1 user.Name, arg2 permission.ID) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessForTarget indicates an expected call of ReadUserAccessForTarget.
func (mr *MockStateMockRecorder) ReadUserAccessForTarget(arg0, arg1, arg2 any) *MockStateReadUserAccessForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessForTarget", reflect.TypeOf((*MockState)(nil).ReadUserAccessForTarget), arg0, arg1, arg2)
	return &MockStateReadUserAccessForTargetCall{Call: call}
}

// MockStateReadUserAccessForTargetCall wrap *gomock.Call
type MockStateReadUserAccessForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadUserAccessForTargetCall) Return(arg0 permission.UserAccess, arg1 error) *MockStateReadUserAccessForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadUserAccessForTargetCall) Do(f func(context.Context, user.Name, permission.ID) (permission.UserAccess, error)) *MockStateReadUserAccessForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadUserAccessForTargetCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) (permission.UserAccess, error)) *MockStateReadUserAccessForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockState) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 user.Name, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockStateMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockStateReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockState)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockStateReadUserAccessLevelForTargetCall{Call: call}
}

// MockStateReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockStateReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadUserAccessLevelForTargetCall) Do(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveUser mocks base method.
func (m *MockState) RemoveUser(arg0 context.Context, arg1 user.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockStateMockRecorder) RemoveUser(arg0, arg1 any) *MockStateRemoveUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockState)(nil).RemoveUser), arg0, arg1)
	return &MockStateRemoveUserCall{Call: call}
}

// MockStateRemoveUserCall wrap *gomock.Call
type MockStateRemoveUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveUserCall) Return(arg0 error) *MockStateRemoveUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveUserCall) Do(f func(context.Context, user.Name) error) *MockStateRemoveUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveUserCall) DoAndReturn(f func(context.Context, user.Name) error) *MockStateRemoveUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetActivationKey mocks base method.
func (m *MockState) SetActivationKey(arg0 context.Context, arg1 user.Name, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActivationKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActivationKey indicates an expected call of SetActivationKey.
func (mr *MockStateMockRecorder) SetActivationKey(arg0, arg1, arg2 any) *MockStateSetActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActivationKey", reflect.TypeOf((*MockState)(nil).SetActivationKey), arg0, arg1, arg2)
	return &MockStateSetActivationKeyCall{Call: call}
}

// MockStateSetActivationKeyCall wrap *gomock.Call
type MockStateSetActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetActivationKeyCall) Return(arg0 error) *MockStateSetActivationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetActivationKeyCall) Do(f func(context.Context, user.Name, []byte) error) *MockStateSetActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetActivationKeyCall) DoAndReturn(f func(context.Context, user.Name, []byte) error) *MockStateSetActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPasswordHash mocks base method.
func (m *MockState) SetPasswordHash(arg0 context.Context, arg1 user.Name, arg2 string, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPasswordHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPasswordHash indicates an expected call of SetPasswordHash.
func (mr *MockStateMockRecorder) SetPasswordHash(arg0, arg1, arg2, arg3 any) *MockStateSetPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordHash", reflect.TypeOf((*MockState)(nil).SetPasswordHash), arg0, arg1, arg2, arg3)
	return &MockStateSetPasswordHashCall{Call: call}
}

// MockStateSetPasswordHashCall wrap *gomock.Call
type MockStateSetPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetPasswordHashCall) Return(arg0 error) *MockStateSetPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetPasswordHashCall) Do(f func(context.Context, user.Name, string, []byte) error) *MockStateSetPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetPasswordHashCall) DoAndReturn(f func(context.Context, user.Name, string, []byte) error) *MockStateSetPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLastModelLogin mocks base method.
func (m *MockState) UpdateLastModelLogin(arg0 context.Context, arg1 user.Name, arg2 model.UUID, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastModelLogin", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastModelLogin indicates an expected call of UpdateLastModelLogin.
func (mr *MockStateMockRecorder) UpdateLastModelLogin(arg0, arg1, arg2, arg3 any) *MockStateUpdateLastModelLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastModelLogin", reflect.TypeOf((*MockState)(nil).UpdateLastModelLogin), arg0, arg1, arg2, arg3)
	return &MockStateUpdateLastModelLoginCall{Call: call}
}

// MockStateUpdateLastModelLoginCall wrap *gomock.Call
type MockStateUpdateLastModelLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateLastModelLoginCall) Return(arg0 error) *MockStateUpdateLastModelLoginCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateLastModelLoginCall) Do(f func(context.Context, user.Name, model.UUID, time.Time) error) *MockStateUpdateLastModelLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateLastModelLoginCall) DoAndReturn(f func(context.Context, user.Name, model.UUID, time.Time) error) *MockStateUpdateLastModelLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockState) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockStateMockRecorder) UpdatePermission(arg0, arg1 any) *MockStateUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockState)(nil).UpdatePermission), arg0, arg1)
	return &MockStateUpdatePermissionCall{Call: call}
}

// MockStateUpdatePermissionCall wrap *gomock.Call
type MockStateUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdatePermissionCall) Return(arg0 error) *MockStateUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockStateUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockStateUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
