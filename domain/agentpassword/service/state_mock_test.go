// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/agentpassword/service (interfaces: State,MigrationState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/agentpassword/service State,MigrationState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	agentpassword "github.com/juju/juju/domain/agentpassword"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetMachineUUID mocks base method.
func (m *MockState) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockStateMockRecorder) GetMachineUUID(arg0, arg1 any) *MockStateGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockState)(nil).GetMachineUUID), arg0, arg1)
	return &MockStateGetMachineUUIDCall{Call: call}
}

// MockStateGetMachineUUIDCall wrap *gomock.Call
type MockStateGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockState) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockStateMockRecorder) GetUnitUUID(arg0, arg1 any) *MockStateGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockState)(nil).GetUnitUUID), arg0, arg1)
	return &MockStateGetUnitUUIDCall{Call: call}
}

// MockStateGetUnitUUIDCall wrap *gomock.Call
type MockStateGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineController mocks base method.
func (m *MockState) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockStateMockRecorder) IsMachineController(arg0, arg1 any) *MockStateIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockState)(nil).IsMachineController), arg0, arg1)
	return &MockStateIsMachineControllerCall{Call: call}
}

// MockStateIsMachineControllerCall wrap *gomock.Call
type MockStateIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockStateIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockStateIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockStateIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesMachinePasswordHashWithNonce mocks base method.
func (m *MockState) MatchesMachinePasswordHashWithNonce(arg0 context.Context, arg1 machine.UUID, arg2 agentpassword.PasswordHash, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesMachinePasswordHashWithNonce", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesMachinePasswordHashWithNonce indicates an expected call of MatchesMachinePasswordHashWithNonce.
func (mr *MockStateMockRecorder) MatchesMachinePasswordHashWithNonce(arg0, arg1, arg2, arg3 any) *MockStateMatchesMachinePasswordHashWithNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesMachinePasswordHashWithNonce", reflect.TypeOf((*MockState)(nil).MatchesMachinePasswordHashWithNonce), arg0, arg1, arg2, arg3)
	return &MockStateMatchesMachinePasswordHashWithNonceCall{Call: call}
}

// MockStateMatchesMachinePasswordHashWithNonceCall wrap *gomock.Call
type MockStateMatchesMachinePasswordHashWithNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMatchesMachinePasswordHashWithNonceCall) Return(arg0 bool, arg1 error) *MockStateMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMatchesMachinePasswordHashWithNonceCall) Do(f func(context.Context, machine.UUID, agentpassword.PasswordHash, string) (bool, error)) *MockStateMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMatchesMachinePasswordHashWithNonceCall) DoAndReturn(f func(context.Context, machine.UUID, agentpassword.PasswordHash, string) (bool, error)) *MockStateMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesUnitPasswordHash mocks base method.
func (m *MockState) MatchesUnitPasswordHash(arg0 context.Context, arg1 unit.UUID, arg2 agentpassword.PasswordHash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesUnitPasswordHash indicates an expected call of MatchesUnitPasswordHash.
func (mr *MockStateMockRecorder) MatchesUnitPasswordHash(arg0, arg1, arg2 any) *MockStateMatchesUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesUnitPasswordHash", reflect.TypeOf((*MockState)(nil).MatchesUnitPasswordHash), arg0, arg1, arg2)
	return &MockStateMatchesUnitPasswordHashCall{Call: call}
}

// MockStateMatchesUnitPasswordHashCall wrap *gomock.Call
type MockStateMatchesUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMatchesUnitPasswordHashCall) Return(arg0 bool, arg1 error) *MockStateMatchesUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMatchesUnitPasswordHashCall) Do(f func(context.Context, unit.UUID, agentpassword.PasswordHash) (bool, error)) *MockStateMatchesUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMatchesUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.UUID, agentpassword.PasswordHash) (bool, error)) *MockStateMatchesUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachinePasswordHash mocks base method.
func (m *MockState) SetMachinePasswordHash(arg0 context.Context, arg1 machine.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePasswordHash indicates an expected call of SetMachinePasswordHash.
func (mr *MockStateMockRecorder) SetMachinePasswordHash(arg0, arg1, arg2 any) *MockStateSetMachinePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePasswordHash", reflect.TypeOf((*MockState)(nil).SetMachinePasswordHash), arg0, arg1, arg2)
	return &MockStateSetMachinePasswordHashCall{Call: call}
}

// MockStateSetMachinePasswordHashCall wrap *gomock.Call
type MockStateSetMachinePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetMachinePasswordHashCall) Return(arg0 error) *MockStateSetMachinePasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetMachinePasswordHashCall) Do(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockStateSetMachinePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetMachinePasswordHashCall) DoAndReturn(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockStateSetMachinePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPasswordHash mocks base method.
func (m *MockState) SetUnitPasswordHash(arg0 context.Context, arg1 unit.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPasswordHash indicates an expected call of SetUnitPasswordHash.
func (mr *MockStateMockRecorder) SetUnitPasswordHash(arg0, arg1, arg2 any) *MockStateSetUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPasswordHash", reflect.TypeOf((*MockState)(nil).SetUnitPasswordHash), arg0, arg1, arg2)
	return &MockStateSetUnitPasswordHashCall{Call: call}
}

// MockStateSetUnitPasswordHashCall wrap *gomock.Call
type MockStateSetUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitPasswordHashCall) Return(arg0 error) *MockStateSetUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitPasswordHashCall) Do(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockStateSetUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockStateSetUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMigrationState is a mock of MigrationState interface.
type MockMigrationState struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationStateMockRecorder
}

// MockMigrationStateMockRecorder is the mock recorder for MockMigrationState.
type MockMigrationStateMockRecorder struct {
	mock *MockMigrationState
}

// NewMockMigrationState creates a new mock instance.
func NewMockMigrationState(ctrl *gomock.Controller) *MockMigrationState {
	mock := &MockMigrationState{ctrl: ctrl}
	mock.recorder = &MockMigrationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationState) EXPECT() *MockMigrationStateMockRecorder {
	return m.recorder
}

// GetAllMachinePasswordHashes mocks base method.
func (m *MockMigrationState) GetAllMachinePasswordHashes(arg0 context.Context) (agentpassword.MachinePasswordHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMachinePasswordHashes", arg0)
	ret0, _ := ret[0].(agentpassword.MachinePasswordHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMachinePasswordHashes indicates an expected call of GetAllMachinePasswordHashes.
func (mr *MockMigrationStateMockRecorder) GetAllMachinePasswordHashes(arg0 any) *MockMigrationStateGetAllMachinePasswordHashesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMachinePasswordHashes", reflect.TypeOf((*MockMigrationState)(nil).GetAllMachinePasswordHashes), arg0)
	return &MockMigrationStateGetAllMachinePasswordHashesCall{Call: call}
}

// MockMigrationStateGetAllMachinePasswordHashesCall wrap *gomock.Call
type MockMigrationStateGetAllMachinePasswordHashesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetAllMachinePasswordHashesCall) Return(arg0 agentpassword.MachinePasswordHashes, arg1 error) *MockMigrationStateGetAllMachinePasswordHashesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetAllMachinePasswordHashesCall) Do(f func(context.Context) (agentpassword.MachinePasswordHashes, error)) *MockMigrationStateGetAllMachinePasswordHashesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetAllMachinePasswordHashesCall) DoAndReturn(f func(context.Context) (agentpassword.MachinePasswordHashes, error)) *MockMigrationStateGetAllMachinePasswordHashesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUnitPasswordHashes mocks base method.
func (m *MockMigrationState) GetAllUnitPasswordHashes(arg0 context.Context) (agentpassword.UnitPasswordHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnitPasswordHashes", arg0)
	ret0, _ := ret[0].(agentpassword.UnitPasswordHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnitPasswordHashes indicates an expected call of GetAllUnitPasswordHashes.
func (mr *MockMigrationStateMockRecorder) GetAllUnitPasswordHashes(arg0 any) *MockMigrationStateGetAllUnitPasswordHashesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnitPasswordHashes", reflect.TypeOf((*MockMigrationState)(nil).GetAllUnitPasswordHashes), arg0)
	return &MockMigrationStateGetAllUnitPasswordHashesCall{Call: call}
}

// MockMigrationStateGetAllUnitPasswordHashesCall wrap *gomock.Call
type MockMigrationStateGetAllUnitPasswordHashesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetAllUnitPasswordHashesCall) Return(arg0 agentpassword.UnitPasswordHashes, arg1 error) *MockMigrationStateGetAllUnitPasswordHashesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetAllUnitPasswordHashesCall) Do(f func(context.Context) (agentpassword.UnitPasswordHashes, error)) *MockMigrationStateGetAllUnitPasswordHashesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetAllUnitPasswordHashesCall) DoAndReturn(f func(context.Context) (agentpassword.UnitPasswordHashes, error)) *MockMigrationStateGetAllUnitPasswordHashesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMigrationState) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMigrationStateMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMigrationStateGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMigrationState)(nil).GetMachineUUID), arg0, arg1)
	return &MockMigrationStateGetMachineUUIDCall{Call: call}
}

// MockMigrationStateGetMachineUUIDCall wrap *gomock.Call
type MockMigrationStateGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMigrationStateGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMigrationStateGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMigrationStateGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockMigrationState) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockMigrationStateMockRecorder) GetUnitUUID(arg0, arg1 any) *MockMigrationStateGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockMigrationState)(nil).GetUnitUUID), arg0, arg1)
	return &MockMigrationStateGetUnitUUIDCall{Call: call}
}

// MockMigrationStateGetUnitUUIDCall wrap *gomock.Call
type MockMigrationStateGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockMigrationStateGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockMigrationStateGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockMigrationStateGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachinePasswordHash mocks base method.
func (m *MockMigrationState) SetMachinePasswordHash(arg0 context.Context, arg1 machine.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePasswordHash indicates an expected call of SetMachinePasswordHash.
func (mr *MockMigrationStateMockRecorder) SetMachinePasswordHash(arg0, arg1, arg2 any) *MockMigrationStateSetMachinePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePasswordHash", reflect.TypeOf((*MockMigrationState)(nil).SetMachinePasswordHash), arg0, arg1, arg2)
	return &MockMigrationStateSetMachinePasswordHashCall{Call: call}
}

// MockMigrationStateSetMachinePasswordHashCall wrap *gomock.Call
type MockMigrationStateSetMachinePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateSetMachinePasswordHashCall) Return(arg0 error) *MockMigrationStateSetMachinePasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateSetMachinePasswordHashCall) Do(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetMachinePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateSetMachinePasswordHashCall) DoAndReturn(f func(context.Context, machine.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetMachinePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPasswordHash mocks base method.
func (m *MockMigrationState) SetUnitPasswordHash(arg0 context.Context, arg1 unit.UUID, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPasswordHash indicates an expected call of SetUnitPasswordHash.
func (mr *MockMigrationStateMockRecorder) SetUnitPasswordHash(arg0, arg1, arg2 any) *MockMigrationStateSetUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPasswordHash", reflect.TypeOf((*MockMigrationState)(nil).SetUnitPasswordHash), arg0, arg1, arg2)
	return &MockMigrationStateSetUnitPasswordHashCall{Call: call}
}

// MockMigrationStateSetUnitPasswordHashCall wrap *gomock.Call
type MockMigrationStateSetUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateSetUnitPasswordHashCall) Return(arg0 error) *MockMigrationStateSetUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateSetUnitPasswordHashCall) Do(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateSetUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.UUID, agentpassword.PasswordHash) error) *MockMigrationStateSetUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
