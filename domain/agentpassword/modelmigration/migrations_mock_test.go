// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/agentpassword/modelmigration (interfaces: ExportService,ImportService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/agentpassword/modelmigration ExportService,ImportService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	agentpassword "github.com/juju/juju/domain/agentpassword"
	gomock "go.uber.org/mock/gomock"
)

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// GetAllMachinePasswordHashes mocks base method.
func (m *MockExportService) GetAllMachinePasswordHashes(arg0 context.Context) (agentpassword.MachinePasswordHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMachinePasswordHashes", arg0)
	ret0, _ := ret[0].(agentpassword.MachinePasswordHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMachinePasswordHashes indicates an expected call of GetAllMachinePasswordHashes.
func (mr *MockExportServiceMockRecorder) GetAllMachinePasswordHashes(arg0 any) *MockExportServiceGetAllMachinePasswordHashesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMachinePasswordHashes", reflect.TypeOf((*MockExportService)(nil).GetAllMachinePasswordHashes), arg0)
	return &MockExportServiceGetAllMachinePasswordHashesCall{Call: call}
}

// MockExportServiceGetAllMachinePasswordHashesCall wrap *gomock.Call
type MockExportServiceGetAllMachinePasswordHashesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetAllMachinePasswordHashesCall) Return(arg0 agentpassword.MachinePasswordHashes, arg1 error) *MockExportServiceGetAllMachinePasswordHashesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetAllMachinePasswordHashesCall) Do(f func(context.Context) (agentpassword.MachinePasswordHashes, error)) *MockExportServiceGetAllMachinePasswordHashesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetAllMachinePasswordHashesCall) DoAndReturn(f func(context.Context) (agentpassword.MachinePasswordHashes, error)) *MockExportServiceGetAllMachinePasswordHashesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUnitPasswordHashes mocks base method.
func (m *MockExportService) GetAllUnitPasswordHashes(arg0 context.Context) (agentpassword.UnitPasswordHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnitPasswordHashes", arg0)
	ret0, _ := ret[0].(agentpassword.UnitPasswordHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnitPasswordHashes indicates an expected call of GetAllUnitPasswordHashes.
func (mr *MockExportServiceMockRecorder) GetAllUnitPasswordHashes(arg0 any) *MockExportServiceGetAllUnitPasswordHashesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnitPasswordHashes", reflect.TypeOf((*MockExportService)(nil).GetAllUnitPasswordHashes), arg0)
	return &MockExportServiceGetAllUnitPasswordHashesCall{Call: call}
}

// MockExportServiceGetAllUnitPasswordHashesCall wrap *gomock.Call
type MockExportServiceGetAllUnitPasswordHashesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetAllUnitPasswordHashesCall) Return(arg0 agentpassword.UnitPasswordHashes, arg1 error) *MockExportServiceGetAllUnitPasswordHashesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetAllUnitPasswordHashesCall) Do(f func(context.Context) (agentpassword.UnitPasswordHashes, error)) *MockExportServiceGetAllUnitPasswordHashesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetAllUnitPasswordHashesCall) DoAndReturn(f func(context.Context) (agentpassword.UnitPasswordHashes, error)) *MockExportServiceGetAllUnitPasswordHashesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// SetMachinePasswordHash mocks base method.
func (m *MockImportService) SetMachinePasswordHash(arg0 context.Context, arg1 machine.Name, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePasswordHash indicates an expected call of SetMachinePasswordHash.
func (mr *MockImportServiceMockRecorder) SetMachinePasswordHash(arg0, arg1, arg2 any) *MockImportServiceSetMachinePasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePasswordHash", reflect.TypeOf((*MockImportService)(nil).SetMachinePasswordHash), arg0, arg1, arg2)
	return &MockImportServiceSetMachinePasswordHashCall{Call: call}
}

// MockImportServiceSetMachinePasswordHashCall wrap *gomock.Call
type MockImportServiceSetMachinePasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceSetMachinePasswordHashCall) Return(arg0 error) *MockImportServiceSetMachinePasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceSetMachinePasswordHashCall) Do(f func(context.Context, machine.Name, agentpassword.PasswordHash) error) *MockImportServiceSetMachinePasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceSetMachinePasswordHashCall) DoAndReturn(f func(context.Context, machine.Name, agentpassword.PasswordHash) error) *MockImportServiceSetMachinePasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPasswordHash mocks base method.
func (m *MockImportService) SetUnitPasswordHash(arg0 context.Context, arg1 unit.Name, arg2 agentpassword.PasswordHash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPasswordHash indicates an expected call of SetUnitPasswordHash.
func (mr *MockImportServiceMockRecorder) SetUnitPasswordHash(arg0, arg1, arg2 any) *MockImportServiceSetUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPasswordHash", reflect.TypeOf((*MockImportService)(nil).SetUnitPasswordHash), arg0, arg1, arg2)
	return &MockImportServiceSetUnitPasswordHashCall{Call: call}
}

// MockImportServiceSetUnitPasswordHashCall wrap *gomock.Call
type MockImportServiceSetUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceSetUnitPasswordHashCall) Return(arg0 error) *MockImportServiceSetUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceSetUnitPasswordHashCall) Do(f func(context.Context, unit.Name, agentpassword.PasswordHash) error) *MockImportServiceSetUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceSetUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.Name, agentpassword.PasswordHash) error) *MockImportServiceSetUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
