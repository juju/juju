// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/externalcontroller/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/externalcontroller/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	crossmodel "github.com/juju/juju/core/crossmodel"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// Controller mocks base method.
func (m *MockState) Controller(arg0 context.Context, arg1 string) (*crossmodel.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Controller", arg0, arg1)
	ret0, _ := ret[0].(*crossmodel.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Controller indicates an expected call of Controller.
func (mr *MockStateMockRecorder) Controller(arg0, arg1 any) *MockStateControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Controller", reflect.TypeOf((*MockState)(nil).Controller), arg0, arg1)
	return &MockStateControllerCall{Call: call}
}

// MockStateControllerCall wrap *gomock.Call
type MockStateControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateControllerCall) Return(arg0 *crossmodel.ControllerInfo, arg1 error) *MockStateControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateControllerCall) Do(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockStateControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateControllerCall) DoAndReturn(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockStateControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllersForModels mocks base method.
func (m *MockState) ControllersForModels(arg0 context.Context, arg1 ...string) ([]crossmodel.ControllerInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ControllersForModels", varargs...)
	ret0, _ := ret[0].([]crossmodel.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllersForModels indicates an expected call of ControllersForModels.
func (mr *MockStateMockRecorder) ControllersForModels(arg0 any, arg1 ...any) *MockStateControllersForModelsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllersForModels", reflect.TypeOf((*MockState)(nil).ControllersForModels), varargs...)
	return &MockStateControllersForModelsCall{Call: call}
}

// MockStateControllersForModelsCall wrap *gomock.Call
type MockStateControllersForModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateControllersForModelsCall) Return(arg0 []crossmodel.ControllerInfo, arg1 error) *MockStateControllersForModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateControllersForModelsCall) Do(f func(context.Context, ...string) ([]crossmodel.ControllerInfo, error)) *MockStateControllersForModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateControllersForModelsCall) DoAndReturn(f func(context.Context, ...string) ([]crossmodel.ControllerInfo, error)) *MockStateControllersForModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportExternalControllers mocks base method.
func (m *MockState) ImportExternalControllers(arg0 context.Context, arg1 []crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportExternalControllers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportExternalControllers indicates an expected call of ImportExternalControllers.
func (mr *MockStateMockRecorder) ImportExternalControllers(arg0, arg1 any) *MockStateImportExternalControllersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportExternalControllers", reflect.TypeOf((*MockState)(nil).ImportExternalControllers), arg0, arg1)
	return &MockStateImportExternalControllersCall{Call: call}
}

// MockStateImportExternalControllersCall wrap *gomock.Call
type MockStateImportExternalControllersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateImportExternalControllersCall) Return(arg0 error) *MockStateImportExternalControllersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateImportExternalControllersCall) Do(f func(context.Context, []crossmodel.ControllerInfo) error) *MockStateImportExternalControllersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateImportExternalControllersCall) DoAndReturn(f func(context.Context, []crossmodel.ControllerInfo) error) *MockStateImportExternalControllersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelsForController mocks base method.
func (m *MockState) ModelsForController(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelsForController", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelsForController indicates an expected call of ModelsForController.
func (mr *MockStateMockRecorder) ModelsForController(arg0, arg1 any) *MockStateModelsForControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelsForController", reflect.TypeOf((*MockState)(nil).ModelsForController), arg0, arg1)
	return &MockStateModelsForControllerCall{Call: call}
}

// MockStateModelsForControllerCall wrap *gomock.Call
type MockStateModelsForControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelsForControllerCall) Return(arg0 []string, arg1 error) *MockStateModelsForControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelsForControllerCall) Do(f func(context.Context, string) ([]string, error)) *MockStateModelsForControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelsForControllerCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStateModelsForControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateExternalController mocks base method.
func (m *MockState) UpdateExternalController(arg0 context.Context, arg1 crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalController indicates an expected call of UpdateExternalController.
func (mr *MockStateMockRecorder) UpdateExternalController(arg0, arg1 any) *MockStateUpdateExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalController", reflect.TypeOf((*MockState)(nil).UpdateExternalController), arg0, arg1)
	return &MockStateUpdateExternalControllerCall{Call: call}
}

// MockStateUpdateExternalControllerCall wrap *gomock.Call
type MockStateUpdateExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateExternalControllerCall) Return(arg0 error) *MockStateUpdateExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateExternalControllerCall) Do(f func(context.Context, crossmodel.ControllerInfo) error) *MockStateUpdateExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateExternalControllerCall) DoAndReturn(f func(context.Context, crossmodel.ControllerInfo) error) *MockStateUpdateExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
