// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/externalcontroller/modelmigration (interfaces: Coordinator,ImportService,ExportService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/externalcontroller/modelmigration Coordinator,ImportService,ExportService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	crossmodel "github.com/juju/juju/core/crossmodel"
	modelmigration "github.com/juju/juju/core/modelmigration"
	gomock "go.uber.org/mock/gomock"
)

// MockCoordinator is a mock of Coordinator interface.
type MockCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorMockRecorder
}

// MockCoordinatorMockRecorder is the mock recorder for MockCoordinator.
type MockCoordinatorMockRecorder struct {
	mock *MockCoordinator
}

// NewMockCoordinator creates a new mock instance.
func NewMockCoordinator(ctrl *gomock.Controller) *MockCoordinator {
	mock := &MockCoordinator{ctrl: ctrl}
	mock.recorder = &MockCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinator) EXPECT() *MockCoordinatorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCoordinator) ISGOMOCK() struct{} {
	return struct{}{}
}

// Add mocks base method.
func (m *MockCoordinator) Add(arg0 modelmigration.Operation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockCoordinatorMockRecorder) Add(arg0 any) *MockCoordinatorAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCoordinator)(nil).Add), arg0)
	return &MockCoordinatorAddCall{Call: call}
}

// MockCoordinatorAddCall wrap *gomock.Call
type MockCoordinatorAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoordinatorAddCall) Return() *MockCoordinatorAddCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoordinatorAddCall) Do(f func(modelmigration.Operation)) *MockCoordinatorAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoordinatorAddCall) DoAndReturn(f func(modelmigration.Operation)) *MockCoordinatorAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockImportService) ISGOMOCK() struct{} {
	return struct{}{}
}

// ImportExternalControllers mocks base method.
func (m *MockImportService) ImportExternalControllers(arg0 context.Context, arg1 []crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportExternalControllers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportExternalControllers indicates an expected call of ImportExternalControllers.
func (mr *MockImportServiceMockRecorder) ImportExternalControllers(arg0, arg1 any) *MockImportServiceImportExternalControllersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportExternalControllers", reflect.TypeOf((*MockImportService)(nil).ImportExternalControllers), arg0, arg1)
	return &MockImportServiceImportExternalControllersCall{Call: call}
}

// MockImportServiceImportExternalControllersCall wrap *gomock.Call
type MockImportServiceImportExternalControllersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceImportExternalControllersCall) Return(arg0 error) *MockImportServiceImportExternalControllersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceImportExternalControllersCall) Do(f func(context.Context, []crossmodel.ControllerInfo) error) *MockImportServiceImportExternalControllersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceImportExternalControllersCall) DoAndReturn(f func(context.Context, []crossmodel.ControllerInfo) error) *MockImportServiceImportExternalControllersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockExportService) ISGOMOCK() struct{} {
	return struct{}{}
}

// ControllerForModel mocks base method.
func (m *MockExportService) ControllerForModel(arg0 context.Context, arg1 string) (*crossmodel.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerForModel", arg0, arg1)
	ret0, _ := ret[0].(*crossmodel.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerForModel indicates an expected call of ControllerForModel.
func (mr *MockExportServiceMockRecorder) ControllerForModel(arg0, arg1 any) *MockExportServiceControllerForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerForModel", reflect.TypeOf((*MockExportService)(nil).ControllerForModel), arg0, arg1)
	return &MockExportServiceControllerForModelCall{Call: call}
}

// MockExportServiceControllerForModelCall wrap *gomock.Call
type MockExportServiceControllerForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceControllerForModelCall) Return(arg0 *crossmodel.ControllerInfo, arg1 error) *MockExportServiceControllerForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceControllerForModelCall) Do(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockExportServiceControllerForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceControllerForModelCall) DoAndReturn(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockExportServiceControllerForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllersForModels mocks base method.
func (m *MockExportService) ControllersForModels(arg0 context.Context, arg1 ...string) ([]crossmodel.ControllerInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ControllersForModels", varargs...)
	ret0, _ := ret[0].([]crossmodel.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllersForModels indicates an expected call of ControllersForModels.
func (mr *MockExportServiceMockRecorder) ControllersForModels(arg0 any, arg1 ...any) *MockExportServiceControllersForModelsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllersForModels", reflect.TypeOf((*MockExportService)(nil).ControllersForModels), varargs...)
	return &MockExportServiceControllersForModelsCall{Call: call}
}

// MockExportServiceControllersForModelsCall wrap *gomock.Call
type MockExportServiceControllersForModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceControllersForModelsCall) Return(arg0 []crossmodel.ControllerInfo, arg1 error) *MockExportServiceControllersForModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceControllersForModelsCall) Do(f func(context.Context, ...string) ([]crossmodel.ControllerInfo, error)) *MockExportServiceControllersForModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceControllersForModelsCall) DoAndReturn(f func(context.Context, ...string) ([]crossmodel.ControllerInfo, error)) *MockExportServiceControllersForModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelsForController mocks base method.
func (m *MockExportService) ModelsForController(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelsForController", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelsForController indicates an expected call of ModelsForController.
func (mr *MockExportServiceMockRecorder) ModelsForController(arg0, arg1 any) *MockExportServiceModelsForControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelsForController", reflect.TypeOf((*MockExportService)(nil).ModelsForController), arg0, arg1)
	return &MockExportServiceModelsForControllerCall{Call: call}
}

// MockExportServiceModelsForControllerCall wrap *gomock.Call
type MockExportServiceModelsForControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceModelsForControllerCall) Return(arg0 []string, arg1 error) *MockExportServiceModelsForControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceModelsForControllerCall) Do(f func(context.Context, string) ([]string, error)) *MockExportServiceModelsForControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceModelsForControllerCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockExportServiceModelsForControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
