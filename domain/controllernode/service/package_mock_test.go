// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/controllernode/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/controllernode/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	agentbinary "github.com/juju/juju/core/agentbinary"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	controllernode "github.com/juju/juju/domain/controllernode"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// CurateNodes mocks base method.
func (m *MockState) CurateNodes(arg0 context.Context, arg1, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurateNodes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CurateNodes indicates an expected call of CurateNodes.
func (mr *MockStateMockRecorder) CurateNodes(arg0, arg1, arg2 any) *MockStateCurateNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurateNodes", reflect.TypeOf((*MockState)(nil).CurateNodes), arg0, arg1, arg2)
	return &MockStateCurateNodesCall{Call: call}
}

// MockStateCurateNodesCall wrap *gomock.Call
type MockStateCurateNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCurateNodesCall) Return(arg0 error) *MockStateCurateNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCurateNodesCall) Do(f func(context.Context, []string, []string) error) *MockStateCurateNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCurateNodesCall) DoAndReturn(f func(context.Context, []string, []string) error) *MockStateCurateNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAPIAddresses mocks base method.
func (m *MockState) GetAPIAddresses(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIAddresses", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIAddresses indicates an expected call of GetAPIAddresses.
func (mr *MockStateMockRecorder) GetAPIAddresses(arg0, arg1 any) *MockStateGetAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIAddresses", reflect.TypeOf((*MockState)(nil).GetAPIAddresses), arg0, arg1)
	return &MockStateGetAPIAddressesCall{Call: call}
}

// MockStateGetAPIAddressesCall wrap *gomock.Call
type MockStateGetAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAPIAddressesCall) Return(arg0 []string, arg1 error) *MockStateGetAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAPIAddressesCall) Do(f func(context.Context, string) ([]string, error)) *MockStateGetAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAPIAddressesCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStateGetAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAPIAddressesByControllerIDForAgents mocks base method.
func (m *MockState) GetAPIAddressesByControllerIDForAgents(arg0 context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIAddressesByControllerIDForAgents", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIAddressesByControllerIDForAgents indicates an expected call of GetAPIAddressesByControllerIDForAgents.
func (mr *MockStateMockRecorder) GetAPIAddressesByControllerIDForAgents(arg0 any) *MockStateGetAPIAddressesByControllerIDForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIAddressesByControllerIDForAgents", reflect.TypeOf((*MockState)(nil).GetAPIAddressesByControllerIDForAgents), arg0)
	return &MockStateGetAPIAddressesByControllerIDForAgentsCall{Call: call}
}

// MockStateGetAPIAddressesByControllerIDForAgentsCall wrap *gomock.Call
type MockStateGetAPIAddressesByControllerIDForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAPIAddressesByControllerIDForAgentsCall) Return(arg0 map[string][]string, arg1 error) *MockStateGetAPIAddressesByControllerIDForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAPIAddressesByControllerIDForAgentsCall) Do(f func(context.Context) (map[string][]string, error)) *MockStateGetAPIAddressesByControllerIDForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAPIAddressesByControllerIDForAgentsCall) DoAndReturn(f func(context.Context) (map[string][]string, error)) *MockStateGetAPIAddressesByControllerIDForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAPIAddressesForAgents mocks base method.
func (m *MockState) GetAPIAddressesForAgents(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIAddressesForAgents", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIAddressesForAgents indicates an expected call of GetAPIAddressesForAgents.
func (mr *MockStateMockRecorder) GetAPIAddressesForAgents(arg0, arg1 any) *MockStateGetAPIAddressesForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIAddressesForAgents", reflect.TypeOf((*MockState)(nil).GetAPIAddressesForAgents), arg0, arg1)
	return &MockStateGetAPIAddressesForAgentsCall{Call: call}
}

// MockStateGetAPIAddressesForAgentsCall wrap *gomock.Call
type MockStateGetAPIAddressesForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAPIAddressesForAgentsCall) Return(arg0 []string, arg1 error) *MockStateGetAPIAddressesForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAPIAddressesForAgentsCall) Do(f func(context.Context, string) ([]string, error)) *MockStateGetAPIAddressesForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAPIAddressesForAgentsCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStateGetAPIAddressesForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllAPIAddressesWithScopeForAgents mocks base method.
func (m *MockState) GetAllAPIAddressesWithScopeForAgents(arg0 context.Context) ([]controllernode.APIAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesWithScopeForAgents", arg0)
	ret0, _ := ret[0].([]controllernode.APIAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesWithScopeForAgents indicates an expected call of GetAllAPIAddressesWithScopeForAgents.
func (mr *MockStateMockRecorder) GetAllAPIAddressesWithScopeForAgents(arg0 any) *MockStateGetAllAPIAddressesWithScopeForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesWithScopeForAgents", reflect.TypeOf((*MockState)(nil).GetAllAPIAddressesWithScopeForAgents), arg0)
	return &MockStateGetAllAPIAddressesWithScopeForAgentsCall{Call: call}
}

// MockStateGetAllAPIAddressesWithScopeForAgentsCall wrap *gomock.Call
type MockStateGetAllAPIAddressesWithScopeForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllAPIAddressesWithScopeForAgentsCall) Return(arg0 []controllernode.APIAddresses, arg1 error) *MockStateGetAllAPIAddressesWithScopeForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllAPIAddressesWithScopeForAgentsCall) Do(f func(context.Context) ([]controllernode.APIAddresses, error)) *MockStateGetAllAPIAddressesWithScopeForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllAPIAddressesWithScopeForAgentsCall) DoAndReturn(f func(context.Context) ([]controllernode.APIAddresses, error)) *MockStateGetAllAPIAddressesWithScopeForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllAPIAddressesWithScopeForClients mocks base method.
func (m *MockState) GetAllAPIAddressesWithScopeForClients(arg0 context.Context) ([]controllernode.APIAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesWithScopeForClients", arg0)
	ret0, _ := ret[0].([]controllernode.APIAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesWithScopeForClients indicates an expected call of GetAllAPIAddressesWithScopeForClients.
func (mr *MockStateMockRecorder) GetAllAPIAddressesWithScopeForClients(arg0 any) *MockStateGetAllAPIAddressesWithScopeForClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesWithScopeForClients", reflect.TypeOf((*MockState)(nil).GetAllAPIAddressesWithScopeForClients), arg0)
	return &MockStateGetAllAPIAddressesWithScopeForClientsCall{Call: call}
}

// MockStateGetAllAPIAddressesWithScopeForClientsCall wrap *gomock.Call
type MockStateGetAllAPIAddressesWithScopeForClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllAPIAddressesWithScopeForClientsCall) Return(arg0 []controllernode.APIAddresses, arg1 error) *MockStateGetAllAPIAddressesWithScopeForClientsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllAPIAddressesWithScopeForClientsCall) Do(f func(context.Context) ([]controllernode.APIAddresses, error)) *MockStateGetAllAPIAddressesWithScopeForClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllAPIAddressesWithScopeForClientsCall) DoAndReturn(f func(context.Context) ([]controllernode.APIAddresses, error)) *MockStateGetAllAPIAddressesWithScopeForClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllCloudLocalAPIAddresses mocks base method.
func (m *MockState) GetAllCloudLocalAPIAddresses(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCloudLocalAPIAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCloudLocalAPIAddresses indicates an expected call of GetAllCloudLocalAPIAddresses.
func (mr *MockStateMockRecorder) GetAllCloudLocalAPIAddresses(arg0 any) *MockStateGetAllCloudLocalAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCloudLocalAPIAddresses", reflect.TypeOf((*MockState)(nil).GetAllCloudLocalAPIAddresses), arg0)
	return &MockStateGetAllCloudLocalAPIAddressesCall{Call: call}
}

// MockStateGetAllCloudLocalAPIAddressesCall wrap *gomock.Call
type MockStateGetAllCloudLocalAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllCloudLocalAPIAddressesCall) Return(arg0 []string, arg1 error) *MockStateGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllCloudLocalAPIAddressesCall) Do(f func(context.Context) ([]string, error)) *MockStateGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllCloudLocalAPIAddressesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockStateGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerAPIAddresses mocks base method.
func (m *MockState) GetControllerAPIAddresses(arg0 context.Context) (map[string]controllernode.APIAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerAPIAddresses", arg0)
	ret0, _ := ret[0].(map[string]controllernode.APIAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerAPIAddresses indicates an expected call of GetControllerAPIAddresses.
func (mr *MockStateMockRecorder) GetControllerAPIAddresses(arg0 any) *MockStateGetControllerAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerAPIAddresses", reflect.TypeOf((*MockState)(nil).GetControllerAPIAddresses), arg0)
	return &MockStateGetControllerAPIAddressesCall{Call: call}
}

// MockStateGetControllerAPIAddressesCall wrap *gomock.Call
type MockStateGetControllerAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerAPIAddressesCall) Return(arg0 map[string]controllernode.APIAddresses, arg1 error) *MockStateGetControllerAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerAPIAddressesCall) Do(f func(context.Context) (map[string]controllernode.APIAddresses, error)) *MockStateGetControllerAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerAPIAddressesCall) DoAndReturn(f func(context.Context) (map[string]controllernode.APIAddresses, error)) *MockStateGetControllerAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerIDs mocks base method.
func (m *MockState) GetControllerIDs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerIDs indicates an expected call of GetControllerIDs.
func (mr *MockStateMockRecorder) GetControllerIDs(arg0 any) *MockStateGetControllerIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerIDs", reflect.TypeOf((*MockState)(nil).GetControllerIDs), arg0)
	return &MockStateGetControllerIDsCall{Call: call}
}

// MockStateGetControllerIDsCall wrap *gomock.Call
type MockStateGetControllerIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerIDsCall) Return(arg0 []string, arg1 error) *MockStateGetControllerIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerIDsCall) Do(f func(context.Context) ([]string, error)) *MockStateGetControllerIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerIDsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockStateGetControllerIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerNode mocks base method.
func (m *MockState) IsControllerNode(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerNode", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerNode indicates an expected call of IsControllerNode.
func (mr *MockStateMockRecorder) IsControllerNode(arg0, arg1 any) *MockStateIsControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerNode", reflect.TypeOf((*MockState)(nil).IsControllerNode), arg0, arg1)
	return &MockStateIsControllerNodeCall{Call: call}
}

// MockStateIsControllerNodeCall wrap *gomock.Call
type MockStateIsControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsControllerNodeCall) Return(arg0 bool, arg1 error) *MockStateIsControllerNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsControllerNodeCall) Do(f func(context.Context, string) (bool, error)) *MockStateIsControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsControllerNodeCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateIsControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchControllerAPIAddresses mocks base method.
func (m *MockState) NamespaceForWatchControllerAPIAddresses() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchControllerAPIAddresses")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchControllerAPIAddresses indicates an expected call of NamespaceForWatchControllerAPIAddresses.
func (mr *MockStateMockRecorder) NamespaceForWatchControllerAPIAddresses() *MockStateNamespaceForWatchControllerAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchControllerAPIAddresses", reflect.TypeOf((*MockState)(nil).NamespaceForWatchControllerAPIAddresses))
	return &MockStateNamespaceForWatchControllerAPIAddressesCall{Call: call}
}

// MockStateNamespaceForWatchControllerAPIAddressesCall wrap *gomock.Call
type MockStateNamespaceForWatchControllerAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchControllerAPIAddressesCall) Return(arg0 string) *MockStateNamespaceForWatchControllerAPIAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchControllerAPIAddressesCall) Do(f func() string) *MockStateNamespaceForWatchControllerAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchControllerAPIAddressesCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchControllerAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchControllerNodes mocks base method.
func (m *MockState) NamespaceForWatchControllerNodes() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchControllerNodes")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchControllerNodes indicates an expected call of NamespaceForWatchControllerNodes.
func (mr *MockStateMockRecorder) NamespaceForWatchControllerNodes() *MockStateNamespaceForWatchControllerNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchControllerNodes", reflect.TypeOf((*MockState)(nil).NamespaceForWatchControllerNodes))
	return &MockStateNamespaceForWatchControllerNodesCall{Call: call}
}

// MockStateNamespaceForWatchControllerNodesCall wrap *gomock.Call
type MockStateNamespaceForWatchControllerNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchControllerNodesCall) Return(arg0 string) *MockStateNamespaceForWatchControllerNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchControllerNodesCall) Do(f func() string) *MockStateNamespaceForWatchControllerNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchControllerNodesCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchControllerNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SelectDatabaseNamespace mocks base method.
func (m *MockState) SelectDatabaseNamespace(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDatabaseNamespace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectDatabaseNamespace indicates an expected call of SelectDatabaseNamespace.
func (mr *MockStateMockRecorder) SelectDatabaseNamespace(arg0, arg1 any) *MockStateSelectDatabaseNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDatabaseNamespace", reflect.TypeOf((*MockState)(nil).SelectDatabaseNamespace), arg0, arg1)
	return &MockStateSelectDatabaseNamespaceCall{Call: call}
}

// MockStateSelectDatabaseNamespaceCall wrap *gomock.Call
type MockStateSelectDatabaseNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSelectDatabaseNamespaceCall) Return(arg0 string, arg1 error) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSelectDatabaseNamespaceCall) Do(f func(context.Context, string) (string, error)) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSelectDatabaseNamespaceCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAPIAddresses mocks base method.
func (m *MockState) SetAPIAddresses(arg0 context.Context, arg1 map[string]controllernode.APIAddresses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPIAddresses indicates an expected call of SetAPIAddresses.
func (mr *MockStateMockRecorder) SetAPIAddresses(arg0, arg1 any) *MockStateSetAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIAddresses", reflect.TypeOf((*MockState)(nil).SetAPIAddresses), arg0, arg1)
	return &MockStateSetAPIAddressesCall{Call: call}
}

// MockStateSetAPIAddressesCall wrap *gomock.Call
type MockStateSetAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetAPIAddressesCall) Return(arg0 error) *MockStateSetAPIAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetAPIAddressesCall) Do(f func(context.Context, map[string]controllernode.APIAddresses) error) *MockStateSetAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetAPIAddressesCall) DoAndReturn(f func(context.Context, map[string]controllernode.APIAddresses) error) *MockStateSetAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRunningAgentBinaryVersion mocks base method.
func (m *MockState) SetRunningAgentBinaryVersion(arg0 context.Context, arg1 string, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRunningAgentBinaryVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRunningAgentBinaryVersion indicates an expected call of SetRunningAgentBinaryVersion.
func (mr *MockStateMockRecorder) SetRunningAgentBinaryVersion(arg0, arg1, arg2 any) *MockStateSetRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunningAgentBinaryVersion", reflect.TypeOf((*MockState)(nil).SetRunningAgentBinaryVersion), arg0, arg1, arg2)
	return &MockStateSetRunningAgentBinaryVersionCall{Call: call}
}

// MockStateSetRunningAgentBinaryVersionCall wrap *gomock.Call
type MockStateSetRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRunningAgentBinaryVersionCall) Return(arg0 error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRunningAgentBinaryVersionCall) Do(f func(context.Context, string, agentbinary.Version) error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, string, agentbinary.Version) error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDqliteNode mocks base method.
func (m *MockState) UpdateDqliteNode(arg0 context.Context, arg1 string, arg2 uint64, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDqliteNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDqliteNode indicates an expected call of UpdateDqliteNode.
func (mr *MockStateMockRecorder) UpdateDqliteNode(arg0, arg1, arg2, arg3 any) *MockStateUpdateDqliteNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDqliteNode", reflect.TypeOf((*MockState)(nil).UpdateDqliteNode), arg0, arg1, arg2, arg3)
	return &MockStateUpdateDqliteNodeCall{Call: call}
}

// MockStateUpdateDqliteNodeCall wrap *gomock.Call
type MockStateUpdateDqliteNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateDqliteNodeCall) Return(arg0 error) *MockStateUpdateDqliteNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateDqliteNodeCall) Do(f func(context.Context, string, uint64, string) error) *MockStateUpdateDqliteNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateDqliteNodeCall) DoAndReturn(f func(context.Context, string, uint64, string) error) *MockStateUpdateDqliteNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 eventsource.FilterOption, arg1 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0 any, arg1 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
