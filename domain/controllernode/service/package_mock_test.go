// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/controllernode/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/controllernode/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// CurateNodes mocks base method.
func (m *MockState) CurateNodes(arg0 context.Context, arg1, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurateNodes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CurateNodes indicates an expected call of CurateNodes.
func (mr *MockStateMockRecorder) CurateNodes(arg0, arg1, arg2 any) *MockStateCurateNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurateNodes", reflect.TypeOf((*MockState)(nil).CurateNodes), arg0, arg1, arg2)
	return &MockStateCurateNodesCall{Call: call}
}

// MockStateCurateNodesCall wrap *gomock.Call
type MockStateCurateNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCurateNodesCall) Return(arg0 error) *MockStateCurateNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCurateNodesCall) Do(f func(context.Context, []string, []string) error) *MockStateCurateNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCurateNodesCall) DoAndReturn(f func(context.Context, []string, []string) error) *MockStateCurateNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SelectDatabaseNamespace mocks base method.
func (m *MockState) SelectDatabaseNamespace(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDatabaseNamespace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectDatabaseNamespace indicates an expected call of SelectDatabaseNamespace.
func (mr *MockStateMockRecorder) SelectDatabaseNamespace(arg0, arg1 any) *MockStateSelectDatabaseNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDatabaseNamespace", reflect.TypeOf((*MockState)(nil).SelectDatabaseNamespace), arg0, arg1)
	return &MockStateSelectDatabaseNamespaceCall{Call: call}
}

// MockStateSelectDatabaseNamespaceCall wrap *gomock.Call
type MockStateSelectDatabaseNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSelectDatabaseNamespaceCall) Return(arg0 string, arg1 error) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSelectDatabaseNamespaceCall) Do(f func(context.Context, string) (string, error)) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSelectDatabaseNamespaceCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDqliteNode mocks base method.
func (m *MockState) UpdateDqliteNode(arg0 context.Context, arg1 string, arg2 uint64, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDqliteNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDqliteNode indicates an expected call of UpdateDqliteNode.
func (mr *MockStateMockRecorder) UpdateDqliteNode(arg0, arg1, arg2, arg3 any) *MockStateUpdateDqliteNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDqliteNode", reflect.TypeOf((*MockState)(nil).UpdateDqliteNode), arg0, arg1, arg2, arg3)
	return &MockStateUpdateDqliteNodeCall{Call: call}
}

// MockStateUpdateDqliteNodeCall wrap *gomock.Call
type MockStateUpdateDqliteNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateDqliteNodeCall) Return(arg0 error) *MockStateUpdateDqliteNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateDqliteNodeCall) Do(f func(context.Context, string, uint64, string) error) *MockStateUpdateDqliteNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateDqliteNodeCall) DoAndReturn(f func(context.Context, string, uint64, string) error) *MockStateUpdateDqliteNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
