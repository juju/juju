// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/controllernode/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/controllernode/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	agentbinary "github.com/juju/juju/core/agentbinary"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	controllernode "github.com/juju/juju/domain/controllernode"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddDqliteNode mocks base method.
func (m *MockState) AddDqliteNode(arg0 context.Context, arg1 string, arg2 uint64, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDqliteNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDqliteNode indicates an expected call of AddDqliteNode.
func (mr *MockStateMockRecorder) AddDqliteNode(arg0, arg1, arg2, arg3 any) *MockStateAddDqliteNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDqliteNode", reflect.TypeOf((*MockState)(nil).AddDqliteNode), arg0, arg1, arg2, arg3)
	return &MockStateAddDqliteNodeCall{Call: call}
}

// MockStateAddDqliteNodeCall wrap *gomock.Call
type MockStateAddDqliteNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddDqliteNodeCall) Return(arg0 error) *MockStateAddDqliteNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddDqliteNodeCall) Do(f func(context.Context, string, uint64, string) error) *MockStateAddDqliteNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddDqliteNodeCall) DoAndReturn(f func(context.Context, string, uint64, string) error) *MockStateAddDqliteNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDqliteNodes mocks base method.
func (m *MockState) DeleteDqliteNodes(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDqliteNodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDqliteNodes indicates an expected call of DeleteDqliteNodes.
func (mr *MockStateMockRecorder) DeleteDqliteNodes(arg0, arg1 any) *MockStateDeleteDqliteNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDqliteNodes", reflect.TypeOf((*MockState)(nil).DeleteDqliteNodes), arg0, arg1)
	return &MockStateDeleteDqliteNodesCall{Call: call}
}

// MockStateDeleteDqliteNodesCall wrap *gomock.Call
type MockStateDeleteDqliteNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteDqliteNodesCall) Return(arg0 error) *MockStateDeleteDqliteNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteDqliteNodesCall) Do(f func(context.Context, []string) error) *MockStateDeleteDqliteNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteDqliteNodesCall) DoAndReturn(f func(context.Context, []string) error) *MockStateDeleteDqliteNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAPIAddressesForAgents mocks base method.
func (m *MockState) GetAPIAddressesForAgents(arg0 context.Context) (map[string]controllernode.APIAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIAddressesForAgents", arg0)
	ret0, _ := ret[0].(map[string]controllernode.APIAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIAddressesForAgents indicates an expected call of GetAPIAddressesForAgents.
func (mr *MockStateMockRecorder) GetAPIAddressesForAgents(arg0 any) *MockStateGetAPIAddressesForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIAddressesForAgents", reflect.TypeOf((*MockState)(nil).GetAPIAddressesForAgents), arg0)
	return &MockStateGetAPIAddressesForAgentsCall{Call: call}
}

// MockStateGetAPIAddressesForAgentsCall wrap *gomock.Call
type MockStateGetAPIAddressesForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAPIAddressesForAgentsCall) Return(arg0 map[string]controllernode.APIAddresses, arg1 error) *MockStateGetAPIAddressesForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAPIAddressesForAgentsCall) Do(f func(context.Context) (map[string]controllernode.APIAddresses, error)) *MockStateGetAPIAddressesForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAPIAddressesForAgentsCall) DoAndReturn(f func(context.Context) (map[string]controllernode.APIAddresses, error)) *MockStateGetAPIAddressesForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAPIAddressesForClients mocks base method.
func (m *MockState) GetAPIAddressesForClients(arg0 context.Context) (map[string]controllernode.APIAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIAddressesForClients", arg0)
	ret0, _ := ret[0].(map[string]controllernode.APIAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIAddressesForClients indicates an expected call of GetAPIAddressesForClients.
func (mr *MockStateMockRecorder) GetAPIAddressesForClients(arg0 any) *MockStateGetAPIAddressesForClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIAddressesForClients", reflect.TypeOf((*MockState)(nil).GetAPIAddressesForClients), arg0)
	return &MockStateGetAPIAddressesForClientsCall{Call: call}
}

// MockStateGetAPIAddressesForClientsCall wrap *gomock.Call
type MockStateGetAPIAddressesForClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAPIAddressesForClientsCall) Return(arg0 map[string]controllernode.APIAddresses, arg1 error) *MockStateGetAPIAddressesForClientsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAPIAddressesForClientsCall) Do(f func(context.Context) (map[string]controllernode.APIAddresses, error)) *MockStateGetAPIAddressesForClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAPIAddressesForClientsCall) DoAndReturn(f func(context.Context) (map[string]controllernode.APIAddresses, error)) *MockStateGetAPIAddressesForClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllCloudLocalAPIAddresses mocks base method.
func (m *MockState) GetAllCloudLocalAPIAddresses(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCloudLocalAPIAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCloudLocalAPIAddresses indicates an expected call of GetAllCloudLocalAPIAddresses.
func (mr *MockStateMockRecorder) GetAllCloudLocalAPIAddresses(arg0 any) *MockStateGetAllCloudLocalAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCloudLocalAPIAddresses", reflect.TypeOf((*MockState)(nil).GetAllCloudLocalAPIAddresses), arg0)
	return &MockStateGetAllCloudLocalAPIAddressesCall{Call: call}
}

// MockStateGetAllCloudLocalAPIAddressesCall wrap *gomock.Call
type MockStateGetAllCloudLocalAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllCloudLocalAPIAddressesCall) Return(arg0 []string, arg1 error) *MockStateGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllCloudLocalAPIAddressesCall) Do(f func(context.Context) ([]string, error)) *MockStateGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllCloudLocalAPIAddressesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockStateGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerIDs mocks base method.
func (m *MockState) GetControllerIDs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerIDs indicates an expected call of GetControllerIDs.
func (mr *MockStateMockRecorder) GetControllerIDs(arg0 any) *MockStateGetControllerIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerIDs", reflect.TypeOf((*MockState)(nil).GetControllerIDs), arg0)
	return &MockStateGetControllerIDsCall{Call: call}
}

// MockStateGetControllerIDsCall wrap *gomock.Call
type MockStateGetControllerIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerIDsCall) Return(arg0 []string, arg1 error) *MockStateGetControllerIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerIDsCall) Do(f func(context.Context) ([]string, error)) *MockStateGetControllerIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerIDsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockStateGetControllerIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchControllerAPIAddresses mocks base method.
func (m *MockState) NamespaceForWatchControllerAPIAddresses() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchControllerAPIAddresses")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchControllerAPIAddresses indicates an expected call of NamespaceForWatchControllerAPIAddresses.
func (mr *MockStateMockRecorder) NamespaceForWatchControllerAPIAddresses() *MockStateNamespaceForWatchControllerAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchControllerAPIAddresses", reflect.TypeOf((*MockState)(nil).NamespaceForWatchControllerAPIAddresses))
	return &MockStateNamespaceForWatchControllerAPIAddressesCall{Call: call}
}

// MockStateNamespaceForWatchControllerAPIAddressesCall wrap *gomock.Call
type MockStateNamespaceForWatchControllerAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchControllerAPIAddressesCall) Return(arg0 string) *MockStateNamespaceForWatchControllerAPIAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchControllerAPIAddressesCall) Do(f func() string) *MockStateNamespaceForWatchControllerAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchControllerAPIAddressesCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchControllerAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchControllerNodes mocks base method.
func (m *MockState) NamespaceForWatchControllerNodes() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchControllerNodes")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchControllerNodes indicates an expected call of NamespaceForWatchControllerNodes.
func (mr *MockStateMockRecorder) NamespaceForWatchControllerNodes() *MockStateNamespaceForWatchControllerNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchControllerNodes", reflect.TypeOf((*MockState)(nil).NamespaceForWatchControllerNodes))
	return &MockStateNamespaceForWatchControllerNodesCall{Call: call}
}

// MockStateNamespaceForWatchControllerNodesCall wrap *gomock.Call
type MockStateNamespaceForWatchControllerNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchControllerNodesCall) Return(arg0 string) *MockStateNamespaceForWatchControllerNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchControllerNodesCall) Do(f func() string) *MockStateNamespaceForWatchControllerNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchControllerNodesCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchControllerNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SelectDatabaseNamespace mocks base method.
func (m *MockState) SelectDatabaseNamespace(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDatabaseNamespace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectDatabaseNamespace indicates an expected call of SelectDatabaseNamespace.
func (mr *MockStateMockRecorder) SelectDatabaseNamespace(arg0, arg1 any) *MockStateSelectDatabaseNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDatabaseNamespace", reflect.TypeOf((*MockState)(nil).SelectDatabaseNamespace), arg0, arg1)
	return &MockStateSelectDatabaseNamespaceCall{Call: call}
}

// MockStateSelectDatabaseNamespaceCall wrap *gomock.Call
type MockStateSelectDatabaseNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSelectDatabaseNamespaceCall) Return(arg0 string, arg1 error) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSelectDatabaseNamespaceCall) Do(f func(context.Context, string) (string, error)) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSelectDatabaseNamespaceCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateSelectDatabaseNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAPIAddresses mocks base method.
func (m *MockState) SetAPIAddresses(arg0 context.Context, arg1 map[string]controllernode.APIAddresses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPIAddresses indicates an expected call of SetAPIAddresses.
func (mr *MockStateMockRecorder) SetAPIAddresses(arg0, arg1 any) *MockStateSetAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIAddresses", reflect.TypeOf((*MockState)(nil).SetAPIAddresses), arg0, arg1)
	return &MockStateSetAPIAddressesCall{Call: call}
}

// MockStateSetAPIAddressesCall wrap *gomock.Call
type MockStateSetAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetAPIAddressesCall) Return(arg0 error) *MockStateSetAPIAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetAPIAddressesCall) Do(f func(context.Context, map[string]controllernode.APIAddresses) error) *MockStateSetAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetAPIAddressesCall) DoAndReturn(f func(context.Context, map[string]controllernode.APIAddresses) error) *MockStateSetAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRunningAgentBinaryVersion mocks base method.
func (m *MockState) SetRunningAgentBinaryVersion(arg0 context.Context, arg1 string, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRunningAgentBinaryVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRunningAgentBinaryVersion indicates an expected call of SetRunningAgentBinaryVersion.
func (mr *MockStateMockRecorder) SetRunningAgentBinaryVersion(arg0, arg1, arg2 any) *MockStateSetRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunningAgentBinaryVersion", reflect.TypeOf((*MockState)(nil).SetRunningAgentBinaryVersion), arg0, arg1, arg2)
	return &MockStateSetRunningAgentBinaryVersionCall{Call: call}
}

// MockStateSetRunningAgentBinaryVersionCall wrap *gomock.Call
type MockStateSetRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRunningAgentBinaryVersionCall) Return(arg0 error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRunningAgentBinaryVersionCall) Do(f func(context.Context, string, agentbinary.Version) error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, string, agentbinary.Version) error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 context.Context, arg1 eventsource.FilterOption, arg2 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0, arg1 any, arg2 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(context.Context, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(context.Context, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
