// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go -source=./service.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	agentbinary "github.com/juju/juju/core/agentbinary"
	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/core/machine"
	status "github.com/juju/juju/core/status"
	life "github.com/juju/juju/domain/life"
	statushistory "github.com/juju/juju/internal/statushistory"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AllMachineNames mocks base method.
func (m *MockState) AllMachineNames(arg0 context.Context) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachineNames", arg0)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachineNames indicates an expected call of AllMachineNames.
func (mr *MockStateMockRecorder) AllMachineNames(arg0 any) *MockStateAllMachineNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachineNames", reflect.TypeOf((*MockState)(nil).AllMachineNames), arg0)
	return &MockStateAllMachineNamesCall{Call: call}
}

// MockStateAllMachineNamesCall wrap *gomock.Call
type MockStateAllMachineNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllMachineNamesCall) Return(arg0 []machine.Name, arg1 error) *MockStateAllMachineNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllMachineNamesCall) Do(f func(context.Context) ([]machine.Name, error)) *MockStateAllMachineNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllMachineNamesCall) DoAndReturn(f func(context.Context) ([]machine.Name, error)) *MockStateAllMachineNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AppliedLXDProfileNames mocks base method.
func (m *MockState) AppliedLXDProfileNames(ctx context.Context, mUUID machine.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppliedLXDProfileNames", ctx, mUUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppliedLXDProfileNames indicates an expected call of AppliedLXDProfileNames.
func (mr *MockStateMockRecorder) AppliedLXDProfileNames(ctx, mUUID any) *MockStateAppliedLXDProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppliedLXDProfileNames", reflect.TypeOf((*MockState)(nil).AppliedLXDProfileNames), ctx, mUUID)
	return &MockStateAppliedLXDProfileNamesCall{Call: call}
}

// MockStateAppliedLXDProfileNamesCall wrap *gomock.Call
type MockStateAppliedLXDProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAppliedLXDProfileNamesCall) Return(arg0 []string, arg1 error) *MockStateAppliedLXDProfileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAppliedLXDProfileNamesCall) Do(f func(context.Context, machine.UUID) ([]string, error)) *MockStateAppliedLXDProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAppliedLXDProfileNamesCall) DoAndReturn(f func(context.Context, machine.UUID) ([]string, error)) *MockStateAppliedLXDProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AvailabilityZone mocks base method.
func (m *MockState) AvailabilityZone(arg0 context.Context, arg1 machine.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZone", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZone indicates an expected call of AvailabilityZone.
func (mr *MockStateMockRecorder) AvailabilityZone(arg0, arg1 any) *MockStateAvailabilityZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZone", reflect.TypeOf((*MockState)(nil).AvailabilityZone), arg0, arg1)
	return &MockStateAvailabilityZoneCall{Call: call}
}

// MockStateAvailabilityZoneCall wrap *gomock.Call
type MockStateAvailabilityZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAvailabilityZoneCall) Return(arg0 string, arg1 error) *MockStateAvailabilityZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAvailabilityZoneCall) Do(f func(context.Context, machine.UUID) (string, error)) *MockStateAvailabilityZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAvailabilityZoneCall) DoAndReturn(f func(context.Context, machine.UUID) (string, error)) *MockStateAvailabilityZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClearMachineReboot mocks base method.
func (m *MockState) ClearMachineReboot(ctx context.Context, uuid machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMachineReboot", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMachineReboot indicates an expected call of ClearMachineReboot.
func (mr *MockStateMockRecorder) ClearMachineReboot(ctx, uuid any) *MockStateClearMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMachineReboot", reflect.TypeOf((*MockState)(nil).ClearMachineReboot), ctx, uuid)
	return &MockStateClearMachineRebootCall{Call: call}
}

// MockStateClearMachineRebootCall wrap *gomock.Call
type MockStateClearMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateClearMachineRebootCall) Return(arg0 error) *MockStateClearMachineRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateClearMachineRebootCall) Do(f func(context.Context, machine.UUID) error) *MockStateClearMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateClearMachineRebootCall) DoAndReturn(f func(context.Context, machine.UUID) error) *MockStateClearMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateMachine mocks base method.
func (m *MockState) CreateMachine(arg0 context.Context, arg1 machine.Name, arg2 string, arg3 machine.UUID, arg4 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachine", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMachine indicates an expected call of CreateMachine.
func (mr *MockStateMockRecorder) CreateMachine(arg0, arg1, arg2, arg3, arg4 any) *MockStateCreateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachine", reflect.TypeOf((*MockState)(nil).CreateMachine), arg0, arg1, arg2, arg3, arg4)
	return &MockStateCreateMachineCall{Call: call}
}

// MockStateCreateMachineCall wrap *gomock.Call
type MockStateCreateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateMachineCall) Return(arg0 error) *MockStateCreateMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateMachineCall) Do(f func(context.Context, machine.Name, string, machine.UUID, *string) error) *MockStateCreateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateMachineCall) DoAndReturn(f func(context.Context, machine.Name, string, machine.UUID, *string) error) *MockStateCreateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateMachineWithParent mocks base method.
func (m *MockState) CreateMachineWithParent(arg0 context.Context, arg1, arg2 machine.Name, arg3 string, arg4 machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachineWithParent", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMachineWithParent indicates an expected call of CreateMachineWithParent.
func (mr *MockStateMockRecorder) CreateMachineWithParent(arg0, arg1, arg2, arg3, arg4 any) *MockStateCreateMachineWithParentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineWithParent", reflect.TypeOf((*MockState)(nil).CreateMachineWithParent), arg0, arg1, arg2, arg3, arg4)
	return &MockStateCreateMachineWithParentCall{Call: call}
}

// MockStateCreateMachineWithParentCall wrap *gomock.Call
type MockStateCreateMachineWithParentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateMachineWithParentCall) Return(arg0 error) *MockStateCreateMachineWithParentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateMachineWithParentCall) Do(f func(context.Context, machine.Name, machine.Name, string, machine.UUID) error) *MockStateCreateMachineWithParentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateMachineWithParentCall) DoAndReturn(f func(context.Context, machine.Name, machine.Name, string, machine.UUID) error) *MockStateCreateMachineWithParentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteMachine mocks base method.
func (m *MockState) DeleteMachine(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachine indicates an expected call of DeleteMachine.
func (mr *MockStateMockRecorder) DeleteMachine(arg0, arg1 any) *MockStateDeleteMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockState)(nil).DeleteMachine), arg0, arg1)
	return &MockStateDeleteMachineCall{Call: call}
}

// MockStateDeleteMachineCall wrap *gomock.Call
type MockStateDeleteMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteMachineCall) Return(arg0 error) *MockStateDeleteMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteMachineCall) Do(f func(context.Context, machine.Name) error) *MockStateDeleteMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteMachineCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockStateDeleteMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteMachineCloudInstance mocks base method.
func (m *MockState) DeleteMachineCloudInstance(arg0 context.Context, arg1 machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachineCloudInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachineCloudInstance indicates an expected call of DeleteMachineCloudInstance.
func (mr *MockStateMockRecorder) DeleteMachineCloudInstance(arg0, arg1 any) *MockStateDeleteMachineCloudInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineCloudInstance", reflect.TypeOf((*MockState)(nil).DeleteMachineCloudInstance), arg0, arg1)
	return &MockStateDeleteMachineCloudInstanceCall{Call: call}
}

// MockStateDeleteMachineCloudInstanceCall wrap *gomock.Call
type MockStateDeleteMachineCloudInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteMachineCloudInstanceCall) Return(arg0 error) *MockStateDeleteMachineCloudInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteMachineCloudInstanceCall) Do(f func(context.Context, machine.UUID) error) *MockStateDeleteMachineCloudInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteMachineCloudInstanceCall) DoAndReturn(f func(context.Context, machine.UUID) error) *MockStateDeleteMachineCloudInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllMachineRemovals mocks base method.
func (m *MockState) GetAllMachineRemovals(arg0 context.Context) ([]machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMachineRemovals", arg0)
	ret0, _ := ret[0].([]machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMachineRemovals indicates an expected call of GetAllMachineRemovals.
func (mr *MockStateMockRecorder) GetAllMachineRemovals(arg0 any) *MockStateGetAllMachineRemovalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMachineRemovals", reflect.TypeOf((*MockState)(nil).GetAllMachineRemovals), arg0)
	return &MockStateGetAllMachineRemovalsCall{Call: call}
}

// MockStateGetAllMachineRemovalsCall wrap *gomock.Call
type MockStateGetAllMachineRemovalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllMachineRemovalsCall) Return(arg0 []machine.UUID, arg1 error) *MockStateGetAllMachineRemovalsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllMachineRemovalsCall) Do(f func(context.Context) ([]machine.UUID, error)) *MockStateGetAllMachineRemovalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllMachineRemovalsCall) DoAndReturn(f func(context.Context) ([]machine.UUID, error)) *MockStateGetAllMachineRemovalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllProvisionedMachineInstanceID mocks base method.
func (m *MockState) GetAllProvisionedMachineInstanceID(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProvisionedMachineInstanceID", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProvisionedMachineInstanceID indicates an expected call of GetAllProvisionedMachineInstanceID.
func (mr *MockStateMockRecorder) GetAllProvisionedMachineInstanceID(ctx any) *MockStateGetAllProvisionedMachineInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProvisionedMachineInstanceID", reflect.TypeOf((*MockState)(nil).GetAllProvisionedMachineInstanceID), ctx)
	return &MockStateGetAllProvisionedMachineInstanceIDCall{Call: call}
}

// MockStateGetAllProvisionedMachineInstanceIDCall wrap *gomock.Call
type MockStateGetAllProvisionedMachineInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllProvisionedMachineInstanceIDCall) Return(arg0 map[string]string, arg1 error) *MockStateGetAllProvisionedMachineInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllProvisionedMachineInstanceIDCall) Do(f func(context.Context) (map[string]string, error)) *MockStateGetAllProvisionedMachineInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllProvisionedMachineInstanceIDCall) DoAndReturn(f func(context.Context) (map[string]string, error)) *MockStateGetAllProvisionedMachineInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHardwareCharacteristics mocks base method.
func (m *MockState) GetHardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (*instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(*instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockStateMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockStateGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockState)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockStateGetHardwareCharacteristicsCall{Call: call}
}

// MockStateGetHardwareCharacteristicsCall wrap *gomock.Call
type MockStateGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetHardwareCharacteristicsCall) Return(arg0 *instance.HardwareCharacteristics, arg1 error) *MockStateGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockStateGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockStateGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceID mocks base method.
func (m *MockState) GetInstanceID(arg0 context.Context, arg1 machine.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceID indicates an expected call of GetInstanceID.
func (mr *MockStateMockRecorder) GetInstanceID(arg0, arg1 any) *MockStateGetInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockState)(nil).GetInstanceID), arg0, arg1)
	return &MockStateGetInstanceIDCall{Call: call}
}

// MockStateGetInstanceIDCall wrap *gomock.Call
type MockStateGetInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetInstanceIDCall) Return(arg0 string, arg1 error) *MockStateGetInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetInstanceIDCall) Do(f func(context.Context, machine.UUID) (string, error)) *MockStateGetInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetInstanceIDCall) DoAndReturn(f func(context.Context, machine.UUID) (string, error)) *MockStateGetInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceIDAndName mocks base method.
func (m *MockState) GetInstanceIDAndName(ctx context.Context, mUUID machine.UUID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIDAndName", ctx, mUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceIDAndName indicates an expected call of GetInstanceIDAndName.
func (mr *MockStateMockRecorder) GetInstanceIDAndName(ctx, mUUID any) *MockStateGetInstanceIDAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIDAndName", reflect.TypeOf((*MockState)(nil).GetInstanceIDAndName), ctx, mUUID)
	return &MockStateGetInstanceIDAndNameCall{Call: call}
}

// MockStateGetInstanceIDAndNameCall wrap *gomock.Call
type MockStateGetInstanceIDAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetInstanceIDAndNameCall) Return(arg0, arg1 string, arg2 error) *MockStateGetInstanceIDAndNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetInstanceIDAndNameCall) Do(f func(context.Context, machine.UUID) (string, string, error)) *MockStateGetInstanceIDAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetInstanceIDAndNameCall) DoAndReturn(f func(context.Context, machine.UUID) (string, string, error)) *MockStateGetInstanceIDAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineLife mocks base method.
func (m *MockState) GetMachineLife(arg0 context.Context, arg1 machine.Name) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLife indicates an expected call of GetMachineLife.
func (mr *MockStateMockRecorder) GetMachineLife(arg0, arg1 any) *MockStateGetMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLife", reflect.TypeOf((*MockState)(nil).GetMachineLife), arg0, arg1)
	return &MockStateGetMachineLifeCall{Call: call}
}

// MockStateGetMachineLifeCall wrap *gomock.Call
type MockStateGetMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetMachineLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineLifeCall) Do(f func(context.Context, machine.Name) (life.Life, error)) *MockStateGetMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineLifeCall) DoAndReturn(f func(context.Context, machine.Name) (life.Life, error)) *MockStateGetMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineParentUUID mocks base method.
func (m *MockState) GetMachineParentUUID(ctx context.Context, machineUUID machine.UUID) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineParentUUID", ctx, machineUUID)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineParentUUID indicates an expected call of GetMachineParentUUID.
func (mr *MockStateMockRecorder) GetMachineParentUUID(ctx, machineUUID any) *MockStateGetMachineParentUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineParentUUID", reflect.TypeOf((*MockState)(nil).GetMachineParentUUID), ctx, machineUUID)
	return &MockStateGetMachineParentUUIDCall{Call: call}
}

// MockStateGetMachineParentUUIDCall wrap *gomock.Call
type MockStateGetMachineParentUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineParentUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockStateGetMachineParentUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineParentUUIDCall) Do(f func(context.Context, machine.UUID) (machine.UUID, error)) *MockStateGetMachineParentUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineParentUUIDCall) DoAndReturn(f func(context.Context, machine.UUID) (machine.UUID, error)) *MockStateGetMachineParentUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachinePrincipalApplications mocks base method.
func (m *MockState) GetMachinePrincipalApplications(ctx context.Context, mName machine.Name) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachinePrincipalApplications", ctx, mName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachinePrincipalApplications indicates an expected call of GetMachinePrincipalApplications.
func (mr *MockStateMockRecorder) GetMachinePrincipalApplications(ctx, mName any) *MockStateGetMachinePrincipalApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachinePrincipalApplications", reflect.TypeOf((*MockState)(nil).GetMachinePrincipalApplications), ctx, mName)
	return &MockStateGetMachinePrincipalApplicationsCall{Call: call}
}

// MockStateGetMachinePrincipalApplicationsCall wrap *gomock.Call
type MockStateGetMachinePrincipalApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachinePrincipalApplicationsCall) Return(arg0 []string, arg1 error) *MockStateGetMachinePrincipalApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachinePrincipalApplicationsCall) Do(f func(context.Context, machine.Name) ([]string, error)) *MockStateGetMachinePrincipalApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachinePrincipalApplicationsCall) DoAndReturn(f func(context.Context, machine.Name) ([]string, error)) *MockStateGetMachinePrincipalApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockState) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockStateMockRecorder) GetMachineUUID(arg0, arg1 any) *MockStateGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockState)(nil).GetMachineUUID), arg0, arg1)
	return &MockStateGetMachineUUIDCall{Call: call}
}

// MockStateGetMachineUUIDCall wrap *gomock.Call
type MockStateGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNamesForUUIDs mocks base method.
func (m *MockState) GetNamesForUUIDs(ctx context.Context, machineUUIDs []string) (map[string]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamesForUUIDs", ctx, machineUUIDs)
	ret0, _ := ret[0].(map[string]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamesForUUIDs indicates an expected call of GetNamesForUUIDs.
func (mr *MockStateMockRecorder) GetNamesForUUIDs(ctx, machineUUIDs any) *MockStateGetNamesForUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamesForUUIDs", reflect.TypeOf((*MockState)(nil).GetNamesForUUIDs), ctx, machineUUIDs)
	return &MockStateGetNamesForUUIDsCall{Call: call}
}

// MockStateGetNamesForUUIDsCall wrap *gomock.Call
type MockStateGetNamesForUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetNamesForUUIDsCall) Return(arg0 map[string]machine.Name, arg1 error) *MockStateGetNamesForUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetNamesForUUIDsCall) Do(f func(context.Context, []string) (map[string]machine.Name, error)) *MockStateGetNamesForUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetNamesForUUIDsCall) DoAndReturn(f func(context.Context, []string) (map[string]machine.Name, error)) *MockStateGetNamesForUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSupportedContainersTypes mocks base method.
func (m *MockState) GetSupportedContainersTypes(ctx context.Context, mUUID machine.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedContainersTypes", ctx, mUUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedContainersTypes indicates an expected call of GetSupportedContainersTypes.
func (mr *MockStateMockRecorder) GetSupportedContainersTypes(ctx, mUUID any) *MockStateGetSupportedContainersTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedContainersTypes", reflect.TypeOf((*MockState)(nil).GetSupportedContainersTypes), ctx, mUUID)
	return &MockStateGetSupportedContainersTypesCall{Call: call}
}

// MockStateGetSupportedContainersTypesCall wrap *gomock.Call
type MockStateGetSupportedContainersTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSupportedContainersTypesCall) Return(arg0 []string, arg1 error) *MockStateGetSupportedContainersTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSupportedContainersTypesCall) Do(f func(context.Context, machine.UUID) ([]string, error)) *MockStateGetSupportedContainersTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSupportedContainersTypesCall) DoAndReturn(f func(context.Context, machine.UUID) ([]string, error)) *MockStateGetSupportedContainersTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchModelMachinesStatement mocks base method.
func (m *MockState) InitialWatchModelMachinesStatement() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchModelMachinesStatement")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// InitialWatchModelMachinesStatement indicates an expected call of InitialWatchModelMachinesStatement.
func (mr *MockStateMockRecorder) InitialWatchModelMachinesStatement() *MockStateInitialWatchModelMachinesStatementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchModelMachinesStatement", reflect.TypeOf((*MockState)(nil).InitialWatchModelMachinesStatement))
	return &MockStateInitialWatchModelMachinesStatementCall{Call: call}
}

// MockStateInitialWatchModelMachinesStatementCall wrap *gomock.Call
type MockStateInitialWatchModelMachinesStatementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchModelMachinesStatementCall) Return(arg0, arg1 string) *MockStateInitialWatchModelMachinesStatementCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchModelMachinesStatementCall) Do(f func() (string, string)) *MockStateInitialWatchModelMachinesStatementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchModelMachinesStatementCall) DoAndReturn(f func() (string, string)) *MockStateInitialWatchModelMachinesStatementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatement mocks base method.
func (m *MockState) InitialWatchStatement() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatement")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// InitialWatchStatement indicates an expected call of InitialWatchStatement.
func (mr *MockStateMockRecorder) InitialWatchStatement() *MockStateInitialWatchStatementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatement", reflect.TypeOf((*MockState)(nil).InitialWatchStatement))
	return &MockStateInitialWatchStatementCall{Call: call}
}

// MockStateInitialWatchStatementCall wrap *gomock.Call
type MockStateInitialWatchStatementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementCall) Return(arg0, arg1 string) *MockStateInitialWatchStatementCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementCall) Do(f func() (string, string)) *MockStateInitialWatchStatementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementCall) DoAndReturn(f func() (string, string)) *MockStateInitialWatchStatementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineController mocks base method.
func (m *MockState) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockStateMockRecorder) IsMachineController(arg0, arg1 any) *MockStateIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockState)(nil).IsMachineController), arg0, arg1)
	return &MockStateIsMachineControllerCall{Call: call}
}

// MockStateIsMachineControllerCall wrap *gomock.Call
type MockStateIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockStateIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockStateIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockStateIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineManuallyProvisioned mocks base method.
func (m *MockState) IsMachineManuallyProvisioned(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineManuallyProvisioned", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineManuallyProvisioned indicates an expected call of IsMachineManuallyProvisioned.
func (mr *MockStateMockRecorder) IsMachineManuallyProvisioned(arg0, arg1 any) *MockStateIsMachineManuallyProvisionedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineManuallyProvisioned", reflect.TypeOf((*MockState)(nil).IsMachineManuallyProvisioned), arg0, arg1)
	return &MockStateIsMachineManuallyProvisionedCall{Call: call}
}

// MockStateIsMachineManuallyProvisionedCall wrap *gomock.Call
type MockStateIsMachineManuallyProvisionedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsMachineManuallyProvisionedCall) Return(arg0 bool, arg1 error) *MockStateIsMachineManuallyProvisionedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsMachineManuallyProvisionedCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockStateIsMachineManuallyProvisionedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsMachineManuallyProvisionedCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockStateIsMachineManuallyProvisionedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineRebootRequired mocks base method.
func (m *MockState) IsMachineRebootRequired(ctx context.Context, uuid machine.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineRebootRequired", ctx, uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineRebootRequired indicates an expected call of IsMachineRebootRequired.
func (mr *MockStateMockRecorder) IsMachineRebootRequired(ctx, uuid any) *MockStateIsMachineRebootRequiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineRebootRequired", reflect.TypeOf((*MockState)(nil).IsMachineRebootRequired), ctx, uuid)
	return &MockStateIsMachineRebootRequiredCall{Call: call}
}

// MockStateIsMachineRebootRequiredCall wrap *gomock.Call
type MockStateIsMachineRebootRequiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsMachineRebootRequiredCall) Return(arg0 bool, arg1 error) *MockStateIsMachineRebootRequiredCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsMachineRebootRequiredCall) Do(f func(context.Context, machine.UUID) (bool, error)) *MockStateIsMachineRebootRequiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsMachineRebootRequiredCall) DoAndReturn(f func(context.Context, machine.UUID) (bool, error)) *MockStateIsMachineRebootRequiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkMachineForRemoval mocks base method.
func (m *MockState) MarkMachineForRemoval(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMachineForRemoval", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMachineForRemoval indicates an expected call of MarkMachineForRemoval.
func (mr *MockStateMockRecorder) MarkMachineForRemoval(arg0, arg1 any) *MockStateMarkMachineForRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMachineForRemoval", reflect.TypeOf((*MockState)(nil).MarkMachineForRemoval), arg0, arg1)
	return &MockStateMarkMachineForRemovalCall{Call: call}
}

// MockStateMarkMachineForRemovalCall wrap *gomock.Call
type MockStateMarkMachineForRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMarkMachineForRemovalCall) Return(arg0 error) *MockStateMarkMachineForRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMarkMachineForRemovalCall) Do(f func(context.Context, machine.Name) error) *MockStateMarkMachineForRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMarkMachineForRemovalCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockStateMarkMachineForRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchMachineCloudInstance mocks base method.
func (m *MockState) NamespaceForWatchMachineCloudInstance() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchMachineCloudInstance")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchMachineCloudInstance indicates an expected call of NamespaceForWatchMachineCloudInstance.
func (mr *MockStateMockRecorder) NamespaceForWatchMachineCloudInstance() *MockStateNamespaceForWatchMachineCloudInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchMachineCloudInstance", reflect.TypeOf((*MockState)(nil).NamespaceForWatchMachineCloudInstance))
	return &MockStateNamespaceForWatchMachineCloudInstanceCall{Call: call}
}

// MockStateNamespaceForWatchMachineCloudInstanceCall wrap *gomock.Call
type MockStateNamespaceForWatchMachineCloudInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) Return(arg0 string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) Do(f func() string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchMachineCloudInstanceCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchMachineCloudInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchMachineLXDProfiles mocks base method.
func (m *MockState) NamespaceForWatchMachineLXDProfiles() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchMachineLXDProfiles")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchMachineLXDProfiles indicates an expected call of NamespaceForWatchMachineLXDProfiles.
func (mr *MockStateMockRecorder) NamespaceForWatchMachineLXDProfiles() *MockStateNamespaceForWatchMachineLXDProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchMachineLXDProfiles", reflect.TypeOf((*MockState)(nil).NamespaceForWatchMachineLXDProfiles))
	return &MockStateNamespaceForWatchMachineLXDProfilesCall{Call: call}
}

// MockStateNamespaceForWatchMachineLXDProfilesCall wrap *gomock.Call
type MockStateNamespaceForWatchMachineLXDProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchMachineLXDProfilesCall) Return(arg0 string) *MockStateNamespaceForWatchMachineLXDProfilesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchMachineLXDProfilesCall) Do(f func() string) *MockStateNamespaceForWatchMachineLXDProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchMachineLXDProfilesCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchMachineLXDProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchMachineReboot mocks base method.
func (m *MockState) NamespaceForWatchMachineReboot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchMachineReboot")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchMachineReboot indicates an expected call of NamespaceForWatchMachineReboot.
func (mr *MockStateMockRecorder) NamespaceForWatchMachineReboot() *MockStateNamespaceForWatchMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchMachineReboot", reflect.TypeOf((*MockState)(nil).NamespaceForWatchMachineReboot))
	return &MockStateNamespaceForWatchMachineRebootCall{Call: call}
}

// MockStateNamespaceForWatchMachineRebootCall wrap *gomock.Call
type MockStateNamespaceForWatchMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchMachineRebootCall) Return(arg0 string) *MockStateNamespaceForWatchMachineRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchMachineRebootCall) Do(f func() string) *MockStateNamespaceForWatchMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchMachineRebootCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequireMachineReboot mocks base method.
func (m *MockState) RequireMachineReboot(ctx context.Context, uuid machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireMachineReboot", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequireMachineReboot indicates an expected call of RequireMachineReboot.
func (mr *MockStateMockRecorder) RequireMachineReboot(ctx, uuid any) *MockStateRequireMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireMachineReboot", reflect.TypeOf((*MockState)(nil).RequireMachineReboot), ctx, uuid)
	return &MockStateRequireMachineRebootCall{Call: call}
}

// MockStateRequireMachineRebootCall wrap *gomock.Call
type MockStateRequireMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRequireMachineRebootCall) Return(arg0 error) *MockStateRequireMachineRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRequireMachineRebootCall) Do(f func(context.Context, machine.UUID) error) *MockStateRequireMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRequireMachineRebootCall) DoAndReturn(f func(context.Context, machine.UUID) error) *MockStateRequireMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAppliedLXDProfileNames mocks base method.
func (m *MockState) SetAppliedLXDProfileNames(ctx context.Context, mUUID machine.UUID, profileNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppliedLXDProfileNames", ctx, mUUID, profileNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppliedLXDProfileNames indicates an expected call of SetAppliedLXDProfileNames.
func (mr *MockStateMockRecorder) SetAppliedLXDProfileNames(ctx, mUUID, profileNames any) *MockStateSetAppliedLXDProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppliedLXDProfileNames", reflect.TypeOf((*MockState)(nil).SetAppliedLXDProfileNames), ctx, mUUID, profileNames)
	return &MockStateSetAppliedLXDProfileNamesCall{Call: call}
}

// MockStateSetAppliedLXDProfileNamesCall wrap *gomock.Call
type MockStateSetAppliedLXDProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetAppliedLXDProfileNamesCall) Return(arg0 error) *MockStateSetAppliedLXDProfileNamesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetAppliedLXDProfileNamesCall) Do(f func(context.Context, machine.UUID, []string) error) *MockStateSetAppliedLXDProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetAppliedLXDProfileNamesCall) DoAndReturn(f func(context.Context, machine.UUID, []string) error) *MockStateSetAppliedLXDProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetKeepInstance mocks base method.
func (m *MockState) SetKeepInstance(ctx context.Context, mName machine.Name, keep bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepInstance", ctx, mName, keep)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepInstance indicates an expected call of SetKeepInstance.
func (mr *MockStateMockRecorder) SetKeepInstance(ctx, mName, keep any) *MockStateSetKeepInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepInstance", reflect.TypeOf((*MockState)(nil).SetKeepInstance), ctx, mName, keep)
	return &MockStateSetKeepInstanceCall{Call: call}
}

// MockStateSetKeepInstanceCall wrap *gomock.Call
type MockStateSetKeepInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetKeepInstanceCall) Return(arg0 error) *MockStateSetKeepInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetKeepInstanceCall) Do(f func(context.Context, machine.Name, bool) error) *MockStateSetKeepInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetKeepInstanceCall) DoAndReturn(f func(context.Context, machine.Name, bool) error) *MockStateSetKeepInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineCloudInstance mocks base method.
func (m *MockState) SetMachineCloudInstance(arg0 context.Context, arg1 machine.UUID, arg2 instance.Id, arg3, arg4 string, arg5 *instance.HardwareCharacteristics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineCloudInstance", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineCloudInstance indicates an expected call of SetMachineCloudInstance.
func (mr *MockStateMockRecorder) SetMachineCloudInstance(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockStateSetMachineCloudInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineCloudInstance", reflect.TypeOf((*MockState)(nil).SetMachineCloudInstance), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockStateSetMachineCloudInstanceCall{Call: call}
}

// MockStateSetMachineCloudInstanceCall wrap *gomock.Call
type MockStateSetMachineCloudInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetMachineCloudInstanceCall) Return(arg0 error) *MockStateSetMachineCloudInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetMachineCloudInstanceCall) Do(f func(context.Context, machine.UUID, instance.Id, string, string, *instance.HardwareCharacteristics) error) *MockStateSetMachineCloudInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetMachineCloudInstanceCall) DoAndReturn(f func(context.Context, machine.UUID, instance.Id, string, string, *instance.HardwareCharacteristics) error) *MockStateSetMachineCloudInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineHostname mocks base method.
func (m *MockState) SetMachineHostname(ctx context.Context, mUUID machine.UUID, hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineHostname", ctx, mUUID, hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineHostname indicates an expected call of SetMachineHostname.
func (mr *MockStateMockRecorder) SetMachineHostname(ctx, mUUID, hostname any) *MockStateSetMachineHostnameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineHostname", reflect.TypeOf((*MockState)(nil).SetMachineHostname), ctx, mUUID, hostname)
	return &MockStateSetMachineHostnameCall{Call: call}
}

// MockStateSetMachineHostnameCall wrap *gomock.Call
type MockStateSetMachineHostnameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetMachineHostnameCall) Return(arg0 error) *MockStateSetMachineHostnameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetMachineHostnameCall) Do(f func(context.Context, machine.UUID, string) error) *MockStateSetMachineHostnameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetMachineHostnameCall) DoAndReturn(f func(context.Context, machine.UUID, string) error) *MockStateSetMachineHostnameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineLife mocks base method.
func (m *MockState) SetMachineLife(arg0 context.Context, arg1 machine.Name, arg2 life.Life) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineLife", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineLife indicates an expected call of SetMachineLife.
func (mr *MockStateMockRecorder) SetMachineLife(arg0, arg1, arg2 any) *MockStateSetMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineLife", reflect.TypeOf((*MockState)(nil).SetMachineLife), arg0, arg1, arg2)
	return &MockStateSetMachineLifeCall{Call: call}
}

// MockStateSetMachineLifeCall wrap *gomock.Call
type MockStateSetMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetMachineLifeCall) Return(arg0 error) *MockStateSetMachineLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetMachineLifeCall) Do(f func(context.Context, machine.Name, life.Life) error) *MockStateSetMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetMachineLifeCall) DoAndReturn(f func(context.Context, machine.Name, life.Life) error) *MockStateSetMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRunningAgentBinaryVersion mocks base method.
func (m *MockState) SetRunningAgentBinaryVersion(arg0 context.Context, arg1 machine.UUID, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRunningAgentBinaryVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRunningAgentBinaryVersion indicates an expected call of SetRunningAgentBinaryVersion.
func (mr *MockStateMockRecorder) SetRunningAgentBinaryVersion(arg0, arg1, arg2 any) *MockStateSetRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunningAgentBinaryVersion", reflect.TypeOf((*MockState)(nil).SetRunningAgentBinaryVersion), arg0, arg1, arg2)
	return &MockStateSetRunningAgentBinaryVersionCall{Call: call}
}

// MockStateSetRunningAgentBinaryVersionCall wrap *gomock.Call
type MockStateSetRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRunningAgentBinaryVersionCall) Return(arg0 error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRunningAgentBinaryVersionCall) Do(f func(context.Context, machine.UUID, agentbinary.Version) error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, machine.UUID, agentbinary.Version) error) *MockStateSetRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldKeepInstance mocks base method.
func (m *MockState) ShouldKeepInstance(ctx context.Context, mName machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldKeepInstance", ctx, mName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldKeepInstance indicates an expected call of ShouldKeepInstance.
func (mr *MockStateMockRecorder) ShouldKeepInstance(ctx, mName any) *MockStateShouldKeepInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldKeepInstance", reflect.TypeOf((*MockState)(nil).ShouldKeepInstance), ctx, mName)
	return &MockStateShouldKeepInstanceCall{Call: call}
}

// MockStateShouldKeepInstanceCall wrap *gomock.Call
type MockStateShouldKeepInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateShouldKeepInstanceCall) Return(arg0 bool, arg1 error) *MockStateShouldKeepInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateShouldKeepInstanceCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockStateShouldKeepInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateShouldKeepInstanceCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockStateShouldKeepInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldRebootOrShutdown mocks base method.
func (m *MockState) ShouldRebootOrShutdown(ctx context.Context, uuid machine.UUID) (machine.RebootAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRebootOrShutdown", ctx, uuid)
	ret0, _ := ret[0].(machine.RebootAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldRebootOrShutdown indicates an expected call of ShouldRebootOrShutdown.
func (mr *MockStateMockRecorder) ShouldRebootOrShutdown(ctx, uuid any) *MockStateShouldRebootOrShutdownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRebootOrShutdown", reflect.TypeOf((*MockState)(nil).ShouldRebootOrShutdown), ctx, uuid)
	return &MockStateShouldRebootOrShutdownCall{Call: call}
}

// MockStateShouldRebootOrShutdownCall wrap *gomock.Call
type MockStateShouldRebootOrShutdownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateShouldRebootOrShutdownCall) Return(arg0 machine.RebootAction, arg1 error) *MockStateShouldRebootOrShutdownCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateShouldRebootOrShutdownCall) Do(f func(context.Context, machine.UUID) (machine.RebootAction, error)) *MockStateShouldRebootOrShutdownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateShouldRebootOrShutdownCall) DoAndReturn(f func(context.Context, machine.UUID) (machine.RebootAction, error)) *MockStateShouldRebootOrShutdownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusHistory is a mock of StatusHistory interface.
type MockStatusHistory struct {
	ctrl     *gomock.Controller
	recorder *MockStatusHistoryMockRecorder
}

// MockStatusHistoryMockRecorder is the mock recorder for MockStatusHistory.
type MockStatusHistoryMockRecorder struct {
	mock *MockStatusHistory
}

// NewMockStatusHistory creates a new mock instance.
func NewMockStatusHistory(ctrl *gomock.Controller) *MockStatusHistory {
	mock := &MockStatusHistory{ctrl: ctrl}
	mock.recorder = &MockStatusHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusHistory) EXPECT() *MockStatusHistoryMockRecorder {
	return m.recorder
}

// RecordStatus mocks base method.
func (m *MockStatusHistory) RecordStatus(arg0 context.Context, arg1 statushistory.Namespace, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordStatus indicates an expected call of RecordStatus.
func (mr *MockStatusHistoryMockRecorder) RecordStatus(arg0, arg1, arg2 any) *MockStatusHistoryRecordStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStatus", reflect.TypeOf((*MockStatusHistory)(nil).RecordStatus), arg0, arg1, arg2)
	return &MockStatusHistoryRecordStatusCall{Call: call}
}

// MockStatusHistoryRecordStatusCall wrap *gomock.Call
type MockStatusHistoryRecordStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusHistoryRecordStatusCall) Return(arg0 error) *MockStatusHistoryRecordStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusHistoryRecordStatusCall) Do(f func(context.Context, statushistory.Namespace, status.StatusInfo) error) *MockStatusHistoryRecordStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusHistoryRecordStatusCall) DoAndReturn(f func(context.Context, statushistory.Namespace, status.StatusInfo) error) *MockStatusHistoryRecordStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
