// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)

// ChangeLogTriggersForModel generates the triggers for the
// model table.
func ChangeLogTriggersForModel(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for Model
INSERT INTO change_log_namespace VALUES (%[2]d, 'model', 'Model changes based on %[1]s');

-- insert trigger for Model
CREATE TRIGGER trg_log_model_insert
AFTER INSERT ON model FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for Model
CREATE TRIGGER trg_log_model_update
AFTER UPDATE ON model FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.activated != OLD.activated OR
	NEW.cloud_uuid != OLD.cloud_uuid OR
	(NEW.cloud_region_uuid != OLD.cloud_region_uuid OR (NEW.cloud_region_uuid IS NOT NULL AND OLD.cloud_region_uuid IS NULL) OR (NEW.cloud_region_uuid IS NULL AND OLD.cloud_region_uuid IS NOT NULL)) OR
	(NEW.cloud_credential_uuid != OLD.cloud_credential_uuid OR (NEW.cloud_credential_uuid IS NOT NULL AND OLD.cloud_credential_uuid IS NULL) OR (NEW.cloud_credential_uuid IS NULL AND OLD.cloud_credential_uuid IS NOT NULL)) OR
	NEW.model_type_id != OLD.model_type_id OR
	NEW.life_id != OLD.life_id OR
	NEW.name != OLD.name OR
	NEW.owner_uuid != OLD.owner_uuid 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for Model
CREATE TRIGGER trg_log_model_delete
AFTER DELETE ON model FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}
