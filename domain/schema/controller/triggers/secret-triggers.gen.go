// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"
	"strings"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForModelSecretBackend generates the triggers for the
// model_secret_backend table.
func ChangeLogTriggersForModelSecretBackend(namespaceID int, changeColumnName string) func() schema.Patch {
	return ChangeLogTriggersForModelSecretBackendWithDiscriminator(namespaceID, changeColumnName, "")
}

// ChangeLogTriggersForModelSecretBackendWithDiscriminator generates the triggers for the
// model_secret_backend table, with the value of the optional discriminator column included in the
// change event. The discriminator column name is ignored if empty.
func ChangeLogTriggersForModelSecretBackendWithDiscriminator(namespaceID int, changeColumnName, discriminatorColumnName string) func() schema.Patch {
	changeLogColumns := []string{"changed"}
	newColumnValues := "NEW." + changeColumnName
	oldColumnValues := "OLD." + changeColumnName
	if discriminatorColumnName != "" {
		changeLogColumns = append(changeLogColumns, "discriminator")
		newColumnValues += ", NEW." + discriminatorColumnName
		oldColumnValues += ", OLD." + discriminatorColumnName
	}
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert trigger for ModelSecretBackend
CREATE TRIGGER trg_log_model_secret_backend_insert
AFTER INSERT ON model_secret_backend FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (1, %[1]d, %[2]s, DATETIME('now'));
END;

-- update trigger for ModelSecretBackend
CREATE TRIGGER trg_log_model_secret_backend_update
AFTER UPDATE ON model_secret_backend FOR EACH ROW
WHEN 
	NEW.secret_backend_uuid != OLD.secret_backend_uuid 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (2, %[1]d, %[3]s, DATETIME('now'));
END;

-- delete trigger for ModelSecretBackend
CREATE TRIGGER trg_log_model_secret_backend_delete
AFTER DELETE ON model_secret_backend FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (4, %[1]d, %[3]s, DATETIME('now'));
END;`, namespaceID, newColumnValues, oldColumnValues, strings.Join(changeLogColumns, ", ")))
	}
}

// ChangeLogTriggersForSecretBackendRotation generates the triggers for the
// secret_backend_rotation table.
func ChangeLogTriggersForSecretBackendRotation(namespaceID int, changeColumnName string) func() schema.Patch {
	return ChangeLogTriggersForSecretBackendRotationWithDiscriminator(namespaceID, changeColumnName, "")
}

// ChangeLogTriggersForSecretBackendRotationWithDiscriminator generates the triggers for the
// secret_backend_rotation table, with the value of the optional discriminator column included in the
// change event. The discriminator column name is ignored if empty.
func ChangeLogTriggersForSecretBackendRotationWithDiscriminator(namespaceID int, changeColumnName, discriminatorColumnName string) func() schema.Patch {
	changeLogColumns := []string{"changed"}
	newColumnValues := "NEW." + changeColumnName
	oldColumnValues := "OLD." + changeColumnName
	if discriminatorColumnName != "" {
		changeLogColumns = append(changeLogColumns, "discriminator")
		newColumnValues += ", NEW." + discriminatorColumnName
		oldColumnValues += ", OLD." + discriminatorColumnName
	}
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert trigger for SecretBackendRotation
CREATE TRIGGER trg_log_secret_backend_rotation_insert
AFTER INSERT ON secret_backend_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (1, %[1]d, %[2]s, DATETIME('now'));
END;

-- update trigger for SecretBackendRotation
CREATE TRIGGER trg_log_secret_backend_rotation_update
AFTER UPDATE ON secret_backend_rotation FOR EACH ROW
WHEN 
	NEW.next_rotation_time != OLD.next_rotation_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (2, %[1]d, %[3]s, DATETIME('now'));
END;

-- delete trigger for SecretBackendRotation
CREATE TRIGGER trg_log_secret_backend_rotation_delete
AFTER DELETE ON secret_backend_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (4, %[1]d, %[3]s, DATETIME('now'));
END;`, namespaceID, newColumnValues, oldColumnValues, strings.Join(changeLogColumns, ", ")))
	}
}

