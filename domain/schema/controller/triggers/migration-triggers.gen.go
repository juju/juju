// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"
	"strings"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForModelMigrationMinionSync generates the triggers for the
// model_migration_minion_sync table.
func ChangeLogTriggersForModelMigrationMinionSync(namespaceID int, changeColumnName string) func() schema.Patch {
	return ChangeLogTriggersForModelMigrationMinionSyncWithDiscriminator(namespaceID, changeColumnName, "")
}

// ChangeLogTriggersForModelMigrationMinionSyncWithDiscriminator generates the triggers for the
// model_migration_minion_sync table, with the value of the optional discriminator column included in the
// change event. The discriminator column name is ignored if empty.
func ChangeLogTriggersForModelMigrationMinionSyncWithDiscriminator(namespaceID int, changeColumnName, discriminatorColumnName string) func() schema.Patch {
	changeLogColumns := []string{"changed"}
	newColumnValues := "NEW." + changeColumnName
	oldColumnValues := "OLD." + changeColumnName
	if discriminatorColumnName != "" {
		changeLogColumns = append(changeLogColumns, "discriminator")
		newColumnValues += ", NEW." + discriminatorColumnName
		oldColumnValues += ", OLD." + discriminatorColumnName
	}
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert trigger for ModelMigrationMinionSync
CREATE TRIGGER trg_log_model_migration_minion_sync_insert
AFTER INSERT ON model_migration_minion_sync FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (1, %[1]d, %[2]s, DATETIME('now'));
END;

-- update trigger for ModelMigrationMinionSync
CREATE TRIGGER trg_log_model_migration_minion_sync_update
AFTER UPDATE ON model_migration_minion_sync FOR EACH ROW
WHEN 
	NEW.migration_uuid != OLD.migration_uuid OR
	(NEW.phase != OLD.phase OR (NEW.phase IS NOT NULL AND OLD.phase IS NULL) OR (NEW.phase IS NULL AND OLD.phase IS NOT NULL)) OR
	(NEW.entity_key != OLD.entity_key OR (NEW.entity_key IS NOT NULL AND OLD.entity_key IS NULL) OR (NEW.entity_key IS NULL AND OLD.entity_key IS NOT NULL)) OR
	(NEW.time != OLD.time OR (NEW.time IS NOT NULL AND OLD.time IS NULL) OR (NEW.time IS NULL AND OLD.time IS NOT NULL)) OR
	(NEW.success != OLD.success OR (NEW.success IS NOT NULL AND OLD.success IS NULL) OR (NEW.success IS NULL AND OLD.success IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (2, %[1]d, %[3]s, DATETIME('now'));
END;

-- delete trigger for ModelMigrationMinionSync
CREATE TRIGGER trg_log_model_migration_minion_sync_delete
AFTER DELETE ON model_migration_minion_sync FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (4, %[1]d, %[3]s, DATETIME('now'));
END;`, namespaceID, newColumnValues, oldColumnValues, strings.Join(changeLogColumns, ", ")))
	}
}

// ChangeLogTriggersForModelMigrationStatus generates the triggers for the
// model_migration_status table.
func ChangeLogTriggersForModelMigrationStatus(namespaceID int, changeColumnName string) func() schema.Patch {
	return ChangeLogTriggersForModelMigrationStatusWithDiscriminator(namespaceID, changeColumnName, "")
}

// ChangeLogTriggersForModelMigrationStatusWithDiscriminator generates the triggers for the
// model_migration_status table, with the value of the optional discriminator column included in the
// change event. The discriminator column name is ignored if empty.
func ChangeLogTriggersForModelMigrationStatusWithDiscriminator(namespaceID int, changeColumnName, discriminatorColumnName string) func() schema.Patch {
	changeLogColumns := []string{"changed"}
	newColumnValues := "NEW." + changeColumnName
	oldColumnValues := "OLD." + changeColumnName
	if discriminatorColumnName != "" {
		changeLogColumns = append(changeLogColumns, "discriminator")
		newColumnValues += ", NEW." + discriminatorColumnName
		oldColumnValues += ", OLD." + discriminatorColumnName
	}
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert trigger for ModelMigrationStatus
CREATE TRIGGER trg_log_model_migration_status_insert
AFTER INSERT ON model_migration_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (1, %[1]d, %[2]s, DATETIME('now'));
END;

-- update trigger for ModelMigrationStatus
CREATE TRIGGER trg_log_model_migration_status_update
AFTER UPDATE ON model_migration_status FOR EACH ROW
WHEN 
	(NEW.start_time != OLD.start_time OR (NEW.start_time IS NOT NULL AND OLD.start_time IS NULL) OR (NEW.start_time IS NULL AND OLD.start_time IS NOT NULL)) OR
	(NEW.success_time != OLD.success_time OR (NEW.success_time IS NOT NULL AND OLD.success_time IS NULL) OR (NEW.success_time IS NULL AND OLD.success_time IS NOT NULL)) OR
	(NEW.end_time != OLD.end_time OR (NEW.end_time IS NOT NULL AND OLD.end_time IS NULL) OR (NEW.end_time IS NULL AND OLD.end_time IS NOT NULL)) OR
	(NEW.phase != OLD.phase OR (NEW.phase IS NOT NULL AND OLD.phase IS NULL) OR (NEW.phase IS NULL AND OLD.phase IS NOT NULL)) OR
	(NEW.phase_changed_time != OLD.phase_changed_time OR (NEW.phase_changed_time IS NOT NULL AND OLD.phase_changed_time IS NULL) OR (NEW.phase_changed_time IS NULL AND OLD.phase_changed_time IS NOT NULL)) OR
	(NEW.status != OLD.status OR (NEW.status IS NOT NULL AND OLD.status IS NULL) OR (NEW.status IS NULL AND OLD.status IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (2, %[1]d, %[3]s, DATETIME('now'));
END;

-- delete trigger for ModelMigrationStatus
CREATE TRIGGER trg_log_model_migration_status_delete
AFTER DELETE ON model_migration_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (4, %[1]d, %[3]s, DATETIME('now'));
END;`, namespaceID, newColumnValues, oldColumnValues, strings.Join(changeLogColumns, ", ")))
	}
}

