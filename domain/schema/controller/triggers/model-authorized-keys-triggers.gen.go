// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)

// ChangeLogTriggersForModelAuthorizedKeys generates the triggers for the
// model_authorized_keys table.
func ChangeLogTriggersForModelAuthorizedKeys(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for ModelAuthorizedKeys
INSERT INTO change_log_namespace VALUES (%[2]d, 'model_authorized_keys', 'ModelAuthorizedKeys changes based on %[1]s');

-- insert trigger for ModelAuthorizedKeys
CREATE TRIGGER trg_log_model_authorized_keys_insert
AFTER INSERT ON model_authorized_keys FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for ModelAuthorizedKeys
CREATE TRIGGER trg_log_model_authorized_keys_update
AFTER UPDATE ON model_authorized_keys FOR EACH ROW
WHEN 
	NEW.model_uuid != OLD.model_uuid OR
	NEW.user_public_ssh_key_id != OLD.user_public_ssh_key_id 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for ModelAuthorizedKeys
CREATE TRIGGER trg_log_model_authorized_keys_delete
AFTER DELETE ON model_authorized_keys FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}
