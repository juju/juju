// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)

// ChangeLogTriggersForSecretDeletedValueRef generates the triggers for the
// secret_deleted_value_ref table.
func ChangeLogTriggersForSecretDeletedValueRef(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for SecretDeletedValueRef
INSERT INTO change_log_namespace VALUES (%[2]d, 'secret_deleted_value_ref', 'SecretDeletedValueRef changes based on %[1]s');

-- insert trigger for SecretDeletedValueRef
CREATE TRIGGER trg_log_secret_deleted_value_ref_insert
AFTER INSERT ON secret_deleted_value_ref FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for SecretDeletedValueRef
CREATE TRIGGER trg_log_secret_deleted_value_ref_update
AFTER UPDATE ON secret_deleted_value_ref FOR EACH ROW
WHEN 
	NEW.revision_uuid != OLD.revision_uuid OR
	NEW.backend_uuid != OLD.backend_uuid OR
	NEW.revision_id != OLD.revision_id 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for SecretDeletedValueRef
CREATE TRIGGER trg_log_secret_deleted_value_ref_delete
AFTER DELETE ON secret_deleted_value_ref FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForSecretMetadata generates the triggers for the
// secret_metadata table.
func ChangeLogTriggersForSecretMetadata(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for SecretMetadata
INSERT INTO change_log_namespace VALUES (%[2]d, 'secret_metadata', 'SecretMetadata changes based on %[1]s');

-- insert trigger for SecretMetadata
CREATE TRIGGER trg_log_secret_metadata_insert
AFTER INSERT ON secret_metadata FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for SecretMetadata
CREATE TRIGGER trg_log_secret_metadata_update
AFTER UPDATE ON secret_metadata FOR EACH ROW
WHEN 
	NEW.secret_id != OLD.secret_id OR
	NEW.version != OLD.version OR
	(NEW.description != OLD.description OR (NEW.description IS NOT NULL AND OLD.description IS NULL) OR (NEW.description IS NULL AND OLD.description IS NOT NULL)) OR
	NEW.rotate_policy_id != OLD.rotate_policy_id OR
	NEW.auto_prune != OLD.auto_prune OR
	(NEW.latest_revision_checksum != OLD.latest_revision_checksum OR (NEW.latest_revision_checksum IS NOT NULL AND OLD.latest_revision_checksum IS NULL) OR (NEW.latest_revision_checksum IS NULL AND OLD.latest_revision_checksum IS NOT NULL)) OR
	NEW.create_time != OLD.create_time OR
	NEW.update_time != OLD.update_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for SecretMetadata
CREATE TRIGGER trg_log_secret_metadata_delete
AFTER DELETE ON secret_metadata FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForSecretReference generates the triggers for the
// secret_reference table.
func ChangeLogTriggersForSecretReference(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for SecretReference
INSERT INTO change_log_namespace VALUES (%[2]d, 'secret_reference', 'SecretReference changes based on %[1]s');

-- insert trigger for SecretReference
CREATE TRIGGER trg_log_secret_reference_insert
AFTER INSERT ON secret_reference FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for SecretReference
CREATE TRIGGER trg_log_secret_reference_update
AFTER UPDATE ON secret_reference FOR EACH ROW
WHEN 
	NEW.secret_id != OLD.secret_id OR
	NEW.latest_revision != OLD.latest_revision 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for SecretReference
CREATE TRIGGER trg_log_secret_reference_delete
AFTER DELETE ON secret_reference FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForSecretRevision generates the triggers for the
// secret_revision table.
func ChangeLogTriggersForSecretRevision(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for SecretRevision
INSERT INTO change_log_namespace VALUES (%[2]d, 'secret_revision', 'SecretRevision changes based on %[1]s');

-- insert trigger for SecretRevision
CREATE TRIGGER trg_log_secret_revision_insert
AFTER INSERT ON secret_revision FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for SecretRevision
CREATE TRIGGER trg_log_secret_revision_update
AFTER UPDATE ON secret_revision FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.secret_id != OLD.secret_id OR
	NEW.revision != OLD.revision OR
	NEW.create_time != OLD.create_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for SecretRevision
CREATE TRIGGER trg_log_secret_revision_delete
AFTER DELETE ON secret_revision FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForSecretRevisionExpire generates the triggers for the
// secret_revision_expire table.
func ChangeLogTriggersForSecretRevisionExpire(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for SecretRevisionExpire
INSERT INTO change_log_namespace VALUES (%[2]d, 'secret_revision_expire', 'SecretRevisionExpire changes based on %[1]s');

-- insert trigger for SecretRevisionExpire
CREATE TRIGGER trg_log_secret_revision_expire_insert
AFTER INSERT ON secret_revision_expire FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for SecretRevisionExpire
CREATE TRIGGER trg_log_secret_revision_expire_update
AFTER UPDATE ON secret_revision_expire FOR EACH ROW
WHEN 
	NEW.revision_uuid != OLD.revision_uuid OR
	NEW.expire_time != OLD.expire_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for SecretRevisionExpire
CREATE TRIGGER trg_log_secret_revision_expire_delete
AFTER DELETE ON secret_revision_expire FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForSecretRevisionObsolete generates the triggers for the
// secret_revision_obsolete table.
func ChangeLogTriggersForSecretRevisionObsolete(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for SecretRevisionObsolete
INSERT INTO change_log_namespace VALUES (%[2]d, 'secret_revision_obsolete', 'SecretRevisionObsolete changes based on %[1]s');

-- insert trigger for SecretRevisionObsolete
CREATE TRIGGER trg_log_secret_revision_obsolete_insert
AFTER INSERT ON secret_revision_obsolete FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for SecretRevisionObsolete
CREATE TRIGGER trg_log_secret_revision_obsolete_update
AFTER UPDATE ON secret_revision_obsolete FOR EACH ROW
WHEN 
	NEW.revision_uuid != OLD.revision_uuid OR
	NEW.obsolete != OLD.obsolete OR
	NEW.pending_delete != OLD.pending_delete 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for SecretRevisionObsolete
CREATE TRIGGER trg_log_secret_revision_obsolete_delete
AFTER DELETE ON secret_revision_obsolete FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForSecretRotation generates the triggers for the
// secret_rotation table.
func ChangeLogTriggersForSecretRotation(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for SecretRotation
INSERT INTO change_log_namespace VALUES (%[2]d, 'secret_rotation', 'SecretRotation changes based on %[1]s');

-- insert trigger for SecretRotation
CREATE TRIGGER trg_log_secret_rotation_insert
AFTER INSERT ON secret_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for SecretRotation
CREATE TRIGGER trg_log_secret_rotation_update
AFTER UPDATE ON secret_rotation FOR EACH ROW
WHEN 
	NEW.secret_id != OLD.secret_id OR
	NEW.next_rotation_time != OLD.next_rotation_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for SecretRotation
CREATE TRIGGER trg_log_secret_rotation_delete
AFTER DELETE ON secret_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}
