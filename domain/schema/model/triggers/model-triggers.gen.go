// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"
	"strings"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForModelConfig generates the triggers for the
// model_config table.
func ChangeLogTriggersForModelConfig(namespaceID int, changeColumnName string) func() schema.Patch {
	return ChangeLogTriggersForModelConfigWithDiscriminator(namespaceID, changeColumnName, "")
}

// ChangeLogTriggersForModelConfigWithDiscriminator generates the triggers for the
// model_config table, with the value of the optional discriminator column included in the
// change event. The discriminator column name is ignored if empty.
func ChangeLogTriggersForModelConfigWithDiscriminator(namespaceID int, changeColumnName, discriminatorColumnName string) func() schema.Patch {
	changeLogColumns := []string{"changed"}
	newColumnValues := "NEW." + changeColumnName
	oldColumnValues := "OLD." + changeColumnName
	if discriminatorColumnName != "" {
		changeLogColumns = append(changeLogColumns, "discriminator")
		newColumnValues += ", NEW." + discriminatorColumnName
		oldColumnValues += ", OLD." + discriminatorColumnName
	}
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert trigger for ModelConfig
CREATE TRIGGER trg_log_model_config_insert
AFTER INSERT ON model_config FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (1, %[1]d, %[2]s, DATETIME('now'));
END;

-- update trigger for ModelConfig
CREATE TRIGGER trg_log_model_config_update
AFTER UPDATE ON model_config FOR EACH ROW
WHEN 
	NEW.value != OLD.value 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (2, %[1]d, %[3]s, DATETIME('now'));
END;

-- delete trigger for ModelConfig
CREATE TRIGGER trg_log_model_config_delete
AFTER DELETE ON model_config FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, %[4]s, created_at)
    VALUES (4, %[1]d, %[3]s, DATETIME('now'));
END;`, namespaceID, newColumnValues, oldColumnValues, strings.Join(changeLogColumns, ", ")))
	}
}

