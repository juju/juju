// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForBlockDevice generates the triggers for the
// block_device table.
func ChangeLogTriggersForBlockDevice(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for BlockDevice
INSERT INTO change_log_namespace VALUES (%[2]d, 'block_device', 'BlockDevice changes based on %[1]s');

-- insert trigger for BlockDevice
CREATE TRIGGER trg_log_block_device_insert
AFTER INSERT ON block_device FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for BlockDevice
CREATE TRIGGER trg_log_block_device_update
AFTER UPDATE ON block_device FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.machine_uuid != OLD.machine_uuid OR
	NEW.name != OLD.name OR
	(NEW.label != OLD.label OR (NEW.label IS NOT NULL AND OLD.label IS NULL) OR (NEW.label IS NULL AND OLD.label IS NOT NULL)) OR
	(NEW.device_uuid != OLD.device_uuid OR (NEW.device_uuid IS NOT NULL AND OLD.device_uuid IS NULL) OR (NEW.device_uuid IS NULL AND OLD.device_uuid IS NOT NULL)) OR
	(NEW.hardware_id != OLD.hardware_id OR (NEW.hardware_id IS NOT NULL AND OLD.hardware_id IS NULL) OR (NEW.hardware_id IS NULL AND OLD.hardware_id IS NOT NULL)) OR
	(NEW.wwn != OLD.wwn OR (NEW.wwn IS NOT NULL AND OLD.wwn IS NULL) OR (NEW.wwn IS NULL AND OLD.wwn IS NOT NULL)) OR
	(NEW.bus_address != OLD.bus_address OR (NEW.bus_address IS NOT NULL AND OLD.bus_address IS NULL) OR (NEW.bus_address IS NULL AND OLD.bus_address IS NOT NULL)) OR
	(NEW.serial_id != OLD.serial_id OR (NEW.serial_id IS NOT NULL AND OLD.serial_id IS NULL) OR (NEW.serial_id IS NULL AND OLD.serial_id IS NOT NULL)) OR
	(NEW.filesystem_type_id != OLD.filesystem_type_id OR (NEW.filesystem_type_id IS NOT NULL AND OLD.filesystem_type_id IS NULL) OR (NEW.filesystem_type_id IS NULL AND OLD.filesystem_type_id IS NOT NULL)) OR
	(NEW.size_mib != OLD.size_mib OR (NEW.size_mib IS NOT NULL AND OLD.size_mib IS NULL) OR (NEW.size_mib IS NULL AND OLD.size_mib IS NOT NULL)) OR
	(NEW.mount_point != OLD.mount_point OR (NEW.mount_point IS NOT NULL AND OLD.mount_point IS NULL) OR (NEW.mount_point IS NULL AND OLD.mount_point IS NOT NULL)) OR
	(NEW.in_use != OLD.in_use OR (NEW.in_use IS NOT NULL AND OLD.in_use IS NULL) OR (NEW.in_use IS NULL AND OLD.in_use IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for BlockDevice
CREATE TRIGGER trg_log_block_device_delete
AFTER DELETE ON block_device FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

