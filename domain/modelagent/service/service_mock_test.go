// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelagent/service (interfaces: State,ModelState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/modelagent/service State,ModelState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockState) GetModelTargetAgentVersion(arg0 context.Context, arg1 model.UUID) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockStateMockRecorder) GetModelTargetAgentVersion(arg0, arg1 any) *MockStateGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockState)(nil).GetModelTargetAgentVersion), arg0, arg1)
	return &MockStateGetModelTargetAgentVersionCall{Call: call}
}

// MockStateGetModelTargetAgentVersionCall wrap *gomock.Call
type MockStateGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelTargetAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelTargetAgentVersionCall) Do(f func(context.Context, model.UUID) (version.Number, error)) *MockStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context, model.UUID) (version.Number, error)) *MockStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelState) ISGOMOCK() struct{} {
	return struct{}{}
}

// CheckMachineExists mocks base method.
func (m *MockModelState) CheckMachineExists(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMachineExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckMachineExists indicates an expected call of CheckMachineExists.
func (mr *MockModelStateMockRecorder) CheckMachineExists(arg0, arg1 any) *MockModelStateCheckMachineExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMachineExists", reflect.TypeOf((*MockModelState)(nil).CheckMachineExists), arg0, arg1)
	return &MockModelStateCheckMachineExistsCall{Call: call}
}

// MockModelStateCheckMachineExistsCall wrap *gomock.Call
type MockModelStateCheckMachineExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateCheckMachineExistsCall) Return(arg0 error) *MockModelStateCheckMachineExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateCheckMachineExistsCall) Do(f func(context.Context, machine.Name) error) *MockModelStateCheckMachineExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateCheckMachineExistsCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockModelStateCheckMachineExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUnitExists mocks base method.
func (m *MockModelState) CheckUnitExists(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnitExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUnitExists indicates an expected call of CheckUnitExists.
func (mr *MockModelStateMockRecorder) CheckUnitExists(arg0, arg1 any) *MockModelStateCheckUnitExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnitExists", reflect.TypeOf((*MockModelState)(nil).CheckUnitExists), arg0, arg1)
	return &MockModelStateCheckUnitExistsCall{Call: call}
}

// MockModelStateCheckUnitExistsCall wrap *gomock.Call
type MockModelStateCheckUnitExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateCheckUnitExistsCall) Return(arg0 error) *MockModelStateCheckUnitExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateCheckUnitExistsCall) Do(f func(context.Context, string) error) *MockModelStateCheckUnitExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateCheckUnitExistsCall) DoAndReturn(f func(context.Context, string) error) *MockModelStateCheckUnitExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUUID mocks base method.
func (m *MockModelState) GetModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUUID indicates an expected call of GetModelUUID.
func (mr *MockModelStateMockRecorder) GetModelUUID(arg0 any) *MockModelStateGetModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUUID", reflect.TypeOf((*MockModelState)(nil).GetModelUUID), arg0)
	return &MockModelStateGetModelUUIDCall{Call: call}
}

// MockModelStateGetModelUUIDCall wrap *gomock.Call
type MockModelStateGetModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockModelStateGetModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockModelStateGetModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockModelStateGetModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
