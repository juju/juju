// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/model/service (interfaces: ControllerState,EnvironVersionProvider,ModelDeleter,ModelState,State,ModelResourcesProvider,CloudInfoProvider,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/model/service ControllerState,EnvironVersionProvider,ModelDeleter,ModelState,State,ModelResourcesProvider,CloudInfoProvider,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	cloud "github.com/juju/juju/cloud"
	cloud0 "github.com/juju/juju/core/cloud"
	credential "github.com/juju/juju/core/credential"
	model "github.com/juju/juju/core/model"
	user "github.com/juju/juju/core/user"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	constraints "github.com/juju/juju/domain/constraints"
	life "github.com/juju/juju/domain/life"
	model0 "github.com/juju/juju/domain/model"
	environs "github.com/juju/juju/environs"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetModelSeedInformation mocks base method.
func (m *MockControllerState) GetModelSeedInformation(arg0 context.Context, arg1 model.UUID) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSeedInformation", arg0, arg1)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSeedInformation indicates an expected call of GetModelSeedInformation.
func (mr *MockControllerStateMockRecorder) GetModelSeedInformation(arg0, arg1 any) *MockControllerStateGetModelSeedInformationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSeedInformation", reflect.TypeOf((*MockControllerState)(nil).GetModelSeedInformation), arg0, arg1)
	return &MockControllerStateGetModelSeedInformationCall{Call: call}
}

// MockControllerStateGetModelSeedInformationCall wrap *gomock.Call
type MockControllerStateGetModelSeedInformationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelSeedInformationCall) Return(arg0 model.ModelInfo, arg1 error) *MockControllerStateGetModelSeedInformationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelSeedInformationCall) Do(f func(context.Context, model.UUID) (model.ModelInfo, error)) *MockControllerStateGetModelSeedInformationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelSeedInformationCall) DoAndReturn(f func(context.Context, model.UUID) (model.ModelInfo, error)) *MockControllerStateGetModelSeedInformationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelState mocks base method.
func (m *MockControllerState) GetModelState(arg0 context.Context, arg1 model.UUID) (model0.ModelState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelState", arg0, arg1)
	ret0, _ := ret[0].(model0.ModelState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelState indicates an expected call of GetModelState.
func (mr *MockControllerStateMockRecorder) GetModelState(arg0, arg1 any) *MockControllerStateGetModelStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelState", reflect.TypeOf((*MockControllerState)(nil).GetModelState), arg0, arg1)
	return &MockControllerStateGetModelStateCall{Call: call}
}

// MockControllerStateGetModelStateCall wrap *gomock.Call
type MockControllerStateGetModelStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelStateCall) Return(arg0 model0.ModelState, arg1 error) *MockControllerStateGetModelStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelStateCall) Do(f func(context.Context, model.UUID) (model0.ModelState, error)) *MockControllerStateGetModelStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelStateCall) DoAndReturn(f func(context.Context, model.UUID) (model0.ModelState, error)) *MockControllerStateGetModelStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelSummary mocks base method.
func (m *MockControllerState) GetModelSummary(arg0 context.Context, arg1 model.UUID) (model0.ModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSummary", arg0, arg1)
	ret0, _ := ret[0].(model0.ModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSummary indicates an expected call of GetModelSummary.
func (mr *MockControllerStateMockRecorder) GetModelSummary(arg0, arg1 any) *MockControllerStateGetModelSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSummary", reflect.TypeOf((*MockControllerState)(nil).GetModelSummary), arg0, arg1)
	return &MockControllerStateGetModelSummaryCall{Call: call}
}

// MockControllerStateGetModelSummaryCall wrap *gomock.Call
type MockControllerStateGetModelSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelSummaryCall) Return(arg0 model0.ModelSummary, arg1 error) *MockControllerStateGetModelSummaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelSummaryCall) Do(f func(context.Context, model.UUID) (model0.ModelSummary, error)) *MockControllerStateGetModelSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelSummaryCall) DoAndReturn(f func(context.Context, model.UUID) (model0.ModelSummary, error)) *MockControllerStateGetModelSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserModelSummary mocks base method.
func (m *MockControllerState) GetUserModelSummary(arg0 context.Context, arg1 user.UUID, arg2 model.UUID) (model0.UserModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserModelSummary", arg0, arg1, arg2)
	ret0, _ := ret[0].(model0.UserModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserModelSummary indicates an expected call of GetUserModelSummary.
func (mr *MockControllerStateMockRecorder) GetUserModelSummary(arg0, arg1, arg2 any) *MockControllerStateGetUserModelSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserModelSummary", reflect.TypeOf((*MockControllerState)(nil).GetUserModelSummary), arg0, arg1, arg2)
	return &MockControllerStateGetUserModelSummaryCall{Call: call}
}

// MockControllerStateGetUserModelSummaryCall wrap *gomock.Call
type MockControllerStateGetUserModelSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetUserModelSummaryCall) Return(arg0 model0.UserModelSummary, arg1 error) *MockControllerStateGetUserModelSummaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetUserModelSummaryCall) Do(f func(context.Context, user.UUID, model.UUID) (model0.UserModelSummary, error)) *MockControllerStateGetUserModelSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetUserModelSummaryCall) DoAndReturn(f func(context.Context, user.UUID, model.UUID) (model0.UserModelSummary, error)) *MockControllerStateGetUserModelSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasValidCredential mocks base method.
func (m *MockControllerState) HasValidCredential(arg0 context.Context, arg1 model.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasValidCredential", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasValidCredential indicates an expected call of HasValidCredential.
func (mr *MockControllerStateMockRecorder) HasValidCredential(arg0, arg1 any) *MockControllerStateHasValidCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValidCredential", reflect.TypeOf((*MockControllerState)(nil).HasValidCredential), arg0, arg1)
	return &MockControllerStateHasValidCredentialCall{Call: call}
}

// MockControllerStateHasValidCredentialCall wrap *gomock.Call
type MockControllerStateHasValidCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateHasValidCredentialCall) Return(arg0 bool, arg1 error) *MockControllerStateHasValidCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateHasValidCredentialCall) Do(f func(context.Context, model.UUID) (bool, error)) *MockControllerStateHasValidCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateHasValidCredentialCall) DoAndReturn(f func(context.Context, model.UUID) (bool, error)) *MockControllerStateHasValidCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEnvironVersionProvider is a mock of EnvironVersionProvider interface.
type MockEnvironVersionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironVersionProviderMockRecorder
}

// MockEnvironVersionProviderMockRecorder is the mock recorder for MockEnvironVersionProvider.
type MockEnvironVersionProviderMockRecorder struct {
	mock *MockEnvironVersionProvider
}

// NewMockEnvironVersionProvider creates a new mock instance.
func NewMockEnvironVersionProvider(ctrl *gomock.Controller) *MockEnvironVersionProvider {
	mock := &MockEnvironVersionProvider{ctrl: ctrl}
	mock.recorder = &MockEnvironVersionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironVersionProvider) EXPECT() *MockEnvironVersionProviderMockRecorder {
	return m.recorder
}

// Version mocks base method.
func (m *MockEnvironVersionProvider) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockEnvironVersionProviderMockRecorder) Version() *MockEnvironVersionProviderVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEnvironVersionProvider)(nil).Version))
	return &MockEnvironVersionProviderVersionCall{Call: call}
}

// MockEnvironVersionProviderVersionCall wrap *gomock.Call
type MockEnvironVersionProviderVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironVersionProviderVersionCall) Return(arg0 int) *MockEnvironVersionProviderVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironVersionProviderVersionCall) Do(f func() int) *MockEnvironVersionProviderVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironVersionProviderVersionCall) DoAndReturn(f func() int) *MockEnvironVersionProviderVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDeleter is a mock of ModelDeleter interface.
type MockModelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockModelDeleterMockRecorder
}

// MockModelDeleterMockRecorder is the mock recorder for MockModelDeleter.
type MockModelDeleterMockRecorder struct {
	mock *MockModelDeleter
}

// NewMockModelDeleter creates a new mock instance.
func NewMockModelDeleter(ctrl *gomock.Controller) *MockModelDeleter {
	mock := &MockModelDeleter{ctrl: ctrl}
	mock.recorder = &MockModelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDeleter) EXPECT() *MockModelDeleterMockRecorder {
	return m.recorder
}

// DeleteDB mocks base method.
func (m *MockModelDeleter) DeleteDB(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDB indicates an expected call of DeleteDB.
func (mr *MockModelDeleterMockRecorder) DeleteDB(arg0 any) *MockModelDeleterDeleteDBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDB", reflect.TypeOf((*MockModelDeleter)(nil).DeleteDB), arg0)
	return &MockModelDeleterDeleteDBCall{Call: call}
}

// MockModelDeleterDeleteDBCall wrap *gomock.Call
type MockModelDeleterDeleteDBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDeleterDeleteDBCall) Return(arg0 error) *MockModelDeleterDeleteDBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDeleterDeleteDBCall) Do(f func(string) error) *MockModelDeleterDeleteDBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDeleterDeleteDBCall) DoAndReturn(f func(string) error) *MockModelDeleterDeleteDBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockModelState) Create(arg0 context.Context, arg1 model0.ModelDetailArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockModelStateMockRecorder) Create(arg0, arg1 any) *MockModelStateCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModelState)(nil).Create), arg0, arg1)
	return &MockModelStateCreateCall{Call: call}
}

// MockModelStateCreateCall wrap *gomock.Call
type MockModelStateCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateCreateCall) Return(arg0 error) *MockModelStateCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateCreateCall) Do(f func(context.Context, model0.ModelDetailArgs) error) *MockModelStateCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateCreateCall) DoAndReturn(f func(context.Context, model0.ModelDetailArgs) error) *MockModelStateCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockModelState) Delete(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockModelStateMockRecorder) Delete(arg0, arg1 any) *MockModelStateDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModelState)(nil).Delete), arg0, arg1)
	return &MockModelStateDeleteCall{Call: call}
}

// MockModelStateDeleteCall wrap *gomock.Call
type MockModelStateDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateDeleteCall) Return(arg0 error) *MockModelStateDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateDeleteCall) Do(f func(context.Context, model.UUID) error) *MockModelStateDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateDeleteCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockModelStateDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerUUID mocks base method.
func (m *MockModelState) GetControllerUUID(arg0 context.Context) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerUUID", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerUUID indicates an expected call of GetControllerUUID.
func (mr *MockModelStateMockRecorder) GetControllerUUID(arg0 any) *MockModelStateGetControllerUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerUUID", reflect.TypeOf((*MockModelState)(nil).GetControllerUUID), arg0)
	return &MockModelStateGetControllerUUIDCall{Call: call}
}

// MockModelStateGetControllerUUIDCall wrap *gomock.Call
type MockModelStateGetControllerUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetControllerUUIDCall) Return(arg0 uuid.UUID, arg1 error) *MockModelStateGetControllerUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetControllerUUIDCall) Do(f func(context.Context) (uuid.UUID, error)) *MockModelStateGetControllerUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetControllerUUIDCall) DoAndReturn(f func(context.Context) (uuid.UUID, error)) *MockModelStateGetControllerUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModel mocks base method.
func (m *MockModelState) GetModel(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelStateMockRecorder) GetModel(arg0 any) *MockModelStateGetModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelState)(nil).GetModel), arg0)
	return &MockModelStateGetModelCall{Call: call}
}

// MockModelStateGetModelCall wrap *gomock.Call
type MockModelStateGetModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelStateGetModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelStateGetModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelStateGetModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCloudType mocks base method.
func (m *MockModelState) GetModelCloudType(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudType", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelCloudType indicates an expected call of GetModelCloudType.
func (mr *MockModelStateMockRecorder) GetModelCloudType(arg0 any) *MockModelStateGetModelCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudType", reflect.TypeOf((*MockModelState)(nil).GetModelCloudType), arg0)
	return &MockModelStateGetModelCloudTypeCall{Call: call}
}

// MockModelStateGetModelCloudTypeCall wrap *gomock.Call
type MockModelStateGetModelCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelCloudTypeCall) Return(arg0 string, arg1 error) *MockModelStateGetModelCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelCloudTypeCall) Do(f func(context.Context) (string, error)) *MockModelStateGetModelCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelCloudTypeCall) DoAndReturn(f func(context.Context) (string, error)) *MockModelStateGetModelCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelConstraints mocks base method.
func (m *MockModelState) GetModelConstraints(arg0 context.Context) (constraints.Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelConstraints", arg0)
	ret0, _ := ret[0].(constraints.Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelConstraints indicates an expected call of GetModelConstraints.
func (mr *MockModelStateMockRecorder) GetModelConstraints(arg0 any) *MockModelStateGetModelConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelConstraints", reflect.TypeOf((*MockModelState)(nil).GetModelConstraints), arg0)
	return &MockModelStateGetModelConstraintsCall{Call: call}
}

// MockModelStateGetModelConstraintsCall wrap *gomock.Call
type MockModelStateGetModelConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelConstraintsCall) Return(arg0 constraints.Constraints, arg1 error) *MockModelStateGetModelConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelConstraintsCall) Do(f func(context.Context) (constraints.Constraints, error)) *MockModelStateGetModelConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelConstraintsCall) DoAndReturn(f func(context.Context) (constraints.Constraints, error)) *MockModelStateGetModelConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelInfoSummary mocks base method.
func (m *MockModelState) GetModelInfoSummary(arg0 context.Context) (model0.ModelInfoSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfoSummary", arg0)
	ret0, _ := ret[0].(model0.ModelInfoSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfoSummary indicates an expected call of GetModelInfoSummary.
func (mr *MockModelStateMockRecorder) GetModelInfoSummary(arg0 any) *MockModelStateGetModelInfoSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfoSummary", reflect.TypeOf((*MockModelState)(nil).GetModelInfoSummary), arg0)
	return &MockModelStateGetModelInfoSummaryCall{Call: call}
}

// MockModelStateGetModelInfoSummaryCall wrap *gomock.Call
type MockModelStateGetModelInfoSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelInfoSummaryCall) Return(arg0 model0.ModelInfoSummary, arg1 error) *MockModelStateGetModelInfoSummaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelInfoSummaryCall) Do(f func(context.Context) (model0.ModelInfoSummary, error)) *MockModelStateGetModelInfoSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelInfoSummaryCall) DoAndReturn(f func(context.Context) (model0.ModelInfoSummary, error)) *MockModelStateGetModelInfoSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelMetrics mocks base method.
func (m *MockModelState) GetModelMetrics(arg0 context.Context) (model.ModelMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelMetrics", arg0)
	ret0, _ := ret[0].(model.ModelMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelMetrics indicates an expected call of GetModelMetrics.
func (mr *MockModelStateMockRecorder) GetModelMetrics(arg0 any) *MockModelStateGetModelMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelMetrics", reflect.TypeOf((*MockModelState)(nil).GetModelMetrics), arg0)
	return &MockModelStateGetModelMetricsCall{Call: call}
}

// MockModelStateGetModelMetricsCall wrap *gomock.Call
type MockModelStateGetModelMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelMetricsCall) Return(arg0 model.ModelMetrics, arg1 error) *MockModelStateGetModelMetricsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelMetricsCall) Do(f func(context.Context) (model.ModelMetrics, error)) *MockModelStateGetModelMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelMetricsCall) DoAndReturn(f func(context.Context) (model.ModelMetrics, error)) *MockModelStateGetModelMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelType mocks base method.
func (m *MockModelState) GetModelType(arg0 context.Context) (model.ModelType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelType", arg0)
	ret0, _ := ret[0].(model.ModelType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelType indicates an expected call of GetModelType.
func (mr *MockModelStateMockRecorder) GetModelType(arg0 any) *MockModelStateGetModelTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelType", reflect.TypeOf((*MockModelState)(nil).GetModelType), arg0)
	return &MockModelStateGetModelTypeCall{Call: call}
}

// MockModelStateGetModelTypeCall wrap *gomock.Call
type MockModelStateGetModelTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelTypeCall) Return(arg0 model.ModelType, arg1 error) *MockModelStateGetModelTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelTypeCall) Do(f func(context.Context) (model.ModelType, error)) *MockModelStateGetModelTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelTypeCall) DoAndReturn(f func(context.Context) (model.ModelType, error)) *MockModelStateGetModelTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerModel mocks base method.
func (m *MockModelState) IsControllerModel(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerModel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerModel indicates an expected call of IsControllerModel.
func (mr *MockModelStateMockRecorder) IsControllerModel(arg0 any) *MockModelStateIsControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerModel", reflect.TypeOf((*MockModelState)(nil).IsControllerModel), arg0)
	return &MockModelStateIsControllerModelCall{Call: call}
}

// MockModelStateIsControllerModelCall wrap *gomock.Call
type MockModelStateIsControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateIsControllerModelCall) Return(arg0 bool, arg1 error) *MockModelStateIsControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateIsControllerModelCall) Do(f func(context.Context) (bool, error)) *MockModelStateIsControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateIsControllerModelCall) DoAndReturn(f func(context.Context) (bool, error)) *MockModelStateIsControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelConstraints mocks base method.
func (m *MockModelState) SetModelConstraints(arg0 context.Context, arg1 constraints.Constraints) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelConstraints", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelConstraints indicates an expected call of SetModelConstraints.
func (mr *MockModelStateMockRecorder) SetModelConstraints(arg0, arg1 any) *MockModelStateSetModelConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelConstraints", reflect.TypeOf((*MockModelState)(nil).SetModelConstraints), arg0, arg1)
	return &MockModelStateSetModelConstraintsCall{Call: call}
}

// MockModelStateSetModelConstraintsCall wrap *gomock.Call
type MockModelStateSetModelConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetModelConstraintsCall) Return(arg0 error) *MockModelStateSetModelConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetModelConstraintsCall) Do(f func(context.Context, constraints.Constraints) error) *MockModelStateSetModelConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetModelConstraintsCall) DoAndReturn(f func(context.Context, constraints.Constraints) error) *MockModelStateSetModelConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockState) Activate(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockStateMockRecorder) Activate(arg0, arg1 any) *MockStateActivateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockState)(nil).Activate), arg0, arg1)
	return &MockStateActivateCall{Call: call}
}

// MockStateActivateCall wrap *gomock.Call
type MockStateActivateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateActivateCall) Return(arg0 error) *MockStateActivateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateActivateCall) Do(f func(context.Context, model.UUID) error) *MockStateActivateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateActivateCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockStateActivateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckModelExists mocks base method.
func (m *MockState) CheckModelExists(arg0 context.Context, arg1 model.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckModelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckModelExists indicates an expected call of CheckModelExists.
func (mr *MockStateMockRecorder) CheckModelExists(arg0, arg1 any) *MockStateCheckModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckModelExists", reflect.TypeOf((*MockState)(nil).CheckModelExists), arg0, arg1)
	return &MockStateCheckModelExistsCall{Call: call}
}

// MockStateCheckModelExistsCall wrap *gomock.Call
type MockStateCheckModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckModelExistsCall) Return(arg0 bool, arg1 error) *MockStateCheckModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckModelExistsCall) Do(f func(context.Context, model.UUID) (bool, error)) *MockStateCheckModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckModelExistsCall) DoAndReturn(f func(context.Context, model.UUID) (bool, error)) *MockStateCheckModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudSupportsAuthType mocks base method.
func (m *MockState) CloudSupportsAuthType(arg0 context.Context, arg1 string, arg2 cloud.AuthType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSupportsAuthType", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSupportsAuthType indicates an expected call of CloudSupportsAuthType.
func (mr *MockStateMockRecorder) CloudSupportsAuthType(arg0, arg1, arg2 any) *MockStateCloudSupportsAuthTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSupportsAuthType", reflect.TypeOf((*MockState)(nil).CloudSupportsAuthType), arg0, arg1, arg2)
	return &MockStateCloudSupportsAuthTypeCall{Call: call}
}

// MockStateCloudSupportsAuthTypeCall wrap *gomock.Call
type MockStateCloudSupportsAuthTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudSupportsAuthTypeCall) Return(arg0 bool, arg1 error) *MockStateCloudSupportsAuthTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudSupportsAuthTypeCall) Do(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockStateCloudSupportsAuthTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudSupportsAuthTypeCall) DoAndReturn(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockStateCloudSupportsAuthTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudType mocks base method.
func (m *MockState) CloudType(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudType indicates an expected call of CloudType.
func (mr *MockStateMockRecorder) CloudType(arg0, arg1 any) *MockStateCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudType", reflect.TypeOf((*MockState)(nil).CloudType), arg0, arg1)
	return &MockStateCloudTypeCall{Call: call}
}

// MockStateCloudTypeCall wrap *gomock.Call
type MockStateCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudTypeCall) Return(arg0 string, arg1 error) *MockStateCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudTypeCall) Do(f func(context.Context, string) (string, error)) *MockStateCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudTypeCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockState) Create(arg0 context.Context, arg1 model.UUID, arg2 model.ModelType, arg3 model0.GlobalModelCreationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStateMockRecorder) Create(arg0, arg1, arg2, arg3 any) *MockStateCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockState)(nil).Create), arg0, arg1, arg2, arg3)
	return &MockStateCreateCall{Call: call}
}

// MockStateCreateCall wrap *gomock.Call
type MockStateCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateCall) Return(arg0 error) *MockStateCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateCall) Do(f func(context.Context, model.UUID, model.ModelType, model0.GlobalModelCreationArgs) error) *MockStateCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateCall) DoAndReturn(f func(context.Context, model.UUID, model.ModelType, model0.GlobalModelCreationArgs) error) *MockStateCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockState) Delete(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStateMockRecorder) Delete(arg0, arg1 any) *MockStateDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockState)(nil).Delete), arg0, arg1)
	return &MockStateDeleteCall{Call: call}
}

// MockStateDeleteCall wrap *gomock.Call
type MockStateDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteCall) Return(arg0 error) *MockStateDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteCall) Do(f func(context.Context, model.UUID) error) *MockStateDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockStateDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetActivatedModelUUIDs mocks base method.
func (m *MockState) GetActivatedModelUUIDs(arg0 context.Context, arg1 []model.UUID) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivatedModelUUIDs", arg0, arg1)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivatedModelUUIDs indicates an expected call of GetActivatedModelUUIDs.
func (mr *MockStateMockRecorder) GetActivatedModelUUIDs(arg0, arg1 any) *MockStateGetActivatedModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivatedModelUUIDs", reflect.TypeOf((*MockState)(nil).GetActivatedModelUUIDs), arg0, arg1)
	return &MockStateGetActivatedModelUUIDsCall{Call: call}
}

// MockStateGetActivatedModelUUIDsCall wrap *gomock.Call
type MockStateGetActivatedModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetActivatedModelUUIDsCall) Return(arg0 []model.UUID, arg1 error) *MockStateGetActivatedModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetActivatedModelUUIDsCall) Do(f func(context.Context, []model.UUID) ([]model.UUID, error)) *MockStateGetActivatedModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetActivatedModelUUIDsCall) DoAndReturn(f func(context.Context, []model.UUID) ([]model.UUID, error)) *MockStateGetActivatedModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerModel mocks base method.
func (m *MockState) GetControllerModel(arg0 context.Context) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModel", arg0)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModel indicates an expected call of GetControllerModel.
func (mr *MockStateMockRecorder) GetControllerModel(arg0 any) *MockStateGetControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModel", reflect.TypeOf((*MockState)(nil).GetControllerModel), arg0)
	return &MockStateGetControllerModelCall{Call: call}
}

// MockStateGetControllerModelCall wrap *gomock.Call
type MockStateGetControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerModelCall) Return(arg0 model.Model, arg1 error) *MockStateGetControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerModelCall) Do(f func(context.Context) (model.Model, error)) *MockStateGetControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerModelCall) DoAndReturn(f func(context.Context) (model.Model, error)) *MockStateGetControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerModelUUID mocks base method.
func (m *MockState) GetControllerModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModelUUID indicates an expected call of GetControllerModelUUID.
func (mr *MockStateMockRecorder) GetControllerModelUUID(arg0 any) *MockStateGetControllerModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModelUUID", reflect.TypeOf((*MockState)(nil).GetControllerModelUUID), arg0)
	return &MockStateGetControllerModelUUIDCall{Call: call}
}

// MockStateGetControllerModelUUIDCall wrap *gomock.Call
type MockStateGetControllerModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModel mocks base method.
func (m *MockState) GetModel(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockStateMockRecorder) GetModel(arg0, arg1 any) *MockStateGetModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockState)(nil).GetModel), arg0, arg1)
	return &MockStateGetModelCall{Call: call}
}

// MockStateGetModelCall wrap *gomock.Call
type MockStateGetModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCall) Return(arg0 model.Model, arg1 error) *MockStateGetModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockStateGetModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockStateGetModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelByName mocks base method.
func (m *MockState) GetModelByName(arg0 context.Context, arg1, arg2 string) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockStateMockRecorder) GetModelByName(arg0, arg1, arg2 any) *MockStateGetModelByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockState)(nil).GetModelByName), arg0, arg1, arg2)
	return &MockStateGetModelByNameCall{Call: call}
}

// MockStateGetModelByNameCall wrap *gomock.Call
type MockStateGetModelByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelByNameCall) Return(arg0 model.Model, arg1 error) *MockStateGetModelByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelByNameCall) Do(f func(context.Context, string, string) (model.Model, error)) *MockStateGetModelByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelByNameCall) DoAndReturn(f func(context.Context, string, string) (model.Model, error)) *MockStateGetModelByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCloudAndCredential mocks base method.
func (m *MockState) GetModelCloudAndCredential(arg0 context.Context, arg1 model.UUID) (cloud0.UUID, credential.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudAndCredential", arg0, arg1)
	ret0, _ := ret[0].(cloud0.UUID)
	ret1, _ := ret[1].(credential.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelCloudAndCredential indicates an expected call of GetModelCloudAndCredential.
func (mr *MockStateMockRecorder) GetModelCloudAndCredential(arg0, arg1 any) *MockStateGetModelCloudAndCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudAndCredential", reflect.TypeOf((*MockState)(nil).GetModelCloudAndCredential), arg0, arg1)
	return &MockStateGetModelCloudAndCredentialCall{Call: call}
}

// MockStateGetModelCloudAndCredentialCall wrap *gomock.Call
type MockStateGetModelCloudAndCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCloudAndCredentialCall) Return(arg0 cloud0.UUID, arg1 credential.UUID, arg2 error) *MockStateGetModelCloudAndCredentialCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCloudAndCredentialCall) Do(f func(context.Context, model.UUID) (cloud0.UUID, credential.UUID, error)) *MockStateGetModelCloudAndCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCloudAndCredentialCall) DoAndReturn(f func(context.Context, model.UUID) (cloud0.UUID, credential.UUID, error)) *MockStateGetModelCloudAndCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCloudInfo mocks base method.
func (m *MockState) GetModelCloudInfo(arg0 context.Context, arg1 model.UUID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudInfo", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelCloudInfo indicates an expected call of GetModelCloudInfo.
func (mr *MockStateMockRecorder) GetModelCloudInfo(arg0, arg1 any) *MockStateGetModelCloudInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudInfo", reflect.TypeOf((*MockState)(nil).GetModelCloudInfo), arg0, arg1)
	return &MockStateGetModelCloudInfoCall{Call: call}
}

// MockStateGetModelCloudInfoCall wrap *gomock.Call
type MockStateGetModelCloudInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCloudInfoCall) Return(arg0, arg1 string, arg2 error) *MockStateGetModelCloudInfoCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCloudInfoCall) Do(f func(context.Context, model.UUID) (string, string, error)) *MockStateGetModelCloudInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCloudInfoCall) DoAndReturn(f func(context.Context, model.UUID) (string, string, error)) *MockStateGetModelCloudInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelLife mocks base method.
func (m *MockState) GetModelLife(arg0 context.Context, arg1 model.UUID) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelLife indicates an expected call of GetModelLife.
func (mr *MockStateMockRecorder) GetModelLife(arg0, arg1 any) *MockStateGetModelLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelLife", reflect.TypeOf((*MockState)(nil).GetModelLife), arg0, arg1)
	return &MockStateGetModelLifeCall{Call: call}
}

// MockStateGetModelLifeCall wrap *gomock.Call
type MockStateGetModelLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetModelLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelLifeCall) Do(f func(context.Context, model.UUID) (life.Life, error)) *MockStateGetModelLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelLifeCall) DoAndReturn(f func(context.Context, model.UUID) (life.Life, error)) *MockStateGetModelLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUsers mocks base method.
func (m *MockState) GetModelUsers(arg0 context.Context, arg1 model.UUID) ([]model.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUsers", arg0, arg1)
	ret0, _ := ret[0].([]model.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUsers indicates an expected call of GetModelUsers.
func (mr *MockStateMockRecorder) GetModelUsers(arg0, arg1 any) *MockStateGetModelUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUsers", reflect.TypeOf((*MockState)(nil).GetModelUsers), arg0, arg1)
	return &MockStateGetModelUsersCall{Call: call}
}

// MockStateGetModelUsersCall wrap *gomock.Call
type MockStateGetModelUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelUsersCall) Return(arg0 []model.ModelUserInfo, arg1 error) *MockStateGetModelUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelUsersCall) Do(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockStateGetModelUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelUsersCall) DoAndReturn(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockStateGetModelUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchActivatedModelsStatement mocks base method.
func (m *MockState) InitialWatchActivatedModelsStatement() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchActivatedModelsStatement")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// InitialWatchActivatedModelsStatement indicates an expected call of InitialWatchActivatedModelsStatement.
func (mr *MockStateMockRecorder) InitialWatchActivatedModelsStatement() *MockStateInitialWatchActivatedModelsStatementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchActivatedModelsStatement", reflect.TypeOf((*MockState)(nil).InitialWatchActivatedModelsStatement))
	return &MockStateInitialWatchActivatedModelsStatementCall{Call: call}
}

// MockStateInitialWatchActivatedModelsStatementCall wrap *gomock.Call
type MockStateInitialWatchActivatedModelsStatementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchActivatedModelsStatementCall) Return(arg0, arg1 string) *MockStateInitialWatchActivatedModelsStatementCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchActivatedModelsStatementCall) Do(f func() (string, string)) *MockStateInitialWatchActivatedModelsStatementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchActivatedModelsStatementCall) DoAndReturn(f func() (string, string)) *MockStateInitialWatchActivatedModelsStatementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchModelTableName mocks base method.
func (m *MockState) InitialWatchModelTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchModelTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// InitialWatchModelTableName indicates an expected call of InitialWatchModelTableName.
func (mr *MockStateMockRecorder) InitialWatchModelTableName() *MockStateInitialWatchModelTableNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchModelTableName", reflect.TypeOf((*MockState)(nil).InitialWatchModelTableName))
	return &MockStateInitialWatchModelTableNameCall{Call: call}
}

// MockStateInitialWatchModelTableNameCall wrap *gomock.Call
type MockStateInitialWatchModelTableNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchModelTableNameCall) Return(arg0 string) *MockStateInitialWatchModelTableNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchModelTableNameCall) Do(f func() string) *MockStateInitialWatchModelTableNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchModelTableNameCall) DoAndReturn(f func() string) *MockStateInitialWatchModelTableNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModels mocks base method.
func (m *MockState) ListAllModels(arg0 context.Context) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModels", arg0)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModels indicates an expected call of ListAllModels.
func (mr *MockStateMockRecorder) ListAllModels(arg0 any) *MockStateListAllModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModels", reflect.TypeOf((*MockState)(nil).ListAllModels), arg0)
	return &MockStateListAllModelsCall{Call: call}
}

// MockStateListAllModelsCall wrap *gomock.Call
type MockStateListAllModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListAllModelsCall) Return(arg0 []model.Model, arg1 error) *MockStateListAllModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListAllModelsCall) Do(f func(context.Context) ([]model.Model, error)) *MockStateListAllModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListAllModelsCall) DoAndReturn(f func(context.Context) ([]model.Model, error)) *MockStateListAllModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDs mocks base method.
func (m *MockState) ListModelUUIDs(arg0 context.Context) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDs", arg0)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDs indicates an expected call of ListModelUUIDs.
func (mr *MockStateMockRecorder) ListModelUUIDs(arg0 any) *MockStateListModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDs", reflect.TypeOf((*MockState)(nil).ListModelUUIDs), arg0)
	return &MockStateListModelUUIDsCall{Call: call}
}

// MockStateListModelUUIDsCall wrap *gomock.Call
type MockStateListModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelUUIDsCall) Return(arg0 []model.UUID, arg1 error) *MockStateListModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelUUIDsCall) Do(f func(context.Context) ([]model.UUID, error)) *MockStateListModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelUUIDsCall) DoAndReturn(f func(context.Context) ([]model.UUID, error)) *MockStateListModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDsForUser mocks base method.
func (m *MockState) ListModelUUIDsForUser(arg0 context.Context, arg1 user.UUID) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDsForUser indicates an expected call of ListModelUUIDsForUser.
func (mr *MockStateMockRecorder) ListModelUUIDsForUser(arg0, arg1 any) *MockStateListModelUUIDsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDsForUser", reflect.TypeOf((*MockState)(nil).ListModelUUIDsForUser), arg0, arg1)
	return &MockStateListModelUUIDsForUserCall{Call: call}
}

// MockStateListModelUUIDsForUserCall wrap *gomock.Call
type MockStateListModelUUIDsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelUUIDsForUserCall) Return(arg0 []model.UUID, arg1 error) *MockStateListModelUUIDsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelUUIDsForUserCall) Do(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockStateListModelUUIDsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelUUIDsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockStateListModelUUIDsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelsForUser mocks base method.
func (m *MockState) ListModelsForUser(arg0 context.Context, arg1 user.UUID) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelsForUser indicates an expected call of ListModelsForUser.
func (mr *MockStateMockRecorder) ListModelsForUser(arg0, arg1 any) *MockStateListModelsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsForUser", reflect.TypeOf((*MockState)(nil).ListModelsForUser), arg0, arg1)
	return &MockStateListModelsForUserCall{Call: call}
}

// MockStateListModelsForUserCall wrap *gomock.Call
type MockStateListModelsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelsForUserCall) Return(arg0 []model.Model, arg1 error) *MockStateListModelsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelsForUserCall) Do(f func(context.Context, user.UUID) ([]model.Model, error)) *MockStateListModelsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.Model, error)) *MockStateListModelsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCredential mocks base method.
func (m *MockState) UpdateCredential(arg0 context.Context, arg1 model.UUID, arg2 credential.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockStateMockRecorder) UpdateCredential(arg0, arg1, arg2 any) *MockStateUpdateCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockState)(nil).UpdateCredential), arg0, arg1, arg2)
	return &MockStateUpdateCredentialCall{Call: call}
}

// MockStateUpdateCredentialCall wrap *gomock.Call
type MockStateUpdateCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateCredentialCall) Return(arg0 error) *MockStateUpdateCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateCredentialCall) Do(f func(context.Context, model.UUID, credential.Key) error) *MockStateUpdateCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateCredentialCall) DoAndReturn(f func(context.Context, model.UUID, credential.Key) error) *MockStateUpdateCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelResourcesProvider is a mock of ModelResourcesProvider interface.
type MockModelResourcesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockModelResourcesProviderMockRecorder
}

// MockModelResourcesProviderMockRecorder is the mock recorder for MockModelResourcesProvider.
type MockModelResourcesProviderMockRecorder struct {
	mock *MockModelResourcesProvider
}

// NewMockModelResourcesProvider creates a new mock instance.
func NewMockModelResourcesProvider(ctrl *gomock.Controller) *MockModelResourcesProvider {
	mock := &MockModelResourcesProvider{ctrl: ctrl}
	mock.recorder = &MockModelResourcesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelResourcesProvider) EXPECT() *MockModelResourcesProviderMockRecorder {
	return m.recorder
}

// CreateModelResources mocks base method.
func (m *MockModelResourcesProvider) CreateModelResources(arg0 context.Context, arg1 environs.CreateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelResources", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModelResources indicates an expected call of CreateModelResources.
func (mr *MockModelResourcesProviderMockRecorder) CreateModelResources(arg0, arg1 any) *MockModelResourcesProviderCreateModelResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelResources", reflect.TypeOf((*MockModelResourcesProvider)(nil).CreateModelResources), arg0, arg1)
	return &MockModelResourcesProviderCreateModelResourcesCall{Call: call}
}

// MockModelResourcesProviderCreateModelResourcesCall wrap *gomock.Call
type MockModelResourcesProviderCreateModelResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelResourcesProviderCreateModelResourcesCall) Return(arg0 error) *MockModelResourcesProviderCreateModelResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelResourcesProviderCreateModelResourcesCall) Do(f func(context.Context, environs.CreateParams) error) *MockModelResourcesProviderCreateModelResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelResourcesProviderCreateModelResourcesCall) DoAndReturn(f func(context.Context, environs.CreateParams) error) *MockModelResourcesProviderCreateModelResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateProviderForNewModel mocks base method.
func (m *MockModelResourcesProvider) ValidateProviderForNewModel(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProviderForNewModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProviderForNewModel indicates an expected call of ValidateProviderForNewModel.
func (mr *MockModelResourcesProviderMockRecorder) ValidateProviderForNewModel(arg0 any) *MockModelResourcesProviderValidateProviderForNewModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProviderForNewModel", reflect.TypeOf((*MockModelResourcesProvider)(nil).ValidateProviderForNewModel), arg0)
	return &MockModelResourcesProviderValidateProviderForNewModelCall{Call: call}
}

// MockModelResourcesProviderValidateProviderForNewModelCall wrap *gomock.Call
type MockModelResourcesProviderValidateProviderForNewModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelResourcesProviderValidateProviderForNewModelCall) Return(arg0 error) *MockModelResourcesProviderValidateProviderForNewModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelResourcesProviderValidateProviderForNewModelCall) Do(f func(context.Context) error) *MockModelResourcesProviderValidateProviderForNewModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelResourcesProviderValidateProviderForNewModelCall) DoAndReturn(f func(context.Context) error) *MockModelResourcesProviderValidateProviderForNewModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudInfoProvider is a mock of CloudInfoProvider interface.
type MockCloudInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCloudInfoProviderMockRecorder
}

// MockCloudInfoProviderMockRecorder is the mock recorder for MockCloudInfoProvider.
type MockCloudInfoProviderMockRecorder struct {
	mock *MockCloudInfoProvider
}

// NewMockCloudInfoProvider creates a new mock instance.
func NewMockCloudInfoProvider(ctrl *gomock.Controller) *MockCloudInfoProvider {
	mock := &MockCloudInfoProvider{ctrl: ctrl}
	mock.recorder = &MockCloudInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudInfoProvider) EXPECT() *MockCloudInfoProviderMockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *MockCloudInfoProvider) APIVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIVersion indicates an expected call of APIVersion.
func (mr *MockCloudInfoProviderMockRecorder) APIVersion() *MockCloudInfoProviderAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*MockCloudInfoProvider)(nil).APIVersion))
	return &MockCloudInfoProviderAPIVersionCall{Call: call}
}

// MockCloudInfoProviderAPIVersionCall wrap *gomock.Call
type MockCloudInfoProviderAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudInfoProviderAPIVersionCall) Return(arg0 string, arg1 error) *MockCloudInfoProviderAPIVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudInfoProviderAPIVersionCall) Do(f func() (string, error)) *MockCloudInfoProviderAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudInfoProviderAPIVersionCall) DoAndReturn(f func() (string, error)) *MockCloudInfoProviderAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(arg0 eventsource.NamespaceQuery, arg1 eventsource.Mapper, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyMapperWatcher(arg0 eventsource.Mapper, arg1 eventsource.FilterOption, arg2 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyMapperWatcher indicates an expected call of NewNotifyMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyMapperWatcher(arg0, arg1 any, arg2 ...any) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) Do(f func(eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) DoAndReturn(f func(eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 eventsource.FilterOption, arg1 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0 any, arg1 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
