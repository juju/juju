// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelmigration/service (interfaces: InstanceProvider,ResourceProvider,ModelState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/modelmigration/service InstanceProvider,ResourceProvider,ModelState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	set "github.com/juju/collections/set"
	envcontext "github.com/juju/juju/environs/envcontext"
	instances "github.com/juju/juju/environs/instances"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceProvider is a mock of InstanceProvider interface.
type MockInstanceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceProviderMockRecorder
}

// MockInstanceProviderMockRecorder is the mock recorder for MockInstanceProvider.
type MockInstanceProviderMockRecorder struct {
	mock *MockInstanceProvider
}

// NewMockInstanceProvider creates a new mock instance.
func NewMockInstanceProvider(ctrl *gomock.Controller) *MockInstanceProvider {
	mock := &MockInstanceProvider{ctrl: ctrl}
	mock.recorder = &MockInstanceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceProvider) EXPECT() *MockInstanceProviderMockRecorder {
	return m.recorder
}

// AllInstances mocks base method.
func (m *MockInstanceProvider) AllInstances(arg0 envcontext.ProviderCallContext) ([]instances.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInstances", arg0)
	ret0, _ := ret[0].([]instances.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInstances indicates an expected call of AllInstances.
func (mr *MockInstanceProviderMockRecorder) AllInstances(arg0 any) *MockInstanceProviderAllInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInstances", reflect.TypeOf((*MockInstanceProvider)(nil).AllInstances), arg0)
	return &MockInstanceProviderAllInstancesCall{Call: call}
}

// MockInstanceProviderAllInstancesCall wrap *gomock.Call
type MockInstanceProviderAllInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceProviderAllInstancesCall) Return(arg0 []instances.Instance, arg1 error) *MockInstanceProviderAllInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceProviderAllInstancesCall) Do(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockInstanceProviderAllInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceProviderAllInstancesCall) DoAndReturn(f func(envcontext.ProviderCallContext) ([]instances.Instance, error)) *MockInstanceProviderAllInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceProvider is a mock of ResourceProvider interface.
type MockResourceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockResourceProviderMockRecorder
}

// MockResourceProviderMockRecorder is the mock recorder for MockResourceProvider.
type MockResourceProviderMockRecorder struct {
	mock *MockResourceProvider
}

// NewMockResourceProvider creates a new mock instance.
func NewMockResourceProvider(ctrl *gomock.Controller) *MockResourceProvider {
	mock := &MockResourceProvider{ctrl: ctrl}
	mock.recorder = &MockResourceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceProvider) EXPECT() *MockResourceProviderMockRecorder {
	return m.recorder
}

// AdoptResources mocks base method.
func (m *MockResourceProvider) AdoptResources(arg0 envcontext.ProviderCallContext, arg1 string, arg2 version.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdoptResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdoptResources indicates an expected call of AdoptResources.
func (mr *MockResourceProviderMockRecorder) AdoptResources(arg0, arg1, arg2 any) *MockResourceProviderAdoptResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdoptResources", reflect.TypeOf((*MockResourceProvider)(nil).AdoptResources), arg0, arg1, arg2)
	return &MockResourceProviderAdoptResourcesCall{Call: call}
}

// MockResourceProviderAdoptResourcesCall wrap *gomock.Call
type MockResourceProviderAdoptResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceProviderAdoptResourcesCall) Return(arg0 error) *MockResourceProviderAdoptResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceProviderAdoptResourcesCall) Do(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockResourceProviderAdoptResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceProviderAdoptResourcesCall) DoAndReturn(f func(envcontext.ProviderCallContext, string, version.Number) error) *MockResourceProviderAdoptResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// GetAllInstanceIDs mocks base method.
func (m *MockModelState) GetAllInstanceIDs(arg0 context.Context) (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInstanceIDs", arg0)
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInstanceIDs indicates an expected call of GetAllInstanceIDs.
func (mr *MockModelStateMockRecorder) GetAllInstanceIDs(arg0 any) *MockModelStateGetAllInstanceIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInstanceIDs", reflect.TypeOf((*MockModelState)(nil).GetAllInstanceIDs), arg0)
	return &MockModelStateGetAllInstanceIDsCall{Call: call}
}

// MockModelStateGetAllInstanceIDsCall wrap *gomock.Call
type MockModelStateGetAllInstanceIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetAllInstanceIDsCall) Return(arg0 set.Strings, arg1 error) *MockModelStateGetAllInstanceIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetAllInstanceIDsCall) Do(f func(context.Context) (set.Strings, error)) *MockModelStateGetAllInstanceIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetAllInstanceIDsCall) DoAndReturn(f func(context.Context) (set.Strings, error)) *MockModelStateGetAllInstanceIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerUUID mocks base method.
func (m *MockModelState) GetControllerUUID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerUUID indicates an expected call of GetControllerUUID.
func (mr *MockModelStateMockRecorder) GetControllerUUID(arg0 any) *MockModelStateGetControllerUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerUUID", reflect.TypeOf((*MockModelState)(nil).GetControllerUUID), arg0)
	return &MockModelStateGetControllerUUIDCall{Call: call}
}

// MockModelStateGetControllerUUIDCall wrap *gomock.Call
type MockModelStateGetControllerUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetControllerUUIDCall) Return(arg0 string, arg1 error) *MockModelStateGetControllerUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetControllerUUIDCall) Do(f func(context.Context) (string, error)) *MockModelStateGetControllerUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetControllerUUIDCall) DoAndReturn(f func(context.Context) (string, error)) *MockModelStateGetControllerUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
