// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/containerimageresourcestore/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/containerimageresourcestore/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	store "github.com/juju/juju/core/resource/store"
	containerimageresourcestore "github.com/juju/juju/domain/containerimageresourcestore"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetContainerImageMetadata mocks base method.
func (m *MockState) GetContainerImageMetadata(arg0 context.Context, arg1 string) (containerimageresourcestore.ContainerImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerImageMetadata", arg0, arg1)
	ret0, _ := ret[0].(containerimageresourcestore.ContainerImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerImageMetadata indicates an expected call of GetContainerImageMetadata.
func (mr *MockStateMockRecorder) GetContainerImageMetadata(arg0, arg1 any) *MockStateGetContainerImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerImageMetadata", reflect.TypeOf((*MockState)(nil).GetContainerImageMetadata), arg0, arg1)
	return &MockStateGetContainerImageMetadataCall{Call: call}
}

// MockStateGetContainerImageMetadataCall wrap *gomock.Call
type MockStateGetContainerImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetContainerImageMetadataCall) Return(arg0 containerimageresourcestore.ContainerImageMetadata, arg1 error) *MockStateGetContainerImageMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetContainerImageMetadataCall) Do(f func(context.Context, string) (containerimageresourcestore.ContainerImageMetadata, error)) *MockStateGetContainerImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetContainerImageMetadataCall) DoAndReturn(f func(context.Context, string) (containerimageresourcestore.ContainerImageMetadata, error)) *MockStateGetContainerImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutContainerImageMetadata mocks base method.
func (m *MockState) PutContainerImageMetadata(arg0 context.Context, arg1, arg2, arg3, arg4 string) (store.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContainerImageMetadata", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(store.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContainerImageMetadata indicates an expected call of PutContainerImageMetadata.
func (mr *MockStateMockRecorder) PutContainerImageMetadata(arg0, arg1, arg2, arg3, arg4 any) *MockStatePutContainerImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContainerImageMetadata", reflect.TypeOf((*MockState)(nil).PutContainerImageMetadata), arg0, arg1, arg2, arg3, arg4)
	return &MockStatePutContainerImageMetadataCall{Call: call}
}

// MockStatePutContainerImageMetadataCall wrap *gomock.Call
type MockStatePutContainerImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePutContainerImageMetadataCall) Return(arg0 store.ID, arg1 error) *MockStatePutContainerImageMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePutContainerImageMetadataCall) Do(f func(context.Context, string, string, string, string) (store.ID, error)) *MockStatePutContainerImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePutContainerImageMetadataCall) DoAndReturn(f func(context.Context, string, string, string, string) (store.ID, error)) *MockStatePutContainerImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveContainerImageMetadata mocks base method.
func (m *MockState) RemoveContainerImageMetadata(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainerImageMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainerImageMetadata indicates an expected call of RemoveContainerImageMetadata.
func (mr *MockStateMockRecorder) RemoveContainerImageMetadata(arg0, arg1 any) *MockStateRemoveContainerImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainerImageMetadata", reflect.TypeOf((*MockState)(nil).RemoveContainerImageMetadata), arg0, arg1)
	return &MockStateRemoveContainerImageMetadataCall{Call: call}
}

// MockStateRemoveContainerImageMetadataCall wrap *gomock.Call
type MockStateRemoveContainerImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveContainerImageMetadataCall) Return(arg0 error) *MockStateRemoveContainerImageMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveContainerImageMetadataCall) Do(f func(context.Context, string) error) *MockStateRemoveContainerImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveContainerImageMetadataCall) DoAndReturn(f func(context.Context, string) error) *MockStateRemoveContainerImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
