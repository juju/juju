// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/operation/service (interfaces: State,LeadershipService)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/operation/service State,LeadershipService
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	operation "github.com/juju/juju/domain/operation"
	internal "github.com/juju/juju/domain/operation/internal"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddActionOperation mocks base method.
func (m *MockState) AddActionOperation(arg0 context.Context, arg1 uuid.UUID, arg2 []unit.Name, arg3 operation.TaskArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActionOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActionOperation indicates an expected call of AddActionOperation.
func (mr *MockStateMockRecorder) AddActionOperation(arg0, arg1, arg2, arg3 any) *MockStateAddActionOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActionOperation", reflect.TypeOf((*MockState)(nil).AddActionOperation), arg0, arg1, arg2, arg3)
	return &MockStateAddActionOperationCall{Call: call}
}

// MockStateAddActionOperationCall wrap *gomock.Call
type MockStateAddActionOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddActionOperationCall) Return(arg0 operation.RunResult, arg1 error) *MockStateAddActionOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddActionOperationCall) Do(f func(context.Context, uuid.UUID, []unit.Name, operation.TaskArgs) (operation.RunResult, error)) *MockStateAddActionOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddActionOperationCall) DoAndReturn(f func(context.Context, uuid.UUID, []unit.Name, operation.TaskArgs) (operation.RunResult, error)) *MockStateAddActionOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddExecOperation mocks base method.
func (m *MockState) AddExecOperation(arg0 context.Context, arg1 uuid.UUID, arg2 internal.ReceiversWithResolvedLeaders, arg3 operation.ExecArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExecOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExecOperation indicates an expected call of AddExecOperation.
func (mr *MockStateMockRecorder) AddExecOperation(arg0, arg1, arg2, arg3 any) *MockStateAddExecOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExecOperation", reflect.TypeOf((*MockState)(nil).AddExecOperation), arg0, arg1, arg2, arg3)
	return &MockStateAddExecOperationCall{Call: call}
}

// MockStateAddExecOperationCall wrap *gomock.Call
type MockStateAddExecOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddExecOperationCall) Return(arg0 operation.RunResult, arg1 error) *MockStateAddExecOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddExecOperationCall) Do(f func(context.Context, uuid.UUID, internal.ReceiversWithResolvedLeaders, operation.ExecArgs) (operation.RunResult, error)) *MockStateAddExecOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddExecOperationCall) DoAndReturn(f func(context.Context, uuid.UUID, internal.ReceiversWithResolvedLeaders, operation.ExecArgs) (operation.RunResult, error)) *MockStateAddExecOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddExecOperationOnAllMachines mocks base method.
func (m *MockState) AddExecOperationOnAllMachines(arg0 context.Context, arg1 uuid.UUID, arg2 operation.ExecArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExecOperationOnAllMachines", arg0, arg1, arg2)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExecOperationOnAllMachines indicates an expected call of AddExecOperationOnAllMachines.
func (mr *MockStateMockRecorder) AddExecOperationOnAllMachines(arg0, arg1, arg2 any) *MockStateAddExecOperationOnAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExecOperationOnAllMachines", reflect.TypeOf((*MockState)(nil).AddExecOperationOnAllMachines), arg0, arg1, arg2)
	return &MockStateAddExecOperationOnAllMachinesCall{Call: call}
}

// MockStateAddExecOperationOnAllMachinesCall wrap *gomock.Call
type MockStateAddExecOperationOnAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddExecOperationOnAllMachinesCall) Return(arg0 operation.RunResult, arg1 error) *MockStateAddExecOperationOnAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddExecOperationOnAllMachinesCall) Do(f func(context.Context, uuid.UUID, operation.ExecArgs) (operation.RunResult, error)) *MockStateAddExecOperationOnAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddExecOperationOnAllMachinesCall) DoAndReturn(f func(context.Context, uuid.UUID, operation.ExecArgs) (operation.RunResult, error)) *MockStateAddExecOperationOnAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CancelTask mocks base method.
func (m *MockState) CancelTask(arg0 context.Context, arg1 string) (operation.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", arg0, arg1)
	ret0, _ := ret[0].(operation.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockStateMockRecorder) CancelTask(arg0, arg1 any) *MockStateCancelTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockState)(nil).CancelTask), arg0, arg1)
	return &MockStateCancelTaskCall{Call: call}
}

// MockStateCancelTaskCall wrap *gomock.Call
type MockStateCancelTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCancelTaskCall) Return(arg0 operation.Task, arg1 error) *MockStateCancelTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCancelTaskCall) Do(f func(context.Context, string) (operation.Task, error)) *MockStateCancelTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCancelTaskCall) DoAndReturn(f func(context.Context, string) (operation.Task, error)) *MockStateCancelTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilterTaskUUIDsForMachine mocks base method.
func (m *MockState) FilterTaskUUIDsForMachine(arg0 context.Context, arg1 []string, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTaskUUIDsForMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTaskUUIDsForMachine indicates an expected call of FilterTaskUUIDsForMachine.
func (mr *MockStateMockRecorder) FilterTaskUUIDsForMachine(arg0, arg1, arg2 any) *MockStateFilterTaskUUIDsForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTaskUUIDsForMachine", reflect.TypeOf((*MockState)(nil).FilterTaskUUIDsForMachine), arg0, arg1, arg2)
	return &MockStateFilterTaskUUIDsForMachineCall{Call: call}
}

// MockStateFilterTaskUUIDsForMachineCall wrap *gomock.Call
type MockStateFilterTaskUUIDsForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateFilterTaskUUIDsForMachineCall) Return(arg0 []string, arg1 error) *MockStateFilterTaskUUIDsForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateFilterTaskUUIDsForMachineCall) Do(f func(context.Context, []string, string) ([]string, error)) *MockStateFilterTaskUUIDsForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateFilterTaskUUIDsForMachineCall) DoAndReturn(f func(context.Context, []string, string) ([]string, error)) *MockStateFilterTaskUUIDsForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilterTaskUUIDsForUnit mocks base method.
func (m *MockState) FilterTaskUUIDsForUnit(arg0 context.Context, arg1 []string, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTaskUUIDsForUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTaskUUIDsForUnit indicates an expected call of FilterTaskUUIDsForUnit.
func (mr *MockStateMockRecorder) FilterTaskUUIDsForUnit(arg0, arg1, arg2 any) *MockStateFilterTaskUUIDsForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTaskUUIDsForUnit", reflect.TypeOf((*MockState)(nil).FilterTaskUUIDsForUnit), arg0, arg1, arg2)
	return &MockStateFilterTaskUUIDsForUnitCall{Call: call}
}

// MockStateFilterTaskUUIDsForUnitCall wrap *gomock.Call
type MockStateFilterTaskUUIDsForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateFilterTaskUUIDsForUnitCall) Return(arg0 []string, arg1 error) *MockStateFilterTaskUUIDsForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateFilterTaskUUIDsForUnitCall) Do(f func(context.Context, []string, string) ([]string, error)) *MockStateFilterTaskUUIDsForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateFilterTaskUUIDsForUnitCall) DoAndReturn(f func(context.Context, []string, string) ([]string, error)) *MockStateFilterTaskUUIDsForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FinishTask mocks base method.
func (m *MockState) FinishTask(arg0 context.Context, arg1 internal.CompletedTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishTask indicates an expected call of FinishTask.
func (mr *MockStateMockRecorder) FinishTask(arg0, arg1 any) *MockStateFinishTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTask", reflect.TypeOf((*MockState)(nil).FinishTask), arg0, arg1)
	return &MockStateFinishTaskCall{Call: call}
}

// MockStateFinishTaskCall wrap *gomock.Call
type MockStateFinishTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateFinishTaskCall) Return(arg0 error) *MockStateFinishTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateFinishTaskCall) Do(f func(context.Context, internal.CompletedTask) error) *MockStateFinishTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateFinishTaskCall) DoAndReturn(f func(context.Context, internal.CompletedTask) error) *MockStateFinishTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIDsForAbortingTaskOfReceiver mocks base method.
func (m *MockState) GetIDsForAbortingTaskOfReceiver(arg0 context.Context, arg1 uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDsForAbortingTaskOfReceiver", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDsForAbortingTaskOfReceiver indicates an expected call of GetIDsForAbortingTaskOfReceiver.
func (mr *MockStateMockRecorder) GetIDsForAbortingTaskOfReceiver(arg0, arg1 any) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDsForAbortingTaskOfReceiver", reflect.TypeOf((*MockState)(nil).GetIDsForAbortingTaskOfReceiver), arg0, arg1)
	return &MockStateGetIDsForAbortingTaskOfReceiverCall{Call: call}
}

// MockStateGetIDsForAbortingTaskOfReceiverCall wrap *gomock.Call
type MockStateGetIDsForAbortingTaskOfReceiverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetIDsForAbortingTaskOfReceiverCall) Return(arg0 []string, arg1 error) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetIDsForAbortingTaskOfReceiverCall) Do(f func(context.Context, uuid.UUID) ([]string, error)) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetIDsForAbortingTaskOfReceiverCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]string, error)) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLatestTaskLogsByUUID mocks base method.
func (m *MockState) GetLatestTaskLogsByUUID(arg0 context.Context, arg1 string, arg2 time.Time) ([]internal.TaskLogMessage, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTaskLogsByUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]internal.TaskLogMessage)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestTaskLogsByUUID indicates an expected call of GetLatestTaskLogsByUUID.
func (mr *MockStateMockRecorder) GetLatestTaskLogsByUUID(arg0, arg1, arg2 any) *MockStateGetLatestTaskLogsByUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTaskLogsByUUID", reflect.TypeOf((*MockState)(nil).GetLatestTaskLogsByUUID), arg0, arg1, arg2)
	return &MockStateGetLatestTaskLogsByUUIDCall{Call: call}
}

// MockStateGetLatestTaskLogsByUUIDCall wrap *gomock.Call
type MockStateGetLatestTaskLogsByUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetLatestTaskLogsByUUIDCall) Return(arg0 []internal.TaskLogMessage, arg1 time.Time, arg2 error) *MockStateGetLatestTaskLogsByUUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetLatestTaskLogsByUUIDCall) Do(f func(context.Context, string, time.Time) ([]internal.TaskLogMessage, time.Time, error)) *MockStateGetLatestTaskLogsByUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetLatestTaskLogsByUUIDCall) DoAndReturn(f func(context.Context, string, time.Time) ([]internal.TaskLogMessage, time.Time, error)) *MockStateGetLatestTaskLogsByUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineTaskIDsWithStatus mocks base method.
func (m *MockState) GetMachineTaskIDsWithStatus(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTaskIDsWithStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineTaskIDsWithStatus indicates an expected call of GetMachineTaskIDsWithStatus.
func (mr *MockStateMockRecorder) GetMachineTaskIDsWithStatus(arg0, arg1, arg2 any) *MockStateGetMachineTaskIDsWithStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTaskIDsWithStatus", reflect.TypeOf((*MockState)(nil).GetMachineTaskIDsWithStatus), arg0, arg1, arg2)
	return &MockStateGetMachineTaskIDsWithStatusCall{Call: call}
}

// MockStateGetMachineTaskIDsWithStatusCall wrap *gomock.Call
type MockStateGetMachineTaskIDsWithStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineTaskIDsWithStatusCall) Return(arg0 []string, arg1 error) *MockStateGetMachineTaskIDsWithStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineTaskIDsWithStatusCall) Do(f func(context.Context, string, string) ([]string, error)) *MockStateGetMachineTaskIDsWithStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineTaskIDsWithStatusCall) DoAndReturn(f func(context.Context, string, string) ([]string, error)) *MockStateGetMachineTaskIDsWithStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUIDByName mocks base method.
func (m *MockState) GetMachineUUIDByName(arg0 context.Context, arg1 machine.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUIDByName indicates an expected call of GetMachineUUIDByName.
func (mr *MockStateMockRecorder) GetMachineUUIDByName(arg0, arg1 any) *MockStateGetMachineUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUIDByName", reflect.TypeOf((*MockState)(nil).GetMachineUUIDByName), arg0, arg1)
	return &MockStateGetMachineUUIDByNameCall{Call: call}
}

// MockStateGetMachineUUIDByNameCall wrap *gomock.Call
type MockStateGetMachineUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineUUIDByNameCall) Return(arg0 string, arg1 error) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineUUIDByNameCall) Do(f func(context.Context, machine.Name) (string, error)) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineUUIDByNameCall) DoAndReturn(f func(context.Context, machine.Name) (string, error)) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachines mocks base method.
func (m *MockState) GetMachines(arg0 context.Context, arg1 []machine.Name) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachines", arg0, arg1)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachines indicates an expected call of GetMachines.
func (mr *MockStateMockRecorder) GetMachines(arg0, arg1 any) *MockStateGetMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachines", reflect.TypeOf((*MockState)(nil).GetMachines), arg0, arg1)
	return &MockStateGetMachinesCall{Call: call}
}

// MockStateGetMachinesCall wrap *gomock.Call
type MockStateGetMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachinesCall) Return(arg0 []machine.Name, arg1 error) *MockStateGetMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachinesCall) Do(f func(context.Context, []machine.Name) ([]machine.Name, error)) *MockStateGetMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachinesCall) DoAndReturn(f func(context.Context, []machine.Name) ([]machine.Name, error)) *MockStateGetMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetReceiverFromTaskID mocks base method.
func (m *MockState) GetReceiverFromTaskID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiverFromTaskID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiverFromTaskID indicates an expected call of GetReceiverFromTaskID.
func (mr *MockStateMockRecorder) GetReceiverFromTaskID(arg0, arg1 any) *MockStateGetReceiverFromTaskIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiverFromTaskID", reflect.TypeOf((*MockState)(nil).GetReceiverFromTaskID), arg0, arg1)
	return &MockStateGetReceiverFromTaskIDCall{Call: call}
}

// MockStateGetReceiverFromTaskIDCall wrap *gomock.Call
type MockStateGetReceiverFromTaskIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetReceiverFromTaskIDCall) Return(arg0 string, arg1 error) *MockStateGetReceiverFromTaskIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetReceiverFromTaskIDCall) Do(f func(context.Context, string) (string, error)) *MockStateGetReceiverFromTaskIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetReceiverFromTaskIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateGetReceiverFromTaskIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTask mocks base method.
func (m *MockState) GetTask(arg0 context.Context, arg1 string) (operation.Task, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(operation.Task)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStateMockRecorder) GetTask(arg0, arg1 any) *MockStateGetTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockState)(nil).GetTask), arg0, arg1)
	return &MockStateGetTaskCall{Call: call}
}

// MockStateGetTaskCall wrap *gomock.Call
type MockStateGetTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetTaskCall) Return(arg0 operation.Task, arg1 *string, arg2 error) *MockStateGetTaskCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetTaskCall) Do(f func(context.Context, string) (operation.Task, *string, error)) *MockStateGetTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetTaskCall) DoAndReturn(f func(context.Context, string) (operation.Task, *string, error)) *MockStateGetTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTaskIDsByUUIDsFilteredByReceiverUUID mocks base method.
func (m *MockState) GetTaskIDsByUUIDsFilteredByReceiverUUID(arg0 context.Context, arg1 uuid.UUID, arg2 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskIDsByUUIDsFilteredByReceiverUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskIDsByUUIDsFilteredByReceiverUUID indicates an expected call of GetTaskIDsByUUIDsFilteredByReceiverUUID.
func (mr *MockStateMockRecorder) GetTaskIDsByUUIDsFilteredByReceiverUUID(arg0, arg1, arg2 any) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskIDsByUUIDsFilteredByReceiverUUID", reflect.TypeOf((*MockState)(nil).GetTaskIDsByUUIDsFilteredByReceiverUUID), arg0, arg1, arg2)
	return &MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall{Call: call}
}

// MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall wrap *gomock.Call
type MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall) Return(arg0 []string, arg1 error) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall) Do(f func(context.Context, uuid.UUID, []string) ([]string, error)) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall) DoAndReturn(f func(context.Context, uuid.UUID, []string) ([]string, error)) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTaskStatusByID mocks base method.
func (m *MockState) GetTaskStatusByID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatusByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatusByID indicates an expected call of GetTaskStatusByID.
func (mr *MockStateMockRecorder) GetTaskStatusByID(arg0, arg1 any) *MockStateGetTaskStatusByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatusByID", reflect.TypeOf((*MockState)(nil).GetTaskStatusByID), arg0, arg1)
	return &MockStateGetTaskStatusByIDCall{Call: call}
}

// MockStateGetTaskStatusByIDCall wrap *gomock.Call
type MockStateGetTaskStatusByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetTaskStatusByIDCall) Return(arg0 string, arg1 error) *MockStateGetTaskStatusByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetTaskStatusByIDCall) Do(f func(context.Context, string) (string, error)) *MockStateGetTaskStatusByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetTaskStatusByIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateGetTaskStatusByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTaskUUIDByID mocks base method.
func (m *MockState) GetTaskUUIDByID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskUUIDByID indicates an expected call of GetTaskUUIDByID.
func (mr *MockStateMockRecorder) GetTaskUUIDByID(arg0, arg1 any) *MockStateGetTaskUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskUUIDByID", reflect.TypeOf((*MockState)(nil).GetTaskUUIDByID), arg0, arg1)
	return &MockStateGetTaskUUIDByIDCall{Call: call}
}

// MockStateGetTaskUUIDByIDCall wrap *gomock.Call
type MockStateGetTaskUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetTaskUUIDByIDCall) Return(arg0 string, arg1 error) *MockStateGetTaskUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetTaskUUIDByIDCall) Do(f func(context.Context, string) (string, error)) *MockStateGetTaskUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetTaskUUIDByIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateGetTaskUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDByName mocks base method.
func (m *MockState) GetUnitUUIDByName(arg0 context.Context, arg1 unit.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDByName indicates an expected call of GetUnitUUIDByName.
func (mr *MockStateMockRecorder) GetUnitUUIDByName(arg0, arg1 any) *MockStateGetUnitUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDByName", reflect.TypeOf((*MockState)(nil).GetUnitUUIDByName), arg0, arg1)
	return &MockStateGetUnitUUIDByNameCall{Call: call}
}

// MockStateGetUnitUUIDByNameCall wrap *gomock.Call
type MockStateGetUnitUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDByNameCall) Return(arg0 string, arg1 error) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDByNameCall) Do(f func(context.Context, unit.Name) (string, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDByNameCall) DoAndReturn(f func(context.Context, unit.Name) (string, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementMachineTask mocks base method.
func (m *MockState) InitialWatchStatementMachineTask() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementMachineTask")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// InitialWatchStatementMachineTask indicates an expected call of InitialWatchStatementMachineTask.
func (mr *MockStateMockRecorder) InitialWatchStatementMachineTask() *MockStateInitialWatchStatementMachineTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementMachineTask", reflect.TypeOf((*MockState)(nil).InitialWatchStatementMachineTask))
	return &MockStateInitialWatchStatementMachineTaskCall{Call: call}
}

// MockStateInitialWatchStatementMachineTaskCall wrap *gomock.Call
type MockStateInitialWatchStatementMachineTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementMachineTaskCall) Return(arg0, arg1 string) *MockStateInitialWatchStatementMachineTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementMachineTaskCall) Do(f func() (string, string)) *MockStateInitialWatchStatementMachineTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementMachineTaskCall) DoAndReturn(f func() (string, string)) *MockStateInitialWatchStatementMachineTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementUnitTask mocks base method.
func (m *MockState) InitialWatchStatementUnitTask() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementUnitTask")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// InitialWatchStatementUnitTask indicates an expected call of InitialWatchStatementUnitTask.
func (mr *MockStateMockRecorder) InitialWatchStatementUnitTask() *MockStateInitialWatchStatementUnitTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementUnitTask", reflect.TypeOf((*MockState)(nil).InitialWatchStatementUnitTask))
	return &MockStateInitialWatchStatementUnitTaskCall{Call: call}
}

// MockStateInitialWatchStatementUnitTaskCall wrap *gomock.Call
type MockStateInitialWatchStatementUnitTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementUnitTaskCall) Return(arg0, arg1 string) *MockStateInitialWatchStatementUnitTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementUnitTaskCall) Do(f func() (string, string)) *MockStateInitialWatchStatementUnitTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementUnitTaskCall) DoAndReturn(f func() (string, string)) *MockStateInitialWatchStatementUnitTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LogTaskMessage mocks base method.
func (m *MockState) LogTaskMessage(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogTaskMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogTaskMessage indicates an expected call of LogTaskMessage.
func (mr *MockStateMockRecorder) LogTaskMessage(arg0, arg1, arg2 any) *MockStateLogTaskMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTaskMessage", reflect.TypeOf((*MockState)(nil).LogTaskMessage), arg0, arg1, arg2)
	return &MockStateLogTaskMessageCall{Call: call}
}

// MockStateLogTaskMessageCall wrap *gomock.Call
type MockStateLogTaskMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateLogTaskMessageCall) Return(arg0 error) *MockStateLogTaskMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateLogTaskMessageCall) Do(f func(context.Context, string, string) error) *MockStateLogTaskMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateLogTaskMessageCall) DoAndReturn(f func(context.Context, string, string) error) *MockStateLogTaskMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForTaskAbortingWatcher mocks base method.
func (m *MockState) NamespaceForTaskAbortingWatcher() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForTaskAbortingWatcher")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForTaskAbortingWatcher indicates an expected call of NamespaceForTaskAbortingWatcher.
func (mr *MockStateMockRecorder) NamespaceForTaskAbortingWatcher() *MockStateNamespaceForTaskAbortingWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForTaskAbortingWatcher", reflect.TypeOf((*MockState)(nil).NamespaceForTaskAbortingWatcher))
	return &MockStateNamespaceForTaskAbortingWatcherCall{Call: call}
}

// MockStateNamespaceForTaskAbortingWatcherCall wrap *gomock.Call
type MockStateNamespaceForTaskAbortingWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForTaskAbortingWatcherCall) Return(arg0 string) *MockStateNamespaceForTaskAbortingWatcherCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForTaskAbortingWatcherCall) Do(f func() string) *MockStateNamespaceForTaskAbortingWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForTaskAbortingWatcherCall) DoAndReturn(f func() string) *MockStateNamespaceForTaskAbortingWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForTaskLogWatcher mocks base method.
func (m *MockState) NamespaceForTaskLogWatcher() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForTaskLogWatcher")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForTaskLogWatcher indicates an expected call of NamespaceForTaskLogWatcher.
func (mr *MockStateMockRecorder) NamespaceForTaskLogWatcher() *MockStateNamespaceForTaskLogWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForTaskLogWatcher", reflect.TypeOf((*MockState)(nil).NamespaceForTaskLogWatcher))
	return &MockStateNamespaceForTaskLogWatcherCall{Call: call}
}

// MockStateNamespaceForTaskLogWatcherCall wrap *gomock.Call
type MockStateNamespaceForTaskLogWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForTaskLogWatcherCall) Return(arg0 string) *MockStateNamespaceForTaskLogWatcherCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForTaskLogWatcherCall) Do(f func() string) *MockStateNamespaceForTaskLogWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForTaskLogWatcherCall) DoAndReturn(f func() string) *MockStateNamespaceForTaskLogWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PruneOperations mocks base method.
func (m *MockState) PruneOperations(arg0 context.Context, arg1 time.Duration, arg2 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneOperations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PruneOperations indicates an expected call of PruneOperations.
func (mr *MockStateMockRecorder) PruneOperations(arg0, arg1, arg2 any) *MockStatePruneOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneOperations", reflect.TypeOf((*MockState)(nil).PruneOperations), arg0, arg1, arg2)
	return &MockStatePruneOperationsCall{Call: call}
}

// MockStatePruneOperationsCall wrap *gomock.Call
type MockStatePruneOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePruneOperationsCall) Return(arg0 []string, arg1 error) *MockStatePruneOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePruneOperationsCall) Do(f func(context.Context, time.Duration, int) ([]string, error)) *MockStatePruneOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePruneOperationsCall) DoAndReturn(f func(context.Context, time.Duration, int) ([]string, error)) *MockStatePruneOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartTask mocks base method.
func (m *MockState) StartTask(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTask indicates an expected call of StartTask.
func (mr *MockStateMockRecorder) StartTask(arg0, arg1 any) *MockStateStartTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockState)(nil).StartTask), arg0, arg1)
	return &MockStateStartTaskCall{Call: call}
}

// MockStateStartTaskCall wrap *gomock.Call
type MockStateStartTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateStartTaskCall) Return(arg0 error) *MockStateStartTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateStartTaskCall) Do(f func(context.Context, string) error) *MockStateStartTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateStartTaskCall) DoAndReturn(f func(context.Context, string) error) *MockStateStartTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeadershipService is a mock of LeadershipService interface.
type MockLeadershipService struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipServiceMockRecorder
}

// MockLeadershipServiceMockRecorder is the mock recorder for MockLeadershipService.
type MockLeadershipServiceMockRecorder struct {
	mock *MockLeadershipService
}

// NewMockLeadershipService creates a new mock instance.
func NewMockLeadershipService(ctrl *gomock.Controller) *MockLeadershipService {
	mock := &MockLeadershipService{ctrl: ctrl}
	mock.recorder = &MockLeadershipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadershipService) EXPECT() *MockLeadershipServiceMockRecorder {
	return m.recorder
}

// ApplicationLeader mocks base method.
func (m *MockLeadershipService) ApplicationLeader(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationLeader", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationLeader indicates an expected call of ApplicationLeader.
func (mr *MockLeadershipServiceMockRecorder) ApplicationLeader(arg0 any) *MockLeadershipServiceApplicationLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationLeader", reflect.TypeOf((*MockLeadershipService)(nil).ApplicationLeader), arg0)
	return &MockLeadershipServiceApplicationLeaderCall{Call: call}
}

// MockLeadershipServiceApplicationLeaderCall wrap *gomock.Call
type MockLeadershipServiceApplicationLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipServiceApplicationLeaderCall) Return(arg0 string, arg1 error) *MockLeadershipServiceApplicationLeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipServiceApplicationLeaderCall) Do(f func(string) (string, error)) *MockLeadershipServiceApplicationLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipServiceApplicationLeaderCall) DoAndReturn(f func(string) (string, error)) *MockLeadershipServiceApplicationLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
