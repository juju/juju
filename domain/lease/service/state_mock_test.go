// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/lease/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/lease/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	lease "github.com/juju/juju/core/lease"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// ClaimLease mocks base method.
func (m *MockState) ClaimLease(arg0 context.Context, arg1 uuid.UUID, arg2 lease.Key, arg3 lease.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimLease", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClaimLease indicates an expected call of ClaimLease.
func (mr *MockStateMockRecorder) ClaimLease(arg0, arg1, arg2, arg3 any) *MockStateClaimLeaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimLease", reflect.TypeOf((*MockState)(nil).ClaimLease), arg0, arg1, arg2, arg3)
	return &MockStateClaimLeaseCall{Call: call}
}

// MockStateClaimLeaseCall wrap *gomock.Call
type MockStateClaimLeaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateClaimLeaseCall) Return(arg0 error) *MockStateClaimLeaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateClaimLeaseCall) Do(f func(context.Context, uuid.UUID, lease.Key, lease.Request) error) *MockStateClaimLeaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateClaimLeaseCall) DoAndReturn(f func(context.Context, uuid.UUID, lease.Key, lease.Request) error) *MockStateClaimLeaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExpireLeases mocks base method.
func (m *MockState) ExpireLeases(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireLeases", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireLeases indicates an expected call of ExpireLeases.
func (mr *MockStateMockRecorder) ExpireLeases(arg0 any) *MockStateExpireLeasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireLeases", reflect.TypeOf((*MockState)(nil).ExpireLeases), arg0)
	return &MockStateExpireLeasesCall{Call: call}
}

// MockStateExpireLeasesCall wrap *gomock.Call
type MockStateExpireLeasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateExpireLeasesCall) Return(arg0 error) *MockStateExpireLeasesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateExpireLeasesCall) Do(f func(context.Context) error) *MockStateExpireLeasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateExpireLeasesCall) DoAndReturn(f func(context.Context) error) *MockStateExpireLeasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtendLease mocks base method.
func (m *MockState) ExtendLease(arg0 context.Context, arg1 lease.Key, arg2 lease.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendLease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendLease indicates an expected call of ExtendLease.
func (mr *MockStateMockRecorder) ExtendLease(arg0, arg1, arg2 any) *MockStateExtendLeaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendLease", reflect.TypeOf((*MockState)(nil).ExtendLease), arg0, arg1, arg2)
	return &MockStateExtendLeaseCall{Call: call}
}

// MockStateExtendLeaseCall wrap *gomock.Call
type MockStateExtendLeaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateExtendLeaseCall) Return(arg0 error) *MockStateExtendLeaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateExtendLeaseCall) Do(f func(context.Context, lease.Key, lease.Request) error) *MockStateExtendLeaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateExtendLeaseCall) DoAndReturn(f func(context.Context, lease.Key, lease.Request) error) *MockStateExtendLeaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeaseGroup mocks base method.
func (m *MockState) LeaseGroup(arg0 context.Context, arg1, arg2 string) (map[lease.Key]lease.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaseGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[lease.Key]lease.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaseGroup indicates an expected call of LeaseGroup.
func (mr *MockStateMockRecorder) LeaseGroup(arg0, arg1, arg2 any) *MockStateLeaseGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaseGroup", reflect.TypeOf((*MockState)(nil).LeaseGroup), arg0, arg1, arg2)
	return &MockStateLeaseGroupCall{Call: call}
}

// MockStateLeaseGroupCall wrap *gomock.Call
type MockStateLeaseGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateLeaseGroupCall) Return(arg0 map[lease.Key]lease.Info, arg1 error) *MockStateLeaseGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateLeaseGroupCall) Do(f func(context.Context, string, string) (map[lease.Key]lease.Info, error)) *MockStateLeaseGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateLeaseGroupCall) DoAndReturn(f func(context.Context, string, string) (map[lease.Key]lease.Info, error)) *MockStateLeaseGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Leases mocks base method.
func (m *MockState) Leases(arg0 context.Context, arg1 ...lease.Key) (map[lease.Key]lease.Info, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Leases", varargs...)
	ret0, _ := ret[0].(map[lease.Key]lease.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leases indicates an expected call of Leases.
func (mr *MockStateMockRecorder) Leases(arg0 any, arg1 ...any) *MockStateLeasesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leases", reflect.TypeOf((*MockState)(nil).Leases), varargs...)
	return &MockStateLeasesCall{Call: call}
}

// MockStateLeasesCall wrap *gomock.Call
type MockStateLeasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateLeasesCall) Return(arg0 map[lease.Key]lease.Info, arg1 error) *MockStateLeasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateLeasesCall) Do(f func(context.Context, ...lease.Key) (map[lease.Key]lease.Info, error)) *MockStateLeasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateLeasesCall) DoAndReturn(f func(context.Context, ...lease.Key) (map[lease.Key]lease.Info, error)) *MockStateLeasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PinLease mocks base method.
func (m *MockState) PinLease(arg0 context.Context, arg1 lease.Key, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinLease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PinLease indicates an expected call of PinLease.
func (mr *MockStateMockRecorder) PinLease(arg0, arg1, arg2 any) *MockStatePinLeaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinLease", reflect.TypeOf((*MockState)(nil).PinLease), arg0, arg1, arg2)
	return &MockStatePinLeaseCall{Call: call}
}

// MockStatePinLeaseCall wrap *gomock.Call
type MockStatePinLeaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePinLeaseCall) Return(arg0 error) *MockStatePinLeaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePinLeaseCall) Do(f func(context.Context, lease.Key, string) error) *MockStatePinLeaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePinLeaseCall) DoAndReturn(f func(context.Context, lease.Key, string) error) *MockStatePinLeaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pinned mocks base method.
func (m *MockState) Pinned(arg0 context.Context) (map[lease.Key][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pinned", arg0)
	ret0, _ := ret[0].(map[lease.Key][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pinned indicates an expected call of Pinned.
func (mr *MockStateMockRecorder) Pinned(arg0 any) *MockStatePinnedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pinned", reflect.TypeOf((*MockState)(nil).Pinned), arg0)
	return &MockStatePinnedCall{Call: call}
}

// MockStatePinnedCall wrap *gomock.Call
type MockStatePinnedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePinnedCall) Return(arg0 map[lease.Key][]string, arg1 error) *MockStatePinnedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePinnedCall) Do(f func(context.Context) (map[lease.Key][]string, error)) *MockStatePinnedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePinnedCall) DoAndReturn(f func(context.Context) (map[lease.Key][]string, error)) *MockStatePinnedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokeLease mocks base method.
func (m *MockState) RevokeLease(arg0 context.Context, arg1 lease.Key, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLease indicates an expected call of RevokeLease.
func (mr *MockStateMockRecorder) RevokeLease(arg0, arg1, arg2 any) *MockStateRevokeLeaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLease", reflect.TypeOf((*MockState)(nil).RevokeLease), arg0, arg1, arg2)
	return &MockStateRevokeLeaseCall{Call: call}
}

// MockStateRevokeLeaseCall wrap *gomock.Call
type MockStateRevokeLeaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRevokeLeaseCall) Return(arg0 error) *MockStateRevokeLeaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRevokeLeaseCall) Do(f func(context.Context, lease.Key, string) error) *MockStateRevokeLeaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRevokeLeaseCall) DoAndReturn(f func(context.Context, lease.Key, string) error) *MockStateRevokeLeaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnpinLease mocks base method.
func (m *MockState) UnpinLease(arg0 context.Context, arg1 lease.Key, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinLease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpinLease indicates an expected call of UnpinLease.
func (mr *MockStateMockRecorder) UnpinLease(arg0, arg1, arg2 any) *MockStateUnpinLeaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinLease", reflect.TypeOf((*MockState)(nil).UnpinLease), arg0, arg1, arg2)
	return &MockStateUnpinLeaseCall{Call: call}
}

// MockStateUnpinLeaseCall wrap *gomock.Call
type MockStateUnpinLeaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUnpinLeaseCall) Return(arg0 error) *MockStateUnpinLeaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUnpinLeaseCall) Do(f func(context.Context, lease.Key, string) error) *MockStateUnpinLeaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUnpinLeaseCall) DoAndReturn(f func(context.Context, lease.Key, string) error) *MockStateUnpinLeaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
