// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/upgrade/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/upgrade/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	changestream "github.com/juju/juju/core/changestream"
	upgrade "github.com/juju/juju/core/upgrade"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	upgrade0 "github.com/juju/juju/domain/upgrade"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// ActiveUpgrade mocks base method.
func (m *MockState) ActiveUpgrade(arg0 context.Context) (upgrade0.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveUpgrade", arg0)
	ret0, _ := ret[0].(upgrade0.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveUpgrade indicates an expected call of ActiveUpgrade.
func (mr *MockStateMockRecorder) ActiveUpgrade(arg0 any) *MockStateActiveUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveUpgrade", reflect.TypeOf((*MockState)(nil).ActiveUpgrade), arg0)
	return &MockStateActiveUpgradeCall{Call: call}
}

// MockStateActiveUpgradeCall wrap *gomock.Call
type MockStateActiveUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateActiveUpgradeCall) Return(arg0 upgrade0.UUID, arg1 error) *MockStateActiveUpgradeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateActiveUpgradeCall) Do(f func(context.Context) (upgrade0.UUID, error)) *MockStateActiveUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateActiveUpgradeCall) DoAndReturn(f func(context.Context) (upgrade0.UUID, error)) *MockStateActiveUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllProvisionedControllersReady mocks base method.
func (m *MockState) AllProvisionedControllersReady(arg0 context.Context, arg1 upgrade0.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllProvisionedControllersReady", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProvisionedControllersReady indicates an expected call of AllProvisionedControllersReady.
func (mr *MockStateMockRecorder) AllProvisionedControllersReady(arg0, arg1 any) *MockStateAllProvisionedControllersReadyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProvisionedControllersReady", reflect.TypeOf((*MockState)(nil).AllProvisionedControllersReady), arg0, arg1)
	return &MockStateAllProvisionedControllersReadyCall{Call: call}
}

// MockStateAllProvisionedControllersReadyCall wrap *gomock.Call
type MockStateAllProvisionedControllersReadyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllProvisionedControllersReadyCall) Return(arg0 bool, arg1 error) *MockStateAllProvisionedControllersReadyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllProvisionedControllersReadyCall) Do(f func(context.Context, upgrade0.UUID) (bool, error)) *MockStateAllProvisionedControllersReadyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllProvisionedControllersReadyCall) DoAndReturn(f func(context.Context, upgrade0.UUID) (bool, error)) *MockStateAllProvisionedControllersReadyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateUpgrade mocks base method.
func (m *MockState) CreateUpgrade(arg0 context.Context, arg1, arg2 version.Number) (upgrade0.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpgrade", arg0, arg1, arg2)
	ret0, _ := ret[0].(upgrade0.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpgrade indicates an expected call of CreateUpgrade.
func (mr *MockStateMockRecorder) CreateUpgrade(arg0, arg1, arg2 any) *MockStateCreateUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpgrade", reflect.TypeOf((*MockState)(nil).CreateUpgrade), arg0, arg1, arg2)
	return &MockStateCreateUpgradeCall{Call: call}
}

// MockStateCreateUpgradeCall wrap *gomock.Call
type MockStateCreateUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateUpgradeCall) Return(arg0 upgrade0.UUID, arg1 error) *MockStateCreateUpgradeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateUpgradeCall) Do(f func(context.Context, version.Number, version.Number) (upgrade0.UUID, error)) *MockStateCreateUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateUpgradeCall) DoAndReturn(f func(context.Context, version.Number, version.Number) (upgrade0.UUID, error)) *MockStateCreateUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetControllerDone mocks base method.
func (m *MockState) SetControllerDone(arg0 context.Context, arg1 upgrade0.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerDone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerDone indicates an expected call of SetControllerDone.
func (mr *MockStateMockRecorder) SetControllerDone(arg0, arg1, arg2 any) *MockStateSetControllerDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerDone", reflect.TypeOf((*MockState)(nil).SetControllerDone), arg0, arg1, arg2)
	return &MockStateSetControllerDoneCall{Call: call}
}

// MockStateSetControllerDoneCall wrap *gomock.Call
type MockStateSetControllerDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetControllerDoneCall) Return(arg0 error) *MockStateSetControllerDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetControllerDoneCall) Do(f func(context.Context, upgrade0.UUID, string) error) *MockStateSetControllerDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetControllerDoneCall) DoAndReturn(f func(context.Context, upgrade0.UUID, string) error) *MockStateSetControllerDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetControllerReady mocks base method.
func (m *MockState) SetControllerReady(arg0 context.Context, arg1 upgrade0.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerReady", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerReady indicates an expected call of SetControllerReady.
func (mr *MockStateMockRecorder) SetControllerReady(arg0, arg1, arg2 any) *MockStateSetControllerReadyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerReady", reflect.TypeOf((*MockState)(nil).SetControllerReady), arg0, arg1, arg2)
	return &MockStateSetControllerReadyCall{Call: call}
}

// MockStateSetControllerReadyCall wrap *gomock.Call
type MockStateSetControllerReadyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetControllerReadyCall) Return(arg0 error) *MockStateSetControllerReadyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetControllerReadyCall) Do(f func(context.Context, upgrade0.UUID, string) error) *MockStateSetControllerReadyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetControllerReadyCall) DoAndReturn(f func(context.Context, upgrade0.UUID, string) error) *MockStateSetControllerReadyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetDBUpgradeCompleted mocks base method.
func (m *MockState) SetDBUpgradeCompleted(arg0 context.Context, arg1 upgrade0.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDBUpgradeCompleted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDBUpgradeCompleted indicates an expected call of SetDBUpgradeCompleted.
func (mr *MockStateMockRecorder) SetDBUpgradeCompleted(arg0, arg1 any) *MockStateSetDBUpgradeCompletedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDBUpgradeCompleted", reflect.TypeOf((*MockState)(nil).SetDBUpgradeCompleted), arg0, arg1)
	return &MockStateSetDBUpgradeCompletedCall{Call: call}
}

// MockStateSetDBUpgradeCompletedCall wrap *gomock.Call
type MockStateSetDBUpgradeCompletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetDBUpgradeCompletedCall) Return(arg0 error) *MockStateSetDBUpgradeCompletedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetDBUpgradeCompletedCall) Do(f func(context.Context, upgrade0.UUID) error) *MockStateSetDBUpgradeCompletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetDBUpgradeCompletedCall) DoAndReturn(f func(context.Context, upgrade0.UUID) error) *MockStateSetDBUpgradeCompletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetDBUpgradeFailed mocks base method.
func (m *MockState) SetDBUpgradeFailed(arg0 context.Context, arg1 upgrade0.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDBUpgradeFailed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDBUpgradeFailed indicates an expected call of SetDBUpgradeFailed.
func (mr *MockStateMockRecorder) SetDBUpgradeFailed(arg0, arg1 any) *MockStateSetDBUpgradeFailedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDBUpgradeFailed", reflect.TypeOf((*MockState)(nil).SetDBUpgradeFailed), arg0, arg1)
	return &MockStateSetDBUpgradeFailedCall{Call: call}
}

// MockStateSetDBUpgradeFailedCall wrap *gomock.Call
type MockStateSetDBUpgradeFailedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetDBUpgradeFailedCall) Return(arg0 error) *MockStateSetDBUpgradeFailedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetDBUpgradeFailedCall) Do(f func(context.Context, upgrade0.UUID) error) *MockStateSetDBUpgradeFailedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetDBUpgradeFailedCall) DoAndReturn(f func(context.Context, upgrade0.UUID) error) *MockStateSetDBUpgradeFailedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartUpgrade mocks base method.
func (m *MockState) StartUpgrade(arg0 context.Context, arg1 upgrade0.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUpgrade", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartUpgrade indicates an expected call of StartUpgrade.
func (mr *MockStateMockRecorder) StartUpgrade(arg0, arg1 any) *MockStateStartUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUpgrade", reflect.TypeOf((*MockState)(nil).StartUpgrade), arg0, arg1)
	return &MockStateStartUpgradeCall{Call: call}
}

// MockStateStartUpgradeCall wrap *gomock.Call
type MockStateStartUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateStartUpgradeCall) Return(arg0 error) *MockStateStartUpgradeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateStartUpgradeCall) Do(f func(context.Context, upgrade0.UUID) error) *MockStateStartUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateStartUpgradeCall) DoAndReturn(f func(context.Context, upgrade0.UUID) error) *MockStateStartUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeInfo mocks base method.
func (m *MockState) UpgradeInfo(arg0 context.Context, arg1 upgrade0.UUID) (upgrade.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeInfo", arg0, arg1)
	ret0, _ := ret[0].(upgrade.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeInfo indicates an expected call of UpgradeInfo.
func (mr *MockStateMockRecorder) UpgradeInfo(arg0, arg1 any) *MockStateUpgradeInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeInfo", reflect.TypeOf((*MockState)(nil).UpgradeInfo), arg0, arg1)
	return &MockStateUpgradeInfoCall{Call: call}
}

// MockStateUpgradeInfoCall wrap *gomock.Call
type MockStateUpgradeInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpgradeInfoCall) Return(arg0 upgrade.Info, arg1 error) *MockStateUpgradeInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpgradeInfoCall) Do(f func(context.Context, upgrade0.UUID) (upgrade.Info, error)) *MockStateUpgradeInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpgradeInfoCall) DoAndReturn(f func(context.Context, upgrade0.UUID) (upgrade.Info, error)) *MockStateUpgradeInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockWatcherFactory) ISGOMOCK() struct{} {
	return struct{}{}
}

// NewValueMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewValueMapperWatcher(arg0, arg1 string, arg2 changestream.ChangeType, arg3 eventsource.Mapper) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewValueMapperWatcher", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewValueMapperWatcher indicates an expected call of NewValueMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewValueMapperWatcher(arg0, arg1, arg2, arg3 any) *MockWatcherFactoryNewValueMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewValueMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewValueMapperWatcher), arg0, arg1, arg2, arg3)
	return &MockWatcherFactoryNewValueMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewValueMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewValueMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewValueMapperWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewValueMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewValueMapperWatcherCall) Do(f func(string, string, changestream.ChangeType, eventsource.Mapper) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewValueMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewValueMapperWatcherCall) DoAndReturn(f func(string, string, changestream.ChangeType, eventsource.Mapper) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewValueMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
