// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/removal/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/removal/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	life "github.com/juju/juju/domain/life"
	removal "github.com/juju/juju/domain/removal"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ApplicationExists mocks base method.
func (m *MockState) ApplicationExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationExists indicates an expected call of ApplicationExists.
func (mr *MockStateMockRecorder) ApplicationExists(arg0, arg1 any) *MockStateApplicationExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationExists", reflect.TypeOf((*MockState)(nil).ApplicationExists), arg0, arg1)
	return &MockStateApplicationExistsCall{Call: call}
}

// MockStateApplicationExistsCall wrap *gomock.Call
type MockStateApplicationExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateApplicationExistsCall) Return(arg0 bool, arg1 error) *MockStateApplicationExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateApplicationExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStateApplicationExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateApplicationExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateApplicationExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationScheduleRemoval mocks base method.
func (m *MockState) ApplicationScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationScheduleRemoval indicates an expected call of ApplicationScheduleRemoval.
func (mr *MockStateMockRecorder) ApplicationScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockStateApplicationScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationScheduleRemoval", reflect.TypeOf((*MockState)(nil).ApplicationScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockStateApplicationScheduleRemovalCall{Call: call}
}

// MockStateApplicationScheduleRemovalCall wrap *gomock.Call
type MockStateApplicationScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateApplicationScheduleRemovalCall) Return(arg0 error) *MockStateApplicationScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateApplicationScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockStateApplicationScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateApplicationScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockStateApplicationScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteApplication mocks base method.
func (m *MockState) DeleteApplication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockStateMockRecorder) DeleteApplication(arg0, arg1 any) *MockStateDeleteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockState)(nil).DeleteApplication), arg0, arg1)
	return &MockStateDeleteApplicationCall{Call: call}
}

// MockStateDeleteApplicationCall wrap *gomock.Call
type MockStateDeleteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteApplicationCall) Return(arg0 error) *MockStateDeleteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteApplicationCall) Do(f func(context.Context, string) error) *MockStateDeleteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteApplicationCall) DoAndReturn(f func(context.Context, string) error) *MockStateDeleteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteJob mocks base method.
func (m *MockState) DeleteJob(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockStateMockRecorder) DeleteJob(arg0, arg1 any) *MockStateDeleteJobCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockState)(nil).DeleteJob), arg0, arg1)
	return &MockStateDeleteJobCall{Call: call}
}

// MockStateDeleteJobCall wrap *gomock.Call
type MockStateDeleteJobCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteJobCall) Return(arg0 error) *MockStateDeleteJobCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteJobCall) Do(f func(context.Context, string) error) *MockStateDeleteJobCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteJobCall) DoAndReturn(f func(context.Context, string) error) *MockStateDeleteJobCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRelation mocks base method.
func (m *MockState) DeleteRelation(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelation indicates an expected call of DeleteRelation.
func (mr *MockStateMockRecorder) DeleteRelation(arg0, arg1 any) *MockStateDeleteRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelation", reflect.TypeOf((*MockState)(nil).DeleteRelation), arg0, arg1)
	return &MockStateDeleteRelationCall{Call: call}
}

// MockStateDeleteRelationCall wrap *gomock.Call
type MockStateDeleteRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteRelationCall) Return(arg0 error) *MockStateDeleteRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteRelationCall) Do(f func(context.Context, string) error) *MockStateDeleteRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteRelationCall) DoAndReturn(f func(context.Context, string) error) *MockStateDeleteRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRelationUnits mocks base method.
func (m *MockState) DeleteRelationUnits(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationUnits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationUnits indicates an expected call of DeleteRelationUnits.
func (mr *MockStateMockRecorder) DeleteRelationUnits(arg0, arg1 any) *MockStateDeleteRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationUnits", reflect.TypeOf((*MockState)(nil).DeleteRelationUnits), arg0, arg1)
	return &MockStateDeleteRelationUnitsCall{Call: call}
}

// MockStateDeleteRelationUnitsCall wrap *gomock.Call
type MockStateDeleteRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteRelationUnitsCall) Return(arg0 error) *MockStateDeleteRelationUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteRelationUnitsCall) Do(f func(context.Context, string) error) *MockStateDeleteRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteRelationUnitsCall) DoAndReturn(f func(context.Context, string) error) *MockStateDeleteRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUnit mocks base method.
func (m *MockState) DeleteUnit(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockStateMockRecorder) DeleteUnit(arg0, arg1 any) *MockStateDeleteUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockState)(nil).DeleteUnit), arg0, arg1)
	return &MockStateDeleteUnitCall{Call: call}
}

// MockStateDeleteUnitCall wrap *gomock.Call
type MockStateDeleteUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteUnitCall) Return(arg0 error) *MockStateDeleteUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteUnitCall) Do(f func(context.Context, string) error) *MockStateDeleteUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteUnitCall) DoAndReturn(f func(context.Context, string) error) *MockStateDeleteUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureApplicationNotAliveCascade mocks base method.
func (m *MockState) EnsureApplicationNotAliveCascade(arg0 context.Context, arg1 string) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureApplicationNotAliveCascade", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnsureApplicationNotAliveCascade indicates an expected call of EnsureApplicationNotAliveCascade.
func (mr *MockStateMockRecorder) EnsureApplicationNotAliveCascade(arg0, arg1 any) *MockStateEnsureApplicationNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureApplicationNotAliveCascade", reflect.TypeOf((*MockState)(nil).EnsureApplicationNotAliveCascade), arg0, arg1)
	return &MockStateEnsureApplicationNotAliveCascadeCall{Call: call}
}

// MockStateEnsureApplicationNotAliveCascadeCall wrap *gomock.Call
type MockStateEnsureApplicationNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnsureApplicationNotAliveCascadeCall) Return(arg0, arg1 []string, arg2 error) *MockStateEnsureApplicationNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnsureApplicationNotAliveCascadeCall) Do(f func(context.Context, string) ([]string, []string, error)) *MockStateEnsureApplicationNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnsureApplicationNotAliveCascadeCall) DoAndReturn(f func(context.Context, string) ([]string, []string, error)) *MockStateEnsureApplicationNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureRelationNotAlive mocks base method.
func (m *MockState) EnsureRelationNotAlive(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRelationNotAlive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureRelationNotAlive indicates an expected call of EnsureRelationNotAlive.
func (mr *MockStateMockRecorder) EnsureRelationNotAlive(arg0, arg1 any) *MockStateEnsureRelationNotAliveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRelationNotAlive", reflect.TypeOf((*MockState)(nil).EnsureRelationNotAlive), arg0, arg1)
	return &MockStateEnsureRelationNotAliveCall{Call: call}
}

// MockStateEnsureRelationNotAliveCall wrap *gomock.Call
type MockStateEnsureRelationNotAliveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnsureRelationNotAliveCall) Return(arg0 error) *MockStateEnsureRelationNotAliveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnsureRelationNotAliveCall) Do(f func(context.Context, string) error) *MockStateEnsureRelationNotAliveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnsureRelationNotAliveCall) DoAndReturn(f func(context.Context, string) error) *MockStateEnsureRelationNotAliveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureUnitNotAliveCascade mocks base method.
func (m *MockState) EnsureUnitNotAliveCascade(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitNotAliveCascade", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureUnitNotAliveCascade indicates an expected call of EnsureUnitNotAliveCascade.
func (mr *MockStateMockRecorder) EnsureUnitNotAliveCascade(arg0, arg1 any) *MockStateEnsureUnitNotAliveCascadeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitNotAliveCascade", reflect.TypeOf((*MockState)(nil).EnsureUnitNotAliveCascade), arg0, arg1)
	return &MockStateEnsureUnitNotAliveCascadeCall{Call: call}
}

// MockStateEnsureUnitNotAliveCascadeCall wrap *gomock.Call
type MockStateEnsureUnitNotAliveCascadeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnsureUnitNotAliveCascadeCall) Return(arg0 string, arg1 error) *MockStateEnsureUnitNotAliveCascadeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnsureUnitNotAliveCascadeCall) Do(f func(context.Context, string) (string, error)) *MockStateEnsureUnitNotAliveCascadeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnsureUnitNotAliveCascadeCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateEnsureUnitNotAliveCascadeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllJobs mocks base method.
func (m *MockState) GetAllJobs(arg0 context.Context) ([]removal.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", arg0)
	ret0, _ := ret[0].([]removal.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockStateMockRecorder) GetAllJobs(arg0 any) *MockStateGetAllJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockState)(nil).GetAllJobs), arg0)
	return &MockStateGetAllJobsCall{Call: call}
}

// MockStateGetAllJobsCall wrap *gomock.Call
type MockStateGetAllJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllJobsCall) Return(arg0 []removal.Job, arg1 error) *MockStateGetAllJobsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllJobsCall) Do(f func(context.Context) ([]removal.Job, error)) *MockStateGetAllJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllJobsCall) DoAndReturn(f func(context.Context) ([]removal.Job, error)) *MockStateGetAllJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLife mocks base method.
func (m *MockState) GetApplicationLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLife indicates an expected call of GetApplicationLife.
func (mr *MockStateMockRecorder) GetApplicationLife(arg0, arg1 any) *MockStateGetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLife", reflect.TypeOf((*MockState)(nil).GetApplicationLife), arg0, arg1)
	return &MockStateGetApplicationLifeCall{Call: call}
}

// MockStateGetApplicationLifeCall wrap *gomock.Call
type MockStateGetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockStateGetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockStateGetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationNameAndUnitNameByUnitUUID mocks base method.
func (m *MockState) GetApplicationNameAndUnitNameByUnitUUID(arg0 context.Context, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationNameAndUnitNameByUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationNameAndUnitNameByUnitUUID indicates an expected call of GetApplicationNameAndUnitNameByUnitUUID.
func (mr *MockStateMockRecorder) GetApplicationNameAndUnitNameByUnitUUID(arg0, arg1 any) *MockStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationNameAndUnitNameByUnitUUID", reflect.TypeOf((*MockState)(nil).GetApplicationNameAndUnitNameByUnitUUID), arg0, arg1)
	return &MockStateGetApplicationNameAndUnitNameByUnitUUIDCall{Call: call}
}

// MockStateGetApplicationNameAndUnitNameByUnitUUIDCall wrap *gomock.Call
type MockStateGetApplicationNameAndUnitNameByUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationNameAndUnitNameByUnitUUIDCall) Return(arg0, arg1 string, arg2 error) *MockStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationNameAndUnitNameByUnitUUIDCall) Do(f func(context.Context, string) (string, string, error)) *MockStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationNameAndUnitNameByUnitUUIDCall) DoAndReturn(f func(context.Context, string) (string, string, error)) *MockStateGetApplicationNameAndUnitNameByUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationLife mocks base method.
func (m *MockState) GetRelationLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationLife indicates an expected call of GetRelationLife.
func (mr *MockStateMockRecorder) GetRelationLife(arg0, arg1 any) *MockStateGetRelationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationLife", reflect.TypeOf((*MockState)(nil).GetRelationLife), arg0, arg1)
	return &MockStateGetRelationLifeCall{Call: call}
}

// MockStateGetRelationLifeCall wrap *gomock.Call
type MockStateGetRelationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetRelationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockStateGetRelationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockStateGetRelationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockState) GetUnitLife(arg0 context.Context, arg1 string) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockStateMockRecorder) GetUnitLife(arg0, arg1 any) *MockStateGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockState)(nil).GetUnitLife), arg0, arg1)
	return &MockStateGetUnitLifeCall{Call: call}
}

// MockStateGetUnitLifeCall wrap *gomock.Call
type MockStateGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitLifeCall) Do(f func(context.Context, string) (life.Life, error)) *MockStateGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitLifeCall) DoAndReturn(f func(context.Context, string) (life.Life, error)) *MockStateGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineExists mocks base method.
func (m *MockState) MachineExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineExists indicates an expected call of MachineExists.
func (mr *MockStateMockRecorder) MachineExists(arg0, arg1 any) *MockStateMachineExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineExists", reflect.TypeOf((*MockState)(nil).MachineExists), arg0, arg1)
	return &MockStateMachineExistsCall{Call: call}
}

// MockStateMachineExistsCall wrap *gomock.Call
type MockStateMachineExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMachineExistsCall) Return(arg0 bool, arg1 error) *MockStateMachineExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMachineExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStateMachineExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMachineExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateMachineExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkUnitAsDead mocks base method.
func (m *MockState) MarkUnitAsDead(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkUnitAsDead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkUnitAsDead indicates an expected call of MarkUnitAsDead.
func (mr *MockStateMockRecorder) MarkUnitAsDead(arg0, arg1 any) *MockStateMarkUnitAsDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUnitAsDead", reflect.TypeOf((*MockState)(nil).MarkUnitAsDead), arg0, arg1)
	return &MockStateMarkUnitAsDeadCall{Call: call}
}

// MockStateMarkUnitAsDeadCall wrap *gomock.Call
type MockStateMarkUnitAsDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMarkUnitAsDeadCall) Return(arg0 error) *MockStateMarkUnitAsDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMarkUnitAsDeadCall) Do(f func(context.Context, string) error) *MockStateMarkUnitAsDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMarkUnitAsDeadCall) DoAndReturn(f func(context.Context, string) error) *MockStateMarkUnitAsDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchRemovals mocks base method.
func (m *MockState) NamespaceForWatchRemovals() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchRemovals")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchRemovals indicates an expected call of NamespaceForWatchRemovals.
func (mr *MockStateMockRecorder) NamespaceForWatchRemovals() *MockStateNamespaceForWatchRemovalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchRemovals", reflect.TypeOf((*MockState)(nil).NamespaceForWatchRemovals))
	return &MockStateNamespaceForWatchRemovalsCall{Call: call}
}

// MockStateNamespaceForWatchRemovalsCall wrap *gomock.Call
type MockStateNamespaceForWatchRemovalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchRemovalsCall) Return(arg0 string) *MockStateNamespaceForWatchRemovalsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchRemovalsCall) Do(f func() string) *MockStateNamespaceForWatchRemovalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchRemovalsCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchRemovalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationExists mocks base method.
func (m *MockState) RelationExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationExists indicates an expected call of RelationExists.
func (mr *MockStateMockRecorder) RelationExists(arg0, arg1 any) *MockStateRelationExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationExists", reflect.TypeOf((*MockState)(nil).RelationExists), arg0, arg1)
	return &MockStateRelationExistsCall{Call: call}
}

// MockStateRelationExistsCall wrap *gomock.Call
type MockStateRelationExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRelationExistsCall) Return(arg0 bool, arg1 error) *MockStateRelationExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRelationExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStateRelationExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRelationExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateRelationExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationScheduleRemoval mocks base method.
func (m *MockState) RelationScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelationScheduleRemoval indicates an expected call of RelationScheduleRemoval.
func (mr *MockStateMockRecorder) RelationScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockStateRelationScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationScheduleRemoval", reflect.TypeOf((*MockState)(nil).RelationScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockStateRelationScheduleRemovalCall{Call: call}
}

// MockStateRelationScheduleRemovalCall wrap *gomock.Call
type MockStateRelationScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRelationScheduleRemovalCall) Return(arg0 error) *MockStateRelationScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRelationScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockStateRelationScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRelationScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockStateRelationScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitExists mocks base method.
func (m *MockState) UnitExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitExists indicates an expected call of UnitExists.
func (mr *MockStateMockRecorder) UnitExists(arg0, arg1 any) *MockStateUnitExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitExists", reflect.TypeOf((*MockState)(nil).UnitExists), arg0, arg1)
	return &MockStateUnitExistsCall{Call: call}
}

// MockStateUnitExistsCall wrap *gomock.Call
type MockStateUnitExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUnitExistsCall) Return(arg0 bool, arg1 error) *MockStateUnitExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUnitExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStateUnitExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUnitExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateUnitExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitNamesInScope mocks base method.
func (m *MockState) UnitNamesInScope(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitNamesInScope", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitNamesInScope indicates an expected call of UnitNamesInScope.
func (mr *MockStateMockRecorder) UnitNamesInScope(arg0, arg1 any) *MockStateUnitNamesInScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitNamesInScope", reflect.TypeOf((*MockState)(nil).UnitNamesInScope), arg0, arg1)
	return &MockStateUnitNamesInScopeCall{Call: call}
}

// MockStateUnitNamesInScopeCall wrap *gomock.Call
type MockStateUnitNamesInScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUnitNamesInScopeCall) Return(arg0 []string, arg1 error) *MockStateUnitNamesInScopeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUnitNamesInScopeCall) Do(f func(context.Context, string) ([]string, error)) *MockStateUnitNamesInScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUnitNamesInScopeCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStateUnitNamesInScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitScheduleRemoval mocks base method.
func (m *MockState) UnitScheduleRemoval(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitScheduleRemoval", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnitScheduleRemoval indicates an expected call of UnitScheduleRemoval.
func (mr *MockStateMockRecorder) UnitScheduleRemoval(arg0, arg1, arg2, arg3, arg4 any) *MockStateUnitScheduleRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitScheduleRemoval", reflect.TypeOf((*MockState)(nil).UnitScheduleRemoval), arg0, arg1, arg2, arg3, arg4)
	return &MockStateUnitScheduleRemovalCall{Call: call}
}

// MockStateUnitScheduleRemovalCall wrap *gomock.Call
type MockStateUnitScheduleRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUnitScheduleRemovalCall) Return(arg0 error) *MockStateUnitScheduleRemovalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUnitScheduleRemovalCall) Do(f func(context.Context, string, string, bool, time.Time) error) *MockStateUnitScheduleRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUnitScheduleRemovalCall) DoAndReturn(f func(context.Context, string, string, bool, time.Time) error) *MockStateUnitScheduleRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
