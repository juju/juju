// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/objectstore/service (interfaces: State,WatcherFactory)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	changestream "github.com/juju/juju/core/changestream"
	objectstore "github.com/juju/juju/core/objectstore"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetAllMetadata mocks base method.
func (m *MockState) GetAllMetadata(arg0 context.Context) (map[string]objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetadata", arg0)
	ret0, _ := ret[0].(map[string]objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetadata indicates an expected call of GetAllMetadata.
func (mr *MockStateMockRecorder) GetAllMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetadata", reflect.TypeOf((*MockState)(nil).GetAllMetadata), arg0)
}

// GetMetadata mocks base method.
func (m *MockState) GetMetadata(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockStateMockRecorder) GetMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockState)(nil).GetMetadata), arg0, arg1)
}

// InitialWatchStatement mocks base method.
func (m *MockState) InitialWatchStatement() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatement")
	ret0, _ := ret[0].(string)
	return ret0
}

// InitialWatchStatement indicates an expected call of InitialWatchStatement.
func (mr *MockStateMockRecorder) InitialWatchStatement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatement", reflect.TypeOf((*MockState)(nil).InitialWatchStatement))
}

// PutMetadata mocks base method.
func (m *MockState) PutMetadata(arg0 context.Context, arg1 string, arg2 objectstore.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMetadata indicates an expected call of PutMetadata.
func (mr *MockStateMockRecorder) PutMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadata", reflect.TypeOf((*MockState)(nil).PutMetadata), arg0, arg1, arg2)
}

// RemoveMetadata mocks base method.
func (m *MockState) RemoveMetadata(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetadata indicates an expected call of RemoveMetadata.
func (mr *MockStateMockRecorder) RemoveMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetadata", reflect.TypeOf((*MockState)(nil).RemoveMetadata), arg0, arg1)
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceWatcher(arg0 string, arg1 changestream.ChangeType, arg2 string) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNamespaceWatcher", arg0, arg1, arg2)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceWatcher indicates an expected call of NewNamespaceWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceWatcher(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceWatcher), arg0, arg1, arg2)
}
