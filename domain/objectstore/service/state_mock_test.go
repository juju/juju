// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/objectstore/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/objectstore/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	changestream "github.com/juju/juju/core/changestream"
	objectstore "github.com/juju/juju/core/objectstore"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockState) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetMetadata mocks base method.
func (m *MockState) GetMetadata(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockStateMockRecorder) GetMetadata(arg0, arg1 any) *MockStateGetMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockState)(nil).GetMetadata), arg0, arg1)
	return &MockStateGetMetadataCall{Call: call}
}

// MockStateGetMetadataCall wrap *gomock.Call
type MockStateGetMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMetadataCall) Return(arg0 objectstore.Metadata, arg1 error) *MockStateGetMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMetadataCall) Do(f func(context.Context, string) (objectstore.Metadata, error)) *MockStateGetMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMetadataCall) DoAndReturn(f func(context.Context, string) (objectstore.Metadata, error)) *MockStateGetMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMetadataBySHA256 mocks base method.
func (m *MockState) GetMetadataBySHA256(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataBySHA256", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataBySHA256 indicates an expected call of GetMetadataBySHA256.
func (mr *MockStateMockRecorder) GetMetadataBySHA256(arg0, arg1 any) *MockStateGetMetadataBySHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataBySHA256", reflect.TypeOf((*MockState)(nil).GetMetadataBySHA256), arg0, arg1)
	return &MockStateGetMetadataBySHA256Call{Call: call}
}

// MockStateGetMetadataBySHA256Call wrap *gomock.Call
type MockStateGetMetadataBySHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMetadataBySHA256Call) Return(arg0 objectstore.Metadata, arg1 error) *MockStateGetMetadataBySHA256Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMetadataBySHA256Call) Do(f func(context.Context, string) (objectstore.Metadata, error)) *MockStateGetMetadataBySHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMetadataBySHA256Call) DoAndReturn(f func(context.Context, string) (objectstore.Metadata, error)) *MockStateGetMetadataBySHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMetadataBySHA256Prefix mocks base method.
func (m *MockState) GetMetadataBySHA256Prefix(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataBySHA256Prefix", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataBySHA256Prefix indicates an expected call of GetMetadataBySHA256Prefix.
func (mr *MockStateMockRecorder) GetMetadataBySHA256Prefix(arg0, arg1 any) *MockStateGetMetadataBySHA256PrefixCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataBySHA256Prefix", reflect.TypeOf((*MockState)(nil).GetMetadataBySHA256Prefix), arg0, arg1)
	return &MockStateGetMetadataBySHA256PrefixCall{Call: call}
}

// MockStateGetMetadataBySHA256PrefixCall wrap *gomock.Call
type MockStateGetMetadataBySHA256PrefixCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMetadataBySHA256PrefixCall) Return(arg0 objectstore.Metadata, arg1 error) *MockStateGetMetadataBySHA256PrefixCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMetadataBySHA256PrefixCall) Do(f func(context.Context, string) (objectstore.Metadata, error)) *MockStateGetMetadataBySHA256PrefixCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMetadataBySHA256PrefixCall) DoAndReturn(f func(context.Context, string) (objectstore.Metadata, error)) *MockStateGetMetadataBySHA256PrefixCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatement mocks base method.
func (m *MockState) InitialWatchStatement() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatement")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// InitialWatchStatement indicates an expected call of InitialWatchStatement.
func (mr *MockStateMockRecorder) InitialWatchStatement() *MockStateInitialWatchStatementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatement", reflect.TypeOf((*MockState)(nil).InitialWatchStatement))
	return &MockStateInitialWatchStatementCall{Call: call}
}

// MockStateInitialWatchStatementCall wrap *gomock.Call
type MockStateInitialWatchStatementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementCall) Return(arg0, arg1 string) *MockStateInitialWatchStatementCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementCall) Do(f func() (string, string)) *MockStateInitialWatchStatementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementCall) DoAndReturn(f func() (string, string)) *MockStateInitialWatchStatementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMetadata mocks base method.
func (m *MockState) ListMetadata(arg0 context.Context) ([]objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadata", arg0)
	ret0, _ := ret[0].([]objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadata indicates an expected call of ListMetadata.
func (mr *MockStateMockRecorder) ListMetadata(arg0 any) *MockStateListMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadata", reflect.TypeOf((*MockState)(nil).ListMetadata), arg0)
	return &MockStateListMetadataCall{Call: call}
}

// MockStateListMetadataCall wrap *gomock.Call
type MockStateListMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListMetadataCall) Return(arg0 []objectstore.Metadata, arg1 error) *MockStateListMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListMetadataCall) Do(f func(context.Context) ([]objectstore.Metadata, error)) *MockStateListMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListMetadataCall) DoAndReturn(f func(context.Context) ([]objectstore.Metadata, error)) *MockStateListMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutMetadata mocks base method.
func (m *MockState) PutMetadata(arg0 context.Context, arg1 objectstore.Metadata) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadata", arg0, arg1)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetadata indicates an expected call of PutMetadata.
func (mr *MockStateMockRecorder) PutMetadata(arg0, arg1 any) *MockStatePutMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadata", reflect.TypeOf((*MockState)(nil).PutMetadata), arg0, arg1)
	return &MockStatePutMetadataCall{Call: call}
}

// MockStatePutMetadataCall wrap *gomock.Call
type MockStatePutMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePutMetadataCall) Return(arg0 objectstore.UUID, arg1 error) *MockStatePutMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePutMetadataCall) Do(f func(context.Context, objectstore.Metadata) (objectstore.UUID, error)) *MockStatePutMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePutMetadataCall) DoAndReturn(f func(context.Context, objectstore.Metadata) (objectstore.UUID, error)) *MockStatePutMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveMetadata mocks base method.
func (m *MockState) RemoveMetadata(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetadata indicates an expected call of RemoveMetadata.
func (mr *MockStateMockRecorder) RemoveMetadata(arg0, arg1 any) *MockStateRemoveMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetadata", reflect.TypeOf((*MockState)(nil).RemoveMetadata), arg0, arg1)
	return &MockStateRemoveMetadataCall{Call: call}
}

// MockStateRemoveMetadataCall wrap *gomock.Call
type MockStateRemoveMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveMetadataCall) Return(arg0 error) *MockStateRemoveMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveMetadataCall) Do(f func(context.Context, string) error) *MockStateRemoveMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveMetadataCall) DoAndReturn(f func(context.Context, string) error) *MockStateRemoveMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockWatcherFactory) ISGOMOCK() struct{} {
	return struct{}{}
}

// NewNamespaceWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceWatcher(arg0 string, arg1 changestream.ChangeType, arg2 eventsource.NamespaceQuery) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNamespaceWatcher", arg0, arg1, arg2)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceWatcher indicates an expected call of NewNamespaceWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceWatcher(arg0, arg1, arg2 any) *MockWatcherFactoryNewNamespaceWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceWatcher), arg0, arg1, arg2)
	return &MockWatcherFactoryNewNamespaceWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceWatcherCall) Do(f func(string, changestream.ChangeType, eventsource.NamespaceQuery) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceWatcherCall) DoAndReturn(f func(string, changestream.ChangeType, eventsource.NamespaceQuery) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
