// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/lease (interfaces: Token,Checker,Revoker,LeaseManager,ModelLeaseManagerGetter)
//
// Generated by this command:
//
//	mockgen -typed -package domain -destination lease_mock_test.go github.com/juju/juju/core/lease Token,Checker,Revoker,LeaseManager,ModelLeaseManagerGetter
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	lease "github.com/juju/juju/core/lease"
	gomock "go.uber.org/mock/gomock"
)

// MockToken is a mock of Token interface.
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken.
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance.
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockToken) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockTokenMockRecorder) Check() *MockTokenCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockToken)(nil).Check))
	return &MockTokenCheckCall{Call: call}
}

// MockTokenCheckCall wrap *gomock.Call
type MockTokenCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTokenCheckCall) Return(arg0 error) *MockTokenCheckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTokenCheckCall) Do(f func() error) *MockTokenCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTokenCheckCall) DoAndReturn(f func() error) *MockTokenCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockChecker is a mock of Checker interface.
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
}

// MockCheckerMockRecorder is the mock recorder for MockChecker.
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance.
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockChecker) Token(arg0, arg1 string) lease.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0, arg1)
	ret0, _ := ret[0].(lease.Token)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockCheckerMockRecorder) Token(arg0, arg1 any) *MockCheckerTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockChecker)(nil).Token), arg0, arg1)
	return &MockCheckerTokenCall{Call: call}
}

// MockCheckerTokenCall wrap *gomock.Call
type MockCheckerTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckerTokenCall) Return(arg0 lease.Token) *MockCheckerTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckerTokenCall) Do(f func(string, string) lease.Token) *MockCheckerTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckerTokenCall) DoAndReturn(f func(string, string) lease.Token) *MockCheckerTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitUntilExpired mocks base method.
func (m *MockChecker) WaitUntilExpired(arg0 context.Context, arg1 string, arg2 chan<- struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilExpired", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilExpired indicates an expected call of WaitUntilExpired.
func (mr *MockCheckerMockRecorder) WaitUntilExpired(arg0, arg1, arg2 any) *MockCheckerWaitUntilExpiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilExpired", reflect.TypeOf((*MockChecker)(nil).WaitUntilExpired), arg0, arg1, arg2)
	return &MockCheckerWaitUntilExpiredCall{Call: call}
}

// MockCheckerWaitUntilExpiredCall wrap *gomock.Call
type MockCheckerWaitUntilExpiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckerWaitUntilExpiredCall) Return(arg0 error) *MockCheckerWaitUntilExpiredCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckerWaitUntilExpiredCall) Do(f func(context.Context, string, chan<- struct{}) error) *MockCheckerWaitUntilExpiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckerWaitUntilExpiredCall) DoAndReturn(f func(context.Context, string, chan<- struct{}) error) *MockCheckerWaitUntilExpiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRevoker is a mock of Revoker interface.
type MockRevoker struct {
	ctrl     *gomock.Controller
	recorder *MockRevokerMockRecorder
}

// MockRevokerMockRecorder is the mock recorder for MockRevoker.
type MockRevokerMockRecorder struct {
	mock *MockRevoker
}

// NewMockRevoker creates a new mock instance.
func NewMockRevoker(ctrl *gomock.Controller) *MockRevoker {
	mock := &MockRevoker{ctrl: ctrl}
	mock.recorder = &MockRevokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevoker) EXPECT() *MockRevokerMockRecorder {
	return m.recorder
}

// Revoke mocks base method.
func (m *MockRevoker) Revoke(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockRevokerMockRecorder) Revoke(arg0, arg1 any) *MockRevokerRevokeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockRevoker)(nil).Revoke), arg0, arg1)
	return &MockRevokerRevokeCall{Call: call}
}

// MockRevokerRevokeCall wrap *gomock.Call
type MockRevokerRevokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRevokerRevokeCall) Return(arg0 error) *MockRevokerRevokeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRevokerRevokeCall) Do(f func(string, string) error) *MockRevokerRevokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRevokerRevokeCall) DoAndReturn(f func(string, string) error) *MockRevokerRevokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeaseManager is a mock of LeaseManager interface.
type MockLeaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseManagerMockRecorder
}

// MockLeaseManagerMockRecorder is the mock recorder for MockLeaseManager.
type MockLeaseManagerMockRecorder struct {
	mock *MockLeaseManager
}

// NewMockLeaseManager creates a new mock instance.
func NewMockLeaseManager(ctrl *gomock.Controller) *MockLeaseManager {
	mock := &MockLeaseManager{ctrl: ctrl}
	mock.recorder = &MockLeaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseManager) EXPECT() *MockLeaseManagerMockRecorder {
	return m.recorder
}

// Revoke mocks base method.
func (m *MockLeaseManager) Revoke(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockLeaseManagerMockRecorder) Revoke(arg0, arg1 any) *MockLeaseManagerRevokeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockLeaseManager)(nil).Revoke), arg0, arg1)
	return &MockLeaseManagerRevokeCall{Call: call}
}

// MockLeaseManagerRevokeCall wrap *gomock.Call
type MockLeaseManagerRevokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaseManagerRevokeCall) Return(arg0 error) *MockLeaseManagerRevokeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaseManagerRevokeCall) Do(f func(string, string) error) *MockLeaseManagerRevokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaseManagerRevokeCall) DoAndReturn(f func(string, string) error) *MockLeaseManagerRevokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Token mocks base method.
func (m *MockLeaseManager) Token(arg0, arg1 string) lease.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0, arg1)
	ret0, _ := ret[0].(lease.Token)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockLeaseManagerMockRecorder) Token(arg0, arg1 any) *MockLeaseManagerTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockLeaseManager)(nil).Token), arg0, arg1)
	return &MockLeaseManagerTokenCall{Call: call}
}

// MockLeaseManagerTokenCall wrap *gomock.Call
type MockLeaseManagerTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaseManagerTokenCall) Return(arg0 lease.Token) *MockLeaseManagerTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaseManagerTokenCall) Do(f func(string, string) lease.Token) *MockLeaseManagerTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaseManagerTokenCall) DoAndReturn(f func(string, string) lease.Token) *MockLeaseManagerTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitUntilExpired mocks base method.
func (m *MockLeaseManager) WaitUntilExpired(arg0 context.Context, arg1 string, arg2 chan<- struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilExpired", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilExpired indicates an expected call of WaitUntilExpired.
func (mr *MockLeaseManagerMockRecorder) WaitUntilExpired(arg0, arg1, arg2 any) *MockLeaseManagerWaitUntilExpiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilExpired", reflect.TypeOf((*MockLeaseManager)(nil).WaitUntilExpired), arg0, arg1, arg2)
	return &MockLeaseManagerWaitUntilExpiredCall{Call: call}
}

// MockLeaseManagerWaitUntilExpiredCall wrap *gomock.Call
type MockLeaseManagerWaitUntilExpiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeaseManagerWaitUntilExpiredCall) Return(arg0 error) *MockLeaseManagerWaitUntilExpiredCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeaseManagerWaitUntilExpiredCall) Do(f func(context.Context, string, chan<- struct{}) error) *MockLeaseManagerWaitUntilExpiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeaseManagerWaitUntilExpiredCall) DoAndReturn(f func(context.Context, string, chan<- struct{}) error) *MockLeaseManagerWaitUntilExpiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelLeaseManagerGetter is a mock of ModelLeaseManagerGetter interface.
type MockModelLeaseManagerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockModelLeaseManagerGetterMockRecorder
}

// MockModelLeaseManagerGetterMockRecorder is the mock recorder for MockModelLeaseManagerGetter.
type MockModelLeaseManagerGetterMockRecorder struct {
	mock *MockModelLeaseManagerGetter
}

// NewMockModelLeaseManagerGetter creates a new mock instance.
func NewMockModelLeaseManagerGetter(ctrl *gomock.Controller) *MockModelLeaseManagerGetter {
	mock := &MockModelLeaseManagerGetter{ctrl: ctrl}
	mock.recorder = &MockModelLeaseManagerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelLeaseManagerGetter) EXPECT() *MockModelLeaseManagerGetterMockRecorder {
	return m.recorder
}

// GetLeaseManager mocks base method.
func (m *MockModelLeaseManagerGetter) GetLeaseManager() (lease.LeaseManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseManager")
	ret0, _ := ret[0].(lease.LeaseManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseManager indicates an expected call of GetLeaseManager.
func (mr *MockModelLeaseManagerGetterMockRecorder) GetLeaseManager() *MockModelLeaseManagerGetterGetLeaseManagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseManager", reflect.TypeOf((*MockModelLeaseManagerGetter)(nil).GetLeaseManager))
	return &MockModelLeaseManagerGetterGetLeaseManagerCall{Call: call}
}

// MockModelLeaseManagerGetterGetLeaseManagerCall wrap *gomock.Call
type MockModelLeaseManagerGetterGetLeaseManagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelLeaseManagerGetterGetLeaseManagerCall) Return(arg0 lease.LeaseManager, arg1 error) *MockModelLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelLeaseManagerGetterGetLeaseManagerCall) Do(f func() (lease.LeaseManager, error)) *MockModelLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelLeaseManagerGetterGetLeaseManagerCall) DoAndReturn(f func() (lease.LeaseManager, error)) *MockModelLeaseManagerGetterGetLeaseManagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
