// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/relation/service (interfaces: State,MigrationState,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/relation/service State,MigrationState,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	relation "github.com/juju/juju/core/relation"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	relation0 "github.com/juju/juju/domain/relation"
	internal "github.com/juju/juju/domain/relation/internal"
	charm "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddRelation mocks base method.
func (m *MockState) AddRelation(arg0 context.Context, arg1, arg2 relation0.CandidateEndpointIdentifier, arg3 ...string) (relation0.Endpoint, relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRelation", varargs...)
	ret0, _ := ret[0].(relation0.Endpoint)
	ret1, _ := ret[1].(relation0.Endpoint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockStateMockRecorder) AddRelation(arg0, arg1, arg2 any, arg3 ...any) *MockStateAddRelationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockState)(nil).AddRelation), varargs...)
	return &MockStateAddRelationCall{Call: call}
}

// MockStateAddRelationCall wrap *gomock.Call
type MockStateAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddRelationCall) Return(arg0, arg1 relation0.Endpoint, arg2 error) *MockStateAddRelationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddRelationCall) Do(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier, ...string) (relation0.Endpoint, relation0.Endpoint, error)) *MockStateAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddRelationCall) DoAndReturn(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier, ...string) (relation0.Endpoint, relation0.Endpoint, error)) *MockStateAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationExists mocks base method.
func (m *MockState) ApplicationExists(arg0 context.Context, arg1 application.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationExists indicates an expected call of ApplicationExists.
func (mr *MockStateMockRecorder) ApplicationExists(arg0, arg1 any) *MockStateApplicationExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationExists", reflect.TypeOf((*MockState)(nil).ApplicationExists), arg0, arg1)
	return &MockStateApplicationExistsCall{Call: call}
}

// MockStateApplicationExistsCall wrap *gomock.Call
type MockStateApplicationExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateApplicationExistsCall) Return(arg0 error) *MockStateApplicationExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateApplicationExistsCall) Do(f func(context.Context, application.UUID) error) *MockStateApplicationExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateApplicationExistsCall) DoAndReturn(f func(context.Context, application.UUID) error) *MockStateApplicationExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationRelationsInfo mocks base method.
func (m *MockState) ApplicationRelationsInfo(arg0 context.Context, arg1 application.UUID) ([]relation0.EndpointRelationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationRelationsInfo", arg0, arg1)
	ret0, _ := ret[0].([]relation0.EndpointRelationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationRelationsInfo indicates an expected call of ApplicationRelationsInfo.
func (mr *MockStateMockRecorder) ApplicationRelationsInfo(arg0, arg1 any) *MockStateApplicationRelationsInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationRelationsInfo", reflect.TypeOf((*MockState)(nil).ApplicationRelationsInfo), arg0, arg1)
	return &MockStateApplicationRelationsInfoCall{Call: call}
}

// MockStateApplicationRelationsInfoCall wrap *gomock.Call
type MockStateApplicationRelationsInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateApplicationRelationsInfoCall) Return(arg0 []relation0.EndpointRelationData, arg1 error) *MockStateApplicationRelationsInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateApplicationRelationsInfoCall) Do(f func(context.Context, application.UUID) ([]relation0.EndpointRelationData, error)) *MockStateApplicationRelationsInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateApplicationRelationsInfoCall) DoAndReturn(f func(context.Context, application.UUID) ([]relation0.EndpointRelationData, error)) *MockStateApplicationRelationsInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnterScope mocks base method.
func (m *MockState) EnterScope(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterScope indicates an expected call of EnterScope.
func (mr *MockStateMockRecorder) EnterScope(arg0, arg1, arg2, arg3 any) *MockStateEnterScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterScope", reflect.TypeOf((*MockState)(nil).EnterScope), arg0, arg1, arg2, arg3)
	return &MockStateEnterScopeCall{Call: call}
}

// MockStateEnterScopeCall wrap *gomock.Call
type MockStateEnterScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnterScopeCall) Return(arg0 error) *MockStateEnterScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnterScopeCall) Do(f func(context.Context, relation.UUID, unit.Name, map[string]string) error) *MockStateEnterScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnterScopeCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name, map[string]string) error) *MockStateEnterScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllRelationDetails mocks base method.
func (m *MockState) GetAllRelationDetails(arg0 context.Context) ([]relation0.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationDetails", arg0)
	ret0, _ := ret[0].([]relation0.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationDetails indicates an expected call of GetAllRelationDetails.
func (mr *MockStateMockRecorder) GetAllRelationDetails(arg0 any) *MockStateGetAllRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationDetails", reflect.TypeOf((*MockState)(nil).GetAllRelationDetails), arg0)
	return &MockStateGetAllRelationDetailsCall{Call: call}
}

// MockStateGetAllRelationDetailsCall wrap *gomock.Call
type MockStateGetAllRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllRelationDetailsCall) Return(arg0 []relation0.RelationDetailsResult, arg1 error) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllRelationDetailsCall) Do(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllRelationDetailsCall) DoAndReturn(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConsumerRelationUnitsChange mocks base method.
func (m *MockState) GetConsumerRelationUnitsChange(arg0 context.Context, arg1, arg2 string) (relation0.ConsumerRelationUnitsChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerRelationUnitsChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.ConsumerRelationUnitsChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerRelationUnitsChange indicates an expected call of GetConsumerRelationUnitsChange.
func (mr *MockStateMockRecorder) GetConsumerRelationUnitsChange(arg0, arg1, arg2 any) *MockStateGetConsumerRelationUnitsChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerRelationUnitsChange", reflect.TypeOf((*MockState)(nil).GetConsumerRelationUnitsChange), arg0, arg1, arg2)
	return &MockStateGetConsumerRelationUnitsChangeCall{Call: call}
}

// MockStateGetConsumerRelationUnitsChangeCall wrap *gomock.Call
type MockStateGetConsumerRelationUnitsChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetConsumerRelationUnitsChangeCall) Return(arg0 relation0.ConsumerRelationUnitsChange, arg1 error) *MockStateGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetConsumerRelationUnitsChangeCall) Do(f func(context.Context, string, string) (relation0.ConsumerRelationUnitsChange, error)) *MockStateGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetConsumerRelationUnitsChangeCall) DoAndReturn(f func(context.Context, string, string) (relation0.ConsumerRelationUnitsChange, error)) *MockStateGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFullRelationUnitsChange mocks base method.
func (m *MockState) GetFullRelationUnitsChange(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.FullRelationUnitChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullRelationUnitsChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.FullRelationUnitChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullRelationUnitsChange indicates an expected call of GetFullRelationUnitsChange.
func (mr *MockStateMockRecorder) GetFullRelationUnitsChange(arg0, arg1, arg2 any) *MockStateGetFullRelationUnitsChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullRelationUnitsChange", reflect.TypeOf((*MockState)(nil).GetFullRelationUnitsChange), arg0, arg1, arg2)
	return &MockStateGetFullRelationUnitsChangeCall{Call: call}
}

// MockStateGetFullRelationUnitsChangeCall wrap *gomock.Call
type MockStateGetFullRelationUnitsChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetFullRelationUnitsChangeCall) Return(arg0 relation0.FullRelationUnitChange, arg1 error) *MockStateGetFullRelationUnitsChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetFullRelationUnitsChangeCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.FullRelationUnitChange, error)) *MockStateGetFullRelationUnitsChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetFullRelationUnitsChangeCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.FullRelationUnitChange, error)) *MockStateGetFullRelationUnitsChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGoalStateRelationDataForApplication mocks base method.
func (m *MockState) GetGoalStateRelationDataForApplication(arg0 context.Context, arg1 application.UUID) ([]relation0.GoalStateRelationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoalStateRelationDataForApplication", arg0, arg1)
	ret0, _ := ret[0].([]relation0.GoalStateRelationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoalStateRelationDataForApplication indicates an expected call of GetGoalStateRelationDataForApplication.
func (mr *MockStateMockRecorder) GetGoalStateRelationDataForApplication(arg0, arg1 any) *MockStateGetGoalStateRelationDataForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoalStateRelationDataForApplication", reflect.TypeOf((*MockState)(nil).GetGoalStateRelationDataForApplication), arg0, arg1)
	return &MockStateGetGoalStateRelationDataForApplicationCall{Call: call}
}

// MockStateGetGoalStateRelationDataForApplicationCall wrap *gomock.Call
type MockStateGetGoalStateRelationDataForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetGoalStateRelationDataForApplicationCall) Return(arg0 []relation0.GoalStateRelationData, arg1 error) *MockStateGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetGoalStateRelationDataForApplicationCall) Do(f func(context.Context, application.UUID) ([]relation0.GoalStateRelationData, error)) *MockStateGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetGoalStateRelationDataForApplicationCall) DoAndReturn(f func(context.Context, application.UUID) ([]relation0.GoalStateRelationData, error)) *MockStateGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInScopeUnits mocks base method.
func (m *MockState) GetInScopeUnits(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInScopeUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInScopeUnits indicates an expected call of GetInScopeUnits.
func (mr *MockStateMockRecorder) GetInScopeUnits(arg0, arg1, arg2 any) *MockStateGetInScopeUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInScopeUnits", reflect.TypeOf((*MockState)(nil).GetInScopeUnits), arg0, arg1, arg2)
	return &MockStateGetInScopeUnitsCall{Call: call}
}

// MockStateGetInScopeUnitsCall wrap *gomock.Call
type MockStateGetInScopeUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetInScopeUnitsCall) Return(arg0 []string, arg1 error) *MockStateGetInScopeUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetInScopeUnitsCall) Do(f func(context.Context, string, string) ([]string, error)) *MockStateGetInScopeUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetInScopeUnitsCall) DoAndReturn(f func(context.Context, string, string) ([]string, error)) *MockStateGetInScopeUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMapperDataForWatchLifeSuspendedStatus mocks base method.
func (m *MockState) GetMapperDataForWatchLifeSuspendedStatus(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.RelationLifeSuspendedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapperDataForWatchLifeSuspendedStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationLifeSuspendedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapperDataForWatchLifeSuspendedStatus indicates an expected call of GetMapperDataForWatchLifeSuspendedStatus.
func (mr *MockStateMockRecorder) GetMapperDataForWatchLifeSuspendedStatus(arg0, arg1, arg2 any) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapperDataForWatchLifeSuspendedStatus", reflect.TypeOf((*MockState)(nil).GetMapperDataForWatchLifeSuspendedStatus), arg0, arg1, arg2)
	return &MockStateGetMapperDataForWatchLifeSuspendedStatusCall{Call: call}
}

// MockStateGetMapperDataForWatchLifeSuspendedStatusCall wrap *gomock.Call
type MockStateGetMapperDataForWatchLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMapperDataForWatchLifeSuspendedStatusCall) Return(arg0 relation0.RelationLifeSuspendedData, arg1 error) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMapperDataForWatchLifeSuspendedStatusCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationLifeSuspendedData, error)) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMapperDataForWatchLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationLifeSuspendedData, error)) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOtherRelatedEndpointApplicationData mocks base method.
func (m *MockState) GetOtherRelatedEndpointApplicationData(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.OtherApplicationForWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherRelatedEndpointApplicationData", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.OtherApplicationForWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherRelatedEndpointApplicationData indicates an expected call of GetOtherRelatedEndpointApplicationData.
func (mr *MockStateMockRecorder) GetOtherRelatedEndpointApplicationData(arg0, arg1, arg2 any) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherRelatedEndpointApplicationData", reflect.TypeOf((*MockState)(nil).GetOtherRelatedEndpointApplicationData), arg0, arg1, arg2)
	return &MockStateGetOtherRelatedEndpointApplicationDataCall{Call: call}
}

// MockStateGetOtherRelatedEndpointApplicationDataCall wrap *gomock.Call
type MockStateGetOtherRelatedEndpointApplicationDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetOtherRelatedEndpointApplicationDataCall) Return(arg0 relation0.OtherApplicationForWatcher, arg1 error) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetOtherRelatedEndpointApplicationDataCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.OtherApplicationForWatcher, error)) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetOtherRelatedEndpointApplicationDataCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.OtherApplicationForWatcher, error)) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPeerRelationUUIDByEndpointIdentifiers mocks base method.
func (m *MockState) GetPeerRelationUUIDByEndpointIdentifiers(arg0 context.Context, arg1 relation.EndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerRelationUUIDByEndpointIdentifiers", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerRelationUUIDByEndpointIdentifiers indicates an expected call of GetPeerRelationUUIDByEndpointIdentifiers.
func (mr *MockStateMockRecorder) GetPeerRelationUUIDByEndpointIdentifiers(arg0, arg1 any) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerRelationUUIDByEndpointIdentifiers", reflect.TypeOf((*MockState)(nil).GetPeerRelationUUIDByEndpointIdentifiers), arg0, arg1)
	return &MockStateGetPeerRelationUUIDByEndpointIdentifiersCall{Call: call}
}

// MockStateGetPeerRelationUUIDByEndpointIdentifiersCall wrap *gomock.Call
type MockStateGetPeerRelationUUIDByEndpointIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) Do(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrincipalSubordinateApplicationUUIDs mocks base method.
func (m *MockState) GetPrincipalSubordinateApplicationUUIDs(arg0 context.Context, arg1 unit.UUID) (application.UUID, application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrincipalSubordinateApplicationUUIDs", arg0, arg1)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(application.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrincipalSubordinateApplicationUUIDs indicates an expected call of GetPrincipalSubordinateApplicationUUIDs.
func (mr *MockStateMockRecorder) GetPrincipalSubordinateApplicationUUIDs(arg0, arg1 any) *MockStateGetPrincipalSubordinateApplicationUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipalSubordinateApplicationUUIDs", reflect.TypeOf((*MockState)(nil).GetPrincipalSubordinateApplicationUUIDs), arg0, arg1)
	return &MockStateGetPrincipalSubordinateApplicationUUIDsCall{Call: call}
}

// MockStateGetPrincipalSubordinateApplicationUUIDsCall wrap *gomock.Call
type MockStateGetPrincipalSubordinateApplicationUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetPrincipalSubordinateApplicationUUIDsCall) Return(arg0, arg1 application.UUID, arg2 error) *MockStateGetPrincipalSubordinateApplicationUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetPrincipalSubordinateApplicationUUIDsCall) Do(f func(context.Context, unit.UUID) (application.UUID, application.UUID, error)) *MockStateGetPrincipalSubordinateApplicationUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetPrincipalSubordinateApplicationUUIDsCall) DoAndReturn(f func(context.Context, unit.UUID) (application.UUID, application.UUID, error)) *MockStateGetPrincipalSubordinateApplicationUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegularRelationUUIDByEndpointIdentifiers mocks base method.
func (m *MockState) GetRegularRelationUUIDByEndpointIdentifiers(arg0 context.Context, arg1, arg2 relation.EndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegularRelationUUIDByEndpointIdentifiers", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegularRelationUUIDByEndpointIdentifiers indicates an expected call of GetRegularRelationUUIDByEndpointIdentifiers.
func (mr *MockStateMockRecorder) GetRegularRelationUUIDByEndpointIdentifiers(arg0, arg1, arg2 any) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegularRelationUUIDByEndpointIdentifiers", reflect.TypeOf((*MockState)(nil).GetRegularRelationUUIDByEndpointIdentifiers), arg0, arg1, arg2)
	return &MockStateGetRegularRelationUUIDByEndpointIdentifiersCall{Call: call}
}

// MockStateGetRegularRelationUUIDByEndpointIdentifiersCall wrap *gomock.Call
type MockStateGetRegularRelationUUIDByEndpointIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) Do(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationApplicationSettings mocks base method.
func (m *MockState) GetRelationApplicationSettings(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationApplicationSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationApplicationSettings indicates an expected call of GetRelationApplicationSettings.
func (mr *MockStateMockRecorder) GetRelationApplicationSettings(arg0, arg1, arg2 any) *MockStateGetRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationApplicationSettings", reflect.TypeOf((*MockState)(nil).GetRelationApplicationSettings), arg0, arg1, arg2)
	return &MockStateGetRelationApplicationSettingsCall{Call: call}
}

// MockStateGetRelationApplicationSettingsCall wrap *gomock.Call
type MockStateGetRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationApplicationSettingsCall) Return(arg0 map[string]string, arg1 error) *MockStateGetRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationApplicationSettingsCall) Do(f func(context.Context, relation.UUID, application.UUID) (map[string]string, error)) *MockStateGetRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationApplicationSettingsCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (map[string]string, error)) *MockStateGetRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockState) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockStateMockRecorder) GetRelationDetails(arg0, arg1 any) *MockStateGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockState)(nil).GetRelationDetails), arg0, arg1)
	return &MockStateGetRelationDetailsCall{Call: call}
}

// MockStateGetRelationDetailsCall wrap *gomock.Call
type MockStateGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationDetailsCall) Return(arg0 relation0.RelationDetailsResult, arg1 error) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetailsResult, error)) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetailsResult, error)) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpointScope mocks base method.
func (m *MockState) GetRelationEndpointScope(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (charm.RelationScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpointScope", arg0, arg1, arg2)
	ret0, _ := ret[0].(charm.RelationScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpointScope indicates an expected call of GetRelationEndpointScope.
func (mr *MockStateMockRecorder) GetRelationEndpointScope(arg0, arg1, arg2 any) *MockStateGetRelationEndpointScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpointScope", reflect.TypeOf((*MockState)(nil).GetRelationEndpointScope), arg0, arg1, arg2)
	return &MockStateGetRelationEndpointScopeCall{Call: call}
}

// MockStateGetRelationEndpointScopeCall wrap *gomock.Call
type MockStateGetRelationEndpointScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointScopeCall) Return(arg0 charm.RelationScope, arg1 error) *MockStateGetRelationEndpointScopeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointScopeCall) Do(f func(context.Context, relation.UUID, application.UUID) (charm.RelationScope, error)) *MockStateGetRelationEndpointScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointScopeCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (charm.RelationScope, error)) *MockStateGetRelationEndpointScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpointUUID mocks base method.
func (m *MockState) GetRelationEndpointUUID(arg0 context.Context, arg1 relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpointUUID", arg0, arg1)
	ret0, _ := ret[0].(relation.EndpointUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpointUUID indicates an expected call of GetRelationEndpointUUID.
func (mr *MockStateMockRecorder) GetRelationEndpointUUID(arg0, arg1 any) *MockStateGetRelationEndpointUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpointUUID", reflect.TypeOf((*MockState)(nil).GetRelationEndpointUUID), arg0, arg1)
	return &MockStateGetRelationEndpointUUIDCall{Call: call}
}

// MockStateGetRelationEndpointUUIDCall wrap *gomock.Call
type MockStateGetRelationEndpointUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointUUIDCall) Return(arg0 relation.EndpointUUID, arg1 error) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointUUIDCall) Do(f func(context.Context, relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error)) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointUUIDCall) DoAndReturn(f func(context.Context, relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error)) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpoints mocks base method.
func (m *MockState) GetRelationEndpoints(arg0 context.Context, arg1 string) ([]relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpoints", arg0, arg1)
	ret0, _ := ret[0].([]relation0.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpoints indicates an expected call of GetRelationEndpoints.
func (mr *MockStateMockRecorder) GetRelationEndpoints(arg0, arg1 any) *MockStateGetRelationEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpoints", reflect.TypeOf((*MockState)(nil).GetRelationEndpoints), arg0, arg1)
	return &MockStateGetRelationEndpointsCall{Call: call}
}

// MockStateGetRelationEndpointsCall wrap *gomock.Call
type MockStateGetRelationEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointsCall) Return(arg0 []relation0.Endpoint, arg1 error) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointsCall) Do(f func(context.Context, string) ([]relation0.Endpoint, error)) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointsCall) DoAndReturn(f func(context.Context, string) ([]relation0.Endpoint, error)) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationLifeSuspendedNameSpace mocks base method.
func (m *MockState) GetRelationLifeSuspendedNameSpace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationLifeSuspendedNameSpace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRelationLifeSuspendedNameSpace indicates an expected call of GetRelationLifeSuspendedNameSpace.
func (mr *MockStateMockRecorder) GetRelationLifeSuspendedNameSpace() *MockStateGetRelationLifeSuspendedNameSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationLifeSuspendedNameSpace", reflect.TypeOf((*MockState)(nil).GetRelationLifeSuspendedNameSpace))
	return &MockStateGetRelationLifeSuspendedNameSpaceCall{Call: call}
}

// MockStateGetRelationLifeSuspendedNameSpaceCall wrap *gomock.Call
type MockStateGetRelationLifeSuspendedNameSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationLifeSuspendedNameSpaceCall) Return(arg0 string) *MockStateGetRelationLifeSuspendedNameSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationLifeSuspendedNameSpaceCall) Do(f func() string) *MockStateGetRelationLifeSuspendedNameSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationLifeSuspendedNameSpaceCall) DoAndReturn(f func() string) *MockStateGetRelationLifeSuspendedNameSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationLifeSuspendedStatus mocks base method.
func (m *MockState) GetRelationLifeSuspendedStatus(arg0 context.Context, arg1 string) (internal.RelationLifeSuspendedStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationLifeSuspendedStatus", arg0, arg1)
	ret0, _ := ret[0].(internal.RelationLifeSuspendedStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationLifeSuspendedStatus indicates an expected call of GetRelationLifeSuspendedStatus.
func (mr *MockStateMockRecorder) GetRelationLifeSuspendedStatus(arg0, arg1 any) *MockStateGetRelationLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationLifeSuspendedStatus", reflect.TypeOf((*MockState)(nil).GetRelationLifeSuspendedStatus), arg0, arg1)
	return &MockStateGetRelationLifeSuspendedStatusCall{Call: call}
}

// MockStateGetRelationLifeSuspendedStatusCall wrap *gomock.Call
type MockStateGetRelationLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationLifeSuspendedStatusCall) Return(arg0 internal.RelationLifeSuspendedStatus, arg1 error) *MockStateGetRelationLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationLifeSuspendedStatusCall) Do(f func(context.Context, string) (internal.RelationLifeSuspendedStatus, error)) *MockStateGetRelationLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, string) (internal.RelationLifeSuspendedStatus, error)) *MockStateGetRelationLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByID mocks base method.
func (m *MockState) GetRelationUUIDByID(arg0 context.Context, arg1 int) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByID indicates an expected call of GetRelationUUIDByID.
func (mr *MockStateMockRecorder) GetRelationUUIDByID(arg0, arg1 any) *MockStateGetRelationUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByID", reflect.TypeOf((*MockState)(nil).GetRelationUUIDByID), arg0, arg1)
	return &MockStateGetRelationUUIDByIDCall{Call: call}
}

// MockStateGetRelationUUIDByIDCall wrap *gomock.Call
type MockStateGetRelationUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUUIDByIDCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUUIDByIDCall) Do(f func(context.Context, int) (relation.UUID, error)) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUUIDByIDCall) DoAndReturn(f func(context.Context, int) (relation.UUID, error)) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitChanges mocks base method.
func (m *MockState) GetRelationUnitChanges(arg0 context.Context, arg1 []unit.UUID, arg2 []application.UUID) (relation0.RelationUnitsChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitChanges", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationUnitsChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitChanges indicates an expected call of GetRelationUnitChanges.
func (mr *MockStateMockRecorder) GetRelationUnitChanges(arg0, arg1, arg2 any) *MockStateGetRelationUnitChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitChanges", reflect.TypeOf((*MockState)(nil).GetRelationUnitChanges), arg0, arg1, arg2)
	return &MockStateGetRelationUnitChangesCall{Call: call}
}

// MockStateGetRelationUnitChangesCall wrap *gomock.Call
type MockStateGetRelationUnitChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitChangesCall) Return(arg0 relation0.RelationUnitsChange, arg1 error) *MockStateGetRelationUnitChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitChangesCall) Do(f func(context.Context, []unit.UUID, []application.UUID) (relation0.RelationUnitsChange, error)) *MockStateGetRelationUnitChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitChangesCall) DoAndReturn(f func(context.Context, []unit.UUID, []application.UUID) (relation0.RelationUnitsChange, error)) *MockStateGetRelationUnitChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitSettings mocks base method.
func (m *MockState) GetRelationUnitSettings(arg0 context.Context, arg1 relation.UnitUUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitSettings", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitSettings indicates an expected call of GetRelationUnitSettings.
func (mr *MockStateMockRecorder) GetRelationUnitSettings(arg0, arg1 any) *MockStateGetRelationUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitSettings", reflect.TypeOf((*MockState)(nil).GetRelationUnitSettings), arg0, arg1)
	return &MockStateGetRelationUnitSettingsCall{Call: call}
}

// MockStateGetRelationUnitSettingsCall wrap *gomock.Call
type MockStateGetRelationUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitSettingsCall) Return(arg0 map[string]string, arg1 error) *MockStateGetRelationUnitSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockStateGetRelationUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockStateGetRelationUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitSettingsArchive mocks base method.
func (m *MockState) GetRelationUnitSettingsArchive(arg0 context.Context, arg1, arg2 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitSettingsArchive", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitSettingsArchive indicates an expected call of GetRelationUnitSettingsArchive.
func (mr *MockStateMockRecorder) GetRelationUnitSettingsArchive(arg0, arg1, arg2 any) *MockStateGetRelationUnitSettingsArchiveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitSettingsArchive", reflect.TypeOf((*MockState)(nil).GetRelationUnitSettingsArchive), arg0, arg1, arg2)
	return &MockStateGetRelationUnitSettingsArchiveCall{Call: call}
}

// MockStateGetRelationUnitSettingsArchiveCall wrap *gomock.Call
type MockStateGetRelationUnitSettingsArchiveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitSettingsArchiveCall) Return(arg0 map[string]string, arg1 error) *MockStateGetRelationUnitSettingsArchiveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitSettingsArchiveCall) Do(f func(context.Context, string, string) (map[string]string, error)) *MockStateGetRelationUnitSettingsArchiveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitSettingsArchiveCall) DoAndReturn(f func(context.Context, string, string) (map[string]string, error)) *MockStateGetRelationUnitSettingsArchiveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitUUID mocks base method.
func (m *MockState) GetRelationUnitUUID(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) (relation.UnitUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UnitUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitUUID indicates an expected call of GetRelationUnitUUID.
func (mr *MockStateMockRecorder) GetRelationUnitUUID(arg0, arg1, arg2 any) *MockStateGetRelationUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitUUID", reflect.TypeOf((*MockState)(nil).GetRelationUnitUUID), arg0, arg1, arg2)
	return &MockStateGetRelationUnitUUIDCall{Call: call}
}

// MockStateGetRelationUnitUUIDCall wrap *gomock.Call
type MockStateGetRelationUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitUUIDCall) Return(arg0 relation.UnitUUID, arg1 error) *MockStateGetRelationUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitUUIDCall) Do(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockStateGetRelationUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitUUIDCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockStateGetRelationUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitUUIDsByEndpointUUID mocks base method.
func (m *MockState) GetRelationUnitUUIDsByEndpointUUID(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitUUIDsByEndpointUUID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitUUIDsByEndpointUUID indicates an expected call of GetRelationUnitUUIDsByEndpointUUID.
func (mr *MockStateMockRecorder) GetRelationUnitUUIDsByEndpointUUID(arg0, arg1 any) *MockStateGetRelationUnitUUIDsByEndpointUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitUUIDsByEndpointUUID", reflect.TypeOf((*MockState)(nil).GetRelationUnitUUIDsByEndpointUUID), arg0, arg1)
	return &MockStateGetRelationUnitUUIDsByEndpointUUIDCall{Call: call}
}

// MockStateGetRelationUnitUUIDsByEndpointUUIDCall wrap *gomock.Call
type MockStateGetRelationUnitUUIDsByEndpointUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitUUIDsByEndpointUUIDCall) Return(arg0 []string, arg1 error) *MockStateGetRelationUnitUUIDsByEndpointUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitUUIDsByEndpointUUIDCall) Do(f func(context.Context, string) ([]string, error)) *MockStateGetRelationUnitUUIDsByEndpointUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitUUIDsByEndpointUUIDCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockStateGetRelationUnitUUIDsByEndpointUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitsChanges mocks base method.
func (m *MockState) GetRelationUnitsChanges(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.RelationUnitChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitsChanges", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationUnitChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitsChanges indicates an expected call of GetRelationUnitsChanges.
func (mr *MockStateMockRecorder) GetRelationUnitsChanges(arg0, arg1, arg2 any) *MockStateGetRelationUnitsChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitsChanges", reflect.TypeOf((*MockState)(nil).GetRelationUnitsChanges), arg0, arg1, arg2)
	return &MockStateGetRelationUnitsChangesCall{Call: call}
}

// MockStateGetRelationUnitsChangesCall wrap *gomock.Call
type MockStateGetRelationUnitsChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitsChangesCall) Return(arg0 relation0.RelationUnitChange, arg1 error) *MockStateGetRelationUnitsChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitsChangesCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationUnitChange, error)) *MockStateGetRelationUnitsChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitsChangesCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.RelationUnitChange, error)) *MockStateGetRelationUnitsChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationsStatusForUnit mocks base method.
func (m *MockState) GetRelationsStatusForUnit(arg0 context.Context, arg1 unit.UUID) ([]relation0.RelationUnitStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsStatusForUnit", arg0, arg1)
	ret0, _ := ret[0].([]relation0.RelationUnitStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsStatusForUnit indicates an expected call of GetRelationsStatusForUnit.
func (mr *MockStateMockRecorder) GetRelationsStatusForUnit(arg0, arg1 any) *MockStateGetRelationsStatusForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsStatusForUnit", reflect.TypeOf((*MockState)(nil).GetRelationsStatusForUnit), arg0, arg1)
	return &MockStateGetRelationsStatusForUnitCall{Call: call}
}

// MockStateGetRelationsStatusForUnitCall wrap *gomock.Call
type MockStateGetRelationsStatusForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationsStatusForUnitCall) Return(arg0 []relation0.RelationUnitStatusResult, arg1 error) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationsStatusForUnitCall) Do(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatusResult, error)) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationsStatusForUnitCall) DoAndReturn(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatusResult, error)) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitSettingsForUnits mocks base method.
func (m *MockState) GetUnitSettingsForUnits(arg0 context.Context, arg1 string, arg2 []string) ([]relation0.UnitSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitSettingsForUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]relation0.UnitSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitSettingsForUnits indicates an expected call of GetUnitSettingsForUnits.
func (mr *MockStateMockRecorder) GetUnitSettingsForUnits(arg0, arg1, arg2 any) *MockStateGetUnitSettingsForUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitSettingsForUnits", reflect.TypeOf((*MockState)(nil).GetUnitSettingsForUnits), arg0, arg1, arg2)
	return &MockStateGetUnitSettingsForUnitsCall{Call: call}
}

// MockStateGetUnitSettingsForUnitsCall wrap *gomock.Call
type MockStateGetUnitSettingsForUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitSettingsForUnitsCall) Return(arg0 []relation0.UnitSettings, arg1 error) *MockStateGetUnitSettingsForUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitSettingsForUnitsCall) Do(f func(context.Context, string, []string) ([]relation0.UnitSettings, error)) *MockStateGetUnitSettingsForUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitSettingsForUnitsCall) DoAndReturn(f func(context.Context, string, []string) ([]relation0.UnitSettings, error)) *MockStateGetUnitSettingsForUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWatcherRelationUnitsData mocks base method.
func (m *MockState) GetWatcherRelationUnitsData(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (internal.WatcherRelationUnitsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatcherRelationUnitsData", arg0, arg1, arg2)
	ret0, _ := ret[0].(internal.WatcherRelationUnitsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatcherRelationUnitsData indicates an expected call of GetWatcherRelationUnitsData.
func (mr *MockStateMockRecorder) GetWatcherRelationUnitsData(arg0, arg1, arg2 any) *MockStateGetWatcherRelationUnitsDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatcherRelationUnitsData", reflect.TypeOf((*MockState)(nil).GetWatcherRelationUnitsData), arg0, arg1, arg2)
	return &MockStateGetWatcherRelationUnitsDataCall{Call: call}
}

// MockStateGetWatcherRelationUnitsDataCall wrap *gomock.Call
type MockStateGetWatcherRelationUnitsDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetWatcherRelationUnitsDataCall) Return(arg0 internal.WatcherRelationUnitsData, arg1 error) *MockStateGetWatcherRelationUnitsDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetWatcherRelationUnitsDataCall) Do(f func(context.Context, relation.UUID, application.UUID) (internal.WatcherRelationUnitsData, error)) *MockStateGetWatcherRelationUnitsDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetWatcherRelationUnitsDataCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (internal.WatcherRelationUnitsData, error)) *MockStateGetWatcherRelationUnitsDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InferRelationUUIDByEndpoints mocks base method.
func (m *MockState) InferRelationUUIDByEndpoints(arg0 context.Context, arg1, arg2 relation0.CandidateEndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferRelationUUIDByEndpoints", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferRelationUUIDByEndpoints indicates an expected call of InferRelationUUIDByEndpoints.
func (mr *MockStateMockRecorder) InferRelationUUIDByEndpoints(arg0, arg1, arg2 any) *MockStateInferRelationUUIDByEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferRelationUUIDByEndpoints", reflect.TypeOf((*MockState)(nil).InferRelationUUIDByEndpoints), arg0, arg1, arg2)
	return &MockStateInferRelationUUIDByEndpointsCall{Call: call}
}

// MockStateInferRelationUUIDByEndpointsCall wrap *gomock.Call
type MockStateInferRelationUUIDByEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInferRelationUUIDByEndpointsCall) Return(arg0 relation.UUID, arg1 error) *MockStateInferRelationUUIDByEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInferRelationUUIDByEndpointsCall) Do(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier) (relation.UUID, error)) *MockStateInferRelationUUIDByEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInferRelationUUIDByEndpointsCall) DoAndReturn(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier) (relation.UUID, error)) *MockStateInferRelationUUIDByEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchLifeSuspendedStatus mocks base method.
func (m *MockState) InitialWatchLifeSuspendedStatus(arg0 application.UUID) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchLifeSuspendedStatus", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchLifeSuspendedStatus indicates an expected call of InitialWatchLifeSuspendedStatus.
func (mr *MockStateMockRecorder) InitialWatchLifeSuspendedStatus(arg0 any) *MockStateInitialWatchLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchLifeSuspendedStatus", reflect.TypeOf((*MockState)(nil).InitialWatchLifeSuspendedStatus), arg0)
	return &MockStateInitialWatchLifeSuspendedStatusCall{Call: call}
}

// MockStateInitialWatchLifeSuspendedStatusCall wrap *gomock.Call
type MockStateInitialWatchLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchLifeSuspendedStatusCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchLifeSuspendedStatusCall) Do(f func(application.UUID) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchLifeSuspendedStatusCall) DoAndReturn(f func(application.UUID) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchRelatedUnits mocks base method.
func (m *MockState) InitialWatchRelatedUnits(arg0 context.Context, arg1, arg2 string) ([]string, eventsource.NamespaceQuery, eventsource.Mapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchRelatedUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	ret2, _ := ret[2].(eventsource.Mapper)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// InitialWatchRelatedUnits indicates an expected call of InitialWatchRelatedUnits.
func (mr *MockStateMockRecorder) InitialWatchRelatedUnits(arg0, arg1, arg2 any) *MockStateInitialWatchRelatedUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchRelatedUnits", reflect.TypeOf((*MockState)(nil).InitialWatchRelatedUnits), arg0, arg1, arg2)
	return &MockStateInitialWatchRelatedUnitsCall{Call: call}
}

// MockStateInitialWatchRelatedUnitsCall wrap *gomock.Call
type MockStateInitialWatchRelatedUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchRelatedUnitsCall) Return(arg0 []string, arg1 eventsource.NamespaceQuery, arg2 eventsource.Mapper, arg3 error) *MockStateInitialWatchRelatedUnitsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchRelatedUnitsCall) Do(f func(context.Context, string, string) ([]string, eventsource.NamespaceQuery, eventsource.Mapper, error)) *MockStateInitialWatchRelatedUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchRelatedUnitsCall) DoAndReturn(f func(context.Context, string, string) ([]string, eventsource.NamespaceQuery, eventsource.Mapper, error)) *MockStateInitialWatchRelatedUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsPeerRelation mocks base method.
func (m *MockState) IsPeerRelation(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPeerRelation", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPeerRelation indicates an expected call of IsPeerRelation.
func (mr *MockStateMockRecorder) IsPeerRelation(arg0, arg1 any) *MockStateIsPeerRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPeerRelation", reflect.TypeOf((*MockState)(nil).IsPeerRelation), arg0, arg1)
	return &MockStateIsPeerRelationCall{Call: call}
}

// MockStateIsPeerRelationCall wrap *gomock.Call
type MockStateIsPeerRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsPeerRelationCall) Return(arg0 bool, arg1 error) *MockStateIsPeerRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsPeerRelationCall) Do(f func(context.Context, string) (bool, error)) *MockStateIsPeerRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsPeerRelationCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateIsPeerRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NeedsSubordinateUnit mocks base method.
func (m *MockState) NeedsSubordinateUnit(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) (*application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsSubordinateUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeedsSubordinateUnit indicates an expected call of NeedsSubordinateUnit.
func (mr *MockStateMockRecorder) NeedsSubordinateUnit(arg0, arg1, arg2 any) *MockStateNeedsSubordinateUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsSubordinateUnit", reflect.TypeOf((*MockState)(nil).NeedsSubordinateUnit), arg0, arg1, arg2)
	return &MockStateNeedsSubordinateUnitCall{Call: call}
}

// MockStateNeedsSubordinateUnitCall wrap *gomock.Call
type MockStateNeedsSubordinateUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNeedsSubordinateUnitCall) Return(arg0 *application.UUID, arg1 error) *MockStateNeedsSubordinateUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNeedsSubordinateUnitCall) Do(f func(context.Context, relation.UUID, unit.Name) (*application.UUID, error)) *MockStateNeedsSubordinateUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNeedsSubordinateUnitCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) (*application.UUID, error)) *MockStateNeedsSubordinateUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationApplicationAndUnitSettings mocks base method.
func (m *MockState) SetRelationApplicationAndUnitSettings(arg0 context.Context, arg1 relation.UnitUUID, arg2, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationApplicationAndUnitSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationApplicationAndUnitSettings indicates an expected call of SetRelationApplicationAndUnitSettings.
func (mr *MockStateMockRecorder) SetRelationApplicationAndUnitSettings(arg0, arg1, arg2, arg3 any) *MockStateSetRelationApplicationAndUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationApplicationAndUnitSettings", reflect.TypeOf((*MockState)(nil).SetRelationApplicationAndUnitSettings), arg0, arg1, arg2, arg3)
	return &MockStateSetRelationApplicationAndUnitSettingsCall{Call: call}
}

// MockStateSetRelationApplicationAndUnitSettingsCall wrap *gomock.Call
type MockStateSetRelationApplicationAndUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationApplicationAndUnitSettingsCall) Return(arg0 error) *MockStateSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationApplicationAndUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID, map[string]string, map[string]string) error) *MockStateSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationApplicationAndUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID, map[string]string, map[string]string) error) *MockStateSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationErrorStatus mocks base method.
func (m *MockState) SetRelationErrorStatus(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationErrorStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationErrorStatus indicates an expected call of SetRelationErrorStatus.
func (mr *MockStateMockRecorder) SetRelationErrorStatus(arg0, arg1, arg2 any) *MockStateSetRelationErrorStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationErrorStatus", reflect.TypeOf((*MockState)(nil).SetRelationErrorStatus), arg0, arg1, arg2)
	return &MockStateSetRelationErrorStatusCall{Call: call}
}

// MockStateSetRelationErrorStatusCall wrap *gomock.Call
type MockStateSetRelationErrorStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationErrorStatusCall) Return(arg0 error) *MockStateSetRelationErrorStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationErrorStatusCall) Do(f func(context.Context, string, string) error) *MockStateSetRelationErrorStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationErrorStatusCall) DoAndReturn(f func(context.Context, string, string) error) *MockStateSetRelationErrorStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationRemoteApplicationAndUnitSettings mocks base method.
func (m *MockState) SetRelationRemoteApplicationAndUnitSettings(arg0 context.Context, arg1, arg2 string, arg3 map[string]string, arg4 map[string]map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationRemoteApplicationAndUnitSettings", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationRemoteApplicationAndUnitSettings indicates an expected call of SetRelationRemoteApplicationAndUnitSettings.
func (mr *MockStateMockRecorder) SetRelationRemoteApplicationAndUnitSettings(arg0, arg1, arg2, arg3, arg4 any) *MockStateSetRelationRemoteApplicationAndUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationRemoteApplicationAndUnitSettings", reflect.TypeOf((*MockState)(nil).SetRelationRemoteApplicationAndUnitSettings), arg0, arg1, arg2, arg3, arg4)
	return &MockStateSetRelationRemoteApplicationAndUnitSettingsCall{Call: call}
}

// MockStateSetRelationRemoteApplicationAndUnitSettingsCall wrap *gomock.Call
type MockStateSetRelationRemoteApplicationAndUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationRemoteApplicationAndUnitSettingsCall) Return(arg0 error) *MockStateSetRelationRemoteApplicationAndUnitSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationRemoteApplicationAndUnitSettingsCall) Do(f func(context.Context, string, string, map[string]string, map[string]map[string]string) error) *MockStateSetRelationRemoteApplicationAndUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationRemoteApplicationAndUnitSettingsCall) DoAndReturn(f func(context.Context, string, string, map[string]string, map[string]map[string]string) error) *MockStateSetRelationRemoteApplicationAndUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationUnitSettings mocks base method.
func (m *MockState) SetRelationUnitSettings(arg0 context.Context, arg1 relation.UnitUUID, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationUnitSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationUnitSettings indicates an expected call of SetRelationUnitSettings.
func (mr *MockStateMockRecorder) SetRelationUnitSettings(arg0, arg1, arg2 any) *MockStateSetRelationUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationUnitSettings", reflect.TypeOf((*MockState)(nil).SetRelationUnitSettings), arg0, arg1, arg2)
	return &MockStateSetRelationUnitSettingsCall{Call: call}
}

// MockStateSetRelationUnitSettingsCall wrap *gomock.Call
type MockStateSetRelationUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationUnitSettingsCall) Return(arg0 error) *MockStateSetRelationUnitSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID, map[string]string) error) *MockStateSetRelationUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID, map[string]string) error) *MockStateSetRelationUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRemoteRelationSuspendedState mocks base method.
func (m *MockState) SetRemoteRelationSuspendedState(arg0 context.Context, arg1 string, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteRelationSuspendedState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteRelationSuspendedState indicates an expected call of SetRemoteRelationSuspendedState.
func (mr *MockStateMockRecorder) SetRemoteRelationSuspendedState(arg0, arg1, arg2, arg3 any) *MockStateSetRemoteRelationSuspendedStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteRelationSuspendedState", reflect.TypeOf((*MockState)(nil).SetRemoteRelationSuspendedState), arg0, arg1, arg2, arg3)
	return &MockStateSetRemoteRelationSuspendedStateCall{Call: call}
}

// MockStateSetRemoteRelationSuspendedStateCall wrap *gomock.Call
type MockStateSetRemoteRelationSuspendedStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRemoteRelationSuspendedStateCall) Return(arg0 error) *MockStateSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRemoteRelationSuspendedStateCall) Do(f func(context.Context, string, bool, string) error) *MockStateSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRemoteRelationSuspendedStateCall) DoAndReturn(f func(context.Context, string, bool, string) error) *MockStateSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatcherApplicationSettingsNamespace mocks base method.
func (m *MockState) WatcherApplicationSettingsNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatcherApplicationSettingsNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// WatcherApplicationSettingsNamespace indicates an expected call of WatcherApplicationSettingsNamespace.
func (mr *MockStateMockRecorder) WatcherApplicationSettingsNamespace() *MockStateWatcherApplicationSettingsNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatcherApplicationSettingsNamespace", reflect.TypeOf((*MockState)(nil).WatcherApplicationSettingsNamespace))
	return &MockStateWatcherApplicationSettingsNamespaceCall{Call: call}
}

// MockStateWatcherApplicationSettingsNamespaceCall wrap *gomock.Call
type MockStateWatcherApplicationSettingsNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateWatcherApplicationSettingsNamespaceCall) Return(arg0 string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateWatcherApplicationSettingsNamespaceCall) Do(f func() string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateWatcherApplicationSettingsNamespaceCall) DoAndReturn(f func() string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMigrationState is a mock of MigrationState interface.
type MockMigrationState struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationStateMockRecorder
}

// MockMigrationStateMockRecorder is the mock recorder for MockMigrationState.
type MockMigrationStateMockRecorder struct {
	mock *MockMigrationState
}

// NewMockMigrationState creates a new mock instance.
func NewMockMigrationState(ctrl *gomock.Controller) *MockMigrationState {
	mock := &MockMigrationState{ctrl: ctrl}
	mock.recorder = &MockMigrationStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationState) EXPECT() *MockMigrationStateMockRecorder {
	return m.recorder
}

// DeleteImportedRelations mocks base method.
func (m *MockMigrationState) DeleteImportedRelations(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImportedRelations", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImportedRelations indicates an expected call of DeleteImportedRelations.
func (mr *MockMigrationStateMockRecorder) DeleteImportedRelations(arg0 any) *MockMigrationStateDeleteImportedRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportedRelations", reflect.TypeOf((*MockMigrationState)(nil).DeleteImportedRelations), arg0)
	return &MockMigrationStateDeleteImportedRelationsCall{Call: call}
}

// MockMigrationStateDeleteImportedRelationsCall wrap *gomock.Call
type MockMigrationStateDeleteImportedRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateDeleteImportedRelationsCall) Return(arg0 error) *MockMigrationStateDeleteImportedRelationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateDeleteImportedRelationsCall) Do(f func(context.Context) error) *MockMigrationStateDeleteImportedRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateDeleteImportedRelationsCall) DoAndReturn(f func(context.Context) error) *MockMigrationStateDeleteImportedRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnterScope mocks base method.
func (m *MockMigrationState) EnterScope(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterScope indicates an expected call of EnterScope.
func (mr *MockMigrationStateMockRecorder) EnterScope(arg0, arg1, arg2, arg3 any) *MockMigrationStateEnterScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterScope", reflect.TypeOf((*MockMigrationState)(nil).EnterScope), arg0, arg1, arg2, arg3)
	return &MockMigrationStateEnterScopeCall{Call: call}
}

// MockMigrationStateEnterScopeCall wrap *gomock.Call
type MockMigrationStateEnterScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateEnterScopeCall) Return(arg0 error) *MockMigrationStateEnterScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateEnterScopeCall) Do(f func(context.Context, relation.UUID, unit.Name, map[string]string) error) *MockMigrationStateEnterScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateEnterScopeCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name, map[string]string) error) *MockMigrationStateEnterScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportRelations mocks base method.
func (m *MockMigrationState) ExportRelations(arg0 context.Context) ([]relation0.ExportRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRelations", arg0)
	ret0, _ := ret[0].([]relation0.ExportRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRelations indicates an expected call of ExportRelations.
func (mr *MockMigrationStateMockRecorder) ExportRelations(arg0 any) *MockMigrationStateExportRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRelations", reflect.TypeOf((*MockMigrationState)(nil).ExportRelations), arg0)
	return &MockMigrationStateExportRelationsCall{Call: call}
}

// MockMigrationStateExportRelationsCall wrap *gomock.Call
type MockMigrationStateExportRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateExportRelationsCall) Return(arg0 []relation0.ExportRelation, arg1 error) *MockMigrationStateExportRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateExportRelationsCall) Do(f func(context.Context) ([]relation0.ExportRelation, error)) *MockMigrationStateExportRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateExportRelationsCall) DoAndReturn(f func(context.Context) ([]relation0.ExportRelation, error)) *MockMigrationStateExportRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationUUIDByName mocks base method.
func (m *MockMigrationState) GetApplicationUUIDByName(arg0 context.Context, arg1 string) (application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationUUIDByName indicates an expected call of GetApplicationUUIDByName.
func (mr *MockMigrationStateMockRecorder) GetApplicationUUIDByName(arg0, arg1 any) *MockMigrationStateGetApplicationUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUUIDByName", reflect.TypeOf((*MockMigrationState)(nil).GetApplicationUUIDByName), arg0, arg1)
	return &MockMigrationStateGetApplicationUUIDByNameCall{Call: call}
}

// MockMigrationStateGetApplicationUUIDByNameCall wrap *gomock.Call
type MockMigrationStateGetApplicationUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetApplicationUUIDByNameCall) Return(arg0 application.UUID, arg1 error) *MockMigrationStateGetApplicationUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetApplicationUUIDByNameCall) Do(f func(context.Context, string) (application.UUID, error)) *MockMigrationStateGetApplicationUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetApplicationUUIDByNameCall) DoAndReturn(f func(context.Context, string) (application.UUID, error)) *MockMigrationStateGetApplicationUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPeerRelationUUIDByEndpointIdentifiers mocks base method.
func (m *MockMigrationState) GetPeerRelationUUIDByEndpointIdentifiers(arg0 context.Context, arg1 relation.EndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerRelationUUIDByEndpointIdentifiers", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerRelationUUIDByEndpointIdentifiers indicates an expected call of GetPeerRelationUUIDByEndpointIdentifiers.
func (mr *MockMigrationStateMockRecorder) GetPeerRelationUUIDByEndpointIdentifiers(arg0, arg1 any) *MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerRelationUUIDByEndpointIdentifiers", reflect.TypeOf((*MockMigrationState)(nil).GetPeerRelationUUIDByEndpointIdentifiers), arg0, arg1)
	return &MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall{Call: call}
}

// MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall wrap *gomock.Call
type MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall) Return(arg0 relation.UUID, arg1 error) *MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall) Do(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockMigrationStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportRelation mocks base method.
func (m *MockMigrationState) ImportRelation(arg0 context.Context, arg1, arg2 relation.EndpointIdentifier, arg3 uint64, arg4 charm.RelationScope) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRelation", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportRelation indicates an expected call of ImportRelation.
func (mr *MockMigrationStateMockRecorder) ImportRelation(arg0, arg1, arg2, arg3, arg4 any) *MockMigrationStateImportRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRelation", reflect.TypeOf((*MockMigrationState)(nil).ImportRelation), arg0, arg1, arg2, arg3, arg4)
	return &MockMigrationStateImportRelationCall{Call: call}
}

// MockMigrationStateImportRelationCall wrap *gomock.Call
type MockMigrationStateImportRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateImportRelationCall) Return(arg0 relation.UUID, arg1 error) *MockMigrationStateImportRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateImportRelationCall) Do(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier, uint64, charm.RelationScope) (relation.UUID, error)) *MockMigrationStateImportRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateImportRelationCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier, uint64, charm.RelationScope) (relation.UUID, error)) *MockMigrationStateImportRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationApplicationSettings mocks base method.
func (m *MockMigrationState) SetRelationApplicationSettings(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationApplicationSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationApplicationSettings indicates an expected call of SetRelationApplicationSettings.
func (mr *MockMigrationStateMockRecorder) SetRelationApplicationSettings(arg0, arg1, arg2, arg3 any) *MockMigrationStateSetRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationApplicationSettings", reflect.TypeOf((*MockMigrationState)(nil).SetRelationApplicationSettings), arg0, arg1, arg2, arg3)
	return &MockMigrationStateSetRelationApplicationSettingsCall{Call: call}
}

// MockMigrationStateSetRelationApplicationSettingsCall wrap *gomock.Call
type MockMigrationStateSetRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMigrationStateSetRelationApplicationSettingsCall) Return(arg0 error) *MockMigrationStateSetRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMigrationStateSetRelationApplicationSettingsCall) Do(f func(context.Context, relation.UUID, application.UUID, map[string]string) error) *MockMigrationStateSetRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMigrationStateSetRelationApplicationSettingsCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID, map[string]string) error) *MockMigrationStateSetRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(arg0 context.Context, arg1 eventsource.NamespaceQuery, arg2 string, arg3 eventsource.Mapper, arg4 eventsource.FilterOption, arg5 ...eventsource.FilterOption) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyMapperWatcher(arg0 context.Context, arg1 string, arg2 eventsource.Mapper, arg3 eventsource.FilterOption, arg4 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyMapperWatcher indicates an expected call of NewNotifyMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyMapperWatcher(arg0, arg1, arg2, arg3 any, arg4 ...any) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) Do(f func(context.Context, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyMapperWatcherCall) DoAndReturn(f func(context.Context, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 context.Context, arg1 string, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
