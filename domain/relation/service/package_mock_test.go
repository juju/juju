// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/relation/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/relation/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	relation "github.com/juju/juju/core/relation"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	relation0 "github.com/juju/juju/domain/relation"
	charm "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddRelation mocks base method.
func (m *MockState) AddRelation(arg0 context.Context, arg1, arg2 relation0.CandidateEndpointIdentifier) (relation0.Endpoint, relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.Endpoint)
	ret1, _ := ret[1].(relation0.Endpoint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockStateMockRecorder) AddRelation(arg0, arg1, arg2 any) *MockStateAddRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockState)(nil).AddRelation), arg0, arg1, arg2)
	return &MockStateAddRelationCall{Call: call}
}

// MockStateAddRelationCall wrap *gomock.Call
type MockStateAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddRelationCall) Return(arg0, arg1 relation0.Endpoint, arg2 error) *MockStateAddRelationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddRelationCall) Do(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier) (relation0.Endpoint, relation0.Endpoint, error)) *MockStateAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddRelationCall) DoAndReturn(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier) (relation0.Endpoint, relation0.Endpoint, error)) *MockStateAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationRelationsInfo mocks base method.
func (m *MockState) ApplicationRelationsInfo(arg0 context.Context, arg1 application.ID) ([]relation0.EndpointRelationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationRelationsInfo", arg0, arg1)
	ret0, _ := ret[0].([]relation0.EndpointRelationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationRelationsInfo indicates an expected call of ApplicationRelationsInfo.
func (mr *MockStateMockRecorder) ApplicationRelationsInfo(arg0, arg1 any) *MockStateApplicationRelationsInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationRelationsInfo", reflect.TypeOf((*MockState)(nil).ApplicationRelationsInfo), arg0, arg1)
	return &MockStateApplicationRelationsInfoCall{Call: call}
}

// MockStateApplicationRelationsInfoCall wrap *gomock.Call
type MockStateApplicationRelationsInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateApplicationRelationsInfoCall) Return(arg0 []relation0.EndpointRelationData, arg1 error) *MockStateApplicationRelationsInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateApplicationRelationsInfoCall) Do(f func(context.Context, application.ID) ([]relation0.EndpointRelationData, error)) *MockStateApplicationRelationsInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateApplicationRelationsInfoCall) DoAndReturn(f func(context.Context, application.ID) ([]relation0.EndpointRelationData, error)) *MockStateApplicationRelationsInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePeerRelations mocks base method.
func (m *MockState) CreatePeerRelations(arg0 context.Context, arg1 application.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePeerRelations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePeerRelations indicates an expected call of CreatePeerRelations.
func (mr *MockStateMockRecorder) CreatePeerRelations(arg0, arg1 any) *MockStateCreatePeerRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeerRelations", reflect.TypeOf((*MockState)(nil).CreatePeerRelations), arg0, arg1)
	return &MockStateCreatePeerRelationsCall{Call: call}
}

// MockStateCreatePeerRelationsCall wrap *gomock.Call
type MockStateCreatePeerRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreatePeerRelationsCall) Return(arg0 error) *MockStateCreatePeerRelationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreatePeerRelationsCall) Do(f func(context.Context, application.ID) error) *MockStateCreatePeerRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreatePeerRelationsCall) DoAndReturn(f func(context.Context, application.ID) error) *MockStateCreatePeerRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnterScope mocks base method.
func (m *MockState) EnterScope(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterScope", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterScope indicates an expected call of EnterScope.
func (mr *MockStateMockRecorder) EnterScope(arg0, arg1, arg2, arg3 any) *MockStateEnterScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterScope", reflect.TypeOf((*MockState)(nil).EnterScope), arg0, arg1, arg2, arg3)
	return &MockStateEnterScopeCall{Call: call}
}

// MockStateEnterScopeCall wrap *gomock.Call
type MockStateEnterScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnterScopeCall) Return(arg0 error) *MockStateEnterScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnterScopeCall) Do(f func(context.Context, relation.UUID, unit.Name, map[string]string) error) *MockStateEnterScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnterScopeCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name, map[string]string) error) *MockStateEnterScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllRelationDetails mocks base method.
func (m *MockState) GetAllRelationDetails(arg0 context.Context) ([]relation0.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationDetails", arg0)
	ret0, _ := ret[0].([]relation0.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationDetails indicates an expected call of GetAllRelationDetails.
func (mr *MockStateMockRecorder) GetAllRelationDetails(arg0 any) *MockStateGetAllRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationDetails", reflect.TypeOf((*MockState)(nil).GetAllRelationDetails), arg0)
	return &MockStateGetAllRelationDetailsCall{Call: call}
}

// MockStateGetAllRelationDetailsCall wrap *gomock.Call
type MockStateGetAllRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllRelationDetailsCall) Return(arg0 []relation0.RelationDetailsResult, arg1 error) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllRelationDetailsCall) Do(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllRelationDetailsCall) DoAndReturn(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationEndpoints mocks base method.
func (m *MockState) GetApplicationEndpoints(arg0 context.Context, arg1 application.ID) ([]relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationEndpoints", arg0, arg1)
	ret0, _ := ret[0].([]relation0.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationEndpoints indicates an expected call of GetApplicationEndpoints.
func (mr *MockStateMockRecorder) GetApplicationEndpoints(arg0, arg1 any) *MockStateGetApplicationEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationEndpoints", reflect.TypeOf((*MockState)(nil).GetApplicationEndpoints), arg0, arg1)
	return &MockStateGetApplicationEndpointsCall{Call: call}
}

// MockStateGetApplicationEndpointsCall wrap *gomock.Call
type MockStateGetApplicationEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationEndpointsCall) Return(arg0 []relation0.Endpoint, arg1 error) *MockStateGetApplicationEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationEndpointsCall) Do(f func(context.Context, application.ID) ([]relation0.Endpoint, error)) *MockStateGetApplicationEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationEndpointsCall) DoAndReturn(f func(context.Context, application.ID) ([]relation0.Endpoint, error)) *MockStateGetApplicationEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationRelations mocks base method.
func (m *MockState) GetApplicationRelations(arg0 context.Context, arg1 application.ID) ([]relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRelations", arg0, arg1)
	ret0, _ := ret[0].([]relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationRelations indicates an expected call of GetApplicationRelations.
func (mr *MockStateMockRecorder) GetApplicationRelations(arg0, arg1 any) *MockStateGetApplicationRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRelations", reflect.TypeOf((*MockState)(nil).GetApplicationRelations), arg0, arg1)
	return &MockStateGetApplicationRelationsCall{Call: call}
}

// MockStateGetApplicationRelationsCall wrap *gomock.Call
type MockStateGetApplicationRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationRelationsCall) Return(arg0 []relation.UUID, arg1 error) *MockStateGetApplicationRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationRelationsCall) Do(f func(context.Context, application.ID) ([]relation.UUID, error)) *MockStateGetApplicationRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationRelationsCall) DoAndReturn(f func(context.Context, application.ID) ([]relation.UUID, error)) *MockStateGetApplicationRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGoalStateRelationDataForApplication mocks base method.
func (m *MockState) GetGoalStateRelationDataForApplication(arg0 context.Context, arg1 application.ID) ([]relation0.GoalStateRelationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoalStateRelationDataForApplication", arg0, arg1)
	ret0, _ := ret[0].([]relation0.GoalStateRelationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoalStateRelationDataForApplication indicates an expected call of GetGoalStateRelationDataForApplication.
func (mr *MockStateMockRecorder) GetGoalStateRelationDataForApplication(arg0, arg1 any) *MockStateGetGoalStateRelationDataForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoalStateRelationDataForApplication", reflect.TypeOf((*MockState)(nil).GetGoalStateRelationDataForApplication), arg0, arg1)
	return &MockStateGetGoalStateRelationDataForApplicationCall{Call: call}
}

// MockStateGetGoalStateRelationDataForApplicationCall wrap *gomock.Call
type MockStateGetGoalStateRelationDataForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetGoalStateRelationDataForApplicationCall) Return(arg0 []relation0.GoalStateRelationData, arg1 error) *MockStateGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetGoalStateRelationDataForApplicationCall) Do(f func(context.Context, application.ID) ([]relation0.GoalStateRelationData, error)) *MockStateGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetGoalStateRelationDataForApplicationCall) DoAndReturn(f func(context.Context, application.ID) ([]relation0.GoalStateRelationData, error)) *MockStateGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMapperDataForWatchLifeSuspendedStatus mocks base method.
func (m *MockState) GetMapperDataForWatchLifeSuspendedStatus(arg0 context.Context, arg1 relation.UUID, arg2 application.ID) (relation0.RelationLifeSuspendedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapperDataForWatchLifeSuspendedStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationLifeSuspendedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapperDataForWatchLifeSuspendedStatus indicates an expected call of GetMapperDataForWatchLifeSuspendedStatus.
func (mr *MockStateMockRecorder) GetMapperDataForWatchLifeSuspendedStatus(arg0, arg1, arg2 any) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapperDataForWatchLifeSuspendedStatus", reflect.TypeOf((*MockState)(nil).GetMapperDataForWatchLifeSuspendedStatus), arg0, arg1, arg2)
	return &MockStateGetMapperDataForWatchLifeSuspendedStatusCall{Call: call}
}

// MockStateGetMapperDataForWatchLifeSuspendedStatusCall wrap *gomock.Call
type MockStateGetMapperDataForWatchLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMapperDataForWatchLifeSuspendedStatusCall) Return(arg0 relation0.RelationLifeSuspendedData, arg1 error) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMapperDataForWatchLifeSuspendedStatusCall) Do(f func(context.Context, relation.UUID, application.ID) (relation0.RelationLifeSuspendedData, error)) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMapperDataForWatchLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, relation.UUID, application.ID) (relation0.RelationLifeSuspendedData, error)) *MockStateGetMapperDataForWatchLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOtherRelatedEndpointApplicationData mocks base method.
func (m *MockState) GetOtherRelatedEndpointApplicationData(arg0 context.Context, arg1 relation.UUID, arg2 application.ID) (relation0.OtherApplicationForWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherRelatedEndpointApplicationData", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.OtherApplicationForWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherRelatedEndpointApplicationData indicates an expected call of GetOtherRelatedEndpointApplicationData.
func (mr *MockStateMockRecorder) GetOtherRelatedEndpointApplicationData(arg0, arg1, arg2 any) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherRelatedEndpointApplicationData", reflect.TypeOf((*MockState)(nil).GetOtherRelatedEndpointApplicationData), arg0, arg1, arg2)
	return &MockStateGetOtherRelatedEndpointApplicationDataCall{Call: call}
}

// MockStateGetOtherRelatedEndpointApplicationDataCall wrap *gomock.Call
type MockStateGetOtherRelatedEndpointApplicationDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetOtherRelatedEndpointApplicationDataCall) Return(arg0 relation0.OtherApplicationForWatcher, arg1 error) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetOtherRelatedEndpointApplicationDataCall) Do(f func(context.Context, relation.UUID, application.ID) (relation0.OtherApplicationForWatcher, error)) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetOtherRelatedEndpointApplicationDataCall) DoAndReturn(f func(context.Context, relation.UUID, application.ID) (relation0.OtherApplicationForWatcher, error)) *MockStateGetOtherRelatedEndpointApplicationDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPeerRelationUUIDByEndpointIdentifiers mocks base method.
func (m *MockState) GetPeerRelationUUIDByEndpointIdentifiers(arg0 context.Context, arg1 relation.EndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerRelationUUIDByEndpointIdentifiers", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerRelationUUIDByEndpointIdentifiers indicates an expected call of GetPeerRelationUUIDByEndpointIdentifiers.
func (mr *MockStateMockRecorder) GetPeerRelationUUIDByEndpointIdentifiers(arg0, arg1 any) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerRelationUUIDByEndpointIdentifiers", reflect.TypeOf((*MockState)(nil).GetPeerRelationUUIDByEndpointIdentifiers), arg0, arg1)
	return &MockStateGetPeerRelationUUIDByEndpointIdentifiersCall{Call: call}
}

// MockStateGetPeerRelationUUIDByEndpointIdentifiersCall wrap *gomock.Call
type MockStateGetPeerRelationUUIDByEndpointIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) Do(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrincipalSubordinateApplicationIDs mocks base method.
func (m *MockState) GetPrincipalSubordinateApplicationIDs(arg0 context.Context, arg1 unit.UUID) (application.ID, application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrincipalSubordinateApplicationIDs", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(application.ID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrincipalSubordinateApplicationIDs indicates an expected call of GetPrincipalSubordinateApplicationIDs.
func (mr *MockStateMockRecorder) GetPrincipalSubordinateApplicationIDs(arg0, arg1 any) *MockStateGetPrincipalSubordinateApplicationIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipalSubordinateApplicationIDs", reflect.TypeOf((*MockState)(nil).GetPrincipalSubordinateApplicationIDs), arg0, arg1)
	return &MockStateGetPrincipalSubordinateApplicationIDsCall{Call: call}
}

// MockStateGetPrincipalSubordinateApplicationIDsCall wrap *gomock.Call
type MockStateGetPrincipalSubordinateApplicationIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetPrincipalSubordinateApplicationIDsCall) Return(arg0, arg1 application.ID, arg2 error) *MockStateGetPrincipalSubordinateApplicationIDsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetPrincipalSubordinateApplicationIDsCall) Do(f func(context.Context, unit.UUID) (application.ID, application.ID, error)) *MockStateGetPrincipalSubordinateApplicationIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetPrincipalSubordinateApplicationIDsCall) DoAndReturn(f func(context.Context, unit.UUID) (application.ID, application.ID, error)) *MockStateGetPrincipalSubordinateApplicationIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegularRelationUUIDByEndpointIdentifiers mocks base method.
func (m *MockState) GetRegularRelationUUIDByEndpointIdentifiers(arg0 context.Context, arg1, arg2 relation.EndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegularRelationUUIDByEndpointIdentifiers", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegularRelationUUIDByEndpointIdentifiers indicates an expected call of GetRegularRelationUUIDByEndpointIdentifiers.
func (mr *MockStateMockRecorder) GetRegularRelationUUIDByEndpointIdentifiers(arg0, arg1, arg2 any) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegularRelationUUIDByEndpointIdentifiers", reflect.TypeOf((*MockState)(nil).GetRegularRelationUUIDByEndpointIdentifiers), arg0, arg1, arg2)
	return &MockStateGetRegularRelationUUIDByEndpointIdentifiersCall{Call: call}
}

// MockStateGetRegularRelationUUIDByEndpointIdentifiersCall wrap *gomock.Call
type MockStateGetRegularRelationUUIDByEndpointIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) Do(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationApplicationSettings mocks base method.
func (m *MockState) GetRelationApplicationSettings(arg0 context.Context, arg1 relation.UUID, arg2 application.ID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationApplicationSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationApplicationSettings indicates an expected call of GetRelationApplicationSettings.
func (mr *MockStateMockRecorder) GetRelationApplicationSettings(arg0, arg1, arg2 any) *MockStateGetRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationApplicationSettings", reflect.TypeOf((*MockState)(nil).GetRelationApplicationSettings), arg0, arg1, arg2)
	return &MockStateGetRelationApplicationSettingsCall{Call: call}
}

// MockStateGetRelationApplicationSettingsCall wrap *gomock.Call
type MockStateGetRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationApplicationSettingsCall) Return(arg0 map[string]string, arg1 error) *MockStateGetRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationApplicationSettingsCall) Do(f func(context.Context, relation.UUID, application.ID) (map[string]string, error)) *MockStateGetRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationApplicationSettingsCall) DoAndReturn(f func(context.Context, relation.UUID, application.ID) (map[string]string, error)) *MockStateGetRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockState) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockStateMockRecorder) GetRelationDetails(arg0, arg1 any) *MockStateGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockState)(nil).GetRelationDetails), arg0, arg1)
	return &MockStateGetRelationDetailsCall{Call: call}
}

// MockStateGetRelationDetailsCall wrap *gomock.Call
type MockStateGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationDetailsCall) Return(arg0 relation0.RelationDetailsResult, arg1 error) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetailsResult, error)) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetailsResult, error)) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpointScope mocks base method.
func (m *MockState) GetRelationEndpointScope(arg0 context.Context, arg1 relation.UUID, arg2 application.ID) (charm.RelationScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpointScope", arg0, arg1, arg2)
	ret0, _ := ret[0].(charm.RelationScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpointScope indicates an expected call of GetRelationEndpointScope.
func (mr *MockStateMockRecorder) GetRelationEndpointScope(arg0, arg1, arg2 any) *MockStateGetRelationEndpointScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpointScope", reflect.TypeOf((*MockState)(nil).GetRelationEndpointScope), arg0, arg1, arg2)
	return &MockStateGetRelationEndpointScopeCall{Call: call}
}

// MockStateGetRelationEndpointScopeCall wrap *gomock.Call
type MockStateGetRelationEndpointScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointScopeCall) Return(arg0 charm.RelationScope, arg1 error) *MockStateGetRelationEndpointScopeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointScopeCall) Do(f func(context.Context, relation.UUID, application.ID) (charm.RelationScope, error)) *MockStateGetRelationEndpointScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointScopeCall) DoAndReturn(f func(context.Context, relation.UUID, application.ID) (charm.RelationScope, error)) *MockStateGetRelationEndpointScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpointUUID mocks base method.
func (m *MockState) GetRelationEndpointUUID(arg0 context.Context, arg1 relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpointUUID", arg0, arg1)
	ret0, _ := ret[0].(relation.EndpointUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpointUUID indicates an expected call of GetRelationEndpointUUID.
func (mr *MockStateMockRecorder) GetRelationEndpointUUID(arg0, arg1 any) *MockStateGetRelationEndpointUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpointUUID", reflect.TypeOf((*MockState)(nil).GetRelationEndpointUUID), arg0, arg1)
	return &MockStateGetRelationEndpointUUIDCall{Call: call}
}

// MockStateGetRelationEndpointUUIDCall wrap *gomock.Call
type MockStateGetRelationEndpointUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointUUIDCall) Return(arg0 relation.EndpointUUID, arg1 error) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointUUIDCall) Do(f func(context.Context, relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error)) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointUUIDCall) DoAndReturn(f func(context.Context, relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error)) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpoints mocks base method.
func (m *MockState) GetRelationEndpoints(arg0 context.Context, arg1 relation.UUID) ([]relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpoints", arg0, arg1)
	ret0, _ := ret[0].([]relation0.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpoints indicates an expected call of GetRelationEndpoints.
func (mr *MockStateMockRecorder) GetRelationEndpoints(arg0, arg1 any) *MockStateGetRelationEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpoints", reflect.TypeOf((*MockState)(nil).GetRelationEndpoints), arg0, arg1)
	return &MockStateGetRelationEndpointsCall{Call: call}
}

// MockStateGetRelationEndpointsCall wrap *gomock.Call
type MockStateGetRelationEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointsCall) Return(arg0 []relation0.Endpoint, arg1 error) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointsCall) Do(f func(context.Context, relation.UUID) ([]relation0.Endpoint, error)) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointsCall) DoAndReturn(f func(context.Context, relation.UUID) ([]relation0.Endpoint, error)) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationID mocks base method.
func (m *MockState) GetRelationID(arg0 context.Context, arg1 relation.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationID indicates an expected call of GetRelationID.
func (mr *MockStateMockRecorder) GetRelationID(arg0, arg1 any) *MockStateGetRelationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationID", reflect.TypeOf((*MockState)(nil).GetRelationID), arg0, arg1)
	return &MockStateGetRelationIDCall{Call: call}
}

// MockStateGetRelationIDCall wrap *gomock.Call
type MockStateGetRelationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationIDCall) Return(arg0 int, arg1 error) *MockStateGetRelationIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationIDCall) Do(f func(context.Context, relation.UUID) (int, error)) *MockStateGetRelationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationIDCall) DoAndReturn(f func(context.Context, relation.UUID) (int, error)) *MockStateGetRelationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByID mocks base method.
func (m *MockState) GetRelationUUIDByID(arg0 context.Context, arg1 int) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByID indicates an expected call of GetRelationUUIDByID.
func (mr *MockStateMockRecorder) GetRelationUUIDByID(arg0, arg1 any) *MockStateGetRelationUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByID", reflect.TypeOf((*MockState)(nil).GetRelationUUIDByID), arg0, arg1)
	return &MockStateGetRelationUUIDByIDCall{Call: call}
}

// MockStateGetRelationUUIDByIDCall wrap *gomock.Call
type MockStateGetRelationUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUUIDByIDCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUUIDByIDCall) Do(f func(context.Context, int) (relation.UUID, error)) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUUIDByIDCall) DoAndReturn(f func(context.Context, int) (relation.UUID, error)) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnit mocks base method.
func (m *MockState) GetRelationUnit(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) (relation.UnitUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UnitUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnit indicates an expected call of GetRelationUnit.
func (mr *MockStateMockRecorder) GetRelationUnit(arg0, arg1, arg2 any) *MockStateGetRelationUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnit", reflect.TypeOf((*MockState)(nil).GetRelationUnit), arg0, arg1, arg2)
	return &MockStateGetRelationUnitCall{Call: call}
}

// MockStateGetRelationUnitCall wrap *gomock.Call
type MockStateGetRelationUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitCall) Return(arg0 relation.UnitUUID, arg1 error) *MockStateGetRelationUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitCall) Do(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockStateGetRelationUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockStateGetRelationUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitChanges mocks base method.
func (m *MockState) GetRelationUnitChanges(arg0 context.Context, arg1 []unit.UUID, arg2 []application.ID) (relation0.RelationUnitsChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitChanges", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationUnitsChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitChanges indicates an expected call of GetRelationUnitChanges.
func (mr *MockStateMockRecorder) GetRelationUnitChanges(arg0, arg1, arg2 any) *MockStateGetRelationUnitChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitChanges", reflect.TypeOf((*MockState)(nil).GetRelationUnitChanges), arg0, arg1, arg2)
	return &MockStateGetRelationUnitChangesCall{Call: call}
}

// MockStateGetRelationUnitChangesCall wrap *gomock.Call
type MockStateGetRelationUnitChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitChangesCall) Return(arg0 relation0.RelationUnitsChange, arg1 error) *MockStateGetRelationUnitChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitChangesCall) Do(f func(context.Context, []unit.UUID, []application.ID) (relation0.RelationUnitsChange, error)) *MockStateGetRelationUnitChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitChangesCall) DoAndReturn(f func(context.Context, []unit.UUID, []application.ID) (relation0.RelationUnitsChange, error)) *MockStateGetRelationUnitChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitEndpointName mocks base method.
func (m *MockState) GetRelationUnitEndpointName(arg0 context.Context, arg1 relation.UnitUUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitEndpointName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitEndpointName indicates an expected call of GetRelationUnitEndpointName.
func (mr *MockStateMockRecorder) GetRelationUnitEndpointName(arg0, arg1 any) *MockStateGetRelationUnitEndpointNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitEndpointName", reflect.TypeOf((*MockState)(nil).GetRelationUnitEndpointName), arg0, arg1)
	return &MockStateGetRelationUnitEndpointNameCall{Call: call}
}

// MockStateGetRelationUnitEndpointNameCall wrap *gomock.Call
type MockStateGetRelationUnitEndpointNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitEndpointNameCall) Return(arg0 string, arg1 error) *MockStateGetRelationUnitEndpointNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitEndpointNameCall) Do(f func(context.Context, relation.UnitUUID) (string, error)) *MockStateGetRelationUnitEndpointNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitEndpointNameCall) DoAndReturn(f func(context.Context, relation.UnitUUID) (string, error)) *MockStateGetRelationUnitEndpointNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitSettings mocks base method.
func (m *MockState) GetRelationUnitSettings(arg0 context.Context, arg1 relation.UnitUUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitSettings", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitSettings indicates an expected call of GetRelationUnitSettings.
func (mr *MockStateMockRecorder) GetRelationUnitSettings(arg0, arg1 any) *MockStateGetRelationUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitSettings", reflect.TypeOf((*MockState)(nil).GetRelationUnitSettings), arg0, arg1)
	return &MockStateGetRelationUnitSettingsCall{Call: call}
}

// MockStateGetRelationUnitSettingsCall wrap *gomock.Call
type MockStateGetRelationUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitSettingsCall) Return(arg0 map[string]string, arg1 error) *MockStateGetRelationUnitSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockStateGetRelationUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockStateGetRelationUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationsStatusForUnit mocks base method.
func (m *MockState) GetRelationsStatusForUnit(arg0 context.Context, arg1 unit.UUID) ([]relation0.RelationUnitStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsStatusForUnit", arg0, arg1)
	ret0, _ := ret[0].([]relation0.RelationUnitStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsStatusForUnit indicates an expected call of GetRelationsStatusForUnit.
func (mr *MockStateMockRecorder) GetRelationsStatusForUnit(arg0, arg1 any) *MockStateGetRelationsStatusForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsStatusForUnit", reflect.TypeOf((*MockState)(nil).GetRelationsStatusForUnit), arg0, arg1)
	return &MockStateGetRelationsStatusForUnitCall{Call: call}
}

// MockStateGetRelationsStatusForUnitCall wrap *gomock.Call
type MockStateGetRelationsStatusForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationsStatusForUnitCall) Return(arg0 []relation0.RelationUnitStatusResult, arg1 error) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationsStatusForUnitCall) Do(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatusResult, error)) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationsStatusForUnitCall) DoAndReturn(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatusResult, error)) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchLifeSuspendedStatus mocks base method.
func (m *MockState) InitialWatchLifeSuspendedStatus(arg0 application.ID) (string, string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchLifeSuspendedStatus", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(eventsource.NamespaceQuery)
	return ret0, ret1, ret2
}

// InitialWatchLifeSuspendedStatus indicates an expected call of InitialWatchLifeSuspendedStatus.
func (mr *MockStateMockRecorder) InitialWatchLifeSuspendedStatus(arg0 any) *MockStateInitialWatchLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchLifeSuspendedStatus", reflect.TypeOf((*MockState)(nil).InitialWatchLifeSuspendedStatus), arg0)
	return &MockStateInitialWatchLifeSuspendedStatusCall{Call: call}
}

// MockStateInitialWatchLifeSuspendedStatusCall wrap *gomock.Call
type MockStateInitialWatchLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchLifeSuspendedStatusCall) Return(arg0, arg1 string, arg2 eventsource.NamespaceQuery) *MockStateInitialWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchLifeSuspendedStatusCall) Do(f func(application.ID) (string, string, eventsource.NamespaceQuery)) *MockStateInitialWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchLifeSuspendedStatusCall) DoAndReturn(f func(application.ID) (string, string, eventsource.NamespaceQuery)) *MockStateInitialWatchLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchRelatedUnits mocks base method.
func (m *MockState) InitialWatchRelatedUnits(arg0 unit.Name, arg1 relation.UUID) ([]string, eventsource.NamespaceQuery, eventsource.Mapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchRelatedUnits", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	ret2, _ := ret[2].(eventsource.Mapper)
	return ret0, ret1, ret2
}

// InitialWatchRelatedUnits indicates an expected call of InitialWatchRelatedUnits.
func (mr *MockStateMockRecorder) InitialWatchRelatedUnits(arg0, arg1 any) *MockStateInitialWatchRelatedUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchRelatedUnits", reflect.TypeOf((*MockState)(nil).InitialWatchRelatedUnits), arg0, arg1)
	return &MockStateInitialWatchRelatedUnitsCall{Call: call}
}

// MockStateInitialWatchRelatedUnitsCall wrap *gomock.Call
type MockStateInitialWatchRelatedUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchRelatedUnitsCall) Return(arg0 []string, arg1 eventsource.NamespaceQuery, arg2 eventsource.Mapper) *MockStateInitialWatchRelatedUnitsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchRelatedUnitsCall) Do(f func(unit.Name, relation.UUID) ([]string, eventsource.NamespaceQuery, eventsource.Mapper)) *MockStateInitialWatchRelatedUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchRelatedUnitsCall) DoAndReturn(f func(unit.Name, relation.UUID) ([]string, eventsource.NamespaceQuery, eventsource.Mapper)) *MockStateInitialWatchRelatedUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeaveScope mocks base method.
func (m *MockState) LeaveScope(arg0 context.Context, arg1 relation.UnitUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveScope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveScope indicates an expected call of LeaveScope.
func (mr *MockStateMockRecorder) LeaveScope(arg0, arg1 any) *MockStateLeaveScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveScope", reflect.TypeOf((*MockState)(nil).LeaveScope), arg0, arg1)
	return &MockStateLeaveScopeCall{Call: call}
}

// MockStateLeaveScopeCall wrap *gomock.Call
type MockStateLeaveScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateLeaveScopeCall) Return(arg0 error) *MockStateLeaveScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateLeaveScopeCall) Do(f func(context.Context, relation.UnitUUID) error) *MockStateLeaveScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateLeaveScopeCall) DoAndReturn(f func(context.Context, relation.UnitUUID) error) *MockStateLeaveScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NeedsSubordinateUnit mocks base method.
func (m *MockState) NeedsSubordinateUnit(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) (*application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsSubordinateUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeedsSubordinateUnit indicates an expected call of NeedsSubordinateUnit.
func (mr *MockStateMockRecorder) NeedsSubordinateUnit(arg0, arg1, arg2 any) *MockStateNeedsSubordinateUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsSubordinateUnit", reflect.TypeOf((*MockState)(nil).NeedsSubordinateUnit), arg0, arg1, arg2)
	return &MockStateNeedsSubordinateUnitCall{Call: call}
}

// MockStateNeedsSubordinateUnitCall wrap *gomock.Call
type MockStateNeedsSubordinateUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNeedsSubordinateUnitCall) Return(arg0 *application.ID, arg1 error) *MockStateNeedsSubordinateUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNeedsSubordinateUnitCall) Do(f func(context.Context, relation.UUID, unit.Name) (*application.ID, error)) *MockStateNeedsSubordinateUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNeedsSubordinateUnitCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) (*application.ID, error)) *MockStateNeedsSubordinateUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationApplicationAndUnitSettings mocks base method.
func (m *MockState) SetRelationApplicationAndUnitSettings(arg0 context.Context, arg1 relation.UnitUUID, arg2, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationApplicationAndUnitSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationApplicationAndUnitSettings indicates an expected call of SetRelationApplicationAndUnitSettings.
func (mr *MockStateMockRecorder) SetRelationApplicationAndUnitSettings(arg0, arg1, arg2, arg3 any) *MockStateSetRelationApplicationAndUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationApplicationAndUnitSettings", reflect.TypeOf((*MockState)(nil).SetRelationApplicationAndUnitSettings), arg0, arg1, arg2, arg3)
	return &MockStateSetRelationApplicationAndUnitSettingsCall{Call: call}
}

// MockStateSetRelationApplicationAndUnitSettingsCall wrap *gomock.Call
type MockStateSetRelationApplicationAndUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationApplicationAndUnitSettingsCall) Return(arg0 error) *MockStateSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationApplicationAndUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID, map[string]string, map[string]string) error) *MockStateSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationApplicationAndUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID, map[string]string, map[string]string) error) *MockStateSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationApplicationSettings mocks base method.
func (m *MockState) SetRelationApplicationSettings(arg0 context.Context, arg1 relation.UUID, arg2 application.ID, arg3 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationApplicationSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationApplicationSettings indicates an expected call of SetRelationApplicationSettings.
func (mr *MockStateMockRecorder) SetRelationApplicationSettings(arg0, arg1, arg2, arg3 any) *MockStateSetRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationApplicationSettings", reflect.TypeOf((*MockState)(nil).SetRelationApplicationSettings), arg0, arg1, arg2, arg3)
	return &MockStateSetRelationApplicationSettingsCall{Call: call}
}

// MockStateSetRelationApplicationSettingsCall wrap *gomock.Call
type MockStateSetRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationApplicationSettingsCall) Return(arg0 error) *MockStateSetRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationApplicationSettingsCall) Do(f func(context.Context, relation.UUID, application.ID, map[string]string) error) *MockStateSetRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationApplicationSettingsCall) DoAndReturn(f func(context.Context, relation.UUID, application.ID, map[string]string) error) *MockStateSetRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationUnitSettings mocks base method.
func (m *MockState) SetRelationUnitSettings(arg0 context.Context, arg1 relation.UnitUUID, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationUnitSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationUnitSettings indicates an expected call of SetRelationUnitSettings.
func (mr *MockStateMockRecorder) SetRelationUnitSettings(arg0, arg1, arg2 any) *MockStateSetRelationUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationUnitSettings", reflect.TypeOf((*MockState)(nil).SetRelationUnitSettings), arg0, arg1, arg2)
	return &MockStateSetRelationUnitSettingsCall{Call: call}
}

// MockStateSetRelationUnitSettingsCall wrap *gomock.Call
type MockStateSetRelationUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRelationUnitSettingsCall) Return(arg0 error) *MockStateSetRelationUnitSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRelationUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID, map[string]string) error) *MockStateSetRelationUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRelationUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID, map[string]string) error) *MockStateSetRelationUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatcherApplicationSettingsNamespace mocks base method.
func (m *MockState) WatcherApplicationSettingsNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatcherApplicationSettingsNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// WatcherApplicationSettingsNamespace indicates an expected call of WatcherApplicationSettingsNamespace.
func (mr *MockStateMockRecorder) WatcherApplicationSettingsNamespace() *MockStateWatcherApplicationSettingsNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatcherApplicationSettingsNamespace", reflect.TypeOf((*MockState)(nil).WatcherApplicationSettingsNamespace))
	return &MockStateWatcherApplicationSettingsNamespaceCall{Call: call}
}

// MockStateWatcherApplicationSettingsNamespaceCall wrap *gomock.Call
type MockStateWatcherApplicationSettingsNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateWatcherApplicationSettingsNamespaceCall) Return(arg0 string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateWatcherApplicationSettingsNamespaceCall) Do(f func() string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateWatcherApplicationSettingsNamespaceCall) DoAndReturn(f func() string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(arg0 eventsource.NamespaceQuery, arg1 eventsource.Mapper, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(eventsource.NamespaceQuery, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 eventsource.FilterOption, arg1 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0 any, arg1 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
