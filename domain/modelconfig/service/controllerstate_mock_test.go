// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelconfig/service (interfaces: ControllerState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination controllerstate_mock_test.go github.com/juju/juju/domain/modelconfig/service ControllerState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// GetModelSecretBackend mocks base method.
func (m *MockControllerState) GetModelSecretBackend(arg0 context.Context, arg1 model.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSecretBackend indicates an expected call of GetModelSecretBackend.
func (mr *MockControllerStateMockRecorder) GetModelSecretBackend(arg0, arg1 any) *MockControllerStateGetModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSecretBackend", reflect.TypeOf((*MockControllerState)(nil).GetModelSecretBackend), arg0, arg1)
	return &MockControllerStateGetModelSecretBackendCall{Call: call}
}

// MockControllerStateGetModelSecretBackendCall wrap *gomock.Call
type MockControllerStateGetModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateGetModelSecretBackendCall) Return(arg0 string, arg1 error) *MockControllerStateGetModelSecretBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateGetModelSecretBackendCall) Do(f func(context.Context, model.UUID) (string, error)) *MockControllerStateGetModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateGetModelSecretBackendCall) DoAndReturn(f func(context.Context, model.UUID) (string, error)) *MockControllerStateGetModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelSecretBackend mocks base method.
func (m *MockControllerState) SetModelSecretBackend(arg0 context.Context, arg1 model.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelSecretBackend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelSecretBackend indicates an expected call of SetModelSecretBackend.
func (mr *MockControllerStateMockRecorder) SetModelSecretBackend(arg0, arg1, arg2 any) *MockControllerStateSetModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelSecretBackend", reflect.TypeOf((*MockControllerState)(nil).SetModelSecretBackend), arg0, arg1, arg2)
	return &MockControllerStateSetModelSecretBackendCall{Call: call}
}

// MockControllerStateSetModelSecretBackendCall wrap *gomock.Call
type MockControllerStateSetModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateSetModelSecretBackendCall) Return(arg0 error) *MockControllerStateSetModelSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateSetModelSecretBackendCall) Do(f func(context.Context, model.UUID, string) error) *MockControllerStateSetModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateSetModelSecretBackendCall) DoAndReturn(f func(context.Context, model.UUID, string) error) *MockControllerStateSetModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
