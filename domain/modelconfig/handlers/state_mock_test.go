// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelconfig/handlers (interfaces: SecretBackendState)
//
// Generated by this command:
//
//	mockgen -typed -package handlers -destination state_mock_test.go github.com/juju/juju/domain/modelconfig/handlers SecretBackendState
//

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendState is a mock of SecretBackendState interface.
type MockSecretBackendState struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendStateMockRecorder
}

// MockSecretBackendStateMockRecorder is the mock recorder for MockSecretBackendState.
type MockSecretBackendStateMockRecorder struct {
	mock *MockSecretBackendState
}

// NewMockSecretBackendState creates a new mock instance.
func NewMockSecretBackendState(ctrl *gomock.Controller) *MockSecretBackendState {
	mock := &MockSecretBackendState{ctrl: ctrl}
	mock.recorder = &MockSecretBackendStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendState) EXPECT() *MockSecretBackendStateMockRecorder {
	return m.recorder
}

// GetModelSecretBackendName mocks base method.
func (m *MockSecretBackendState) GetModelSecretBackendName(arg0 context.Context, arg1 model.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSecretBackendName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSecretBackendName indicates an expected call of GetModelSecretBackendName.
func (mr *MockSecretBackendStateMockRecorder) GetModelSecretBackendName(arg0, arg1 any) *MockSecretBackendStateGetModelSecretBackendNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSecretBackendName", reflect.TypeOf((*MockSecretBackendState)(nil).GetModelSecretBackendName), arg0, arg1)
	return &MockSecretBackendStateGetModelSecretBackendNameCall{Call: call}
}

// MockSecretBackendStateGetModelSecretBackendNameCall wrap *gomock.Call
type MockSecretBackendStateGetModelSecretBackendNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateGetModelSecretBackendNameCall) Return(arg0 string, arg1 error) *MockSecretBackendStateGetModelSecretBackendNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateGetModelSecretBackendNameCall) Do(f func(context.Context, model.UUID) (string, error)) *MockSecretBackendStateGetModelSecretBackendNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateGetModelSecretBackendNameCall) DoAndReturn(f func(context.Context, model.UUID) (string, error)) *MockSecretBackendStateGetModelSecretBackendNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelSecretBackend mocks base method.
func (m *MockSecretBackendState) SetModelSecretBackend(arg0 context.Context, arg1 model.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelSecretBackend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelSecretBackend indicates an expected call of SetModelSecretBackend.
func (mr *MockSecretBackendStateMockRecorder) SetModelSecretBackend(arg0, arg1, arg2 any) *MockSecretBackendStateSetModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelSecretBackend", reflect.TypeOf((*MockSecretBackendState)(nil).SetModelSecretBackend), arg0, arg1, arg2)
	return &MockSecretBackendStateSetModelSecretBackendCall{Call: call}
}

// MockSecretBackendStateSetModelSecretBackendCall wrap *gomock.Call
type MockSecretBackendStateSetModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendStateSetModelSecretBackendCall) Return(arg0 error) *MockSecretBackendStateSetModelSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendStateSetModelSecretBackendCall) Do(f func(context.Context, model.UUID, string) error) *MockSecretBackendStateSetModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendStateSetModelSecretBackendCall) DoAndReturn(f func(context.Context, model.UUID, string) error) *MockSecretBackendStateSetModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
