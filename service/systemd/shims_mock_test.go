// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/service/systemd (interfaces: ShimFileOps,ShimExec)

// Package systemd is a generated GoMock package.
package systemd

import (
	gomock "github.com/golang/mock/gomock"
	exec "github.com/juju/utils/exec"
	os "os"
	reflect "reflect"
)

// MockShimFileOps is a mock of ShimFileOps interface
type MockShimFileOps struct {
	ctrl     *gomock.Controller
	recorder *MockShimFileOpsMockRecorder
}

// MockShimFileOpsMockRecorder is the mock recorder for MockShimFileOps
type MockShimFileOpsMockRecorder struct {
	mock *MockShimFileOps
}

// NewMockShimFileOps creates a new mock instance
func NewMockShimFileOps(ctrl *gomock.Controller) *MockShimFileOps {
	mock := &MockShimFileOps{ctrl: ctrl}
	mock.recorder = &MockShimFileOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShimFileOps) EXPECT() *MockShimFileOpsMockRecorder {
	return m.recorder
}

// CreateFile mocks base method
func (m *MockShimFileOps) CreateFile(arg0 string, arg1 []byte, arg2 os.FileMode) error {
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockShimFileOpsMockRecorder) CreateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockShimFileOps)(nil).CreateFile), arg0, arg1, arg2)
}

// MkdirAll mocks base method
func (m *MockShimFileOps) MkdirAll(arg0 string) error {
	ret := m.ctrl.Call(m, "MkdirAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockShimFileOpsMockRecorder) MkdirAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockShimFileOps)(nil).MkdirAll), arg0)
}

// RemoveAll mocks base method
func (m *MockShimFileOps) RemoveAll(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockShimFileOpsMockRecorder) RemoveAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockShimFileOps)(nil).RemoveAll), arg0)
}

// MockShimExec is a mock of ShimExec interface
type MockShimExec struct {
	ctrl     *gomock.Controller
	recorder *MockShimExecMockRecorder
}

// MockShimExecMockRecorder is the mock recorder for MockShimExec
type MockShimExecMockRecorder struct {
	mock *MockShimExec
}

// NewMockShimExec creates a new mock instance
func NewMockShimExec(ctrl *gomock.Controller) *MockShimExec {
	mock := &MockShimExec{ctrl: ctrl}
	mock.recorder = &MockShimExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShimExec) EXPECT() *MockShimExecMockRecorder {
	return m.recorder
}

// RunCommands mocks base method
func (m *MockShimExec) RunCommands(arg0 exec.RunParams) (*exec.ExecResponse, error) {
	ret := m.ctrl.Call(m, "RunCommands", arg0)
	ret0, _ := ret[0].(*exec.ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommands indicates an expected call of RunCommands
func (mr *MockShimExecMockRecorder) RunCommands(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommands", reflect.TypeOf((*MockShimExec)(nil).RunCommands), arg0)
}
