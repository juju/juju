// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/service/systemd (interfaces: ShimExec)

// Package systemd is a generated GoMock package.
package systemd

import (
	gomock "github.com/golang/mock/gomock"
	exec "github.com/juju/utils/exec"
	reflect "reflect"
)

// MockShimExec is a mock of ShimExec interface
type MockShimExec struct {
	ctrl     *gomock.Controller
	recorder *MockShimExecMockRecorder
}

// MockShimExecMockRecorder is the mock recorder for MockShimExec
type MockShimExecMockRecorder struct {
	mock *MockShimExec
}

// NewMockShimExec creates a new mock instance
func NewMockShimExec(ctrl *gomock.Controller) *MockShimExec {
	mock := &MockShimExec{ctrl: ctrl}
	mock.recorder = &MockShimExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShimExec) EXPECT() *MockShimExecMockRecorder {
	return m.recorder
}

// RunCommands mocks base method
func (m *MockShimExec) RunCommands(arg0 exec.RunParams) (*exec.ExecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommands", arg0)
	ret0, _ := ret[0].(*exec.ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommands indicates an expected call of RunCommands
func (mr *MockShimExecMockRecorder) RunCommands(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommands", reflect.TypeOf((*MockShimExec)(nil).RunCommands), arg0)
}
