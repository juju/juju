name: juju
version: 3.3.7
summary: Juju - a model-driven operator lifecycle manager for K8s and machines
license: AGPL-3.0
description: |
  A model-driven **universal operator lifecycle manager** for multi cloud and hybrid cloud application management on K8s and machines.

  **What is an operator lifecycle manager?**
  Kubernetes operators are containers with operations code, that drive your applications on K8s. Juju is an operator lifecycle manager that manages the installation, integration and configuration of operators on the cluster. Juju also extends the idea of operators to traditional application management on Linux and Windows servers, or cloud instances.

  **Model-driven operations and integration**
  Organise your operators into models, which group together applications that can be tightly integrated on the same substrate and operated by the same team. Capture resource allocation, storage, networking and integration information in the model to simplify ongoing operations.

  **Better day-2 operations**
  Each operator code package, called a charm, declares methods for actions like backup, restore, or security audit. Calling these methods provides remote administration of the application with no low-level access required.

  **Learn more**

   - https://juju.is/
   - https://discourse.charmhub.io/
   - https://github.com/juju/juju

  **Note**
  This snap needs to read any relevant locally stored cloud credentials in order to manage resources on your behalf in a specified cloud.
  It also can read private ssh keys. The privileged interface auto connections include:
   - lxd
   - ssh-keys

confinement: strict
grade: devel
base: core20

apps:
  juju:
    environment:
      # Make sure we access snap binaries first (i.e. juju-metadata lp:1759013)
      PATH: "$SNAP/bin:$SNAP/usr/bin:/snap/bin:$PATH"
    command: bin/juju
    plugs:
      - network
      - network-bind
      - ssh-keys
      - lxd
      # Needed so that juju can still use the real ~/.local/share/juju.
      - dot-local-share-juju
      # Needed to read lxd config.
      - config-lxd
      # Needed to read ~/.kube, ~/.novarc, ~/.aws etc.
      - dot-aws
      - dot-azure
      - dot-google
      - dot-kubernetes
      - dot-maas
      - dot-openstack
      - dot-oracle
      # Needed so that arbitrary cloud/credential yaml files can be read and backups written.
      - home
      # Needed to that SSO via the web browser can work.
      - desktop
  fetch-oci:
    daemon: oneshot
    command: wrappers/fetch-oci
    start-timeout: 1m
    stop-timeout: 35s
    plugs:
      - network

parts:
  wrappers:
    plugin: dump
    source: snap/local

  musl:
    source: https://musl.libc.org/releases/musl-1.2.3.tar.gz
    source-type: tar
    plugin: autotools
    build-packages:
      - gcc
      - automake
      - wget
    override-build: |
      set -ex

      CUSTOM_CFLAGS=""
      MACHINE_TYPE=$(uname -m)
      if [ "${MACHINE_TYPE}" = "ppc64le" ]; then
        MACHINE_TYPE="powerpc64le"
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      ./configure CFLAGS="${CUSTOM_CFLAGS}"
      make install

      ln -s /usr/include/${MACHINE_TYPE}-linux-gnu/asm /usr/local/musl/include/asm
      ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic
      ln -s /usr/include/linux /usr/local/musl/include/linux

  musl-compat:
    source: https://github.com/juju/musl-compat.git
    source-type: git
    source-depth: 1
    plugin: nil
    override-build: |
      set -ex

      ln -s $(pwd)/include/sys/queue.h /usr/local/musl/include/sys/queue.h

  libtirpc:
    after:
      - musl
      - musl-compat
    source: https://salsa.debian.org/debian/libtirpc.git
    source-tag: upstream/1.3.3
    source-type: git
    source-depth: 1
    plugin: autotools
    build-packages:
      - automake
      - make
    override-build: |
      set -ex

      CUSTOM_CFLAGS=""
      if [ "$(uname -m)" = "ppc64le" ]; then
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      export PATH=/usr/local/musl/bin:$PATH
      export CC=musl-gcc

      chmod +x autogen.sh
      ./autogen.sh
      ./configure --disable-shared --disable-gssapi CFLAGS="${CUSTOM_CFLAGS}"
      make

      mkdir -p $SNAPCRAFT_PART_INSTALL/libtirpc
      cp -r $SNAPCRAFT_PART_BUILD/tirpc $SNAPCRAFT_PART_INSTALL/libtirpc/tirpc
      cp -r $SNAPCRAFT_PART_BUILD/src $SNAPCRAFT_PART_INSTALL/libtirpc/src
    stage:
    - -*.*

  libnsl:
    after:
      - libtirpc
    source: https://github.com/thkukuk/libnsl.git
    source-tag: v2.0.0
    source-type: git
    source-depth: 1
    plugin: autotools
    build-packages:
      - automake
      - make
    override-build: |
      set -ex

      CUSTOM_CFLAGS=""
      if [ "$(uname -m)" = "ppc64le" ]; then
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      export PATH=/usr/local/musl/bin:$PATH
      export CC=musl-gcc

      ./autogen.sh
      autoreconf -i
      autoconf

      CFLAGS="-I${SNAPCRAFT_STAGE}/libtirpc/tirpc ${CUSTOM_CFLAGS}" \
            LDFLAGS="-L${SNAPCRAFT_STAGE}/libtirpc/src" \
            TIRPC_CFLAGS="-I${SNAPCRAFT_STAGE}/libtirpc/tirpc" \
            TIRPC_LIBS="-L${SNAPCRAFT_STAGE}/libtirpc/src" \
            ./configure --disable-shared

      mkdir -p $SNAPCRAFT_PART_INSTALL/libnsl
      cp -r $SNAPCRAFT_PART_BUILD/src $SNAPCRAFT_PART_INSTALL/libnsl/src
    stage:
    - -*.*

  libuv:
    after:
      - musl
      - musl-compat
    source: https://github.com/libuv/libuv.git
    source-tag: v1.44.2
    source-type: git
    source-depth: 1
    plugin: autotools
    build-packages:
      - automake
      - make
    override-build: |
      set -ex

      CUSTOM_CFLAGS=""
      if [ "$(uname -m)" = "ppc64le" ]; then
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      export PATH=/usr/local/musl/bin:$PATH
      export CC=musl-gcc

      # For some reason, we need the .so files as well. We should investigate
      # why that's required for linking.

      ./autogen.sh

      CFLAGS="${CUSTOM_CFLAGS}" \
        ./configure
      make

      mkdir -p $SNAPCRAFT_PART_INSTALL/libuv
      cp -r $SNAPCRAFT_PART_BUILD/include $SNAPCRAFT_PART_INSTALL/libuv/include
      cp -r $SNAPCRAFT_PART_BUILD/.libs $SNAPCRAFT_PART_INSTALL/libuv/.libs

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs
      cp -r $SNAPCRAFT_PART_BUILD/.libs/* $SNAPCRAFT_PART_INSTALL/libs
    stage:
    - -*.*

  libsqlite3:
    after:
      - musl
      - musl-compat
    source: https://github.com/sqlite/sqlite.git
    source-tag: version-3.40.0
    source-type: git
    source-depth: 1
    plugin: autotools
    build-packages:
      - automake
      - make
    override-build: |
      set -ex

      export PATH=/usr/local/musl/bin:$PATH
      export CC=musl-gcc

      CUSTOM_CFLAGS=""
      if [ "$(uname -m)" = "ppc64le" ]; then
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      CFLAGS="${CUSTOM_CFLAGS}" \
        ./configure --disable-shared
      make CFLAGS="${CUSTOM_CFLAGS}"

      mkdir -p $SNAPCRAFT_PART_INSTALL/libsqlite3
      cp -r $SNAPCRAFT_PART_BUILD/*.* $SNAPCRAFT_PART_INSTALL/libsqlite3

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs
      cp -r $SNAPCRAFT_PART_BUILD/.libs/*.a $SNAPCRAFT_PART_INSTALL/libs

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs/include
      cp -r $SNAPCRAFT_PART_BUILD/*.h $SNAPCRAFT_PART_INSTALL/libs/include
    stage:
    - -*.*

  liblz4:
    after:
      - musl
      - musl-compat
    source: https://github.com/lz4/lz4.git
    source-tag: v1.9.4
    source-type: git
    source-depth: 1
    plugin: make
    build-packages:
      - make
    override-build: |
      set -ex

      export PATH=/usr/local/musl/bin:$PATH
      export CC=musl-gcc

      CUSTOM_CFLAGS=""
      if [ "$(uname -m)" = "ppc64le" ]; then
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      CFLAGS="${CUSTOM_CFLAGS}" \
        make lib

      mkdir -p $SNAPCRAFT_PART_INSTALL/liblz4
      cp -r $SNAPCRAFT_PART_BUILD/lib $SNAPCRAFT_PART_INSTALL/liblz4/lib

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs
      cp -r $SNAPCRAFT_PART_BUILD/lib/*.a $SNAPCRAFT_PART_INSTALL/libs
      cp -r $SNAPCRAFT_PART_BUILD/lib/*.so* $SNAPCRAFT_PART_INSTALL/libs
    stage:
    - -*.*

  libraft:
    after:
      - libuv
      - liblz4
    source: https://github.com/canonical/raft.git
    source-tag: v0.17.1
    source-type: git
    source-depth: 1
    plugin: autotools
    build-packages:
      - automake
      - make
    override-build: |
      set -ex

      export PATH=/usr/local/musl/bin:$PATH
      export CC=musl-gcc

      CUSTOM_CFLAGS=""
      if [ "$(uname -m)" = "ppc64le" ]; then
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      autoreconf -i
      CFLAGS="-I${SNAPCRAFT_STAGE}/libuv/include -I${SNAPCRAFT_STAGE}/liblz4/lib ${CUSTOM_CFLAGS}" \
            LDFLAGS="-L${SNAPCRAFT_STAGE}/libuv/.libs -L${SNAPCRAFT_STAGE}/liblz4/lib" \
            UV_CFLAGS="-I${SNAPCRAFT_STAGE}/libuv/include" \
            UV_LIBS="-L${SNAPCRAFT_STAGE}/libuv/.libs" \
            LZ4_CFLAGS="-I${SNAPCRAFT_STAGE}/liblz4/lib" \
            LZ4_LIBS="-L${SNAPCRAFT_STAGE}/liblz4/lib" \
            ./configure --disable-shared
      make

      mkdir -p $SNAPCRAFT_PART_INSTALL/libraft
      cp -r $SNAPCRAFT_PART_BUILD/include $SNAPCRAFT_PART_INSTALL/libraft/include
      cp -r $SNAPCRAFT_PART_BUILD/.libs $SNAPCRAFT_PART_INSTALL/libraft/.libs

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs
      cp -r $SNAPCRAFT_PART_BUILD/.libs/*.a $SNAPCRAFT_PART_INSTALL/libs

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs/include
      cp -r $SNAPCRAFT_PART_BUILD/include/* $SNAPCRAFT_PART_INSTALL/libs/include
    stage:
    - -*.*

  libdqlite:
    after:
      - libnsl
      - libraft
      - libsqlite3
    source: https://github.com/canonical/dqlite.git
    source-tag: v1.14.0
    source-type: git
    source-depth: 1
    plugin: autotools
    build-packages:
      - automake
      - autopoint
      - gettext
      - libtool
      - libsqlite3-dev
      - make
      - pkg-config
      - tcl
      - tclsh
    override-build: |
      set -ex

      export PATH=/usr/local/musl/bin:$PATH
      export CC=musl-gcc

      CUSTOM_CFLAGS=""
      if [ "$(uname -m)" = "ppc64le" ]; then
        CUSTOM_CFLAGS="-mlong-double-64"
      fi

      autoreconf -i
      CFLAGS="-I${SNAPCRAFT_STAGE}/libraft/include -I${SNAPCRAFT_STAGE}/libsqlite3 -I${SNAPCRAFT_STAGE}/libuv/include -I${SNAPCRAFT_STAGE}/liblz4/lib -I/usr/local/musl/include -Werror=implicit-function-declaration ${CUSTOM_CFLAGS}" \
            LDFLAGS="-L${SNAPCRAFT_STAGE}/libraft/.libs -L${SNAPCRAFT_STAGE}/libuv/.libs -L${SNAPCRAFT_STAGE}/liblz4/lib -L${SNAPCRAFT_STAGE}/libnsl/src" \
            RAFT_CFLAGS="-I${SNAPCRAFT_STAGE}/libraft/include" \
            RAFT_LIBS="-L${SNAPCRAFT_STAGE}/libraft/.libs" \
            UV_CFLAGS="-I${SNAPCRAFT_STAGE}/libuv/include" \
            UV_LIBS="-L${SNAPCRAFT_STAGE}/libuv/.libs" \
            SQLITE_CFLAGS="-I${SNAPCRAFT_STAGE}/libsqlite3" \
            ./configure --disable-shared --enable-debug
      make

      mkdir -p $SNAPCRAFT_PART_INSTALL/libdqlite
      cp -r $SNAPCRAFT_PART_BUILD/.libs $SNAPCRAFT_PART_INSTALL/libdqlite/.libs

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs
      cp -r $SNAPCRAFT_PART_BUILD/.libs/*.a $SNAPCRAFT_PART_INSTALL/libs

      mkdir -p $SNAPCRAFT_PART_INSTALL/libs/include
      cp -r $SNAPCRAFT_PART_BUILD/include/* $SNAPCRAFT_PART_INSTALL/libs/include
    stage:
    - -*.*

  jujud:
    after:
      - libdqlite
    plugin: juju-go
    go-channel: 1.20/stable
    source: .
    go-packages:
      - github.com/juju/juju/cmd/jujud
    go-external-strings:
      github.com/juju/juju/version.GitCommit: ""
      github.com/juju/juju/version.GitTreeState: ""
      github.com/juju/juju/version.build: ""
    go-static: true
    go-strip: true
    go-buildtags: ["libsqlite3", "dqlite"]
    go-cgo-enabled: "1"
    go-cgo-cc: "musl-gcc"
    go-cgo-cflags: "-I/usr/local/musl/include"
    go-cgo-ldflags: "-luv -lraft -ldqlite -llz4 -lsqlite3"
    go-cgo-ldflags-allow: "(-Wl,-wrap,pthread_create)|(-Wl,-z,now)"


  juju:
    after:
      - jujud
    plugin: juju-go
    go-channel: 1.21/stable
    # The source can be your local tree or github
    # source: https://github.com/juju/juju.git
    # If you pull a remote, set source-depth to 1 to make the fetch shorter
    # source-depth: 1
    # source: file:///full/file/path
    # By default, reuse existing tree
    source: .
    # TODO(wallyworld) - uncomment source-type once LP:1860526 is fixed.
    #source-type: git
    # You can grab a specific tag, commit, or branch
    # source-tag: juju-2.0.2
    # source-commit: a83896d913d7e43c960e441c1e41612116d92d46
    # source-branch: develop
    # apply patches before building
    go-packages:
      - github.com/juju/juju/cmd/juju
      - github.com/juju/juju/cmd/jujuc
      - github.com/juju/juju/cmd/plugins/juju-metadata
    go-external-strings:
      github.com/juju/juju/version.GitCommit: ""
      github.com/juju/juju/version.GitTreeState: ""
      github.com/juju/juju/version.build: ""
    go-static: true
    go-strip: true
    override-build: |
      snapcraftctl build

      mkdir -p ${SNAPCRAFT_PART_INSTALL}/bash_completions
      cp -a etc/bash_completion.d/juju* ${SNAPCRAFT_PART_INSTALL}/bash_completions/.
      # If you are releasing a build with public streams, copy in the agent directly
      # If needed, grab the agent from streams
      # curl http://streams.canonical.com/juju/tools/agent/$SNAPCRAFT_PROJECT_VERSION/juju-$SNAPCRAFT_PROJECT_VERSION-ubuntu-amd64.tgz | tar xz -C ${SNAPCRAFT_PART_INSTALL}/bin/
      jujud=${SNAPCRAFT_STAGE}/bin/jujud
      version=$($jujud version)
      hash=$(sha256sum $jujud | cut -d " " -f 1)
      cat > jujud-versions.yaml <<EOF
      versions:
        - version: $version
          sha256: $hash
      EOF
      cp -a jujud-versions.yaml ${SNAPCRAFT_PART_INSTALL}/bin
    stage-packages:
      - openssh-client

  dqlite-cleanup:
    # This ensures that we clean up the dqlite clean up files.
    after:
      - juju
    plugin: nil
    source: .
    override-prime: |
      snapcraftctl prime

      # This forces the removal of the *.a files. We require them for compiling
      # but not for runtime linking.
      rm -rf $SNAPCRAFT_PRIME/lib*

hooks:
  connect-plug-peers: {}
  disconnect-plug-peers: {}
  post-refresh: {}

slots:
  juju-bin:
    interface: content
    content: juju
    source:
      read:
        - $SNAP/bin

plugs:
  peers:
    interface: content
    content: microk8s
    target: $SNAP_DATA/microk8s

  dot-local-share-juju:
    interface: personal-files
    write:
      - $HOME/.local/share/juju

  config-lxd:
    interface: personal-files
    read:
      - $HOME/snap/lxd/common/config

  dot-aws:
    interface: personal-files
    read:
      - $HOME/.aws

  dot-azure:
    interface: personal-files
    read:
      - $HOME/.azure

  dot-google:
    interface: personal-files
    read:
      - $HOME/.config/gcloud

  dot-kubernetes:
    interface: personal-files
    read:
      - $HOME/.kube

  dot-maas:
    interface: personal-files
    read:
      - $HOME/.maasrc

  dot-oracle:
    interface: personal-files
    read:
      - $HOME/.oci

  dot-openstack:
    interface: personal-files
    read:
      - $HOME/.novarc

