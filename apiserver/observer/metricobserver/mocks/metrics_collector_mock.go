// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/observer/metricobserver (interfaces: MetricsCollector,SummaryVec)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/metrics_collector_mock.go github.com/juju/juju/apiserver/observer/metricobserver MetricsCollector,SummaryVec
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	metricobserver "github.com/juju/juju/apiserver/observer/metricobserver"
	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockMetricsCollector) ISGOMOCK() struct{} {
	return struct{}{}
}

// APIRequestDuration mocks base method.
func (m *MockMetricsCollector) APIRequestDuration() metricobserver.SummaryVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIRequestDuration")
	ret0, _ := ret[0].(metricobserver.SummaryVec)
	return ret0
}

// APIRequestDuration indicates an expected call of APIRequestDuration.
func (mr *MockMetricsCollectorMockRecorder) APIRequestDuration() *MockMetricsCollectorAPIRequestDurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIRequestDuration", reflect.TypeOf((*MockMetricsCollector)(nil).APIRequestDuration))
	return &MockMetricsCollectorAPIRequestDurationCall{Call: call}
}

// MockMetricsCollectorAPIRequestDurationCall wrap *gomock.Call
type MockMetricsCollectorAPIRequestDurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsCollectorAPIRequestDurationCall) Return(arg0 metricobserver.SummaryVec) *MockMetricsCollectorAPIRequestDurationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsCollectorAPIRequestDurationCall) Do(f func() metricobserver.SummaryVec) *MockMetricsCollectorAPIRequestDurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsCollectorAPIRequestDurationCall) DoAndReturn(f func() metricobserver.SummaryVec) *MockMetricsCollectorAPIRequestDurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSummaryVec is a mock of SummaryVec interface.
type MockSummaryVec struct {
	ctrl     *gomock.Controller
	recorder *MockSummaryVecMockRecorder
}

// MockSummaryVecMockRecorder is the mock recorder for MockSummaryVec.
type MockSummaryVecMockRecorder struct {
	mock *MockSummaryVec
}

// NewMockSummaryVec creates a new mock instance.
func NewMockSummaryVec(ctrl *gomock.Controller) *MockSummaryVec {
	mock := &MockSummaryVec{ctrl: ctrl}
	mock.recorder = &MockSummaryVecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummaryVec) EXPECT() *MockSummaryVecMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSummaryVec) ISGOMOCK() struct{} {
	return struct{}{}
}

// With mocks base method.
func (m *MockSummaryVec) With(arg0 prometheus.Labels) prometheus.Observer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", arg0)
	ret0, _ := ret[0].(prometheus.Observer)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockSummaryVecMockRecorder) With(arg0 any) *MockSummaryVecWithCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockSummaryVec)(nil).With), arg0)
	return &MockSummaryVecWithCall{Call: call}
}

// MockSummaryVecWithCall wrap *gomock.Call
type MockSummaryVecWithCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSummaryVecWithCall) Return(arg0 prometheus.Observer) *MockSummaryVecWithCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSummaryVecWithCall) Do(f func(prometheus.Labels) prometheus.Observer) *MockSummaryVecWithCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSummaryVecWithCall) DoAndReturn(f func(prometheus.Labels) prometheus.Observer) *MockSummaryVecWithCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
