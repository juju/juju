// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prometheus/client_golang/prometheus (interfaces: Summary)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/metrics_mock.go github.com/prometheus/client_golang/prometheus Summary
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	io_prometheus_client "github.com/prometheus/client_model/go"
	gomock "go.uber.org/mock/gomock"
)

// MockSummary is a mock of Summary interface.
type MockSummary struct {
	ctrl     *gomock.Controller
	recorder *MockSummaryMockRecorder
}

// MockSummaryMockRecorder is the mock recorder for MockSummary.
type MockSummaryMockRecorder struct {
	mock *MockSummary
}

// NewMockSummary creates a new mock instance.
func NewMockSummary(ctrl *gomock.Controller) *MockSummary {
	mock := &MockSummary{ctrl: ctrl}
	mock.recorder = &MockSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummary) EXPECT() *MockSummaryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSummary) ISGOMOCK() struct{} {
	return struct{}{}
}

// Collect mocks base method.
func (m *MockSummary) Collect(arg0 chan<- prometheus.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect", arg0)
}

// Collect indicates an expected call of Collect.
func (mr *MockSummaryMockRecorder) Collect(arg0 any) *MockSummaryCollectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockSummary)(nil).Collect), arg0)
	return &MockSummaryCollectCall{Call: call}
}

// MockSummaryCollectCall wrap *gomock.Call
type MockSummaryCollectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSummaryCollectCall) Return() *MockSummaryCollectCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSummaryCollectCall) Do(f func(chan<- prometheus.Metric)) *MockSummaryCollectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSummaryCollectCall) DoAndReturn(f func(chan<- prometheus.Metric)) *MockSummaryCollectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Desc mocks base method.
func (m *MockSummary) Desc() *prometheus.Desc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Desc")
	ret0, _ := ret[0].(*prometheus.Desc)
	return ret0
}

// Desc indicates an expected call of Desc.
func (mr *MockSummaryMockRecorder) Desc() *MockSummaryDescCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desc", reflect.TypeOf((*MockSummary)(nil).Desc))
	return &MockSummaryDescCall{Call: call}
}

// MockSummaryDescCall wrap *gomock.Call
type MockSummaryDescCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSummaryDescCall) Return(arg0 *prometheus.Desc) *MockSummaryDescCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSummaryDescCall) Do(f func() *prometheus.Desc) *MockSummaryDescCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSummaryDescCall) DoAndReturn(f func() *prometheus.Desc) *MockSummaryDescCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Describe mocks base method.
func (m *MockSummary) Describe(arg0 chan<- *prometheus.Desc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe.
func (mr *MockSummaryMockRecorder) Describe(arg0 any) *MockSummaryDescribeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockSummary)(nil).Describe), arg0)
	return &MockSummaryDescribeCall{Call: call}
}

// MockSummaryDescribeCall wrap *gomock.Call
type MockSummaryDescribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSummaryDescribeCall) Return() *MockSummaryDescribeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSummaryDescribeCall) Do(f func(chan<- *prometheus.Desc)) *MockSummaryDescribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSummaryDescribeCall) DoAndReturn(f func(chan<- *prometheus.Desc)) *MockSummaryDescribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Observe mocks base method.
func (m *MockSummary) Observe(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Observe", arg0)
}

// Observe indicates an expected call of Observe.
func (mr *MockSummaryMockRecorder) Observe(arg0 any) *MockSummaryObserveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockSummary)(nil).Observe), arg0)
	return &MockSummaryObserveCall{Call: call}
}

// MockSummaryObserveCall wrap *gomock.Call
type MockSummaryObserveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSummaryObserveCall) Return() *MockSummaryObserveCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSummaryObserveCall) Do(f func(float64)) *MockSummaryObserveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSummaryObserveCall) DoAndReturn(f func(float64)) *MockSummaryObserveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockSummary) Write(arg0 *io_prometheus_client.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockSummaryMockRecorder) Write(arg0 any) *MockSummaryWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSummary)(nil).Write), arg0)
	return &MockSummaryWriteCall{Call: call}
}

// MockSummaryWriteCall wrap *gomock.Call
type MockSummaryWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSummaryWriteCall) Return(arg0 error) *MockSummaryWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSummaryWriteCall) Do(f func(*io_prometheus_client.Metric) error) *MockSummaryWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSummaryWriteCall) DoAndReturn(f func(*io_prometheus_client.Metric) error) *MockSummaryWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
