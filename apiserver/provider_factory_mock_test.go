// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/providertracker (interfaces: ProviderFactory)
//
// Generated by this command:
//
//	mockgen -typed -package apiserver_test -destination provider_factory_mock_test.go github.com/juju/juju/core/providertracker ProviderFactory
//

// Package apiserver_test is a generated GoMock package.
package apiserver_test

import (
	context "context"
	reflect "reflect"

	providertracker "github.com/juju/juju/core/providertracker"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderFactory is a mock of ProviderFactory interface.
type MockProviderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockProviderFactoryMockRecorder
}

// MockProviderFactoryMockRecorder is the mock recorder for MockProviderFactory.
type MockProviderFactoryMockRecorder struct {
	mock *MockProviderFactory
}

// NewMockProviderFactory creates a new mock instance.
func NewMockProviderFactory(ctrl *gomock.Controller) *MockProviderFactory {
	mock := &MockProviderFactory{ctrl: ctrl}
	mock.recorder = &MockProviderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderFactory) EXPECT() *MockProviderFactoryMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProviderFactory) ISGOMOCK() struct{} {
	return struct{}{}
}

// ProviderForModel mocks base method.
func (m *MockProviderFactory) ProviderForModel(arg0 context.Context, arg1 string) (providertracker.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderForModel", arg0, arg1)
	ret0, _ := ret[0].(providertracker.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderForModel indicates an expected call of ProviderForModel.
func (mr *MockProviderFactoryMockRecorder) ProviderForModel(arg0, arg1 any) *MockProviderFactoryProviderForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderForModel", reflect.TypeOf((*MockProviderFactory)(nil).ProviderForModel), arg0, arg1)
	return &MockProviderFactoryProviderForModelCall{Call: call}
}

// MockProviderFactoryProviderForModelCall wrap *gomock.Call
type MockProviderFactoryProviderForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderFactoryProviderForModelCall) Return(arg0 providertracker.Provider, arg1 error) *MockProviderFactoryProviderForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderFactoryProviderForModelCall) Do(f func(context.Context, string) (providertracker.Provider, error)) *MockProviderFactoryProviderForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderFactoryProviderForModelCall) DoAndReturn(f func(context.Context, string) (providertracker.Provider, error)) *MockProviderFactoryProviderForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
