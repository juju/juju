// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common/crossmodel (interfaces: OfferBakeryInterface,Backend,BakeryConfigService,AccessService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/crossmodel_mock.go github.com/juju/juju/apiserver/common/crossmodel OfferBakeryInterface,Backend,BakeryConfigService,AccessService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	checkers "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/checkers"
	clock "github.com/juju/clock"
	authentication "github.com/juju/juju/apiserver/authentication"
	crossmodel "github.com/juju/juju/apiserver/common/crossmodel"
	crossmodel0 "github.com/juju/juju/core/crossmodel"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockOfferBakeryInterface is a mock of OfferBakeryInterface interface.
type MockOfferBakeryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOfferBakeryInterfaceMockRecorder
}

// MockOfferBakeryInterfaceMockRecorder is the mock recorder for MockOfferBakeryInterface.
type MockOfferBakeryInterfaceMockRecorder struct {
	mock *MockOfferBakeryInterface
}

// NewMockOfferBakeryInterface creates a new mock instance.
func NewMockOfferBakeryInterface(ctrl *gomock.Controller) *MockOfferBakeryInterface {
	mock := &MockOfferBakeryInterface{ctrl: ctrl}
	mock.recorder = &MockOfferBakeryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferBakeryInterface) EXPECT() *MockOfferBakeryInterfaceMockRecorder {
	return m.recorder
}

// CreateDischargeMacaroon mocks base method.
func (m *MockOfferBakeryInterface) CreateDischargeMacaroon(arg0 context.Context, arg1, arg2 string, arg3, arg4 map[string]string, arg5 bakery.Op, arg6 bakery.Version) (*bakery.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDischargeMacaroon", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*bakery.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDischargeMacaroon indicates an expected call of CreateDischargeMacaroon.
func (mr *MockOfferBakeryInterfaceMockRecorder) CreateDischargeMacaroon(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockOfferBakeryInterfaceCreateDischargeMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDischargeMacaroon", reflect.TypeOf((*MockOfferBakeryInterface)(nil).CreateDischargeMacaroon), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockOfferBakeryInterfaceCreateDischargeMacaroonCall{Call: call}
}

// MockOfferBakeryInterfaceCreateDischargeMacaroonCall wrap *gomock.Call
type MockOfferBakeryInterfaceCreateDischargeMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInterfaceCreateDischargeMacaroonCall) Return(arg0 *bakery.Macaroon, arg1 error) *MockOfferBakeryInterfaceCreateDischargeMacaroonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInterfaceCreateDischargeMacaroonCall) Do(f func(context.Context, string, string, map[string]string, map[string]string, bakery.Op, bakery.Version) (*bakery.Macaroon, error)) *MockOfferBakeryInterfaceCreateDischargeMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInterfaceCreateDischargeMacaroonCall) DoAndReturn(f func(context.Context, string, string, map[string]string, map[string]string, bakery.Op, bakery.Version) (*bakery.Macaroon, error)) *MockOfferBakeryInterfaceCreateDischargeMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConsumeOfferCaveats mocks base method.
func (m *MockOfferBakeryInterface) GetConsumeOfferCaveats(arg0, arg1, arg2 string) []checkers.Caveat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumeOfferCaveats", arg0, arg1, arg2)
	ret0, _ := ret[0].([]checkers.Caveat)
	return ret0
}

// GetConsumeOfferCaveats indicates an expected call of GetConsumeOfferCaveats.
func (mr *MockOfferBakeryInterfaceMockRecorder) GetConsumeOfferCaveats(arg0, arg1, arg2 any) *MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumeOfferCaveats", reflect.TypeOf((*MockOfferBakeryInterface)(nil).GetConsumeOfferCaveats), arg0, arg1, arg2)
	return &MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall{Call: call}
}

// MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall wrap *gomock.Call
type MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall) Return(arg0 []checkers.Caveat) *MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall) Do(f func(string, string, string) []checkers.Caveat) *MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall) DoAndReturn(f func(string, string, string) []checkers.Caveat) *MockOfferBakeryInterfaceGetConsumeOfferCaveatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InferDeclaredFromMacaroon mocks base method.
func (m *MockOfferBakeryInterface) InferDeclaredFromMacaroon(arg0 context.Context, arg1 macaroon.Slice, arg2 map[string]string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferDeclaredFromMacaroon", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// InferDeclaredFromMacaroon indicates an expected call of InferDeclaredFromMacaroon.
func (mr *MockOfferBakeryInterfaceMockRecorder) InferDeclaredFromMacaroon(arg0, arg1, arg2 any) *MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferDeclaredFromMacaroon", reflect.TypeOf((*MockOfferBakeryInterface)(nil).InferDeclaredFromMacaroon), arg0, arg1, arg2)
	return &MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall{Call: call}
}

// MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall wrap *gomock.Call
type MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall) Return(arg0 map[string]string) *MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall) Do(f func(context.Context, macaroon.Slice, map[string]string) map[string]string) *MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall) DoAndReturn(f func(context.Context, macaroon.Slice, map[string]string) map[string]string) *MockOfferBakeryInterfaceInferDeclaredFromMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RefreshDischargeURL mocks base method.
func (m *MockOfferBakeryInterface) RefreshDischargeURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshDischargeURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshDischargeURL indicates an expected call of RefreshDischargeURL.
func (mr *MockOfferBakeryInterfaceMockRecorder) RefreshDischargeURL(arg0, arg1 any) *MockOfferBakeryInterfaceRefreshDischargeURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDischargeURL", reflect.TypeOf((*MockOfferBakeryInterface)(nil).RefreshDischargeURL), arg0, arg1)
	return &MockOfferBakeryInterfaceRefreshDischargeURLCall{Call: call}
}

// MockOfferBakeryInterfaceRefreshDischargeURLCall wrap *gomock.Call
type MockOfferBakeryInterfaceRefreshDischargeURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInterfaceRefreshDischargeURLCall) Return(arg0 string, arg1 error) *MockOfferBakeryInterfaceRefreshDischargeURLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInterfaceRefreshDischargeURLCall) Do(f func(context.Context, string) (string, error)) *MockOfferBakeryInterfaceRefreshDischargeURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInterfaceRefreshDischargeURLCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockOfferBakeryInterfaceRefreshDischargeURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// getBakery mocks base method.
func (m *MockOfferBakeryInterface) getBakery() authentication.ExpirableStorageBakery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBakery")
	ret0, _ := ret[0].(authentication.ExpirableStorageBakery)
	return ret0
}

// getBakery indicates an expected call of getBakery.
func (mr *MockOfferBakeryInterfaceMockRecorder) getBakery() *MockOfferBakeryInterfacegetBakeryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBakery", reflect.TypeOf((*MockOfferBakeryInterface)(nil).getBakery))
	return &MockOfferBakeryInterfacegetBakeryCall{Call: call}
}

// MockOfferBakeryInterfacegetBakeryCall wrap *gomock.Call
type MockOfferBakeryInterfacegetBakeryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInterfacegetBakeryCall) Return(arg0 authentication.ExpirableStorageBakery) *MockOfferBakeryInterfacegetBakeryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInterfacegetBakeryCall) Do(f func() authentication.ExpirableStorageBakery) *MockOfferBakeryInterfacegetBakeryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInterfacegetBakeryCall) DoAndReturn(f func() authentication.ExpirableStorageBakery) *MockOfferBakeryInterfacegetBakeryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// getClock mocks base method.
func (m *MockOfferBakeryInterface) getClock() clock.Clock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getClock")
	ret0, _ := ret[0].(clock.Clock)
	return ret0
}

// getClock indicates an expected call of getClock.
func (mr *MockOfferBakeryInterfaceMockRecorder) getClock() *MockOfferBakeryInterfacegetClockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getClock", reflect.TypeOf((*MockOfferBakeryInterface)(nil).getClock))
	return &MockOfferBakeryInterfacegetClockCall{Call: call}
}

// MockOfferBakeryInterfacegetClockCall wrap *gomock.Call
type MockOfferBakeryInterfacegetClockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInterfacegetClockCall) Return(arg0 clock.Clock) *MockOfferBakeryInterfacegetClockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInterfacegetClockCall) Do(f func() clock.Clock) *MockOfferBakeryInterfacegetClockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInterfacegetClockCall) DoAndReturn(f func() clock.Clock) *MockOfferBakeryInterfacegetClockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// setClock mocks base method.
func (m *MockOfferBakeryInterface) setClock(arg0 clock.Clock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setClock", arg0)
}

// setClock indicates an expected call of setClock.
func (mr *MockOfferBakeryInterfaceMockRecorder) setClock(arg0 any) *MockOfferBakeryInterfacesetClockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setClock", reflect.TypeOf((*MockOfferBakeryInterface)(nil).setClock), arg0)
	return &MockOfferBakeryInterfacesetClockCall{Call: call}
}

// MockOfferBakeryInterfacesetClockCall wrap *gomock.Call
type MockOfferBakeryInterfacesetClockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInterfacesetClockCall) Return() *MockOfferBakeryInterfacesetClockCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInterfacesetClockCall) Do(f func(clock.Clock)) *MockOfferBakeryInterfacesetClockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInterfacesetClockCall) DoAndReturn(f func(clock.Clock)) *MockOfferBakeryInterfacesetClockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AddRelation mocks base method.
func (m *MockBackend) AddRelation(arg0 ...state.Endpoint) (crossmodel.Relation, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRelation", varargs...)
	ret0, _ := ret[0].(crossmodel.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockBackendMockRecorder) AddRelation(arg0 ...any) *MockBackendAddRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockBackend)(nil).AddRelation), arg0...)
	return &MockBackendAddRelationCall{Call: call}
}

// MockBackendAddRelationCall wrap *gomock.Call
type MockBackendAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddRelationCall) Return(arg0 crossmodel.Relation, arg1 error) *MockBackendAddRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddRelationCall) Do(f func(...state.Endpoint) (crossmodel.Relation, error)) *MockBackendAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddRelationCall) DoAndReturn(f func(...state.Endpoint) (crossmodel.Relation, error)) *MockBackendAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRemoteApplication mocks base method.
func (m *MockBackend) AddRemoteApplication(arg0 state.AddRemoteApplicationParams) (crossmodel.RemoteApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplication", arg0)
	ret0, _ := ret[0].(crossmodel.RemoteApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRemoteApplication indicates an expected call of AddRemoteApplication.
func (mr *MockBackendMockRecorder) AddRemoteApplication(arg0 any) *MockBackendAddRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplication", reflect.TypeOf((*MockBackend)(nil).AddRemoteApplication), arg0)
	return &MockBackendAddRemoteApplicationCall{Call: call}
}

// MockBackendAddRemoteApplicationCall wrap *gomock.Call
type MockBackendAddRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddRemoteApplicationCall) Return(arg0 crossmodel.RemoteApplication, arg1 error) *MockBackendAddRemoteApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddRemoteApplicationCall) Do(f func(state.AddRemoteApplicationParams) (crossmodel.RemoteApplication, error)) *MockBackendAddRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddRemoteApplicationCall) DoAndReturn(f func(state.AddRemoteApplicationParams) (crossmodel.RemoteApplication, error)) *MockBackendAddRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllModelUUIDs mocks base method.
func (m *MockBackend) AllModelUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModelUUIDs indicates an expected call of AllModelUUIDs.
func (mr *MockBackendMockRecorder) AllModelUUIDs() *MockBackendAllModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelUUIDs", reflect.TypeOf((*MockBackend)(nil).AllModelUUIDs))
	return &MockBackendAllModelUUIDsCall{Call: call}
}

// MockBackendAllModelUUIDsCall wrap *gomock.Call
type MockBackendAllModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllModelUUIDsCall) Return(arg0 []string, arg1 error) *MockBackendAllModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllModelUUIDsCall) Do(f func() ([]string, error)) *MockBackendAllModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllModelUUIDsCall) DoAndReturn(f func() ([]string, error)) *MockBackendAllModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Application mocks base method.
func (m *MockBackend) Application(arg0 string) (crossmodel.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(crossmodel.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application.
func (mr *MockBackendMockRecorder) Application(arg0 any) *MockBackendApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockBackend)(nil).Application), arg0)
	return &MockBackendApplicationCall{Call: call}
}

// MockBackendApplicationCall wrap *gomock.Call
type MockBackendApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendApplicationCall) Return(arg0 crossmodel.Application, arg1 error) *MockBackendApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendApplicationCall) Do(f func(string) (crossmodel.Application, error)) *MockBackendApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendApplicationCall) DoAndReturn(f func(string) (crossmodel.Application, error)) *MockBackendApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationOfferForUUID mocks base method.
func (m *MockBackend) ApplicationOfferForUUID(arg0 string) (*crossmodel0.ApplicationOffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationOfferForUUID", arg0)
	ret0, _ := ret[0].(*crossmodel0.ApplicationOffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationOfferForUUID indicates an expected call of ApplicationOfferForUUID.
func (mr *MockBackendMockRecorder) ApplicationOfferForUUID(arg0 any) *MockBackendApplicationOfferForUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationOfferForUUID", reflect.TypeOf((*MockBackend)(nil).ApplicationOfferForUUID), arg0)
	return &MockBackendApplicationOfferForUUIDCall{Call: call}
}

// MockBackendApplicationOfferForUUIDCall wrap *gomock.Call
type MockBackendApplicationOfferForUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendApplicationOfferForUUIDCall) Return(arg0 *crossmodel0.ApplicationOffer, arg1 error) *MockBackendApplicationOfferForUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendApplicationOfferForUUIDCall) Do(f func(string) (*crossmodel0.ApplicationOffer, error)) *MockBackendApplicationOfferForUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendApplicationOfferForUUIDCall) DoAndReturn(f func(string) (*crossmodel0.ApplicationOffer, error)) *MockBackendApplicationOfferForUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyOperation mocks base method.
func (m *MockBackend) ApplyOperation(arg0 state.ModelOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockBackendMockRecorder) ApplyOperation(arg0 any) *MockBackendApplyOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockBackend)(nil).ApplyOperation), arg0)
	return &MockBackendApplyOperationCall{Call: call}
}

// MockBackendApplyOperationCall wrap *gomock.Call
type MockBackendApplyOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendApplyOperationCall) Return(arg0 error) *MockBackendApplyOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendApplyOperationCall) Do(f func(state.ModelOperation) error) *MockBackendApplyOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendApplyOperationCall) DoAndReturn(f func(state.ModelOperation) error) *MockBackendApplyOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerTag mocks base method.
func (m *MockBackend) ControllerTag() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTag")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// ControllerTag indicates an expected call of ControllerTag.
func (mr *MockBackendMockRecorder) ControllerTag() *MockBackendControllerTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTag", reflect.TypeOf((*MockBackend)(nil).ControllerTag))
	return &MockBackendControllerTagCall{Call: call}
}

// MockBackendControllerTagCall wrap *gomock.Call
type MockBackendControllerTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendControllerTagCall) Return(arg0 names.ControllerTag) *MockBackendControllerTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendControllerTagCall) Do(f func() names.ControllerTag) *MockBackendControllerTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendControllerTagCall) DoAndReturn(f func() names.ControllerTag) *MockBackendControllerTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndpointsRelation mocks base method.
func (m *MockBackend) EndpointsRelation(arg0 ...state.Endpoint) (crossmodel.Relation, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndpointsRelation", varargs...)
	ret0, _ := ret[0].(crossmodel.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointsRelation indicates an expected call of EndpointsRelation.
func (mr *MockBackendMockRecorder) EndpointsRelation(arg0 ...any) *MockBackendEndpointsRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsRelation", reflect.TypeOf((*MockBackend)(nil).EndpointsRelation), arg0...)
	return &MockBackendEndpointsRelationCall{Call: call}
}

// MockBackendEndpointsRelationCall wrap *gomock.Call
type MockBackendEndpointsRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendEndpointsRelationCall) Return(arg0 crossmodel.Relation, arg1 error) *MockBackendEndpointsRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendEndpointsRelationCall) Do(f func(...state.Endpoint) (crossmodel.Relation, error)) *MockBackendEndpointsRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendEndpointsRelationCall) DoAndReturn(f func(...state.Endpoint) (crossmodel.Relation, error)) *MockBackendEndpointsRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportLocalEntity mocks base method.
func (m *MockBackend) ExportLocalEntity(arg0 names.Tag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportLocalEntity", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportLocalEntity indicates an expected call of ExportLocalEntity.
func (mr *MockBackendMockRecorder) ExportLocalEntity(arg0 any) *MockBackendExportLocalEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLocalEntity", reflect.TypeOf((*MockBackend)(nil).ExportLocalEntity), arg0)
	return &MockBackendExportLocalEntityCall{Call: call}
}

// MockBackendExportLocalEntityCall wrap *gomock.Call
type MockBackendExportLocalEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendExportLocalEntityCall) Return(arg0 string, arg1 error) *MockBackendExportLocalEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendExportLocalEntityCall) Do(f func(names.Tag) (string, error)) *MockBackendExportLocalEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendExportLocalEntityCall) DoAndReturn(f func(names.Tag) (string, error)) *MockBackendExportLocalEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteEntity mocks base method.
func (m *MockBackend) GetRemoteEntity(arg0 string) (names.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteEntity", arg0)
	ret0, _ := ret[0].(names.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteEntity indicates an expected call of GetRemoteEntity.
func (mr *MockBackendMockRecorder) GetRemoteEntity(arg0 any) *MockBackendGetRemoteEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteEntity", reflect.TypeOf((*MockBackend)(nil).GetRemoteEntity), arg0)
	return &MockBackendGetRemoteEntityCall{Call: call}
}

// MockBackendGetRemoteEntityCall wrap *gomock.Call
type MockBackendGetRemoteEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendGetRemoteEntityCall) Return(arg0 names.Tag, arg1 error) *MockBackendGetRemoteEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendGetRemoteEntityCall) Do(f func(string) (names.Tag, error)) *MockBackendGetRemoteEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendGetRemoteEntityCall) DoAndReturn(f func(string) (names.Tag, error)) *MockBackendGetRemoteEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetToken mocks base method.
func (m *MockBackend) GetToken(arg0 names.Tag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockBackendMockRecorder) GetToken(arg0 any) *MockBackendGetTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockBackend)(nil).GetToken), arg0)
	return &MockBackendGetTokenCall{Call: call}
}

// MockBackendGetTokenCall wrap *gomock.Call
type MockBackendGetTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendGetTokenCall) Return(arg0 string, arg1 error) *MockBackendGetTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendGetTokenCall) Do(f func(names.Tag) (string, error)) *MockBackendGetTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendGetTokenCall) DoAndReturn(f func(names.Tag) (string, error)) *MockBackendGetTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportRemoteEntity mocks base method.
func (m *MockBackend) ImportRemoteEntity(arg0 names.Tag, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRemoteEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportRemoteEntity indicates an expected call of ImportRemoteEntity.
func (mr *MockBackendMockRecorder) ImportRemoteEntity(arg0, arg1 any) *MockBackendImportRemoteEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRemoteEntity", reflect.TypeOf((*MockBackend)(nil).ImportRemoteEntity), arg0, arg1)
	return &MockBackendImportRemoteEntityCall{Call: call}
}

// MockBackendImportRemoteEntityCall wrap *gomock.Call
type MockBackendImportRemoteEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendImportRemoteEntityCall) Return(arg0 error) *MockBackendImportRemoteEntityCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendImportRemoteEntityCall) Do(f func(names.Tag, string) error) *MockBackendImportRemoteEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendImportRemoteEntityCall) DoAndReturn(f func(names.Tag, string) error) *MockBackendImportRemoteEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IngressNetworks mocks base method.
func (m *MockBackend) IngressNetworks(arg0 string) (state.RelationNetworks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngressNetworks", arg0)
	ret0, _ := ret[0].(state.RelationNetworks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngressNetworks indicates an expected call of IngressNetworks.
func (mr *MockBackendMockRecorder) IngressNetworks(arg0 any) *MockBackendIngressNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngressNetworks", reflect.TypeOf((*MockBackend)(nil).IngressNetworks), arg0)
	return &MockBackendIngressNetworksCall{Call: call}
}

// MockBackendIngressNetworksCall wrap *gomock.Call
type MockBackendIngressNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendIngressNetworksCall) Return(arg0 state.RelationNetworks, arg1 error) *MockBackendIngressNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendIngressNetworksCall) Do(f func(string) (state.RelationNetworks, error)) *MockBackendIngressNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendIngressNetworksCall) DoAndReturn(f func(string) (state.RelationNetworks, error)) *MockBackendIngressNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyRelation mocks base method.
func (m *MockBackend) KeyRelation(arg0 string) (crossmodel.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyRelation", arg0)
	ret0, _ := ret[0].(crossmodel.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyRelation indicates an expected call of KeyRelation.
func (mr *MockBackendMockRecorder) KeyRelation(arg0 any) *MockBackendKeyRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyRelation", reflect.TypeOf((*MockBackend)(nil).KeyRelation), arg0)
	return &MockBackendKeyRelationCall{Call: call}
}

// MockBackendKeyRelationCall wrap *gomock.Call
type MockBackendKeyRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendKeyRelationCall) Return(arg0 crossmodel.Relation, arg1 error) *MockBackendKeyRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendKeyRelationCall) Do(f func(string) (crossmodel.Relation, error)) *MockBackendKeyRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendKeyRelationCall) DoAndReturn(f func(string) (crossmodel.Relation, error)) *MockBackendKeyRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferConnectionForRelation mocks base method.
func (m *MockBackend) OfferConnectionForRelation(arg0 string) (crossmodel.OfferConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferConnectionForRelation", arg0)
	ret0, _ := ret[0].(crossmodel.OfferConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferConnectionForRelation indicates an expected call of OfferConnectionForRelation.
func (mr *MockBackendMockRecorder) OfferConnectionForRelation(arg0 any) *MockBackendOfferConnectionForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferConnectionForRelation", reflect.TypeOf((*MockBackend)(nil).OfferConnectionForRelation), arg0)
	return &MockBackendOfferConnectionForRelationCall{Call: call}
}

// MockBackendOfferConnectionForRelationCall wrap *gomock.Call
type MockBackendOfferConnectionForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendOfferConnectionForRelationCall) Return(arg0 crossmodel.OfferConnection, arg1 error) *MockBackendOfferConnectionForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendOfferConnectionForRelationCall) Do(f func(string) (crossmodel.OfferConnection, error)) *MockBackendOfferConnectionForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendOfferConnectionForRelationCall) DoAndReturn(f func(string) (crossmodel.OfferConnection, error)) *MockBackendOfferConnectionForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUIDForRelation mocks base method.
func (m *MockBackend) OfferUUIDForRelation(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUIDForRelation", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferUUIDForRelation indicates an expected call of OfferUUIDForRelation.
func (mr *MockBackendMockRecorder) OfferUUIDForRelation(arg0 any) *MockBackendOfferUUIDForRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUIDForRelation", reflect.TypeOf((*MockBackend)(nil).OfferUUIDForRelation), arg0)
	return &MockBackendOfferUUIDForRelationCall{Call: call}
}

// MockBackendOfferUUIDForRelationCall wrap *gomock.Call
type MockBackendOfferUUIDForRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendOfferUUIDForRelationCall) Return(arg0 string, arg1 error) *MockBackendOfferUUIDForRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendOfferUUIDForRelationCall) Do(f func(string) (string, error)) *MockBackendOfferUUIDForRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendOfferUUIDForRelationCall) DoAndReturn(f func(string) (string, error)) *MockBackendOfferUUIDForRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplication mocks base method.
func (m *MockBackend) RemoteApplication(arg0 string) (crossmodel.RemoteApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplication", arg0)
	ret0, _ := ret[0].(crossmodel.RemoteApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteApplication indicates an expected call of RemoteApplication.
func (mr *MockBackendMockRecorder) RemoteApplication(arg0 any) *MockBackendRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplication", reflect.TypeOf((*MockBackend)(nil).RemoteApplication), arg0)
	return &MockBackendRemoteApplicationCall{Call: call}
}

// MockBackendRemoteApplicationCall wrap *gomock.Call
type MockBackendRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendRemoteApplicationCall) Return(arg0 crossmodel.RemoteApplication, arg1 error) *MockBackendRemoteApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendRemoteApplicationCall) Do(f func(string) (crossmodel.RemoteApplication, error)) *MockBackendRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendRemoteApplicationCall) DoAndReturn(f func(string) (crossmodel.RemoteApplication, error)) *MockBackendRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveIngressNetworks mocks base method.
func (m *MockBackend) SaveIngressNetworks(arg0 string, arg1 []string) (state.RelationNetworks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveIngressNetworks", arg0, arg1)
	ret0, _ := ret[0].(state.RelationNetworks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveIngressNetworks indicates an expected call of SaveIngressNetworks.
func (mr *MockBackendMockRecorder) SaveIngressNetworks(arg0, arg1 any) *MockBackendSaveIngressNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIngressNetworks", reflect.TypeOf((*MockBackend)(nil).SaveIngressNetworks), arg0, arg1)
	return &MockBackendSaveIngressNetworksCall{Call: call}
}

// MockBackendSaveIngressNetworksCall wrap *gomock.Call
type MockBackendSaveIngressNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendSaveIngressNetworksCall) Return(arg0 state.RelationNetworks, arg1 error) *MockBackendSaveIngressNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendSaveIngressNetworksCall) Do(f func(string, []string) (state.RelationNetworks, error)) *MockBackendSaveIngressNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendSaveIngressNetworksCall) DoAndReturn(f func(string, []string) (state.RelationNetworks, error)) *MockBackendSaveIngressNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchOffer mocks base method.
func (m *MockBackend) WatchOffer(arg0 string) state.NotifyWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchOffer", arg0)
	ret0, _ := ret[0].(state.NotifyWatcher)
	return ret0
}

// WatchOffer indicates an expected call of WatchOffer.
func (mr *MockBackendMockRecorder) WatchOffer(arg0 any) *MockBackendWatchOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOffer", reflect.TypeOf((*MockBackend)(nil).WatchOffer), arg0)
	return &MockBackendWatchOfferCall{Call: call}
}

// MockBackendWatchOfferCall wrap *gomock.Call
type MockBackendWatchOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendWatchOfferCall) Return(arg0 state.NotifyWatcher) *MockBackendWatchOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendWatchOfferCall) Do(f func(string) state.NotifyWatcher) *MockBackendWatchOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendWatchOfferCall) DoAndReturn(f func(string) state.NotifyWatcher) *MockBackendWatchOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchOfferStatus mocks base method.
func (m *MockBackend) WatchOfferStatus(arg0 string) (state.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchOfferStatus", arg0)
	ret0, _ := ret[0].(state.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferStatus indicates an expected call of WatchOfferStatus.
func (mr *MockBackendMockRecorder) WatchOfferStatus(arg0 any) *MockBackendWatchOfferStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferStatus", reflect.TypeOf((*MockBackend)(nil).WatchOfferStatus), arg0)
	return &MockBackendWatchOfferStatusCall{Call: call}
}

// MockBackendWatchOfferStatusCall wrap *gomock.Call
type MockBackendWatchOfferStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendWatchOfferStatusCall) Return(arg0 state.NotifyWatcher, arg1 error) *MockBackendWatchOfferStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendWatchOfferStatusCall) Do(f func(string) (state.NotifyWatcher, error)) *MockBackendWatchOfferStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendWatchOfferStatusCall) DoAndReturn(f func(string) (state.NotifyWatcher, error)) *MockBackendWatchOfferStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBakeryConfigService is a mock of BakeryConfigService interface.
type MockBakeryConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockBakeryConfigServiceMockRecorder
}

// MockBakeryConfigServiceMockRecorder is the mock recorder for MockBakeryConfigService.
type MockBakeryConfigServiceMockRecorder struct {
	mock *MockBakeryConfigService
}

// NewMockBakeryConfigService creates a new mock instance.
func NewMockBakeryConfigService(ctrl *gomock.Controller) *MockBakeryConfigService {
	mock := &MockBakeryConfigService{ctrl: ctrl}
	mock.recorder = &MockBakeryConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBakeryConfigService) EXPECT() *MockBakeryConfigServiceMockRecorder {
	return m.recorder
}

// GetExternalUsersThirdPartyKey mocks base method.
func (m *MockBakeryConfigService) GetExternalUsersThirdPartyKey(arg0 context.Context) (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalUsersThirdPartyKey", arg0)
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalUsersThirdPartyKey indicates an expected call of GetExternalUsersThirdPartyKey.
func (mr *MockBakeryConfigServiceMockRecorder) GetExternalUsersThirdPartyKey(arg0 any) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalUsersThirdPartyKey", reflect.TypeOf((*MockBakeryConfigService)(nil).GetExternalUsersThirdPartyKey), arg0)
	return &MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall{Call: call}
}

// MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall wrap *gomock.Call
type MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall) Do(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall) DoAndReturn(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockAccessService) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 user.Name, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockAccessServiceMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockAccessServiceReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockAccessService)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockAccessServiceReadUserAccessLevelForTargetCall{Call: call}
}

// MockAccessServiceReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockAccessServiceReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Do(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
