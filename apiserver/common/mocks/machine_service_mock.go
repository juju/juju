// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: EnsureDeadMachineService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/machine_service_mock.go github.com/juju/juju/apiserver/common EnsureDeadMachineService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	gomock "go.uber.org/mock/gomock"
)

// MockEnsureDeadMachineService is a mock of EnsureDeadMachineService interface.
type MockEnsureDeadMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockEnsureDeadMachineServiceMockRecorder
}

// MockEnsureDeadMachineServiceMockRecorder is the mock recorder for MockEnsureDeadMachineService.
type MockEnsureDeadMachineServiceMockRecorder struct {
	mock *MockEnsureDeadMachineService
}

// NewMockEnsureDeadMachineService creates a new mock instance.
func NewMockEnsureDeadMachineService(ctrl *gomock.Controller) *MockEnsureDeadMachineService {
	mock := &MockEnsureDeadMachineService{ctrl: ctrl}
	mock.recorder = &MockEnsureDeadMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnsureDeadMachineService) EXPECT() *MockEnsureDeadMachineServiceMockRecorder {
	return m.recorder
}

// EnsureDeadMachine mocks base method.
func (m *MockEnsureDeadMachineService) EnsureDeadMachine(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeadMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeadMachine indicates an expected call of EnsureDeadMachine.
func (mr *MockEnsureDeadMachineServiceMockRecorder) EnsureDeadMachine(arg0, arg1 any) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeadMachine", reflect.TypeOf((*MockEnsureDeadMachineService)(nil).EnsureDeadMachine), arg0, arg1)
	return &MockEnsureDeadMachineServiceEnsureDeadMachineCall{Call: call}
}

// MockEnsureDeadMachineServiceEnsureDeadMachineCall wrap *gomock.Call
type MockEnsureDeadMachineServiceEnsureDeadMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnsureDeadMachineServiceEnsureDeadMachineCall) Return(arg0 error) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnsureDeadMachineServiceEnsureDeadMachineCall) Do(f func(context.Context, machine.Name) error) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnsureDeadMachineServiceEnsureDeadMachineCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
