// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: BlockCommandService,CloudService,ControllerConfigState,ControllerConfigService,ExternalControllerService,ToolsFinder,ToolsURLGetter,APIHostPortsForAgentsGetter,ToolsStorageGetter,ModelAgentService,MachineRebootService,EnsureDeadMachineService,WatchableMachineService,UnitStateService,ApplicationService,MachineService,StatusService,LeadershipPinningBackend,LeadershipMachine,AgentPasswordService,AgentBinaryService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/common_mock.go github.com/juju/juju/apiserver/common BlockCommandService,CloudService,ControllerConfigState,ControllerConfigService,ExternalControllerService,ToolsFinder,ToolsURLGetter,APIHostPortsForAgentsGetter,ToolsStorageGetter,ModelAgentService,MachineRebootService,EnsureDeadMachineService,WatchableMachineService,UnitStateService,ApplicationService,MachineService,StatusService,LeadershipPinningBackend,LeadershipMachine,AgentPasswordService,AgentBinaryService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/juju/juju/apiserver/common"
	cloud "github.com/juju/juju/cloud"
	controller "github.com/juju/juju/controller"
	agentbinary "github.com/juju/juju/core/agentbinary"
	crossmodel "github.com/juju/juju/core/crossmodel"
	instance "github.com/juju/juju/core/instance"
	life "github.com/juju/juju/core/life"
	machine "github.com/juju/juju/core/machine"
	objectstore "github.com/juju/juju/core/objectstore"
	semversion "github.com/juju/juju/core/semversion"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	service "github.com/juju/juju/domain/agentbinary/service"
	blockcommand "github.com/juju/juju/domain/blockcommand"
	unitstate "github.com/juju/juju/domain/unitstate"
	tools "github.com/juju/juju/internal/tools"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockCommandService is a mock of BlockCommandService interface.
type MockBlockCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCommandServiceMockRecorder
}

// MockBlockCommandServiceMockRecorder is the mock recorder for MockBlockCommandService.
type MockBlockCommandServiceMockRecorder struct {
	mock *MockBlockCommandService
}

// NewMockBlockCommandService creates a new mock instance.
func NewMockBlockCommandService(ctrl *gomock.Controller) *MockBlockCommandService {
	mock := &MockBlockCommandService{ctrl: ctrl}
	mock.recorder = &MockBlockCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockCommandService) EXPECT() *MockBlockCommandServiceMockRecorder {
	return m.recorder
}

// GetBlockSwitchedOn mocks base method.
func (m *MockBlockCommandService) GetBlockSwitchedOn(arg0 context.Context, arg1 blockcommand.BlockType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSwitchedOn", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSwitchedOn indicates an expected call of GetBlockSwitchedOn.
func (mr *MockBlockCommandServiceMockRecorder) GetBlockSwitchedOn(arg0, arg1 any) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSwitchedOn", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlockSwitchedOn), arg0, arg1)
	return &MockBlockCommandServiceGetBlockSwitchedOnCall{Call: call}
}

// MockBlockCommandServiceGetBlockSwitchedOnCall wrap *gomock.Call
type MockBlockCommandServiceGetBlockSwitchedOnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Return(arg0 string, arg1 error) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Do(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) DoAndReturn(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlocks mocks base method.
func (m *MockBlockCommandService) GetBlocks(arg0 context.Context) ([]blockcommand.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", arg0)
	ret0, _ := ret[0].([]blockcommand.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBlockCommandServiceMockRecorder) GetBlocks(arg0 any) *MockBlockCommandServiceGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlocks), arg0)
	return &MockBlockCommandServiceGetBlocksCall{Call: call}
}

// MockBlockCommandServiceGetBlocksCall wrap *gomock.Call
type MockBlockCommandServiceGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlocksCall) Return(arg0 []blockcommand.Block, arg1 error) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlocksCall) Do(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlocksCall) DoAndReturn(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudService is a mock of CloudService interface.
type MockCloudService struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceMockRecorder
}

// MockCloudServiceMockRecorder is the mock recorder for MockCloudService.
type MockCloudServiceMockRecorder struct {
	mock *MockCloudService
}

// NewMockCloudService creates a new mock instance.
func NewMockCloudService(ctrl *gomock.Controller) *MockCloudService {
	mock := &MockCloudService{ctrl: ctrl}
	mock.recorder = &MockCloudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudService) EXPECT() *MockCloudServiceMockRecorder {
	return m.recorder
}

// Cloud mocks base method.
func (m *MockCloudService) Cloud(arg0 context.Context, arg1 string) (*cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud.
func (mr *MockCloudServiceMockRecorder) Cloud(arg0, arg1 any) *MockCloudServiceCloudCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockCloudService)(nil).Cloud), arg0, arg1)
	return &MockCloudServiceCloudCall{Call: call}
}

// MockCloudServiceCloudCall wrap *gomock.Call
type MockCloudServiceCloudCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudServiceCloudCall) Return(arg0 *cloud.Cloud, arg1 error) *MockCloudServiceCloudCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudServiceCloudCall) Do(f func(context.Context, string) (*cloud.Cloud, error)) *MockCloudServiceCloudCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudServiceCloudCall) DoAndReturn(f func(context.Context, string) (*cloud.Cloud, error)) *MockCloudServiceCloudCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigState is a mock of ControllerConfigState interface.
type MockControllerConfigState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigStateMockRecorder
}

// MockControllerConfigStateMockRecorder is the mock recorder for MockControllerConfigState.
type MockControllerConfigStateMockRecorder struct {
	mock *MockControllerConfigState
}

// NewMockControllerConfigState creates a new mock instance.
func NewMockControllerConfigState(ctrl *gomock.Controller) *MockControllerConfigState {
	mock := &MockControllerConfigState{ctrl: ctrl}
	mock.recorder = &MockControllerConfigStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigState) EXPECT() *MockControllerConfigStateMockRecorder {
	return m.recorder
}

// CompletedMigrationForModel mocks base method.
func (m *MockControllerConfigState) CompletedMigrationForModel(arg0 string) (state.ModelMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletedMigrationForModel", arg0)
	ret0, _ := ret[0].(state.ModelMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletedMigrationForModel indicates an expected call of CompletedMigrationForModel.
func (mr *MockControllerConfigStateMockRecorder) CompletedMigrationForModel(arg0 any) *MockControllerConfigStateCompletedMigrationForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletedMigrationForModel", reflect.TypeOf((*MockControllerConfigState)(nil).CompletedMigrationForModel), arg0)
	return &MockControllerConfigStateCompletedMigrationForModelCall{Call: call}
}

// MockControllerConfigStateCompletedMigrationForModelCall wrap *gomock.Call
type MockControllerConfigStateCompletedMigrationForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigStateCompletedMigrationForModelCall) Return(arg0 state.ModelMigration, arg1 error) *MockControllerConfigStateCompletedMigrationForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigStateCompletedMigrationForModelCall) Do(f func(string) (state.ModelMigration, error)) *MockControllerConfigStateCompletedMigrationForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigStateCompletedMigrationForModelCall) DoAndReturn(f func(string) (state.ModelMigration, error)) *MockControllerConfigStateCompletedMigrationForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelExists mocks base method.
func (m *MockControllerConfigState) ModelExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelExists indicates an expected call of ModelExists.
func (mr *MockControllerConfigStateMockRecorder) ModelExists(arg0 any) *MockControllerConfigStateModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelExists", reflect.TypeOf((*MockControllerConfigState)(nil).ModelExists), arg0)
	return &MockControllerConfigStateModelExistsCall{Call: call}
}

// MockControllerConfigStateModelExistsCall wrap *gomock.Call
type MockControllerConfigStateModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigStateModelExistsCall) Return(arg0 bool, arg1 error) *MockControllerConfigStateModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigStateModelExistsCall) Do(f func(string) (bool, error)) *MockControllerConfigStateModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigStateModelExistsCall) DoAndReturn(f func(string) (bool, error)) *MockControllerConfigStateModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExternalControllerService is a mock of ExternalControllerService interface.
type MockExternalControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalControllerServiceMockRecorder
}

// MockExternalControllerServiceMockRecorder is the mock recorder for MockExternalControllerService.
type MockExternalControllerServiceMockRecorder struct {
	mock *MockExternalControllerService
}

// NewMockExternalControllerService creates a new mock instance.
func NewMockExternalControllerService(ctrl *gomock.Controller) *MockExternalControllerService {
	mock := &MockExternalControllerService{ctrl: ctrl}
	mock.recorder = &MockExternalControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalControllerService) EXPECT() *MockExternalControllerServiceMockRecorder {
	return m.recorder
}

// ControllerForModel mocks base method.
func (m *MockExternalControllerService) ControllerForModel(arg0 context.Context, arg1 string) (*crossmodel.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerForModel", arg0, arg1)
	ret0, _ := ret[0].(*crossmodel.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerForModel indicates an expected call of ControllerForModel.
func (mr *MockExternalControllerServiceMockRecorder) ControllerForModel(arg0, arg1 any) *MockExternalControllerServiceControllerForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerForModel", reflect.TypeOf((*MockExternalControllerService)(nil).ControllerForModel), arg0, arg1)
	return &MockExternalControllerServiceControllerForModelCall{Call: call}
}

// MockExternalControllerServiceControllerForModelCall wrap *gomock.Call
type MockExternalControllerServiceControllerForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalControllerServiceControllerForModelCall) Return(arg0 *crossmodel.ControllerInfo, arg1 error) *MockExternalControllerServiceControllerForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalControllerServiceControllerForModelCall) Do(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockExternalControllerServiceControllerForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalControllerServiceControllerForModelCall) DoAndReturn(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockExternalControllerServiceControllerForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateExternalController mocks base method.
func (m *MockExternalControllerService) UpdateExternalController(arg0 context.Context, arg1 crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalController indicates an expected call of UpdateExternalController.
func (mr *MockExternalControllerServiceMockRecorder) UpdateExternalController(arg0, arg1 any) *MockExternalControllerServiceUpdateExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalController", reflect.TypeOf((*MockExternalControllerService)(nil).UpdateExternalController), arg0, arg1)
	return &MockExternalControllerServiceUpdateExternalControllerCall{Call: call}
}

// MockExternalControllerServiceUpdateExternalControllerCall wrap *gomock.Call
type MockExternalControllerServiceUpdateExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Return(arg0 error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Do(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalControllerServiceUpdateExternalControllerCall) DoAndReturn(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockToolsFinder is a mock of ToolsFinder interface.
type MockToolsFinder struct {
	ctrl     *gomock.Controller
	recorder *MockToolsFinderMockRecorder
}

// MockToolsFinderMockRecorder is the mock recorder for MockToolsFinder.
type MockToolsFinderMockRecorder struct {
	mock *MockToolsFinder
}

// NewMockToolsFinder creates a new mock instance.
func NewMockToolsFinder(ctrl *gomock.Controller) *MockToolsFinder {
	mock := &MockToolsFinder{ctrl: ctrl}
	mock.recorder = &MockToolsFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolsFinder) EXPECT() *MockToolsFinderMockRecorder {
	return m.recorder
}

// FindAgents mocks base method.
func (m *MockToolsFinder) FindAgents(arg0 context.Context, arg1 common.FindAgentsParams) (tools.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAgents", arg0, arg1)
	ret0, _ := ret[0].(tools.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAgents indicates an expected call of FindAgents.
func (mr *MockToolsFinderMockRecorder) FindAgents(arg0, arg1 any) *MockToolsFinderFindAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAgents", reflect.TypeOf((*MockToolsFinder)(nil).FindAgents), arg0, arg1)
	return &MockToolsFinderFindAgentsCall{Call: call}
}

// MockToolsFinderFindAgentsCall wrap *gomock.Call
type MockToolsFinderFindAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockToolsFinderFindAgentsCall) Return(arg0 tools.List, arg1 error) *MockToolsFinderFindAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockToolsFinderFindAgentsCall) Do(f func(context.Context, common.FindAgentsParams) (tools.List, error)) *MockToolsFinderFindAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockToolsFinderFindAgentsCall) DoAndReturn(f func(context.Context, common.FindAgentsParams) (tools.List, error)) *MockToolsFinderFindAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockToolsURLGetter is a mock of ToolsURLGetter interface.
type MockToolsURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockToolsURLGetterMockRecorder
}

// MockToolsURLGetterMockRecorder is the mock recorder for MockToolsURLGetter.
type MockToolsURLGetterMockRecorder struct {
	mock *MockToolsURLGetter
}

// NewMockToolsURLGetter creates a new mock instance.
func NewMockToolsURLGetter(ctrl *gomock.Controller) *MockToolsURLGetter {
	mock := &MockToolsURLGetter{ctrl: ctrl}
	mock.recorder = &MockToolsURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolsURLGetter) EXPECT() *MockToolsURLGetterMockRecorder {
	return m.recorder
}

// ToolsURLs mocks base method.
func (m *MockToolsURLGetter) ToolsURLs(arg0 context.Context, arg1 semversion.Binary) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsURLs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsURLs indicates an expected call of ToolsURLs.
func (mr *MockToolsURLGetterMockRecorder) ToolsURLs(arg0, arg1 any) *MockToolsURLGetterToolsURLsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsURLs", reflect.TypeOf((*MockToolsURLGetter)(nil).ToolsURLs), arg0, arg1)
	return &MockToolsURLGetterToolsURLsCall{Call: call}
}

// MockToolsURLGetterToolsURLsCall wrap *gomock.Call
type MockToolsURLGetterToolsURLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockToolsURLGetterToolsURLsCall) Return(arg0 []string, arg1 error) *MockToolsURLGetterToolsURLsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockToolsURLGetterToolsURLsCall) Do(f func(context.Context, semversion.Binary) ([]string, error)) *MockToolsURLGetterToolsURLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockToolsURLGetterToolsURLsCall) DoAndReturn(f func(context.Context, semversion.Binary) ([]string, error)) *MockToolsURLGetterToolsURLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAPIHostPortsForAgentsGetter is a mock of APIHostPortsForAgentsGetter interface.
type MockAPIHostPortsForAgentsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAPIHostPortsForAgentsGetterMockRecorder
}

// MockAPIHostPortsForAgentsGetterMockRecorder is the mock recorder for MockAPIHostPortsForAgentsGetter.
type MockAPIHostPortsForAgentsGetterMockRecorder struct {
	mock *MockAPIHostPortsForAgentsGetter
}

// NewMockAPIHostPortsForAgentsGetter creates a new mock instance.
func NewMockAPIHostPortsForAgentsGetter(ctrl *gomock.Controller) *MockAPIHostPortsForAgentsGetter {
	mock := &MockAPIHostPortsForAgentsGetter{ctrl: ctrl}
	mock.recorder = &MockAPIHostPortsForAgentsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIHostPortsForAgentsGetter) EXPECT() *MockAPIHostPortsForAgentsGetterMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesForAgentsInPreferredOrder mocks base method.
func (m *MockAPIHostPortsForAgentsGetter) GetAllAPIAddressesForAgentsInPreferredOrder(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgentsInPreferredOrder", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgentsInPreferredOrder indicates an expected call of GetAllAPIAddressesForAgentsInPreferredOrder.
func (mr *MockAPIHostPortsForAgentsGetterMockRecorder) GetAllAPIAddressesForAgentsInPreferredOrder(arg0 any) *MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgentsInPreferredOrder", reflect.TypeOf((*MockAPIHostPortsForAgentsGetter)(nil).GetAllAPIAddressesForAgentsInPreferredOrder), arg0)
	return &MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall{Call: call}
}

// MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall wrap *gomock.Call
type MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall) Return(arg0 []string, arg1 error) *MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall) Do(f func(context.Context) ([]string, error)) *MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockAPIHostPortsForAgentsGetterGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockToolsStorageGetter is a mock of ToolsStorageGetter interface.
type MockToolsStorageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockToolsStorageGetterMockRecorder
}

// MockToolsStorageGetterMockRecorder is the mock recorder for MockToolsStorageGetter.
type MockToolsStorageGetterMockRecorder struct {
	mock *MockToolsStorageGetter
}

// NewMockToolsStorageGetter creates a new mock instance.
func NewMockToolsStorageGetter(ctrl *gomock.Controller) *MockToolsStorageGetter {
	mock := &MockToolsStorageGetter{ctrl: ctrl}
	mock.recorder = &MockToolsStorageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolsStorageGetter) EXPECT() *MockToolsStorageGetterMockRecorder {
	return m.recorder
}

// ToolsStorage mocks base method.
func (m *MockToolsStorageGetter) ToolsStorage(arg0 objectstore.ObjectStore) (binarystorage.StorageCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsStorage", arg0)
	ret0, _ := ret[0].(binarystorage.StorageCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsStorage indicates an expected call of ToolsStorage.
func (mr *MockToolsStorageGetterMockRecorder) ToolsStorage(arg0 any) *MockToolsStorageGetterToolsStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsStorage", reflect.TypeOf((*MockToolsStorageGetter)(nil).ToolsStorage), arg0)
	return &MockToolsStorageGetterToolsStorageCall{Call: call}
}

// MockToolsStorageGetterToolsStorageCall wrap *gomock.Call
type MockToolsStorageGetterToolsStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockToolsStorageGetterToolsStorageCall) Return(arg0 binarystorage.StorageCloser, arg1 error) *MockToolsStorageGetterToolsStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockToolsStorageGetterToolsStorageCall) Do(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockToolsStorageGetterToolsStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockToolsStorageGetterToolsStorageCall) DoAndReturn(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockToolsStorageGetterToolsStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// GetMachineTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetMachineTargetAgentVersion(arg0 context.Context, arg1 machine.Name) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineTargetAgentVersion indicates an expected call of GetMachineTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetMachineTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetMachineTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceGetMachineTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetMachineTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetMachineTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetMachineTargetAgentVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetMachineTargetAgentVersionCall) Do(f func(context.Context, machine.Name) (agentbinary.Version, error)) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetMachineTargetAgentVersionCall) DoAndReturn(f func(context.Context, machine.Name) (agentbinary.Version, error)) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetUnitTargetAgentVersion(arg0 context.Context, arg1 unit.Name) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTargetAgentVersion indicates an expected call of GetUnitTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetUnitTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetUnitTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceGetUnitTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetUnitTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetUnitTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetUnitTargetAgentVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetUnitTargetAgentVersionCall) Do(f func(context.Context, unit.Name) (agentbinary.Version, error)) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetUnitTargetAgentVersionCall) DoAndReturn(f func(context.Context, unit.Name) (agentbinary.Version, error)) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineRebootService is a mock of MachineRebootService interface.
type MockMachineRebootService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineRebootServiceMockRecorder
}

// MockMachineRebootServiceMockRecorder is the mock recorder for MockMachineRebootService.
type MockMachineRebootServiceMockRecorder struct {
	mock *MockMachineRebootService
}

// NewMockMachineRebootService creates a new mock instance.
func NewMockMachineRebootService(ctrl *gomock.Controller) *MockMachineRebootService {
	mock := &MockMachineRebootService{ctrl: ctrl}
	mock.recorder = &MockMachineRebootServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineRebootService) EXPECT() *MockMachineRebootServiceMockRecorder {
	return m.recorder
}

// ClearMachineReboot mocks base method.
func (m *MockMachineRebootService) ClearMachineReboot(arg0 context.Context, arg1 machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMachineReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMachineReboot indicates an expected call of ClearMachineReboot.
func (mr *MockMachineRebootServiceMockRecorder) ClearMachineReboot(arg0, arg1 any) *MockMachineRebootServiceClearMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMachineReboot", reflect.TypeOf((*MockMachineRebootService)(nil).ClearMachineReboot), arg0, arg1)
	return &MockMachineRebootServiceClearMachineRebootCall{Call: call}
}

// MockMachineRebootServiceClearMachineRebootCall wrap *gomock.Call
type MockMachineRebootServiceClearMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineRebootServiceClearMachineRebootCall) Return(arg0 error) *MockMachineRebootServiceClearMachineRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineRebootServiceClearMachineRebootCall) Do(f func(context.Context, machine.UUID) error) *MockMachineRebootServiceClearMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineRebootServiceClearMachineRebootCall) DoAndReturn(f func(context.Context, machine.UUID) error) *MockMachineRebootServiceClearMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineRebootService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineRebootServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineRebootServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineRebootService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineRebootServiceGetMachineUUIDCall{Call: call}
}

// MockMachineRebootServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineRebootServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineRebootServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineRebootServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineRebootServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineRebootServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineRebootServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineRebootServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineRebootRequired mocks base method.
func (m *MockMachineRebootService) IsMachineRebootRequired(arg0 context.Context, arg1 machine.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineRebootRequired", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineRebootRequired indicates an expected call of IsMachineRebootRequired.
func (mr *MockMachineRebootServiceMockRecorder) IsMachineRebootRequired(arg0, arg1 any) *MockMachineRebootServiceIsMachineRebootRequiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineRebootRequired", reflect.TypeOf((*MockMachineRebootService)(nil).IsMachineRebootRequired), arg0, arg1)
	return &MockMachineRebootServiceIsMachineRebootRequiredCall{Call: call}
}

// MockMachineRebootServiceIsMachineRebootRequiredCall wrap *gomock.Call
type MockMachineRebootServiceIsMachineRebootRequiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineRebootServiceIsMachineRebootRequiredCall) Return(arg0 bool, arg1 error) *MockMachineRebootServiceIsMachineRebootRequiredCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineRebootServiceIsMachineRebootRequiredCall) Do(f func(context.Context, machine.UUID) (bool, error)) *MockMachineRebootServiceIsMachineRebootRequiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineRebootServiceIsMachineRebootRequiredCall) DoAndReturn(f func(context.Context, machine.UUID) (bool, error)) *MockMachineRebootServiceIsMachineRebootRequiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequireMachineReboot mocks base method.
func (m *MockMachineRebootService) RequireMachineReboot(arg0 context.Context, arg1 machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireMachineReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequireMachineReboot indicates an expected call of RequireMachineReboot.
func (mr *MockMachineRebootServiceMockRecorder) RequireMachineReboot(arg0, arg1 any) *MockMachineRebootServiceRequireMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireMachineReboot", reflect.TypeOf((*MockMachineRebootService)(nil).RequireMachineReboot), arg0, arg1)
	return &MockMachineRebootServiceRequireMachineRebootCall{Call: call}
}

// MockMachineRebootServiceRequireMachineRebootCall wrap *gomock.Call
type MockMachineRebootServiceRequireMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineRebootServiceRequireMachineRebootCall) Return(arg0 error) *MockMachineRebootServiceRequireMachineRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineRebootServiceRequireMachineRebootCall) Do(f func(context.Context, machine.UUID) error) *MockMachineRebootServiceRequireMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineRebootServiceRequireMachineRebootCall) DoAndReturn(f func(context.Context, machine.UUID) error) *MockMachineRebootServiceRequireMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldRebootOrShutdown mocks base method.
func (m *MockMachineRebootService) ShouldRebootOrShutdown(arg0 context.Context, arg1 machine.UUID) (machine.RebootAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRebootOrShutdown", arg0, arg1)
	ret0, _ := ret[0].(machine.RebootAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldRebootOrShutdown indicates an expected call of ShouldRebootOrShutdown.
func (mr *MockMachineRebootServiceMockRecorder) ShouldRebootOrShutdown(arg0, arg1 any) *MockMachineRebootServiceShouldRebootOrShutdownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRebootOrShutdown", reflect.TypeOf((*MockMachineRebootService)(nil).ShouldRebootOrShutdown), arg0, arg1)
	return &MockMachineRebootServiceShouldRebootOrShutdownCall{Call: call}
}

// MockMachineRebootServiceShouldRebootOrShutdownCall wrap *gomock.Call
type MockMachineRebootServiceShouldRebootOrShutdownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineRebootServiceShouldRebootOrShutdownCall) Return(arg0 machine.RebootAction, arg1 error) *MockMachineRebootServiceShouldRebootOrShutdownCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineRebootServiceShouldRebootOrShutdownCall) Do(f func(context.Context, machine.UUID) (machine.RebootAction, error)) *MockMachineRebootServiceShouldRebootOrShutdownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineRebootServiceShouldRebootOrShutdownCall) DoAndReturn(f func(context.Context, machine.UUID) (machine.RebootAction, error)) *MockMachineRebootServiceShouldRebootOrShutdownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEnsureDeadMachineService is a mock of EnsureDeadMachineService interface.
type MockEnsureDeadMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockEnsureDeadMachineServiceMockRecorder
}

// MockEnsureDeadMachineServiceMockRecorder is the mock recorder for MockEnsureDeadMachineService.
type MockEnsureDeadMachineServiceMockRecorder struct {
	mock *MockEnsureDeadMachineService
}

// NewMockEnsureDeadMachineService creates a new mock instance.
func NewMockEnsureDeadMachineService(ctrl *gomock.Controller) *MockEnsureDeadMachineService {
	mock := &MockEnsureDeadMachineService{ctrl: ctrl}
	mock.recorder = &MockEnsureDeadMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnsureDeadMachineService) EXPECT() *MockEnsureDeadMachineServiceMockRecorder {
	return m.recorder
}

// EnsureDeadMachine mocks base method.
func (m *MockEnsureDeadMachineService) EnsureDeadMachine(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeadMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeadMachine indicates an expected call of EnsureDeadMachine.
func (mr *MockEnsureDeadMachineServiceMockRecorder) EnsureDeadMachine(arg0, arg1 any) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeadMachine", reflect.TypeOf((*MockEnsureDeadMachineService)(nil).EnsureDeadMachine), arg0, arg1)
	return &MockEnsureDeadMachineServiceEnsureDeadMachineCall{Call: call}
}

// MockEnsureDeadMachineServiceEnsureDeadMachineCall wrap *gomock.Call
type MockEnsureDeadMachineServiceEnsureDeadMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnsureDeadMachineServiceEnsureDeadMachineCall) Return(arg0 error) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnsureDeadMachineServiceEnsureDeadMachineCall) Do(f func(context.Context, machine.Name) error) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnsureDeadMachineServiceEnsureDeadMachineCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockEnsureDeadMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatchableMachineService is a mock of WatchableMachineService interface.
type MockWatchableMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockWatchableMachineServiceMockRecorder
}

// MockWatchableMachineServiceMockRecorder is the mock recorder for MockWatchableMachineService.
type MockWatchableMachineServiceMockRecorder struct {
	mock *MockWatchableMachineService
}

// NewMockWatchableMachineService creates a new mock instance.
func NewMockWatchableMachineService(ctrl *gomock.Controller) *MockWatchableMachineService {
	mock := &MockWatchableMachineService{ctrl: ctrl}
	mock.recorder = &MockWatchableMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchableMachineService) EXPECT() *MockWatchableMachineServiceMockRecorder {
	return m.recorder
}

// WatchMachineReboot mocks base method.
func (m *MockWatchableMachineService) WatchMachineReboot(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineReboot", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineReboot indicates an expected call of WatchMachineReboot.
func (mr *MockWatchableMachineServiceMockRecorder) WatchMachineReboot(arg0, arg1 any) *MockWatchableMachineServiceWatchMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineReboot", reflect.TypeOf((*MockWatchableMachineService)(nil).WatchMachineReboot), arg0, arg1)
	return &MockWatchableMachineServiceWatchMachineRebootCall{Call: call}
}

// MockWatchableMachineServiceWatchMachineRebootCall wrap *gomock.Call
type MockWatchableMachineServiceWatchMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatchableMachineServiceWatchMachineRebootCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatchableMachineServiceWatchMachineRebootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatchableMachineServiceWatchMachineRebootCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockWatchableMachineServiceWatchMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatchableMachineServiceWatchMachineRebootCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockWatchableMachineServiceWatchMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnitStateService is a mock of UnitStateService interface.
type MockUnitStateService struct {
	ctrl     *gomock.Controller
	recorder *MockUnitStateServiceMockRecorder
}

// MockUnitStateServiceMockRecorder is the mock recorder for MockUnitStateService.
type MockUnitStateServiceMockRecorder struct {
	mock *MockUnitStateService
}

// NewMockUnitStateService creates a new mock instance.
func NewMockUnitStateService(ctrl *gomock.Controller) *MockUnitStateService {
	mock := &MockUnitStateService{ctrl: ctrl}
	mock.recorder = &MockUnitStateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitStateService) EXPECT() *MockUnitStateServiceMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockUnitStateService) GetState(arg0 context.Context, arg1 unit.Name) (unitstate.RetrievedUnitState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(unitstate.RetrievedUnitState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockUnitStateServiceMockRecorder) GetState(arg0, arg1 any) *MockUnitStateServiceGetStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockUnitStateService)(nil).GetState), arg0, arg1)
	return &MockUnitStateServiceGetStateCall{Call: call}
}

// MockUnitStateServiceGetStateCall wrap *gomock.Call
type MockUnitStateServiceGetStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitStateServiceGetStateCall) Return(arg0 unitstate.RetrievedUnitState, arg1 error) *MockUnitStateServiceGetStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitStateServiceGetStateCall) Do(f func(context.Context, unit.Name) (unitstate.RetrievedUnitState, error)) *MockUnitStateServiceGetStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitStateServiceGetStateCall) DoAndReturn(f func(context.Context, unit.Name) (unitstate.RetrievedUnitState, error)) *MockUnitStateServiceGetStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetState mocks base method.
func (m *MockUnitStateService) SetState(arg0 context.Context, arg1 unitstate.UnitState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockUnitStateServiceMockRecorder) SetState(arg0, arg1 any) *MockUnitStateServiceSetStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockUnitStateService)(nil).SetState), arg0, arg1)
	return &MockUnitStateServiceSetStateCall{Call: call}
}

// MockUnitStateServiceSetStateCall wrap *gomock.Call
type MockUnitStateServiceSetStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitStateServiceSetStateCall) Return(arg0 error) *MockUnitStateServiceSetStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitStateServiceSetStateCall) Do(f func(context.Context, unitstate.UnitState) error) *MockUnitStateServiceSetStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitStateServiceSetStateCall) DoAndReturn(f func(context.Context, unitstate.UnitState) error) *MockUnitStateServiceSetStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetApplicationLifeByName mocks base method.
func (m *MockApplicationService) GetApplicationLifeByName(arg0 context.Context, arg1 string) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLifeByName", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLifeByName indicates an expected call of GetApplicationLifeByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLifeByName(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLifeByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLifeByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Do(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeByNameCall) DoAndReturn(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetInstanceID mocks base method.
func (m *MockMachineService) GetInstanceID(arg0 context.Context, arg1 machine.UUID) (instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceID", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceID indicates an expected call of GetInstanceID.
func (mr *MockMachineServiceMockRecorder) GetInstanceID(arg0, arg1 any) *MockMachineServiceGetInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockMachineService)(nil).GetInstanceID), arg0, arg1)
	return &MockMachineServiceGetInstanceIDCall{Call: call}
}

// MockMachineServiceGetInstanceIDCall wrap *gomock.Call
type MockMachineServiceGetInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceIDCall) Return(arg0 instance.Id, arg1 error) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceIDCall) Do(f func(context.Context, machine.UUID) (instance.Id, error)) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceIDCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.Id, error)) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineLife mocks base method.
func (m *MockMachineService) GetMachineLife(arg0 context.Context, arg1 machine.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLife indicates an expected call of GetMachineLife.
func (mr *MockMachineServiceMockRecorder) GetMachineLife(arg0, arg1 any) *MockMachineServiceGetMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLife", reflect.TypeOf((*MockMachineService)(nil).GetMachineLife), arg0, arg1)
	return &MockMachineServiceGetMachineLifeCall{Call: call}
}

// MockMachineServiceGetMachineLifeCall wrap *gomock.Call
type MockMachineServiceGetMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineLifeCall) Return(arg0 life.Value, arg1 error) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineLifeCall) Do(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineLifeCall) DoAndReturn(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetUnitWorkloadStatus mocks base method.
func (m *MockStatusService) GetUnitWorkloadStatus(arg0 context.Context, arg1 unit.Name) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatus indicates an expected call of GetUnitWorkloadStatus.
func (mr *MockStatusServiceMockRecorder) GetUnitWorkloadStatus(arg0, arg1 any) *MockStatusServiceGetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatus", reflect.TypeOf((*MockStatusService)(nil).GetUnitWorkloadStatus), arg0, arg1)
	return &MockStatusServiceGetUnitWorkloadStatusCall{Call: call}
}

// MockStatusServiceGetUnitWorkloadStatusCall wrap *gomock.Call
type MockStatusServiceGetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetUnitWorkloadStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetUnitWorkloadStatusCall) Do(f func(context.Context, unit.Name) (status.StatusInfo, error)) *MockStatusServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.Name) (status.StatusInfo, error)) *MockStatusServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadStatus mocks base method.
func (m *MockStatusService) SetUnitWorkloadStatus(arg0 context.Context, arg1 unit.Name, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadStatus indicates an expected call of SetUnitWorkloadStatus.
func (mr *MockStatusServiceMockRecorder) SetUnitWorkloadStatus(arg0, arg1, arg2 any) *MockStatusServiceSetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadStatus", reflect.TypeOf((*MockStatusService)(nil).SetUnitWorkloadStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetUnitWorkloadStatusCall{Call: call}
}

// MockStatusServiceSetUnitWorkloadStatusCall wrap *gomock.Call
type MockStatusServiceSetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetUnitWorkloadStatusCall) Return(arg0 error) *MockStatusServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetUnitWorkloadStatusCall) Do(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeadershipPinningBackend is a mock of LeadershipPinningBackend interface.
type MockLeadershipPinningBackend struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipPinningBackendMockRecorder
}

// MockLeadershipPinningBackendMockRecorder is the mock recorder for MockLeadershipPinningBackend.
type MockLeadershipPinningBackendMockRecorder struct {
	mock *MockLeadershipPinningBackend
}

// NewMockLeadershipPinningBackend creates a new mock instance.
func NewMockLeadershipPinningBackend(ctrl *gomock.Controller) *MockLeadershipPinningBackend {
	mock := &MockLeadershipPinningBackend{ctrl: ctrl}
	mock.recorder = &MockLeadershipPinningBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadershipPinningBackend) EXPECT() *MockLeadershipPinningBackendMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockLeadershipPinningBackend) Machine(arg0 string) (common.LeadershipMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(common.LeadershipMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockLeadershipPinningBackendMockRecorder) Machine(arg0 any) *MockLeadershipPinningBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockLeadershipPinningBackend)(nil).Machine), arg0)
	return &MockLeadershipPinningBackendMachineCall{Call: call}
}

// MockLeadershipPinningBackendMachineCall wrap *gomock.Call
type MockLeadershipPinningBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipPinningBackendMachineCall) Return(arg0 common.LeadershipMachine, arg1 error) *MockLeadershipPinningBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipPinningBackendMachineCall) Do(f func(string) (common.LeadershipMachine, error)) *MockLeadershipPinningBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipPinningBackendMachineCall) DoAndReturn(f func(string) (common.LeadershipMachine, error)) *MockLeadershipPinningBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeadershipMachine is a mock of LeadershipMachine interface.
type MockLeadershipMachine struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipMachineMockRecorder
}

// MockLeadershipMachineMockRecorder is the mock recorder for MockLeadershipMachine.
type MockLeadershipMachineMockRecorder struct {
	mock *MockLeadershipMachine
}

// NewMockLeadershipMachine creates a new mock instance.
func NewMockLeadershipMachine(ctrl *gomock.Controller) *MockLeadershipMachine {
	mock := &MockLeadershipMachine{ctrl: ctrl}
	mock.recorder = &MockLeadershipMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadershipMachine) EXPECT() *MockLeadershipMachineMockRecorder {
	return m.recorder
}

// ApplicationNames mocks base method.
func (m *MockLeadershipMachine) ApplicationNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationNames indicates an expected call of ApplicationNames.
func (mr *MockLeadershipMachineMockRecorder) ApplicationNames() *MockLeadershipMachineApplicationNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationNames", reflect.TypeOf((*MockLeadershipMachine)(nil).ApplicationNames))
	return &MockLeadershipMachineApplicationNamesCall{Call: call}
}

// MockLeadershipMachineApplicationNamesCall wrap *gomock.Call
type MockLeadershipMachineApplicationNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipMachineApplicationNamesCall) Return(arg0 []string, arg1 error) *MockLeadershipMachineApplicationNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipMachineApplicationNamesCall) Do(f func() ([]string, error)) *MockLeadershipMachineApplicationNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipMachineApplicationNamesCall) DoAndReturn(f func() ([]string, error)) *MockLeadershipMachineApplicationNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentPasswordService is a mock of AgentPasswordService interface.
type MockAgentPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentPasswordServiceMockRecorder
}

// MockAgentPasswordServiceMockRecorder is the mock recorder for MockAgentPasswordService.
type MockAgentPasswordServiceMockRecorder struct {
	mock *MockAgentPasswordService
}

// NewMockAgentPasswordService creates a new mock instance.
func NewMockAgentPasswordService(ctrl *gomock.Controller) *MockAgentPasswordService {
	mock := &MockAgentPasswordService{ctrl: ctrl}
	mock.recorder = &MockAgentPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentPasswordService) EXPECT() *MockAgentPasswordServiceMockRecorder {
	return m.recorder
}

// IsMachineController mocks base method.
func (m *MockAgentPasswordService) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockAgentPasswordServiceMockRecorder) IsMachineController(arg0, arg1 any) *MockAgentPasswordServiceIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockAgentPasswordService)(nil).IsMachineController), arg0, arg1)
	return &MockAgentPasswordServiceIsMachineControllerCall{Call: call}
}

// MockAgentPasswordServiceIsMachineControllerCall wrap *gomock.Call
type MockAgentPasswordServiceIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockAgentPasswordServiceIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockAgentPasswordServiceIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockAgentPasswordServiceIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachinePassword mocks base method.
func (m *MockAgentPasswordService) SetMachinePassword(arg0 context.Context, arg1 machine.Name, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePassword indicates an expected call of SetMachinePassword.
func (mr *MockAgentPasswordServiceMockRecorder) SetMachinePassword(arg0, arg1, arg2 any) *MockAgentPasswordServiceSetMachinePasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePassword", reflect.TypeOf((*MockAgentPasswordService)(nil).SetMachinePassword), arg0, arg1, arg2)
	return &MockAgentPasswordServiceSetMachinePasswordCall{Call: call}
}

// MockAgentPasswordServiceSetMachinePasswordCall wrap *gomock.Call
type MockAgentPasswordServiceSetMachinePasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceSetMachinePasswordCall) Return(arg0 error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceSetMachinePasswordCall) Do(f func(context.Context, machine.Name, string) error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceSetMachinePasswordCall) DoAndReturn(f func(context.Context, machine.Name, string) error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPassword mocks base method.
func (m *MockAgentPasswordService) SetUnitPassword(arg0 context.Context, arg1 unit.Name, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPassword indicates an expected call of SetUnitPassword.
func (mr *MockAgentPasswordServiceMockRecorder) SetUnitPassword(arg0, arg1, arg2 any) *MockAgentPasswordServiceSetUnitPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPassword", reflect.TypeOf((*MockAgentPasswordService)(nil).SetUnitPassword), arg0, arg1, arg2)
	return &MockAgentPasswordServiceSetUnitPasswordCall{Call: call}
}

// MockAgentPasswordServiceSetUnitPasswordCall wrap *gomock.Call
type MockAgentPasswordServiceSetUnitPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceSetUnitPasswordCall) Return(arg0 error) *MockAgentPasswordServiceSetUnitPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceSetUnitPasswordCall) Do(f func(context.Context, unit.Name, string) error) *MockAgentPasswordServiceSetUnitPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceSetUnitPasswordCall) DoAndReturn(f func(context.Context, unit.Name, string) error) *MockAgentPasswordServiceSetUnitPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentBinaryService is a mock of AgentBinaryService interface.
type MockAgentBinaryService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryServiceMockRecorder
}

// MockAgentBinaryServiceMockRecorder is the mock recorder for MockAgentBinaryService.
type MockAgentBinaryServiceMockRecorder struct {
	mock *MockAgentBinaryService
}

// NewMockAgentBinaryService creates a new mock instance.
func NewMockAgentBinaryService(ctrl *gomock.Controller) *MockAgentBinaryService {
	mock := &MockAgentBinaryService{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryService) EXPECT() *MockAgentBinaryServiceMockRecorder {
	return m.recorder
}

// GetEnvironAgentBinariesFinder mocks base method.
func (m *MockAgentBinaryService) GetEnvironAgentBinariesFinder() service.EnvironAgentBinariesFinderFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironAgentBinariesFinder")
	ret0, _ := ret[0].(service.EnvironAgentBinariesFinderFunc)
	return ret0
}

// GetEnvironAgentBinariesFinder indicates an expected call of GetEnvironAgentBinariesFinder.
func (mr *MockAgentBinaryServiceMockRecorder) GetEnvironAgentBinariesFinder() *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironAgentBinariesFinder", reflect.TypeOf((*MockAgentBinaryService)(nil).GetEnvironAgentBinariesFinder))
	return &MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall{Call: call}
}

// MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall wrap *gomock.Call
type MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) Return(arg0 service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) Do(f func() service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) DoAndReturn(f func() service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
