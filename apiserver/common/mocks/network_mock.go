// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: SpaceService)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/network_mock.go github.com/juju/juju/apiserver/common SpaceService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	gomock "go.uber.org/mock/gomock"
)

// MockSpaceService is a mock of SpaceService interface.
type MockSpaceService struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceServiceMockRecorder
}

// MockSpaceServiceMockRecorder is the mock recorder for MockSpaceService.
type MockSpaceServiceMockRecorder struct {
	mock *MockSpaceService
}

// NewMockSpaceService creates a new mock instance.
func NewMockSpaceService(ctrl *gomock.Controller) *MockSpaceService {
	mock := &MockSpaceService{ctrl: ctrl}
	mock.recorder = &MockSpaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceService) EXPECT() *MockSpaceServiceMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockSpaceService) AddSpace(arg0 context.Context, arg1 string, arg2 network.Id, arg3 []string) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockSpaceServiceMockRecorder) AddSpace(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockSpaceService)(nil).AddSpace), arg0, arg1, arg2, arg3)
}

// GetAllSpaces mocks base method.
func (m *MockSpaceService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockSpaceServiceMockRecorder) GetAllSpaces(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockSpaceService)(nil).GetAllSpaces), arg0)
}

// Remove mocks base method.
func (m *MockSpaceService) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSpaceServiceMockRecorder) Remove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSpaceService)(nil).Remove), arg0, arg1)
}

// SaveProviderSubnets mocks base method.
func (m *MockSpaceService) SaveProviderSubnets(arg0 context.Context, arg1 []network.SubnetInfo, arg2 network.Id, arg3 network.FanConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProviderSubnets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProviderSubnets indicates an expected call of SaveProviderSubnets.
func (mr *MockSpaceServiceMockRecorder) SaveProviderSubnets(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProviderSubnets", reflect.TypeOf((*MockSpaceService)(nil).SaveProviderSubnets), arg0, arg1, arg2, arg3)
}

// Space mocks base method.
func (m *MockSpaceService) Space(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Space", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Space indicates an expected call of Space.
func (mr *MockSpaceServiceMockRecorder) Space(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Space", reflect.TypeOf((*MockSpaceService)(nil).Space), arg0, arg1)
}

// SpaceByName mocks base method.
func (m *MockSpaceService) SpaceByName(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByName indicates an expected call of SpaceByName.
func (mr *MockSpaceServiceMockRecorder) SpaceByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByName", reflect.TypeOf((*MockSpaceService)(nil).SpaceByName), arg0, arg1)
}

// UpdateSpace mocks base method.
func (m *MockSpaceService) UpdateSpace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpace indicates an expected call of UpdateSpace.
func (mr *MockSpaceServiceMockRecorder) UpdateSpace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpace", reflect.TypeOf((*MockSpaceService)(nil).UpdateSpace), arg0, arg1, arg2)
}
