// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: APIAddressAccessor)
//
// Generated by this command:
//
//	mockgen -typed -package common -destination package_mock.go github.com/juju/juju/apiserver/common APIAddressAccessor
//

// Package common is a generated GoMock package.
package common

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIAddressAccessor is a mock of APIAddressAccessor interface.
type MockAPIAddressAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAPIAddressAccessorMockRecorder
}

// MockAPIAddressAccessorMockRecorder is the mock recorder for MockAPIAddressAccessor.
type MockAPIAddressAccessorMockRecorder struct {
	mock *MockAPIAddressAccessor
}

// NewMockAPIAddressAccessor creates a new mock instance.
func NewMockAPIAddressAccessor(ctrl *gomock.Controller) *MockAPIAddressAccessor {
	mock := &MockAPIAddressAccessor{ctrl: ctrl}
	mock.recorder = &MockAPIAddressAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIAddressAccessor) EXPECT() *MockAPIAddressAccessorMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesByControllerIDForAgents mocks base method.
func (m *MockAPIAddressAccessor) GetAllAPIAddressesByControllerIDForAgents(arg0 context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesByControllerIDForAgents", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesByControllerIDForAgents indicates an expected call of GetAllAPIAddressesByControllerIDForAgents.
func (mr *MockAPIAddressAccessorMockRecorder) GetAllAPIAddressesByControllerIDForAgents(arg0 any) *MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesByControllerIDForAgents", reflect.TypeOf((*MockAPIAddressAccessor)(nil).GetAllAPIAddressesByControllerIDForAgents), arg0)
	return &MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall{Call: call}
}

// MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall wrap *gomock.Call
type MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall) Return(arg0 map[string][]string, arg1 error) *MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall) Do(f func(context.Context) (map[string][]string, error)) *MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall) DoAndReturn(f func(context.Context) (map[string][]string, error)) *MockAPIAddressAccessorGetAllAPIAddressesByControllerIDForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllAPIAddressesForAgents mocks base method.
func (m *MockAPIAddressAccessor) GetAllAPIAddressesForAgents(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgents", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgents indicates an expected call of GetAllAPIAddressesForAgents.
func (mr *MockAPIAddressAccessorMockRecorder) GetAllAPIAddressesForAgents(arg0 any) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgents", reflect.TypeOf((*MockAPIAddressAccessor)(nil).GetAllAPIAddressesForAgents), arg0)
	return &MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall{Call: call}
}

// MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall wrap *gomock.Call
type MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall) Return(arg0 []string, arg1 error) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall) Do(f func(context.Context) ([]string, error)) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerAPIAddresses mocks base method.
func (m *MockAPIAddressAccessor) WatchControllerAPIAddresses(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerAPIAddresses", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerAPIAddresses indicates an expected call of WatchControllerAPIAddresses.
func (mr *MockAPIAddressAccessorMockRecorder) WatchControllerAPIAddresses(arg0 any) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerAPIAddresses", reflect.TypeOf((*MockAPIAddressAccessor)(nil).WatchControllerAPIAddresses), arg0)
	return &MockAPIAddressAccessorWatchControllerAPIAddressesCall{Call: call}
}

// MockAPIAddressAccessorWatchControllerAPIAddressesCall wrap *gomock.Call
type MockAPIAddressAccessorWatchControllerAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddressAccessorWatchControllerAPIAddressesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddressAccessorWatchControllerAPIAddressesCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddressAccessorWatchControllerAPIAddressesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
