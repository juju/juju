// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: APIAddressAccessor,ModelService)
//
// Generated by this command:
//
//	mockgen -typed -package common -destination package_mock.go github.com/juju/juju/apiserver/common APIAddressAccessor,ModelService
//

// Package common is a generated GoMock package.
package common

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	network "github.com/juju/juju/core/network"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIAddressAccessor is a mock of APIAddressAccessor interface.
type MockAPIAddressAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAPIAddressAccessorMockRecorder
}

// MockAPIAddressAccessorMockRecorder is the mock recorder for MockAPIAddressAccessor.
type MockAPIAddressAccessorMockRecorder struct {
	mock *MockAPIAddressAccessor
}

// NewMockAPIAddressAccessor creates a new mock instance.
func NewMockAPIAddressAccessor(ctrl *gomock.Controller) *MockAPIAddressAccessor {
	mock := &MockAPIAddressAccessor{ctrl: ctrl}
	mock.recorder = &MockAPIAddressAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIAddressAccessor) EXPECT() *MockAPIAddressAccessorMockRecorder {
	return m.recorder
}

// GetAPIHostPortsForAgents mocks base method.
func (m *MockAPIAddressAccessor) GetAPIHostPortsForAgents(arg0 context.Context) ([]network.HostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIHostPortsForAgents", arg0)
	ret0, _ := ret[0].([]network.HostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIHostPortsForAgents indicates an expected call of GetAPIHostPortsForAgents.
func (mr *MockAPIAddressAccessorMockRecorder) GetAPIHostPortsForAgents(arg0 any) *MockAPIAddressAccessorGetAPIHostPortsForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIHostPortsForAgents", reflect.TypeOf((*MockAPIAddressAccessor)(nil).GetAPIHostPortsForAgents), arg0)
	return &MockAPIAddressAccessorGetAPIHostPortsForAgentsCall{Call: call}
}

// MockAPIAddressAccessorGetAPIHostPortsForAgentsCall wrap *gomock.Call
type MockAPIAddressAccessorGetAPIHostPortsForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddressAccessorGetAPIHostPortsForAgentsCall) Return(arg0 []network.HostPorts, arg1 error) *MockAPIAddressAccessorGetAPIHostPortsForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddressAccessorGetAPIHostPortsForAgentsCall) Do(f func(context.Context) ([]network.HostPorts, error)) *MockAPIAddressAccessorGetAPIHostPortsForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddressAccessorGetAPIHostPortsForAgentsCall) DoAndReturn(f func(context.Context) ([]network.HostPorts, error)) *MockAPIAddressAccessorGetAPIHostPortsForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllAPIAddressesForAgents mocks base method.
func (m *MockAPIAddressAccessor) GetAllAPIAddressesForAgents(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgents", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgents indicates an expected call of GetAllAPIAddressesForAgents.
func (mr *MockAPIAddressAccessorMockRecorder) GetAllAPIAddressesForAgents(arg0 any) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgents", reflect.TypeOf((*MockAPIAddressAccessor)(nil).GetAllAPIAddressesForAgents), arg0)
	return &MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall{Call: call}
}

// MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall wrap *gomock.Call
type MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall) Return(arg0 []string, arg1 error) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall) Do(f func(context.Context) ([]string, error)) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockAPIAddressAccessorGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerAPIAddresses mocks base method.
func (m *MockAPIAddressAccessor) WatchControllerAPIAddresses(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerAPIAddresses", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerAPIAddresses indicates an expected call of WatchControllerAPIAddresses.
func (mr *MockAPIAddressAccessorMockRecorder) WatchControllerAPIAddresses(arg0 any) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerAPIAddresses", reflect.TypeOf((*MockAPIAddressAccessor)(nil).WatchControllerAPIAddresses), arg0)
	return &MockAPIAddressAccessorWatchControllerAPIAddressesCall{Call: call}
}

// MockAPIAddressAccessorWatchControllerAPIAddressesCall wrap *gomock.Call
type MockAPIAddressAccessorWatchControllerAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIAddressAccessorWatchControllerAPIAddressesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIAddressAccessorWatchControllerAPIAddressesCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIAddressAccessorWatchControllerAPIAddressesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockAPIAddressAccessorWatchControllerAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// CheckModelExists mocks base method.
func (m *MockModelService) CheckModelExists(arg0 context.Context, arg1 model.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckModelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckModelExists indicates an expected call of CheckModelExists.
func (mr *MockModelServiceMockRecorder) CheckModelExists(arg0, arg1 any) *MockModelServiceCheckModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckModelExists", reflect.TypeOf((*MockModelService)(nil).CheckModelExists), arg0, arg1)
	return &MockModelServiceCheckModelExistsCall{Call: call}
}

// MockModelServiceCheckModelExistsCall wrap *gomock.Call
type MockModelServiceCheckModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceCheckModelExistsCall) Return(arg0 bool, arg1 error) *MockModelServiceCheckModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceCheckModelExistsCall) Do(f func(context.Context, model.UUID) (bool, error)) *MockModelServiceCheckModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceCheckModelExistsCall) DoAndReturn(f func(context.Context, model.UUID) (bool, error)) *MockModelServiceCheckModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
