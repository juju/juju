// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common/networkingcommon (interfaces: BackingSpace,BackingSubnet)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	networkingcommon "github.com/juju/juju/apiserver/common/networkingcommon"
	life "github.com/juju/juju/core/life"
	network "github.com/juju/juju/core/network"
	txn "gopkg.in/mgo.v2/txn"
	reflect "reflect"
)

// MockBackingSpace is a mock of BackingSpace interface
type MockBackingSpace struct {
	ctrl     *gomock.Controller
	recorder *MockBackingSpaceMockRecorder
}

// MockBackingSpaceMockRecorder is the mock recorder for MockBackingSpace
type MockBackingSpaceMockRecorder struct {
	mock *MockBackingSpace
}

// NewMockBackingSpace creates a new mock instance
func NewMockBackingSpace(ctrl *gomock.Controller) *MockBackingSpace {
	mock := &MockBackingSpace{ctrl: ctrl}
	mock.recorder = &MockBackingSpaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackingSpace) EXPECT() *MockBackingSpaceMockRecorder {
	return m.recorder
}

// Id mocks base method
func (m *MockBackingSpace) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockBackingSpaceMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockBackingSpace)(nil).Id))
}

// Name mocks base method
func (m *MockBackingSpace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockBackingSpaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBackingSpace)(nil).Name))
}

// ProviderId mocks base method
func (m *MockBackingSpace) ProviderId() network.Id {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderId")
	ret0, _ := ret[0].(network.Id)
	return ret0
}

// ProviderId indicates an expected call of ProviderId
func (mr *MockBackingSpaceMockRecorder) ProviderId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderId", reflect.TypeOf((*MockBackingSpace)(nil).ProviderId))
}

// Subnets mocks base method
func (m *MockBackingSpace) Subnets() ([]networkingcommon.BackingSubnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets")
	ret0, _ := ret[0].([]networkingcommon.BackingSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnets indicates an expected call of Subnets
func (mr *MockBackingSpaceMockRecorder) Subnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockBackingSpace)(nil).Subnets))
}

// MockBackingSubnet is a mock of BackingSubnet interface
type MockBackingSubnet struct {
	ctrl     *gomock.Controller
	recorder *MockBackingSubnetMockRecorder
}

// MockBackingSubnetMockRecorder is the mock recorder for MockBackingSubnet
type MockBackingSubnetMockRecorder struct {
	mock *MockBackingSubnet
}

// NewMockBackingSubnet creates a new mock instance
func NewMockBackingSubnet(ctrl *gomock.Controller) *MockBackingSubnet {
	mock := &MockBackingSubnet{ctrl: ctrl}
	mock.recorder = &MockBackingSubnetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackingSubnet) EXPECT() *MockBackingSubnetMockRecorder {
	return m.recorder
}

// AvailabilityZones mocks base method
func (m *MockBackingSubnet) AvailabilityZones() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZones")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AvailabilityZones indicates an expected call of AvailabilityZones
func (mr *MockBackingSubnetMockRecorder) AvailabilityZones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZones", reflect.TypeOf((*MockBackingSubnet)(nil).AvailabilityZones))
}

// CIDR mocks base method
func (m *MockBackingSubnet) CIDR() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CIDR")
	ret0, _ := ret[0].(string)
	return ret0
}

// CIDR indicates an expected call of CIDR
func (mr *MockBackingSubnetMockRecorder) CIDR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CIDR", reflect.TypeOf((*MockBackingSubnet)(nil).CIDR))
}

// ID mocks base method
func (m *MockBackingSubnet) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockBackingSubnetMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBackingSubnet)(nil).ID))
}

// Life mocks base method
func (m *MockBackingSubnet) Life() life.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(life.Value)
	return ret0
}

// Life indicates an expected call of Life
func (mr *MockBackingSubnetMockRecorder) Life() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockBackingSubnet)(nil).Life))
}

// ProviderId mocks base method
func (m *MockBackingSubnet) ProviderId() network.Id {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderId")
	ret0, _ := ret[0].(network.Id)
	return ret0
}

// ProviderId indicates an expected call of ProviderId
func (mr *MockBackingSubnetMockRecorder) ProviderId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderId", reflect.TypeOf((*MockBackingSubnet)(nil).ProviderId))
}

// ProviderNetworkId mocks base method
func (m *MockBackingSubnet) ProviderNetworkId() network.Id {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderNetworkId")
	ret0, _ := ret[0].(network.Id)
	return ret0
}

// ProviderNetworkId indicates an expected call of ProviderNetworkId
func (mr *MockBackingSubnetMockRecorder) ProviderNetworkId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderNetworkId", reflect.TypeOf((*MockBackingSubnet)(nil).ProviderNetworkId))
}

// Refresh mocks base method
func (m *MockBackingSubnet) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockBackingSubnetMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockBackingSubnet)(nil).Refresh))
}

// SpaceID mocks base method
func (m *MockBackingSubnet) SpaceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SpaceID indicates an expected call of SpaceID
func (mr *MockBackingSubnetMockRecorder) SpaceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceID", reflect.TypeOf((*MockBackingSubnet)(nil).SpaceID))
}

// SpaceName mocks base method
func (m *MockBackingSubnet) SpaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SpaceName indicates an expected call of SpaceName
func (mr *MockBackingSubnetMockRecorder) SpaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceName", reflect.TypeOf((*MockBackingSubnet)(nil).SpaceName))
}

// Status mocks base method
func (m *MockBackingSubnet) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockBackingSubnetMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockBackingSubnet)(nil).Status))
}

// UpdateOps mocks base method
func (m *MockBackingSubnet) UpdateOps(arg0 network.SubnetInfo) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOps indicates an expected call of UpdateOps
func (mr *MockBackingSubnetMockRecorder) UpdateOps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOps", reflect.TypeOf((*MockBackingSubnet)(nil).UpdateOps), arg0)
}

// VLANTag mocks base method
func (m *MockBackingSubnet) VLANTag() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VLANTag")
	ret0, _ := ret[0].(int)
	return ret0
}

// VLANTag indicates an expected call of VLANTag
func (mr *MockBackingSubnetMockRecorder) VLANTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VLANTag", reflect.TypeOf((*MockBackingSubnet)(nil).VLANTag))
}
