// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common/networkingcommon (interfaces: LinkLayerDevice,LinkLayerAddress,LinkLayerMachine,LinkLayerState,LinkLayerAndSubnetsState,NetworkService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/package_mock.go github.com/juju/juju/apiserver/common/networkingcommon LinkLayerDevice,LinkLayerAddress,LinkLayerMachine,LinkLayerState,LinkLayerAndSubnetsState,NetworkService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	networkingcommon "github.com/juju/juju/apiserver/common/networkingcommon"
	network "github.com/juju/juju/core/network"
	state "github.com/juju/juju/state"
	txn "github.com/juju/mgo/v3/txn"
	gomock "go.uber.org/mock/gomock"
)

// MockLinkLayerDevice is a mock of LinkLayerDevice interface.
type MockLinkLayerDevice struct {
	ctrl     *gomock.Controller
	recorder *MockLinkLayerDeviceMockRecorder
}

// MockLinkLayerDeviceMockRecorder is the mock recorder for MockLinkLayerDevice.
type MockLinkLayerDeviceMockRecorder struct {
	mock *MockLinkLayerDevice
}

// NewMockLinkLayerDevice creates a new mock instance.
func NewMockLinkLayerDevice(ctrl *gomock.Controller) *MockLinkLayerDevice {
	mock := &MockLinkLayerDevice{ctrl: ctrl}
	mock.recorder = &MockLinkLayerDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkLayerDevice) EXPECT() *MockLinkLayerDeviceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinkLayerDevice) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddAddressOps mocks base method.
func (m *MockLinkLayerDevice) AddAddressOps(arg0 state.LinkLayerDeviceAddress) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddressOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddressOps indicates an expected call of AddAddressOps.
func (mr *MockLinkLayerDeviceMockRecorder) AddAddressOps(arg0 any) *MockLinkLayerDeviceAddAddressOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressOps", reflect.TypeOf((*MockLinkLayerDevice)(nil).AddAddressOps), arg0)
	return &MockLinkLayerDeviceAddAddressOpsCall{Call: call}
}

// MockLinkLayerDeviceAddAddressOpsCall wrap *gomock.Call
type MockLinkLayerDeviceAddAddressOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceAddAddressOpsCall) Return(arg0 []txn.Op, arg1 error) *MockLinkLayerDeviceAddAddressOpsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceAddAddressOpsCall) Do(f func(state.LinkLayerDeviceAddress) ([]txn.Op, error)) *MockLinkLayerDeviceAddAddressOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceAddAddressOpsCall) DoAndReturn(f func(state.LinkLayerDeviceAddress) ([]txn.Op, error)) *MockLinkLayerDeviceAddAddressOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MACAddress mocks base method.
func (m *MockLinkLayerDevice) MACAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MACAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// MACAddress indicates an expected call of MACAddress.
func (mr *MockLinkLayerDeviceMockRecorder) MACAddress() *MockLinkLayerDeviceMACAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MACAddress", reflect.TypeOf((*MockLinkLayerDevice)(nil).MACAddress))
	return &MockLinkLayerDeviceMACAddressCall{Call: call}
}

// MockLinkLayerDeviceMACAddressCall wrap *gomock.Call
type MockLinkLayerDeviceMACAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceMACAddressCall) Return(arg0 string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceMACAddressCall) Do(f func() string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceMACAddressCall) DoAndReturn(f func() string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockLinkLayerDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLinkLayerDeviceMockRecorder) Name() *MockLinkLayerDeviceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLinkLayerDevice)(nil).Name))
	return &MockLinkLayerDeviceNameCall{Call: call}
}

// MockLinkLayerDeviceNameCall wrap *gomock.Call
type MockLinkLayerDeviceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceNameCall) Return(arg0 string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceNameCall) Do(f func() string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceNameCall) DoAndReturn(f func() string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderID mocks base method.
func (m *MockLinkLayerDevice) ProviderID() network.Id {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderID")
	ret0, _ := ret[0].(network.Id)
	return ret0
}

// ProviderID indicates an expected call of ProviderID.
func (mr *MockLinkLayerDeviceMockRecorder) ProviderID() *MockLinkLayerDeviceProviderIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderID", reflect.TypeOf((*MockLinkLayerDevice)(nil).ProviderID))
	return &MockLinkLayerDeviceProviderIDCall{Call: call}
}

// MockLinkLayerDeviceProviderIDCall wrap *gomock.Call
type MockLinkLayerDeviceProviderIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceProviderIDCall) Return(arg0 network.Id) *MockLinkLayerDeviceProviderIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceProviderIDCall) Do(f func() network.Id) *MockLinkLayerDeviceProviderIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceProviderIDCall) DoAndReturn(f func() network.Id) *MockLinkLayerDeviceProviderIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveOps mocks base method.
func (m *MockLinkLayerDevice) RemoveOps() []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOps")
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// RemoveOps indicates an expected call of RemoveOps.
func (mr *MockLinkLayerDeviceMockRecorder) RemoveOps() *MockLinkLayerDeviceRemoveOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOps", reflect.TypeOf((*MockLinkLayerDevice)(nil).RemoveOps))
	return &MockLinkLayerDeviceRemoveOpsCall{Call: call}
}

// MockLinkLayerDeviceRemoveOpsCall wrap *gomock.Call
type MockLinkLayerDeviceRemoveOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceRemoveOpsCall) Return(arg0 []txn.Op) *MockLinkLayerDeviceRemoveOpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceRemoveOpsCall) Do(f func() []txn.Op) *MockLinkLayerDeviceRemoveOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceRemoveOpsCall) DoAndReturn(f func() []txn.Op) *MockLinkLayerDeviceRemoveOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetProviderIDOps mocks base method.
func (m *MockLinkLayerDevice) SetProviderIDOps(arg0 network.Id) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderIDOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProviderIDOps indicates an expected call of SetProviderIDOps.
func (mr *MockLinkLayerDeviceMockRecorder) SetProviderIDOps(arg0 any) *MockLinkLayerDeviceSetProviderIDOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderIDOps", reflect.TypeOf((*MockLinkLayerDevice)(nil).SetProviderIDOps), arg0)
	return &MockLinkLayerDeviceSetProviderIDOpsCall{Call: call}
}

// MockLinkLayerDeviceSetProviderIDOpsCall wrap *gomock.Call
type MockLinkLayerDeviceSetProviderIDOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceSetProviderIDOpsCall) Return(arg0 []txn.Op, arg1 error) *MockLinkLayerDeviceSetProviderIDOpsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceSetProviderIDOpsCall) Do(f func(network.Id) ([]txn.Op, error)) *MockLinkLayerDeviceSetProviderIDOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceSetProviderIDOpsCall) DoAndReturn(f func(network.Id) ([]txn.Op, error)) *MockLinkLayerDeviceSetProviderIDOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockLinkLayerDevice) Type() network.LinkLayerDeviceType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(network.LinkLayerDeviceType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockLinkLayerDeviceMockRecorder) Type() *MockLinkLayerDeviceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockLinkLayerDevice)(nil).Type))
	return &MockLinkLayerDeviceTypeCall{Call: call}
}

// MockLinkLayerDeviceTypeCall wrap *gomock.Call
type MockLinkLayerDeviceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceTypeCall) Return(arg0 network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceTypeCall) Do(f func() network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceTypeCall) DoAndReturn(f func() network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOps mocks base method.
func (m *MockLinkLayerDevice) UpdateOps(arg0 state.LinkLayerDeviceArgs) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// UpdateOps indicates an expected call of UpdateOps.
func (mr *MockLinkLayerDeviceMockRecorder) UpdateOps(arg0 any) *MockLinkLayerDeviceUpdateOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOps", reflect.TypeOf((*MockLinkLayerDevice)(nil).UpdateOps), arg0)
	return &MockLinkLayerDeviceUpdateOpsCall{Call: call}
}

// MockLinkLayerDeviceUpdateOpsCall wrap *gomock.Call
type MockLinkLayerDeviceUpdateOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceUpdateOpsCall) Return(arg0 []txn.Op) *MockLinkLayerDeviceUpdateOpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceUpdateOpsCall) Do(f func(state.LinkLayerDeviceArgs) []txn.Op) *MockLinkLayerDeviceUpdateOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceUpdateOpsCall) DoAndReturn(f func(state.LinkLayerDeviceArgs) []txn.Op) *MockLinkLayerDeviceUpdateOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLinkLayerAddress is a mock of LinkLayerAddress interface.
type MockLinkLayerAddress struct {
	ctrl     *gomock.Controller
	recorder *MockLinkLayerAddressMockRecorder
}

// MockLinkLayerAddressMockRecorder is the mock recorder for MockLinkLayerAddress.
type MockLinkLayerAddressMockRecorder struct {
	mock *MockLinkLayerAddress
}

// NewMockLinkLayerAddress creates a new mock instance.
func NewMockLinkLayerAddress(ctrl *gomock.Controller) *MockLinkLayerAddress {
	mock := &MockLinkLayerAddress{ctrl: ctrl}
	mock.recorder = &MockLinkLayerAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkLayerAddress) EXPECT() *MockLinkLayerAddressMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinkLayerAddress) ISGOMOCK() struct{} {
	return struct{}{}
}

// DeviceName mocks base method.
func (m *MockLinkLayerAddress) DeviceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DeviceName indicates an expected call of DeviceName.
func (mr *MockLinkLayerAddressMockRecorder) DeviceName() *MockLinkLayerAddressDeviceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceName", reflect.TypeOf((*MockLinkLayerAddress)(nil).DeviceName))
	return &MockLinkLayerAddressDeviceNameCall{Call: call}
}

// MockLinkLayerAddressDeviceNameCall wrap *gomock.Call
type MockLinkLayerAddressDeviceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressDeviceNameCall) Return(arg0 string) *MockLinkLayerAddressDeviceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressDeviceNameCall) Do(f func() string) *MockLinkLayerAddressDeviceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressDeviceNameCall) DoAndReturn(f func() string) *MockLinkLayerAddressDeviceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Origin mocks base method.
func (m *MockLinkLayerAddress) Origin() network.Origin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Origin")
	ret0, _ := ret[0].(network.Origin)
	return ret0
}

// Origin indicates an expected call of Origin.
func (mr *MockLinkLayerAddressMockRecorder) Origin() *MockLinkLayerAddressOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Origin", reflect.TypeOf((*MockLinkLayerAddress)(nil).Origin))
	return &MockLinkLayerAddressOriginCall{Call: call}
}

// MockLinkLayerAddressOriginCall wrap *gomock.Call
type MockLinkLayerAddressOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressOriginCall) Return(arg0 network.Origin) *MockLinkLayerAddressOriginCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressOriginCall) Do(f func() network.Origin) *MockLinkLayerAddressOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressOriginCall) DoAndReturn(f func() network.Origin) *MockLinkLayerAddressOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveOps mocks base method.
func (m *MockLinkLayerAddress) RemoveOps() []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOps")
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// RemoveOps indicates an expected call of RemoveOps.
func (mr *MockLinkLayerAddressMockRecorder) RemoveOps() *MockLinkLayerAddressRemoveOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOps", reflect.TypeOf((*MockLinkLayerAddress)(nil).RemoveOps))
	return &MockLinkLayerAddressRemoveOpsCall{Call: call}
}

// MockLinkLayerAddressRemoveOpsCall wrap *gomock.Call
type MockLinkLayerAddressRemoveOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressRemoveOpsCall) Return(arg0 []txn.Op) *MockLinkLayerAddressRemoveOpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressRemoveOpsCall) Do(f func() []txn.Op) *MockLinkLayerAddressRemoveOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressRemoveOpsCall) DoAndReturn(f func() []txn.Op) *MockLinkLayerAddressRemoveOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOriginOps mocks base method.
func (m *MockLinkLayerAddress) SetOriginOps(arg0 network.Origin) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOriginOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// SetOriginOps indicates an expected call of SetOriginOps.
func (mr *MockLinkLayerAddressMockRecorder) SetOriginOps(arg0 any) *MockLinkLayerAddressSetOriginOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOriginOps", reflect.TypeOf((*MockLinkLayerAddress)(nil).SetOriginOps), arg0)
	return &MockLinkLayerAddressSetOriginOpsCall{Call: call}
}

// MockLinkLayerAddressSetOriginOpsCall wrap *gomock.Call
type MockLinkLayerAddressSetOriginOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressSetOriginOpsCall) Return(arg0 []txn.Op) *MockLinkLayerAddressSetOriginOpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressSetOriginOpsCall) Do(f func(network.Origin) []txn.Op) *MockLinkLayerAddressSetOriginOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressSetOriginOpsCall) DoAndReturn(f func(network.Origin) []txn.Op) *MockLinkLayerAddressSetOriginOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetProviderIDOps mocks base method.
func (m *MockLinkLayerAddress) SetProviderIDOps(arg0 network.Id) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderIDOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProviderIDOps indicates an expected call of SetProviderIDOps.
func (mr *MockLinkLayerAddressMockRecorder) SetProviderIDOps(arg0 any) *MockLinkLayerAddressSetProviderIDOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderIDOps", reflect.TypeOf((*MockLinkLayerAddress)(nil).SetProviderIDOps), arg0)
	return &MockLinkLayerAddressSetProviderIDOpsCall{Call: call}
}

// MockLinkLayerAddressSetProviderIDOpsCall wrap *gomock.Call
type MockLinkLayerAddressSetProviderIDOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressSetProviderIDOpsCall) Return(arg0 []txn.Op, arg1 error) *MockLinkLayerAddressSetProviderIDOpsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressSetProviderIDOpsCall) Do(f func(network.Id) ([]txn.Op, error)) *MockLinkLayerAddressSetProviderIDOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressSetProviderIDOpsCall) DoAndReturn(f func(network.Id) ([]txn.Op, error)) *MockLinkLayerAddressSetProviderIDOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetProviderNetIDsOps mocks base method.
func (m *MockLinkLayerAddress) SetProviderNetIDsOps(arg0, arg1 network.Id) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderNetIDsOps", arg0, arg1)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// SetProviderNetIDsOps indicates an expected call of SetProviderNetIDsOps.
func (mr *MockLinkLayerAddressMockRecorder) SetProviderNetIDsOps(arg0, arg1 any) *MockLinkLayerAddressSetProviderNetIDsOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderNetIDsOps", reflect.TypeOf((*MockLinkLayerAddress)(nil).SetProviderNetIDsOps), arg0, arg1)
	return &MockLinkLayerAddressSetProviderNetIDsOpsCall{Call: call}
}

// MockLinkLayerAddressSetProviderNetIDsOpsCall wrap *gomock.Call
type MockLinkLayerAddressSetProviderNetIDsOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressSetProviderNetIDsOpsCall) Return(arg0 []txn.Op) *MockLinkLayerAddressSetProviderNetIDsOpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressSetProviderNetIDsOpsCall) Do(f func(network.Id, network.Id) []txn.Op) *MockLinkLayerAddressSetProviderNetIDsOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressSetProviderNetIDsOpsCall) DoAndReturn(f func(network.Id, network.Id) []txn.Op) *MockLinkLayerAddressSetProviderNetIDsOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOps mocks base method.
func (m *MockLinkLayerAddress) UpdateOps(arg0 state.LinkLayerDeviceAddress) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOps indicates an expected call of UpdateOps.
func (mr *MockLinkLayerAddressMockRecorder) UpdateOps(arg0 any) *MockLinkLayerAddressUpdateOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOps", reflect.TypeOf((*MockLinkLayerAddress)(nil).UpdateOps), arg0)
	return &MockLinkLayerAddressUpdateOpsCall{Call: call}
}

// MockLinkLayerAddressUpdateOpsCall wrap *gomock.Call
type MockLinkLayerAddressUpdateOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressUpdateOpsCall) Return(arg0 []txn.Op, arg1 error) *MockLinkLayerAddressUpdateOpsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressUpdateOpsCall) Do(f func(state.LinkLayerDeviceAddress) ([]txn.Op, error)) *MockLinkLayerAddressUpdateOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressUpdateOpsCall) DoAndReturn(f func(state.LinkLayerDeviceAddress) ([]txn.Op, error)) *MockLinkLayerAddressUpdateOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockLinkLayerAddress) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockLinkLayerAddressMockRecorder) Value() *MockLinkLayerAddressValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockLinkLayerAddress)(nil).Value))
	return &MockLinkLayerAddressValueCall{Call: call}
}

// MockLinkLayerAddressValueCall wrap *gomock.Call
type MockLinkLayerAddressValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAddressValueCall) Return(arg0 string) *MockLinkLayerAddressValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAddressValueCall) Do(f func() string) *MockLinkLayerAddressValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAddressValueCall) DoAndReturn(f func() string) *MockLinkLayerAddressValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLinkLayerMachine is a mock of LinkLayerMachine interface.
type MockLinkLayerMachine struct {
	ctrl     *gomock.Controller
	recorder *MockLinkLayerMachineMockRecorder
}

// MockLinkLayerMachineMockRecorder is the mock recorder for MockLinkLayerMachine.
type MockLinkLayerMachineMockRecorder struct {
	mock *MockLinkLayerMachine
}

// NewMockLinkLayerMachine creates a new mock instance.
func NewMockLinkLayerMachine(ctrl *gomock.Controller) *MockLinkLayerMachine {
	mock := &MockLinkLayerMachine{ctrl: ctrl}
	mock.recorder = &MockLinkLayerMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkLayerMachine) EXPECT() *MockLinkLayerMachineMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinkLayerMachine) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddLinkLayerDeviceOps mocks base method.
func (m *MockLinkLayerMachine) AddLinkLayerDeviceOps(arg0 state.LinkLayerDeviceArgs, arg1 ...state.LinkLayerDeviceAddress) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLinkLayerDeviceOps", varargs...)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLinkLayerDeviceOps indicates an expected call of AddLinkLayerDeviceOps.
func (mr *MockLinkLayerMachineMockRecorder) AddLinkLayerDeviceOps(arg0 any, arg1 ...any) *MockLinkLayerMachineAddLinkLayerDeviceOpsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinkLayerDeviceOps", reflect.TypeOf((*MockLinkLayerMachine)(nil).AddLinkLayerDeviceOps), varargs...)
	return &MockLinkLayerMachineAddLinkLayerDeviceOpsCall{Call: call}
}

// MockLinkLayerMachineAddLinkLayerDeviceOpsCall wrap *gomock.Call
type MockLinkLayerMachineAddLinkLayerDeviceOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerMachineAddLinkLayerDeviceOpsCall) Return(arg0 []txn.Op, arg1 error) *MockLinkLayerMachineAddLinkLayerDeviceOpsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerMachineAddLinkLayerDeviceOpsCall) Do(f func(state.LinkLayerDeviceArgs, ...state.LinkLayerDeviceAddress) ([]txn.Op, error)) *MockLinkLayerMachineAddLinkLayerDeviceOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerMachineAddLinkLayerDeviceOpsCall) DoAndReturn(f func(state.LinkLayerDeviceArgs, ...state.LinkLayerDeviceAddress) ([]txn.Op, error)) *MockLinkLayerMachineAddLinkLayerDeviceOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllDeviceAddresses mocks base method.
func (m *MockLinkLayerMachine) AllDeviceAddresses() ([]networkingcommon.LinkLayerAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDeviceAddresses")
	ret0, _ := ret[0].([]networkingcommon.LinkLayerAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllDeviceAddresses indicates an expected call of AllDeviceAddresses.
func (mr *MockLinkLayerMachineMockRecorder) AllDeviceAddresses() *MockLinkLayerMachineAllDeviceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDeviceAddresses", reflect.TypeOf((*MockLinkLayerMachine)(nil).AllDeviceAddresses))
	return &MockLinkLayerMachineAllDeviceAddressesCall{Call: call}
}

// MockLinkLayerMachineAllDeviceAddressesCall wrap *gomock.Call
type MockLinkLayerMachineAllDeviceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerMachineAllDeviceAddressesCall) Return(arg0 []networkingcommon.LinkLayerAddress, arg1 error) *MockLinkLayerMachineAllDeviceAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerMachineAllDeviceAddressesCall) Do(f func() ([]networkingcommon.LinkLayerAddress, error)) *MockLinkLayerMachineAllDeviceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerMachineAllDeviceAddressesCall) DoAndReturn(f func() ([]networkingcommon.LinkLayerAddress, error)) *MockLinkLayerMachineAllDeviceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllLinkLayerDevices mocks base method.
func (m *MockLinkLayerMachine) AllLinkLayerDevices() ([]networkingcommon.LinkLayerDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllLinkLayerDevices")
	ret0, _ := ret[0].([]networkingcommon.LinkLayerDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllLinkLayerDevices indicates an expected call of AllLinkLayerDevices.
func (mr *MockLinkLayerMachineMockRecorder) AllLinkLayerDevices() *MockLinkLayerMachineAllLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllLinkLayerDevices", reflect.TypeOf((*MockLinkLayerMachine)(nil).AllLinkLayerDevices))
	return &MockLinkLayerMachineAllLinkLayerDevicesCall{Call: call}
}

// MockLinkLayerMachineAllLinkLayerDevicesCall wrap *gomock.Call
type MockLinkLayerMachineAllLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerMachineAllLinkLayerDevicesCall) Return(arg0 []networkingcommon.LinkLayerDevice, arg1 error) *MockLinkLayerMachineAllLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerMachineAllLinkLayerDevicesCall) Do(f func() ([]networkingcommon.LinkLayerDevice, error)) *MockLinkLayerMachineAllLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerMachineAllLinkLayerDevicesCall) DoAndReturn(f func() ([]networkingcommon.LinkLayerDevice, error)) *MockLinkLayerMachineAllLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AssertAliveOp mocks base method.
func (m *MockLinkLayerMachine) AssertAliveOp() txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssertAliveOp")
	ret0, _ := ret[0].(txn.Op)
	return ret0
}

// AssertAliveOp indicates an expected call of AssertAliveOp.
func (mr *MockLinkLayerMachineMockRecorder) AssertAliveOp() *MockLinkLayerMachineAssertAliveOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssertAliveOp", reflect.TypeOf((*MockLinkLayerMachine)(nil).AssertAliveOp))
	return &MockLinkLayerMachineAssertAliveOpCall{Call: call}
}

// MockLinkLayerMachineAssertAliveOpCall wrap *gomock.Call
type MockLinkLayerMachineAssertAliveOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerMachineAssertAliveOpCall) Return(arg0 txn.Op) *MockLinkLayerMachineAssertAliveOpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerMachineAssertAliveOpCall) Do(f func() txn.Op) *MockLinkLayerMachineAssertAliveOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerMachineAssertAliveOpCall) DoAndReturn(f func() txn.Op) *MockLinkLayerMachineAssertAliveOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockLinkLayerMachine) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockLinkLayerMachineMockRecorder) Id() *MockLinkLayerMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockLinkLayerMachine)(nil).Id))
	return &MockLinkLayerMachineIdCall{Call: call}
}

// MockLinkLayerMachineIdCall wrap *gomock.Call
type MockLinkLayerMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerMachineIdCall) Return(arg0 string) *MockLinkLayerMachineIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerMachineIdCall) Do(f func() string) *MockLinkLayerMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerMachineIdCall) DoAndReturn(f func() string) *MockLinkLayerMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockLinkLayerMachine) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockLinkLayerMachineMockRecorder) ModelUUID() *MockLinkLayerMachineModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockLinkLayerMachine)(nil).ModelUUID))
	return &MockLinkLayerMachineModelUUIDCall{Call: call}
}

// MockLinkLayerMachineModelUUIDCall wrap *gomock.Call
type MockLinkLayerMachineModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerMachineModelUUIDCall) Return(arg0 string) *MockLinkLayerMachineModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerMachineModelUUIDCall) Do(f func() string) *MockLinkLayerMachineModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerMachineModelUUIDCall) DoAndReturn(f func() string) *MockLinkLayerMachineModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLinkLayerState is a mock of LinkLayerState interface.
type MockLinkLayerState struct {
	ctrl     *gomock.Controller
	recorder *MockLinkLayerStateMockRecorder
}

// MockLinkLayerStateMockRecorder is the mock recorder for MockLinkLayerState.
type MockLinkLayerStateMockRecorder struct {
	mock *MockLinkLayerState
}

// NewMockLinkLayerState creates a new mock instance.
func NewMockLinkLayerState(ctrl *gomock.Controller) *MockLinkLayerState {
	mock := &MockLinkLayerState{ctrl: ctrl}
	mock.recorder = &MockLinkLayerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkLayerState) EXPECT() *MockLinkLayerStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinkLayerState) ISGOMOCK() struct{} {
	return struct{}{}
}

// ApplyOperation mocks base method.
func (m *MockLinkLayerState) ApplyOperation(arg0 state.ModelOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockLinkLayerStateMockRecorder) ApplyOperation(arg0 any) *MockLinkLayerStateApplyOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockLinkLayerState)(nil).ApplyOperation), arg0)
	return &MockLinkLayerStateApplyOperationCall{Call: call}
}

// MockLinkLayerStateApplyOperationCall wrap *gomock.Call
type MockLinkLayerStateApplyOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerStateApplyOperationCall) Return(arg0 error) *MockLinkLayerStateApplyOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerStateApplyOperationCall) Do(f func(state.ModelOperation) error) *MockLinkLayerStateApplyOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerStateApplyOperationCall) DoAndReturn(f func(state.ModelOperation) error) *MockLinkLayerStateApplyOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockLinkLayerState) Machine(arg0 string) (networkingcommon.LinkLayerMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(networkingcommon.LinkLayerMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockLinkLayerStateMockRecorder) Machine(arg0 any) *MockLinkLayerStateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockLinkLayerState)(nil).Machine), arg0)
	return &MockLinkLayerStateMachineCall{Call: call}
}

// MockLinkLayerStateMachineCall wrap *gomock.Call
type MockLinkLayerStateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerStateMachineCall) Return(arg0 networkingcommon.LinkLayerMachine, arg1 error) *MockLinkLayerStateMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerStateMachineCall) Do(f func(string) (networkingcommon.LinkLayerMachine, error)) *MockLinkLayerStateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerStateMachineCall) DoAndReturn(f func(string) (networkingcommon.LinkLayerMachine, error)) *MockLinkLayerStateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLinkLayerAndSubnetsState is a mock of LinkLayerAndSubnetsState interface.
type MockLinkLayerAndSubnetsState struct {
	ctrl     *gomock.Controller
	recorder *MockLinkLayerAndSubnetsStateMockRecorder
}

// MockLinkLayerAndSubnetsStateMockRecorder is the mock recorder for MockLinkLayerAndSubnetsState.
type MockLinkLayerAndSubnetsStateMockRecorder struct {
	mock *MockLinkLayerAndSubnetsState
}

// NewMockLinkLayerAndSubnetsState creates a new mock instance.
func NewMockLinkLayerAndSubnetsState(ctrl *gomock.Controller) *MockLinkLayerAndSubnetsState {
	mock := &MockLinkLayerAndSubnetsState{ctrl: ctrl}
	mock.recorder = &MockLinkLayerAndSubnetsStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkLayerAndSubnetsState) EXPECT() *MockLinkLayerAndSubnetsStateMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinkLayerAndSubnetsState) ISGOMOCK() struct{} {
	return struct{}{}
}

// ApplyOperation mocks base method.
func (m *MockLinkLayerAndSubnetsState) ApplyOperation(arg0 state.ModelOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockLinkLayerAndSubnetsStateMockRecorder) ApplyOperation(arg0 any) *MockLinkLayerAndSubnetsStateApplyOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockLinkLayerAndSubnetsState)(nil).ApplyOperation), arg0)
	return &MockLinkLayerAndSubnetsStateApplyOperationCall{Call: call}
}

// MockLinkLayerAndSubnetsStateApplyOperationCall wrap *gomock.Call
type MockLinkLayerAndSubnetsStateApplyOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAndSubnetsStateApplyOperationCall) Return(arg0 error) *MockLinkLayerAndSubnetsStateApplyOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAndSubnetsStateApplyOperationCall) Do(f func(state.ModelOperation) error) *MockLinkLayerAndSubnetsStateApplyOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAndSubnetsStateApplyOperationCall) DoAndReturn(f func(state.ModelOperation) error) *MockLinkLayerAndSubnetsStateApplyOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockLinkLayerAndSubnetsState) Machine(arg0 string) (networkingcommon.LinkLayerMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(networkingcommon.LinkLayerMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockLinkLayerAndSubnetsStateMockRecorder) Machine(arg0 any) *MockLinkLayerAndSubnetsStateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockLinkLayerAndSubnetsState)(nil).Machine), arg0)
	return &MockLinkLayerAndSubnetsStateMachineCall{Call: call}
}

// MockLinkLayerAndSubnetsStateMachineCall wrap *gomock.Call
type MockLinkLayerAndSubnetsStateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerAndSubnetsStateMachineCall) Return(arg0 networkingcommon.LinkLayerMachine, arg1 error) *MockLinkLayerAndSubnetsStateMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerAndSubnetsStateMachineCall) Do(f func(string) (networkingcommon.LinkLayerMachine, error)) *MockLinkLayerAndSubnetsStateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerAndSubnetsStateMachineCall) DoAndReturn(f func(string) (networkingcommon.LinkLayerMachine, error)) *MockLinkLayerAndSubnetsStateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetworkService) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddSubnet mocks base method.
func (m *MockNetworkService) AddSubnet(arg0 context.Context, arg1 network.SubnetInfo) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0, arg1)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockNetworkServiceMockRecorder) AddSubnet(arg0, arg1 any) *MockNetworkServiceAddSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockNetworkService)(nil).AddSubnet), arg0, arg1)
	return &MockNetworkServiceAddSubnetCall{Call: call}
}

// MockNetworkServiceAddSubnetCall wrap *gomock.Call
type MockNetworkServiceAddSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceAddSubnetCall) Return(arg0 network.Id, arg1 error) *MockNetworkServiceAddSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceAddSubnetCall) Do(f func(context.Context, network.SubnetInfo) (network.Id, error)) *MockNetworkServiceAddSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceAddSubnetCall) DoAndReturn(f func(context.Context, network.SubnetInfo) (network.Id, error)) *MockNetworkServiceAddSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSubnets mocks base method.
func (m *MockNetworkService) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockNetworkServiceMockRecorder) GetAllSubnets(arg0 any) *MockNetworkServiceGetAllSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockNetworkService)(nil).GetAllSubnets), arg0)
	return &MockNetworkServiceGetAllSubnetsCall{Call: call}
}

// MockNetworkServiceGetAllSubnetsCall wrap *gomock.Call
type MockNetworkServiceGetAllSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSubnetsCall) Return(arg0 network.SubnetInfos, arg1 error) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSubnetsCall) Do(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSubnetsCall) DoAndReturn(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
