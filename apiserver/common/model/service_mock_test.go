// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common/model (interfaces: MachineService,ModelConfigService,StatusService,ModelInfoService)
//
// Generated by this command:
//
//	mockgen -typed -package model_test -destination service_mock_test.go github.com/juju/juju/apiserver/common/model MachineService,ModelConfigService,StatusService,ModelInfoService
//

// Package model_test is a generated GoMock package.
package model_test

import (
	context "context"
	reflect "reflect"

	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	model "github.com/juju/juju/domain/model"
	status "github.com/juju/juju/domain/status"
	config "github.com/juju/juju/environs/config"
	gomock "go.uber.org/mock/gomock"
)

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// AllMachineNames mocks base method.
func (m *MockMachineService) AllMachineNames(arg0 context.Context) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachineNames", arg0)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachineNames indicates an expected call of AllMachineNames.
func (mr *MockMachineServiceMockRecorder) AllMachineNames(arg0 any) *MockMachineServiceAllMachineNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachineNames", reflect.TypeOf((*MockMachineService)(nil).AllMachineNames), arg0)
	return &MockMachineServiceAllMachineNamesCall{Call: call}
}

// MockMachineServiceAllMachineNamesCall wrap *gomock.Call
type MockMachineServiceAllMachineNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceAllMachineNamesCall) Return(arg0 []machine.Name, arg1 error) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceAllMachineNamesCall) Do(f func(context.Context) ([]machine.Name, error)) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceAllMachineNamesCall) DoAndReturn(f func(context.Context) ([]machine.Name, error)) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HardwareCharacteristics mocks base method.
func (m *MockMachineService) HardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (*instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(*instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HardwareCharacteristics indicates an expected call of HardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) HardwareCharacteristics(arg0, arg1 any) *MockMachineServiceHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).HardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceHardwareCharacteristicsCall) Return(arg0 *instance.HardwareCharacteristics, arg1 error) *MockMachineServiceHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceIDAndName mocks base method.
func (m *MockMachineService) InstanceIDAndName(arg0 context.Context, arg1 machine.UUID) (instance.Id, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIDAndName", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InstanceIDAndName indicates an expected call of InstanceIDAndName.
func (mr *MockMachineServiceMockRecorder) InstanceIDAndName(arg0, arg1 any) *MockMachineServiceInstanceIDAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIDAndName", reflect.TypeOf((*MockMachineService)(nil).InstanceIDAndName), arg0, arg1)
	return &MockMachineServiceInstanceIDAndNameCall{Call: call}
}

// MockMachineServiceInstanceIDAndNameCall wrap *gomock.Call
type MockMachineServiceInstanceIDAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceInstanceIDAndNameCall) Return(arg0 instance.Id, arg1 string, arg2 error) *MockMachineServiceInstanceIDAndNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceInstanceIDAndNameCall) Do(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceInstanceIDAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceInstanceIDAndNameCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceInstanceIDAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineController mocks base method.
func (m *MockMachineService) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockMachineServiceMockRecorder) IsMachineController(arg0, arg1 any) *MockMachineServiceIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockMachineService)(nil).IsMachineController), arg0, arg1)
	return &MockMachineServiceIsMachineControllerCall{Call: call}
}

// MockMachineServiceIsMachineControllerCall wrap *gomock.Call
type MockMachineServiceIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockModelConfigService) Watch() (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch")
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockModelConfigServiceMockRecorder) Watch() *MockModelConfigServiceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockModelConfigService)(nil).Watch))
	return &MockModelConfigServiceWatchCall{Call: call}
}

// MockModelConfigServiceWatchCall wrap *gomock.Call
type MockModelConfigServiceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceWatchCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockModelConfigServiceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceWatchCall) Do(f func() (watcher.Watcher[[]string], error)) *MockModelConfigServiceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceWatchCall) DoAndReturn(f func() (watcher.Watcher[[]string], error)) *MockModelConfigServiceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetApplicationAndUnitModelStatuses mocks base method.
func (m *MockStatusService) GetApplicationAndUnitModelStatuses(arg0 context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitModelStatuses", arg0)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndUnitModelStatuses indicates an expected call of GetApplicationAndUnitModelStatuses.
func (mr *MockStatusServiceMockRecorder) GetApplicationAndUnitModelStatuses(arg0 any) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitModelStatuses", reflect.TypeOf((*MockStatusService)(nil).GetApplicationAndUnitModelStatuses), arg0)
	return &MockStatusServiceGetApplicationAndUnitModelStatusesCall{Call: call}
}

// MockStatusServiceGetApplicationAndUnitModelStatusesCall wrap *gomock.Call
type MockStatusServiceGetApplicationAndUnitModelStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetApplicationAndUnitModelStatusesCall) Return(arg0 map[string]int, arg1 error) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetApplicationAndUnitModelStatusesCall) Do(f func(context.Context) (map[string]int, error)) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetApplicationAndUnitModelStatusesCall) DoAndReturn(f func(context.Context) (map[string]int, error)) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelStatusInfo mocks base method.
func (m *MockStatusService) GetModelStatusInfo(arg0 context.Context) (status.ModelStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatusInfo", arg0)
	ret0, _ := ret[0].(status.ModelStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatusInfo indicates an expected call of GetModelStatusInfo.
func (mr *MockStatusServiceMockRecorder) GetModelStatusInfo(arg0 any) *MockStatusServiceGetModelStatusInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatusInfo", reflect.TypeOf((*MockStatusService)(nil).GetModelStatusInfo), arg0)
	return &MockStatusServiceGetModelStatusInfoCall{Call: call}
}

// MockStatusServiceGetModelStatusInfoCall wrap *gomock.Call
type MockStatusServiceGetModelStatusInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetModelStatusInfoCall) Return(arg0 status.ModelStatusInfo, arg1 error) *MockStatusServiceGetModelStatusInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetModelStatusInfoCall) Do(f func(context.Context) (status.ModelStatusInfo, error)) *MockStatusServiceGetModelStatusInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetModelStatusInfoCall) DoAndReturn(f func(context.Context) (status.ModelStatusInfo, error)) *MockStatusServiceGetModelStatusInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockModelInfoService) GetStatus(arg0 context.Context) (model.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0)
	ret0, _ := ret[0].(model.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockModelInfoServiceMockRecorder) GetStatus(arg0 any) *MockModelInfoServiceGetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockModelInfoService)(nil).GetStatus), arg0)
	return &MockModelInfoServiceGetStatusCall{Call: call}
}

// MockModelInfoServiceGetStatusCall wrap *gomock.Call
type MockModelInfoServiceGetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetStatusCall) Return(arg0 model.StatusInfo, arg1 error) *MockModelInfoServiceGetStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetStatusCall) Do(f func(context.Context) (model.StatusInfo, error)) *MockModelInfoServiceGetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetStatusCall) DoAndReturn(f func(context.Context) (model.StatusInfo, error)) *MockModelInfoServiceGetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
