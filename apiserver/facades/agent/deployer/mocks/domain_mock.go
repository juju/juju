// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/deployer (interfaces: ControllerConfigGetter,ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/domain_mock.go github.com/juju/juju/apiserver/facades/agent/deployer ControllerConfigGetter,ApplicationService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	leadership "github.com/juju/juju/core/leadership"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigGetter is a mock of ControllerConfigGetter interface.
type MockControllerConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigGetterMockRecorder
}

// MockControllerConfigGetterMockRecorder is the mock recorder for MockControllerConfigGetter.
type MockControllerConfigGetterMockRecorder struct {
	mock *MockControllerConfigGetter
}

// NewMockControllerConfigGetter creates a new mock instance.
func NewMockControllerConfigGetter(ctrl *gomock.Controller) *MockControllerConfigGetter {
	mock := &MockControllerConfigGetter{ctrl: ctrl}
	mock.recorder = &MockControllerConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigGetter) EXPECT() *MockControllerConfigGetterMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigGetter) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigGetterMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigGetterControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigGetter)(nil).ControllerConfig), arg0)
	return &MockControllerConfigGetterControllerConfigCall{Call: call}
}

// MockControllerConfigGetterControllerConfigCall wrap *gomock.Call
type MockControllerConfigGetterControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigGetterControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigGetterControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigGetterControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// RemoveUnit mocks base method.
func (m *MockApplicationService) RemoveUnit(arg0 context.Context, arg1 string, arg2 leadership.Revoker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUnit indicates an expected call of RemoveUnit.
func (mr *MockApplicationServiceMockRecorder) RemoveUnit(arg0, arg1, arg2 any) *MockApplicationServiceRemoveUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUnit", reflect.TypeOf((*MockApplicationService)(nil).RemoveUnit), arg0, arg1, arg2)
	return &MockApplicationServiceRemoveUnitCall{Call: call}
}

// MockApplicationServiceRemoveUnitCall wrap *gomock.Call
type MockApplicationServiceRemoveUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceRemoveUnitCall) Return(arg0 error) *MockApplicationServiceRemoveUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceRemoveUnitCall) Do(f func(context.Context, string, leadership.Revoker) error) *MockApplicationServiceRemoveUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceRemoveUnitCall) DoAndReturn(f func(context.Context, string, leadership.Revoker) error) *MockApplicationServiceRemoveUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
