// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/storageprovisioner (interfaces: ApplicationService,MachineService,StorageProvisioningService,BlockDeviceService)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner -destination service_mock_test.go github.com/juju/juju/apiserver/facades/agent/storageprovisioner ApplicationService,MachineService,StorageProvisioningService,BlockDeviceService
//

// Package storageprovisioner is a generated GoMock package.
package storageprovisioner

import (
	context "context"
	reflect "reflect"

	blockdevice "github.com/juju/juju/core/blockdevice"
	instance "github.com/juju/juju/core/instance"
	life "github.com/juju/juju/core/life"
	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	blockdevice0 "github.com/juju/juju/domain/blockdevice"
	life0 "github.com/juju/juju/domain/life"
	storageprovisioning "github.com/juju/juju/domain/storageprovisioning"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetApplicationLifeByName mocks base method.
func (m *MockApplicationService) GetApplicationLifeByName(arg0 context.Context, arg1 string) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLifeByName", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLifeByName indicates an expected call of GetApplicationLifeByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLifeByName(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLifeByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLifeByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Do(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeByNameCall) DoAndReturn(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetHardwareCharacteristics mocks base method.
func (m *MockMachineService) GetHardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (*instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(*instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockMachineServiceGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceGetHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceGetHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Return(arg0 *instance.HardwareCharacteristics, arg1 error) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceID mocks base method.
func (m *MockMachineService) GetInstanceID(arg0 context.Context, arg1 machine.UUID) (instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceID", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceID indicates an expected call of GetInstanceID.
func (mr *MockMachineServiceMockRecorder) GetInstanceID(arg0, arg1 any) *MockMachineServiceGetInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockMachineService)(nil).GetInstanceID), arg0, arg1)
	return &MockMachineServiceGetInstanceIDCall{Call: call}
}

// MockMachineServiceGetInstanceIDCall wrap *gomock.Call
type MockMachineServiceGetInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceIDCall) Return(arg0 instance.Id, arg1 error) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceIDCall) Do(f func(context.Context, machine.UUID) (instance.Id, error)) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceIDCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.Id, error)) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceIDAndName mocks base method.
func (m *MockMachineService) GetInstanceIDAndName(arg0 context.Context, arg1 machine.UUID) (instance.Id, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIDAndName", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceIDAndName indicates an expected call of GetInstanceIDAndName.
func (mr *MockMachineServiceMockRecorder) GetInstanceIDAndName(arg0, arg1 any) *MockMachineServiceGetInstanceIDAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIDAndName", reflect.TypeOf((*MockMachineService)(nil).GetInstanceIDAndName), arg0, arg1)
	return &MockMachineServiceGetInstanceIDAndNameCall{Call: call}
}

// MockMachineServiceGetInstanceIDAndNameCall wrap *gomock.Call
type MockMachineServiceGetInstanceIDAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceIDAndNameCall) Return(arg0 instance.Id, arg1 string, arg2 error) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceIDAndNameCall) Do(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceIDAndNameCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineLife mocks base method.
func (m *MockMachineService) GetMachineLife(arg0 context.Context, arg1 machine.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLife indicates an expected call of GetMachineLife.
func (mr *MockMachineServiceMockRecorder) GetMachineLife(arg0, arg1 any) *MockMachineServiceGetMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLife", reflect.TypeOf((*MockMachineService)(nil).GetMachineLife), arg0, arg1)
	return &MockMachineServiceGetMachineLifeCall{Call: call}
}

// MockMachineServiceGetMachineLifeCall wrap *gomock.Call
type MockMachineServiceGetMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineLifeCall) Return(arg0 life.Value, arg1 error) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineLifeCall) Do(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineLifeCall) DoAndReturn(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineCloudInstances mocks base method.
func (m *MockMachineService) WatchMachineCloudInstances(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineCloudInstances", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineCloudInstances indicates an expected call of WatchMachineCloudInstances.
func (mr *MockMachineServiceMockRecorder) WatchMachineCloudInstances(arg0, arg1 any) *MockMachineServiceWatchMachineCloudInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineCloudInstances", reflect.TypeOf((*MockMachineService)(nil).WatchMachineCloudInstances), arg0, arg1)
	return &MockMachineServiceWatchMachineCloudInstancesCall{Call: call}
}

// MockMachineServiceWatchMachineCloudInstancesCall wrap *gomock.Call
type MockMachineServiceWatchMachineCloudInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceWatchMachineCloudInstancesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockMachineServiceWatchMachineCloudInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceWatchMachineCloudInstancesCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockMachineServiceWatchMachineCloudInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceWatchMachineCloudInstancesCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockMachineServiceWatchMachineCloudInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageProvisioningService is a mock of StorageProvisioningService interface.
type MockStorageProvisioningService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProvisioningServiceMockRecorder
}

// MockStorageProvisioningServiceMockRecorder is the mock recorder for MockStorageProvisioningService.
type MockStorageProvisioningServiceMockRecorder struct {
	mock *MockStorageProvisioningService
}

// NewMockStorageProvisioningService creates a new mock instance.
func NewMockStorageProvisioningService(ctrl *gomock.Controller) *MockStorageProvisioningService {
	mock := &MockStorageProvisioningService{ctrl: ctrl}
	mock.recorder = &MockStorageProvisioningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProvisioningService) EXPECT() *MockStorageProvisioningServiceMockRecorder {
	return m.recorder
}

// CheckFilesystemForIDExists mocks base method.
func (m *MockStorageProvisioningService) CheckFilesystemForIDExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFilesystemForIDExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFilesystemForIDExists indicates an expected call of CheckFilesystemForIDExists.
func (mr *MockStorageProvisioningServiceMockRecorder) CheckFilesystemForIDExists(arg0, arg1 any) *MockStorageProvisioningServiceCheckFilesystemForIDExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFilesystemForIDExists", reflect.TypeOf((*MockStorageProvisioningService)(nil).CheckFilesystemForIDExists), arg0, arg1)
	return &MockStorageProvisioningServiceCheckFilesystemForIDExistsCall{Call: call}
}

// MockStorageProvisioningServiceCheckFilesystemForIDExistsCall wrap *gomock.Call
type MockStorageProvisioningServiceCheckFilesystemForIDExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceCheckFilesystemForIDExistsCall) Return(arg0 bool, arg1 error) *MockStorageProvisioningServiceCheckFilesystemForIDExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceCheckFilesystemForIDExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStorageProvisioningServiceCheckFilesystemForIDExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceCheckFilesystemForIDExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStorageProvisioningServiceCheckFilesystemForIDExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVolumeAttachmentPlan mocks base method.
func (m *MockStorageProvisioningService) CreateVolumeAttachmentPlan(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID, arg2 storageprovisioning.PlanDeviceType, arg3 map[string]string) (storageprovisioning.VolumeAttachmentPlanUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeAttachmentPlan", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentPlanUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeAttachmentPlan indicates an expected call of CreateVolumeAttachmentPlan.
func (mr *MockStorageProvisioningServiceMockRecorder) CreateVolumeAttachmentPlan(arg0, arg1, arg2, arg3 any) *MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeAttachmentPlan", reflect.TypeOf((*MockStorageProvisioningService)(nil).CreateVolumeAttachmentPlan), arg0, arg1, arg2, arg3)
	return &MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall{Call: call}
}

// MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall wrap *gomock.Call
type MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall) Return(arg0 storageprovisioning.VolumeAttachmentPlanUUID, arg1 error) *MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID, storageprovisioning.PlanDeviceType, map[string]string) (storageprovisioning.VolumeAttachmentPlanUUID, error)) *MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID, storageprovisioning.PlanDeviceType, map[string]string) (storageprovisioning.VolumeAttachmentPlanUUID, error)) *MockStorageProvisioningServiceCreateVolumeAttachmentPlanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockDeviceForVolumeAttachment mocks base method.
func (m *MockStorageProvisioningService) GetBlockDeviceForVolumeAttachment(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID) (blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDeviceForVolumeAttachment", arg0, arg1)
	ret0, _ := ret[0].(blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDeviceForVolumeAttachment indicates an expected call of GetBlockDeviceForVolumeAttachment.
func (mr *MockStorageProvisioningServiceMockRecorder) GetBlockDeviceForVolumeAttachment(arg0, arg1 any) *MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDeviceForVolumeAttachment", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetBlockDeviceForVolumeAttachment), arg0, arg1)
	return &MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall{Call: call}
}

// MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall wrap *gomock.Call
type MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall) Return(arg0 blockdevice.BlockDevice, arg1 error) *MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (blockdevice.BlockDevice, error)) *MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (blockdevice.BlockDevice, error)) *MockStorageProvisioningServiceGetBlockDeviceForVolumeAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentForMachine mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemAttachmentForMachine(arg0 context.Context, arg1 string, arg2 machine.UUID) (storageprovisioning.FilesystemAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentForMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentForMachine indicates an expected call of GetFilesystemAttachmentForMachine.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemAttachmentForMachine(arg0, arg1, arg2 any) *MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentForMachine", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemAttachmentForMachine), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall) Return(arg0 storageprovisioning.FilesystemAttachment, arg1 error) *MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall) Do(f func(context.Context, string, machine.UUID) (storageprovisioning.FilesystemAttachment, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall) DoAndReturn(f func(context.Context, string, machine.UUID) (storageprovisioning.FilesystemAttachment, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentForUnit mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemAttachmentForUnit(arg0 context.Context, arg1 string, arg2 unit.UUID) (storageprovisioning.FilesystemAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentForUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentForUnit indicates an expected call of GetFilesystemAttachmentForUnit.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemAttachmentForUnit(arg0, arg1, arg2 any) *MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentForUnit", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemAttachmentForUnit), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall) Return(arg0 storageprovisioning.FilesystemAttachment, arg1 error) *MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall) Do(f func(context.Context, string, unit.UUID) (storageprovisioning.FilesystemAttachment, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall) DoAndReturn(f func(context.Context, string, unit.UUID) (storageprovisioning.FilesystemAttachment, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentIDs mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemAttachmentIDs(arg0 context.Context, arg1 []string) (map[string]storageprovisioning.FilesystemAttachmentID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentIDs", arg0, arg1)
	ret0, _ := ret[0].(map[string]storageprovisioning.FilesystemAttachmentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentIDs indicates an expected call of GetFilesystemAttachmentIDs.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemAttachmentIDs(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentIDs", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemAttachmentIDs), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall) Return(arg0 map[string]storageprovisioning.FilesystemAttachmentID, arg1 error) *MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall) Do(f func(context.Context, []string) (map[string]storageprovisioning.FilesystemAttachmentID, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall) DoAndReturn(f func(context.Context, []string) (map[string]storageprovisioning.FilesystemAttachmentID, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentLife mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemAttachmentLife(arg0 context.Context, arg1 storageprovisioning.FilesystemAttachmentUUID) (life0.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentLife", arg0, arg1)
	ret0, _ := ret[0].(life0.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentLife indicates an expected call of GetFilesystemAttachmentLife.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemAttachmentLife(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentLife", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemAttachmentLife), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall) Return(arg0 life0.Life, arg1 error) *MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall) Do(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentParams mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemAttachmentParams(arg0 context.Context, arg1 storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachmentParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachmentParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentParams indicates an expected call of GetFilesystemAttachmentParams.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemAttachmentParams(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentParams", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemAttachmentParams), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall) Return(arg0 storageprovisioning.FilesystemAttachmentParams, arg1 error) *MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall) Do(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachmentParams, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemAttachmentUUID) (storageprovisioning.FilesystemAttachmentParams, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentUUIDForFilesystemIDMachine mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemAttachmentUUIDForFilesystemIDMachine(arg0 context.Context, arg1 string, arg2 machine.UUID) (storageprovisioning.FilesystemAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentUUIDForFilesystemIDMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentUUIDForFilesystemIDMachine indicates an expected call of GetFilesystemAttachmentUUIDForFilesystemIDMachine.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemAttachmentUUIDForFilesystemIDMachine(arg0, arg1, arg2 any) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentUUIDForFilesystemIDMachine", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemAttachmentUUIDForFilesystemIDMachine), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall) Return(arg0 storageprovisioning.FilesystemAttachmentUUID, arg1 error) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall) Do(f func(context.Context, string, machine.UUID) (storageprovisioning.FilesystemAttachmentUUID, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall) DoAndReturn(f func(context.Context, string, machine.UUID) (storageprovisioning.FilesystemAttachmentUUID, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemAttachmentUUIDForFilesystemIDUnit mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemAttachmentUUIDForFilesystemIDUnit(arg0 context.Context, arg1 string, arg2 unit.UUID) (storageprovisioning.FilesystemAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemAttachmentUUIDForFilesystemIDUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.FilesystemAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemAttachmentUUIDForFilesystemIDUnit indicates an expected call of GetFilesystemAttachmentUUIDForFilesystemIDUnit.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemAttachmentUUIDForFilesystemIDUnit(arg0, arg1, arg2 any) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemAttachmentUUIDForFilesystemIDUnit", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemAttachmentUUIDForFilesystemIDUnit), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall) Return(arg0 storageprovisioning.FilesystemAttachmentUUID, arg1 error) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall) Do(f func(context.Context, string, unit.UUID) (storageprovisioning.FilesystemAttachmentUUID, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall) DoAndReturn(f func(context.Context, string, unit.UUID) (storageprovisioning.FilesystemAttachmentUUID, error)) *MockStorageProvisioningServiceGetFilesystemAttachmentUUIDForFilesystemIDUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemForID mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemForID(arg0 context.Context, arg1 string) (storageprovisioning.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemForID", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemForID indicates an expected call of GetFilesystemForID.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemForID(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemForIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemForID", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemForID), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemForIDCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemForIDCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemForIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemForIDCall) Return(arg0 storageprovisioning.Filesystem, arg1 error) *MockStorageProvisioningServiceGetFilesystemForIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemForIDCall) Do(f func(context.Context, string) (storageprovisioning.Filesystem, error)) *MockStorageProvisioningServiceGetFilesystemForIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemForIDCall) DoAndReturn(f func(context.Context, string) (storageprovisioning.Filesystem, error)) *MockStorageProvisioningServiceGetFilesystemForIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemLife mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemLife(arg0 context.Context, arg1 storageprovisioning.FilesystemUUID) (life0.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemLife", arg0, arg1)
	ret0, _ := ret[0].(life0.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemLife indicates an expected call of GetFilesystemLife.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemLife(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemLife", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemLife), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemLifeCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemLifeCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemLifeCall) Return(arg0 life0.Life, arg1 error) *MockStorageProvisioningServiceGetFilesystemLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemLifeCall) Do(f func(context.Context, storageprovisioning.FilesystemUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetFilesystemLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetFilesystemLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemParams mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemParams(arg0 context.Context, arg1 storageprovisioning.FilesystemUUID) (storageprovisioning.FilesystemParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.FilesystemParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemParams indicates an expected call of GetFilesystemParams.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemParams(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemParams", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemParams), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemParamsCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemParamsCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemParamsCall) Return(arg0 storageprovisioning.FilesystemParams, arg1 error) *MockStorageProvisioningServiceGetFilesystemParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemParamsCall) Do(f func(context.Context, storageprovisioning.FilesystemUUID) (storageprovisioning.FilesystemParams, error)) *MockStorageProvisioningServiceGetFilesystemParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.FilesystemUUID) (storageprovisioning.FilesystemParams, error)) *MockStorageProvisioningServiceGetFilesystemParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemUUIDForID mocks base method.
func (m *MockStorageProvisioningService) GetFilesystemUUIDForID(arg0 context.Context, arg1 string) (storageprovisioning.FilesystemUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemUUIDForID", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.FilesystemUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemUUIDForID indicates an expected call of GetFilesystemUUIDForID.
func (mr *MockStorageProvisioningServiceMockRecorder) GetFilesystemUUIDForID(arg0, arg1 any) *MockStorageProvisioningServiceGetFilesystemUUIDForIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemUUIDForID", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetFilesystemUUIDForID), arg0, arg1)
	return &MockStorageProvisioningServiceGetFilesystemUUIDForIDCall{Call: call}
}

// MockStorageProvisioningServiceGetFilesystemUUIDForIDCall wrap *gomock.Call
type MockStorageProvisioningServiceGetFilesystemUUIDForIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetFilesystemUUIDForIDCall) Return(arg0 storageprovisioning.FilesystemUUID, arg1 error) *MockStorageProvisioningServiceGetFilesystemUUIDForIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetFilesystemUUIDForIDCall) Do(f func(context.Context, string) (storageprovisioning.FilesystemUUID, error)) *MockStorageProvisioningServiceGetFilesystemUUIDForIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetFilesystemUUIDForIDCall) DoAndReturn(f func(context.Context, string) (storageprovisioning.FilesystemUUID, error)) *MockStorageProvisioningServiceGetFilesystemUUIDForIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageResourceTagsForModel mocks base method.
func (m *MockStorageProvisioningService) GetStorageResourceTagsForModel(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageResourceTagsForModel", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageResourceTagsForModel indicates an expected call of GetStorageResourceTagsForModel.
func (mr *MockStorageProvisioningServiceMockRecorder) GetStorageResourceTagsForModel(arg0 any) *MockStorageProvisioningServiceGetStorageResourceTagsForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageResourceTagsForModel", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetStorageResourceTagsForModel), arg0)
	return &MockStorageProvisioningServiceGetStorageResourceTagsForModelCall{Call: call}
}

// MockStorageProvisioningServiceGetStorageResourceTagsForModelCall wrap *gomock.Call
type MockStorageProvisioningServiceGetStorageResourceTagsForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetStorageResourceTagsForModelCall) Return(arg0 map[string]string, arg1 error) *MockStorageProvisioningServiceGetStorageResourceTagsForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetStorageResourceTagsForModelCall) Do(f func(context.Context) (map[string]string, error)) *MockStorageProvisioningServiceGetStorageResourceTagsForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetStorageResourceTagsForModelCall) DoAndReturn(f func(context.Context) (map[string]string, error)) *MockStorageProvisioningServiceGetStorageResourceTagsForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachment mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachment(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachment", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachment indicates an expected call of GetVolumeAttachment.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachment(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachment", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachment), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeAttachmentCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentCall) Return(arg0 storageprovisioning.VolumeAttachment, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachment, error)) *MockStorageProvisioningServiceGetVolumeAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachment, error)) *MockStorageProvisioningServiceGetVolumeAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentIDs mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachmentIDs(arg0 context.Context, arg1 []string) (map[string]storageprovisioning.VolumeAttachmentID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentIDs", arg0, arg1)
	ret0, _ := ret[0].(map[string]storageprovisioning.VolumeAttachmentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentIDs indicates an expected call of GetVolumeAttachmentIDs.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachmentIDs(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeAttachmentIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentIDs", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachmentIDs), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeAttachmentIDsCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentIDsCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentIDsCall) Return(arg0 map[string]storageprovisioning.VolumeAttachmentID, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentIDsCall) Do(f func(context.Context, []string) (map[string]storageprovisioning.VolumeAttachmentID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentIDsCall) DoAndReturn(f func(context.Context, []string) (map[string]storageprovisioning.VolumeAttachmentID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentLife mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachmentLife(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID) (life0.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentLife", arg0, arg1)
	ret0, _ := ret[0].(life0.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentLife indicates an expected call of GetVolumeAttachmentLife.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachmentLife(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeAttachmentLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentLife", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachmentLife), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeAttachmentLifeCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentLifeCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentLifeCall) Return(arg0 life0.Life, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentLifeCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetVolumeAttachmentLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetVolumeAttachmentLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentParams mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachmentParams(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachmentParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentParams indicates an expected call of GetVolumeAttachmentParams.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachmentParams(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeAttachmentParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentParams", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachmentParams), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeAttachmentParamsCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentParamsCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentParamsCall) Return(arg0 storageprovisioning.VolumeAttachmentParams, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentParamsCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachmentParams, error)) *MockStorageProvisioningServiceGetVolumeAttachmentParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID) (storageprovisioning.VolumeAttachmentParams, error)) *MockStorageProvisioningServiceGetVolumeAttachmentParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentPlan mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachmentPlan(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentPlanUUID) (storageprovisioning.VolumeAttachmentPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentPlan", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentPlan indicates an expected call of GetVolumeAttachmentPlan.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachmentPlan(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeAttachmentPlanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentPlan", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachmentPlan), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeAttachmentPlanCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentPlanCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentPlanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentPlanCall) Return(arg0 storageprovisioning.VolumeAttachmentPlan, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentPlanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentPlanCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentPlanUUID) (storageprovisioning.VolumeAttachmentPlan, error)) *MockStorageProvisioningServiceGetVolumeAttachmentPlanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentPlanCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentPlanUUID) (storageprovisioning.VolumeAttachmentPlan, error)) *MockStorageProvisioningServiceGetVolumeAttachmentPlanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentPlanUUIDForVolumeIDMachine mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachmentPlanUUIDForVolumeIDMachine(arg0 context.Context, arg1 string, arg2 machine.UUID) (storageprovisioning.VolumeAttachmentPlanUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentPlanUUIDForVolumeIDMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentPlanUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentPlanUUIDForVolumeIDMachine indicates an expected call of GetVolumeAttachmentPlanUUIDForVolumeIDMachine.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachmentPlanUUIDForVolumeIDMachine(arg0, arg1, arg2 any) *MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentPlanUUIDForVolumeIDMachine", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachmentPlanUUIDForVolumeIDMachine), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall) Return(arg0 storageprovisioning.VolumeAttachmentPlanUUID, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall) Do(f func(context.Context, string, machine.UUID) (storageprovisioning.VolumeAttachmentPlanUUID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall) DoAndReturn(f func(context.Context, string, machine.UUID) (storageprovisioning.VolumeAttachmentPlanUUID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentPlanUUIDForVolumeIDMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentUUIDForVolumeIDMachine mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachmentUUIDForVolumeIDMachine(arg0 context.Context, arg1 string, arg2 machine.UUID) (storageprovisioning.VolumeAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentUUIDForVolumeIDMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentUUIDForVolumeIDMachine indicates an expected call of GetVolumeAttachmentUUIDForVolumeIDMachine.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachmentUUIDForVolumeIDMachine(arg0, arg1, arg2 any) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentUUIDForVolumeIDMachine", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachmentUUIDForVolumeIDMachine), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall) Return(arg0 storageprovisioning.VolumeAttachmentUUID, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall) Do(f func(context.Context, string, machine.UUID) (storageprovisioning.VolumeAttachmentUUID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall) DoAndReturn(f func(context.Context, string, machine.UUID) (storageprovisioning.VolumeAttachmentUUID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeAttachmentUUIDForVolumeIDUnit mocks base method.
func (m *MockStorageProvisioningService) GetVolumeAttachmentUUIDForVolumeIDUnit(arg0 context.Context, arg1 string, arg2 unit.UUID) (storageprovisioning.VolumeAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachmentUUIDForVolumeIDUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.VolumeAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachmentUUIDForVolumeIDUnit indicates an expected call of GetVolumeAttachmentUUIDForVolumeIDUnit.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeAttachmentUUIDForVolumeIDUnit(arg0, arg1, arg2 any) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachmentUUIDForVolumeIDUnit", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeAttachmentUUIDForVolumeIDUnit), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall) Return(arg0 storageprovisioning.VolumeAttachmentUUID, arg1 error) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall) Do(f func(context.Context, string, unit.UUID) (storageprovisioning.VolumeAttachmentUUID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall) DoAndReturn(f func(context.Context, string, unit.UUID) (storageprovisioning.VolumeAttachmentUUID, error)) *MockStorageProvisioningServiceGetVolumeAttachmentUUIDForVolumeIDUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeByID mocks base method.
func (m *MockStorageProvisioningService) GetVolumeByID(arg0 context.Context, arg1 string) (storageprovisioning.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByID", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByID indicates an expected call of GetVolumeByID.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeByID(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByID", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeByID), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeByIDCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeByIDCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeByIDCall) Return(arg0 storageprovisioning.Volume, arg1 error) *MockStorageProvisioningServiceGetVolumeByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeByIDCall) Do(f func(context.Context, string) (storageprovisioning.Volume, error)) *MockStorageProvisioningServiceGetVolumeByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeByIDCall) DoAndReturn(f func(context.Context, string) (storageprovisioning.Volume, error)) *MockStorageProvisioningServiceGetVolumeByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeLife mocks base method.
func (m *MockStorageProvisioningService) GetVolumeLife(arg0 context.Context, arg1 storageprovisioning.VolumeUUID) (life0.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeLife", arg0, arg1)
	ret0, _ := ret[0].(life0.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeLife indicates an expected call of GetVolumeLife.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeLife(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeLife", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeLife), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeLifeCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeLifeCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeLifeCall) Return(arg0 life0.Life, arg1 error) *MockStorageProvisioningServiceGetVolumeLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeLifeCall) Do(f func(context.Context, storageprovisioning.VolumeUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetVolumeLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeLifeCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID) (life0.Life, error)) *MockStorageProvisioningServiceGetVolumeLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeParams mocks base method.
func (m *MockStorageProvisioningService) GetVolumeParams(arg0 context.Context, arg1 storageprovisioning.VolumeUUID) (storageprovisioning.VolumeParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeParams", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeParams indicates an expected call of GetVolumeParams.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeParams(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeParams", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeParams), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeParamsCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeParamsCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeParamsCall) Return(arg0 storageprovisioning.VolumeParams, arg1 error) *MockStorageProvisioningServiceGetVolumeParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeParamsCall) Do(f func(context.Context, storageprovisioning.VolumeUUID) (storageprovisioning.VolumeParams, error)) *MockStorageProvisioningServiceGetVolumeParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeParamsCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeUUID) (storageprovisioning.VolumeParams, error)) *MockStorageProvisioningServiceGetVolumeParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeUUIDForID mocks base method.
func (m *MockStorageProvisioningService) GetVolumeUUIDForID(arg0 context.Context, arg1 string) (storageprovisioning.VolumeUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeUUIDForID", arg0, arg1)
	ret0, _ := ret[0].(storageprovisioning.VolumeUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeUUIDForID indicates an expected call of GetVolumeUUIDForID.
func (mr *MockStorageProvisioningServiceMockRecorder) GetVolumeUUIDForID(arg0, arg1 any) *MockStorageProvisioningServiceGetVolumeUUIDForIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeUUIDForID", reflect.TypeOf((*MockStorageProvisioningService)(nil).GetVolumeUUIDForID), arg0, arg1)
	return &MockStorageProvisioningServiceGetVolumeUUIDForIDCall{Call: call}
}

// MockStorageProvisioningServiceGetVolumeUUIDForIDCall wrap *gomock.Call
type MockStorageProvisioningServiceGetVolumeUUIDForIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceGetVolumeUUIDForIDCall) Return(arg0 storageprovisioning.VolumeUUID, arg1 error) *MockStorageProvisioningServiceGetVolumeUUIDForIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceGetVolumeUUIDForIDCall) Do(f func(context.Context, string) (storageprovisioning.VolumeUUID, error)) *MockStorageProvisioningServiceGetVolumeUUIDForIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceGetVolumeUUIDForIDCall) DoAndReturn(f func(context.Context, string) (storageprovisioning.VolumeUUID, error)) *MockStorageProvisioningServiceGetVolumeUUIDForIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemAttachmentProvisionedInfoForMachine mocks base method.
func (m *MockStorageProvisioningService) SetFilesystemAttachmentProvisionedInfoForMachine(arg0 context.Context, arg1 string, arg2 machine.UUID, arg3 storageprovisioning.FilesystemAttachmentProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemAttachmentProvisionedInfoForMachine", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemAttachmentProvisionedInfoForMachine indicates an expected call of SetFilesystemAttachmentProvisionedInfoForMachine.
func (mr *MockStorageProvisioningServiceMockRecorder) SetFilesystemAttachmentProvisionedInfoForMachine(arg0, arg1, arg2, arg3 any) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemAttachmentProvisionedInfoForMachine", reflect.TypeOf((*MockStorageProvisioningService)(nil).SetFilesystemAttachmentProvisionedInfoForMachine), arg0, arg1, arg2, arg3)
	return &MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall{Call: call}
}

// MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall wrap *gomock.Call
type MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall) Return(arg0 error) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall) Do(f func(context.Context, string, machine.UUID, storageprovisioning.FilesystemAttachmentProvisionedInfo) error) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall) DoAndReturn(f func(context.Context, string, machine.UUID, storageprovisioning.FilesystemAttachmentProvisionedInfo) error) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemAttachmentProvisionedInfoForUnit mocks base method.
func (m *MockStorageProvisioningService) SetFilesystemAttachmentProvisionedInfoForUnit(arg0 context.Context, arg1 string, arg2 unit.UUID, arg3 storageprovisioning.FilesystemAttachmentProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemAttachmentProvisionedInfoForUnit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemAttachmentProvisionedInfoForUnit indicates an expected call of SetFilesystemAttachmentProvisionedInfoForUnit.
func (mr *MockStorageProvisioningServiceMockRecorder) SetFilesystemAttachmentProvisionedInfoForUnit(arg0, arg1, arg2, arg3 any) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemAttachmentProvisionedInfoForUnit", reflect.TypeOf((*MockStorageProvisioningService)(nil).SetFilesystemAttachmentProvisionedInfoForUnit), arg0, arg1, arg2, arg3)
	return &MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall{Call: call}
}

// MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall wrap *gomock.Call
type MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall) Return(arg0 error) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall) Do(f func(context.Context, string, unit.UUID, storageprovisioning.FilesystemAttachmentProvisionedInfo) error) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall) DoAndReturn(f func(context.Context, string, unit.UUID, storageprovisioning.FilesystemAttachmentProvisionedInfo) error) *MockStorageProvisioningServiceSetFilesystemAttachmentProvisionedInfoForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemProvisionedInfo mocks base method.
func (m *MockStorageProvisioningService) SetFilesystemProvisionedInfo(arg0 context.Context, arg1 string, arg2 storageprovisioning.FilesystemProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemProvisionedInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemProvisionedInfo indicates an expected call of SetFilesystemProvisionedInfo.
func (mr *MockStorageProvisioningServiceMockRecorder) SetFilesystemProvisionedInfo(arg0, arg1, arg2 any) *MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemProvisionedInfo", reflect.TypeOf((*MockStorageProvisioningService)(nil).SetFilesystemProvisionedInfo), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall{Call: call}
}

// MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall wrap *gomock.Call
type MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall) Return(arg0 error) *MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall) Do(f func(context.Context, string, storageprovisioning.FilesystemProvisionedInfo) error) *MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall) DoAndReturn(f func(context.Context, string, storageprovisioning.FilesystemProvisionedInfo) error) *MockStorageProvisioningServiceSetFilesystemProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeAttachmentPlanProvisionedBlockDevice mocks base method.
func (m *MockStorageProvisioningService) SetVolumeAttachmentPlanProvisionedBlockDevice(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentPlanUUID, arg2 blockdevice0.BlockDeviceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeAttachmentPlanProvisionedBlockDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeAttachmentPlanProvisionedBlockDevice indicates an expected call of SetVolumeAttachmentPlanProvisionedBlockDevice.
func (mr *MockStorageProvisioningServiceMockRecorder) SetVolumeAttachmentPlanProvisionedBlockDevice(arg0, arg1, arg2 any) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeAttachmentPlanProvisionedBlockDevice", reflect.TypeOf((*MockStorageProvisioningService)(nil).SetVolumeAttachmentPlanProvisionedBlockDevice), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall{Call: call}
}

// MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall wrap *gomock.Call
type MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall) Return(arg0 error) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentPlanUUID, blockdevice0.BlockDeviceUUID) error) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentPlanUUID, blockdevice0.BlockDeviceUUID) error) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeAttachmentPlanProvisionedInfo mocks base method.
func (m *MockStorageProvisioningService) SetVolumeAttachmentPlanProvisionedInfo(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentPlanUUID, arg2 storageprovisioning.VolumeAttachmentPlanProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeAttachmentPlanProvisionedInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeAttachmentPlanProvisionedInfo indicates an expected call of SetVolumeAttachmentPlanProvisionedInfo.
func (mr *MockStorageProvisioningServiceMockRecorder) SetVolumeAttachmentPlanProvisionedInfo(arg0, arg1, arg2 any) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeAttachmentPlanProvisionedInfo", reflect.TypeOf((*MockStorageProvisioningService)(nil).SetVolumeAttachmentPlanProvisionedInfo), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall{Call: call}
}

// MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall wrap *gomock.Call
type MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall) Return(arg0 error) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentPlanUUID, storageprovisioning.VolumeAttachmentPlanProvisionedInfo) error) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentPlanUUID, storageprovisioning.VolumeAttachmentPlanProvisionedInfo) error) *MockStorageProvisioningServiceSetVolumeAttachmentPlanProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeAttachmentProvisionedInfo mocks base method.
func (m *MockStorageProvisioningService) SetVolumeAttachmentProvisionedInfo(arg0 context.Context, arg1 storageprovisioning.VolumeAttachmentUUID, arg2 storageprovisioning.VolumeAttachmentProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeAttachmentProvisionedInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeAttachmentProvisionedInfo indicates an expected call of SetVolumeAttachmentProvisionedInfo.
func (mr *MockStorageProvisioningServiceMockRecorder) SetVolumeAttachmentProvisionedInfo(arg0, arg1, arg2 any) *MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeAttachmentProvisionedInfo", reflect.TypeOf((*MockStorageProvisioningService)(nil).SetVolumeAttachmentProvisionedInfo), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall{Call: call}
}

// MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall wrap *gomock.Call
type MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall) Return(arg0 error) *MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall) Do(f func(context.Context, storageprovisioning.VolumeAttachmentUUID, storageprovisioning.VolumeAttachmentProvisionedInfo) error) *MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall) DoAndReturn(f func(context.Context, storageprovisioning.VolumeAttachmentUUID, storageprovisioning.VolumeAttachmentProvisionedInfo) error) *MockStorageProvisioningServiceSetVolumeAttachmentProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeProvisionedInfo mocks base method.
func (m *MockStorageProvisioningService) SetVolumeProvisionedInfo(arg0 context.Context, arg1 string, arg2 storageprovisioning.VolumeProvisionedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeProvisionedInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeProvisionedInfo indicates an expected call of SetVolumeProvisionedInfo.
func (mr *MockStorageProvisioningServiceMockRecorder) SetVolumeProvisionedInfo(arg0, arg1, arg2 any) *MockStorageProvisioningServiceSetVolumeProvisionedInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeProvisionedInfo", reflect.TypeOf((*MockStorageProvisioningService)(nil).SetVolumeProvisionedInfo), arg0, arg1, arg2)
	return &MockStorageProvisioningServiceSetVolumeProvisionedInfoCall{Call: call}
}

// MockStorageProvisioningServiceSetVolumeProvisionedInfoCall wrap *gomock.Call
type MockStorageProvisioningServiceSetVolumeProvisionedInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceSetVolumeProvisionedInfoCall) Return(arg0 error) *MockStorageProvisioningServiceSetVolumeProvisionedInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceSetVolumeProvisionedInfoCall) Do(f func(context.Context, string, storageprovisioning.VolumeProvisionedInfo) error) *MockStorageProvisioningServiceSetVolumeProvisionedInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceSetVolumeProvisionedInfoCall) DoAndReturn(f func(context.Context, string, storageprovisioning.VolumeProvisionedInfo) error) *MockStorageProvisioningServiceSetVolumeProvisionedInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineProvisionedFilesystemAttachments mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedFilesystemAttachments(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedFilesystemAttachments", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedFilesystemAttachments indicates an expected call of WatchMachineProvisionedFilesystemAttachments.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedFilesystemAttachments(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedFilesystemAttachments", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedFilesystemAttachments), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineProvisionedFilesystems mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedFilesystems(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedFilesystems", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedFilesystems indicates an expected call of WatchMachineProvisionedFilesystems.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedFilesystems(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedFilesystems", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedFilesystems), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineProvisionedVolumeAttachments mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedVolumeAttachments(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedVolumeAttachments", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedVolumeAttachments indicates an expected call of WatchMachineProvisionedVolumeAttachments.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedVolumeAttachments(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedVolumeAttachments", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedVolumeAttachments), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineProvisionedVolumes mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedVolumes(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedVolumes", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedVolumes indicates an expected call of WatchMachineProvisionedVolumes.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedVolumes(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedVolumes", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedVolumes), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedFilesystemAttachments mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedFilesystemAttachments(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedFilesystemAttachments", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedFilesystemAttachments indicates an expected call of WatchModelProvisionedFilesystemAttachments.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedFilesystemAttachments(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedFilesystemAttachments", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedFilesystemAttachments), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedFilesystems mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedFilesystems(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedFilesystems", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedFilesystems indicates an expected call of WatchModelProvisionedFilesystems.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedFilesystems(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedFilesystems", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedFilesystems), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedVolumeAttachments mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedVolumeAttachments(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedVolumeAttachments", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedVolumeAttachments indicates an expected call of WatchModelProvisionedVolumeAttachments.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedVolumeAttachments(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedVolumeAttachments", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedVolumeAttachments), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedVolumes mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedVolumes(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedVolumes", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedVolumes indicates an expected call of WatchModelProvisionedVolumes.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedVolumes(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedVolumes", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedVolumes), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedVolumesCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedVolumesCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchVolumeAttachmentPlans mocks base method.
func (m *MockStorageProvisioningService) WatchVolumeAttachmentPlans(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchVolumeAttachmentPlans", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchVolumeAttachmentPlans indicates an expected call of WatchVolumeAttachmentPlans.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchVolumeAttachmentPlans(arg0, arg1 any) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVolumeAttachmentPlans", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchVolumeAttachmentPlans), arg0, arg1)
	return &MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall{Call: call}
}

// MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockDeviceService is a mock of BlockDeviceService interface.
type MockBlockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceServiceMockRecorder
}

// MockBlockDeviceServiceMockRecorder is the mock recorder for MockBlockDeviceService.
type MockBlockDeviceServiceMockRecorder struct {
	mock *MockBlockDeviceService
}

// NewMockBlockDeviceService creates a new mock instance.
func NewMockBlockDeviceService(ctrl *gomock.Controller) *MockBlockDeviceService {
	mock := &MockBlockDeviceService{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceService) EXPECT() *MockBlockDeviceServiceMockRecorder {
	return m.recorder
}

// GetBlockDevicesForMachine mocks base method.
func (m *MockBlockDeviceService) GetBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID) ([]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevicesForMachine", arg0, arg1)
	ret0, _ := ret[0].([]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDevicesForMachine indicates an expected call of GetBlockDevicesForMachine.
func (mr *MockBlockDeviceServiceMockRecorder) GetBlockDevicesForMachine(arg0, arg1 any) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevicesForMachine", reflect.TypeOf((*MockBlockDeviceService)(nil).GetBlockDevicesForMachine), arg0, arg1)
	return &MockBlockDeviceServiceGetBlockDevicesForMachineCall{Call: call}
}

// MockBlockDeviceServiceGetBlockDevicesForMachineCall wrap *gomock.Call
type MockBlockDeviceServiceGetBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Return(arg0 []blockdevice.BlockDevice, arg1 error) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchOrCreateBlockDevice mocks base method.
func (m *MockBlockDeviceService) MatchOrCreateBlockDevice(arg0 context.Context, arg1 machine.UUID, arg2 blockdevice.BlockDevice) (blockdevice0.BlockDeviceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchOrCreateBlockDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(blockdevice0.BlockDeviceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchOrCreateBlockDevice indicates an expected call of MatchOrCreateBlockDevice.
func (mr *MockBlockDeviceServiceMockRecorder) MatchOrCreateBlockDevice(arg0, arg1, arg2 any) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOrCreateBlockDevice", reflect.TypeOf((*MockBlockDeviceService)(nil).MatchOrCreateBlockDevice), arg0, arg1, arg2)
	return &MockBlockDeviceServiceMatchOrCreateBlockDeviceCall{Call: call}
}

// MockBlockDeviceServiceMatchOrCreateBlockDeviceCall wrap *gomock.Call
type MockBlockDeviceServiceMatchOrCreateBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall) Return(arg0 blockdevice0.BlockDeviceUUID, arg1 error) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall) Do(f func(context.Context, machine.UUID, blockdevice.BlockDevice) (blockdevice0.BlockDeviceUUID, error)) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall) DoAndReturn(f func(context.Context, machine.UUID, blockdevice.BlockDevice) (blockdevice0.BlockDeviceUUID, error)) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchBlockDevicesForMachine mocks base method.
func (m *MockBlockDeviceService) WatchBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchBlockDevicesForMachine", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchBlockDevicesForMachine indicates an expected call of WatchBlockDevicesForMachine.
func (mr *MockBlockDeviceServiceMockRecorder) WatchBlockDevicesForMachine(arg0, arg1 any) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchBlockDevicesForMachine", reflect.TypeOf((*MockBlockDeviceService)(nil).WatchBlockDevicesForMachine), arg0, arg1)
	return &MockBlockDeviceServiceWatchBlockDevicesForMachineCall{Call: call}
}

// MockBlockDeviceServiceWatchBlockDevicesForMachineCall wrap *gomock.Call
type MockBlockDeviceServiceWatchBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceWatchBlockDevicesForMachineCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceWatchBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceWatchBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
