// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/storageprovisioner (interfaces: BlockDeviceService)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner_test -destination blockdevice_mock_test.go github.com/juju/juju/apiserver/facades/agent/storageprovisioner BlockDeviceService
//

// Package storageprovisioner_test is a generated GoMock package.
package storageprovisioner_test

import (
	context "context"
	reflect "reflect"

	blockdevice "github.com/juju/juju/core/blockdevice"
	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	blockdevice0 "github.com/juju/juju/domain/blockdevice"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockDeviceService is a mock of BlockDeviceService interface.
type MockBlockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceServiceMockRecorder
}

// MockBlockDeviceServiceMockRecorder is the mock recorder for MockBlockDeviceService.
type MockBlockDeviceServiceMockRecorder struct {
	mock *MockBlockDeviceService
}

// NewMockBlockDeviceService creates a new mock instance.
func NewMockBlockDeviceService(ctrl *gomock.Controller) *MockBlockDeviceService {
	mock := &MockBlockDeviceService{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceService) EXPECT() *MockBlockDeviceServiceMockRecorder {
	return m.recorder
}

// GetBlockDevice mocks base method.
func (m *MockBlockDeviceService) GetBlockDevice(arg0 context.Context, arg1 blockdevice0.BlockDeviceUUID) (blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevice", arg0, arg1)
	ret0, _ := ret[0].(blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDevice indicates an expected call of GetBlockDevice.
func (mr *MockBlockDeviceServiceMockRecorder) GetBlockDevice(arg0, arg1 any) *MockBlockDeviceServiceGetBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevice", reflect.TypeOf((*MockBlockDeviceService)(nil).GetBlockDevice), arg0, arg1)
	return &MockBlockDeviceServiceGetBlockDeviceCall{Call: call}
}

// MockBlockDeviceServiceGetBlockDeviceCall wrap *gomock.Call
type MockBlockDeviceServiceGetBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceGetBlockDeviceCall) Return(arg0 blockdevice.BlockDevice, arg1 error) *MockBlockDeviceServiceGetBlockDeviceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceGetBlockDeviceCall) Do(f func(context.Context, blockdevice0.BlockDeviceUUID) (blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceGetBlockDeviceCall) DoAndReturn(f func(context.Context, blockdevice0.BlockDeviceUUID) (blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockDevicesForMachine mocks base method.
func (m *MockBlockDeviceService) GetBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID) ([]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevicesForMachine", arg0, arg1)
	ret0, _ := ret[0].([]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDevicesForMachine indicates an expected call of GetBlockDevicesForMachine.
func (mr *MockBlockDeviceServiceMockRecorder) GetBlockDevicesForMachine(arg0, arg1 any) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevicesForMachine", reflect.TypeOf((*MockBlockDeviceService)(nil).GetBlockDevicesForMachine), arg0, arg1)
	return &MockBlockDeviceServiceGetBlockDevicesForMachineCall{Call: call}
}

// MockBlockDeviceServiceGetBlockDevicesForMachineCall wrap *gomock.Call
type MockBlockDeviceServiceGetBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Return(arg0 []blockdevice.BlockDevice, arg1 error) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchOrCreateBlockDevice mocks base method.
func (m *MockBlockDeviceService) MatchOrCreateBlockDevice(arg0 context.Context, arg1 machine.UUID, arg2 blockdevice.BlockDevice) (blockdevice0.BlockDeviceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchOrCreateBlockDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(blockdevice0.BlockDeviceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchOrCreateBlockDevice indicates an expected call of MatchOrCreateBlockDevice.
func (mr *MockBlockDeviceServiceMockRecorder) MatchOrCreateBlockDevice(arg0, arg1, arg2 any) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOrCreateBlockDevice", reflect.TypeOf((*MockBlockDeviceService)(nil).MatchOrCreateBlockDevice), arg0, arg1, arg2)
	return &MockBlockDeviceServiceMatchOrCreateBlockDeviceCall{Call: call}
}

// MockBlockDeviceServiceMatchOrCreateBlockDeviceCall wrap *gomock.Call
type MockBlockDeviceServiceMatchOrCreateBlockDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall) Return(arg0 blockdevice0.BlockDeviceUUID, arg1 error) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall) Do(f func(context.Context, machine.UUID, blockdevice.BlockDevice) (blockdevice0.BlockDeviceUUID, error)) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall) DoAndReturn(f func(context.Context, machine.UUID, blockdevice.BlockDevice) (blockdevice0.BlockDeviceUUID, error)) *MockBlockDeviceServiceMatchOrCreateBlockDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchBlockDevicesForMachine mocks base method.
func (m *MockBlockDeviceService) WatchBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchBlockDevicesForMachine", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchBlockDevicesForMachine indicates an expected call of WatchBlockDevicesForMachine.
func (mr *MockBlockDeviceServiceMockRecorder) WatchBlockDevicesForMachine(arg0, arg1 any) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchBlockDevicesForMachine", reflect.TypeOf((*MockBlockDeviceService)(nil).WatchBlockDevicesForMachine), arg0, arg1)
	return &MockBlockDeviceServiceWatchBlockDevicesForMachineCall{Call: call}
}

// MockBlockDeviceServiceWatchBlockDevicesForMachineCall wrap *gomock.Call
type MockBlockDeviceServiceWatchBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceWatchBlockDevicesForMachineCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceWatchBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceWatchBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockBlockDeviceServiceWatchBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
