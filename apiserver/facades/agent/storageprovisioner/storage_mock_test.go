// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/storageprovisioner (interfaces: StorageBackend,Backend)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner -destination storage_mock_test.go github.com/juju/juju/apiserver/facades/agent/storageprovisioner StorageBackend,Backend
//

// Package storageprovisioner is a generated GoMock package.
package storageprovisioner

import (
	reflect "reflect"
	time "time"

	state "github.com/juju/juju/state"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageBackend is a mock of StorageBackend interface.
type MockStorageBackend struct {
	ctrl     *gomock.Controller
	recorder *MockStorageBackendMockRecorder
}

// MockStorageBackendMockRecorder is the mock recorder for MockStorageBackend.
type MockStorageBackendMockRecorder struct {
	mock *MockStorageBackend
}

// NewMockStorageBackend creates a new mock instance.
func NewMockStorageBackend(ctrl *gomock.Controller) *MockStorageBackend {
	mock := &MockStorageBackend{ctrl: ctrl}
	mock.recorder = &MockStorageBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageBackend) EXPECT() *MockStorageBackendMockRecorder {
	return m.recorder
}

// AllStorageInstances mocks base method.
func (m *MockStorageBackend) AllStorageInstances() ([]state.StorageInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllStorageInstances")
	ret0, _ := ret[0].([]state.StorageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllStorageInstances indicates an expected call of AllStorageInstances.
func (mr *MockStorageBackendMockRecorder) AllStorageInstances() *MockStorageBackendAllStorageInstancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllStorageInstances", reflect.TypeOf((*MockStorageBackend)(nil).AllStorageInstances))
	return &MockStorageBackendAllStorageInstancesCall{Call: call}
}

// MockStorageBackendAllStorageInstancesCall wrap *gomock.Call
type MockStorageBackendAllStorageInstancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendAllStorageInstancesCall) Return(arg0 []state.StorageInstance, arg1 error) *MockStorageBackendAllStorageInstancesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendAllStorageInstancesCall) Do(f func() ([]state.StorageInstance, error)) *MockStorageBackendAllStorageInstancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendAllStorageInstancesCall) DoAndReturn(f func() ([]state.StorageInstance, error)) *MockStorageBackendAllStorageInstancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVolumeAttachmentPlan mocks base method.
func (m *MockStorageBackend) CreateVolumeAttachmentPlan(arg0 names.Tag, arg1 names.VolumeTag, arg2 state.VolumeAttachmentPlanInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeAttachmentPlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVolumeAttachmentPlan indicates an expected call of CreateVolumeAttachmentPlan.
func (mr *MockStorageBackendMockRecorder) CreateVolumeAttachmentPlan(arg0, arg1, arg2 any) *MockStorageBackendCreateVolumeAttachmentPlanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeAttachmentPlan", reflect.TypeOf((*MockStorageBackend)(nil).CreateVolumeAttachmentPlan), arg0, arg1, arg2)
	return &MockStorageBackendCreateVolumeAttachmentPlanCall{Call: call}
}

// MockStorageBackendCreateVolumeAttachmentPlanCall wrap *gomock.Call
type MockStorageBackendCreateVolumeAttachmentPlanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendCreateVolumeAttachmentPlanCall) Return(arg0 error) *MockStorageBackendCreateVolumeAttachmentPlanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendCreateVolumeAttachmentPlanCall) Do(f func(names.Tag, names.VolumeTag, state.VolumeAttachmentPlanInfo) error) *MockStorageBackendCreateVolumeAttachmentPlanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendCreateVolumeAttachmentPlanCall) DoAndReturn(f func(names.Tag, names.VolumeTag, state.VolumeAttachmentPlanInfo) error) *MockStorageBackendCreateVolumeAttachmentPlanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyFilesystem mocks base method.
func (m *MockStorageBackend) DestroyFilesystem(arg0 names.FilesystemTag, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyFilesystem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyFilesystem indicates an expected call of DestroyFilesystem.
func (mr *MockStorageBackendMockRecorder) DestroyFilesystem(arg0, arg1 any) *MockStorageBackendDestroyFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyFilesystem", reflect.TypeOf((*MockStorageBackend)(nil).DestroyFilesystem), arg0, arg1)
	return &MockStorageBackendDestroyFilesystemCall{Call: call}
}

// MockStorageBackendDestroyFilesystemCall wrap *gomock.Call
type MockStorageBackendDestroyFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendDestroyFilesystemCall) Return(arg0 error) *MockStorageBackendDestroyFilesystemCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendDestroyFilesystemCall) Do(f func(names.FilesystemTag, bool) error) *MockStorageBackendDestroyFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendDestroyFilesystemCall) DoAndReturn(f func(names.FilesystemTag, bool) error) *MockStorageBackendDestroyFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyVolume mocks base method.
func (m *MockStorageBackend) DestroyVolume(arg0 names.VolumeTag, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyVolume indicates an expected call of DestroyVolume.
func (mr *MockStorageBackendMockRecorder) DestroyVolume(arg0, arg1 any) *MockStorageBackendDestroyVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyVolume", reflect.TypeOf((*MockStorageBackend)(nil).DestroyVolume), arg0, arg1)
	return &MockStorageBackendDestroyVolumeCall{Call: call}
}

// MockStorageBackendDestroyVolumeCall wrap *gomock.Call
type MockStorageBackendDestroyVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendDestroyVolumeCall) Return(arg0 error) *MockStorageBackendDestroyVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendDestroyVolumeCall) Do(f func(names.VolumeTag, bool) error) *MockStorageBackendDestroyVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendDestroyVolumeCall) DoAndReturn(f func(names.VolumeTag, bool) error) *MockStorageBackendDestroyVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachFilesystem mocks base method.
func (m *MockStorageBackend) DetachFilesystem(arg0 names.Tag, arg1 names.FilesystemTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFilesystem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachFilesystem indicates an expected call of DetachFilesystem.
func (mr *MockStorageBackendMockRecorder) DetachFilesystem(arg0, arg1 any) *MockStorageBackendDetachFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFilesystem", reflect.TypeOf((*MockStorageBackend)(nil).DetachFilesystem), arg0, arg1)
	return &MockStorageBackendDetachFilesystemCall{Call: call}
}

// MockStorageBackendDetachFilesystemCall wrap *gomock.Call
type MockStorageBackendDetachFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendDetachFilesystemCall) Return(arg0 error) *MockStorageBackendDetachFilesystemCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendDetachFilesystemCall) Do(f func(names.Tag, names.FilesystemTag) error) *MockStorageBackendDetachFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendDetachFilesystemCall) DoAndReturn(f func(names.Tag, names.FilesystemTag) error) *MockStorageBackendDetachFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachStorage mocks base method.
func (m *MockStorageBackend) DetachStorage(arg0 names.StorageTag, arg1 names.UnitTag, arg2 bool, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachStorage indicates an expected call of DetachStorage.
func (mr *MockStorageBackendMockRecorder) DetachStorage(arg0, arg1, arg2, arg3 any) *MockStorageBackendDetachStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorage", reflect.TypeOf((*MockStorageBackend)(nil).DetachStorage), arg0, arg1, arg2, arg3)
	return &MockStorageBackendDetachStorageCall{Call: call}
}

// MockStorageBackendDetachStorageCall wrap *gomock.Call
type MockStorageBackendDetachStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendDetachStorageCall) Return(arg0 error) *MockStorageBackendDetachStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendDetachStorageCall) Do(f func(names.StorageTag, names.UnitTag, bool, time.Duration) error) *MockStorageBackendDetachStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendDetachStorageCall) DoAndReturn(f func(names.StorageTag, names.UnitTag, bool, time.Duration) error) *MockStorageBackendDetachStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachVolume mocks base method.
func (m *MockStorageBackend) DetachVolume(arg0 names.Tag, arg1 names.VolumeTag, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockStorageBackendMockRecorder) DetachVolume(arg0, arg1, arg2 any) *MockStorageBackendDetachVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockStorageBackend)(nil).DetachVolume), arg0, arg1, arg2)
	return &MockStorageBackendDetachVolumeCall{Call: call}
}

// MockStorageBackendDetachVolumeCall wrap *gomock.Call
type MockStorageBackendDetachVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendDetachVolumeCall) Return(arg0 error) *MockStorageBackendDetachVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendDetachVolumeCall) Do(f func(names.Tag, names.VolumeTag, bool) error) *MockStorageBackendDetachVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendDetachVolumeCall) DoAndReturn(f func(names.Tag, names.VolumeTag, bool) error) *MockStorageBackendDetachVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filesystem mocks base method.
func (m *MockStorageBackend) Filesystem(arg0 names.FilesystemTag) (state.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filesystem", arg0)
	ret0, _ := ret[0].(state.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filesystem indicates an expected call of Filesystem.
func (mr *MockStorageBackendMockRecorder) Filesystem(arg0 any) *MockStorageBackendFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filesystem", reflect.TypeOf((*MockStorageBackend)(nil).Filesystem), arg0)
	return &MockStorageBackendFilesystemCall{Call: call}
}

// MockStorageBackendFilesystemCall wrap *gomock.Call
type MockStorageBackendFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendFilesystemCall) Return(arg0 state.Filesystem, arg1 error) *MockStorageBackendFilesystemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendFilesystemCall) Do(f func(names.FilesystemTag) (state.Filesystem, error)) *MockStorageBackendFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendFilesystemCall) DoAndReturn(f func(names.FilesystemTag) (state.Filesystem, error)) *MockStorageBackendFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilesystemAttachment mocks base method.
func (m *MockStorageBackend) FilesystemAttachment(arg0 names.Tag, arg1 names.FilesystemTag) (state.FilesystemAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesystemAttachment", arg0, arg1)
	ret0, _ := ret[0].(state.FilesystemAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesystemAttachment indicates an expected call of FilesystemAttachment.
func (mr *MockStorageBackendMockRecorder) FilesystemAttachment(arg0, arg1 any) *MockStorageBackendFilesystemAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesystemAttachment", reflect.TypeOf((*MockStorageBackend)(nil).FilesystemAttachment), arg0, arg1)
	return &MockStorageBackendFilesystemAttachmentCall{Call: call}
}

// MockStorageBackendFilesystemAttachmentCall wrap *gomock.Call
type MockStorageBackendFilesystemAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendFilesystemAttachmentCall) Return(arg0 state.FilesystemAttachment, arg1 error) *MockStorageBackendFilesystemAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendFilesystemAttachmentCall) Do(f func(names.Tag, names.FilesystemTag) (state.FilesystemAttachment, error)) *MockStorageBackendFilesystemAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendFilesystemAttachmentCall) DoAndReturn(f func(names.Tag, names.FilesystemTag) (state.FilesystemAttachment, error)) *MockStorageBackendFilesystemAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseStorageInstance mocks base method.
func (m *MockStorageBackend) ReleaseStorageInstance(arg0 names.StorageTag, arg1, arg2 bool, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseStorageInstance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseStorageInstance indicates an expected call of ReleaseStorageInstance.
func (mr *MockStorageBackendMockRecorder) ReleaseStorageInstance(arg0, arg1, arg2, arg3 any) *MockStorageBackendReleaseStorageInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseStorageInstance", reflect.TypeOf((*MockStorageBackend)(nil).ReleaseStorageInstance), arg0, arg1, arg2, arg3)
	return &MockStorageBackendReleaseStorageInstanceCall{Call: call}
}

// MockStorageBackendReleaseStorageInstanceCall wrap *gomock.Call
type MockStorageBackendReleaseStorageInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendReleaseStorageInstanceCall) Return(arg0 error) *MockStorageBackendReleaseStorageInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendReleaseStorageInstanceCall) Do(f func(names.StorageTag, bool, bool, time.Duration) error) *MockStorageBackendReleaseStorageInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendReleaseStorageInstanceCall) DoAndReturn(f func(names.StorageTag, bool, bool, time.Duration) error) *MockStorageBackendReleaseStorageInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveFilesystem mocks base method.
func (m *MockStorageBackend) RemoveFilesystem(arg0 names.FilesystemTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilesystem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilesystem indicates an expected call of RemoveFilesystem.
func (mr *MockStorageBackendMockRecorder) RemoveFilesystem(arg0 any) *MockStorageBackendRemoveFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilesystem", reflect.TypeOf((*MockStorageBackend)(nil).RemoveFilesystem), arg0)
	return &MockStorageBackendRemoveFilesystemCall{Call: call}
}

// MockStorageBackendRemoveFilesystemCall wrap *gomock.Call
type MockStorageBackendRemoveFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendRemoveFilesystemCall) Return(arg0 error) *MockStorageBackendRemoveFilesystemCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendRemoveFilesystemCall) Do(f func(names.FilesystemTag) error) *MockStorageBackendRemoveFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendRemoveFilesystemCall) DoAndReturn(f func(names.FilesystemTag) error) *MockStorageBackendRemoveFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveFilesystemAttachment mocks base method.
func (m *MockStorageBackend) RemoveFilesystemAttachment(arg0 names.Tag, arg1 names.FilesystemTag, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilesystemAttachment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilesystemAttachment indicates an expected call of RemoveFilesystemAttachment.
func (mr *MockStorageBackendMockRecorder) RemoveFilesystemAttachment(arg0, arg1, arg2 any) *MockStorageBackendRemoveFilesystemAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilesystemAttachment", reflect.TypeOf((*MockStorageBackend)(nil).RemoveFilesystemAttachment), arg0, arg1, arg2)
	return &MockStorageBackendRemoveFilesystemAttachmentCall{Call: call}
}

// MockStorageBackendRemoveFilesystemAttachmentCall wrap *gomock.Call
type MockStorageBackendRemoveFilesystemAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendRemoveFilesystemAttachmentCall) Return(arg0 error) *MockStorageBackendRemoveFilesystemAttachmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendRemoveFilesystemAttachmentCall) Do(f func(names.Tag, names.FilesystemTag, bool) error) *MockStorageBackendRemoveFilesystemAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendRemoveFilesystemAttachmentCall) DoAndReturn(f func(names.Tag, names.FilesystemTag, bool) error) *MockStorageBackendRemoveFilesystemAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveVolume mocks base method.
func (m *MockStorageBackend) RemoveVolume(arg0 names.VolumeTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume.
func (mr *MockStorageBackendMockRecorder) RemoveVolume(arg0 any) *MockStorageBackendRemoveVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockStorageBackend)(nil).RemoveVolume), arg0)
	return &MockStorageBackendRemoveVolumeCall{Call: call}
}

// MockStorageBackendRemoveVolumeCall wrap *gomock.Call
type MockStorageBackendRemoveVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendRemoveVolumeCall) Return(arg0 error) *MockStorageBackendRemoveVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendRemoveVolumeCall) Do(f func(names.VolumeTag) error) *MockStorageBackendRemoveVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendRemoveVolumeCall) DoAndReturn(f func(names.VolumeTag) error) *MockStorageBackendRemoveVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveVolumeAttachment mocks base method.
func (m *MockStorageBackend) RemoveVolumeAttachment(arg0 names.Tag, arg1 names.VolumeTag, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolumeAttachment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolumeAttachment indicates an expected call of RemoveVolumeAttachment.
func (mr *MockStorageBackendMockRecorder) RemoveVolumeAttachment(arg0, arg1, arg2 any) *MockStorageBackendRemoveVolumeAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumeAttachment", reflect.TypeOf((*MockStorageBackend)(nil).RemoveVolumeAttachment), arg0, arg1, arg2)
	return &MockStorageBackendRemoveVolumeAttachmentCall{Call: call}
}

// MockStorageBackendRemoveVolumeAttachmentCall wrap *gomock.Call
type MockStorageBackendRemoveVolumeAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendRemoveVolumeAttachmentCall) Return(arg0 error) *MockStorageBackendRemoveVolumeAttachmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendRemoveVolumeAttachmentCall) Do(f func(names.Tag, names.VolumeTag, bool) error) *MockStorageBackendRemoveVolumeAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendRemoveVolumeAttachmentCall) DoAndReturn(f func(names.Tag, names.VolumeTag, bool) error) *MockStorageBackendRemoveVolumeAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveVolumeAttachmentPlan mocks base method.
func (m *MockStorageBackend) RemoveVolumeAttachmentPlan(arg0 names.Tag, arg1 names.VolumeTag, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolumeAttachmentPlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolumeAttachmentPlan indicates an expected call of RemoveVolumeAttachmentPlan.
func (mr *MockStorageBackendMockRecorder) RemoveVolumeAttachmentPlan(arg0, arg1, arg2 any) *MockStorageBackendRemoveVolumeAttachmentPlanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumeAttachmentPlan", reflect.TypeOf((*MockStorageBackend)(nil).RemoveVolumeAttachmentPlan), arg0, arg1, arg2)
	return &MockStorageBackendRemoveVolumeAttachmentPlanCall{Call: call}
}

// MockStorageBackendRemoveVolumeAttachmentPlanCall wrap *gomock.Call
type MockStorageBackendRemoveVolumeAttachmentPlanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendRemoveVolumeAttachmentPlanCall) Return(arg0 error) *MockStorageBackendRemoveVolumeAttachmentPlanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendRemoveVolumeAttachmentPlanCall) Do(f func(names.Tag, names.VolumeTag, bool) error) *MockStorageBackendRemoveVolumeAttachmentPlanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendRemoveVolumeAttachmentPlanCall) DoAndReturn(f func(names.Tag, names.VolumeTag, bool) error) *MockStorageBackendRemoveVolumeAttachmentPlanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemAttachmentInfo mocks base method.
func (m *MockStorageBackend) SetFilesystemAttachmentInfo(arg0 names.Tag, arg1 names.FilesystemTag, arg2 state.FilesystemAttachmentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemAttachmentInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemAttachmentInfo indicates an expected call of SetFilesystemAttachmentInfo.
func (mr *MockStorageBackendMockRecorder) SetFilesystemAttachmentInfo(arg0, arg1, arg2 any) *MockStorageBackendSetFilesystemAttachmentInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemAttachmentInfo", reflect.TypeOf((*MockStorageBackend)(nil).SetFilesystemAttachmentInfo), arg0, arg1, arg2)
	return &MockStorageBackendSetFilesystemAttachmentInfoCall{Call: call}
}

// MockStorageBackendSetFilesystemAttachmentInfoCall wrap *gomock.Call
type MockStorageBackendSetFilesystemAttachmentInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendSetFilesystemAttachmentInfoCall) Return(arg0 error) *MockStorageBackendSetFilesystemAttachmentInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendSetFilesystemAttachmentInfoCall) Do(f func(names.Tag, names.FilesystemTag, state.FilesystemAttachmentInfo) error) *MockStorageBackendSetFilesystemAttachmentInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendSetFilesystemAttachmentInfoCall) DoAndReturn(f func(names.Tag, names.FilesystemTag, state.FilesystemAttachmentInfo) error) *MockStorageBackendSetFilesystemAttachmentInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFilesystemInfo mocks base method.
func (m *MockStorageBackend) SetFilesystemInfo(arg0 names.FilesystemTag, arg1 state.FilesystemInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemInfo indicates an expected call of SetFilesystemInfo.
func (mr *MockStorageBackendMockRecorder) SetFilesystemInfo(arg0, arg1 any) *MockStorageBackendSetFilesystemInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemInfo", reflect.TypeOf((*MockStorageBackend)(nil).SetFilesystemInfo), arg0, arg1)
	return &MockStorageBackendSetFilesystemInfoCall{Call: call}
}

// MockStorageBackendSetFilesystemInfoCall wrap *gomock.Call
type MockStorageBackendSetFilesystemInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendSetFilesystemInfoCall) Return(arg0 error) *MockStorageBackendSetFilesystemInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendSetFilesystemInfoCall) Do(f func(names.FilesystemTag, state.FilesystemInfo) error) *MockStorageBackendSetFilesystemInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendSetFilesystemInfoCall) DoAndReturn(f func(names.FilesystemTag, state.FilesystemInfo) error) *MockStorageBackendSetFilesystemInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeAttachmentInfo mocks base method.
func (m *MockStorageBackend) SetVolumeAttachmentInfo(arg0 names.Tag, arg1 names.VolumeTag, arg2 state.VolumeAttachmentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeAttachmentInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeAttachmentInfo indicates an expected call of SetVolumeAttachmentInfo.
func (mr *MockStorageBackendMockRecorder) SetVolumeAttachmentInfo(arg0, arg1, arg2 any) *MockStorageBackendSetVolumeAttachmentInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeAttachmentInfo", reflect.TypeOf((*MockStorageBackend)(nil).SetVolumeAttachmentInfo), arg0, arg1, arg2)
	return &MockStorageBackendSetVolumeAttachmentInfoCall{Call: call}
}

// MockStorageBackendSetVolumeAttachmentInfoCall wrap *gomock.Call
type MockStorageBackendSetVolumeAttachmentInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendSetVolumeAttachmentInfoCall) Return(arg0 error) *MockStorageBackendSetVolumeAttachmentInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendSetVolumeAttachmentInfoCall) Do(f func(names.Tag, names.VolumeTag, state.VolumeAttachmentInfo) error) *MockStorageBackendSetVolumeAttachmentInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendSetVolumeAttachmentInfoCall) DoAndReturn(f func(names.Tag, names.VolumeTag, state.VolumeAttachmentInfo) error) *MockStorageBackendSetVolumeAttachmentInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeAttachmentPlanBlockInfo mocks base method.
func (m *MockStorageBackend) SetVolumeAttachmentPlanBlockInfo(arg0 names.Tag, arg1 names.VolumeTag, arg2 state.BlockDeviceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeAttachmentPlanBlockInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeAttachmentPlanBlockInfo indicates an expected call of SetVolumeAttachmentPlanBlockInfo.
func (mr *MockStorageBackendMockRecorder) SetVolumeAttachmentPlanBlockInfo(arg0, arg1, arg2 any) *MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeAttachmentPlanBlockInfo", reflect.TypeOf((*MockStorageBackend)(nil).SetVolumeAttachmentPlanBlockInfo), arg0, arg1, arg2)
	return &MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall{Call: call}
}

// MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall wrap *gomock.Call
type MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall) Return(arg0 error) *MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall) Do(f func(names.Tag, names.VolumeTag, state.BlockDeviceInfo) error) *MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall) DoAndReturn(f func(names.Tag, names.VolumeTag, state.BlockDeviceInfo) error) *MockStorageBackendSetVolumeAttachmentPlanBlockInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVolumeInfo mocks base method.
func (m *MockStorageBackend) SetVolumeInfo(arg0 names.VolumeTag, arg1 state.VolumeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolumeInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVolumeInfo indicates an expected call of SetVolumeInfo.
func (mr *MockStorageBackendMockRecorder) SetVolumeInfo(arg0, arg1 any) *MockStorageBackendSetVolumeInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumeInfo", reflect.TypeOf((*MockStorageBackend)(nil).SetVolumeInfo), arg0, arg1)
	return &MockStorageBackendSetVolumeInfoCall{Call: call}
}

// MockStorageBackendSetVolumeInfoCall wrap *gomock.Call
type MockStorageBackendSetVolumeInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendSetVolumeInfoCall) Return(arg0 error) *MockStorageBackendSetVolumeInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendSetVolumeInfoCall) Do(f func(names.VolumeTag, state.VolumeInfo) error) *MockStorageBackendSetVolumeInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendSetVolumeInfoCall) DoAndReturn(f func(names.VolumeTag, state.VolumeInfo) error) *MockStorageBackendSetVolumeInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageInstance mocks base method.
func (m *MockStorageBackend) StorageInstance(arg0 names.StorageTag) (state.StorageInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageInstance", arg0)
	ret0, _ := ret[0].(state.StorageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageInstance indicates an expected call of StorageInstance.
func (mr *MockStorageBackendMockRecorder) StorageInstance(arg0 any) *MockStorageBackendStorageInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageInstance", reflect.TypeOf((*MockStorageBackend)(nil).StorageInstance), arg0)
	return &MockStorageBackendStorageInstanceCall{Call: call}
}

// MockStorageBackendStorageInstanceCall wrap *gomock.Call
type MockStorageBackendStorageInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendStorageInstanceCall) Return(arg0 state.StorageInstance, arg1 error) *MockStorageBackendStorageInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendStorageInstanceCall) Do(f func(names.StorageTag) (state.StorageInstance, error)) *MockStorageBackendStorageInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendStorageInstanceCall) DoAndReturn(f func(names.StorageTag) (state.StorageInstance, error)) *MockStorageBackendStorageInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageInstanceFilesystem mocks base method.
func (m *MockStorageBackend) StorageInstanceFilesystem(arg0 names.StorageTag) (state.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageInstanceFilesystem", arg0)
	ret0, _ := ret[0].(state.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageInstanceFilesystem indicates an expected call of StorageInstanceFilesystem.
func (mr *MockStorageBackendMockRecorder) StorageInstanceFilesystem(arg0 any) *MockStorageBackendStorageInstanceFilesystemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageInstanceFilesystem", reflect.TypeOf((*MockStorageBackend)(nil).StorageInstanceFilesystem), arg0)
	return &MockStorageBackendStorageInstanceFilesystemCall{Call: call}
}

// MockStorageBackendStorageInstanceFilesystemCall wrap *gomock.Call
type MockStorageBackendStorageInstanceFilesystemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendStorageInstanceFilesystemCall) Return(arg0 state.Filesystem, arg1 error) *MockStorageBackendStorageInstanceFilesystemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendStorageInstanceFilesystemCall) Do(f func(names.StorageTag) (state.Filesystem, error)) *MockStorageBackendStorageInstanceFilesystemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendStorageInstanceFilesystemCall) DoAndReturn(f func(names.StorageTag) (state.Filesystem, error)) *MockStorageBackendStorageInstanceFilesystemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageInstanceVolume mocks base method.
func (m *MockStorageBackend) StorageInstanceVolume(arg0 names.StorageTag) (state.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageInstanceVolume", arg0)
	ret0, _ := ret[0].(state.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageInstanceVolume indicates an expected call of StorageInstanceVolume.
func (mr *MockStorageBackendMockRecorder) StorageInstanceVolume(arg0 any) *MockStorageBackendStorageInstanceVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageInstanceVolume", reflect.TypeOf((*MockStorageBackend)(nil).StorageInstanceVolume), arg0)
	return &MockStorageBackendStorageInstanceVolumeCall{Call: call}
}

// MockStorageBackendStorageInstanceVolumeCall wrap *gomock.Call
type MockStorageBackendStorageInstanceVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendStorageInstanceVolumeCall) Return(arg0 state.Volume, arg1 error) *MockStorageBackendStorageInstanceVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendStorageInstanceVolumeCall) Do(f func(names.StorageTag) (state.Volume, error)) *MockStorageBackendStorageInstanceVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendStorageInstanceVolumeCall) DoAndReturn(f func(names.StorageTag) (state.Volume, error)) *MockStorageBackendStorageInstanceVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Volume mocks base method.
func (m *MockStorageBackend) Volume(arg0 names.VolumeTag) (state.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Volume", arg0)
	ret0, _ := ret[0].(state.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Volume indicates an expected call of Volume.
func (mr *MockStorageBackendMockRecorder) Volume(arg0 any) *MockStorageBackendVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volume", reflect.TypeOf((*MockStorageBackend)(nil).Volume), arg0)
	return &MockStorageBackendVolumeCall{Call: call}
}

// MockStorageBackendVolumeCall wrap *gomock.Call
type MockStorageBackendVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendVolumeCall) Return(arg0 state.Volume, arg1 error) *MockStorageBackendVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendVolumeCall) Do(f func(names.VolumeTag) (state.Volume, error)) *MockStorageBackendVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendVolumeCall) DoAndReturn(f func(names.VolumeTag) (state.Volume, error)) *MockStorageBackendVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeAttachment mocks base method.
func (m *MockStorageBackend) VolumeAttachment(arg0 names.Tag, arg1 names.VolumeTag) (state.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAttachment", arg0, arg1)
	ret0, _ := ret[0].(state.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeAttachment indicates an expected call of VolumeAttachment.
func (mr *MockStorageBackendMockRecorder) VolumeAttachment(arg0, arg1 any) *MockStorageBackendVolumeAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAttachment", reflect.TypeOf((*MockStorageBackend)(nil).VolumeAttachment), arg0, arg1)
	return &MockStorageBackendVolumeAttachmentCall{Call: call}
}

// MockStorageBackendVolumeAttachmentCall wrap *gomock.Call
type MockStorageBackendVolumeAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendVolumeAttachmentCall) Return(arg0 state.VolumeAttachment, arg1 error) *MockStorageBackendVolumeAttachmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendVolumeAttachmentCall) Do(f func(names.Tag, names.VolumeTag) (state.VolumeAttachment, error)) *MockStorageBackendVolumeAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendVolumeAttachmentCall) DoAndReturn(f func(names.Tag, names.VolumeTag) (state.VolumeAttachment, error)) *MockStorageBackendVolumeAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeAttachmentPlan mocks base method.
func (m *MockStorageBackend) VolumeAttachmentPlan(arg0 names.Tag, arg1 names.VolumeTag) (state.VolumeAttachmentPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAttachmentPlan", arg0, arg1)
	ret0, _ := ret[0].(state.VolumeAttachmentPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeAttachmentPlan indicates an expected call of VolumeAttachmentPlan.
func (mr *MockStorageBackendMockRecorder) VolumeAttachmentPlan(arg0, arg1 any) *MockStorageBackendVolumeAttachmentPlanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAttachmentPlan", reflect.TypeOf((*MockStorageBackend)(nil).VolumeAttachmentPlan), arg0, arg1)
	return &MockStorageBackendVolumeAttachmentPlanCall{Call: call}
}

// MockStorageBackendVolumeAttachmentPlanCall wrap *gomock.Call
type MockStorageBackendVolumeAttachmentPlanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendVolumeAttachmentPlanCall) Return(arg0 state.VolumeAttachmentPlan, arg1 error) *MockStorageBackendVolumeAttachmentPlanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendVolumeAttachmentPlanCall) Do(f func(names.Tag, names.VolumeTag) (state.VolumeAttachmentPlan, error)) *MockStorageBackendVolumeAttachmentPlanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendVolumeAttachmentPlanCall) DoAndReturn(f func(names.Tag, names.VolumeTag) (state.VolumeAttachmentPlan, error)) *MockStorageBackendVolumeAttachmentPlanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeAttachmentPlans mocks base method.
func (m *MockStorageBackend) VolumeAttachmentPlans(arg0 names.VolumeTag) ([]state.VolumeAttachmentPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAttachmentPlans", arg0)
	ret0, _ := ret[0].([]state.VolumeAttachmentPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeAttachmentPlans indicates an expected call of VolumeAttachmentPlans.
func (mr *MockStorageBackendMockRecorder) VolumeAttachmentPlans(arg0 any) *MockStorageBackendVolumeAttachmentPlansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAttachmentPlans", reflect.TypeOf((*MockStorageBackend)(nil).VolumeAttachmentPlans), arg0)
	return &MockStorageBackendVolumeAttachmentPlansCall{Call: call}
}

// MockStorageBackendVolumeAttachmentPlansCall wrap *gomock.Call
type MockStorageBackendVolumeAttachmentPlansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendVolumeAttachmentPlansCall) Return(arg0 []state.VolumeAttachmentPlan, arg1 error) *MockStorageBackendVolumeAttachmentPlansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendVolumeAttachmentPlansCall) Do(f func(names.VolumeTag) ([]state.VolumeAttachmentPlan, error)) *MockStorageBackendVolumeAttachmentPlansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendVolumeAttachmentPlansCall) DoAndReturn(f func(names.VolumeTag) ([]state.VolumeAttachmentPlan, error)) *MockStorageBackendVolumeAttachmentPlansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeAttachments mocks base method.
func (m *MockStorageBackend) VolumeAttachments(arg0 names.VolumeTag) ([]state.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAttachments", arg0)
	ret0, _ := ret[0].([]state.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeAttachments indicates an expected call of VolumeAttachments.
func (mr *MockStorageBackendMockRecorder) VolumeAttachments(arg0 any) *MockStorageBackendVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAttachments", reflect.TypeOf((*MockStorageBackend)(nil).VolumeAttachments), arg0)
	return &MockStorageBackendVolumeAttachmentsCall{Call: call}
}

// MockStorageBackendVolumeAttachmentsCall wrap *gomock.Call
type MockStorageBackendVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendVolumeAttachmentsCall) Return(arg0 []state.VolumeAttachment, arg1 error) *MockStorageBackendVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendVolumeAttachmentsCall) Do(f func(names.VolumeTag) ([]state.VolumeAttachment, error)) *MockStorageBackendVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendVolumeAttachmentsCall) DoAndReturn(f func(names.VolumeTag) ([]state.VolumeAttachment, error)) *MockStorageBackendVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineAttachmentsPlans mocks base method.
func (m *MockStorageBackend) WatchMachineAttachmentsPlans(arg0 names.MachineTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineAttachmentsPlans", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchMachineAttachmentsPlans indicates an expected call of WatchMachineAttachmentsPlans.
func (mr *MockStorageBackendMockRecorder) WatchMachineAttachmentsPlans(arg0 any) *MockStorageBackendWatchMachineAttachmentsPlansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineAttachmentsPlans", reflect.TypeOf((*MockStorageBackend)(nil).WatchMachineAttachmentsPlans), arg0)
	return &MockStorageBackendWatchMachineAttachmentsPlansCall{Call: call}
}

// MockStorageBackendWatchMachineAttachmentsPlansCall wrap *gomock.Call
type MockStorageBackendWatchMachineAttachmentsPlansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchMachineAttachmentsPlansCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchMachineAttachmentsPlansCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchMachineAttachmentsPlansCall) Do(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineAttachmentsPlansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchMachineAttachmentsPlansCall) DoAndReturn(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineAttachmentsPlansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineFilesystemAttachments mocks base method.
func (m *MockStorageBackend) WatchMachineFilesystemAttachments(arg0 names.MachineTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineFilesystemAttachments", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchMachineFilesystemAttachments indicates an expected call of WatchMachineFilesystemAttachments.
func (mr *MockStorageBackendMockRecorder) WatchMachineFilesystemAttachments(arg0 any) *MockStorageBackendWatchMachineFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineFilesystemAttachments", reflect.TypeOf((*MockStorageBackend)(nil).WatchMachineFilesystemAttachments), arg0)
	return &MockStorageBackendWatchMachineFilesystemAttachmentsCall{Call: call}
}

// MockStorageBackendWatchMachineFilesystemAttachmentsCall wrap *gomock.Call
type MockStorageBackendWatchMachineFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchMachineFilesystemAttachmentsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchMachineFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchMachineFilesystemAttachmentsCall) Do(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchMachineFilesystemAttachmentsCall) DoAndReturn(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineFilesystems mocks base method.
func (m *MockStorageBackend) WatchMachineFilesystems(arg0 names.MachineTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineFilesystems", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchMachineFilesystems indicates an expected call of WatchMachineFilesystems.
func (mr *MockStorageBackendMockRecorder) WatchMachineFilesystems(arg0 any) *MockStorageBackendWatchMachineFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineFilesystems", reflect.TypeOf((*MockStorageBackend)(nil).WatchMachineFilesystems), arg0)
	return &MockStorageBackendWatchMachineFilesystemsCall{Call: call}
}

// MockStorageBackendWatchMachineFilesystemsCall wrap *gomock.Call
type MockStorageBackendWatchMachineFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchMachineFilesystemsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchMachineFilesystemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchMachineFilesystemsCall) Do(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchMachineFilesystemsCall) DoAndReturn(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineVolumeAttachments mocks base method.
func (m *MockStorageBackend) WatchMachineVolumeAttachments(arg0 names.MachineTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineVolumeAttachments", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchMachineVolumeAttachments indicates an expected call of WatchMachineVolumeAttachments.
func (mr *MockStorageBackendMockRecorder) WatchMachineVolumeAttachments(arg0 any) *MockStorageBackendWatchMachineVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineVolumeAttachments", reflect.TypeOf((*MockStorageBackend)(nil).WatchMachineVolumeAttachments), arg0)
	return &MockStorageBackendWatchMachineVolumeAttachmentsCall{Call: call}
}

// MockStorageBackendWatchMachineVolumeAttachmentsCall wrap *gomock.Call
type MockStorageBackendWatchMachineVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchMachineVolumeAttachmentsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchMachineVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchMachineVolumeAttachmentsCall) Do(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchMachineVolumeAttachmentsCall) DoAndReturn(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineVolumes mocks base method.
func (m *MockStorageBackend) WatchMachineVolumes(arg0 names.MachineTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineVolumes", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchMachineVolumes indicates an expected call of WatchMachineVolumes.
func (mr *MockStorageBackendMockRecorder) WatchMachineVolumes(arg0 any) *MockStorageBackendWatchMachineVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineVolumes", reflect.TypeOf((*MockStorageBackend)(nil).WatchMachineVolumes), arg0)
	return &MockStorageBackendWatchMachineVolumesCall{Call: call}
}

// MockStorageBackendWatchMachineVolumesCall wrap *gomock.Call
type MockStorageBackendWatchMachineVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchMachineVolumesCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchMachineVolumesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchMachineVolumesCall) Do(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchMachineVolumesCall) DoAndReturn(f func(names.MachineTag) state.StringsWatcher) *MockStorageBackendWatchMachineVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelFilesystemAttachments mocks base method.
func (m *MockStorageBackend) WatchModelFilesystemAttachments() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelFilesystemAttachments")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelFilesystemAttachments indicates an expected call of WatchModelFilesystemAttachments.
func (mr *MockStorageBackendMockRecorder) WatchModelFilesystemAttachments() *MockStorageBackendWatchModelFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelFilesystemAttachments", reflect.TypeOf((*MockStorageBackend)(nil).WatchModelFilesystemAttachments))
	return &MockStorageBackendWatchModelFilesystemAttachmentsCall{Call: call}
}

// MockStorageBackendWatchModelFilesystemAttachmentsCall wrap *gomock.Call
type MockStorageBackendWatchModelFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchModelFilesystemAttachmentsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchModelFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchModelFilesystemAttachmentsCall) Do(f func() state.StringsWatcher) *MockStorageBackendWatchModelFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchModelFilesystemAttachmentsCall) DoAndReturn(f func() state.StringsWatcher) *MockStorageBackendWatchModelFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelFilesystems mocks base method.
func (m *MockStorageBackend) WatchModelFilesystems() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelFilesystems")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelFilesystems indicates an expected call of WatchModelFilesystems.
func (mr *MockStorageBackendMockRecorder) WatchModelFilesystems() *MockStorageBackendWatchModelFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelFilesystems", reflect.TypeOf((*MockStorageBackend)(nil).WatchModelFilesystems))
	return &MockStorageBackendWatchModelFilesystemsCall{Call: call}
}

// MockStorageBackendWatchModelFilesystemsCall wrap *gomock.Call
type MockStorageBackendWatchModelFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchModelFilesystemsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchModelFilesystemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchModelFilesystemsCall) Do(f func() state.StringsWatcher) *MockStorageBackendWatchModelFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchModelFilesystemsCall) DoAndReturn(f func() state.StringsWatcher) *MockStorageBackendWatchModelFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelVolumeAttachments mocks base method.
func (m *MockStorageBackend) WatchModelVolumeAttachments() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelVolumeAttachments")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelVolumeAttachments indicates an expected call of WatchModelVolumeAttachments.
func (mr *MockStorageBackendMockRecorder) WatchModelVolumeAttachments() *MockStorageBackendWatchModelVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelVolumeAttachments", reflect.TypeOf((*MockStorageBackend)(nil).WatchModelVolumeAttachments))
	return &MockStorageBackendWatchModelVolumeAttachmentsCall{Call: call}
}

// MockStorageBackendWatchModelVolumeAttachmentsCall wrap *gomock.Call
type MockStorageBackendWatchModelVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchModelVolumeAttachmentsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchModelVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchModelVolumeAttachmentsCall) Do(f func() state.StringsWatcher) *MockStorageBackendWatchModelVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchModelVolumeAttachmentsCall) DoAndReturn(f func() state.StringsWatcher) *MockStorageBackendWatchModelVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelVolumes mocks base method.
func (m *MockStorageBackend) WatchModelVolumes() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelVolumes")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelVolumes indicates an expected call of WatchModelVolumes.
func (mr *MockStorageBackendMockRecorder) WatchModelVolumes() *MockStorageBackendWatchModelVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelVolumes", reflect.TypeOf((*MockStorageBackend)(nil).WatchModelVolumes))
	return &MockStorageBackendWatchModelVolumesCall{Call: call}
}

// MockStorageBackendWatchModelVolumesCall wrap *gomock.Call
type MockStorageBackendWatchModelVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchModelVolumesCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchModelVolumesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchModelVolumesCall) Do(f func() state.StringsWatcher) *MockStorageBackendWatchModelVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchModelVolumesCall) DoAndReturn(f func() state.StringsWatcher) *MockStorageBackendWatchModelVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitFilesystemAttachments mocks base method.
func (m *MockStorageBackend) WatchUnitFilesystemAttachments(arg0 names.ApplicationTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitFilesystemAttachments", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchUnitFilesystemAttachments indicates an expected call of WatchUnitFilesystemAttachments.
func (mr *MockStorageBackendMockRecorder) WatchUnitFilesystemAttachments(arg0 any) *MockStorageBackendWatchUnitFilesystemAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitFilesystemAttachments", reflect.TypeOf((*MockStorageBackend)(nil).WatchUnitFilesystemAttachments), arg0)
	return &MockStorageBackendWatchUnitFilesystemAttachmentsCall{Call: call}
}

// MockStorageBackendWatchUnitFilesystemAttachmentsCall wrap *gomock.Call
type MockStorageBackendWatchUnitFilesystemAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchUnitFilesystemAttachmentsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchUnitFilesystemAttachmentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchUnitFilesystemAttachmentsCall) Do(f func(names.ApplicationTag) state.StringsWatcher) *MockStorageBackendWatchUnitFilesystemAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchUnitFilesystemAttachmentsCall) DoAndReturn(f func(names.ApplicationTag) state.StringsWatcher) *MockStorageBackendWatchUnitFilesystemAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitFilesystems mocks base method.
func (m *MockStorageBackend) WatchUnitFilesystems(arg0 names.ApplicationTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitFilesystems", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchUnitFilesystems indicates an expected call of WatchUnitFilesystems.
func (mr *MockStorageBackendMockRecorder) WatchUnitFilesystems(arg0 any) *MockStorageBackendWatchUnitFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitFilesystems", reflect.TypeOf((*MockStorageBackend)(nil).WatchUnitFilesystems), arg0)
	return &MockStorageBackendWatchUnitFilesystemsCall{Call: call}
}

// MockStorageBackendWatchUnitFilesystemsCall wrap *gomock.Call
type MockStorageBackendWatchUnitFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchUnitFilesystemsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchUnitFilesystemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchUnitFilesystemsCall) Do(f func(names.ApplicationTag) state.StringsWatcher) *MockStorageBackendWatchUnitFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchUnitFilesystemsCall) DoAndReturn(f func(names.ApplicationTag) state.StringsWatcher) *MockStorageBackendWatchUnitFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitVolumeAttachments mocks base method.
func (m *MockStorageBackend) WatchUnitVolumeAttachments(arg0 names.ApplicationTag) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitVolumeAttachments", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchUnitVolumeAttachments indicates an expected call of WatchUnitVolumeAttachments.
func (mr *MockStorageBackendMockRecorder) WatchUnitVolumeAttachments(arg0 any) *MockStorageBackendWatchUnitVolumeAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitVolumeAttachments", reflect.TypeOf((*MockStorageBackend)(nil).WatchUnitVolumeAttachments), arg0)
	return &MockStorageBackendWatchUnitVolumeAttachmentsCall{Call: call}
}

// MockStorageBackendWatchUnitVolumeAttachmentsCall wrap *gomock.Call
type MockStorageBackendWatchUnitVolumeAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchUnitVolumeAttachmentsCall) Return(arg0 state.StringsWatcher) *MockStorageBackendWatchUnitVolumeAttachmentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchUnitVolumeAttachmentsCall) Do(f func(names.ApplicationTag) state.StringsWatcher) *MockStorageBackendWatchUnitVolumeAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchUnitVolumeAttachmentsCall) DoAndReturn(f func(names.ApplicationTag) state.StringsWatcher) *MockStorageBackendWatchUnitVolumeAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchVolumeAttachment mocks base method.
func (m *MockStorageBackend) WatchVolumeAttachment(arg0 names.Tag, arg1 names.VolumeTag) state.NotifyWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchVolumeAttachment", arg0, arg1)
	ret0, _ := ret[0].(state.NotifyWatcher)
	return ret0
}

// WatchVolumeAttachment indicates an expected call of WatchVolumeAttachment.
func (mr *MockStorageBackendMockRecorder) WatchVolumeAttachment(arg0, arg1 any) *MockStorageBackendWatchVolumeAttachmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVolumeAttachment", reflect.TypeOf((*MockStorageBackend)(nil).WatchVolumeAttachment), arg0, arg1)
	return &MockStorageBackendWatchVolumeAttachmentCall{Call: call}
}

// MockStorageBackendWatchVolumeAttachmentCall wrap *gomock.Call
type MockStorageBackendWatchVolumeAttachmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageBackendWatchVolumeAttachmentCall) Return(arg0 state.NotifyWatcher) *MockStorageBackendWatchVolumeAttachmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageBackendWatchVolumeAttachmentCall) Do(f func(names.Tag, names.VolumeTag) state.NotifyWatcher) *MockStorageBackendWatchVolumeAttachmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageBackendWatchVolumeAttachmentCall) DoAndReturn(f func(names.Tag, names.VolumeTag) state.NotifyWatcher) *MockStorageBackendWatchVolumeAttachmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// FindEntity mocks base method.
func (m *MockBackend) FindEntity(arg0 names.Tag) (state.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity.
func (mr *MockBackendMockRecorder) FindEntity(arg0 any) *MockBackendFindEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockBackend)(nil).FindEntity), arg0)
	return &MockBackendFindEntityCall{Call: call}
}

// MockBackendFindEntityCall wrap *gomock.Call
type MockBackendFindEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendFindEntityCall) Return(arg0 state.Entity, arg1 error) *MockBackendFindEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendFindEntityCall) Do(f func(names.Tag) (state.Entity, error)) *MockBackendFindEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendFindEntityCall) DoAndReturn(f func(names.Tag) (state.Entity, error)) *MockBackendFindEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachine mocks base method.
func (m *MockBackend) WatchMachine(arg0 names.MachineTag) (state.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachine", arg0)
	ret0, _ := ret[0].(state.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachine indicates an expected call of WatchMachine.
func (mr *MockBackendMockRecorder) WatchMachine(arg0 any) *MockBackendWatchMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachine", reflect.TypeOf((*MockBackend)(nil).WatchMachine), arg0)
	return &MockBackendWatchMachineCall{Call: call}
}

// MockBackendWatchMachineCall wrap *gomock.Call
type MockBackendWatchMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendWatchMachineCall) Return(arg0 state.NotifyWatcher, arg1 error) *MockBackendWatchMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendWatchMachineCall) Do(f func(names.MachineTag) (state.NotifyWatcher, error)) *MockBackendWatchMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendWatchMachineCall) DoAndReturn(f func(names.MachineTag) (state.NotifyWatcher, error)) *MockBackendWatchMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
