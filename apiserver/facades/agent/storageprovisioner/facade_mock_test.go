// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facade (interfaces: Resources)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner -destination facade_mock_test.go github.com/juju/juju/apiserver/facade Resources
//

// Package storageprovisioner is a generated GoMock package.
package storageprovisioner

import (
	reflect "reflect"

	worker "github.com/juju/worker/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockResources is a mock of Resources interface.
type MockResources struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesMockRecorder
}

// MockResourcesMockRecorder is the mock recorder for MockResources.
type MockResourcesMockRecorder struct {
	mock *MockResources
}

// NewMockResources creates a new mock instance.
func NewMockResources(ctrl *gomock.Controller) *MockResources {
	mock := &MockResources{ctrl: ctrl}
	mock.recorder = &MockResourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResources) EXPECT() *MockResourcesMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockResources) ISGOMOCK() struct{} {
	return struct{}{}
}

// Get mocks base method.
func (m *MockResources) Get(arg0 string) worker.Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(worker.Worker)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockResourcesMockRecorder) Get(arg0 any) *MockResourcesGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResources)(nil).Get), arg0)
	return &MockResourcesGetCall{Call: call}
}

// MockResourcesGetCall wrap *gomock.Call
type MockResourcesGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesGetCall) Return(arg0 worker.Worker) *MockResourcesGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesGetCall) Do(f func(string) worker.Worker) *MockResourcesGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesGetCall) DoAndReturn(f func(string) worker.Worker) *MockResourcesGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Register mocks base method.
func (m *MockResources) Register(arg0 worker.Worker) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockResourcesMockRecorder) Register(arg0 any) *MockResourcesRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockResources)(nil).Register), arg0)
	return &MockResourcesRegisterCall{Call: call}
}

// MockResourcesRegisterCall wrap *gomock.Call
type MockResourcesRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesRegisterCall) Return(arg0 string) *MockResourcesRegisterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesRegisterCall) Do(f func(worker.Worker) string) *MockResourcesRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesRegisterCall) DoAndReturn(f func(worker.Worker) string) *MockResourcesRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockResources) Stop(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockResourcesMockRecorder) Stop(arg0 any) *MockResourcesStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockResources)(nil).Stop), arg0)
	return &MockResourcesStopCall{Call: call}
}

// MockResourcesStopCall wrap *gomock.Call
type MockResourcesStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesStopCall) Return(arg0 error) *MockResourcesStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesStopCall) Do(f func(string) error) *MockResourcesStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesStopCall) DoAndReturn(f func(string) error) *MockResourcesStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
