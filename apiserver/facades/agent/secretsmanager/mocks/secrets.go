// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/secrets.go -source service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	secrets "github.com/juju/juju/core/secrets"
	watcher "github.com/juju/juju/core/watcher"
	service "github.com/juju/juju/domain/secret/service"
	service0 "github.com/juju/juju/domain/secretbackend/service"
	provider "github.com/juju/juju/internal/secrets/provider"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretTriggers is a mock of SecretTriggers interface.
type MockSecretTriggers struct {
	ctrl     *gomock.Controller
	recorder *MockSecretTriggersMockRecorder
}

// MockSecretTriggersMockRecorder is the mock recorder for MockSecretTriggers.
type MockSecretTriggersMockRecorder struct {
	mock *MockSecretTriggers
}

// NewMockSecretTriggers creates a new mock instance.
func NewMockSecretTriggers(ctrl *gomock.Controller) *MockSecretTriggers {
	mock := &MockSecretTriggers{ctrl: ctrl}
	mock.recorder = &MockSecretTriggersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretTriggers) EXPECT() *MockSecretTriggersMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretTriggers) ISGOMOCK() struct{} {
	return struct{}{}
}

// SecretRotated mocks base method.
func (m *MockSecretTriggers) SecretRotated(ctx context.Context, uri *secrets.URI, params service.SecretRotatedParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretRotated", ctx, uri, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretRotated indicates an expected call of SecretRotated.
func (mr *MockSecretTriggersMockRecorder) SecretRotated(ctx, uri, params any) *MockSecretTriggersSecretRotatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretRotated", reflect.TypeOf((*MockSecretTriggers)(nil).SecretRotated), ctx, uri, params)
	return &MockSecretTriggersSecretRotatedCall{Call: call}
}

// MockSecretTriggersSecretRotatedCall wrap *gomock.Call
type MockSecretTriggersSecretRotatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretTriggersSecretRotatedCall) Return(arg0 error) *MockSecretTriggersSecretRotatedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretTriggersSecretRotatedCall) Do(f func(context.Context, *secrets.URI, service.SecretRotatedParams) error) *MockSecretTriggersSecretRotatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretTriggersSecretRotatedCall) DoAndReturn(f func(context.Context, *secrets.URI, service.SecretRotatedParams) error) *MockSecretTriggersSecretRotatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchObsolete mocks base method.
func (m *MockSecretTriggers) WatchObsolete(ctx context.Context, owners ...service.CharmSecretOwner) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range owners {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchObsolete", varargs...)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchObsolete indicates an expected call of WatchObsolete.
func (mr *MockSecretTriggersMockRecorder) WatchObsolete(ctx any, owners ...any) *MockSecretTriggersWatchObsoleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, owners...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchObsolete", reflect.TypeOf((*MockSecretTriggers)(nil).WatchObsolete), varargs...)
	return &MockSecretTriggersWatchObsoleteCall{Call: call}
}

// MockSecretTriggersWatchObsoleteCall wrap *gomock.Call
type MockSecretTriggersWatchObsoleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretTriggersWatchObsoleteCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockSecretTriggersWatchObsoleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretTriggersWatchObsoleteCall) Do(f func(context.Context, ...service.CharmSecretOwner) (watcher.StringsWatcher, error)) *MockSecretTriggersWatchObsoleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretTriggersWatchObsoleteCall) DoAndReturn(f func(context.Context, ...service.CharmSecretOwner) (watcher.StringsWatcher, error)) *MockSecretTriggersWatchObsoleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchSecretRevisionsExpiryChanges mocks base method.
func (m *MockSecretTriggers) WatchSecretRevisionsExpiryChanges(ctx context.Context, owners ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range owners {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchSecretRevisionsExpiryChanges", varargs...)
	ret0, _ := ret[0].(watcher.SecretTriggerWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretRevisionsExpiryChanges indicates an expected call of WatchSecretRevisionsExpiryChanges.
func (mr *MockSecretTriggersMockRecorder) WatchSecretRevisionsExpiryChanges(ctx any, owners ...any) *MockSecretTriggersWatchSecretRevisionsExpiryChangesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, owners...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretRevisionsExpiryChanges", reflect.TypeOf((*MockSecretTriggers)(nil).WatchSecretRevisionsExpiryChanges), varargs...)
	return &MockSecretTriggersWatchSecretRevisionsExpiryChangesCall{Call: call}
}

// MockSecretTriggersWatchSecretRevisionsExpiryChangesCall wrap *gomock.Call
type MockSecretTriggersWatchSecretRevisionsExpiryChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretTriggersWatchSecretRevisionsExpiryChangesCall) Return(arg0 watcher.SecretTriggerWatcher, arg1 error) *MockSecretTriggersWatchSecretRevisionsExpiryChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretTriggersWatchSecretRevisionsExpiryChangesCall) Do(f func(context.Context, ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error)) *MockSecretTriggersWatchSecretRevisionsExpiryChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretTriggersWatchSecretRevisionsExpiryChangesCall) DoAndReturn(f func(context.Context, ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error)) *MockSecretTriggersWatchSecretRevisionsExpiryChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchSecretsRotationChanges mocks base method.
func (m *MockSecretTriggers) WatchSecretsRotationChanges(ctx context.Context, owners ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range owners {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchSecretsRotationChanges", varargs...)
	ret0, _ := ret[0].(watcher.SecretTriggerWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretsRotationChanges indicates an expected call of WatchSecretsRotationChanges.
func (mr *MockSecretTriggersMockRecorder) WatchSecretsRotationChanges(ctx any, owners ...any) *MockSecretTriggersWatchSecretsRotationChangesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, owners...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretsRotationChanges", reflect.TypeOf((*MockSecretTriggers)(nil).WatchSecretsRotationChanges), varargs...)
	return &MockSecretTriggersWatchSecretsRotationChangesCall{Call: call}
}

// MockSecretTriggersWatchSecretsRotationChangesCall wrap *gomock.Call
type MockSecretTriggersWatchSecretsRotationChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretTriggersWatchSecretsRotationChangesCall) Return(arg0 watcher.SecretTriggerWatcher, arg1 error) *MockSecretTriggersWatchSecretsRotationChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretTriggersWatchSecretsRotationChangesCall) Do(f func(context.Context, ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error)) *MockSecretTriggersWatchSecretsRotationChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretTriggersWatchSecretsRotationChangesCall) DoAndReturn(f func(context.Context, ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error)) *MockSecretTriggersWatchSecretsRotationChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretsConsumer is a mock of SecretsConsumer interface.
type MockSecretsConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsConsumerMockRecorder
}

// MockSecretsConsumerMockRecorder is the mock recorder for MockSecretsConsumer.
type MockSecretsConsumerMockRecorder struct {
	mock *MockSecretsConsumer
}

// NewMockSecretsConsumer creates a new mock instance.
func NewMockSecretsConsumer(ctrl *gomock.Controller) *MockSecretsConsumer {
	mock := &MockSecretsConsumer{ctrl: ctrl}
	mock.recorder = &MockSecretsConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsConsumer) EXPECT() *MockSecretsConsumerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretsConsumer) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetConsumedRevision mocks base method.
func (m *MockSecretsConsumer) GetConsumedRevision(ctx context.Context, uri *secrets.URI, unitName string, refresh, peek bool, labelToUpdate *string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumedRevision", ctx, uri, unitName, refresh, peek, labelToUpdate)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumedRevision indicates an expected call of GetConsumedRevision.
func (mr *MockSecretsConsumerMockRecorder) GetConsumedRevision(ctx, uri, unitName, refresh, peek, labelToUpdate any) *MockSecretsConsumerGetConsumedRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumedRevision", reflect.TypeOf((*MockSecretsConsumer)(nil).GetConsumedRevision), ctx, uri, unitName, refresh, peek, labelToUpdate)
	return &MockSecretsConsumerGetConsumedRevisionCall{Call: call}
}

// MockSecretsConsumerGetConsumedRevisionCall wrap *gomock.Call
type MockSecretsConsumerGetConsumedRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerGetConsumedRevisionCall) Return(arg0 int, arg1 error) *MockSecretsConsumerGetConsumedRevisionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerGetConsumedRevisionCall) Do(f func(context.Context, *secrets.URI, string, bool, bool, *string) (int, error)) *MockSecretsConsumerGetConsumedRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerGetConsumedRevisionCall) DoAndReturn(f func(context.Context, *secrets.URI, string, bool, bool, *string) (int, error)) *MockSecretsConsumerGetConsumedRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretConsumer mocks base method.
func (m *MockSecretsConsumer) GetSecretConsumer(ctx context.Context, uri *secrets.URI, unitName string) (*secrets.SecretConsumerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretConsumer", ctx, uri, unitName)
	ret0, _ := ret[0].(*secrets.SecretConsumerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretConsumer indicates an expected call of GetSecretConsumer.
func (mr *MockSecretsConsumerMockRecorder) GetSecretConsumer(ctx, uri, unitName any) *MockSecretsConsumerGetSecretConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretConsumer", reflect.TypeOf((*MockSecretsConsumer)(nil).GetSecretConsumer), ctx, uri, unitName)
	return &MockSecretsConsumerGetSecretConsumerCall{Call: call}
}

// MockSecretsConsumerGetSecretConsumerCall wrap *gomock.Call
type MockSecretsConsumerGetSecretConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerGetSecretConsumerCall) Return(arg0 *secrets.SecretConsumerMetadata, arg1 error) *MockSecretsConsumerGetSecretConsumerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerGetSecretConsumerCall) Do(f func(context.Context, *secrets.URI, string) (*secrets.SecretConsumerMetadata, error)) *MockSecretsConsumerGetSecretConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerGetSecretConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, string) (*secrets.SecretConsumerMetadata, error)) *MockSecretsConsumerGetSecretConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretConsumerAndLatest mocks base method.
func (m *MockSecretsConsumer) GetSecretConsumerAndLatest(ctx context.Context, uri *secrets.URI, unitName string) (*secrets.SecretConsumerMetadata, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretConsumerAndLatest", ctx, uri, unitName)
	ret0, _ := ret[0].(*secrets.SecretConsumerMetadata)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretConsumerAndLatest indicates an expected call of GetSecretConsumerAndLatest.
func (mr *MockSecretsConsumerMockRecorder) GetSecretConsumerAndLatest(ctx, uri, unitName any) *MockSecretsConsumerGetSecretConsumerAndLatestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretConsumerAndLatest", reflect.TypeOf((*MockSecretsConsumer)(nil).GetSecretConsumerAndLatest), ctx, uri, unitName)
	return &MockSecretsConsumerGetSecretConsumerAndLatestCall{Call: call}
}

// MockSecretsConsumerGetSecretConsumerAndLatestCall wrap *gomock.Call
type MockSecretsConsumerGetSecretConsumerAndLatestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerGetSecretConsumerAndLatestCall) Return(arg0 *secrets.SecretConsumerMetadata, arg1 int, arg2 error) *MockSecretsConsumerGetSecretConsumerAndLatestCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerGetSecretConsumerAndLatestCall) Do(f func(context.Context, *secrets.URI, string) (*secrets.SecretConsumerMetadata, int, error)) *MockSecretsConsumerGetSecretConsumerAndLatestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerGetSecretConsumerAndLatestCall) DoAndReturn(f func(context.Context, *secrets.URI, string) (*secrets.SecretConsumerMetadata, int, error)) *MockSecretsConsumerGetSecretConsumerAndLatestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetURIByConsumerLabel mocks base method.
func (m *MockSecretsConsumer) GetURIByConsumerLabel(ctx context.Context, label, unitName string) (*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURIByConsumerLabel", ctx, label, unitName)
	ret0, _ := ret[0].(*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURIByConsumerLabel indicates an expected call of GetURIByConsumerLabel.
func (mr *MockSecretsConsumerMockRecorder) GetURIByConsumerLabel(ctx, label, unitName any) *MockSecretsConsumerGetURIByConsumerLabelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURIByConsumerLabel", reflect.TypeOf((*MockSecretsConsumer)(nil).GetURIByConsumerLabel), ctx, label, unitName)
	return &MockSecretsConsumerGetURIByConsumerLabelCall{Call: call}
}

// MockSecretsConsumerGetURIByConsumerLabelCall wrap *gomock.Call
type MockSecretsConsumerGetURIByConsumerLabelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerGetURIByConsumerLabelCall) Return(arg0 *secrets.URI, arg1 error) *MockSecretsConsumerGetURIByConsumerLabelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerGetURIByConsumerLabelCall) Do(f func(context.Context, string, string) (*secrets.URI, error)) *MockSecretsConsumerGetURIByConsumerLabelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerGetURIByConsumerLabelCall) DoAndReturn(f func(context.Context, string, string) (*secrets.URI, error)) *MockSecretsConsumerGetURIByConsumerLabelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GrantSecretAccess mocks base method.
func (m *MockSecretsConsumer) GrantSecretAccess(arg0 context.Context, arg1 *secrets.URI, arg2 service.SecretAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantSecretAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantSecretAccess indicates an expected call of GrantSecretAccess.
func (mr *MockSecretsConsumerMockRecorder) GrantSecretAccess(arg0, arg1, arg2 any) *MockSecretsConsumerGrantSecretAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantSecretAccess", reflect.TypeOf((*MockSecretsConsumer)(nil).GrantSecretAccess), arg0, arg1, arg2)
	return &MockSecretsConsumerGrantSecretAccessCall{Call: call}
}

// MockSecretsConsumerGrantSecretAccessCall wrap *gomock.Call
type MockSecretsConsumerGrantSecretAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerGrantSecretAccessCall) Return(arg0 error) *MockSecretsConsumerGrantSecretAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerGrantSecretAccessCall) Do(f func(context.Context, *secrets.URI, service.SecretAccessParams) error) *MockSecretsConsumerGrantSecretAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerGrantSecretAccessCall) DoAndReturn(f func(context.Context, *secrets.URI, service.SecretAccessParams) error) *MockSecretsConsumerGrantSecretAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokeSecretAccess mocks base method.
func (m *MockSecretsConsumer) RevokeSecretAccess(arg0 context.Context, arg1 *secrets.URI, arg2 service.SecretAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecretAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSecretAccess indicates an expected call of RevokeSecretAccess.
func (mr *MockSecretsConsumerMockRecorder) RevokeSecretAccess(arg0, arg1, arg2 any) *MockSecretsConsumerRevokeSecretAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecretAccess", reflect.TypeOf((*MockSecretsConsumer)(nil).RevokeSecretAccess), arg0, arg1, arg2)
	return &MockSecretsConsumerRevokeSecretAccessCall{Call: call}
}

// MockSecretsConsumerRevokeSecretAccessCall wrap *gomock.Call
type MockSecretsConsumerRevokeSecretAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerRevokeSecretAccessCall) Return(arg0 error) *MockSecretsConsumerRevokeSecretAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerRevokeSecretAccessCall) Do(f func(context.Context, *secrets.URI, service.SecretAccessParams) error) *MockSecretsConsumerRevokeSecretAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerRevokeSecretAccessCall) DoAndReturn(f func(context.Context, *secrets.URI, service.SecretAccessParams) error) *MockSecretsConsumerRevokeSecretAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveSecretConsumer mocks base method.
func (m *MockSecretsConsumer) SaveSecretConsumer(ctx context.Context, uri *secrets.URI, unitName string, md *secrets.SecretConsumerMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecretConsumer", ctx, uri, unitName, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSecretConsumer indicates an expected call of SaveSecretConsumer.
func (mr *MockSecretsConsumerMockRecorder) SaveSecretConsumer(ctx, uri, unitName, md any) *MockSecretsConsumerSaveSecretConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecretConsumer", reflect.TypeOf((*MockSecretsConsumer)(nil).SaveSecretConsumer), ctx, uri, unitName, md)
	return &MockSecretsConsumerSaveSecretConsumerCall{Call: call}
}

// MockSecretsConsumerSaveSecretConsumerCall wrap *gomock.Call
type MockSecretsConsumerSaveSecretConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerSaveSecretConsumerCall) Return(arg0 error) *MockSecretsConsumerSaveSecretConsumerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerSaveSecretConsumerCall) Do(f func(context.Context, *secrets.URI, string, *secrets.SecretConsumerMetadata) error) *MockSecretsConsumerSaveSecretConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerSaveSecretConsumerCall) DoAndReturn(f func(context.Context, *secrets.URI, string, *secrets.SecretConsumerMetadata) error) *MockSecretsConsumerSaveSecretConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchConsumedSecretsChanges mocks base method.
func (m *MockSecretsConsumer) WatchConsumedSecretsChanges(ctx context.Context, unitName string) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConsumedSecretsChanges", ctx, unitName)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsumedSecretsChanges indicates an expected call of WatchConsumedSecretsChanges.
func (mr *MockSecretsConsumerMockRecorder) WatchConsumedSecretsChanges(ctx, unitName any) *MockSecretsConsumerWatchConsumedSecretsChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsumedSecretsChanges", reflect.TypeOf((*MockSecretsConsumer)(nil).WatchConsumedSecretsChanges), ctx, unitName)
	return &MockSecretsConsumerWatchConsumedSecretsChangesCall{Call: call}
}

// MockSecretsConsumerWatchConsumedSecretsChangesCall wrap *gomock.Call
type MockSecretsConsumerWatchConsumedSecretsChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsConsumerWatchConsumedSecretsChangesCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockSecretsConsumerWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsConsumerWatchConsumedSecretsChangesCall) Do(f func(context.Context, string) (watcher.StringsWatcher, error)) *MockSecretsConsumerWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsConsumerWatchConsumedSecretsChangesCall) DoAndReturn(f func(context.Context, string) (watcher.StringsWatcher, error)) *MockSecretsConsumerWatchConsumedSecretsChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretService) ISGOMOCK() struct{} {
	return struct{}{}
}

// ChangeSecretBackend mocks base method.
func (m *MockSecretService) ChangeSecretBackend(ctx context.Context, uri *secrets.URI, revision int, params service.ChangeSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSecretBackend", ctx, uri, revision, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSecretBackend indicates an expected call of ChangeSecretBackend.
func (mr *MockSecretServiceMockRecorder) ChangeSecretBackend(ctx, uri, revision, params any) *MockSecretServiceChangeSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSecretBackend", reflect.TypeOf((*MockSecretService)(nil).ChangeSecretBackend), ctx, uri, revision, params)
	return &MockSecretServiceChangeSecretBackendCall{Call: call}
}

// MockSecretServiceChangeSecretBackendCall wrap *gomock.Call
type MockSecretServiceChangeSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceChangeSecretBackendCall) Return(arg0 error) *MockSecretServiceChangeSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceChangeSecretBackendCall) Do(f func(context.Context, *secrets.URI, int, service.ChangeSecretBackendParams) error) *MockSecretServiceChangeSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceChangeSecretBackendCall) DoAndReturn(f func(context.Context, *secrets.URI, int, service.ChangeSecretBackendParams) error) *MockSecretServiceChangeSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSecretURIs mocks base method.
func (m *MockSecretService) CreateSecretURIs(ctx context.Context, count int) ([]*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretURIs", ctx, count)
	ret0, _ := ret[0].([]*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecretURIs indicates an expected call of CreateSecretURIs.
func (mr *MockSecretServiceMockRecorder) CreateSecretURIs(ctx, count any) *MockSecretServiceCreateSecretURIsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretURIs", reflect.TypeOf((*MockSecretService)(nil).CreateSecretURIs), ctx, count)
	return &MockSecretServiceCreateSecretURIsCall{Call: call}
}

// MockSecretServiceCreateSecretURIsCall wrap *gomock.Call
type MockSecretServiceCreateSecretURIsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceCreateSecretURIsCall) Return(arg0 []*secrets.URI, arg1 error) *MockSecretServiceCreateSecretURIsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceCreateSecretURIsCall) Do(f func(context.Context, int) ([]*secrets.URI, error)) *MockSecretServiceCreateSecretURIsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceCreateSecretURIsCall) DoAndReturn(f func(context.Context, int) ([]*secrets.URI, error)) *MockSecretServiceCreateSecretURIsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretGrants mocks base method.
func (m *MockSecretService) GetSecretGrants(ctx context.Context, uri *secrets.URI, role secrets.SecretRole) ([]service.SecretAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretGrants", ctx, uri, role)
	ret0, _ := ret[0].([]service.SecretAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretGrants indicates an expected call of GetSecretGrants.
func (mr *MockSecretServiceMockRecorder) GetSecretGrants(ctx, uri, role any) *MockSecretServiceGetSecretGrantsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretGrants", reflect.TypeOf((*MockSecretService)(nil).GetSecretGrants), ctx, uri, role)
	return &MockSecretServiceGetSecretGrantsCall{Call: call}
}

// MockSecretServiceGetSecretGrantsCall wrap *gomock.Call
type MockSecretServiceGetSecretGrantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceGetSecretGrantsCall) Return(arg0 []service.SecretAccess, arg1 error) *MockSecretServiceGetSecretGrantsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceGetSecretGrantsCall) Do(f func(context.Context, *secrets.URI, secrets.SecretRole) ([]service.SecretAccess, error)) *MockSecretServiceGetSecretGrantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceGetSecretGrantsCall) DoAndReturn(f func(context.Context, *secrets.URI, secrets.SecretRole) ([]service.SecretAccess, error)) *MockSecretServiceGetSecretGrantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretValue mocks base method.
func (m *MockSecretService) GetSecretValue(arg0 context.Context, arg1 *secrets.URI, arg2 int, arg3 service.SecretAccessor) (secrets.SecretValue, *secrets.ValueRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(secrets.SecretValue)
	ret1, _ := ret[1].(*secrets.ValueRef)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockSecretServiceMockRecorder) GetSecretValue(arg0, arg1, arg2, arg3 any) *MockSecretServiceGetSecretValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockSecretService)(nil).GetSecretValue), arg0, arg1, arg2, arg3)
	return &MockSecretServiceGetSecretValueCall{Call: call}
}

// MockSecretServiceGetSecretValueCall wrap *gomock.Call
type MockSecretServiceGetSecretValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceGetSecretValueCall) Return(arg0 secrets.SecretValue, arg1 *secrets.ValueRef, arg2 error) *MockSecretServiceGetSecretValueCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceGetSecretValueCall) Do(f func(context.Context, *secrets.URI, int, service.SecretAccessor) (secrets.SecretValue, *secrets.ValueRef, error)) *MockSecretServiceGetSecretValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceGetSecretValueCall) DoAndReturn(f func(context.Context, *secrets.URI, int, service.SecretAccessor) (secrets.SecretValue, *secrets.ValueRef, error)) *MockSecretServiceGetSecretValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCharmSecrets mocks base method.
func (m *MockSecretService) ListCharmSecrets(arg0 context.Context, arg1 ...service.CharmSecretOwner) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCharmSecrets", varargs...)
	ret0, _ := ret[0].([]*secrets.SecretMetadata)
	ret1, _ := ret[1].([][]*secrets.SecretRevisionMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCharmSecrets indicates an expected call of ListCharmSecrets.
func (mr *MockSecretServiceMockRecorder) ListCharmSecrets(arg0 any, arg1 ...any) *MockSecretServiceListCharmSecretsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmSecrets", reflect.TypeOf((*MockSecretService)(nil).ListCharmSecrets), varargs...)
	return &MockSecretServiceListCharmSecretsCall{Call: call}
}

// MockSecretServiceListCharmSecretsCall wrap *gomock.Call
type MockSecretServiceListCharmSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceListCharmSecretsCall) Return(arg0 []*secrets.SecretMetadata, arg1 [][]*secrets.SecretRevisionMetadata, arg2 error) *MockSecretServiceListCharmSecretsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceListCharmSecretsCall) Do(f func(context.Context, ...service.CharmSecretOwner) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error)) *MockSecretServiceListCharmSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceListCharmSecretsCall) DoAndReturn(f func(context.Context, ...service.CharmSecretOwner) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error)) *MockSecretServiceListCharmSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGrantedSecretsForBackend mocks base method.
func (m *MockSecretService) ListGrantedSecretsForBackend(ctx context.Context, backendID string, role secrets.SecretRole, consumers ...service.SecretAccessor) ([]*secrets.SecretRevisionRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, backendID, role}
	for _, a := range consumers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGrantedSecretsForBackend", varargs...)
	ret0, _ := ret[0].([]*secrets.SecretRevisionRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGrantedSecretsForBackend indicates an expected call of ListGrantedSecretsForBackend.
func (mr *MockSecretServiceMockRecorder) ListGrantedSecretsForBackend(ctx, backendID, role any, consumers ...any) *MockSecretServiceListGrantedSecretsForBackendCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, backendID, role}, consumers...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGrantedSecretsForBackend", reflect.TypeOf((*MockSecretService)(nil).ListGrantedSecretsForBackend), varargs...)
	return &MockSecretServiceListGrantedSecretsForBackendCall{Call: call}
}

// MockSecretServiceListGrantedSecretsForBackendCall wrap *gomock.Call
type MockSecretServiceListGrantedSecretsForBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceListGrantedSecretsForBackendCall) Return(arg0 []*secrets.SecretRevisionRef, arg1 error) *MockSecretServiceListGrantedSecretsForBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceListGrantedSecretsForBackendCall) Do(f func(context.Context, string, secrets.SecretRole, ...service.SecretAccessor) ([]*secrets.SecretRevisionRef, error)) *MockSecretServiceListGrantedSecretsForBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceListGrantedSecretsForBackendCall) DoAndReturn(f func(context.Context, string, secrets.SecretRole, ...service.SecretAccessor) ([]*secrets.SecretRevisionRef, error)) *MockSecretServiceListGrantedSecretsForBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessCharmSecretConsumerLabel mocks base method.
func (m *MockSecretService) ProcessCharmSecretConsumerLabel(ctx context.Context, unitName string, uri *secrets.URI, label string) (*secrets.URI, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessCharmSecretConsumerLabel", ctx, unitName, uri, label)
	ret0, _ := ret[0].(*secrets.URI)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessCharmSecretConsumerLabel indicates an expected call of ProcessCharmSecretConsumerLabel.
func (mr *MockSecretServiceMockRecorder) ProcessCharmSecretConsumerLabel(ctx, unitName, uri, label any) *MockSecretServiceProcessCharmSecretConsumerLabelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCharmSecretConsumerLabel", reflect.TypeOf((*MockSecretService)(nil).ProcessCharmSecretConsumerLabel), ctx, unitName, uri, label)
	return &MockSecretServiceProcessCharmSecretConsumerLabelCall{Call: call}
}

// MockSecretServiceProcessCharmSecretConsumerLabelCall wrap *gomock.Call
type MockSecretServiceProcessCharmSecretConsumerLabelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceProcessCharmSecretConsumerLabelCall) Return(arg0 *secrets.URI, arg1 *string, arg2 error) *MockSecretServiceProcessCharmSecretConsumerLabelCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceProcessCharmSecretConsumerLabelCall) Do(f func(context.Context, string, *secrets.URI, string) (*secrets.URI, *string, error)) *MockSecretServiceProcessCharmSecretConsumerLabelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceProcessCharmSecretConsumerLabelCall) DoAndReturn(f func(context.Context, string, *secrets.URI, string) (*secrets.URI, *string, error)) *MockSecretServiceProcessCharmSecretConsumerLabelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretBackendService is a mock of SecretBackendService interface.
type MockSecretBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendServiceMockRecorder
}

// MockSecretBackendServiceMockRecorder is the mock recorder for MockSecretBackendService.
type MockSecretBackendServiceMockRecorder struct {
	mock *MockSecretBackendService
}

// NewMockSecretBackendService creates a new mock instance.
func NewMockSecretBackendService(ctrl *gomock.Controller) *MockSecretBackendService {
	mock := &MockSecretBackendService{ctrl: ctrl}
	mock.recorder = &MockSecretBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendService) EXPECT() *MockSecretBackendServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretBackendService) ISGOMOCK() struct{} {
	return struct{}{}
}

// BackendConfigInfo mocks base method.
func (m *MockSecretBackendService) BackendConfigInfo(ctx context.Context, p service0.BackendConfigParams) (*provider.ModelBackendConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendConfigInfo", ctx, p)
	ret0, _ := ret[0].(*provider.ModelBackendConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendConfigInfo indicates an expected call of BackendConfigInfo.
func (mr *MockSecretBackendServiceMockRecorder) BackendConfigInfo(ctx, p any) *MockSecretBackendServiceBackendConfigInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendConfigInfo", reflect.TypeOf((*MockSecretBackendService)(nil).BackendConfigInfo), ctx, p)
	return &MockSecretBackendServiceBackendConfigInfoCall{Call: call}
}

// MockSecretBackendServiceBackendConfigInfoCall wrap *gomock.Call
type MockSecretBackendServiceBackendConfigInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceBackendConfigInfoCall) Return(arg0 *provider.ModelBackendConfigInfo, arg1 error) *MockSecretBackendServiceBackendConfigInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceBackendConfigInfoCall) Do(f func(context.Context, service0.BackendConfigParams) (*provider.ModelBackendConfigInfo, error)) *MockSecretBackendServiceBackendConfigInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceBackendConfigInfoCall) DoAndReturn(f func(context.Context, service0.BackendConfigParams) (*provider.ModelBackendConfigInfo, error)) *MockSecretBackendServiceBackendConfigInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DrainBackendConfigInfo mocks base method.
func (m *MockSecretBackendService) DrainBackendConfigInfo(ctx context.Context, p service0.DrainBackendConfigParams) (*provider.ModelBackendConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrainBackendConfigInfo", ctx, p)
	ret0, _ := ret[0].(*provider.ModelBackendConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrainBackendConfigInfo indicates an expected call of DrainBackendConfigInfo.
func (mr *MockSecretBackendServiceMockRecorder) DrainBackendConfigInfo(ctx, p any) *MockSecretBackendServiceDrainBackendConfigInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainBackendConfigInfo", reflect.TypeOf((*MockSecretBackendService)(nil).DrainBackendConfigInfo), ctx, p)
	return &MockSecretBackendServiceDrainBackendConfigInfoCall{Call: call}
}

// MockSecretBackendServiceDrainBackendConfigInfoCall wrap *gomock.Call
type MockSecretBackendServiceDrainBackendConfigInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceDrainBackendConfigInfoCall) Return(arg0 *provider.ModelBackendConfigInfo, arg1 error) *MockSecretBackendServiceDrainBackendConfigInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceDrainBackendConfigInfoCall) Do(f func(context.Context, service0.DrainBackendConfigParams) (*provider.ModelBackendConfigInfo, error)) *MockSecretBackendServiceDrainBackendConfigInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceDrainBackendConfigInfoCall) DoAndReturn(f func(context.Context, service0.DrainBackendConfigParams) (*provider.ModelBackendConfigInfo, error)) *MockSecretBackendServiceDrainBackendConfigInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
