// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/watcher (interfaces: SecretTriggerWatcher)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/secretsriggerwatcher.go github.com/juju/juju/core/watcher SecretTriggerWatcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretTriggerWatcher is a mock of SecretTriggerWatcher interface.
type MockSecretTriggerWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockSecretTriggerWatcherMockRecorder
}

// MockSecretTriggerWatcherMockRecorder is the mock recorder for MockSecretTriggerWatcher.
type MockSecretTriggerWatcherMockRecorder struct {
	mock *MockSecretTriggerWatcher
}

// NewMockSecretTriggerWatcher creates a new mock instance.
func NewMockSecretTriggerWatcher(ctrl *gomock.Controller) *MockSecretTriggerWatcher {
	mock := &MockSecretTriggerWatcher{ctrl: ctrl}
	mock.recorder = &MockSecretTriggerWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretTriggerWatcher) EXPECT() *MockSecretTriggerWatcherMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretTriggerWatcher) ISGOMOCK() struct{} {
	return struct{}{}
}

// Changes mocks base method.
func (m *MockSecretTriggerWatcher) Changes() <-chan []watcher.SecretTriggerChange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan []watcher.SecretTriggerChange)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockSecretTriggerWatcherMockRecorder) Changes() *MockSecretTriggerWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockSecretTriggerWatcher)(nil).Changes))
	return &MockSecretTriggerWatcherChangesCall{Call: call}
}

// MockSecretTriggerWatcherChangesCall wrap *gomock.Call
type MockSecretTriggerWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretTriggerWatcherChangesCall) Return(arg0 <-chan []watcher.SecretTriggerChange) *MockSecretTriggerWatcherChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretTriggerWatcherChangesCall) Do(f func() <-chan []watcher.SecretTriggerChange) *MockSecretTriggerWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretTriggerWatcherChangesCall) DoAndReturn(f func() <-chan []watcher.SecretTriggerChange) *MockSecretTriggerWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockSecretTriggerWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockSecretTriggerWatcherMockRecorder) Kill() *MockSecretTriggerWatcherKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockSecretTriggerWatcher)(nil).Kill))
	return &MockSecretTriggerWatcherKillCall{Call: call}
}

// MockSecretTriggerWatcherKillCall wrap *gomock.Call
type MockSecretTriggerWatcherKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretTriggerWatcherKillCall) Return() *MockSecretTriggerWatcherKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretTriggerWatcherKillCall) Do(f func()) *MockSecretTriggerWatcherKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretTriggerWatcherKillCall) DoAndReturn(f func()) *MockSecretTriggerWatcherKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockSecretTriggerWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockSecretTriggerWatcherMockRecorder) Wait() *MockSecretTriggerWatcherWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockSecretTriggerWatcher)(nil).Wait))
	return &MockSecretTriggerWatcherWaitCall{Call: call}
}

// MockSecretTriggerWatcherWaitCall wrap *gomock.Call
type MockSecretTriggerWatcherWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretTriggerWatcherWaitCall) Return(arg0 error) *MockSecretTriggerWatcherWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretTriggerWatcherWaitCall) Do(f func() error) *MockSecretTriggerWatcherWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretTriggerWatcherWaitCall) DoAndReturn(f func() error) *MockSecretTriggerWatcherWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
