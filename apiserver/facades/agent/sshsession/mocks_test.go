// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/sshsession (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -package sshsession_test -destination mocks_test.go github.com/juju/juju/apiserver/facades/agent/sshsession Backend
//

// Package sshsession_test is a generated GoMock package.
package sshsession_test

import (
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockBackend) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockBackendMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockBackend)(nil).ControllerConfig))
}

// GetSSHConnRequest mocks base method.
func (m *MockBackend) GetSSHConnRequest(arg0 string) (state.SSHConnRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHConnRequest", arg0)
	ret0, _ := ret[0].(state.SSHConnRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHConnRequest indicates an expected call of GetSSHConnRequest.
func (mr *MockBackendMockRecorder) GetSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHConnRequest", reflect.TypeOf((*MockBackend)(nil).GetSSHConnRequest), arg0)
}

// WatchSSHConnRequest mocks base method.
func (m *MockBackend) WatchSSHConnRequest(arg0 string) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSSHConnRequest", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchSSHConnRequest indicates an expected call of WatchSSHConnRequest.
func (mr *MockBackendMockRecorder) WatchSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSSHConnRequest", reflect.TypeOf((*MockBackend)(nil).WatchSSHConnRequest), arg0)
}
