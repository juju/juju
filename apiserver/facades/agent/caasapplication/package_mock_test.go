// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/caasapplication (interfaces: ControllerConfigService,ApplicationService,ModelAgentService,ControllerNodeService)
//
// Generated by this command:
//
//	mockgen -typed -package caasapplication -destination package_mock_test.go github.com/juju/juju/apiserver/facades/agent/caasapplication ControllerConfigService,ApplicationService,ModelAgentService,ControllerNodeService
//

// Package caasapplication is a generated GoMock package.
package caasapplication

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	semversion "github.com/juju/juju/core/semversion"
	unit "github.com/juju/juju/core/unit"
	application "github.com/juju/juju/domain/application"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// CAASUnitTerminating mocks base method.
func (m *MockApplicationService) CAASUnitTerminating(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAASUnitTerminating", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAASUnitTerminating indicates an expected call of CAASUnitTerminating.
func (mr *MockApplicationServiceMockRecorder) CAASUnitTerminating(arg0, arg1 any) *MockApplicationServiceCAASUnitTerminatingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAASUnitTerminating", reflect.TypeOf((*MockApplicationService)(nil).CAASUnitTerminating), arg0, arg1)
	return &MockApplicationServiceCAASUnitTerminatingCall{Call: call}
}

// MockApplicationServiceCAASUnitTerminatingCall wrap *gomock.Call
type MockApplicationServiceCAASUnitTerminatingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceCAASUnitTerminatingCall) Return(arg0 bool, arg1 error) *MockApplicationServiceCAASUnitTerminatingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceCAASUnitTerminatingCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationServiceCAASUnitTerminatingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceCAASUnitTerminatingCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationServiceCAASUnitTerminatingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterCAASUnit mocks base method.
func (m *MockApplicationService) RegisterCAASUnit(arg0 context.Context, arg1 application.RegisterCAASUnitParams) (unit.Name, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCAASUnit", arg0, arg1)
	ret0, _ := ret[0].(unit.Name)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterCAASUnit indicates an expected call of RegisterCAASUnit.
func (mr *MockApplicationServiceMockRecorder) RegisterCAASUnit(arg0, arg1 any) *MockApplicationServiceRegisterCAASUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCAASUnit", reflect.TypeOf((*MockApplicationService)(nil).RegisterCAASUnit), arg0, arg1)
	return &MockApplicationServiceRegisterCAASUnitCall{Call: call}
}

// MockApplicationServiceRegisterCAASUnitCall wrap *gomock.Call
type MockApplicationServiceRegisterCAASUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceRegisterCAASUnitCall) Return(arg0 unit.Name, arg1 string, arg2 error) *MockApplicationServiceRegisterCAASUnitCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceRegisterCAASUnitCall) Do(f func(context.Context, application.RegisterCAASUnitParams) (unit.Name, string, error)) *MockApplicationServiceRegisterCAASUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceRegisterCAASUnitCall) DoAndReturn(f func(context.Context, application.RegisterCAASUnitParams) (unit.Name, string, error)) *MockApplicationServiceRegisterCAASUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesForAgentsInPreferredOrder mocks base method.
func (m *MockControllerNodeService) GetAllAPIAddressesForAgentsInPreferredOrder(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgentsInPreferredOrder", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgentsInPreferredOrder indicates an expected call of GetAllAPIAddressesForAgentsInPreferredOrder.
func (mr *MockControllerNodeServiceMockRecorder) GetAllAPIAddressesForAgentsInPreferredOrder(arg0 any) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgentsInPreferredOrder", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllAPIAddressesForAgentsInPreferredOrder), arg0)
	return &MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall{Call: call}
}

// MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall wrap *gomock.Call
type MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
