// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/upgrader (interfaces: ModelAgentService)
//
// Generated by this command:
//
//	mockgen -typed -package upgrader -destination watch_mock.go github.com/juju/juju/apiserver/facades/agent/upgrader ModelAgentService
//

// Package upgrader is a generated GoMock package.
package upgrader

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockModelAgentService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetMachineTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetMachineTargetAgentVersion(arg0 context.Context, arg1 machine.Name) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineTargetAgentVersion indicates an expected call of GetMachineTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetMachineTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetMachineTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceGetMachineTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetMachineTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetMachineTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetMachineTargetAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetMachineTargetAgentVersionCall) Do(f func(context.Context, machine.Name) (version.Number, error)) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetMachineTargetAgentVersionCall) DoAndReturn(f func(context.Context, machine.Name) (version.Number, error)) *MockModelAgentServiceGetMachineTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetModelTargetAgentVersion(arg0 context.Context) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Do(f func(context.Context) (version.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (version.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetUnitTargetAgentVersion(arg0 context.Context, arg1 string) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTargetAgentVersion indicates an expected call of GetUnitTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetUnitTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetUnitTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceGetUnitTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetUnitTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetUnitTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetUnitTargetAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetUnitTargetAgentVersionCall) Do(f func(context.Context, string) (version.Number, error)) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetUnitTargetAgentVersionCall) DoAndReturn(f func(context.Context, string) (version.Number, error)) *MockModelAgentServiceGetUnitTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineTargetAgentVersion mocks base method.
func (m *MockModelAgentService) WatchMachineTargetAgentVersion(arg0 context.Context, arg1 machine.Name) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineTargetAgentVersion indicates an expected call of WatchMachineTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) WatchMachineTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).WatchMachineTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceWatchMachineTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceWatchMachineTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceWatchMachineTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceWatchMachineTargetAgentVersionCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceWatchMachineTargetAgentVersionCall) Do(f func(context.Context, machine.Name) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceWatchMachineTargetAgentVersionCall) DoAndReturn(f func(context.Context, machine.Name) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) WatchModelTargetAgentVersion(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelTargetAgentVersion indicates an expected call of WatchModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) WatchModelTargetAgentVersion(arg0 any) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).WatchModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceWatchModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceWatchModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceWatchModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceWatchModelTargetAgentVersionCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceWatchModelTargetAgentVersionCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceWatchModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitTargetAgentVersion mocks base method.
func (m *MockModelAgentService) WatchUnitTargetAgentVersion(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitTargetAgentVersion indicates an expected call of WatchUnitTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) WatchUnitTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).WatchUnitTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceWatchUnitTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceWatchUnitTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceWatchUnitTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceWatchUnitTargetAgentVersionCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceWatchUnitTargetAgentVersionCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceWatchUnitTargetAgentVersionCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
