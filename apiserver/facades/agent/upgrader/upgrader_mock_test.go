// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: Upgrader)
//
// Generated by this command:
//
//	mockgen -typed -package upgrader_test -destination upgrader_mock_test.go github.com/juju/juju/state Upgrader
//

// Package upgrader_test is a generated GoMock package.
package upgrader_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUpgrader is a mock of Upgrader interface.
type MockUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockUpgraderMockRecorder
}

// MockUpgraderMockRecorder is the mock recorder for MockUpgrader.
type MockUpgraderMockRecorder struct {
	mock *MockUpgrader
}

// NewMockUpgrader creates a new mock instance.
func NewMockUpgrader(ctrl *gomock.Controller) *MockUpgrader {
	mock := &MockUpgrader{ctrl: ctrl}
	mock.recorder = &MockUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgrader) EXPECT() *MockUpgraderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockUpgrader) ISGOMOCK() struct{} {
	return struct{}{}
}

// IsUpgrading mocks base method.
func (m *MockUpgrader) IsUpgrading() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgrading")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgrading indicates an expected call of IsUpgrading.
func (mr *MockUpgraderMockRecorder) IsUpgrading() *MockUpgraderIsUpgradingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgrading", reflect.TypeOf((*MockUpgrader)(nil).IsUpgrading))
	return &MockUpgraderIsUpgradingCall{Call: call}
}

// MockUpgraderIsUpgradingCall wrap *gomock.Call
type MockUpgraderIsUpgradingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgraderIsUpgradingCall) Return(arg0 bool, arg1 error) *MockUpgraderIsUpgradingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgraderIsUpgradingCall) Do(f func() (bool, error)) *MockUpgraderIsUpgradingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgraderIsUpgradingCall) DoAndReturn(f func() (bool, error)) *MockUpgraderIsUpgradingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
