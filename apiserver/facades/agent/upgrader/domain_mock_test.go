// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/upgrader (interfaces: ControllerConfigGetter,ModelAgentService,ControllerNodeService,MachineService)
//
// Generated by this command:
//
//	mockgen -typed -package upgrader_test -destination domain_mock_test.go github.com/juju/juju/apiserver/facades/agent/upgrader ControllerConfigGetter,ModelAgentService,ControllerNodeService,MachineService
//

// Package upgrader_test is a generated GoMock package.
package upgrader_test

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	agentbinary "github.com/juju/juju/core/agentbinary"
	machine "github.com/juju/juju/core/machine"
	semversion "github.com/juju/juju/core/semversion"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigGetter is a mock of ControllerConfigGetter interface.
type MockControllerConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigGetterMockRecorder
}

// MockControllerConfigGetterMockRecorder is the mock recorder for MockControllerConfigGetter.
type MockControllerConfigGetterMockRecorder struct {
	mock *MockControllerConfigGetter
}

// NewMockControllerConfigGetter creates a new mock instance.
func NewMockControllerConfigGetter(ctrl *gomock.Controller) *MockControllerConfigGetter {
	mock := &MockControllerConfigGetter{ctrl: ctrl}
	mock.recorder = &MockControllerConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigGetter) EXPECT() *MockControllerConfigGetterMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigGetter) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigGetterMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigGetterControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigGetter)(nil).ControllerConfig), arg0)
	return &MockControllerConfigGetterControllerConfigCall{Call: call}
}

// MockControllerConfigGetterControllerConfigCall wrap *gomock.Call
type MockControllerConfigGetterControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigGetterControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigGetterControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigGetterControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineReportedAgentVersion mocks base method.
func (m *MockModelAgentService) SetMachineReportedAgentVersion(arg0 context.Context, arg1 machine.Name, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineReportedAgentVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineReportedAgentVersion indicates an expected call of SetMachineReportedAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) SetMachineReportedAgentVersion(arg0, arg1, arg2 any) *MockModelAgentServiceSetMachineReportedAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineReportedAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).SetMachineReportedAgentVersion), arg0, arg1, arg2)
	return &MockModelAgentServiceSetMachineReportedAgentVersionCall{Call: call}
}

// MockModelAgentServiceSetMachineReportedAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceSetMachineReportedAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceSetMachineReportedAgentVersionCall) Return(arg0 error) *MockModelAgentServiceSetMachineReportedAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceSetMachineReportedAgentVersionCall) Do(f func(context.Context, machine.Name, agentbinary.Version) error) *MockModelAgentServiceSetMachineReportedAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceSetMachineReportedAgentVersionCall) DoAndReturn(f func(context.Context, machine.Name, agentbinary.Version) error) *MockModelAgentServiceSetMachineReportedAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitReportedAgentVersion mocks base method.
func (m *MockModelAgentService) SetUnitReportedAgentVersion(arg0 context.Context, arg1 unit.Name, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitReportedAgentVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitReportedAgentVersion indicates an expected call of SetUnitReportedAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) SetUnitReportedAgentVersion(arg0, arg1, arg2 any) *MockModelAgentServiceSetUnitReportedAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitReportedAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).SetUnitReportedAgentVersion), arg0, arg1, arg2)
	return &MockModelAgentServiceSetUnitReportedAgentVersionCall{Call: call}
}

// MockModelAgentServiceSetUnitReportedAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceSetUnitReportedAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceSetUnitReportedAgentVersionCall) Return(arg0 error) *MockModelAgentServiceSetUnitReportedAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceSetUnitReportedAgentVersionCall) Do(f func(context.Context, unit.Name, agentbinary.Version) error) *MockModelAgentServiceSetUnitReportedAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceSetUnitReportedAgentVersionCall) DoAndReturn(f func(context.Context, unit.Name, agentbinary.Version) error) *MockModelAgentServiceSetUnitReportedAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineTargetAgentVersion mocks base method.
func (m *MockModelAgentService) WatchMachineTargetAgentVersion(arg0 context.Context, arg1 machine.Name) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineTargetAgentVersion indicates an expected call of WatchMachineTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) WatchMachineTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).WatchMachineTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceWatchMachineTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceWatchMachineTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceWatchMachineTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceWatchMachineTargetAgentVersionCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceWatchMachineTargetAgentVersionCall) Do(f func(context.Context, machine.Name) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceWatchMachineTargetAgentVersionCall) DoAndReturn(f func(context.Context, machine.Name) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchMachineTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) WatchModelTargetAgentVersion(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelTargetAgentVersion indicates an expected call of WatchModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) WatchModelTargetAgentVersion(arg0 any) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).WatchModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceWatchModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceWatchModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceWatchModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceWatchModelTargetAgentVersionCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceWatchModelTargetAgentVersionCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceWatchModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitTargetAgentVersion mocks base method.
func (m *MockModelAgentService) WatchUnitTargetAgentVersion(arg0 context.Context, arg1 unit.Name) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitTargetAgentVersion indicates an expected call of WatchUnitTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) WatchUnitTargetAgentVersion(arg0, arg1 any) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).WatchUnitTargetAgentVersion), arg0, arg1)
	return &MockModelAgentServiceWatchUnitTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceWatchUnitTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceWatchUnitTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceWatchUnitTargetAgentVersionCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceWatchUnitTargetAgentVersionCall) Do(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceWatchUnitTargetAgentVersionCall) DoAndReturn(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockModelAgentServiceWatchUnitTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// SetControllerNodeReportedAgentVersion mocks base method.
func (m *MockControllerNodeService) SetControllerNodeReportedAgentVersion(arg0 context.Context, arg1 string, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerNodeReportedAgentVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerNodeReportedAgentVersion indicates an expected call of SetControllerNodeReportedAgentVersion.
func (mr *MockControllerNodeServiceMockRecorder) SetControllerNodeReportedAgentVersion(arg0, arg1, arg2 any) *MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerNodeReportedAgentVersion", reflect.TypeOf((*MockControllerNodeService)(nil).SetControllerNodeReportedAgentVersion), arg0, arg1, arg2)
	return &MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall{Call: call}
}

// MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall wrap *gomock.Call
type MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall) Return(arg0 error) *MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall) Do(f func(context.Context, string, agentbinary.Version) error) *MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall) DoAndReturn(f func(context.Context, string, agentbinary.Version) error) *MockControllerNodeServiceSetControllerNodeReportedAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// IsMachineController mocks base method.
func (m *MockMachineService) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockMachineServiceMockRecorder) IsMachineController(arg0, arg1 any) *MockMachineServiceIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockMachineService)(nil).IsMachineController), arg0, arg1)
	return &MockMachineServiceIsMachineControllerCall{Call: call}
}

// MockMachineServiceIsMachineControllerCall wrap *gomock.Call
type MockMachineServiceIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
