// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/diskmanager (interfaces: MachineService,BlockDeviceService)
//
// Generated by this command:
//
//	mockgen -typed -package diskmanager -destination service_mock_test.go github.com/juju/juju/apiserver/facades/agent/diskmanager MachineService,BlockDeviceService
//

// Package diskmanager is a generated GoMock package.
package diskmanager

import (
	context "context"
	reflect "reflect"

	blockdevice "github.com/juju/juju/core/blockdevice"
	machine "github.com/juju/juju/core/machine"
	gomock "go.uber.org/mock/gomock"
)

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockDeviceService is a mock of BlockDeviceService interface.
type MockBlockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceServiceMockRecorder
}

// MockBlockDeviceServiceMockRecorder is the mock recorder for MockBlockDeviceService.
type MockBlockDeviceServiceMockRecorder struct {
	mock *MockBlockDeviceService
}

// NewMockBlockDeviceService creates a new mock instance.
func NewMockBlockDeviceService(ctrl *gomock.Controller) *MockBlockDeviceService {
	mock := &MockBlockDeviceService{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceService) EXPECT() *MockBlockDeviceServiceMockRecorder {
	return m.recorder
}

// UpdateBlockDevicesForMachine mocks base method.
func (m *MockBlockDeviceService) UpdateBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID, arg2 []blockdevice.BlockDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockDevicesForMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockDevicesForMachine indicates an expected call of UpdateBlockDevicesForMachine.
func (mr *MockBlockDeviceServiceMockRecorder) UpdateBlockDevicesForMachine(arg0, arg1, arg2 any) *MockBlockDeviceServiceUpdateBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockDevicesForMachine", reflect.TypeOf((*MockBlockDeviceService)(nil).UpdateBlockDevicesForMachine), arg0, arg1, arg2)
	return &MockBlockDeviceServiceUpdateBlockDevicesForMachineCall{Call: call}
}

// MockBlockDeviceServiceUpdateBlockDevicesForMachineCall wrap *gomock.Call
type MockBlockDeviceServiceUpdateBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceUpdateBlockDevicesForMachineCall) Return(arg0 error) *MockBlockDeviceServiceUpdateBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceUpdateBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID, []blockdevice.BlockDevice) error) *MockBlockDeviceServiceUpdateBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceUpdateBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID, []blockdevice.BlockDevice) error) *MockBlockDeviceServiceUpdateBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
