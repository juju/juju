// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/instancemutater (interfaces: InstanceMutatorWatcher,InstanceMutaterState,Machine,Unit,Application,Charm,MachineService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/instancemutater_mock.go github.com/juju/juju/apiserver/facades/agent/instancemutater InstanceMutatorWatcher,InstanceMutaterState,Machine,Unit,Application,Charm,MachineService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	instancemutater "github.com/juju/juju/apiserver/facades/agent/instancemutater"
	instance "github.com/juju/juju/core/instance"
	logger "github.com/juju/juju/core/logger"
	lxdprofile "github.com/juju/juju/core/lxdprofile"
	machine "github.com/juju/juju/core/machine"
	status "github.com/juju/juju/core/status"
	watcher "github.com/juju/juju/core/watcher"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceMutatorWatcher is a mock of InstanceMutatorWatcher interface.
type MockInstanceMutatorWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMutatorWatcherMockRecorder
}

// MockInstanceMutatorWatcherMockRecorder is the mock recorder for MockInstanceMutatorWatcher.
type MockInstanceMutatorWatcherMockRecorder struct {
	mock *MockInstanceMutatorWatcher
}

// NewMockInstanceMutatorWatcher creates a new mock instance.
func NewMockInstanceMutatorWatcher(ctrl *gomock.Controller) *MockInstanceMutatorWatcher {
	mock := &MockInstanceMutatorWatcher{ctrl: ctrl}
	mock.recorder = &MockInstanceMutatorWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceMutatorWatcher) EXPECT() *MockInstanceMutatorWatcherMockRecorder {
	return m.recorder
}

// WatchLXDProfileVerificationForMachine mocks base method.
func (m *MockInstanceMutatorWatcher) WatchLXDProfileVerificationForMachine(arg0 context.Context, arg1 instancemutater.Machine, arg2 logger.Logger) (state.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLXDProfileVerificationForMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(state.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLXDProfileVerificationForMachine indicates an expected call of WatchLXDProfileVerificationForMachine.
func (mr *MockInstanceMutatorWatcherMockRecorder) WatchLXDProfileVerificationForMachine(arg0, arg1, arg2 any) *MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLXDProfileVerificationForMachine", reflect.TypeOf((*MockInstanceMutatorWatcher)(nil).WatchLXDProfileVerificationForMachine), arg0, arg1, arg2)
	return &MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall{Call: call}
}

// MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall wrap *gomock.Call
type MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall) Return(arg0 state.NotifyWatcher, arg1 error) *MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall) Do(f func(context.Context, instancemutater.Machine, logger.Logger) (state.NotifyWatcher, error)) *MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall) DoAndReturn(f func(context.Context, instancemutater.Machine, logger.Logger) (state.NotifyWatcher, error)) *MockInstanceMutatorWatcherWatchLXDProfileVerificationForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstanceMutaterState is a mock of InstanceMutaterState interface.
type MockInstanceMutaterState struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMutaterStateMockRecorder
}

// MockInstanceMutaterStateMockRecorder is the mock recorder for MockInstanceMutaterState.
type MockInstanceMutaterStateMockRecorder struct {
	mock *MockInstanceMutaterState
}

// NewMockInstanceMutaterState creates a new mock instance.
func NewMockInstanceMutaterState(ctrl *gomock.Controller) *MockInstanceMutaterState {
	mock := &MockInstanceMutaterState{ctrl: ctrl}
	mock.recorder = &MockInstanceMutaterStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceMutaterState) EXPECT() *MockInstanceMutaterStateMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockInstanceMutaterState) Application(arg0 string) (instancemutater.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(instancemutater.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application.
func (mr *MockInstanceMutaterStateMockRecorder) Application(arg0 any) *MockInstanceMutaterStateApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockInstanceMutaterState)(nil).Application), arg0)
	return &MockInstanceMutaterStateApplicationCall{Call: call}
}

// MockInstanceMutaterStateApplicationCall wrap *gomock.Call
type MockInstanceMutaterStateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateApplicationCall) Return(arg0 instancemutater.Application, arg1 error) *MockInstanceMutaterStateApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateApplicationCall) Do(f func(string) (instancemutater.Application, error)) *MockInstanceMutaterStateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateApplicationCall) DoAndReturn(f func(string) (instancemutater.Application, error)) *MockInstanceMutaterStateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Charm mocks base method.
func (m *MockInstanceMutaterState) Charm(arg0 string) (instancemutater.Charm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Charm", arg0)
	ret0, _ := ret[0].(instancemutater.Charm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Charm indicates an expected call of Charm.
func (mr *MockInstanceMutaterStateMockRecorder) Charm(arg0 any) *MockInstanceMutaterStateCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charm", reflect.TypeOf((*MockInstanceMutaterState)(nil).Charm), arg0)
	return &MockInstanceMutaterStateCharmCall{Call: call}
}

// MockInstanceMutaterStateCharmCall wrap *gomock.Call
type MockInstanceMutaterStateCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateCharmCall) Return(arg0 instancemutater.Charm, arg1 error) *MockInstanceMutaterStateCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateCharmCall) Do(f func(string) (instancemutater.Charm, error)) *MockInstanceMutaterStateCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateCharmCall) DoAndReturn(f func(string) (instancemutater.Charm, error)) *MockInstanceMutaterStateCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerTimestamp mocks base method.
func (m *MockInstanceMutaterState) ControllerTimestamp() (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTimestamp")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerTimestamp indicates an expected call of ControllerTimestamp.
func (mr *MockInstanceMutaterStateMockRecorder) ControllerTimestamp() *MockInstanceMutaterStateControllerTimestampCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTimestamp", reflect.TypeOf((*MockInstanceMutaterState)(nil).ControllerTimestamp))
	return &MockInstanceMutaterStateControllerTimestampCall{Call: call}
}

// MockInstanceMutaterStateControllerTimestampCall wrap *gomock.Call
type MockInstanceMutaterStateControllerTimestampCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateControllerTimestampCall) Return(arg0 *time.Time, arg1 error) *MockInstanceMutaterStateControllerTimestampCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateControllerTimestampCall) Do(f func() (*time.Time, error)) *MockInstanceMutaterStateControllerTimestampCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateControllerTimestampCall) DoAndReturn(f func() (*time.Time, error)) *MockInstanceMutaterStateControllerTimestampCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindEntity mocks base method.
func (m *MockInstanceMutaterState) FindEntity(arg0 names.Tag) (state.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity.
func (mr *MockInstanceMutaterStateMockRecorder) FindEntity(arg0 any) *MockInstanceMutaterStateFindEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockInstanceMutaterState)(nil).FindEntity), arg0)
	return &MockInstanceMutaterStateFindEntityCall{Call: call}
}

// MockInstanceMutaterStateFindEntityCall wrap *gomock.Call
type MockInstanceMutaterStateFindEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateFindEntityCall) Return(arg0 state.Entity, arg1 error) *MockInstanceMutaterStateFindEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateFindEntityCall) Do(f func(names.Tag) (state.Entity, error)) *MockInstanceMutaterStateFindEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateFindEntityCall) DoAndReturn(f func(names.Tag) (state.Entity, error)) *MockInstanceMutaterStateFindEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockInstanceMutaterState) Machine(arg0 string) (instancemutater.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(instancemutater.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockInstanceMutaterStateMockRecorder) Machine(arg0 any) *MockInstanceMutaterStateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockInstanceMutaterState)(nil).Machine), arg0)
	return &MockInstanceMutaterStateMachineCall{Call: call}
}

// MockInstanceMutaterStateMachineCall wrap *gomock.Call
type MockInstanceMutaterStateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateMachineCall) Return(arg0 instancemutater.Machine, arg1 error) *MockInstanceMutaterStateMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateMachineCall) Do(f func(string) (instancemutater.Machine, error)) *MockInstanceMutaterStateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateMachineCall) DoAndReturn(f func(string) (instancemutater.Machine, error)) *MockInstanceMutaterStateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelName mocks base method.
func (m *MockInstanceMutaterState) ModelName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelName indicates an expected call of ModelName.
func (mr *MockInstanceMutaterStateMockRecorder) ModelName() *MockInstanceMutaterStateModelNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelName", reflect.TypeOf((*MockInstanceMutaterState)(nil).ModelName))
	return &MockInstanceMutaterStateModelNameCall{Call: call}
}

// MockInstanceMutaterStateModelNameCall wrap *gomock.Call
type MockInstanceMutaterStateModelNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateModelNameCall) Return(arg0 string, arg1 error) *MockInstanceMutaterStateModelNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateModelNameCall) Do(f func() (string, error)) *MockInstanceMutaterStateModelNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateModelNameCall) DoAndReturn(f func() (string, error)) *MockInstanceMutaterStateModelNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockInstanceMutaterState) Unit(arg0 string) (instancemutater.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(instancemutater.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockInstanceMutaterStateMockRecorder) Unit(arg0 any) *MockInstanceMutaterStateUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockInstanceMutaterState)(nil).Unit), arg0)
	return &MockInstanceMutaterStateUnitCall{Call: call}
}

// MockInstanceMutaterStateUnitCall wrap *gomock.Call
type MockInstanceMutaterStateUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateUnitCall) Return(arg0 instancemutater.Unit, arg1 error) *MockInstanceMutaterStateUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateUnitCall) Do(f func(string) (instancemutater.Unit, error)) *MockInstanceMutaterStateUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateUnitCall) DoAndReturn(f func(string) (instancemutater.Unit, error)) *MockInstanceMutaterStateUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationCharms mocks base method.
func (m *MockInstanceMutaterState) WatchApplicationCharms() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationCharms")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchApplicationCharms indicates an expected call of WatchApplicationCharms.
func (mr *MockInstanceMutaterStateMockRecorder) WatchApplicationCharms() *MockInstanceMutaterStateWatchApplicationCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationCharms", reflect.TypeOf((*MockInstanceMutaterState)(nil).WatchApplicationCharms))
	return &MockInstanceMutaterStateWatchApplicationCharmsCall{Call: call}
}

// MockInstanceMutaterStateWatchApplicationCharmsCall wrap *gomock.Call
type MockInstanceMutaterStateWatchApplicationCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateWatchApplicationCharmsCall) Return(arg0 state.StringsWatcher) *MockInstanceMutaterStateWatchApplicationCharmsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateWatchApplicationCharmsCall) Do(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchApplicationCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateWatchApplicationCharmsCall) DoAndReturn(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchApplicationCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchCharms mocks base method.
func (m *MockInstanceMutaterState) WatchCharms() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCharms")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchCharms indicates an expected call of WatchCharms.
func (mr *MockInstanceMutaterStateMockRecorder) WatchCharms() *MockInstanceMutaterStateWatchCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCharms", reflect.TypeOf((*MockInstanceMutaterState)(nil).WatchCharms))
	return &MockInstanceMutaterStateWatchCharmsCall{Call: call}
}

// MockInstanceMutaterStateWatchCharmsCall wrap *gomock.Call
type MockInstanceMutaterStateWatchCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateWatchCharmsCall) Return(arg0 state.StringsWatcher) *MockInstanceMutaterStateWatchCharmsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateWatchCharmsCall) Do(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateWatchCharmsCall) DoAndReturn(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachines mocks base method.
func (m *MockInstanceMutaterState) WatchMachines() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachines")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchMachines indicates an expected call of WatchMachines.
func (mr *MockInstanceMutaterStateMockRecorder) WatchMachines() *MockInstanceMutaterStateWatchMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachines", reflect.TypeOf((*MockInstanceMutaterState)(nil).WatchMachines))
	return &MockInstanceMutaterStateWatchMachinesCall{Call: call}
}

// MockInstanceMutaterStateWatchMachinesCall wrap *gomock.Call
type MockInstanceMutaterStateWatchMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateWatchMachinesCall) Return(arg0 state.StringsWatcher) *MockInstanceMutaterStateWatchMachinesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateWatchMachinesCall) Do(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateWatchMachinesCall) DoAndReturn(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelMachines mocks base method.
func (m *MockInstanceMutaterState) WatchModelMachines() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelMachines")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelMachines indicates an expected call of WatchModelMachines.
func (mr *MockInstanceMutaterStateMockRecorder) WatchModelMachines() *MockInstanceMutaterStateWatchModelMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelMachines", reflect.TypeOf((*MockInstanceMutaterState)(nil).WatchModelMachines))
	return &MockInstanceMutaterStateWatchModelMachinesCall{Call: call}
}

// MockInstanceMutaterStateWatchModelMachinesCall wrap *gomock.Call
type MockInstanceMutaterStateWatchModelMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateWatchModelMachinesCall) Return(arg0 state.StringsWatcher) *MockInstanceMutaterStateWatchModelMachinesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateWatchModelMachinesCall) Do(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchModelMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateWatchModelMachinesCall) DoAndReturn(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchModelMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnits mocks base method.
func (m *MockInstanceMutaterState) WatchUnits() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnits")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchUnits indicates an expected call of WatchUnits.
func (mr *MockInstanceMutaterStateMockRecorder) WatchUnits() *MockInstanceMutaterStateWatchUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnits", reflect.TypeOf((*MockInstanceMutaterState)(nil).WatchUnits))
	return &MockInstanceMutaterStateWatchUnitsCall{Call: call}
}

// MockInstanceMutaterStateWatchUnitsCall wrap *gomock.Call
type MockInstanceMutaterStateWatchUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceMutaterStateWatchUnitsCall) Return(arg0 state.StringsWatcher) *MockInstanceMutaterStateWatchUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceMutaterStateWatchUnitsCall) Do(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceMutaterStateWatchUnitsCall) DoAndReturn(f func() state.StringsWatcher) *MockInstanceMutaterStateWatchUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// ContainerType mocks base method.
func (m *MockMachine) ContainerType() instance.ContainerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(instance.ContainerType)
	return ret0
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockMachineMockRecorder) ContainerType() *MockMachineContainerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockMachine)(nil).ContainerType))
	return &MockMachineContainerTypeCall{Call: call}
}

// MockMachineContainerTypeCall wrap *gomock.Call
type MockMachineContainerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineContainerTypeCall) Return(arg0 instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineContainerTypeCall) Do(f func() instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineContainerTypeCall) DoAndReturn(f func() instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockMachine) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockMachineMockRecorder) Id() *MockMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMachine)(nil).Id))
	return &MockMachineIdCall{Call: call}
}

// MockMachineIdCall wrap *gomock.Call
type MockMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineIdCall) Return(arg0 string) *MockMachineIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineIdCall) Do(f func() string) *MockMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineIdCall) DoAndReturn(f func() string) *MockMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsManual mocks base method.
func (m *MockMachine) IsManual() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsManual")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsManual indicates an expected call of IsManual.
func (mr *MockMachineMockRecorder) IsManual() *MockMachineIsManualCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsManual", reflect.TypeOf((*MockMachine)(nil).IsManual))
	return &MockMachineIsManualCall{Call: call}
}

// MockMachineIsManualCall wrap *gomock.Call
type MockMachineIsManualCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineIsManualCall) Return(arg0 bool, arg1 error) *MockMachineIsManualCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineIsManualCall) Do(f func() (bool, error)) *MockMachineIsManualCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineIsManualCall) DoAndReturn(f func() (bool, error)) *MockMachineIsManualCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModificationStatus mocks base method.
func (m *MockMachine) SetModificationStatus(arg0 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModificationStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModificationStatus indicates an expected call of SetModificationStatus.
func (mr *MockMachineMockRecorder) SetModificationStatus(arg0 any) *MockMachineSetModificationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModificationStatus", reflect.TypeOf((*MockMachine)(nil).SetModificationStatus), arg0)
	return &MockMachineSetModificationStatusCall{Call: call}
}

// MockMachineSetModificationStatusCall wrap *gomock.Call
type MockMachineSetModificationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetModificationStatusCall) Return(arg0 error) *MockMachineSetModificationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetModificationStatusCall) Do(f func(status.StatusInfo) error) *MockMachineSetModificationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetModificationStatusCall) DoAndReturn(f func(status.StatusInfo) error) *MockMachineSetModificationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Units mocks base method.
func (m *MockMachine) Units() ([]instancemutater.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Units")
	ret0, _ := ret[0].([]instancemutater.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Units indicates an expected call of Units.
func (mr *MockMachineMockRecorder) Units() *MockMachineUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Units", reflect.TypeOf((*MockMachine)(nil).Units))
	return &MockMachineUnitsCall{Call: call}
}

// MockMachineUnitsCall wrap *gomock.Call
type MockMachineUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineUnitsCall) Return(arg0 []instancemutater.Unit, arg1 error) *MockMachineUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineUnitsCall) Do(f func() ([]instancemutater.Unit, error)) *MockMachineUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineUnitsCall) DoAndReturn(f func() ([]instancemutater.Unit, error)) *MockMachineUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchContainers mocks base method.
func (m *MockMachine) WatchContainers(arg0 instance.ContainerType) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchContainers", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchContainers indicates an expected call of WatchContainers.
func (mr *MockMachineMockRecorder) WatchContainers(arg0 any) *MockMachineWatchContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchContainers", reflect.TypeOf((*MockMachine)(nil).WatchContainers), arg0)
	return &MockMachineWatchContainersCall{Call: call}
}

// MockMachineWatchContainersCall wrap *gomock.Call
type MockMachineWatchContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineWatchContainersCall) Return(arg0 state.StringsWatcher) *MockMachineWatchContainersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineWatchContainersCall) Do(f func(instance.ContainerType) state.StringsWatcher) *MockMachineWatchContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineWatchContainersCall) DoAndReturn(f func(instance.ContainerType) state.StringsWatcher) *MockMachineWatchContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnit is a mock of Unit interface.
type MockUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMockRecorder
}

// MockUnitMockRecorder is the mock recorder for MockUnit.
type MockUnitMockRecorder struct {
	mock *MockUnit
}

// NewMockUnit creates a new mock instance.
func NewMockUnit(ctrl *gomock.Controller) *MockUnit {
	mock := &MockUnit{ctrl: ctrl}
	mock.recorder = &MockUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnit) EXPECT() *MockUnitMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockUnit) Application() (instancemutater.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(instancemutater.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application.
func (mr *MockUnitMockRecorder) Application() *MockUnitApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockUnit)(nil).Application))
	return &MockUnitApplicationCall{Call: call}
}

// MockUnitApplicationCall wrap *gomock.Call
type MockUnitApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitApplicationCall) Return(arg0 instancemutater.Application, arg1 error) *MockUnitApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitApplicationCall) Do(f func() (instancemutater.Application, error)) *MockUnitApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitApplicationCall) DoAndReturn(f func() (instancemutater.Application, error)) *MockUnitApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationName mocks base method.
func (m *MockUnit) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockUnitMockRecorder) ApplicationName() *MockUnitApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockUnit)(nil).ApplicationName))
	return &MockUnitApplicationNameCall{Call: call}
}

// MockUnitApplicationNameCall wrap *gomock.Call
type MockUnitApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitApplicationNameCall) Return(arg0 string) *MockUnitApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitApplicationNameCall) Do(f func() string) *MockUnitApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitApplicationNameCall) DoAndReturn(f func() string) *MockUnitApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AssignedMachineId mocks base method.
func (m *MockUnit) AssignedMachineId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignedMachineId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignedMachineId indicates an expected call of AssignedMachineId.
func (mr *MockUnitMockRecorder) AssignedMachineId() *MockUnitAssignedMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignedMachineId", reflect.TypeOf((*MockUnit)(nil).AssignedMachineId))
	return &MockUnitAssignedMachineIdCall{Call: call}
}

// MockUnitAssignedMachineIdCall wrap *gomock.Call
type MockUnitAssignedMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitAssignedMachineIdCall) Return(arg0 string, arg1 error) *MockUnitAssignedMachineIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitAssignedMachineIdCall) Do(f func() (string, error)) *MockUnitAssignedMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitAssignedMachineIdCall) DoAndReturn(f func() (string, error)) *MockUnitAssignedMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CharmURL mocks base method.
func (m *MockUnit) CharmURL() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmURL")
	ret0, _ := ret[0].(*string)
	return ret0
}

// CharmURL indicates an expected call of CharmURL.
func (mr *MockUnitMockRecorder) CharmURL() *MockUnitCharmURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmURL", reflect.TypeOf((*MockUnit)(nil).CharmURL))
	return &MockUnitCharmURLCall{Call: call}
}

// MockUnitCharmURLCall wrap *gomock.Call
type MockUnitCharmURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitCharmURLCall) Return(arg0 *string) *MockUnitCharmURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitCharmURLCall) Do(f func() *string) *MockUnitCharmURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitCharmURLCall) DoAndReturn(f func() *string) *MockUnitCharmURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockUnit) Life() state.Life {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(state.Life)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockUnitMockRecorder) Life() *MockUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockUnit)(nil).Life))
	return &MockUnitLifeCall{Call: call}
}

// MockUnitLifeCall wrap *gomock.Call
type MockUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitLifeCall) Return(arg0 state.Life) *MockUnitLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitLifeCall) Do(f func() state.Life) *MockUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitLifeCall) DoAndReturn(f func() state.Life) *MockUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockUnit) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUnitMockRecorder) Name() *MockUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUnit)(nil).Name))
	return &MockUnitNameCall{Call: call}
}

// MockUnitNameCall wrap *gomock.Call
type MockUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitNameCall) Return(arg0 string) *MockUnitNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitNameCall) Do(f func() string) *MockUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitNameCall) DoAndReturn(f func() string) *MockUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrincipalName mocks base method.
func (m *MockUnit) PrincipalName() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrincipalName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// PrincipalName indicates an expected call of PrincipalName.
func (mr *MockUnitMockRecorder) PrincipalName() *MockUnitPrincipalNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrincipalName", reflect.TypeOf((*MockUnit)(nil).PrincipalName))
	return &MockUnitPrincipalNameCall{Call: call}
}

// MockUnitPrincipalNameCall wrap *gomock.Call
type MockUnitPrincipalNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitPrincipalNameCall) Return(arg0 string, arg1 bool) *MockUnitPrincipalNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitPrincipalNameCall) Do(f func() (string, bool)) *MockUnitPrincipalNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitPrincipalNameCall) DoAndReturn(f func() (string, bool)) *MockUnitPrincipalNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CharmURL mocks base method.
func (m *MockApplication) CharmURL() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmURL")
	ret0, _ := ret[0].(*string)
	return ret0
}

// CharmURL indicates an expected call of CharmURL.
func (mr *MockApplicationMockRecorder) CharmURL() *MockApplicationCharmURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmURL", reflect.TypeOf((*MockApplication)(nil).CharmURL))
	return &MockApplicationCharmURLCall{Call: call}
}

// MockApplicationCharmURLCall wrap *gomock.Call
type MockApplicationCharmURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationCharmURLCall) Return(arg0 *string) *MockApplicationCharmURLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationCharmURLCall) Do(f func() *string) *MockApplicationCharmURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationCharmURLCall) DoAndReturn(f func() *string) *MockApplicationCharmURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharm is a mock of Charm interface.
type MockCharm struct {
	ctrl     *gomock.Controller
	recorder *MockCharmMockRecorder
}

// MockCharmMockRecorder is the mock recorder for MockCharm.
type MockCharmMockRecorder struct {
	mock *MockCharm
}

// NewMockCharm creates a new mock instance.
func NewMockCharm(ctrl *gomock.Controller) *MockCharm {
	mock := &MockCharm{ctrl: ctrl}
	mock.recorder = &MockCharmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharm) EXPECT() *MockCharmMockRecorder {
	return m.recorder
}

// LXDProfile mocks base method.
func (m *MockCharm) LXDProfile() lxdprofile.Profile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfile")
	ret0, _ := ret[0].(lxdprofile.Profile)
	return ret0
}

// LXDProfile indicates an expected call of LXDProfile.
func (mr *MockCharmMockRecorder) LXDProfile() *MockCharmLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfile", reflect.TypeOf((*MockCharm)(nil).LXDProfile))
	return &MockCharmLXDProfileCall{Call: call}
}

// MockCharmLXDProfileCall wrap *gomock.Call
type MockCharmLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmLXDProfileCall) Return(arg0 lxdprofile.Profile) *MockCharmLXDProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmLXDProfileCall) Do(f func() lxdprofile.Profile) *MockCharmLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmLXDProfileCall) DoAndReturn(f func() lxdprofile.Profile) *MockCharmLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Revision mocks base method.
func (m *MockCharm) Revision() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revision")
	ret0, _ := ret[0].(int)
	return ret0
}

// Revision indicates an expected call of Revision.
func (mr *MockCharmMockRecorder) Revision() *MockCharmRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revision", reflect.TypeOf((*MockCharm)(nil).Revision))
	return &MockCharmRevisionCall{Call: call}
}

// MockCharmRevisionCall wrap *gomock.Call
type MockCharmRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmRevisionCall) Return(arg0 int) *MockCharmRevisionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmRevisionCall) Do(f func() int) *MockCharmRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmRevisionCall) DoAndReturn(f func() int) *MockCharmRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// AppliedLXDProfileNames mocks base method.
func (m *MockMachineService) AppliedLXDProfileNames(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppliedLXDProfileNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppliedLXDProfileNames indicates an expected call of AppliedLXDProfileNames.
func (mr *MockMachineServiceMockRecorder) AppliedLXDProfileNames(arg0, arg1 any) *MockMachineServiceAppliedLXDProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppliedLXDProfileNames", reflect.TypeOf((*MockMachineService)(nil).AppliedLXDProfileNames), arg0, arg1)
	return &MockMachineServiceAppliedLXDProfileNamesCall{Call: call}
}

// MockMachineServiceAppliedLXDProfileNamesCall wrap *gomock.Call
type MockMachineServiceAppliedLXDProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceAppliedLXDProfileNamesCall) Return(arg0 []string, arg1 error) *MockMachineServiceAppliedLXDProfileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceAppliedLXDProfileNamesCall) Do(f func(context.Context, string) ([]string, error)) *MockMachineServiceAppliedLXDProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceAppliedLXDProfileNamesCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockMachineServiceAppliedLXDProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 string, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (string, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (string, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceID mocks base method.
func (m *MockMachineService) InstanceID(arg0 context.Context, arg1 string) (instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceID", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceID indicates an expected call of InstanceID.
func (mr *MockMachineServiceMockRecorder) InstanceID(arg0, arg1 any) *MockMachineServiceInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceID", reflect.TypeOf((*MockMachineService)(nil).InstanceID), arg0, arg1)
	return &MockMachineServiceInstanceIDCall{Call: call}
}

// MockMachineServiceInstanceIDCall wrap *gomock.Call
type MockMachineServiceInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceInstanceIDCall) Return(arg0 instance.Id, arg1 error) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceInstanceIDCall) Do(f func(context.Context, string) (instance.Id, error)) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceInstanceIDCall) DoAndReturn(f func(context.Context, string) (instance.Id, error)) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAppliedLXDProfileNames mocks base method.
func (m *MockMachineService) SetAppliedLXDProfileNames(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppliedLXDProfileNames", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppliedLXDProfileNames indicates an expected call of SetAppliedLXDProfileNames.
func (mr *MockMachineServiceMockRecorder) SetAppliedLXDProfileNames(arg0, arg1, arg2 any) *MockMachineServiceSetAppliedLXDProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppliedLXDProfileNames", reflect.TypeOf((*MockMachineService)(nil).SetAppliedLXDProfileNames), arg0, arg1, arg2)
	return &MockMachineServiceSetAppliedLXDProfileNamesCall{Call: call}
}

// MockMachineServiceSetAppliedLXDProfileNamesCall wrap *gomock.Call
type MockMachineServiceSetAppliedLXDProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceSetAppliedLXDProfileNamesCall) Return(arg0 error) *MockMachineServiceSetAppliedLXDProfileNamesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceSetAppliedLXDProfileNamesCall) Do(f func(context.Context, string, []string) error) *MockMachineServiceSetAppliedLXDProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceSetAppliedLXDProfileNamesCall) DoAndReturn(f func(context.Context, string, []string) error) *MockMachineServiceSetAppliedLXDProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchLXDProfiles mocks base method.
func (m *MockMachineService) WatchLXDProfiles(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLXDProfiles", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLXDProfiles indicates an expected call of WatchLXDProfiles.
func (mr *MockMachineServiceMockRecorder) WatchLXDProfiles(arg0, arg1 any) *MockMachineServiceWatchLXDProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLXDProfiles", reflect.TypeOf((*MockMachineService)(nil).WatchLXDProfiles), arg0, arg1)
	return &MockMachineServiceWatchLXDProfilesCall{Call: call}
}

// MockMachineServiceWatchLXDProfilesCall wrap *gomock.Call
type MockMachineServiceWatchLXDProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceWatchLXDProfilesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockMachineServiceWatchLXDProfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceWatchLXDProfilesCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockMachineServiceWatchLXDProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceWatchLXDProfilesCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockMachineServiceWatchLXDProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
