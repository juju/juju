// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/instancemutater (interfaces: ModelCache,ModelCacheMachine)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	instancemutater "github.com/juju/juju/apiserver/facades/agent/instancemutater"
	cache "github.com/juju/juju/core/cache"
	instance "github.com/juju/juju/core/instance"
)

// MockModelCache is a mock of ModelCache interface.
type MockModelCache struct {
	ctrl     *gomock.Controller
	recorder *MockModelCacheMockRecorder
}

// MockModelCacheMockRecorder is the mock recorder for MockModelCache.
type MockModelCacheMockRecorder struct {
	mock *MockModelCache
}

// NewMockModelCache creates a new mock instance.
func NewMockModelCache(ctrl *gomock.Controller) *MockModelCache {
	mock := &MockModelCache{ctrl: ctrl}
	mock.recorder = &MockModelCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelCache) EXPECT() *MockModelCacheMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockModelCache) Machine(arg0 string) (instancemutater.ModelCacheMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(instancemutater.ModelCacheMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockModelCacheMockRecorder) Machine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockModelCache)(nil).Machine), arg0)
}

// Name mocks base method.
func (m *MockModelCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockModelCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockModelCache)(nil).Name))
}

// WatchMachines mocks base method.
func (m *MockModelCache) WatchMachines() (cache.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachines")
	ret0, _ := ret[0].(cache.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachines indicates an expected call of WatchMachines.
func (mr *MockModelCacheMockRecorder) WatchMachines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachines", reflect.TypeOf((*MockModelCache)(nil).WatchMachines))
}

// MockModelCacheMachine is a mock of ModelCacheMachine interface.
type MockModelCacheMachine struct {
	ctrl     *gomock.Controller
	recorder *MockModelCacheMachineMockRecorder
}

// MockModelCacheMachineMockRecorder is the mock recorder for MockModelCacheMachine.
type MockModelCacheMachineMockRecorder struct {
	mock *MockModelCacheMachine
}

// NewMockModelCacheMachine creates a new mock instance.
func NewMockModelCacheMachine(ctrl *gomock.Controller) *MockModelCacheMachine {
	mock := &MockModelCacheMachine{ctrl: ctrl}
	mock.recorder = &MockModelCacheMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelCacheMachine) EXPECT() *MockModelCacheMachineMockRecorder {
	return m.recorder
}

// ContainerType mocks base method.
func (m *MockModelCacheMachine) ContainerType() instance.ContainerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(instance.ContainerType)
	return ret0
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockModelCacheMachineMockRecorder) ContainerType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockModelCacheMachine)(nil).ContainerType))
}

// IsManual mocks base method.
func (m *MockModelCacheMachine) IsManual() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsManual")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsManual indicates an expected call of IsManual.
func (mr *MockModelCacheMachineMockRecorder) IsManual() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsManual", reflect.TypeOf((*MockModelCacheMachine)(nil).IsManual))
}

// WatchContainers mocks base method.
func (m *MockModelCacheMachine) WatchContainers() (cache.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchContainers")
	ret0, _ := ret[0].(cache.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchContainers indicates an expected call of WatchContainers.
func (mr *MockModelCacheMachineMockRecorder) WatchContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchContainers", reflect.TypeOf((*MockModelCacheMachine)(nil).WatchContainers))
}

// WatchLXDProfileVerificationNeeded mocks base method.
func (m *MockModelCacheMachine) WatchLXDProfileVerificationNeeded() (cache.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLXDProfileVerificationNeeded")
	ret0, _ := ret[0].(cache.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLXDProfileVerificationNeeded indicates an expected call of WatchLXDProfileVerificationNeeded.
func (mr *MockModelCacheMachineMockRecorder) WatchLXDProfileVerificationNeeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLXDProfileVerificationNeeded", reflect.TypeOf((*MockModelCacheMachine)(nil).WatchLXDProfileVerificationNeeded))
}
