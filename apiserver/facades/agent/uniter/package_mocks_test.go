// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/uniter (interfaces: LXDProfileBackend,LXDProfileMachine)
//
// Generated by this command:
//
//	mockgen -typed -package uniter_test -destination package_mocks_test.go github.com/juju/juju/apiserver/facades/agent/uniter LXDProfileBackend,LXDProfileMachine
//

// Package uniter_test is a generated GoMock package.
package uniter_test

import (
	reflect "reflect"

	uniter "github.com/juju/juju/apiserver/facades/agent/uniter"
	instance "github.com/juju/juju/core/instance"
	gomock "go.uber.org/mock/gomock"
)

// MockLXDProfileBackend is a mock of LXDProfileBackend interface.
type MockLXDProfileBackend struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileBackendMockRecorder
}

// MockLXDProfileBackendMockRecorder is the mock recorder for MockLXDProfileBackend.
type MockLXDProfileBackendMockRecorder struct {
	mock *MockLXDProfileBackend
}

// NewMockLXDProfileBackend creates a new mock instance.
func NewMockLXDProfileBackend(ctrl *gomock.Controller) *MockLXDProfileBackend {
	mock := &MockLXDProfileBackend{ctrl: ctrl}
	mock.recorder = &MockLXDProfileBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLXDProfileBackend) EXPECT() *MockLXDProfileBackendMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockLXDProfileBackend) Machine(arg0 string) (uniter.LXDProfileMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(uniter.LXDProfileMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockLXDProfileBackendMockRecorder) Machine(arg0 any) *MockLXDProfileBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockLXDProfileBackend)(nil).Machine), arg0)
	return &MockLXDProfileBackendMachineCall{Call: call}
}

// MockLXDProfileBackendMachineCall wrap *gomock.Call
type MockLXDProfileBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLXDProfileBackendMachineCall) Return(arg0 uniter.LXDProfileMachine, arg1 error) *MockLXDProfileBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLXDProfileBackendMachineCall) Do(f func(string) (uniter.LXDProfileMachine, error)) *MockLXDProfileBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLXDProfileBackendMachineCall) DoAndReturn(f func(string) (uniter.LXDProfileMachine, error)) *MockLXDProfileBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLXDProfileMachine is a mock of LXDProfileMachine interface.
type MockLXDProfileMachine struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileMachineMockRecorder
}

// MockLXDProfileMachineMockRecorder is the mock recorder for MockLXDProfileMachine.
type MockLXDProfileMachineMockRecorder struct {
	mock *MockLXDProfileMachine
}

// NewMockLXDProfileMachine creates a new mock instance.
func NewMockLXDProfileMachine(ctrl *gomock.Controller) *MockLXDProfileMachine {
	mock := &MockLXDProfileMachine{ctrl: ctrl}
	mock.recorder = &MockLXDProfileMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLXDProfileMachine) EXPECT() *MockLXDProfileMachineMockRecorder {
	return m.recorder
}

// ContainerType mocks base method.
func (m *MockLXDProfileMachine) ContainerType() instance.ContainerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(instance.ContainerType)
	return ret0
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockLXDProfileMachineMockRecorder) ContainerType() *MockLXDProfileMachineContainerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockLXDProfileMachine)(nil).ContainerType))
	return &MockLXDProfileMachineContainerTypeCall{Call: call}
}

// MockLXDProfileMachineContainerTypeCall wrap *gomock.Call
type MockLXDProfileMachineContainerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLXDProfileMachineContainerTypeCall) Return(arg0 instance.ContainerType) *MockLXDProfileMachineContainerTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLXDProfileMachineContainerTypeCall) Do(f func() instance.ContainerType) *MockLXDProfileMachineContainerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLXDProfileMachineContainerTypeCall) DoAndReturn(f func() instance.ContainerType) *MockLXDProfileMachineContainerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
