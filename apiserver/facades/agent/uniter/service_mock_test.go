// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/uniter (interfaces: ApplicationService,ResolveService,StatusService,RelationService,ModelInfoService,MachineService,NetworkService)
//
// Generated by this command:
//
//	mockgen -typed -package uniter -destination service_mock_test.go github.com/juju/juju/apiserver/facades/agent/uniter ApplicationService,ResolveService,StatusService,RelationService,ModelInfoService,MachineService,NetworkService
//

// Package uniter is a generated GoMock package.
package uniter

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	config "github.com/juju/juju/core/config"
	leadership "github.com/juju/juju/core/leadership"
	life "github.com/juju/juju/core/life"
	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	network "github.com/juju/juju/core/network"
	relation "github.com/juju/juju/core/relation"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	application0 "github.com/juju/juju/domain/application"
	charm "github.com/juju/juju/domain/application/charm"
	relation0 "github.com/juju/juju/domain/relation"
	resolve "github.com/juju/juju/domain/resolve"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// AddIAASSubordinateUnit mocks base method.
func (m *MockApplicationService) AddIAASSubordinateUnit(arg0 context.Context, arg1 application.ID, arg2 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIAASSubordinateUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIAASSubordinateUnit indicates an expected call of AddIAASSubordinateUnit.
func (mr *MockApplicationServiceMockRecorder) AddIAASSubordinateUnit(arg0, arg1, arg2 any) *MockApplicationServiceAddIAASSubordinateUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIAASSubordinateUnit", reflect.TypeOf((*MockApplicationService)(nil).AddIAASSubordinateUnit), arg0, arg1, arg2)
	return &MockApplicationServiceAddIAASSubordinateUnitCall{Call: call}
}

// MockApplicationServiceAddIAASSubordinateUnitCall wrap *gomock.Call
type MockApplicationServiceAddIAASSubordinateUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceAddIAASSubordinateUnitCall) Return(arg0 error) *MockApplicationServiceAddIAASSubordinateUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceAddIAASSubordinateUnitCall) Do(f func(context.Context, application.ID, unit.Name) error) *MockApplicationServiceAddIAASSubordinateUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceAddIAASSubordinateUnitCall) DoAndReturn(f func(context.Context, application.ID, unit.Name) error) *MockApplicationServiceAddIAASSubordinateUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUnit mocks base method.
func (m *MockApplicationService) DeleteUnit(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockApplicationServiceMockRecorder) DeleteUnit(arg0, arg1 any) *MockApplicationServiceDeleteUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockApplicationService)(nil).DeleteUnit), arg0, arg1)
	return &MockApplicationServiceDeleteUnitCall{Call: call}
}

// MockApplicationServiceDeleteUnitCall wrap *gomock.Call
type MockApplicationServiceDeleteUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDeleteUnitCall) Return(arg0 error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDeleteUnitCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDeleteUnitCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyUnit mocks base method.
func (m *MockApplicationService) DestroyUnit(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyUnit indicates an expected call of DestroyUnit.
func (mr *MockApplicationServiceMockRecorder) DestroyUnit(arg0, arg1 any) *MockApplicationServiceDestroyUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyUnit", reflect.TypeOf((*MockApplicationService)(nil).DestroyUnit), arg0, arg1)
	return &MockApplicationServiceDestroyUnitCall{Call: call}
}

// MockApplicationServiceDestroyUnitCall wrap *gomock.Call
type MockApplicationServiceDestroyUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDestroyUnitCall) Return(arg0 error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDestroyUnitCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDestroyUnitCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureUnitDead mocks base method.
func (m *MockApplicationService) EnsureUnitDead(arg0 context.Context, arg1 unit.Name, arg2 leadership.Revoker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitDead", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureUnitDead indicates an expected call of EnsureUnitDead.
func (mr *MockApplicationServiceMockRecorder) EnsureUnitDead(arg0, arg1, arg2 any) *MockApplicationServiceEnsureUnitDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitDead", reflect.TypeOf((*MockApplicationService)(nil).EnsureUnitDead), arg0, arg1, arg2)
	return &MockApplicationServiceEnsureUnitDeadCall{Call: call}
}

// MockApplicationServiceEnsureUnitDeadCall wrap *gomock.Call
type MockApplicationServiceEnsureUnitDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceEnsureUnitDeadCall) Return(arg0 error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceEnsureUnitDeadCall) Do(f func(context.Context, unit.Name, leadership.Revoker) error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceEnsureUnitDeadCall) DoAndReturn(f func(context.Context, unit.Name, leadership.Revoker) error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationConfig mocks base method.
func (m *MockApplicationService) GetApplicationConfig(arg0 context.Context, arg1 application.ID) (config.ConfigAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConfig", arg0, arg1)
	ret0, _ := ret[0].(config.ConfigAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationConfig indicates an expected call of GetApplicationConfig.
func (mr *MockApplicationServiceMockRecorder) GetApplicationConfig(arg0, arg1 any) *MockApplicationServiceGetApplicationConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConfig", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationConfig), arg0, arg1)
	return &MockApplicationServiceGetApplicationConfigCall{Call: call}
}

// MockApplicationServiceGetApplicationConfigCall wrap *gomock.Call
type MockApplicationServiceGetApplicationConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationConfigCall) Return(arg0 config.ConfigAttributes, arg1 error) *MockApplicationServiceGetApplicationConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationConfigCall) Do(f func(context.Context, application.ID) (config.ConfigAttributes, error)) *MockApplicationServiceGetApplicationConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationConfigCall) DoAndReturn(f func(context.Context, application.ID) (config.ConfigAttributes, error)) *MockApplicationServiceGetApplicationConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationConfigWithDefaults mocks base method.
func (m *MockApplicationService) GetApplicationConfigWithDefaults(arg0 context.Context, arg1 application.ID) (config.ConfigAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConfigWithDefaults", arg0, arg1)
	ret0, _ := ret[0].(config.ConfigAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationConfigWithDefaults indicates an expected call of GetApplicationConfigWithDefaults.
func (mr *MockApplicationServiceMockRecorder) GetApplicationConfigWithDefaults(arg0, arg1 any) *MockApplicationServiceGetApplicationConfigWithDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConfigWithDefaults", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationConfigWithDefaults), arg0, arg1)
	return &MockApplicationServiceGetApplicationConfigWithDefaultsCall{Call: call}
}

// MockApplicationServiceGetApplicationConfigWithDefaultsCall wrap *gomock.Call
type MockApplicationServiceGetApplicationConfigWithDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationConfigWithDefaultsCall) Return(arg0 config.ConfigAttributes, arg1 error) *MockApplicationServiceGetApplicationConfigWithDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationConfigWithDefaultsCall) Do(f func(context.Context, application.ID) (config.ConfigAttributes, error)) *MockApplicationServiceGetApplicationConfigWithDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationConfigWithDefaultsCall) DoAndReturn(f func(context.Context, application.ID) (config.ConfigAttributes, error)) *MockApplicationServiceGetApplicationConfigWithDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByName mocks base method.
func (m *MockApplicationService) GetApplicationIDByName(arg0 context.Context, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByUnitName mocks base method.
func (m *MockApplicationService) GetApplicationIDByUnitName(arg0 context.Context, arg1 unit.Name) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByUnitName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByUnitName indicates an expected call of GetApplicationIDByUnitName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByUnitName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByUnitName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByUnitName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByUnitNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByUnitNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLifeByName mocks base method.
func (m *MockApplicationService) GetApplicationLifeByName(arg0 context.Context, arg1 string) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLifeByName", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLifeByName indicates an expected call of GetApplicationLifeByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLifeByName(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLifeByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLifeByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Do(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeByNameCall) DoAndReturn(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAvailableCharmArchiveSHA256 mocks base method.
func (m *MockApplicationService) GetAvailableCharmArchiveSHA256(arg0 context.Context, arg1 charm.CharmLocator) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableCharmArchiveSHA256", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableCharmArchiveSHA256 indicates an expected call of GetAvailableCharmArchiveSHA256.
func (mr *MockApplicationServiceMockRecorder) GetAvailableCharmArchiveSHA256(arg0, arg1 any) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableCharmArchiveSHA256", reflect.TypeOf((*MockApplicationService)(nil).GetAvailableCharmArchiveSHA256), arg0, arg1)
	return &MockApplicationServiceGetAvailableCharmArchiveSHA256Call{Call: call}
}

// MockApplicationServiceGetAvailableCharmArchiveSHA256Call wrap *gomock.Call
type MockApplicationServiceGetAvailableCharmArchiveSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) Return(arg0 string, arg1 error) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) Do(f func(context.Context, charm.CharmLocator) (string, error)) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) DoAndReturn(f func(context.Context, charm.CharmLocator) (string, error)) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLXDProfile mocks base method.
func (m *MockApplicationService) GetCharmLXDProfile(arg0 context.Context, arg1 charm.CharmLocator) (charm0.LXDProfile, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLXDProfile", arg0, arg1)
	ret0, _ := ret[0].(charm0.LXDProfile)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmLXDProfile indicates an expected call of GetCharmLXDProfile.
func (mr *MockApplicationServiceMockRecorder) GetCharmLXDProfile(arg0, arg1 any) *MockApplicationServiceGetCharmLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLXDProfile", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLXDProfile), arg0, arg1)
	return &MockApplicationServiceGetCharmLXDProfileCall{Call: call}
}

// MockApplicationServiceGetCharmLXDProfileCall wrap *gomock.Call
type MockApplicationServiceGetCharmLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLXDProfileCall) Return(arg0 charm0.LXDProfile, arg1 int, arg2 error) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLXDProfileCall) Do(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLXDProfileCall) DoAndReturn(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLocatorByApplicationName mocks base method.
func (m *MockApplicationService) GetCharmLocatorByApplicationName(arg0 context.Context, arg1 string) (charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLocatorByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmLocatorByApplicationName indicates an expected call of GetCharmLocatorByApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetCharmLocatorByApplicationName(arg0, arg1 any) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLocatorByApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLocatorByApplicationName), arg0, arg1)
	return &MockApplicationServiceGetCharmLocatorByApplicationNameCall{Call: call}
}

// MockApplicationServiceGetCharmLocatorByApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmLocatorByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Return(arg0 charm.CharmLocator, arg1 error) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Do(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmModifiedVersion mocks base method.
func (m *MockApplicationService) GetCharmModifiedVersion(arg0 context.Context, arg1 application.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmModifiedVersion", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmModifiedVersion indicates an expected call of GetCharmModifiedVersion.
func (mr *MockApplicationServiceMockRecorder) GetCharmModifiedVersion(arg0, arg1 any) *MockApplicationServiceGetCharmModifiedVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmModifiedVersion", reflect.TypeOf((*MockApplicationService)(nil).GetCharmModifiedVersion), arg0, arg1)
	return &MockApplicationServiceGetCharmModifiedVersionCall{Call: call}
}

// MockApplicationServiceGetCharmModifiedVersionCall wrap *gomock.Call
type MockApplicationServiceGetCharmModifiedVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmModifiedVersionCall) Return(arg0 int, arg1 error) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmModifiedVersionCall) Do(f func(context.Context, application.ID) (int, error)) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmModifiedVersionCall) DoAndReturn(f func(context.Context, application.ID) (int, error)) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitMachineName mocks base method.
func (m *MockApplicationService) GetUnitMachineName(arg0 context.Context, arg1 unit.Name) (machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMachineName", arg0, arg1)
	ret0, _ := ret[0].(machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMachineName indicates an expected call of GetUnitMachineName.
func (mr *MockApplicationServiceMockRecorder) GetUnitMachineName(arg0, arg1 any) *MockApplicationServiceGetUnitMachineNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMachineName", reflect.TypeOf((*MockApplicationService)(nil).GetUnitMachineName), arg0, arg1)
	return &MockApplicationServiceGetUnitMachineNameCall{Call: call}
}

// MockApplicationServiceGetUnitMachineNameCall wrap *gomock.Call
type MockApplicationServiceGetUnitMachineNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitMachineNameCall) Return(arg0 machine.Name, arg1 error) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitMachineNameCall) Do(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitMachineNameCall) DoAndReturn(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitMachineUUID mocks base method.
func (m *MockApplicationService) GetUnitMachineUUID(arg0 context.Context, arg1 unit.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMachineUUID indicates an expected call of GetUnitMachineUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitMachineUUID(arg0, arg1 any) *MockApplicationServiceGetUnitMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMachineUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitMachineUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitMachineUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitMachineUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockApplicationServiceGetUnitMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitMachineUUIDCall) Do(f func(context.Context, unit.Name) (machine.UUID, error)) *MockApplicationServiceGetUnitMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitMachineUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (machine.UUID, error)) *MockApplicationServiceGetUnitMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitNamesForApplication mocks base method.
func (m *MockApplicationService) GetUnitNamesForApplication(arg0 context.Context, arg1 string) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNamesForApplication", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNamesForApplication indicates an expected call of GetUnitNamesForApplication.
func (mr *MockApplicationServiceMockRecorder) GetUnitNamesForApplication(arg0, arg1 any) *MockApplicationServiceGetUnitNamesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNamesForApplication", reflect.TypeOf((*MockApplicationService)(nil).GetUnitNamesForApplication), arg0, arg1)
	return &MockApplicationServiceGetUnitNamesForApplicationCall{Call: call}
}

// MockApplicationServiceGetUnitNamesForApplicationCall wrap *gomock.Call
type MockApplicationServiceGetUnitNamesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) Do(f func(context.Context, string) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) DoAndReturn(f func(context.Context, string) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitPrincipal mocks base method.
func (m *MockApplicationService) GetUnitPrincipal(arg0 context.Context, arg1 unit.Name) (unit.Name, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPrincipal", arg0, arg1)
	ret0, _ := ret[0].(unit.Name)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUnitPrincipal indicates an expected call of GetUnitPrincipal.
func (mr *MockApplicationServiceMockRecorder) GetUnitPrincipal(arg0, arg1 any) *MockApplicationServiceGetUnitPrincipalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPrincipal", reflect.TypeOf((*MockApplicationService)(nil).GetUnitPrincipal), arg0, arg1)
	return &MockApplicationServiceGetUnitPrincipalCall{Call: call}
}

// MockApplicationServiceGetUnitPrincipalCall wrap *gomock.Call
type MockApplicationServiceGetUnitPrincipalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitPrincipalCall) Return(arg0 unit.Name, arg1 bool, arg2 error) *MockApplicationServiceGetUnitPrincipalCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitPrincipalCall) Do(f func(context.Context, unit.Name) (unit.Name, bool, error)) *MockApplicationServiceGetUnitPrincipalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitPrincipalCall) DoAndReturn(f func(context.Context, unit.Name) (unit.Name, bool, error)) *MockApplicationServiceGetUnitPrincipalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitRefreshAttributes mocks base method.
func (m *MockApplicationService) GetUnitRefreshAttributes(arg0 context.Context, arg1 unit.Name) (application0.UnitAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitRefreshAttributes", arg0, arg1)
	ret0, _ := ret[0].(application0.UnitAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitRefreshAttributes indicates an expected call of GetUnitRefreshAttributes.
func (mr *MockApplicationServiceMockRecorder) GetUnitRefreshAttributes(arg0, arg1 any) *MockApplicationServiceGetUnitRefreshAttributesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitRefreshAttributes", reflect.TypeOf((*MockApplicationService)(nil).GetUnitRefreshAttributes), arg0, arg1)
	return &MockApplicationServiceGetUnitRefreshAttributesCall{Call: call}
}

// MockApplicationServiceGetUnitRefreshAttributesCall wrap *gomock.Call
type MockApplicationServiceGetUnitRefreshAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitRefreshAttributesCall) Return(arg0 application0.UnitAttributes, arg1 error) *MockApplicationServiceGetUnitRefreshAttributesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitRefreshAttributesCall) Do(f func(context.Context, unit.Name) (application0.UnitAttributes, error)) *MockApplicationServiceGetUnitRefreshAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitRefreshAttributesCall) DoAndReturn(f func(context.Context, unit.Name) (application0.UnitAttributes, error)) *MockApplicationServiceGetUnitRefreshAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitSubordinates mocks base method.
func (m *MockApplicationService) GetUnitSubordinates(arg0 context.Context, arg1 unit.Name) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitSubordinates", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitSubordinates indicates an expected call of GetUnitSubordinates.
func (mr *MockApplicationServiceMockRecorder) GetUnitSubordinates(arg0, arg1 any) *MockApplicationServiceGetUnitSubordinatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitSubordinates", reflect.TypeOf((*MockApplicationService)(nil).GetUnitSubordinates), arg0, arg1)
	return &MockApplicationServiceGetUnitSubordinatesCall{Call: call}
}

// MockApplicationServiceGetUnitSubordinatesCall wrap *gomock.Call
type MockApplicationServiceGetUnitSubordinatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitSubordinatesCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceGetUnitSubordinatesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitSubordinatesCall) Do(f func(context.Context, unit.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitSubordinatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitSubordinatesCall) DoAndReturn(f func(context.Context, unit.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitSubordinatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadVersion mocks base method.
func (m *MockApplicationService) GetUnitWorkloadVersion(arg0 context.Context, arg1 unit.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadVersion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadVersion indicates an expected call of GetUnitWorkloadVersion.
func (mr *MockApplicationServiceMockRecorder) GetUnitWorkloadVersion(arg0, arg1 any) *MockApplicationServiceGetUnitWorkloadVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadVersion", reflect.TypeOf((*MockApplicationService)(nil).GetUnitWorkloadVersion), arg0, arg1)
	return &MockApplicationServiceGetUnitWorkloadVersionCall{Call: call}
}

// MockApplicationServiceGetUnitWorkloadVersionCall wrap *gomock.Call
type MockApplicationServiceGetUnitWorkloadVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitWorkloadVersionCall) Return(arg0 string, arg1 error) *MockApplicationServiceGetUnitWorkloadVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitWorkloadVersionCall) Do(f func(context.Context, unit.Name) (string, error)) *MockApplicationServiceGetUnitWorkloadVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitWorkloadVersionCall) DoAndReturn(f func(context.Context, unit.Name) (string, error)) *MockApplicationServiceGetUnitWorkloadVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadVersion mocks base method.
func (m *MockApplicationService) SetUnitWorkloadVersion(arg0 context.Context, arg1 unit.Name, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadVersion indicates an expected call of SetUnitWorkloadVersion.
func (mr *MockApplicationServiceMockRecorder) SetUnitWorkloadVersion(arg0, arg1, arg2 any) *MockApplicationServiceSetUnitWorkloadVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadVersion", reflect.TypeOf((*MockApplicationService)(nil).SetUnitWorkloadVersion), arg0, arg1, arg2)
	return &MockApplicationServiceSetUnitWorkloadVersionCall{Call: call}
}

// MockApplicationServiceSetUnitWorkloadVersionCall wrap *gomock.Call
type MockApplicationServiceSetUnitWorkloadVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetUnitWorkloadVersionCall) Return(arg0 error) *MockApplicationServiceSetUnitWorkloadVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetUnitWorkloadVersionCall) Do(f func(context.Context, unit.Name, string) error) *MockApplicationServiceSetUnitWorkloadVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetUnitWorkloadVersionCall) DoAndReturn(f func(context.Context, unit.Name, string) error) *MockApplicationServiceSetUnitWorkloadVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldAllowCharmUpgradeOnError mocks base method.
func (m *MockApplicationService) ShouldAllowCharmUpgradeOnError(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldAllowCharmUpgradeOnError", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldAllowCharmUpgradeOnError indicates an expected call of ShouldAllowCharmUpgradeOnError.
func (mr *MockApplicationServiceMockRecorder) ShouldAllowCharmUpgradeOnError(arg0, arg1 any) *MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldAllowCharmUpgradeOnError", reflect.TypeOf((*MockApplicationService)(nil).ShouldAllowCharmUpgradeOnError), arg0, arg1)
	return &MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall{Call: call}
}

// MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall wrap *gomock.Call
type MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall) Return(arg0 bool, arg1 error) *MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationServiceShouldAllowCharmUpgradeOnErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplication mocks base method.
func (m *MockApplicationService) WatchApplication(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplication", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplication indicates an expected call of WatchApplication.
func (mr *MockApplicationServiceMockRecorder) WatchApplication(arg0, arg1 any) *MockApplicationServiceWatchApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplication", reflect.TypeOf((*MockApplicationService)(nil).WatchApplication), arg0, arg1)
	return &MockApplicationServiceWatchApplicationCall{Call: call}
}

// MockApplicationServiceWatchApplicationCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationConfigHash mocks base method.
func (m *MockApplicationService) WatchApplicationConfigHash(arg0 context.Context, arg1 string) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationConfigHash", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationConfigHash indicates an expected call of WatchApplicationConfigHash.
func (mr *MockApplicationServiceMockRecorder) WatchApplicationConfigHash(arg0, arg1 any) *MockApplicationServiceWatchApplicationConfigHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationConfigHash", reflect.TypeOf((*MockApplicationService)(nil).WatchApplicationConfigHash), arg0, arg1)
	return &MockApplicationServiceWatchApplicationConfigHashCall{Call: call}
}

// MockApplicationServiceWatchApplicationConfigHashCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationConfigHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationConfigHashCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchApplicationConfigHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationConfigHashCall) Do(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationConfigHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationConfigHashCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchApplicationConfigHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitActions mocks base method.
func (m *MockApplicationService) WatchUnitActions(arg0 context.Context, arg1 unit.Name) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitActions", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitActions indicates an expected call of WatchUnitActions.
func (mr *MockApplicationServiceMockRecorder) WatchUnitActions(arg0, arg1 any) *MockApplicationServiceWatchUnitActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitActions", reflect.TypeOf((*MockApplicationService)(nil).WatchUnitActions), arg0, arg1)
	return &MockApplicationServiceWatchUnitActionsCall{Call: call}
}

// MockApplicationServiceWatchUnitActionsCall wrap *gomock.Call
type MockApplicationServiceWatchUnitActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchUnitActionsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchUnitActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchUnitActionsCall) Do(f func(context.Context, unit.Name) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchUnitActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchUnitActionsCall) DoAndReturn(f func(context.Context, unit.Name) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchUnitActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitAddressesHash mocks base method.
func (m *MockApplicationService) WatchUnitAddressesHash(arg0 context.Context, arg1 unit.Name) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitAddressesHash", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitAddressesHash indicates an expected call of WatchUnitAddressesHash.
func (mr *MockApplicationServiceMockRecorder) WatchUnitAddressesHash(arg0, arg1 any) *MockApplicationServiceWatchUnitAddressesHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitAddressesHash", reflect.TypeOf((*MockApplicationService)(nil).WatchUnitAddressesHash), arg0, arg1)
	return &MockApplicationServiceWatchUnitAddressesHashCall{Call: call}
}

// MockApplicationServiceWatchUnitAddressesHashCall wrap *gomock.Call
type MockApplicationServiceWatchUnitAddressesHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchUnitAddressesHashCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockApplicationServiceWatchUnitAddressesHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchUnitAddressesHashCall) Do(f func(context.Context, unit.Name) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchUnitAddressesHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchUnitAddressesHashCall) DoAndReturn(f func(context.Context, unit.Name) (watcher.Watcher[[]string], error)) *MockApplicationServiceWatchUnitAddressesHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitForLegacyUniter mocks base method.
func (m *MockApplicationService) WatchUnitForLegacyUniter(arg0 context.Context, arg1 unit.Name) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitForLegacyUniter", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitForLegacyUniter indicates an expected call of WatchUnitForLegacyUniter.
func (mr *MockApplicationServiceMockRecorder) WatchUnitForLegacyUniter(arg0, arg1 any) *MockApplicationServiceWatchUnitForLegacyUniterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitForLegacyUniter", reflect.TypeOf((*MockApplicationService)(nil).WatchUnitForLegacyUniter), arg0, arg1)
	return &MockApplicationServiceWatchUnitForLegacyUniterCall{Call: call}
}

// MockApplicationServiceWatchUnitForLegacyUniterCall wrap *gomock.Call
type MockApplicationServiceWatchUnitForLegacyUniterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchUnitForLegacyUniterCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchUnitForLegacyUniterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchUnitForLegacyUniterCall) Do(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchUnitForLegacyUniterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchUnitForLegacyUniterCall) DoAndReturn(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchUnitForLegacyUniterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResolveService is a mock of ResolveService interface.
type MockResolveService struct {
	ctrl     *gomock.Controller
	recorder *MockResolveServiceMockRecorder
}

// MockResolveServiceMockRecorder is the mock recorder for MockResolveService.
type MockResolveServiceMockRecorder struct {
	mock *MockResolveService
}

// NewMockResolveService creates a new mock instance.
func NewMockResolveService(ctrl *gomock.Controller) *MockResolveService {
	mock := &MockResolveService{ctrl: ctrl}
	mock.recorder = &MockResolveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolveService) EXPECT() *MockResolveServiceMockRecorder {
	return m.recorder
}

// ClearResolved mocks base method.
func (m *MockResolveService) ClearResolved(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearResolved", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearResolved indicates an expected call of ClearResolved.
func (mr *MockResolveServiceMockRecorder) ClearResolved(arg0, arg1 any) *MockResolveServiceClearResolvedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearResolved", reflect.TypeOf((*MockResolveService)(nil).ClearResolved), arg0, arg1)
	return &MockResolveServiceClearResolvedCall{Call: call}
}

// MockResolveServiceClearResolvedCall wrap *gomock.Call
type MockResolveServiceClearResolvedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolveServiceClearResolvedCall) Return(arg0 error) *MockResolveServiceClearResolvedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolveServiceClearResolvedCall) Do(f func(context.Context, unit.Name) error) *MockResolveServiceClearResolvedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolveServiceClearResolvedCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockResolveServiceClearResolvedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitResolveMode mocks base method.
func (m *MockResolveService) UnitResolveMode(arg0 context.Context, arg1 unit.Name) (resolve.ResolveMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitResolveMode", arg0, arg1)
	ret0, _ := ret[0].(resolve.ResolveMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitResolveMode indicates an expected call of UnitResolveMode.
func (mr *MockResolveServiceMockRecorder) UnitResolveMode(arg0, arg1 any) *MockResolveServiceUnitResolveModeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitResolveMode", reflect.TypeOf((*MockResolveService)(nil).UnitResolveMode), arg0, arg1)
	return &MockResolveServiceUnitResolveModeCall{Call: call}
}

// MockResolveServiceUnitResolveModeCall wrap *gomock.Call
type MockResolveServiceUnitResolveModeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolveServiceUnitResolveModeCall) Return(arg0 resolve.ResolveMode, arg1 error) *MockResolveServiceUnitResolveModeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolveServiceUnitResolveModeCall) Do(f func(context.Context, unit.Name) (resolve.ResolveMode, error)) *MockResolveServiceUnitResolveModeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolveServiceUnitResolveModeCall) DoAndReturn(f func(context.Context, unit.Name) (resolve.ResolveMode, error)) *MockResolveServiceUnitResolveModeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUnitResolveMode mocks base method.
func (m *MockResolveService) WatchUnitResolveMode(arg0 context.Context, arg1 unit.Name) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnitResolveMode", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnitResolveMode indicates an expected call of WatchUnitResolveMode.
func (mr *MockResolveServiceMockRecorder) WatchUnitResolveMode(arg0, arg1 any) *MockResolveServiceWatchUnitResolveModeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnitResolveMode", reflect.TypeOf((*MockResolveService)(nil).WatchUnitResolveMode), arg0, arg1)
	return &MockResolveServiceWatchUnitResolveModeCall{Call: call}
}

// MockResolveServiceWatchUnitResolveModeCall wrap *gomock.Call
type MockResolveServiceWatchUnitResolveModeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolveServiceWatchUnitResolveModeCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockResolveServiceWatchUnitResolveModeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolveServiceWatchUnitResolveModeCall) Do(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockResolveServiceWatchUnitResolveModeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolveServiceWatchUnitResolveModeCall) DoAndReturn(f func(context.Context, unit.Name) (watcher.Watcher[struct{}], error)) *MockResolveServiceWatchUnitResolveModeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetApplicationAndUnitStatusesForUnitWithLeader mocks base method.
func (m *MockStatusService) GetApplicationAndUnitStatusesForUnitWithLeader(arg0 context.Context, arg1 unit.Name) (status.StatusInfo, map[unit.Name]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitStatusesForUnitWithLeader", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(map[unit.Name]status.StatusInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationAndUnitStatusesForUnitWithLeader indicates an expected call of GetApplicationAndUnitStatusesForUnitWithLeader.
func (mr *MockStatusServiceMockRecorder) GetApplicationAndUnitStatusesForUnitWithLeader(arg0, arg1 any) *MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitStatusesForUnitWithLeader", reflect.TypeOf((*MockStatusService)(nil).GetApplicationAndUnitStatusesForUnitWithLeader), arg0, arg1)
	return &MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall{Call: call}
}

// MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall wrap *gomock.Call
type MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall) Return(arg0 status.StatusInfo, arg1 map[unit.Name]status.StatusInfo, arg2 error) *MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall) Do(f func(context.Context, unit.Name) (status.StatusInfo, map[unit.Name]status.StatusInfo, error)) *MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall) DoAndReturn(f func(context.Context, unit.Name) (status.StatusInfo, map[unit.Name]status.StatusInfo, error)) *MockStatusServiceGetApplicationAndUnitStatusesForUnitWithLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatus mocks base method.
func (m *MockStatusService) GetUnitWorkloadStatus(arg0 context.Context, arg1 unit.Name) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatus indicates an expected call of GetUnitWorkloadStatus.
func (mr *MockStatusServiceMockRecorder) GetUnitWorkloadStatus(arg0, arg1 any) *MockStatusServiceGetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatus", reflect.TypeOf((*MockStatusService)(nil).GetUnitWorkloadStatus), arg0, arg1)
	return &MockStatusServiceGetUnitWorkloadStatusCall{Call: call}
}

// MockStatusServiceGetUnitWorkloadStatusCall wrap *gomock.Call
type MockStatusServiceGetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetUnitWorkloadStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetUnitWorkloadStatusCall) Do(f func(context.Context, unit.Name) (status.StatusInfo, error)) *MockStatusServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.Name) (status.StatusInfo, error)) *MockStatusServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatusesForApplication mocks base method.
func (m *MockStatusService) GetUnitWorkloadStatusesForApplication(arg0 context.Context, arg1 application.ID) (map[unit.Name]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(map[unit.Name]status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatusesForApplication indicates an expected call of GetUnitWorkloadStatusesForApplication.
func (mr *MockStatusServiceMockRecorder) GetUnitWorkloadStatusesForApplication(arg0, arg1 any) *MockStatusServiceGetUnitWorkloadStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatusesForApplication", reflect.TypeOf((*MockStatusService)(nil).GetUnitWorkloadStatusesForApplication), arg0, arg1)
	return &MockStatusServiceGetUnitWorkloadStatusesForApplicationCall{Call: call}
}

// MockStatusServiceGetUnitWorkloadStatusesForApplicationCall wrap *gomock.Call
type MockStatusServiceGetUnitWorkloadStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetUnitWorkloadStatusesForApplicationCall) Return(arg0 map[unit.Name]status.StatusInfo, arg1 error) *MockStatusServiceGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetUnitWorkloadStatusesForApplicationCall) Do(f func(context.Context, application.ID) (map[unit.Name]status.StatusInfo, error)) *MockStatusServiceGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetUnitWorkloadStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) (map[unit.Name]status.StatusInfo, error)) *MockStatusServiceGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationStatusForUnitLeader mocks base method.
func (m *MockStatusService) SetApplicationStatusForUnitLeader(arg0 context.Context, arg1 unit.Name, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationStatusForUnitLeader", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationStatusForUnitLeader indicates an expected call of SetApplicationStatusForUnitLeader.
func (mr *MockStatusServiceMockRecorder) SetApplicationStatusForUnitLeader(arg0, arg1, arg2 any) *MockStatusServiceSetApplicationStatusForUnitLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationStatusForUnitLeader", reflect.TypeOf((*MockStatusService)(nil).SetApplicationStatusForUnitLeader), arg0, arg1, arg2)
	return &MockStatusServiceSetApplicationStatusForUnitLeaderCall{Call: call}
}

// MockStatusServiceSetApplicationStatusForUnitLeaderCall wrap *gomock.Call
type MockStatusServiceSetApplicationStatusForUnitLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetApplicationStatusForUnitLeaderCall) Return(arg0 error) *MockStatusServiceSetApplicationStatusForUnitLeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetApplicationStatusForUnitLeaderCall) Do(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetApplicationStatusForUnitLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetApplicationStatusForUnitLeaderCall) DoAndReturn(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetApplicationStatusForUnitLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationStatus mocks base method.
func (m *MockStatusService) SetRelationStatus(arg0 context.Context, arg1 unit.Name, arg2 relation.UUID, arg3 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationStatus indicates an expected call of SetRelationStatus.
func (mr *MockStatusServiceMockRecorder) SetRelationStatus(arg0, arg1, arg2, arg3 any) *MockStatusServiceSetRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationStatus", reflect.TypeOf((*MockStatusService)(nil).SetRelationStatus), arg0, arg1, arg2, arg3)
	return &MockStatusServiceSetRelationStatusCall{Call: call}
}

// MockStatusServiceSetRelationStatusCall wrap *gomock.Call
type MockStatusServiceSetRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetRelationStatusCall) Return(arg0 error) *MockStatusServiceSetRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetRelationStatusCall) Do(f func(context.Context, unit.Name, relation.UUID, status.StatusInfo) error) *MockStatusServiceSetRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetRelationStatusCall) DoAndReturn(f func(context.Context, unit.Name, relation.UUID, status.StatusInfo) error) *MockStatusServiceSetRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitAgentStatus mocks base method.
func (m *MockStatusService) SetUnitAgentStatus(arg0 context.Context, arg1 unit.Name, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitAgentStatus indicates an expected call of SetUnitAgentStatus.
func (mr *MockStatusServiceMockRecorder) SetUnitAgentStatus(arg0, arg1, arg2 any) *MockStatusServiceSetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitAgentStatus", reflect.TypeOf((*MockStatusService)(nil).SetUnitAgentStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetUnitAgentStatusCall{Call: call}
}

// MockStatusServiceSetUnitAgentStatusCall wrap *gomock.Call
type MockStatusServiceSetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetUnitAgentStatusCall) Return(arg0 error) *MockStatusServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetUnitAgentStatusCall) Do(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadStatus mocks base method.
func (m *MockStatusService) SetUnitWorkloadStatus(arg0 context.Context, arg1 unit.Name, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadStatus indicates an expected call of SetUnitWorkloadStatus.
func (mr *MockStatusServiceMockRecorder) SetUnitWorkloadStatus(arg0, arg1, arg2 any) *MockStatusServiceSetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadStatus", reflect.TypeOf((*MockStatusService)(nil).SetUnitWorkloadStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetUnitWorkloadStatusCall{Call: call}
}

// MockStatusServiceSetUnitWorkloadStatusCall wrap *gomock.Call
type MockStatusServiceSetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetUnitWorkloadStatusCall) Return(arg0 error) *MockStatusServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetUnitWorkloadStatusCall) Do(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// EnterScope mocks base method.
func (m *MockRelationService) EnterScope(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name, arg3 map[string]string, arg4 relation0.SubordinateCreator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterScope", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterScope indicates an expected call of EnterScope.
func (mr *MockRelationServiceMockRecorder) EnterScope(arg0, arg1, arg2, arg3, arg4 any) *MockRelationServiceEnterScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterScope", reflect.TypeOf((*MockRelationService)(nil).EnterScope), arg0, arg1, arg2, arg3, arg4)
	return &MockRelationServiceEnterScopeCall{Call: call}
}

// MockRelationServiceEnterScopeCall wrap *gomock.Call
type MockRelationServiceEnterScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceEnterScopeCall) Return(arg0 error) *MockRelationServiceEnterScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceEnterScopeCall) Do(f func(context.Context, relation.UUID, unit.Name, map[string]string, relation0.SubordinateCreator) error) *MockRelationServiceEnterScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceEnterScopeCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name, map[string]string, relation0.SubordinateCreator) error) *MockRelationServiceEnterScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGoalStateRelationDataForApplication mocks base method.
func (m *MockRelationService) GetGoalStateRelationDataForApplication(arg0 context.Context, arg1 application.ID) ([]relation0.GoalStateRelationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoalStateRelationDataForApplication", arg0, arg1)
	ret0, _ := ret[0].([]relation0.GoalStateRelationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoalStateRelationDataForApplication indicates an expected call of GetGoalStateRelationDataForApplication.
func (mr *MockRelationServiceMockRecorder) GetGoalStateRelationDataForApplication(arg0, arg1 any) *MockRelationServiceGetGoalStateRelationDataForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoalStateRelationDataForApplication", reflect.TypeOf((*MockRelationService)(nil).GetGoalStateRelationDataForApplication), arg0, arg1)
	return &MockRelationServiceGetGoalStateRelationDataForApplicationCall{Call: call}
}

// MockRelationServiceGetGoalStateRelationDataForApplicationCall wrap *gomock.Call
type MockRelationServiceGetGoalStateRelationDataForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetGoalStateRelationDataForApplicationCall) Return(arg0 []relation0.GoalStateRelationData, arg1 error) *MockRelationServiceGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetGoalStateRelationDataForApplicationCall) Do(f func(context.Context, application.ID) ([]relation0.GoalStateRelationData, error)) *MockRelationServiceGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetGoalStateRelationDataForApplicationCall) DoAndReturn(f func(context.Context, application.ID) ([]relation0.GoalStateRelationData, error)) *MockRelationServiceGetGoalStateRelationDataForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationApplicationSettings mocks base method.
func (m *MockRelationService) GetRelationApplicationSettings(arg0 context.Context, arg1 relation.UUID, arg2 application.ID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationApplicationSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationApplicationSettings indicates an expected call of GetRelationApplicationSettings.
func (mr *MockRelationServiceMockRecorder) GetRelationApplicationSettings(arg0, arg1, arg2 any) *MockRelationServiceGetRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationApplicationSettings", reflect.TypeOf((*MockRelationService)(nil).GetRelationApplicationSettings), arg0, arg1, arg2)
	return &MockRelationServiceGetRelationApplicationSettingsCall{Call: call}
}

// MockRelationServiceGetRelationApplicationSettingsCall wrap *gomock.Call
type MockRelationServiceGetRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationApplicationSettingsCall) Return(arg0 map[string]string, arg1 error) *MockRelationServiceGetRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationApplicationSettingsCall) Do(f func(context.Context, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationApplicationSettingsCall) DoAndReturn(f func(context.Context, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationApplicationSettingsWithLeader mocks base method.
func (m *MockRelationService) GetRelationApplicationSettingsWithLeader(arg0 context.Context, arg1 unit.Name, arg2 relation.UUID, arg3 application.ID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationApplicationSettingsWithLeader", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationApplicationSettingsWithLeader indicates an expected call of GetRelationApplicationSettingsWithLeader.
func (mr *MockRelationServiceMockRecorder) GetRelationApplicationSettingsWithLeader(arg0, arg1, arg2, arg3 any) *MockRelationServiceGetRelationApplicationSettingsWithLeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationApplicationSettingsWithLeader", reflect.TypeOf((*MockRelationService)(nil).GetRelationApplicationSettingsWithLeader), arg0, arg1, arg2, arg3)
	return &MockRelationServiceGetRelationApplicationSettingsWithLeaderCall{Call: call}
}

// MockRelationServiceGetRelationApplicationSettingsWithLeaderCall wrap *gomock.Call
type MockRelationServiceGetRelationApplicationSettingsWithLeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationApplicationSettingsWithLeaderCall) Return(arg0 map[string]string, arg1 error) *MockRelationServiceGetRelationApplicationSettingsWithLeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationApplicationSettingsWithLeaderCall) Do(f func(context.Context, unit.Name, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetRelationApplicationSettingsWithLeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationApplicationSettingsWithLeaderCall) DoAndReturn(f func(context.Context, unit.Name, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetRelationApplicationSettingsWithLeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockRelationService) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetRelationDetails(arg0, arg1 any) *MockRelationServiceGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetRelationDetails), arg0, arg1)
	return &MockRelationServiceGetRelationDetailsCall{Call: call}
}

// MockRelationServiceGetRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationDetailsCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByID mocks base method.
func (m *MockRelationService) GetRelationUUIDByID(arg0 context.Context, arg1 int) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByID indicates an expected call of GetRelationUUIDByID.
func (mr *MockRelationServiceMockRecorder) GetRelationUUIDByID(arg0, arg1 any) *MockRelationServiceGetRelationUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByID", reflect.TypeOf((*MockRelationService)(nil).GetRelationUUIDByID), arg0, arg1)
	return &MockRelationServiceGetRelationUUIDByIDCall{Call: call}
}

// MockRelationServiceGetRelationUUIDByIDCall wrap *gomock.Call
type MockRelationServiceGetRelationUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUUIDByIDCall) Return(arg0 relation.UUID, arg1 error) *MockRelationServiceGetRelationUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUUIDByIDCall) Do(f func(context.Context, int) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUUIDByIDCall) DoAndReturn(f func(context.Context, int) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByKey mocks base method.
func (m *MockRelationService) GetRelationUUIDByKey(arg0 context.Context, arg1 relation.Key) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByKey", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByKey indicates an expected call of GetRelationUUIDByKey.
func (mr *MockRelationServiceMockRecorder) GetRelationUUIDByKey(arg0, arg1 any) *MockRelationServiceGetRelationUUIDByKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByKey", reflect.TypeOf((*MockRelationService)(nil).GetRelationUUIDByKey), arg0, arg1)
	return &MockRelationServiceGetRelationUUIDByKeyCall{Call: call}
}

// MockRelationServiceGetRelationUUIDByKeyCall wrap *gomock.Call
type MockRelationServiceGetRelationUUIDByKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUUIDByKeyCall) Return(arg0 relation.UUID, arg1 error) *MockRelationServiceGetRelationUUIDByKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUUIDByKeyCall) Do(f func(context.Context, relation.Key) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUUIDByKeyCall) DoAndReturn(f func(context.Context, relation.Key) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnit mocks base method.
func (m *MockRelationService) GetRelationUnit(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) (relation.UnitUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UnitUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnit indicates an expected call of GetRelationUnit.
func (mr *MockRelationServiceMockRecorder) GetRelationUnit(arg0, arg1, arg2 any) *MockRelationServiceGetRelationUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnit", reflect.TypeOf((*MockRelationService)(nil).GetRelationUnit), arg0, arg1, arg2)
	return &MockRelationServiceGetRelationUnitCall{Call: call}
}

// MockRelationServiceGetRelationUnitCall wrap *gomock.Call
type MockRelationServiceGetRelationUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUnitCall) Return(arg0 relation.UnitUUID, arg1 error) *MockRelationServiceGetRelationUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUnitCall) Do(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockRelationServiceGetRelationUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUnitCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockRelationServiceGetRelationUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitChanges mocks base method.
func (m *MockRelationService) GetRelationUnitChanges(arg0 context.Context, arg1 []unit.UUID, arg2 []application.ID) (relation0.RelationUnitsChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitChanges", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationUnitsChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitChanges indicates an expected call of GetRelationUnitChanges.
func (mr *MockRelationServiceMockRecorder) GetRelationUnitChanges(arg0, arg1, arg2 any) *MockRelationServiceGetRelationUnitChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitChanges", reflect.TypeOf((*MockRelationService)(nil).GetRelationUnitChanges), arg0, arg1, arg2)
	return &MockRelationServiceGetRelationUnitChangesCall{Call: call}
}

// MockRelationServiceGetRelationUnitChangesCall wrap *gomock.Call
type MockRelationServiceGetRelationUnitChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUnitChangesCall) Return(arg0 relation0.RelationUnitsChange, arg1 error) *MockRelationServiceGetRelationUnitChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUnitChangesCall) Do(f func(context.Context, []unit.UUID, []application.ID) (relation0.RelationUnitsChange, error)) *MockRelationServiceGetRelationUnitChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUnitChangesCall) DoAndReturn(f func(context.Context, []unit.UUID, []application.ID) (relation0.RelationUnitsChange, error)) *MockRelationServiceGetRelationUnitChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitSettings mocks base method.
func (m *MockRelationService) GetRelationUnitSettings(arg0 context.Context, arg1 relation.UnitUUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitSettings", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitSettings indicates an expected call of GetRelationUnitSettings.
func (mr *MockRelationServiceMockRecorder) GetRelationUnitSettings(arg0, arg1 any) *MockRelationServiceGetRelationUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitSettings", reflect.TypeOf((*MockRelationService)(nil).GetRelationUnitSettings), arg0, arg1)
	return &MockRelationServiceGetRelationUnitSettingsCall{Call: call}
}

// MockRelationServiceGetRelationUnitSettingsCall wrap *gomock.Call
type MockRelationServiceGetRelationUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUnitSettingsCall) Return(arg0 map[string]string, arg1 error) *MockRelationServiceGetRelationUnitSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockRelationServiceGetRelationUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockRelationServiceGetRelationUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationsStatusForUnit mocks base method.
func (m *MockRelationService) GetRelationsStatusForUnit(arg0 context.Context, arg1 unit.UUID) ([]relation0.RelationUnitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsStatusForUnit", arg0, arg1)
	ret0, _ := ret[0].([]relation0.RelationUnitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsStatusForUnit indicates an expected call of GetRelationsStatusForUnit.
func (mr *MockRelationServiceMockRecorder) GetRelationsStatusForUnit(arg0, arg1 any) *MockRelationServiceGetRelationsStatusForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsStatusForUnit", reflect.TypeOf((*MockRelationService)(nil).GetRelationsStatusForUnit), arg0, arg1)
	return &MockRelationServiceGetRelationsStatusForUnitCall{Call: call}
}

// MockRelationServiceGetRelationsStatusForUnitCall wrap *gomock.Call
type MockRelationServiceGetRelationsStatusForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationsStatusForUnitCall) Return(arg0 []relation0.RelationUnitStatus, arg1 error) *MockRelationServiceGetRelationsStatusForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationsStatusForUnitCall) Do(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatus, error)) *MockRelationServiceGetRelationsStatusForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationsStatusForUnitCall) DoAndReturn(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatus, error)) *MockRelationServiceGetRelationsStatusForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeaveScope mocks base method.
func (m *MockRelationService) LeaveScope(arg0 context.Context, arg1 relation.UnitUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveScope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveScope indicates an expected call of LeaveScope.
func (mr *MockRelationServiceMockRecorder) LeaveScope(arg0, arg1 any) *MockRelationServiceLeaveScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveScope", reflect.TypeOf((*MockRelationService)(nil).LeaveScope), arg0, arg1)
	return &MockRelationServiceLeaveScopeCall{Call: call}
}

// MockRelationServiceLeaveScopeCall wrap *gomock.Call
type MockRelationServiceLeaveScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceLeaveScopeCall) Return(arg0 error) *MockRelationServiceLeaveScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceLeaveScopeCall) Do(f func(context.Context, relation.UnitUUID) error) *MockRelationServiceLeaveScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceLeaveScopeCall) DoAndReturn(f func(context.Context, relation.UnitUUID) error) *MockRelationServiceLeaveScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationApplicationAndUnitSettings mocks base method.
func (m *MockRelationService) SetRelationApplicationAndUnitSettings(arg0 context.Context, arg1 unit.Name, arg2 relation.UnitUUID, arg3, arg4 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationApplicationAndUnitSettings", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationApplicationAndUnitSettings indicates an expected call of SetRelationApplicationAndUnitSettings.
func (mr *MockRelationServiceMockRecorder) SetRelationApplicationAndUnitSettings(arg0, arg1, arg2, arg3, arg4 any) *MockRelationServiceSetRelationApplicationAndUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationApplicationAndUnitSettings", reflect.TypeOf((*MockRelationService)(nil).SetRelationApplicationAndUnitSettings), arg0, arg1, arg2, arg3, arg4)
	return &MockRelationServiceSetRelationApplicationAndUnitSettingsCall{Call: call}
}

// MockRelationServiceSetRelationApplicationAndUnitSettingsCall wrap *gomock.Call
type MockRelationServiceSetRelationApplicationAndUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceSetRelationApplicationAndUnitSettingsCall) Return(arg0 error) *MockRelationServiceSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceSetRelationApplicationAndUnitSettingsCall) Do(f func(context.Context, unit.Name, relation.UnitUUID, map[string]string, map[string]string) error) *MockRelationServiceSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceSetRelationApplicationAndUnitSettingsCall) DoAndReturn(f func(context.Context, unit.Name, relation.UnitUUID, map[string]string, map[string]string) error) *MockRelationServiceSetRelationApplicationAndUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchLifeSuspendedStatus mocks base method.
func (m *MockRelationService) WatchLifeSuspendedStatus(arg0 context.Context, arg1 unit.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLifeSuspendedStatus", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLifeSuspendedStatus indicates an expected call of WatchLifeSuspendedStatus.
func (mr *MockRelationServiceMockRecorder) WatchLifeSuspendedStatus(arg0, arg1 any) *MockRelationServiceWatchLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLifeSuspendedStatus", reflect.TypeOf((*MockRelationService)(nil).WatchLifeSuspendedStatus), arg0, arg1)
	return &MockRelationServiceWatchLifeSuspendedStatusCall{Call: call}
}

// MockRelationServiceWatchLifeSuspendedStatusCall wrap *gomock.Call
type MockRelationServiceWatchLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceWatchLifeSuspendedStatusCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockRelationServiceWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceWatchLifeSuspendedStatusCall) Do(f func(context.Context, unit.UUID) (watcher.Watcher[[]string], error)) *MockRelationServiceWatchLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceWatchLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, unit.UUID) (watcher.Watcher[[]string], error)) *MockRelationServiceWatchLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelatedUnits mocks base method.
func (m *MockRelationService) WatchRelatedUnits(arg0 context.Context, arg1 unit.Name, arg2 relation.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelatedUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelatedUnits indicates an expected call of WatchRelatedUnits.
func (mr *MockRelationServiceMockRecorder) WatchRelatedUnits(arg0, arg1, arg2 any) *MockRelationServiceWatchRelatedUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelatedUnits", reflect.TypeOf((*MockRelationService)(nil).WatchRelatedUnits), arg0, arg1, arg2)
	return &MockRelationServiceWatchRelatedUnitsCall{Call: call}
}

// MockRelationServiceWatchRelatedUnitsCall wrap *gomock.Call
type MockRelationServiceWatchRelatedUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceWatchRelatedUnitsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockRelationServiceWatchRelatedUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceWatchRelatedUnitsCall) Do(f func(context.Context, unit.Name, relation.UUID) (watcher.Watcher[[]string], error)) *MockRelationServiceWatchRelatedUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceWatchRelatedUnitsCall) DoAndReturn(f func(context.Context, unit.Name, relation.UUID) (watcher.Watcher[[]string], error)) *MockRelationServiceWatchRelatedUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// CloudAPIVersion mocks base method.
func (m *MockModelInfoService) CloudAPIVersion(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudAPIVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudAPIVersion indicates an expected call of CloudAPIVersion.
func (mr *MockModelInfoServiceMockRecorder) CloudAPIVersion(arg0 any) *MockModelInfoServiceCloudAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudAPIVersion", reflect.TypeOf((*MockModelInfoService)(nil).CloudAPIVersion), arg0)
	return &MockModelInfoServiceCloudAPIVersionCall{Call: call}
}

// MockModelInfoServiceCloudAPIVersionCall wrap *gomock.Call
type MockModelInfoServiceCloudAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceCloudAPIVersionCall) Return(arg0 string, arg1 error) *MockModelInfoServiceCloudAPIVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceCloudAPIVersionCall) Do(f func(context.Context) (string, error)) *MockModelInfoServiceCloudAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceCloudAPIVersionCall) DoAndReturn(f func(context.Context) (string, error)) *MockModelInfoServiceCloudAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// AppliedLXDProfileNames mocks base method.
func (m *MockMachineService) AppliedLXDProfileNames(arg0 context.Context, arg1 machine.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppliedLXDProfileNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppliedLXDProfileNames indicates an expected call of AppliedLXDProfileNames.
func (mr *MockMachineServiceMockRecorder) AppliedLXDProfileNames(arg0, arg1 any) *MockMachineServiceAppliedLXDProfileNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppliedLXDProfileNames", reflect.TypeOf((*MockMachineService)(nil).AppliedLXDProfileNames), arg0, arg1)
	return &MockMachineServiceAppliedLXDProfileNamesCall{Call: call}
}

// MockMachineServiceAppliedLXDProfileNamesCall wrap *gomock.Call
type MockMachineServiceAppliedLXDProfileNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceAppliedLXDProfileNamesCall) Return(arg0 []string, arg1 error) *MockMachineServiceAppliedLXDProfileNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceAppliedLXDProfileNamesCall) Do(f func(context.Context, machine.UUID) ([]string, error)) *MockMachineServiceAppliedLXDProfileNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceAppliedLXDProfileNamesCall) DoAndReturn(f func(context.Context, machine.UUID) ([]string, error)) *MockMachineServiceAppliedLXDProfileNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AvailabilityZone mocks base method.
func (m *MockMachineService) AvailabilityZone(arg0 context.Context, arg1 machine.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZone", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZone indicates an expected call of AvailabilityZone.
func (mr *MockMachineServiceMockRecorder) AvailabilityZone(arg0, arg1 any) *MockMachineServiceAvailabilityZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZone", reflect.TypeOf((*MockMachineService)(nil).AvailabilityZone), arg0, arg1)
	return &MockMachineServiceAvailabilityZoneCall{Call: call}
}

// MockMachineServiceAvailabilityZoneCall wrap *gomock.Call
type MockMachineServiceAvailabilityZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceAvailabilityZoneCall) Return(arg0 string, arg1 error) *MockMachineServiceAvailabilityZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceAvailabilityZoneCall) Do(f func(context.Context, machine.UUID) (string, error)) *MockMachineServiceAvailabilityZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceAvailabilityZoneCall) DoAndReturn(f func(context.Context, machine.UUID) (string, error)) *MockMachineServiceAvailabilityZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClearMachineReboot mocks base method.
func (m *MockMachineService) ClearMachineReboot(arg0 context.Context, arg1 machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMachineReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMachineReboot indicates an expected call of ClearMachineReboot.
func (mr *MockMachineServiceMockRecorder) ClearMachineReboot(arg0, arg1 any) *MockMachineServiceClearMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMachineReboot", reflect.TypeOf((*MockMachineService)(nil).ClearMachineReboot), arg0, arg1)
	return &MockMachineServiceClearMachineRebootCall{Call: call}
}

// MockMachineServiceClearMachineRebootCall wrap *gomock.Call
type MockMachineServiceClearMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceClearMachineRebootCall) Return(arg0 error) *MockMachineServiceClearMachineRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceClearMachineRebootCall) Do(f func(context.Context, machine.UUID) error) *MockMachineServiceClearMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceClearMachineRebootCall) DoAndReturn(f func(context.Context, machine.UUID) error) *MockMachineServiceClearMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineManuallyProvisioned mocks base method.
func (m *MockMachineService) IsMachineManuallyProvisioned(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineManuallyProvisioned", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineManuallyProvisioned indicates an expected call of IsMachineManuallyProvisioned.
func (mr *MockMachineServiceMockRecorder) IsMachineManuallyProvisioned(arg0, arg1 any) *MockMachineServiceIsMachineManuallyProvisionedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineManuallyProvisioned", reflect.TypeOf((*MockMachineService)(nil).IsMachineManuallyProvisioned), arg0, arg1)
	return &MockMachineServiceIsMachineManuallyProvisionedCall{Call: call}
}

// MockMachineServiceIsMachineManuallyProvisionedCall wrap *gomock.Call
type MockMachineServiceIsMachineManuallyProvisionedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceIsMachineManuallyProvisionedCall) Return(arg0 bool, arg1 error) *MockMachineServiceIsMachineManuallyProvisionedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceIsMachineManuallyProvisionedCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineManuallyProvisionedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceIsMachineManuallyProvisionedCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineManuallyProvisionedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMachineRebootRequired mocks base method.
func (m *MockMachineService) IsMachineRebootRequired(arg0 context.Context, arg1 machine.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineRebootRequired", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineRebootRequired indicates an expected call of IsMachineRebootRequired.
func (mr *MockMachineServiceMockRecorder) IsMachineRebootRequired(arg0, arg1 any) *MockMachineServiceIsMachineRebootRequiredCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineRebootRequired", reflect.TypeOf((*MockMachineService)(nil).IsMachineRebootRequired), arg0, arg1)
	return &MockMachineServiceIsMachineRebootRequiredCall{Call: call}
}

// MockMachineServiceIsMachineRebootRequiredCall wrap *gomock.Call
type MockMachineServiceIsMachineRebootRequiredCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceIsMachineRebootRequiredCall) Return(arg0 bool, arg1 error) *MockMachineServiceIsMachineRebootRequiredCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceIsMachineRebootRequiredCall) Do(f func(context.Context, machine.UUID) (bool, error)) *MockMachineServiceIsMachineRebootRequiredCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceIsMachineRebootRequiredCall) DoAndReturn(f func(context.Context, machine.UUID) (bool, error)) *MockMachineServiceIsMachineRebootRequiredCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequireMachineReboot mocks base method.
func (m *MockMachineService) RequireMachineReboot(arg0 context.Context, arg1 machine.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireMachineReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequireMachineReboot indicates an expected call of RequireMachineReboot.
func (mr *MockMachineServiceMockRecorder) RequireMachineReboot(arg0, arg1 any) *MockMachineServiceRequireMachineRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireMachineReboot", reflect.TypeOf((*MockMachineService)(nil).RequireMachineReboot), arg0, arg1)
	return &MockMachineServiceRequireMachineRebootCall{Call: call}
}

// MockMachineServiceRequireMachineRebootCall wrap *gomock.Call
type MockMachineServiceRequireMachineRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceRequireMachineRebootCall) Return(arg0 error) *MockMachineServiceRequireMachineRebootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceRequireMachineRebootCall) Do(f func(context.Context, machine.UUID) error) *MockMachineServiceRequireMachineRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceRequireMachineRebootCall) DoAndReturn(f func(context.Context, machine.UUID) error) *MockMachineServiceRequireMachineRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldRebootOrShutdown mocks base method.
func (m *MockMachineService) ShouldRebootOrShutdown(arg0 context.Context, arg1 machine.UUID) (machine.RebootAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRebootOrShutdown", arg0, arg1)
	ret0, _ := ret[0].(machine.RebootAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldRebootOrShutdown indicates an expected call of ShouldRebootOrShutdown.
func (mr *MockMachineServiceMockRecorder) ShouldRebootOrShutdown(arg0, arg1 any) *MockMachineServiceShouldRebootOrShutdownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRebootOrShutdown", reflect.TypeOf((*MockMachineService)(nil).ShouldRebootOrShutdown), arg0, arg1)
	return &MockMachineServiceShouldRebootOrShutdownCall{Call: call}
}

// MockMachineServiceShouldRebootOrShutdownCall wrap *gomock.Call
type MockMachineServiceShouldRebootOrShutdownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceShouldRebootOrShutdownCall) Return(arg0 machine.RebootAction, arg1 error) *MockMachineServiceShouldRebootOrShutdownCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceShouldRebootOrShutdownCall) Do(f func(context.Context, machine.UUID) (machine.RebootAction, error)) *MockMachineServiceShouldRebootOrShutdownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceShouldRebootOrShutdownCall) DoAndReturn(f func(context.Context, machine.UUID) (machine.RebootAction, error)) *MockMachineServiceShouldRebootOrShutdownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchLXDProfiles mocks base method.
func (m *MockMachineService) WatchLXDProfiles(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLXDProfiles", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchLXDProfiles indicates an expected call of WatchLXDProfiles.
func (mr *MockMachineServiceMockRecorder) WatchLXDProfiles(arg0, arg1 any) *MockMachineServiceWatchLXDProfilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLXDProfiles", reflect.TypeOf((*MockMachineService)(nil).WatchLXDProfiles), arg0, arg1)
	return &MockMachineServiceWatchLXDProfilesCall{Call: call}
}

// MockMachineServiceWatchLXDProfilesCall wrap *gomock.Call
type MockMachineServiceWatchLXDProfilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceWatchLXDProfilesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockMachineServiceWatchLXDProfilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceWatchLXDProfilesCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockMachineServiceWatchLXDProfilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceWatchLXDProfilesCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[struct{}], error)) *MockMachineServiceWatchLXDProfilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetUnitPrivateAddress mocks base method.
func (m *MockNetworkService) GetUnitPrivateAddress(arg0 context.Context, arg1 unit.Name) (network.SpaceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPrivateAddress", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitPrivateAddress indicates an expected call of GetUnitPrivateAddress.
func (mr *MockNetworkServiceMockRecorder) GetUnitPrivateAddress(arg0, arg1 any) *MockNetworkServiceGetUnitPrivateAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPrivateAddress", reflect.TypeOf((*MockNetworkService)(nil).GetUnitPrivateAddress), arg0, arg1)
	return &MockNetworkServiceGetUnitPrivateAddressCall{Call: call}
}

// MockNetworkServiceGetUnitPrivateAddressCall wrap *gomock.Call
type MockNetworkServiceGetUnitPrivateAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetUnitPrivateAddressCall) Return(arg0 network.SpaceAddress, arg1 error) *MockNetworkServiceGetUnitPrivateAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetUnitPrivateAddressCall) Do(f func(context.Context, unit.Name) (network.SpaceAddress, error)) *MockNetworkServiceGetUnitPrivateAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetUnitPrivateAddressCall) DoAndReturn(f func(context.Context, unit.Name) (network.SpaceAddress, error)) *MockNetworkServiceGetUnitPrivateAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitPublicAddress mocks base method.
func (m *MockNetworkService) GetUnitPublicAddress(arg0 context.Context, arg1 unit.Name) (network.SpaceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPublicAddress", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitPublicAddress indicates an expected call of GetUnitPublicAddress.
func (mr *MockNetworkServiceMockRecorder) GetUnitPublicAddress(arg0, arg1 any) *MockNetworkServiceGetUnitPublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPublicAddress", reflect.TypeOf((*MockNetworkService)(nil).GetUnitPublicAddress), arg0, arg1)
	return &MockNetworkServiceGetUnitPublicAddressCall{Call: call}
}

// MockNetworkServiceGetUnitPublicAddressCall wrap *gomock.Call
type MockNetworkServiceGetUnitPublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetUnitPublicAddressCall) Return(arg0 network.SpaceAddress, arg1 error) *MockNetworkServiceGetUnitPublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetUnitPublicAddressCall) Do(f func(context.Context, unit.Name) (network.SpaceAddress, error)) *MockNetworkServiceGetUnitPublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetUnitPublicAddressCall) DoAndReturn(f func(context.Context, unit.Name) (network.SpaceAddress, error)) *MockNetworkServiceGetUnitPublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
