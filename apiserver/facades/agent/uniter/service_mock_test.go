// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/uniter (interfaces: ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package uniter -destination service_mock_test.go github.com/juju/juju/apiserver/facades/agent/uniter ApplicationService
//

// Package uniter is a generated GoMock package.
package uniter

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	leadership "github.com/juju/juju/core/leadership"
	life "github.com/juju/juju/core/life"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	charm "github.com/juju/juju/domain/application/charm"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplicationService) ISGOMOCK() struct{} {
	return struct{}{}
}

// DeleteUnit mocks base method.
func (m *MockApplicationService) DeleteUnit(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockApplicationServiceMockRecorder) DeleteUnit(arg0, arg1 any) *MockApplicationServiceDeleteUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockApplicationService)(nil).DeleteUnit), arg0, arg1)
	return &MockApplicationServiceDeleteUnitCall{Call: call}
}

// MockApplicationServiceDeleteUnitCall wrap *gomock.Call
type MockApplicationServiceDeleteUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDeleteUnitCall) Return(arg0 error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDeleteUnitCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDeleteUnitCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyUnit mocks base method.
func (m *MockApplicationService) DestroyUnit(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyUnit indicates an expected call of DestroyUnit.
func (mr *MockApplicationServiceMockRecorder) DestroyUnit(arg0, arg1 any) *MockApplicationServiceDestroyUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyUnit", reflect.TypeOf((*MockApplicationService)(nil).DestroyUnit), arg0, arg1)
	return &MockApplicationServiceDestroyUnitCall{Call: call}
}

// MockApplicationServiceDestroyUnitCall wrap *gomock.Call
type MockApplicationServiceDestroyUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDestroyUnitCall) Return(arg0 error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDestroyUnitCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDestroyUnitCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureUnitDead mocks base method.
func (m *MockApplicationService) EnsureUnitDead(arg0 context.Context, arg1 unit.Name, arg2 leadership.Revoker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitDead", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureUnitDead indicates an expected call of EnsureUnitDead.
func (mr *MockApplicationServiceMockRecorder) EnsureUnitDead(arg0, arg1, arg2 any) *MockApplicationServiceEnsureUnitDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitDead", reflect.TypeOf((*MockApplicationService)(nil).EnsureUnitDead), arg0, arg1, arg2)
	return &MockApplicationServiceEnsureUnitDeadCall{Call: call}
}

// MockApplicationServiceEnsureUnitDeadCall wrap *gomock.Call
type MockApplicationServiceEnsureUnitDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceEnsureUnitDeadCall) Return(arg0 error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceEnsureUnitDeadCall) Do(f func(context.Context, unit.Name, leadership.Revoker) error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceEnsureUnitDeadCall) DoAndReturn(f func(context.Context, unit.Name, leadership.Revoker) error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByName mocks base method.
func (m *MockApplicationService) GetApplicationIDByName(arg0 context.Context, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByUnitName mocks base method.
func (m *MockApplicationService) GetApplicationIDByUnitName(arg0 context.Context, arg1 unit.Name) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByUnitName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByUnitName indicates an expected call of GetApplicationIDByUnitName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByUnitName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByUnitName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByUnitName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByUnitNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByUnitNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLife mocks base method.
func (m *MockApplicationService) GetApplicationLife(arg0 context.Context, arg1 string) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLife indicates an expected call of GetApplicationLife.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLife(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLife", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLife), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeCall) Do(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeCall) DoAndReturn(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAvailableCharmArchiveSHA256 mocks base method.
func (m *MockApplicationService) GetAvailableCharmArchiveSHA256(arg0 context.Context, arg1 charm.CharmLocator) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableCharmArchiveSHA256", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableCharmArchiveSHA256 indicates an expected call of GetAvailableCharmArchiveSHA256.
func (mr *MockApplicationServiceMockRecorder) GetAvailableCharmArchiveSHA256(arg0, arg1 any) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableCharmArchiveSHA256", reflect.TypeOf((*MockApplicationService)(nil).GetAvailableCharmArchiveSHA256), arg0, arg1)
	return &MockApplicationServiceGetAvailableCharmArchiveSHA256Call{Call: call}
}

// MockApplicationServiceGetAvailableCharmArchiveSHA256Call wrap *gomock.Call
type MockApplicationServiceGetAvailableCharmArchiveSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) Return(arg0 string, arg1 error) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) Do(f func(context.Context, charm.CharmLocator) (string, error)) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) DoAndReturn(f func(context.Context, charm.CharmLocator) (string, error)) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLXDProfile mocks base method.
func (m *MockApplicationService) GetCharmLXDProfile(arg0 context.Context, arg1 charm.CharmLocator) (charm0.LXDProfile, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLXDProfile", arg0, arg1)
	ret0, _ := ret[0].(charm0.LXDProfile)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmLXDProfile indicates an expected call of GetCharmLXDProfile.
func (mr *MockApplicationServiceMockRecorder) GetCharmLXDProfile(arg0, arg1 any) *MockApplicationServiceGetCharmLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLXDProfile", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLXDProfile), arg0, arg1)
	return &MockApplicationServiceGetCharmLXDProfileCall{Call: call}
}

// MockApplicationServiceGetCharmLXDProfileCall wrap *gomock.Call
type MockApplicationServiceGetCharmLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLXDProfileCall) Return(arg0 charm0.LXDProfile, arg1 int, arg2 error) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLXDProfileCall) Do(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLXDProfileCall) DoAndReturn(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmModifiedVersion mocks base method.
func (m *MockApplicationService) GetCharmModifiedVersion(arg0 context.Context, arg1 application.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmModifiedVersion", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmModifiedVersion indicates an expected call of GetCharmModifiedVersion.
func (mr *MockApplicationServiceMockRecorder) GetCharmModifiedVersion(arg0, arg1 any) *MockApplicationServiceGetCharmModifiedVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmModifiedVersion", reflect.TypeOf((*MockApplicationService)(nil).GetCharmModifiedVersion), arg0, arg1)
	return &MockApplicationServiceGetCharmModifiedVersionCall{Call: call}
}

// MockApplicationServiceGetCharmModifiedVersionCall wrap *gomock.Call
type MockApplicationServiceGetCharmModifiedVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmModifiedVersionCall) Return(arg0 int, arg1 error) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmModifiedVersionCall) Do(f func(context.Context, application.ID) (int, error)) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmModifiedVersionCall) DoAndReturn(f func(context.Context, application.ID) (int, error)) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplication mocks base method.
func (m *MockApplicationService) WatchApplication(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplication", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplication indicates an expected call of WatchApplication.
func (mr *MockApplicationServiceMockRecorder) WatchApplication(arg0, arg1 any) *MockApplicationServiceWatchApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplication", reflect.TypeOf((*MockApplicationService)(nil).WatchApplication), arg0, arg1)
	return &MockApplicationServiceWatchApplicationCall{Call: call}
}

// MockApplicationServiceWatchApplicationCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
