// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/relation (interfaces: RelationUnitsWatcher)
//
// Generated by this command:
//
//	mockgen -typed -package uniter -destination relation_mock_test.go github.com/juju/juju/domain/relation RelationUnitsWatcher
//

// Package uniter is a generated GoMock package.
package uniter

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockRelationUnitsWatcher is a mock of RelationUnitsWatcher interface.
type MockRelationUnitsWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRelationUnitsWatcherMockRecorder
}

// MockRelationUnitsWatcherMockRecorder is the mock recorder for MockRelationUnitsWatcher.
type MockRelationUnitsWatcherMockRecorder struct {
	mock *MockRelationUnitsWatcher
}

// NewMockRelationUnitsWatcher creates a new mock instance.
func NewMockRelationUnitsWatcher(ctrl *gomock.Controller) *MockRelationUnitsWatcher {
	mock := &MockRelationUnitsWatcher{ctrl: ctrl}
	mock.recorder = &MockRelationUnitsWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationUnitsWatcher) EXPECT() *MockRelationUnitsWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockRelationUnitsWatcher) Changes() <-chan watcher.RelationUnitsChange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan watcher.RelationUnitsChange)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockRelationUnitsWatcherMockRecorder) Changes() *MockRelationUnitsWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockRelationUnitsWatcher)(nil).Changes))
	return &MockRelationUnitsWatcherChangesCall{Call: call}
}

// MockRelationUnitsWatcherChangesCall wrap *gomock.Call
type MockRelationUnitsWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitsWatcherChangesCall) Return(arg0 <-chan watcher.RelationUnitsChange) *MockRelationUnitsWatcherChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitsWatcherChangesCall) Do(f func() <-chan watcher.RelationUnitsChange) *MockRelationUnitsWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitsWatcherChangesCall) DoAndReturn(f func() <-chan watcher.RelationUnitsChange) *MockRelationUnitsWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockRelationUnitsWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockRelationUnitsWatcherMockRecorder) Kill() *MockRelationUnitsWatcherKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockRelationUnitsWatcher)(nil).Kill))
	return &MockRelationUnitsWatcherKillCall{Call: call}
}

// MockRelationUnitsWatcherKillCall wrap *gomock.Call
type MockRelationUnitsWatcherKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitsWatcherKillCall) Return() *MockRelationUnitsWatcherKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitsWatcherKillCall) Do(f func()) *MockRelationUnitsWatcherKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitsWatcherKillCall) DoAndReturn(f func()) *MockRelationUnitsWatcherKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockRelationUnitsWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRelationUnitsWatcherMockRecorder) Wait() *MockRelationUnitsWatcherWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRelationUnitsWatcher)(nil).Wait))
	return &MockRelationUnitsWatcherWaitCall{Call: call}
}

// MockRelationUnitsWatcherWaitCall wrap *gomock.Call
type MockRelationUnitsWatcherWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitsWatcherWaitCall) Return(arg0 error) *MockRelationUnitsWatcherWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitsWatcherWaitCall) Do(f func() error) *MockRelationUnitsWatcherWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitsWatcherWaitCall) DoAndReturn(f func() error) *MockRelationUnitsWatcherWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
