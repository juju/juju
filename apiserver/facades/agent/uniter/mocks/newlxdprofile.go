// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/uniter (interfaces: LXDProfileBackendV2,LXDProfileMachineV2,LXDProfileUnitV2,LXDProfileCharmV2)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	charm "github.com/juju/charm/v7"
	uniter "github.com/juju/juju/apiserver/facades/agent/uniter"
	lxdprofile "github.com/juju/juju/core/lxdprofile"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v4"
	reflect "reflect"
)

// MockLXDProfileBackendV2 is a mock of LXDProfileBackendV2 interface
type MockLXDProfileBackendV2 struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileBackendV2MockRecorder
}

// MockLXDProfileBackendV2MockRecorder is the mock recorder for MockLXDProfileBackendV2
type MockLXDProfileBackendV2MockRecorder struct {
	mock *MockLXDProfileBackendV2
}

// NewMockLXDProfileBackendV2 creates a new mock instance
func NewMockLXDProfileBackendV2(ctrl *gomock.Controller) *MockLXDProfileBackendV2 {
	mock := &MockLXDProfileBackendV2{ctrl: ctrl}
	mock.recorder = &MockLXDProfileBackendV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileBackendV2) EXPECT() *MockLXDProfileBackendV2MockRecorder {
	return m.recorder
}

// Charm mocks base method
func (m *MockLXDProfileBackendV2) Charm(arg0 *charm.URL) (uniter.LXDProfileCharmV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Charm", arg0)
	ret0, _ := ret[0].(uniter.LXDProfileCharmV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Charm indicates an expected call of Charm
func (mr *MockLXDProfileBackendV2MockRecorder) Charm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charm", reflect.TypeOf((*MockLXDProfileBackendV2)(nil).Charm), arg0)
}

// Machine mocks base method
func (m *MockLXDProfileBackendV2) Machine(arg0 string) (uniter.LXDProfileMachineV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(uniter.LXDProfileMachineV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine
func (mr *MockLXDProfileBackendV2MockRecorder) Machine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockLXDProfileBackendV2)(nil).Machine), arg0)
}

// Unit mocks base method
func (m *MockLXDProfileBackendV2) Unit(arg0 string) (uniter.LXDProfileUnitV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(uniter.LXDProfileUnitV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit
func (mr *MockLXDProfileBackendV2MockRecorder) Unit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockLXDProfileBackendV2)(nil).Unit), arg0)
}

// MockLXDProfileMachineV2 is a mock of LXDProfileMachineV2 interface
type MockLXDProfileMachineV2 struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileMachineV2MockRecorder
}

// MockLXDProfileMachineV2MockRecorder is the mock recorder for MockLXDProfileMachineV2
type MockLXDProfileMachineV2MockRecorder struct {
	mock *MockLXDProfileMachineV2
}

// NewMockLXDProfileMachineV2 creates a new mock instance
func NewMockLXDProfileMachineV2(ctrl *gomock.Controller) *MockLXDProfileMachineV2 {
	mock := &MockLXDProfileMachineV2{ctrl: ctrl}
	mock.recorder = &MockLXDProfileMachineV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileMachineV2) EXPECT() *MockLXDProfileMachineV2MockRecorder {
	return m.recorder
}

// CharmProfiles mocks base method
func (m *MockLXDProfileMachineV2) CharmProfiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmProfiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmProfiles indicates an expected call of CharmProfiles
func (mr *MockLXDProfileMachineV2MockRecorder) CharmProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmProfiles", reflect.TypeOf((*MockLXDProfileMachineV2)(nil).CharmProfiles))
}

// WatchInstanceData mocks base method
func (m *MockLXDProfileMachineV2) WatchInstanceData() state.NotifyWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchInstanceData")
	ret0, _ := ret[0].(state.NotifyWatcher)
	return ret0
}

// WatchInstanceData indicates an expected call of WatchInstanceData
func (mr *MockLXDProfileMachineV2MockRecorder) WatchInstanceData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchInstanceData", reflect.TypeOf((*MockLXDProfileMachineV2)(nil).WatchInstanceData))
}

// MockLXDProfileUnitV2 is a mock of LXDProfileUnitV2 interface
type MockLXDProfileUnitV2 struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileUnitV2MockRecorder
}

// MockLXDProfileUnitV2MockRecorder is the mock recorder for MockLXDProfileUnitV2
type MockLXDProfileUnitV2MockRecorder struct {
	mock *MockLXDProfileUnitV2
}

// NewMockLXDProfileUnitV2 creates a new mock instance
func NewMockLXDProfileUnitV2(ctrl *gomock.Controller) *MockLXDProfileUnitV2 {
	mock := &MockLXDProfileUnitV2{ctrl: ctrl}
	mock.recorder = &MockLXDProfileUnitV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileUnitV2) EXPECT() *MockLXDProfileUnitV2MockRecorder {
	return m.recorder
}

// ApplicationName mocks base method
func (m *MockLXDProfileUnitV2) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName
func (mr *MockLXDProfileUnitV2MockRecorder) ApplicationName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockLXDProfileUnitV2)(nil).ApplicationName))
}

// AssignedMachineId mocks base method
func (m *MockLXDProfileUnitV2) AssignedMachineId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignedMachineId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignedMachineId indicates an expected call of AssignedMachineId
func (mr *MockLXDProfileUnitV2MockRecorder) AssignedMachineId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignedMachineId", reflect.TypeOf((*MockLXDProfileUnitV2)(nil).AssignedMachineId))
}

// CharmURL mocks base method
func (m *MockLXDProfileUnitV2) CharmURL() (*charm.URL, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmURL")
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CharmURL indicates an expected call of CharmURL
func (mr *MockLXDProfileUnitV2MockRecorder) CharmURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmURL", reflect.TypeOf((*MockLXDProfileUnitV2)(nil).CharmURL))
}

// Name mocks base method
func (m *MockLXDProfileUnitV2) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockLXDProfileUnitV2MockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLXDProfileUnitV2)(nil).Name))
}

// Tag mocks base method
func (m *MockLXDProfileUnitV2) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag
func (mr *MockLXDProfileUnitV2MockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockLXDProfileUnitV2)(nil).Tag))
}

// MockLXDProfileCharmV2 is a mock of LXDProfileCharmV2 interface
type MockLXDProfileCharmV2 struct {
	ctrl     *gomock.Controller
	recorder *MockLXDProfileCharmV2MockRecorder
}

// MockLXDProfileCharmV2MockRecorder is the mock recorder for MockLXDProfileCharmV2
type MockLXDProfileCharmV2MockRecorder struct {
	mock *MockLXDProfileCharmV2
}

// NewMockLXDProfileCharmV2 creates a new mock instance
func NewMockLXDProfileCharmV2(ctrl *gomock.Controller) *MockLXDProfileCharmV2 {
	mock := &MockLXDProfileCharmV2{ctrl: ctrl}
	mock.recorder = &MockLXDProfileCharmV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLXDProfileCharmV2) EXPECT() *MockLXDProfileCharmV2MockRecorder {
	return m.recorder
}

// LXDProfile mocks base method
func (m *MockLXDProfileCharmV2) LXDProfile() lxdprofile.Profile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfile")
	ret0, _ := ret[0].(lxdprofile.Profile)
	return ret0
}

// LXDProfile indicates an expected call of LXDProfile
func (mr *MockLXDProfileCharmV2MockRecorder) LXDProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfile", reflect.TypeOf((*MockLXDProfileCharmV2)(nil).LXDProfile))
}
