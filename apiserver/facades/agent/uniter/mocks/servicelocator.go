// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/uniter (interfaces: ServiceLocatorBackend)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceLocatorBackend is a mock of ServiceLocatorBackend interface.
type MockServiceLocatorBackend struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLocatorBackendMockRecorder
}

// MockServiceLocatorBackendMockRecorder is the mock recorder for MockServiceLocatorBackend.
type MockServiceLocatorBackendMockRecorder struct {
	mock *MockServiceLocatorBackend
}

// NewMockServiceLocatorBackend creates a new mock instance.
func NewMockServiceLocatorBackend(ctrl *gomock.Controller) *MockServiceLocatorBackend {
	mock := &MockServiceLocatorBackend{ctrl: ctrl}
	mock.recorder = &MockServiceLocatorBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLocatorBackend) EXPECT() *MockServiceLocatorBackendMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockServiceLocatorBackend) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceLocatorBackendMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServiceLocatorBackend)(nil).Name))
}

// Type mocks base method.
func (m *MockServiceLocatorBackend) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockServiceLocatorBackendMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockServiceLocatorBackend)(nil).Type))
}
