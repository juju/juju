// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/uniter (interfaces: ServiceLocatorBackend)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uniter "github.com/juju/juju/apiserver/facades/agent/uniter"
)

// MockServiceLocatorBackend is a mock of ServiceLocatorBackend interface.
type MockServiceLocatorBackend struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLocatorBackendMockRecorder
}

// MockServiceLocatorBackendMockRecorder is the mock recorder for MockServiceLocatorBackend.
type MockServiceLocatorBackendMockRecorder struct {
	mock *MockServiceLocatorBackend
}

// NewMockServiceLocatorBackend creates a new mock instance.
func NewMockServiceLocatorBackend(ctrl *gomock.Controller) *MockServiceLocatorBackend {
	mock := &MockServiceLocatorBackend{ctrl: ctrl}
	mock.recorder = &MockServiceLocatorBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLocatorBackend) EXPECT() *MockServiceLocatorBackendMockRecorder {
	return m.recorder
}

// AddServiceLocator mocks base method.
func (m *MockServiceLocatorBackend) AddServiceLocator(arg0, arg1, arg2 string) (*uniter.ServiceLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceLocator", arg0, arg1, arg2)
	ret0, _ := ret[0].(*uniter.ServiceLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceLocator indicates an expected call of AddServiceLocator.
func (mr *MockServiceLocatorBackendMockRecorder) AddServiceLocator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceLocator", reflect.TypeOf((*MockServiceLocatorBackend)(nil).AddServiceLocator), arg0, arg1, arg2)
}
