// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/cache (interfaces: NotifyWatcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotifyWatcher is a mock of NotifyWatcher interface
type MockNotifyWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyWatcherMockRecorder
}

// MockNotifyWatcherMockRecorder is the mock recorder for MockNotifyWatcher
type MockNotifyWatcherMockRecorder struct {
	mock *MockNotifyWatcher
}

// NewMockNotifyWatcher creates a new mock instance
func NewMockNotifyWatcher(ctrl *gomock.Controller) *MockNotifyWatcher {
	mock := &MockNotifyWatcher{ctrl: ctrl}
	mock.recorder = &MockNotifyWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifyWatcher) EXPECT() *MockNotifyWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method
func (m *MockNotifyWatcher) Changes() <-chan struct{} {
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Changes indicates an expected call of Changes
func (mr *MockNotifyWatcherMockRecorder) Changes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockNotifyWatcher)(nil).Changes))
}

// Kill mocks base method
func (m *MockNotifyWatcher) Kill() {
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill
func (mr *MockNotifyWatcherMockRecorder) Kill() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockNotifyWatcher)(nil).Kill))
}

// Stop mocks base method
func (m *MockNotifyWatcher) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockNotifyWatcherMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNotifyWatcher)(nil).Stop))
}

// Wait mocks base method
func (m *MockNotifyWatcher) Wait() error {
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockNotifyWatcherMockRecorder) Wait() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockNotifyWatcher)(nil).Wait))
}
