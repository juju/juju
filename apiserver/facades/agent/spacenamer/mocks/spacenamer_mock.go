// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/spacenamer (interfaces: SpaceNamerState,Space,Model,Config)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	spacenamer "github.com/juju/juju/apiserver/facades/agent/spacenamer"
	state "github.com/juju/juju/state"
	names_v3 "gopkg.in/juju/names.v3"
	reflect "reflect"
)

// MockSpaceNamerState is a mock of SpaceNamerState interface
type MockSpaceNamerState struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceNamerStateMockRecorder
}

// MockSpaceNamerStateMockRecorder is the mock recorder for MockSpaceNamerState
type MockSpaceNamerStateMockRecorder struct {
	mock *MockSpaceNamerState
}

// NewMockSpaceNamerState creates a new mock instance
func NewMockSpaceNamerState(ctrl *gomock.Controller) *MockSpaceNamerState {
	mock := &MockSpaceNamerState{ctrl: ctrl}
	mock.recorder = &MockSpaceNamerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpaceNamerState) EXPECT() *MockSpaceNamerStateMockRecorder {
	return m.recorder
}

// FindEntity mocks base method
func (m *MockSpaceNamerState) FindEntity(arg0 names_v3.Tag) (state.Entity, error) {
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity
func (mr *MockSpaceNamerStateMockRecorder) FindEntity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockSpaceNamerState)(nil).FindEntity), arg0)
}

// Model mocks base method
func (m *MockSpaceNamerState) Model() (spacenamer.Model, error) {
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(spacenamer.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model
func (mr *MockSpaceNamerStateMockRecorder) Model() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockSpaceNamerState)(nil).Model))
}

// SpaceByID mocks base method
func (m *MockSpaceNamerState) SpaceByID(arg0 string) (spacenamer.Space, error) {
	ret := m.ctrl.Call(m, "SpaceByID", arg0)
	ret0, _ := ret[0].(spacenamer.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByID indicates an expected call of SpaceByID
func (mr *MockSpaceNamerStateMockRecorder) SpaceByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByID", reflect.TypeOf((*MockSpaceNamerState)(nil).SpaceByID), arg0)
}

// MockSpace is a mock of Space interface
type MockSpace struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceMockRecorder
}

// MockSpaceMockRecorder is the mock recorder for MockSpace
type MockSpaceMockRecorder struct {
	mock *MockSpace
}

// NewMockSpace creates a new mock instance
func NewMockSpace(ctrl *gomock.Controller) *MockSpace {
	mock := &MockSpace{ctrl: ctrl}
	mock.recorder = &MockSpaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpace) EXPECT() *MockSpaceMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockSpace) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockSpaceMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSpace)(nil).Name))
}

// SetName mocks base method
func (m *MockSpace) SetName(arg0 string) error {
	ret := m.ctrl.Call(m, "SetName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName
func (mr *MockSpaceMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockSpace)(nil).SetName), arg0)
}

// MockModel is a mock of Model interface
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockModel) Config() (spacenamer.Config, error) {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(spacenamer.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config
func (mr *MockModelMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockModel)(nil).Config))
}

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// DefaultSpace mocks base method
func (m *MockConfig) DefaultSpace() string {
	ret := m.ctrl.Call(m, "DefaultSpace")
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultSpace indicates an expected call of DefaultSpace
func (mr *MockConfigMockRecorder) DefaultSpace() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultSpace", reflect.TypeOf((*MockConfig)(nil).DefaultSpace))
}
