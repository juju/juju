// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/fanconfigurer (interfaces: MachineAccessor,ModelAccessor,Machine)
//
// Generated by this command:
//
//	mockgen -package fanconfigurer_test -destination state_mock_test.go github.com/juju/juju/apiserver/facades/agent/fanconfigurer MachineAccessor,ModelAccessor,Machine
//

// Package fanconfigurer_test is a generated GoMock package.
package fanconfigurer_test

import (
	reflect "reflect"

	fanconfigurer "github.com/juju/juju/apiserver/facades/agent/fanconfigurer"
	config "github.com/juju/juju/environs/config"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockMachineAccessor is a mock of MachineAccessor interface.
type MockMachineAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockMachineAccessorMockRecorder
}

// MockMachineAccessorMockRecorder is the mock recorder for MockMachineAccessor.
type MockMachineAccessorMockRecorder struct {
	mock *MockMachineAccessor
}

// NewMockMachineAccessor creates a new mock instance.
func NewMockMachineAccessor(ctrl *gomock.Controller) *MockMachineAccessor {
	mock := &MockMachineAccessor{ctrl: ctrl}
	mock.recorder = &MockMachineAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineAccessor) EXPECT() *MockMachineAccessorMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockMachineAccessor) Machine(arg0 string) (fanconfigurer.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(fanconfigurer.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockMachineAccessorMockRecorder) Machine(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockMachineAccessor)(nil).Machine), arg0)
}

// MockModelAccessor is a mock of ModelAccessor interface.
type MockModelAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockModelAccessorMockRecorder
}

// MockModelAccessorMockRecorder is the mock recorder for MockModelAccessor.
type MockModelAccessorMockRecorder struct {
	mock *MockModelAccessor
}

// NewMockModelAccessor creates a new mock instance.
func NewMockModelAccessor(ctrl *gomock.Controller) *MockModelAccessor {
	mock := &MockModelAccessor{ctrl: ctrl}
	mock.recorder = &MockModelAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAccessor) EXPECT() *MockModelAccessorMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelAccessor) ModelConfig() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelAccessorMockRecorder) ModelConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelAccessor)(nil).ModelConfig))
}

// WatchForModelConfigChanges mocks base method.
func (m *MockModelAccessor) WatchForModelConfigChanges() state.NotifyWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForModelConfigChanges")
	ret0, _ := ret[0].(state.NotifyWatcher)
	return ret0
}

// WatchForModelConfigChanges indicates an expected call of WatchForModelConfigChanges.
func (mr *MockModelAccessorMockRecorder) WatchForModelConfigChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForModelConfigChanges", reflect.TypeOf((*MockModelAccessor)(nil).WatchForModelConfigChanges))
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// Base mocks base method.
func (m *MockMachine) Base() state.Base {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base")
	ret0, _ := ret[0].(state.Base)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockMachineMockRecorder) Base() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockMachine)(nil).Base))
}
