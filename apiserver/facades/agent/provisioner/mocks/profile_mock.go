// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/provisioner (interfaces: ProfileMachine,ProfileBackend,ProfileCharm)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	provisioner "github.com/juju/juju/apiserver/facades/agent/provisioner"
	charm_v6 "gopkg.in/juju/charm.v6"
	reflect "reflect"
)

// MockProfileMachine is a mock of ProfileMachine interface
type MockProfileMachine struct {
	ctrl     *gomock.Controller
	recorder *MockProfileMachineMockRecorder
}

// MockProfileMachineMockRecorder is the mock recorder for MockProfileMachine
type MockProfileMachineMockRecorder struct {
	mock *MockProfileMachine
}

// NewMockProfileMachine creates a new mock instance
func NewMockProfileMachine(ctrl *gomock.Controller) *MockProfileMachine {
	mock := &MockProfileMachine{ctrl: ctrl}
	mock.recorder = &MockProfileMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileMachine) EXPECT() *MockProfileMachineMockRecorder {
	return m.recorder
}

// CharmProfiles mocks base method
func (m *MockProfileMachine) CharmProfiles() ([]string, error) {
	ret := m.ctrl.Call(m, "CharmProfiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmProfiles indicates an expected call of CharmProfiles
func (mr *MockProfileMachineMockRecorder) CharmProfiles() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmProfiles", reflect.TypeOf((*MockProfileMachine)(nil).CharmProfiles))
}

// Id mocks base method
func (m *MockProfileMachine) Id() string {
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockProfileMachineMockRecorder) Id() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockProfileMachine)(nil).Id))
}

// ModelName mocks base method
func (m *MockProfileMachine) ModelName() string {
	ret := m.ctrl.Call(m, "ModelName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelName indicates an expected call of ModelName
func (mr *MockProfileMachineMockRecorder) ModelName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelName", reflect.TypeOf((*MockProfileMachine)(nil).ModelName))
}

// MockProfileBackend is a mock of ProfileBackend interface
type MockProfileBackend struct {
	ctrl     *gomock.Controller
	recorder *MockProfileBackendMockRecorder
}

// MockProfileBackendMockRecorder is the mock recorder for MockProfileBackend
type MockProfileBackendMockRecorder struct {
	mock *MockProfileBackend
}

// NewMockProfileBackend creates a new mock instance
func NewMockProfileBackend(ctrl *gomock.Controller) *MockProfileBackend {
	mock := &MockProfileBackend{ctrl: ctrl}
	mock.recorder = &MockProfileBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileBackend) EXPECT() *MockProfileBackendMockRecorder {
	return m.recorder
}

// Charm mocks base method
func (m *MockProfileBackend) Charm(arg0 *charm_v6.URL) (provisioner.ProfileCharm, error) {
	ret := m.ctrl.Call(m, "Charm", arg0)
	ret0, _ := ret[0].(provisioner.ProfileCharm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Charm indicates an expected call of Charm
func (mr *MockProfileBackendMockRecorder) Charm(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charm", reflect.TypeOf((*MockProfileBackend)(nil).Charm), arg0)
}

// MockProfileCharm is a mock of ProfileCharm interface
type MockProfileCharm struct {
	ctrl     *gomock.Controller
	recorder *MockProfileCharmMockRecorder
}

// MockProfileCharmMockRecorder is the mock recorder for MockProfileCharm
type MockProfileCharmMockRecorder struct {
	mock *MockProfileCharm
}

// NewMockProfileCharm creates a new mock instance
func NewMockProfileCharm(ctrl *gomock.Controller) *MockProfileCharm {
	mock := &MockProfileCharm{ctrl: ctrl}
	mock.recorder = &MockProfileCharmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileCharm) EXPECT() *MockProfileCharmMockRecorder {
	return m.recorder
}

// LXDProfile mocks base method
func (m *MockProfileCharm) LXDProfile() *charm_v6.LXDProfile {
	ret := m.ctrl.Call(m, "LXDProfile")
	ret0, _ := ret[0].(*charm_v6.LXDProfile)
	return ret0
}

// LXDProfile indicates an expected call of LXDProfile
func (mr *MockProfileCharmMockRecorder) LXDProfile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfile", reflect.TypeOf((*MockProfileCharm)(nil).LXDProfile))
}

// Meta mocks base method
func (m *MockProfileCharm) Meta() *charm_v6.Meta {
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*charm_v6.Meta)
	return ret0
}

// Meta indicates an expected call of Meta
func (mr *MockProfileCharmMockRecorder) Meta() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockProfileCharm)(nil).Meta))
}

// Revision mocks base method
func (m *MockProfileCharm) Revision() int {
	ret := m.ctrl.Call(m, "Revision")
	ret0, _ := ret[0].(int)
	return ret0
}

// Revision indicates an expected call of Revision
func (mr *MockProfileCharmMockRecorder) Revision() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revision", reflect.TypeOf((*MockProfileCharm)(nil).Revision))
}
