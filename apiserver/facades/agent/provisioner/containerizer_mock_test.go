// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/network/containerizer (interfaces: LinkLayerDevice)
//
// Generated by this command:
//
//	mockgen -typed -package provisioner -destination containerizer_mock_test.go github.com/juju/juju/internal/network/containerizer LinkLayerDevice
//

// Package provisioner is a generated GoMock package.
package provisioner

import (
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	containerizer "github.com/juju/juju/internal/network/containerizer"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockLinkLayerDevice is a mock of LinkLayerDevice interface.
type MockLinkLayerDevice struct {
	ctrl     *gomock.Controller
	recorder *MockLinkLayerDeviceMockRecorder
}

// MockLinkLayerDeviceMockRecorder is the mock recorder for MockLinkLayerDevice.
type MockLinkLayerDeviceMockRecorder struct {
	mock *MockLinkLayerDevice
}

// NewMockLinkLayerDevice creates a new mock instance.
func NewMockLinkLayerDevice(ctrl *gomock.Controller) *MockLinkLayerDevice {
	mock := &MockLinkLayerDevice{ctrl: ctrl}
	mock.recorder = &MockLinkLayerDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkLayerDevice) EXPECT() *MockLinkLayerDeviceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLinkLayerDevice) ISGOMOCK() struct{} {
	return struct{}{}
}

// Addresses mocks base method.
func (m *MockLinkLayerDevice) Addresses() ([]*state.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses")
	ret0, _ := ret[0].([]*state.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Addresses indicates an expected call of Addresses.
func (mr *MockLinkLayerDeviceMockRecorder) Addresses() *MockLinkLayerDeviceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockLinkLayerDevice)(nil).Addresses))
	return &MockLinkLayerDeviceAddressesCall{Call: call}
}

// MockLinkLayerDeviceAddressesCall wrap *gomock.Call
type MockLinkLayerDeviceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceAddressesCall) Return(arg0 []*state.Address, arg1 error) *MockLinkLayerDeviceAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceAddressesCall) Do(f func() ([]*state.Address, error)) *MockLinkLayerDeviceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceAddressesCall) DoAndReturn(f func() ([]*state.Address, error)) *MockLinkLayerDeviceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EthernetDeviceForBridge mocks base method.
func (m *MockLinkLayerDevice) EthernetDeviceForBridge(arg0 string, arg1 bool, arg2 network.SubnetInfos) (network.InterfaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthernetDeviceForBridge", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.InterfaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthernetDeviceForBridge indicates an expected call of EthernetDeviceForBridge.
func (mr *MockLinkLayerDeviceMockRecorder) EthernetDeviceForBridge(arg0, arg1, arg2 any) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthernetDeviceForBridge", reflect.TypeOf((*MockLinkLayerDevice)(nil).EthernetDeviceForBridge), arg0, arg1, arg2)
	return &MockLinkLayerDeviceEthernetDeviceForBridgeCall{Call: call}
}

// MockLinkLayerDeviceEthernetDeviceForBridgeCall wrap *gomock.Call
type MockLinkLayerDeviceEthernetDeviceForBridgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceEthernetDeviceForBridgeCall) Return(arg0 network.InterfaceInfo, arg1 error) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceEthernetDeviceForBridgeCall) Do(f func(string, bool, network.SubnetInfos) (network.InterfaceInfo, error)) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceEthernetDeviceForBridgeCall) DoAndReturn(f func(string, bool, network.SubnetInfos) (network.InterfaceInfo, error)) *MockLinkLayerDeviceEthernetDeviceForBridgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsAutoStart mocks base method.
func (m *MockLinkLayerDevice) IsAutoStart() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoStart")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAutoStart indicates an expected call of IsAutoStart.
func (mr *MockLinkLayerDeviceMockRecorder) IsAutoStart() *MockLinkLayerDeviceIsAutoStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoStart", reflect.TypeOf((*MockLinkLayerDevice)(nil).IsAutoStart))
	return &MockLinkLayerDeviceIsAutoStartCall{Call: call}
}

// MockLinkLayerDeviceIsAutoStartCall wrap *gomock.Call
type MockLinkLayerDeviceIsAutoStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceIsAutoStartCall) Return(arg0 bool) *MockLinkLayerDeviceIsAutoStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceIsAutoStartCall) Do(f func() bool) *MockLinkLayerDeviceIsAutoStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceIsAutoStartCall) DoAndReturn(f func() bool) *MockLinkLayerDeviceIsAutoStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsUp mocks base method.
func (m *MockLinkLayerDevice) IsUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUp indicates an expected call of IsUp.
func (mr *MockLinkLayerDeviceMockRecorder) IsUp() *MockLinkLayerDeviceIsUpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUp", reflect.TypeOf((*MockLinkLayerDevice)(nil).IsUp))
	return &MockLinkLayerDeviceIsUpCall{Call: call}
}

// MockLinkLayerDeviceIsUpCall wrap *gomock.Call
type MockLinkLayerDeviceIsUpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceIsUpCall) Return(arg0 bool) *MockLinkLayerDeviceIsUpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceIsUpCall) Do(f func() bool) *MockLinkLayerDeviceIsUpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceIsUpCall) DoAndReturn(f func() bool) *MockLinkLayerDeviceIsUpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MACAddress mocks base method.
func (m *MockLinkLayerDevice) MACAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MACAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// MACAddress indicates an expected call of MACAddress.
func (mr *MockLinkLayerDeviceMockRecorder) MACAddress() *MockLinkLayerDeviceMACAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MACAddress", reflect.TypeOf((*MockLinkLayerDevice)(nil).MACAddress))
	return &MockLinkLayerDeviceMACAddressCall{Call: call}
}

// MockLinkLayerDeviceMACAddressCall wrap *gomock.Call
type MockLinkLayerDeviceMACAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceMACAddressCall) Return(arg0 string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceMACAddressCall) Do(f func() string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceMACAddressCall) DoAndReturn(f func() string) *MockLinkLayerDeviceMACAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MTU mocks base method.
func (m *MockLinkLayerDevice) MTU() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MTU")
	ret0, _ := ret[0].(uint)
	return ret0
}

// MTU indicates an expected call of MTU.
func (mr *MockLinkLayerDeviceMockRecorder) MTU() *MockLinkLayerDeviceMTUCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MTU", reflect.TypeOf((*MockLinkLayerDevice)(nil).MTU))
	return &MockLinkLayerDeviceMTUCall{Call: call}
}

// MockLinkLayerDeviceMTUCall wrap *gomock.Call
type MockLinkLayerDeviceMTUCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceMTUCall) Return(arg0 uint) *MockLinkLayerDeviceMTUCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceMTUCall) Do(f func() uint) *MockLinkLayerDeviceMTUCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceMTUCall) DoAndReturn(f func() uint) *MockLinkLayerDeviceMTUCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockLinkLayerDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLinkLayerDeviceMockRecorder) Name() *MockLinkLayerDeviceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLinkLayerDevice)(nil).Name))
	return &MockLinkLayerDeviceNameCall{Call: call}
}

// MockLinkLayerDeviceNameCall wrap *gomock.Call
type MockLinkLayerDeviceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceNameCall) Return(arg0 string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceNameCall) Do(f func() string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceNameCall) DoAndReturn(f func() string) *MockLinkLayerDeviceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ParentDevice mocks base method.
func (m *MockLinkLayerDevice) ParentDevice() (containerizer.LinkLayerDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentDevice")
	ret0, _ := ret[0].(containerizer.LinkLayerDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParentDevice indicates an expected call of ParentDevice.
func (mr *MockLinkLayerDeviceMockRecorder) ParentDevice() *MockLinkLayerDeviceParentDeviceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentDevice", reflect.TypeOf((*MockLinkLayerDevice)(nil).ParentDevice))
	return &MockLinkLayerDeviceParentDeviceCall{Call: call}
}

// MockLinkLayerDeviceParentDeviceCall wrap *gomock.Call
type MockLinkLayerDeviceParentDeviceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceParentDeviceCall) Return(arg0 containerizer.LinkLayerDevice, arg1 error) *MockLinkLayerDeviceParentDeviceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceParentDeviceCall) Do(f func() (containerizer.LinkLayerDevice, error)) *MockLinkLayerDeviceParentDeviceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceParentDeviceCall) DoAndReturn(f func() (containerizer.LinkLayerDevice, error)) *MockLinkLayerDeviceParentDeviceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ParentName mocks base method.
func (m *MockLinkLayerDevice) ParentName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ParentName indicates an expected call of ParentName.
func (mr *MockLinkLayerDeviceMockRecorder) ParentName() *MockLinkLayerDeviceParentNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentName", reflect.TypeOf((*MockLinkLayerDevice)(nil).ParentName))
	return &MockLinkLayerDeviceParentNameCall{Call: call}
}

// MockLinkLayerDeviceParentNameCall wrap *gomock.Call
type MockLinkLayerDeviceParentNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceParentNameCall) Return(arg0 string) *MockLinkLayerDeviceParentNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceParentNameCall) Do(f func() string) *MockLinkLayerDeviceParentNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceParentNameCall) DoAndReturn(f func() string) *MockLinkLayerDeviceParentNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockLinkLayerDevice) Type() network.LinkLayerDeviceType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(network.LinkLayerDeviceType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockLinkLayerDeviceMockRecorder) Type() *MockLinkLayerDeviceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockLinkLayerDevice)(nil).Type))
	return &MockLinkLayerDeviceTypeCall{Call: call}
}

// MockLinkLayerDeviceTypeCall wrap *gomock.Call
type MockLinkLayerDeviceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceTypeCall) Return(arg0 network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceTypeCall) Do(f func() network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceTypeCall) DoAndReturn(f func() network.LinkLayerDeviceType) *MockLinkLayerDeviceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VirtualPortType mocks base method.
func (m *MockLinkLayerDevice) VirtualPortType() network.VirtualPortType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualPortType")
	ret0, _ := ret[0].(network.VirtualPortType)
	return ret0
}

// VirtualPortType indicates an expected call of VirtualPortType.
func (mr *MockLinkLayerDeviceMockRecorder) VirtualPortType() *MockLinkLayerDeviceVirtualPortTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualPortType", reflect.TypeOf((*MockLinkLayerDevice)(nil).VirtualPortType))
	return &MockLinkLayerDeviceVirtualPortTypeCall{Call: call}
}

// MockLinkLayerDeviceVirtualPortTypeCall wrap *gomock.Call
type MockLinkLayerDeviceVirtualPortTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkLayerDeviceVirtualPortTypeCall) Return(arg0 network.VirtualPortType) *MockLinkLayerDeviceVirtualPortTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkLayerDeviceVirtualPortTypeCall) Do(f func() network.VirtualPortType) *MockLinkLayerDeviceVirtualPortTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkLayerDeviceVirtualPortTypeCall) DoAndReturn(f func() network.VirtualPortType) *MockLinkLayerDeviceVirtualPortTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
