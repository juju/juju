// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/provisioner (interfaces: AgentProvisionerService,KeyUpdaterService,ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package provisioner -destination service_mock_test.go github.com/juju/juju/apiserver/facades/agent/provisioner AgentProvisionerService,KeyUpdaterService,ApplicationService
//

// Package provisioner is a generated GoMock package.
package provisioner

import (
	context "context"
	reflect "reflect"

	container "github.com/juju/juju/core/container"
	containermanager "github.com/juju/juju/core/containermanager"
	instance "github.com/juju/juju/core/instance"
	charm "github.com/juju/juju/domain/application/charm"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentProvisionerService is a mock of AgentProvisionerService interface.
type MockAgentProvisionerService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentProvisionerServiceMockRecorder
}

// MockAgentProvisionerServiceMockRecorder is the mock recorder for MockAgentProvisionerService.
type MockAgentProvisionerServiceMockRecorder struct {
	mock *MockAgentProvisionerService
}

// NewMockAgentProvisionerService creates a new mock instance.
func NewMockAgentProvisionerService(ctrl *gomock.Controller) *MockAgentProvisionerService {
	mock := &MockAgentProvisionerService{ctrl: ctrl}
	mock.recorder = &MockAgentProvisionerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentProvisionerService) EXPECT() *MockAgentProvisionerServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAgentProvisionerService) ISGOMOCK() struct{} {
	return struct{}{}
}

// ContainerConfig mocks base method.
func (m *MockAgentProvisionerService) ContainerConfig(arg0 context.Context) (container.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerConfig", arg0)
	ret0, _ := ret[0].(container.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerConfig indicates an expected call of ContainerConfig.
func (mr *MockAgentProvisionerServiceMockRecorder) ContainerConfig(arg0 any) *MockAgentProvisionerServiceContainerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerConfig", reflect.TypeOf((*MockAgentProvisionerService)(nil).ContainerConfig), arg0)
	return &MockAgentProvisionerServiceContainerConfigCall{Call: call}
}

// MockAgentProvisionerServiceContainerConfigCall wrap *gomock.Call
type MockAgentProvisionerServiceContainerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentProvisionerServiceContainerConfigCall) Return(arg0 container.Config, arg1 error) *MockAgentProvisionerServiceContainerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentProvisionerServiceContainerConfigCall) Do(f func(context.Context) (container.Config, error)) *MockAgentProvisionerServiceContainerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentProvisionerServiceContainerConfigCall) DoAndReturn(f func(context.Context) (container.Config, error)) *MockAgentProvisionerServiceContainerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerManagerConfigForType mocks base method.
func (m *MockAgentProvisionerService) ContainerManagerConfigForType(arg0 context.Context, arg1 instance.ContainerType) (containermanager.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerManagerConfigForType", arg0, arg1)
	ret0, _ := ret[0].(containermanager.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerManagerConfigForType indicates an expected call of ContainerManagerConfigForType.
func (mr *MockAgentProvisionerServiceMockRecorder) ContainerManagerConfigForType(arg0, arg1 any) *MockAgentProvisionerServiceContainerManagerConfigForTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerManagerConfigForType", reflect.TypeOf((*MockAgentProvisionerService)(nil).ContainerManagerConfigForType), arg0, arg1)
	return &MockAgentProvisionerServiceContainerManagerConfigForTypeCall{Call: call}
}

// MockAgentProvisionerServiceContainerManagerConfigForTypeCall wrap *gomock.Call
type MockAgentProvisionerServiceContainerManagerConfigForTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentProvisionerServiceContainerManagerConfigForTypeCall) Return(arg0 containermanager.Config, arg1 error) *MockAgentProvisionerServiceContainerManagerConfigForTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentProvisionerServiceContainerManagerConfigForTypeCall) Do(f func(context.Context, instance.ContainerType) (containermanager.Config, error)) *MockAgentProvisionerServiceContainerManagerConfigForTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentProvisionerServiceContainerManagerConfigForTypeCall) DoAndReturn(f func(context.Context, instance.ContainerType) (containermanager.Config, error)) *MockAgentProvisionerServiceContainerManagerConfigForTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainerNetworkingMethod mocks base method.
func (m *MockAgentProvisionerService) ContainerNetworkingMethod(arg0 context.Context) (containermanager.NetworkingMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerNetworkingMethod", arg0)
	ret0, _ := ret[0].(containermanager.NetworkingMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerNetworkingMethod indicates an expected call of ContainerNetworkingMethod.
func (mr *MockAgentProvisionerServiceMockRecorder) ContainerNetworkingMethod(arg0 any) *MockAgentProvisionerServiceContainerNetworkingMethodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerNetworkingMethod", reflect.TypeOf((*MockAgentProvisionerService)(nil).ContainerNetworkingMethod), arg0)
	return &MockAgentProvisionerServiceContainerNetworkingMethodCall{Call: call}
}

// MockAgentProvisionerServiceContainerNetworkingMethodCall wrap *gomock.Call
type MockAgentProvisionerServiceContainerNetworkingMethodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentProvisionerServiceContainerNetworkingMethodCall) Return(arg0 containermanager.NetworkingMethod, arg1 error) *MockAgentProvisionerServiceContainerNetworkingMethodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentProvisionerServiceContainerNetworkingMethodCall) Do(f func(context.Context) (containermanager.NetworkingMethod, error)) *MockAgentProvisionerServiceContainerNetworkingMethodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentProvisionerServiceContainerNetworkingMethodCall) DoAndReturn(f func(context.Context) (containermanager.NetworkingMethod, error)) *MockAgentProvisionerServiceContainerNetworkingMethodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockKeyUpdaterService is a mock of KeyUpdaterService interface.
type MockKeyUpdaterService struct {
	ctrl     *gomock.Controller
	recorder *MockKeyUpdaterServiceMockRecorder
}

// MockKeyUpdaterServiceMockRecorder is the mock recorder for MockKeyUpdaterService.
type MockKeyUpdaterServiceMockRecorder struct {
	mock *MockKeyUpdaterService
}

// NewMockKeyUpdaterService creates a new mock instance.
func NewMockKeyUpdaterService(ctrl *gomock.Controller) *MockKeyUpdaterService {
	mock := &MockKeyUpdaterService{ctrl: ctrl}
	mock.recorder = &MockKeyUpdaterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyUpdaterService) EXPECT() *MockKeyUpdaterServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockKeyUpdaterService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetInitialAuthorisedKeysForContainer mocks base method.
func (m *MockKeyUpdaterService) GetInitialAuthorisedKeysForContainer(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialAuthorisedKeysForContainer", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialAuthorisedKeysForContainer indicates an expected call of GetInitialAuthorisedKeysForContainer.
func (mr *MockKeyUpdaterServiceMockRecorder) GetInitialAuthorisedKeysForContainer(arg0 any) *MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialAuthorisedKeysForContainer", reflect.TypeOf((*MockKeyUpdaterService)(nil).GetInitialAuthorisedKeysForContainer), arg0)
	return &MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall{Call: call}
}

// MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall wrap *gomock.Call
type MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall) Return(arg0 []string, arg1 error) *MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall) Do(f func(context.Context) ([]string, error)) *MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockKeyUpdaterServiceGetInitialAuthorisedKeysForContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockApplicationService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetCharmLXDProfile mocks base method.
func (m *MockApplicationService) GetCharmLXDProfile(arg0 context.Context, arg1 charm.CharmLocator) (charm0.LXDProfile, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLXDProfile", arg0, arg1)
	ret0, _ := ret[0].(charm0.LXDProfile)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmLXDProfile indicates an expected call of GetCharmLXDProfile.
func (mr *MockApplicationServiceMockRecorder) GetCharmLXDProfile(arg0, arg1 any) *MockApplicationServiceGetCharmLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLXDProfile", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLXDProfile), arg0, arg1)
	return &MockApplicationServiceGetCharmLXDProfileCall{Call: call}
}

// MockApplicationServiceGetCharmLXDProfileCall wrap *gomock.Call
type MockApplicationServiceGetCharmLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLXDProfileCall) Return(arg0 charm0.LXDProfile, arg1 int, arg2 error) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLXDProfileCall) Do(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLXDProfileCall) DoAndReturn(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLocatorByApplicationName mocks base method.
func (m *MockApplicationService) GetCharmLocatorByApplicationName(arg0 context.Context, arg1 string) (charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLocatorByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmLocatorByApplicationName indicates an expected call of GetCharmLocatorByApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetCharmLocatorByApplicationName(arg0, arg1 any) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLocatorByApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLocatorByApplicationName), arg0, arg1)
	return &MockApplicationServiceGetCharmLocatorByApplicationNameCall{Call: call}
}

// MockApplicationServiceGetCharmLocatorByApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmLocatorByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Return(arg0 charm.CharmLocator, arg1 error) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Do(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
