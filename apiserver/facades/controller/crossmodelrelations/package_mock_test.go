// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/crossmodelrelations (interfaces: CrossModelRelationService,ModelConfigService,SecretService,StatusService,RelationService,RelationUnitsWatcherService,ApplicationService,RemovalService)
//
// Generated by this command:
//
//	mockgen -typed -package crossmodelrelations -destination package_mock_test.go github.com/juju/juju/apiserver/facades/controller/crossmodelrelations CrossModelRelationService,ModelConfigService,SecretService,StatusService,RelationService,RelationUnitsWatcherService,ApplicationService,RemovalService
//

// Package crossmodelrelations is a generated GoMock package.
package crossmodelrelations

import (
	context "context"
	reflect "reflect"
	time "time"

	application "github.com/juju/juju/core/application"
	offer "github.com/juju/juju/core/offer"
	relation "github.com/juju/juju/core/relation"
	secrets "github.com/juju/juju/core/secrets"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	application0 "github.com/juju/juju/domain/application"
	service "github.com/juju/juju/domain/crossmodelrelation/service"
	relation0 "github.com/juju/juju/domain/relation"
	removal "github.com/juju/juju/domain/removal"
	config "github.com/juju/juju/environs/config"
	gomock "go.uber.org/mock/gomock"
)

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// AddConsumedRelation mocks base method.
func (m *MockCrossModelRelationService) AddConsumedRelation(arg0 context.Context, arg1 service.AddConsumedRelationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConsumedRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddConsumedRelation indicates an expected call of AddConsumedRelation.
func (mr *MockCrossModelRelationServiceMockRecorder) AddConsumedRelation(arg0, arg1 any) *MockCrossModelRelationServiceAddConsumedRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConsumedRelation", reflect.TypeOf((*MockCrossModelRelationService)(nil).AddConsumedRelation), arg0, arg1)
	return &MockCrossModelRelationServiceAddConsumedRelationCall{Call: call}
}

// MockCrossModelRelationServiceAddConsumedRelationCall wrap *gomock.Call
type MockCrossModelRelationServiceAddConsumedRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceAddConsumedRelationCall) Return(arg0 error) *MockCrossModelRelationServiceAddConsumedRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceAddConsumedRelationCall) Do(f func(context.Context, service.AddConsumedRelationArgs) error) *MockCrossModelRelationServiceAddConsumedRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceAddConsumedRelationCall) DoAndReturn(f func(context.Context, service.AddConsumedRelationArgs) error) *MockCrossModelRelationServiceAddConsumedRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRelationNetworkIngress mocks base method.
func (m *MockCrossModelRelationService) AddRelationNetworkIngress(arg0 context.Context, arg1 relation.UUID, arg2, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelationNetworkIngress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelationNetworkIngress indicates an expected call of AddRelationNetworkIngress.
func (mr *MockCrossModelRelationServiceMockRecorder) AddRelationNetworkIngress(arg0, arg1, arg2, arg3 any) *MockCrossModelRelationServiceAddRelationNetworkIngressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationNetworkIngress", reflect.TypeOf((*MockCrossModelRelationService)(nil).AddRelationNetworkIngress), arg0, arg1, arg2, arg3)
	return &MockCrossModelRelationServiceAddRelationNetworkIngressCall{Call: call}
}

// MockCrossModelRelationServiceAddRelationNetworkIngressCall wrap *gomock.Call
type MockCrossModelRelationServiceAddRelationNetworkIngressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceAddRelationNetworkIngressCall) Return(arg0 error) *MockCrossModelRelationServiceAddRelationNetworkIngressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceAddRelationNetworkIngressCall) Do(f func(context.Context, relation.UUID, []string, []string) error) *MockCrossModelRelationServiceAddRelationNetworkIngressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceAddRelationNetworkIngressCall) DoAndReturn(f func(context.Context, relation.UUID, []string, []string) error) *MockCrossModelRelationServiceAddRelationNetworkIngressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureUnitsExist mocks base method.
func (m *MockCrossModelRelationService) EnsureUnitsExist(arg0 context.Context, arg1 application.UUID, arg2 []unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitsExist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureUnitsExist indicates an expected call of EnsureUnitsExist.
func (mr *MockCrossModelRelationServiceMockRecorder) EnsureUnitsExist(arg0, arg1, arg2 any) *MockCrossModelRelationServiceEnsureUnitsExistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitsExist", reflect.TypeOf((*MockCrossModelRelationService)(nil).EnsureUnitsExist), arg0, arg1, arg2)
	return &MockCrossModelRelationServiceEnsureUnitsExistCall{Call: call}
}

// MockCrossModelRelationServiceEnsureUnitsExistCall wrap *gomock.Call
type MockCrossModelRelationServiceEnsureUnitsExistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceEnsureUnitsExistCall) Return(arg0 error) *MockCrossModelRelationServiceEnsureUnitsExistCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceEnsureUnitsExistCall) Do(f func(context.Context, application.UUID, []unit.Name) error) *MockCrossModelRelationServiceEnsureUnitsExistCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceEnsureUnitsExistCall) DoAndReturn(f func(context.Context, application.UUID, []unit.Name) error) *MockCrossModelRelationServiceEnsureUnitsExistCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationNameAndUUIDByOfferUUID mocks base method.
func (m *MockCrossModelRelationService) GetApplicationNameAndUUIDByOfferUUID(arg0 context.Context, arg1 offer.UUID) (string, application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationNameAndUUIDByOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(application.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationNameAndUUIDByOfferUUID indicates an expected call of GetApplicationNameAndUUIDByOfferUUID.
func (mr *MockCrossModelRelationServiceMockRecorder) GetApplicationNameAndUUIDByOfferUUID(arg0, arg1 any) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationNameAndUUIDByOfferUUID", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetApplicationNameAndUUIDByOfferUUID), arg0, arg1)
	return &MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall{Call: call}
}

// MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall wrap *gomock.Call
type MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall) Return(arg0 string, arg1 application.UUID, arg2 error) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall) Do(f func(context.Context, offer.UUID) (string, application.UUID, error)) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall) DoAndReturn(f func(context.Context, offer.UUID) (string, application.UUID, error)) *MockCrossModelRelationServiceGetApplicationNameAndUUIDByOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferUUIDByRelationUUID mocks base method.
func (m *MockCrossModelRelationService) GetOfferUUIDByRelationUUID(arg0 context.Context, arg1 relation.UUID) (offer.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUIDByRelationUUID", arg0, arg1)
	ret0, _ := ret[0].(offer.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUIDByRelationUUID indicates an expected call of GetOfferUUIDByRelationUUID.
func (mr *MockCrossModelRelationServiceMockRecorder) GetOfferUUIDByRelationUUID(arg0, arg1 any) *MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUIDByRelationUUID", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetOfferUUIDByRelationUUID), arg0, arg1)
	return &MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall{Call: call}
}

// MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall wrap *gomock.Call
type MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall) Return(arg0 offer.UUID, arg1 error) *MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall) Do(f func(context.Context, relation.UUID) (offer.UUID, error)) *MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall) DoAndReturn(f func(context.Context, relation.UUID) (offer.UUID, error)) *MockCrossModelRelationServiceGetOfferUUIDByRelationUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOfferingApplicationToken mocks base method.
func (m *MockCrossModelRelationService) GetOfferingApplicationToken(arg0 context.Context, arg1 relation.UUID) (application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferingApplicationToken", arg0, arg1)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferingApplicationToken indicates an expected call of GetOfferingApplicationToken.
func (mr *MockCrossModelRelationServiceMockRecorder) GetOfferingApplicationToken(arg0, arg1 any) *MockCrossModelRelationServiceGetOfferingApplicationTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferingApplicationToken", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetOfferingApplicationToken), arg0, arg1)
	return &MockCrossModelRelationServiceGetOfferingApplicationTokenCall{Call: call}
}

// MockCrossModelRelationServiceGetOfferingApplicationTokenCall wrap *gomock.Call
type MockCrossModelRelationServiceGetOfferingApplicationTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetOfferingApplicationTokenCall) Return(arg0 application.UUID, arg1 error) *MockCrossModelRelationServiceGetOfferingApplicationTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetOfferingApplicationTokenCall) Do(f func(context.Context, relation.UUID) (application.UUID, error)) *MockCrossModelRelationServiceGetOfferingApplicationTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetOfferingApplicationTokenCall) DoAndReturn(f func(context.Context, relation.UUID) (application.UUID, error)) *MockCrossModelRelationServiceGetOfferingApplicationTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationEgressNetworks mocks base method.
func (m *MockCrossModelRelationService) WatchRelationEgressNetworks(arg0 context.Context, arg1 relation.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationEgressNetworks", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationEgressNetworks indicates an expected call of WatchRelationEgressNetworks.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchRelationEgressNetworks(arg0, arg1 any) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationEgressNetworks", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchRelationEgressNetworks), arg0, arg1)
	return &MockCrossModelRelationServiceWatchRelationEgressNetworksCall{Call: call}
}

// MockCrossModelRelationServiceWatchRelationEgressNetworksCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchRelationEgressNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchRelationEgressNetworksCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchRelationEgressNetworksCall) Do(f func(context.Context, relation.UUID) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchRelationEgressNetworksCall) DoAndReturn(f func(context.Context, relation.UUID) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchRelationEgressNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRemoteConsumedSecretsChanges mocks base method.
func (m *MockCrossModelRelationService) WatchRemoteConsumedSecretsChanges(arg0 context.Context, arg1 application.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemoteConsumedSecretsChanges", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemoteConsumedSecretsChanges indicates an expected call of WatchRemoteConsumedSecretsChanges.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchRemoteConsumedSecretsChanges(arg0, arg1 any) *MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteConsumedSecretsChanges", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchRemoteConsumedSecretsChanges), arg0, arg1)
	return &MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall{Call: call}
}

// MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall) Do(f func(context.Context, application.UUID) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall) DoAndReturn(f func(context.Context, application.UUID) (watcher.Watcher[[]string], error)) *MockCrossModelRelationServiceWatchRemoteConsumedSecretsChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// GetLatestRevisions mocks base method.
func (m *MockSecretService) GetLatestRevisions(arg0 context.Context, arg1 []*secrets.URI) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRevisions", arg0, arg1)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRevisions indicates an expected call of GetLatestRevisions.
func (mr *MockSecretServiceMockRecorder) GetLatestRevisions(arg0, arg1 any) *MockSecretServiceGetLatestRevisionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRevisions", reflect.TypeOf((*MockSecretService)(nil).GetLatestRevisions), arg0, arg1)
	return &MockSecretServiceGetLatestRevisionsCall{Call: call}
}

// MockSecretServiceGetLatestRevisionsCall wrap *gomock.Call
type MockSecretServiceGetLatestRevisionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceGetLatestRevisionsCall) Return(arg0 map[string]int, arg1 error) *MockSecretServiceGetLatestRevisionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceGetLatestRevisionsCall) Do(f func(context.Context, []*secrets.URI) (map[string]int, error)) *MockSecretServiceGetLatestRevisionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceGetLatestRevisionsCall) DoAndReturn(f func(context.Context, []*secrets.URI) (map[string]int, error)) *MockSecretServiceGetLatestRevisionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetOfferStatus mocks base method.
func (m *MockStatusService) GetOfferStatus(arg0 context.Context, arg1 offer.UUID) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferStatus indicates an expected call of GetOfferStatus.
func (mr *MockStatusServiceMockRecorder) GetOfferStatus(arg0, arg1 any) *MockStatusServiceGetOfferStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferStatus", reflect.TypeOf((*MockStatusService)(nil).GetOfferStatus), arg0, arg1)
	return &MockStatusServiceGetOfferStatusCall{Call: call}
}

// MockStatusServiceGetOfferStatusCall wrap *gomock.Call
type MockStatusServiceGetOfferStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetOfferStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetOfferStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetOfferStatusCall) Do(f func(context.Context, offer.UUID) (status.StatusInfo, error)) *MockStatusServiceGetOfferStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetOfferStatusCall) DoAndReturn(f func(context.Context, offer.UUID) (status.StatusInfo, error)) *MockStatusServiceGetOfferStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRemoteRelationStatus mocks base method.
func (m *MockStatusService) SetRemoteRelationStatus(arg0 context.Context, arg1 relation.UUID, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteRelationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteRelationStatus indicates an expected call of SetRemoteRelationStatus.
func (mr *MockStatusServiceMockRecorder) SetRemoteRelationStatus(arg0, arg1, arg2 any) *MockStatusServiceSetRemoteRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteRelationStatus", reflect.TypeOf((*MockStatusService)(nil).SetRemoteRelationStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetRemoteRelationStatusCall{Call: call}
}

// MockStatusServiceSetRemoteRelationStatusCall wrap *gomock.Call
type MockStatusServiceSetRemoteRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetRemoteRelationStatusCall) Return(arg0 error) *MockStatusServiceSetRemoteRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetRemoteRelationStatusCall) Do(f func(context.Context, relation.UUID, status.StatusInfo) error) *MockStatusServiceSetRemoteRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetRemoteRelationStatusCall) DoAndReturn(f func(context.Context, relation.UUID, status.StatusInfo) error) *MockStatusServiceSetRemoteRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchOfferStatus mocks base method.
func (m *MockStatusService) WatchOfferStatus(arg0 context.Context, arg1 offer.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchOfferStatus", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferStatus indicates an expected call of WatchOfferStatus.
func (mr *MockStatusServiceMockRecorder) WatchOfferStatus(arg0, arg1 any) *MockStatusServiceWatchOfferStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferStatus", reflect.TypeOf((*MockStatusService)(nil).WatchOfferStatus), arg0, arg1)
	return &MockStatusServiceWatchOfferStatusCall{Call: call}
}

// MockStatusServiceWatchOfferStatusCall wrap *gomock.Call
type MockStatusServiceWatchOfferStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceWatchOfferStatusCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockStatusServiceWatchOfferStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceWatchOfferStatusCall) Do(f func(context.Context, offer.UUID) (watcher.Watcher[struct{}], error)) *MockStatusServiceWatchOfferStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceWatchOfferStatusCall) DoAndReturn(f func(context.Context, offer.UUID) (watcher.Watcher[struct{}], error)) *MockStatusServiceWatchOfferStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// GetConsumerRelationUnitsChange mocks base method.
func (m *MockRelationService) GetConsumerRelationUnitsChange(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.ConsumerRelationUnitsChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerRelationUnitsChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.ConsumerRelationUnitsChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerRelationUnitsChange indicates an expected call of GetConsumerRelationUnitsChange.
func (mr *MockRelationServiceMockRecorder) GetConsumerRelationUnitsChange(arg0, arg1, arg2 any) *MockRelationServiceGetConsumerRelationUnitsChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerRelationUnitsChange", reflect.TypeOf((*MockRelationService)(nil).GetConsumerRelationUnitsChange), arg0, arg1, arg2)
	return &MockRelationServiceGetConsumerRelationUnitsChangeCall{Call: call}
}

// MockRelationServiceGetConsumerRelationUnitsChangeCall wrap *gomock.Call
type MockRelationServiceGetConsumerRelationUnitsChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetConsumerRelationUnitsChangeCall) Return(arg0 relation0.ConsumerRelationUnitsChange, arg1 error) *MockRelationServiceGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetConsumerRelationUnitsChangeCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.ConsumerRelationUnitsChange, error)) *MockRelationServiceGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetConsumerRelationUnitsChangeCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.ConsumerRelationUnitsChange, error)) *MockRelationServiceGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFullRelationUnitChange mocks base method.
func (m *MockRelationService) GetFullRelationUnitChange(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.FullRelationUnitChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullRelationUnitChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.FullRelationUnitChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullRelationUnitChange indicates an expected call of GetFullRelationUnitChange.
func (mr *MockRelationServiceMockRecorder) GetFullRelationUnitChange(arg0, arg1, arg2 any) *MockRelationServiceGetFullRelationUnitChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullRelationUnitChange", reflect.TypeOf((*MockRelationService)(nil).GetFullRelationUnitChange), arg0, arg1, arg2)
	return &MockRelationServiceGetFullRelationUnitChangeCall{Call: call}
}

// MockRelationServiceGetFullRelationUnitChangeCall wrap *gomock.Call
type MockRelationServiceGetFullRelationUnitChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetFullRelationUnitChangeCall) Return(arg0 relation0.FullRelationUnitChange, arg1 error) *MockRelationServiceGetFullRelationUnitChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetFullRelationUnitChangeCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.FullRelationUnitChange, error)) *MockRelationServiceGetFullRelationUnitChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetFullRelationUnitChangeCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.FullRelationUnitChange, error)) *MockRelationServiceGetFullRelationUnitChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockRelationService) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetRelationDetails(arg0, arg1 any) *MockRelationServiceGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetRelationDetails), arg0, arg1)
	return &MockRelationServiceGetRelationDetailsCall{Call: call}
}

// MockRelationServiceGetRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationDetailsCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationKeyByUUID mocks base method.
func (m *MockRelationService) GetRelationKeyByUUID(arg0 context.Context, arg1 relation.UUID) (relation.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationKeyByUUID", arg0, arg1)
	ret0, _ := ret[0].(relation.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationKeyByUUID indicates an expected call of GetRelationKeyByUUID.
func (mr *MockRelationServiceMockRecorder) GetRelationKeyByUUID(arg0, arg1 any) *MockRelationServiceGetRelationKeyByUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationKeyByUUID", reflect.TypeOf((*MockRelationService)(nil).GetRelationKeyByUUID), arg0, arg1)
	return &MockRelationServiceGetRelationKeyByUUIDCall{Call: call}
}

// MockRelationServiceGetRelationKeyByUUIDCall wrap *gomock.Call
type MockRelationServiceGetRelationKeyByUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationKeyByUUIDCall) Return(arg0 relation.Key, arg1 error) *MockRelationServiceGetRelationKeyByUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationKeyByUUIDCall) Do(f func(context.Context, relation.UUID) (relation.Key, error)) *MockRelationServiceGetRelationKeyByUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationKeyByUUIDCall) DoAndReturn(f func(context.Context, relation.UUID) (relation.Key, error)) *MockRelationServiceGetRelationKeyByUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationLifeSuspendedStatus mocks base method.
func (m *MockRelationService) GetRelationLifeSuspendedStatus(arg0 context.Context, arg1 relation.UUID) (relation0.RelationLifeSuspendedStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationLifeSuspendedStatus", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationLifeSuspendedStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationLifeSuspendedStatus indicates an expected call of GetRelationLifeSuspendedStatus.
func (mr *MockRelationServiceMockRecorder) GetRelationLifeSuspendedStatus(arg0, arg1 any) *MockRelationServiceGetRelationLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationLifeSuspendedStatus", reflect.TypeOf((*MockRelationService)(nil).GetRelationLifeSuspendedStatus), arg0, arg1)
	return &MockRelationServiceGetRelationLifeSuspendedStatusCall{Call: call}
}

// MockRelationServiceGetRelationLifeSuspendedStatusCall wrap *gomock.Call
type MockRelationServiceGetRelationLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationLifeSuspendedStatusCall) Return(arg0 relation0.RelationLifeSuspendedStatus, arg1 error) *MockRelationServiceGetRelationLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationLifeSuspendedStatusCall) Do(f func(context.Context, relation.UUID) (relation0.RelationLifeSuspendedStatus, error)) *MockRelationServiceGetRelationLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationLifeSuspendedStatus, error)) *MockRelationServiceGetRelationLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitUUID mocks base method.
func (m *MockRelationService) GetRelationUnitUUID(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) (relation.UnitUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UnitUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitUUID indicates an expected call of GetRelationUnitUUID.
func (mr *MockRelationServiceMockRecorder) GetRelationUnitUUID(arg0, arg1, arg2 any) *MockRelationServiceGetRelationUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitUUID", reflect.TypeOf((*MockRelationService)(nil).GetRelationUnitUUID), arg0, arg1, arg2)
	return &MockRelationServiceGetRelationUnitUUIDCall{Call: call}
}

// MockRelationServiceGetRelationUnitUUIDCall wrap *gomock.Call
type MockRelationServiceGetRelationUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUnitUUIDCall) Return(arg0 relation.UnitUUID, arg1 error) *MockRelationServiceGetRelationUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUnitUUIDCall) Do(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockRelationServiceGetRelationUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUnitUUIDCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockRelationServiceGetRelationUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRelationRemoteApplicationAndUnitSettings mocks base method.
func (m *MockRelationService) SetRelationRemoteApplicationAndUnitSettings(arg0 context.Context, arg1 application.UUID, arg2 relation.UUID, arg3 map[string]string, arg4 map[unit.Name]map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRelationRemoteApplicationAndUnitSettings", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRelationRemoteApplicationAndUnitSettings indicates an expected call of SetRelationRemoteApplicationAndUnitSettings.
func (mr *MockRelationServiceMockRecorder) SetRelationRemoteApplicationAndUnitSettings(arg0, arg1, arg2, arg3, arg4 any) *MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRelationRemoteApplicationAndUnitSettings", reflect.TypeOf((*MockRelationService)(nil).SetRelationRemoteApplicationAndUnitSettings), arg0, arg1, arg2, arg3, arg4)
	return &MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall{Call: call}
}

// MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall wrap *gomock.Call
type MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall) Return(arg0 error) *MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall) Do(f func(context.Context, application.UUID, relation.UUID, map[string]string, map[unit.Name]map[string]string) error) *MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall) DoAndReturn(f func(context.Context, application.UUID, relation.UUID, map[string]string, map[unit.Name]map[string]string) error) *MockRelationServiceSetRelationRemoteApplicationAndUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRemoteRelationSuspendedState mocks base method.
func (m *MockRelationService) SetRemoteRelationSuspendedState(arg0 context.Context, arg1 relation.UUID, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteRelationSuspendedState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteRelationSuspendedState indicates an expected call of SetRemoteRelationSuspendedState.
func (mr *MockRelationServiceMockRecorder) SetRemoteRelationSuspendedState(arg0, arg1, arg2, arg3 any) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteRelationSuspendedState", reflect.TypeOf((*MockRelationService)(nil).SetRemoteRelationSuspendedState), arg0, arg1, arg2, arg3)
	return &MockRelationServiceSetRemoteRelationSuspendedStateCall{Call: call}
}

// MockRelationServiceSetRemoteRelationSuspendedStateCall wrap *gomock.Call
type MockRelationServiceSetRemoteRelationSuspendedStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceSetRemoteRelationSuspendedStateCall) Return(arg0 error) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceSetRemoteRelationSuspendedStateCall) Do(f func(context.Context, relation.UUID, bool, string) error) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceSetRemoteRelationSuspendedStateCall) DoAndReturn(f func(context.Context, relation.UUID, bool, string) error) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationLifeSuspendedStatus mocks base method.
func (m *MockRelationService) WatchRelationLifeSuspendedStatus(arg0 context.Context, arg1 relation.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationLifeSuspendedStatus", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationLifeSuspendedStatus indicates an expected call of WatchRelationLifeSuspendedStatus.
func (mr *MockRelationServiceMockRecorder) WatchRelationLifeSuspendedStatus(arg0, arg1 any) *MockRelationServiceWatchRelationLifeSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationLifeSuspendedStatus", reflect.TypeOf((*MockRelationService)(nil).WatchRelationLifeSuspendedStatus), arg0, arg1)
	return &MockRelationServiceWatchRelationLifeSuspendedStatusCall{Call: call}
}

// MockRelationServiceWatchRelationLifeSuspendedStatusCall wrap *gomock.Call
type MockRelationServiceWatchRelationLifeSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceWatchRelationLifeSuspendedStatusCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockRelationServiceWatchRelationLifeSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceWatchRelationLifeSuspendedStatusCall) Do(f func(context.Context, relation.UUID) (watcher.Watcher[struct{}], error)) *MockRelationServiceWatchRelationLifeSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceWatchRelationLifeSuspendedStatusCall) DoAndReturn(f func(context.Context, relation.UUID) (watcher.Watcher[struct{}], error)) *MockRelationServiceWatchRelationLifeSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationUnits mocks base method.
func (m *MockRelationService) WatchRelationUnits(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationUnits indicates an expected call of WatchRelationUnits.
func (mr *MockRelationServiceMockRecorder) WatchRelationUnits(arg0, arg1, arg2 any) *MockRelationServiceWatchRelationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationUnits", reflect.TypeOf((*MockRelationService)(nil).WatchRelationUnits), arg0, arg1, arg2)
	return &MockRelationServiceWatchRelationUnitsCall{Call: call}
}

// MockRelationServiceWatchRelationUnitsCall wrap *gomock.Call
type MockRelationServiceWatchRelationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceWatchRelationUnitsCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockRelationServiceWatchRelationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceWatchRelationUnitsCall) Do(f func(context.Context, relation.UUID, application.UUID) (watcher.Watcher[struct{}], error)) *MockRelationServiceWatchRelationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceWatchRelationUnitsCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (watcher.Watcher[struct{}], error)) *MockRelationServiceWatchRelationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationUnitsWatcherService is a mock of RelationUnitsWatcherService interface.
type MockRelationUnitsWatcherService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationUnitsWatcherServiceMockRecorder
}

// MockRelationUnitsWatcherServiceMockRecorder is the mock recorder for MockRelationUnitsWatcherService.
type MockRelationUnitsWatcherServiceMockRecorder struct {
	mock *MockRelationUnitsWatcherService
}

// NewMockRelationUnitsWatcherService creates a new mock instance.
func NewMockRelationUnitsWatcherService(ctrl *gomock.Controller) *MockRelationUnitsWatcherService {
	mock := &MockRelationUnitsWatcherService{ctrl: ctrl}
	mock.recorder = &MockRelationUnitsWatcherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationUnitsWatcherService) EXPECT() *MockRelationUnitsWatcherServiceMockRecorder {
	return m.recorder
}

// GetConsumerRelationUnitsChange mocks base method.
func (m *MockRelationUnitsWatcherService) GetConsumerRelationUnitsChange(arg0 context.Context, arg1 relation.UUID, arg2 application.UUID) (relation0.ConsumerRelationUnitsChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerRelationUnitsChange", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.ConsumerRelationUnitsChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerRelationUnitsChange indicates an expected call of GetConsumerRelationUnitsChange.
func (mr *MockRelationUnitsWatcherServiceMockRecorder) GetConsumerRelationUnitsChange(arg0, arg1, arg2 any) *MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerRelationUnitsChange", reflect.TypeOf((*MockRelationUnitsWatcherService)(nil).GetConsumerRelationUnitsChange), arg0, arg1, arg2)
	return &MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall{Call: call}
}

// MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall wrap *gomock.Call
type MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall) Return(arg0 relation0.ConsumerRelationUnitsChange, arg1 error) *MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall) Do(f func(context.Context, relation.UUID, application.UUID) (relation0.ConsumerRelationUnitsChange, error)) *MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall) DoAndReturn(f func(context.Context, relation.UUID, application.UUID) (relation0.ConsumerRelationUnitsChange, error)) *MockRelationUnitsWatcherServiceGetConsumerRelationUnitsChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetApplicationDetails mocks base method.
func (m *MockApplicationService) GetApplicationDetails(arg0 context.Context, arg1 application.UUID) (application0.ApplicationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationDetails", arg0, arg1)
	ret0, _ := ret[0].(application0.ApplicationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationDetails indicates an expected call of GetApplicationDetails.
func (mr *MockApplicationServiceMockRecorder) GetApplicationDetails(arg0, arg1 any) *MockApplicationServiceGetApplicationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationDetails", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationDetails), arg0, arg1)
	return &MockApplicationServiceGetApplicationDetailsCall{Call: call}
}

// MockApplicationServiceGetApplicationDetailsCall wrap *gomock.Call
type MockApplicationServiceGetApplicationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationDetailsCall) Return(arg0 application0.ApplicationDetails, arg1 error) *MockApplicationServiceGetApplicationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationDetailsCall) Do(f func(context.Context, application.UUID) (application0.ApplicationDetails, error)) *MockApplicationServiceGetApplicationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationDetailsCall) DoAndReturn(f func(context.Context, application.UUID) (application0.ApplicationDetails, error)) *MockApplicationServiceGetApplicationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemovalService is a mock of RemovalService interface.
type MockRemovalService struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceMockRecorder
}

// MockRemovalServiceMockRecorder is the mock recorder for MockRemovalService.
type MockRemovalServiceMockRecorder struct {
	mock *MockRemovalService
}

// NewMockRemovalService creates a new mock instance.
func NewMockRemovalService(ctrl *gomock.Controller) *MockRemovalService {
	mock := &MockRemovalService{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalService) EXPECT() *MockRemovalServiceMockRecorder {
	return m.recorder
}

// LeaveScope mocks base method.
func (m *MockRemovalService) LeaveScope(arg0 context.Context, arg1 relation.UnitUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveScope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveScope indicates an expected call of LeaveScope.
func (mr *MockRemovalServiceMockRecorder) LeaveScope(arg0, arg1 any) *MockRemovalServiceLeaveScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveScope", reflect.TypeOf((*MockRemovalService)(nil).LeaveScope), arg0, arg1)
	return &MockRemovalServiceLeaveScopeCall{Call: call}
}

// MockRemovalServiceLeaveScopeCall wrap *gomock.Call
type MockRemovalServiceLeaveScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceLeaveScopeCall) Return(arg0 error) *MockRemovalServiceLeaveScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceLeaveScopeCall) Do(f func(context.Context, relation.UnitUUID) error) *MockRemovalServiceLeaveScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceLeaveScopeCall) DoAndReturn(f func(context.Context, relation.UnitUUID) error) *MockRemovalServiceLeaveScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveRemoteRelation mocks base method.
func (m *MockRemovalService) RemoveRemoteRelation(arg0 context.Context, arg1 relation.UUID, arg2 bool, arg3 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRemoteRelation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRemoteRelation indicates an expected call of RemoveRemoteRelation.
func (mr *MockRemovalServiceMockRecorder) RemoveRemoteRelation(arg0, arg1, arg2, arg3 any) *MockRemovalServiceRemoveRemoteRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemoteRelation", reflect.TypeOf((*MockRemovalService)(nil).RemoveRemoteRelation), arg0, arg1, arg2, arg3)
	return &MockRemovalServiceRemoveRemoteRelationCall{Call: call}
}

// MockRemovalServiceRemoveRemoteRelationCall wrap *gomock.Call
type MockRemovalServiceRemoveRemoteRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveRemoteRelationCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveRemoteRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveRemoteRelationCall) Do(f func(context.Context, relation.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRemoteRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveRemoteRelationCall) DoAndReturn(f func(context.Context, relation.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRemoteRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
