// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/sshtunneler (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -package sshtunneler -destination mocks_test.go github.com/juju/juju/apiserver/facades/controller/sshtunneler Backend
//

// Package sshtunneler is a generated GoMock package.
package sshtunneler

import (
	reflect "reflect"

	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// ControllerMachine mocks base method.
func (m *MockBackend) ControllerMachine(arg0 string) (*state.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerMachine", arg0)
	ret0, _ := ret[0].(*state.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerMachine indicates an expected call of ControllerMachine.
func (mr *MockBackendMockRecorder) ControllerMachine(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerMachine", reflect.TypeOf((*MockBackend)(nil).ControllerMachine), arg0)
}

// InsertSSHConnRequest mocks base method.
func (m *MockBackend) InsertSSHConnRequest(arg0 state.SSHConnRequestArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSSHConnRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSSHConnRequest indicates an expected call of InsertSSHConnRequest.
func (mr *MockBackendMockRecorder) InsertSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSSHConnRequest", reflect.TypeOf((*MockBackend)(nil).InsertSSHConnRequest), arg0)
}

// RemoveSSHConnRequest mocks base method.
func (m *MockBackend) RemoveSSHConnRequest(arg0 state.SSHConnRequestRemoveArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSSHConnRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSSHConnRequest indicates an expected call of RemoveSSHConnRequest.
func (mr *MockBackendMockRecorder) RemoveSSHConnRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSSHConnRequest", reflect.TypeOf((*MockBackend)(nil).RemoveSSHConnRequest), arg0)
}

// SSHHostKeys mocks base method.
func (m *MockBackend) SSHHostKeys(arg0 string, arg1 names.MachineTag) (state.SSHHostKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHHostKeys", arg0, arg1)
	ret0, _ := ret[0].(state.SSHHostKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHHostKeys indicates an expected call of SSHHostKeys.
func (mr *MockBackendMockRecorder) SSHHostKeys(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHHostKeys", reflect.TypeOf((*MockBackend)(nil).SSHHostKeys), arg0, arg1)
}
