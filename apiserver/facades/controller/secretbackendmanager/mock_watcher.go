// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/watcher (interfaces: SecretBackendRotateWatcher)
//
// Generated by this command:
//
//	mockgen -typed -package secretbackendmanager -destination mock_watcher.go github.com/juju/juju/core/watcher SecretBackendRotateWatcher
//

// Package secretbackendmanager is a generated GoMock package.
package secretbackendmanager

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendRotateWatcher is a mock of SecretBackendRotateWatcher interface.
type MockSecretBackendRotateWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendRotateWatcherMockRecorder
}

// MockSecretBackendRotateWatcherMockRecorder is the mock recorder for MockSecretBackendRotateWatcher.
type MockSecretBackendRotateWatcherMockRecorder struct {
	mock *MockSecretBackendRotateWatcher
}

// NewMockSecretBackendRotateWatcher creates a new mock instance.
func NewMockSecretBackendRotateWatcher(ctrl *gomock.Controller) *MockSecretBackendRotateWatcher {
	mock := &MockSecretBackendRotateWatcher{ctrl: ctrl}
	mock.recorder = &MockSecretBackendRotateWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendRotateWatcher) EXPECT() *MockSecretBackendRotateWatcherMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretBackendRotateWatcher) ISGOMOCK() struct{} {
	return struct{}{}
}

// Changes mocks base method.
func (m *MockSecretBackendRotateWatcher) Changes() <-chan []watcher.SecretBackendRotateChange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan []watcher.SecretBackendRotateChange)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockSecretBackendRotateWatcherMockRecorder) Changes() *MockSecretBackendRotateWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockSecretBackendRotateWatcher)(nil).Changes))
	return &MockSecretBackendRotateWatcherChangesCall{Call: call}
}

// MockSecretBackendRotateWatcherChangesCall wrap *gomock.Call
type MockSecretBackendRotateWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendRotateWatcherChangesCall) Return(arg0 <-chan []watcher.SecretBackendRotateChange) *MockSecretBackendRotateWatcherChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendRotateWatcherChangesCall) Do(f func() <-chan []watcher.SecretBackendRotateChange) *MockSecretBackendRotateWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendRotateWatcherChangesCall) DoAndReturn(f func() <-chan []watcher.SecretBackendRotateChange) *MockSecretBackendRotateWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockSecretBackendRotateWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockSecretBackendRotateWatcherMockRecorder) Kill() *MockSecretBackendRotateWatcherKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockSecretBackendRotateWatcher)(nil).Kill))
	return &MockSecretBackendRotateWatcherKillCall{Call: call}
}

// MockSecretBackendRotateWatcherKillCall wrap *gomock.Call
type MockSecretBackendRotateWatcherKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendRotateWatcherKillCall) Return() *MockSecretBackendRotateWatcherKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendRotateWatcherKillCall) Do(f func()) *MockSecretBackendRotateWatcherKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendRotateWatcherKillCall) DoAndReturn(f func()) *MockSecretBackendRotateWatcherKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockSecretBackendRotateWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockSecretBackendRotateWatcherMockRecorder) Wait() *MockSecretBackendRotateWatcherWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockSecretBackendRotateWatcher)(nil).Wait))
	return &MockSecretBackendRotateWatcherWaitCall{Call: call}
}

// MockSecretBackendRotateWatcherWaitCall wrap *gomock.Call
type MockSecretBackendRotateWatcherWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendRotateWatcherWaitCall) Return(arg0 error) *MockSecretBackendRotateWatcherWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendRotateWatcherWaitCall) Do(f func() error) *MockSecretBackendRotateWatcherWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendRotateWatcherWaitCall) DoAndReturn(f func() error) *MockSecretBackendRotateWatcherWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
