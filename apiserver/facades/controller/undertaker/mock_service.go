// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/undertaker (interfaces: SecretBackendService)
//
// Generated by this command:
//
//	mockgen -typed -package undertaker -destination mock_service.go github.com/juju/juju/apiserver/facades/controller/undertaker SecretBackendService
//

// Package undertaker is a generated GoMock package.
package undertaker

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	provider "github.com/juju/juju/internal/secrets/provider"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendService is a mock of SecretBackendService interface.
type MockSecretBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendServiceMockRecorder
}

// MockSecretBackendServiceMockRecorder is the mock recorder for MockSecretBackendService.
type MockSecretBackendServiceMockRecorder struct {
	mock *MockSecretBackendService
}

// NewMockSecretBackendService creates a new mock instance.
func NewMockSecretBackendService(ctrl *gomock.Controller) *MockSecretBackendService {
	mock := &MockSecretBackendService{ctrl: ctrl}
	mock.recorder = &MockSecretBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendService) EXPECT() *MockSecretBackendServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretBackendService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetSecretBackendConfigForAdmin mocks base method.
func (m *MockSecretBackendService) GetSecretBackendConfigForAdmin(arg0 context.Context, arg1 model.UUID) (*provider.ModelBackendConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretBackendConfigForAdmin", arg0, arg1)
	ret0, _ := ret[0].(*provider.ModelBackendConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretBackendConfigForAdmin indicates an expected call of GetSecretBackendConfigForAdmin.
func (mr *MockSecretBackendServiceMockRecorder) GetSecretBackendConfigForAdmin(arg0, arg1 any) *MockSecretBackendServiceGetSecretBackendConfigForAdminCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretBackendConfigForAdmin", reflect.TypeOf((*MockSecretBackendService)(nil).GetSecretBackendConfigForAdmin), arg0, arg1)
	return &MockSecretBackendServiceGetSecretBackendConfigForAdminCall{Call: call}
}

// MockSecretBackendServiceGetSecretBackendConfigForAdminCall wrap *gomock.Call
type MockSecretBackendServiceGetSecretBackendConfigForAdminCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceGetSecretBackendConfigForAdminCall) Return(arg0 *provider.ModelBackendConfigInfo, arg1 error) *MockSecretBackendServiceGetSecretBackendConfigForAdminCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceGetSecretBackendConfigForAdminCall) Do(f func(context.Context, model.UUID) (*provider.ModelBackendConfigInfo, error)) *MockSecretBackendServiceGetSecretBackendConfigForAdminCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceGetSecretBackendConfigForAdminCall) DoAndReturn(f func(context.Context, model.UUID) (*provider.ModelBackendConfigInfo, error)) *MockSecretBackendServiceGetSecretBackendConfigForAdminCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
