// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/firewaller (interfaces: State,ControllerConfigAPI)
//
// Generated by this command:
//
//	mockgen -typed -package firewaller_test -destination package_mock_test.go github.com/juju/juju/apiserver/facades/controller/firewaller State,ControllerConfigAPI
//

// Package firewaller_test is a generated GoMock package.
package firewaller_test

import (
	context "context"
	reflect "reflect"
	time "time"

	firewaller "github.com/juju/juju/apiserver/facades/controller/firewaller"
	params "github.com/juju/juju/rpc/params"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// FindEntity mocks base method.
func (m *MockState) FindEntity(arg0 names.Tag) (state.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity.
func (mr *MockStateMockRecorder) FindEntity(arg0 any) *MockStateFindEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockState)(nil).FindEntity), arg0)
	return &MockStateFindEntityCall{Call: call}
}

// MockStateFindEntityCall wrap *gomock.Call
type MockStateFindEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateFindEntityCall) Return(arg0 state.Entity, arg1 error) *MockStateFindEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateFindEntityCall) Do(f func(names.Tag) (state.Entity, error)) *MockStateFindEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateFindEntityCall) DoAndReturn(f func(names.Tag) (state.Entity, error)) *MockStateFindEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMacaroon mocks base method.
func (m *MockState) GetMacaroon(arg0 names.Tag) (*macaroon.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMacaroon", arg0)
	ret0, _ := ret[0].(*macaroon.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMacaroon indicates an expected call of GetMacaroon.
func (mr *MockStateMockRecorder) GetMacaroon(arg0 any) *MockStateGetMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMacaroon", reflect.TypeOf((*MockState)(nil).GetMacaroon), arg0)
	return &MockStateGetMacaroonCall{Call: call}
}

// MockStateGetMacaroonCall wrap *gomock.Call
type MockStateGetMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMacaroonCall) Return(arg0 *macaroon.Macaroon, arg1 error) *MockStateGetMacaroonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMacaroonCall) Do(f func(names.Tag) (*macaroon.Macaroon, error)) *MockStateGetMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMacaroonCall) DoAndReturn(f func(names.Tag) (*macaroon.Macaroon, error)) *MockStateGetMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// KeyRelation mocks base method.
func (m *MockState) KeyRelation(arg0 string) (firewaller.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyRelation", arg0)
	ret0, _ := ret[0].(firewaller.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyRelation indicates an expected call of KeyRelation.
func (mr *MockStateMockRecorder) KeyRelation(arg0 any) *MockStateKeyRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyRelation", reflect.TypeOf((*MockState)(nil).KeyRelation), arg0)
	return &MockStateKeyRelationCall{Call: call}
}

// MockStateKeyRelationCall wrap *gomock.Call
type MockStateKeyRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateKeyRelationCall) Return(arg0 firewaller.Relation, arg1 error) *MockStateKeyRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateKeyRelationCall) Do(f func(string) (firewaller.Relation, error)) *MockStateKeyRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateKeyRelationCall) DoAndReturn(f func(string) (firewaller.Relation, error)) *MockStateKeyRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockState) Machine(arg0 string) (firewaller.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(firewaller.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockStateMockRecorder) Machine(arg0 any) *MockStateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockState)(nil).Machine), arg0)
	return &MockStateMachineCall{Call: call}
}

// MockStateMachineCall wrap *gomock.Call
type MockStateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMachineCall) Return(arg0 firewaller.Machine, arg1 error) *MockStateMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMachineCall) Do(f func(string) (firewaller.Machine, error)) *MockStateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMachineCall) DoAndReturn(f func(string) (firewaller.Machine, error)) *MockStateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelMachineStartTimes mocks base method.
func (m *MockState) WatchModelMachineStartTimes(arg0 time.Duration) state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelMachineStartTimes", arg0)
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelMachineStartTimes indicates an expected call of WatchModelMachineStartTimes.
func (mr *MockStateMockRecorder) WatchModelMachineStartTimes(arg0 any) *MockStateWatchModelMachineStartTimesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelMachineStartTimes", reflect.TypeOf((*MockState)(nil).WatchModelMachineStartTimes), arg0)
	return &MockStateWatchModelMachineStartTimesCall{Call: call}
}

// MockStateWatchModelMachineStartTimesCall wrap *gomock.Call
type MockStateWatchModelMachineStartTimesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateWatchModelMachineStartTimesCall) Return(arg0 state.StringsWatcher) *MockStateWatchModelMachineStartTimesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateWatchModelMachineStartTimesCall) Do(f func(time.Duration) state.StringsWatcher) *MockStateWatchModelMachineStartTimesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateWatchModelMachineStartTimesCall) DoAndReturn(f func(time.Duration) state.StringsWatcher) *MockStateWatchModelMachineStartTimesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelMachines mocks base method.
func (m *MockState) WatchModelMachines() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelMachines")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchModelMachines indicates an expected call of WatchModelMachines.
func (mr *MockStateMockRecorder) WatchModelMachines() *MockStateWatchModelMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelMachines", reflect.TypeOf((*MockState)(nil).WatchModelMachines))
	return &MockStateWatchModelMachinesCall{Call: call}
}

// MockStateWatchModelMachinesCall wrap *gomock.Call
type MockStateWatchModelMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateWatchModelMachinesCall) Return(arg0 state.StringsWatcher) *MockStateWatchModelMachinesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateWatchModelMachinesCall) Do(f func() state.StringsWatcher) *MockStateWatchModelMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateWatchModelMachinesCall) DoAndReturn(f func() state.StringsWatcher) *MockStateWatchModelMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigAPI is a mock of ControllerConfigAPI interface.
type MockControllerConfigAPI struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigAPIMockRecorder
}

// MockControllerConfigAPIMockRecorder is the mock recorder for MockControllerConfigAPI.
type MockControllerConfigAPIMockRecorder struct {
	mock *MockControllerConfigAPI
}

// NewMockControllerConfigAPI creates a new mock instance.
func NewMockControllerConfigAPI(ctrl *gomock.Controller) *MockControllerConfigAPI {
	mock := &MockControllerConfigAPI{ctrl: ctrl}
	mock.recorder = &MockControllerConfigAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigAPI) EXPECT() *MockControllerConfigAPIMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigAPI) ControllerConfig(arg0 context.Context) (params.ControllerConfigResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(params.ControllerConfigResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigAPIMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigAPIControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigAPI)(nil).ControllerConfig), arg0)
	return &MockControllerConfigAPIControllerConfigCall{Call: call}
}

// MockControllerConfigAPIControllerConfigCall wrap *gomock.Call
type MockControllerConfigAPIControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigAPIControllerConfigCall) Return(arg0 params.ControllerConfigResult, arg1 error) *MockControllerConfigAPIControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigAPIControllerConfigCall) Do(f func(context.Context) (params.ControllerConfigResult, error)) *MockControllerConfigAPIControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigAPIControllerConfigCall) DoAndReturn(f func(context.Context) (params.ControllerConfigResult, error)) *MockControllerConfigAPIControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
