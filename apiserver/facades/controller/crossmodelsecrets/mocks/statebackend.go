// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/crossmodelsecrets (interfaces: StateBackend)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/statebackend.go github.com/juju/juju/apiserver/facades/controller/crossmodelsecrets StateBackend
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStateBackend is a mock of StateBackend interface.
type MockStateBackend struct {
	ctrl     *gomock.Controller
	recorder *MockStateBackendMockRecorder
}

// MockStateBackendMockRecorder is the mock recorder for MockStateBackend.
type MockStateBackendMockRecorder struct {
	mock *MockStateBackend
}

// NewMockStateBackend creates a new mock instance.
func NewMockStateBackend(ctrl *gomock.Controller) *MockStateBackend {
	mock := &MockStateBackend{ctrl: ctrl}
	mock.recorder = &MockStateBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateBackend) EXPECT() *MockStateBackendMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStateBackend) ISGOMOCK() struct{} {
	return struct{}{}
}

// HasEndpoint mocks base method.
func (m *MockStateBackend) HasEndpoint(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasEndpoint", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasEndpoint indicates an expected call of HasEndpoint.
func (mr *MockStateBackendMockRecorder) HasEndpoint(arg0, arg1 any) *MockStateBackendHasEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasEndpoint", reflect.TypeOf((*MockStateBackend)(nil).HasEndpoint), arg0, arg1)
	return &MockStateBackendHasEndpointCall{Call: call}
}

// MockStateBackendHasEndpointCall wrap *gomock.Call
type MockStateBackendHasEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateBackendHasEndpointCall) Return(arg0 bool, arg1 error) *MockStateBackendHasEndpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateBackendHasEndpointCall) Do(f func(string, string) (bool, error)) *MockStateBackendHasEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateBackendHasEndpointCall) DoAndReturn(f func(string, string) (bool, error)) *MockStateBackendHasEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
