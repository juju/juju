// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/storage (interfaces: ApplicationService,BlockDeviceService,RemovalService,StorageService)
//
// Generated by this command:
//
//	mockgen -typed -package storage -destination domain_mock_test.go github.com/juju/juju/apiserver/facades/client/storage ApplicationService,BlockDeviceService,RemovalService,StorageService
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"
	time "time"

	blockdevice "github.com/juju/juju/core/blockdevice"
	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	removal "github.com/juju/juju/domain/removal"
	storage "github.com/juju/juju/domain/storage"
	service "github.com/juju/juju/domain/storage/service"
	storageprovisioning "github.com/juju/juju/domain/storageprovisioning"
	storage0 "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetUnitMachineName mocks base method.
func (m *MockApplicationService) GetUnitMachineName(arg0 context.Context, arg1 unit.Name) (machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMachineName", arg0, arg1)
	ret0, _ := ret[0].(machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMachineName indicates an expected call of GetUnitMachineName.
func (mr *MockApplicationServiceMockRecorder) GetUnitMachineName(arg0, arg1 any) *MockApplicationServiceGetUnitMachineNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMachineName", reflect.TypeOf((*MockApplicationService)(nil).GetUnitMachineName), arg0, arg1)
	return &MockApplicationServiceGetUnitMachineNameCall{Call: call}
}

// MockApplicationServiceGetUnitMachineNameCall wrap *gomock.Call
type MockApplicationServiceGetUnitMachineNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitMachineNameCall) Return(arg0 machine.Name, arg1 error) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitMachineNameCall) Do(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitMachineNameCall) DoAndReturn(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockDeviceService is a mock of BlockDeviceService interface.
type MockBlockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceServiceMockRecorder
}

// MockBlockDeviceServiceMockRecorder is the mock recorder for MockBlockDeviceService.
type MockBlockDeviceServiceMockRecorder struct {
	mock *MockBlockDeviceService
}

// NewMockBlockDeviceService creates a new mock instance.
func NewMockBlockDeviceService(ctrl *gomock.Controller) *MockBlockDeviceService {
	mock := &MockBlockDeviceService{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceService) EXPECT() *MockBlockDeviceServiceMockRecorder {
	return m.recorder
}

// GetBlockDevicesForMachine mocks base method.
func (m *MockBlockDeviceService) GetBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID) ([]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevicesForMachine", arg0, arg1)
	ret0, _ := ret[0].([]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDevicesForMachine indicates an expected call of GetBlockDevicesForMachine.
func (mr *MockBlockDeviceServiceMockRecorder) GetBlockDevicesForMachine(arg0, arg1 any) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevicesForMachine", reflect.TypeOf((*MockBlockDeviceService)(nil).GetBlockDevicesForMachine), arg0, arg1)
	return &MockBlockDeviceServiceGetBlockDevicesForMachineCall{Call: call}
}

// MockBlockDeviceServiceGetBlockDevicesForMachineCall wrap *gomock.Call
type MockBlockDeviceServiceGetBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Return(arg0 []blockdevice.BlockDevice, arg1 error) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemovalService is a mock of RemovalService interface.
type MockRemovalService struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceMockRecorder
}

// MockRemovalServiceMockRecorder is the mock recorder for MockRemovalService.
type MockRemovalServiceMockRecorder struct {
	mock *MockRemovalService
}

// NewMockRemovalService creates a new mock instance.
func NewMockRemovalService(ctrl *gomock.Controller) *MockRemovalService {
	mock := &MockRemovalService{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalService) EXPECT() *MockRemovalServiceMockRecorder {
	return m.recorder
}

// RemoveStorageAttachmentFromAliveUnit mocks base method.
func (m *MockRemovalService) RemoveStorageAttachmentFromAliveUnit(arg0 context.Context, arg1 storageprovisioning.StorageAttachmentUUID, arg2 bool, arg3 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStorageAttachmentFromAliveUnit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveStorageAttachmentFromAliveUnit indicates an expected call of RemoveStorageAttachmentFromAliveUnit.
func (mr *MockRemovalServiceMockRecorder) RemoveStorageAttachmentFromAliveUnit(arg0, arg1, arg2, arg3 any) *MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStorageAttachmentFromAliveUnit", reflect.TypeOf((*MockRemovalService)(nil).RemoveStorageAttachmentFromAliveUnit), arg0, arg1, arg2, arg3)
	return &MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall{Call: call}
}

// MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall wrap *gomock.Call
type MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall) Do(f func(context.Context, storageprovisioning.StorageAttachmentUUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall) DoAndReturn(f func(context.Context, storageprovisioning.StorageAttachmentUUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveStorageAttachmentFromAliveUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveStorageInstance mocks base method.
func (m *MockRemovalService) RemoveStorageInstance(arg0 context.Context, arg1 storage.StorageInstanceUUID, arg2 bool, arg3 time.Duration, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStorageInstance", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStorageInstance indicates an expected call of RemoveStorageInstance.
func (mr *MockRemovalServiceMockRecorder) RemoveStorageInstance(arg0, arg1, arg2, arg3, arg4 any) *MockRemovalServiceRemoveStorageInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStorageInstance", reflect.TypeOf((*MockRemovalService)(nil).RemoveStorageInstance), arg0, arg1, arg2, arg3, arg4)
	return &MockRemovalServiceRemoveStorageInstanceCall{Call: call}
}

// MockRemovalServiceRemoveStorageInstanceCall wrap *gomock.Call
type MockRemovalServiceRemoveStorageInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveStorageInstanceCall) Return(arg0 error) *MockRemovalServiceRemoveStorageInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveStorageInstanceCall) Do(f func(context.Context, storage.StorageInstanceUUID, bool, time.Duration, bool) error) *MockRemovalServiceRemoveStorageInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveStorageInstanceCall) DoAndReturn(f func(context.Context, storage.StorageInstanceUUID, bool, time.Duration, bool) error) *MockRemovalServiceRemoveStorageInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// CreateStoragePool mocks base method.
func (m *MockStorageService) CreateStoragePool(arg0 context.Context, arg1 string, arg2 storage0.ProviderType, arg3 service.PoolAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockStorageServiceMockRecorder) CreateStoragePool(arg0, arg1, arg2, arg3 any) *MockStorageServiceCreateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockStorageService)(nil).CreateStoragePool), arg0, arg1, arg2, arg3)
	return &MockStorageServiceCreateStoragePoolCall{Call: call}
}

// MockStorageServiceCreateStoragePoolCall wrap *gomock.Call
type MockStorageServiceCreateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceCreateStoragePoolCall) Return(arg0 error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceCreateStoragePoolCall) Do(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceCreateStoragePoolCall) DoAndReturn(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePool mocks base method.
func (m *MockStorageService) DeleteStoragePool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockStorageServiceMockRecorder) DeleteStoragePool(arg0, arg1 any) *MockStorageServiceDeleteStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockStorageService)(nil).DeleteStoragePool), arg0, arg1)
	return &MockStorageServiceDeleteStoragePoolCall{Call: call}
}

// MockStorageServiceDeleteStoragePoolCall wrap *gomock.Call
type MockStorageServiceDeleteStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceDeleteStoragePoolCall) Return(arg0 error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceDeleteStoragePoolCall) Do(f func(context.Context, string) error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceDeleteStoragePoolCall) DoAndReturn(f func(context.Context, string) error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageAttachmentUUIDForStorageInstanceAndUnit mocks base method.
func (m *MockStorageService) GetStorageAttachmentUUIDForStorageInstanceAndUnit(arg0 context.Context, arg1 storage.StorageInstanceUUID, arg2 unit.UUID) (storageprovisioning.StorageAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAttachmentUUIDForStorageInstanceAndUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(storageprovisioning.StorageAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAttachmentUUIDForStorageInstanceAndUnit indicates an expected call of GetStorageAttachmentUUIDForStorageInstanceAndUnit.
func (mr *MockStorageServiceMockRecorder) GetStorageAttachmentUUIDForStorageInstanceAndUnit(arg0, arg1, arg2 any) *MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAttachmentUUIDForStorageInstanceAndUnit", reflect.TypeOf((*MockStorageService)(nil).GetStorageAttachmentUUIDForStorageInstanceAndUnit), arg0, arg1, arg2)
	return &MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall{Call: call}
}

// MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall wrap *gomock.Call
type MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall) Return(arg0 storageprovisioning.StorageAttachmentUUID, arg1 error) *MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall) Do(f func(context.Context, storage.StorageInstanceUUID, unit.UUID) (storageprovisioning.StorageAttachmentUUID, error)) *MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall) DoAndReturn(f func(context.Context, storage.StorageInstanceUUID, unit.UUID) (storageprovisioning.StorageAttachmentUUID, error)) *MockStorageServiceGetStorageAttachmentUUIDForStorageInstanceAndUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageInstanceAttachments mocks base method.
func (m *MockStorageService) GetStorageInstanceAttachments(arg0 context.Context, arg1 storage.StorageInstanceUUID) ([]storageprovisioning.StorageAttachmentUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageInstanceAttachments", arg0, arg1)
	ret0, _ := ret[0].([]storageprovisioning.StorageAttachmentUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageInstanceAttachments indicates an expected call of GetStorageInstanceAttachments.
func (mr *MockStorageServiceMockRecorder) GetStorageInstanceAttachments(arg0, arg1 any) *MockStorageServiceGetStorageInstanceAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageInstanceAttachments", reflect.TypeOf((*MockStorageService)(nil).GetStorageInstanceAttachments), arg0, arg1)
	return &MockStorageServiceGetStorageInstanceAttachmentsCall{Call: call}
}

// MockStorageServiceGetStorageInstanceAttachmentsCall wrap *gomock.Call
type MockStorageServiceGetStorageInstanceAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetStorageInstanceAttachmentsCall) Return(arg0 []storageprovisioning.StorageAttachmentUUID, arg1 error) *MockStorageServiceGetStorageInstanceAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetStorageInstanceAttachmentsCall) Do(f func(context.Context, storage.StorageInstanceUUID) ([]storageprovisioning.StorageAttachmentUUID, error)) *MockStorageServiceGetStorageInstanceAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetStorageInstanceAttachmentsCall) DoAndReturn(f func(context.Context, storage.StorageInstanceUUID) ([]storageprovisioning.StorageAttachmentUUID, error)) *MockStorageServiceGetStorageInstanceAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageInstanceUUIDForID mocks base method.
func (m *MockStorageService) GetStorageInstanceUUIDForID(arg0 context.Context, arg1 string) (storage.StorageInstanceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageInstanceUUIDForID", arg0, arg1)
	ret0, _ := ret[0].(storage.StorageInstanceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageInstanceUUIDForID indicates an expected call of GetStorageInstanceUUIDForID.
func (mr *MockStorageServiceMockRecorder) GetStorageInstanceUUIDForID(arg0, arg1 any) *MockStorageServiceGetStorageInstanceUUIDForIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageInstanceUUIDForID", reflect.TypeOf((*MockStorageService)(nil).GetStorageInstanceUUIDForID), arg0, arg1)
	return &MockStorageServiceGetStorageInstanceUUIDForIDCall{Call: call}
}

// MockStorageServiceGetStorageInstanceUUIDForIDCall wrap *gomock.Call
type MockStorageServiceGetStorageInstanceUUIDForIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetStorageInstanceUUIDForIDCall) Return(arg0 storage.StorageInstanceUUID, arg1 error) *MockStorageServiceGetStorageInstanceUUIDForIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetStorageInstanceUUIDForIDCall) Do(f func(context.Context, string) (storage.StorageInstanceUUID, error)) *MockStorageServiceGetStorageInstanceUUIDForIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetStorageInstanceUUIDForIDCall) DoAndReturn(f func(context.Context, string) (storage.StorageInstanceUUID, error)) *MockStorageServiceGetStorageInstanceUUIDForIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolByName mocks base method.
func (m *MockStorageService) GetStoragePoolByName(arg0 context.Context, arg1 string) (storage.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolByName", arg0, arg1)
	ret0, _ := ret[0].(storage.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolByName indicates an expected call of GetStoragePoolByName.
func (mr *MockStorageServiceMockRecorder) GetStoragePoolByName(arg0, arg1 any) *MockStorageServiceGetStoragePoolByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolByName", reflect.TypeOf((*MockStorageService)(nil).GetStoragePoolByName), arg0, arg1)
	return &MockStorageServiceGetStoragePoolByNameCall{Call: call}
}

// MockStorageServiceGetStoragePoolByNameCall wrap *gomock.Call
type MockStorageServiceGetStoragePoolByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetStoragePoolByNameCall) Return(arg0 storage.StoragePool, arg1 error) *MockStorageServiceGetStoragePoolByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetStoragePoolByNameCall) Do(f func(context.Context, string) (storage.StoragePool, error)) *MockStorageServiceGetStoragePoolByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetStoragePoolByNameCall) DoAndReturn(f func(context.Context, string) (storage.StoragePool, error)) *MockStorageServiceGetStoragePoolByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePools mocks base method.
func (m *MockStorageService) ListStoragePools(arg0 context.Context) ([]storage.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePools", arg0)
	ret0, _ := ret[0].([]storage.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePools indicates an expected call of ListStoragePools.
func (mr *MockStorageServiceMockRecorder) ListStoragePools(arg0 any) *MockStorageServiceListStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePools", reflect.TypeOf((*MockStorageService)(nil).ListStoragePools), arg0)
	return &MockStorageServiceListStoragePoolsCall{Call: call}
}

// MockStorageServiceListStoragePoolsCall wrap *gomock.Call
type MockStorageServiceListStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceListStoragePoolsCall) Return(arg0 []storage.StoragePool, arg1 error) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceListStoragePoolsCall) Do(f func(context.Context) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceListStoragePoolsCall) DoAndReturn(f func(context.Context) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePoolsByNames mocks base method.
func (m *MockStorageService) ListStoragePoolsByNames(arg0 context.Context, arg1 storage.Names) ([]storage.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePoolsByNames", arg0, arg1)
	ret0, _ := ret[0].([]storage.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePoolsByNames indicates an expected call of ListStoragePoolsByNames.
func (mr *MockStorageServiceMockRecorder) ListStoragePoolsByNames(arg0, arg1 any) *MockStorageServiceListStoragePoolsByNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePoolsByNames", reflect.TypeOf((*MockStorageService)(nil).ListStoragePoolsByNames), arg0, arg1)
	return &MockStorageServiceListStoragePoolsByNamesCall{Call: call}
}

// MockStorageServiceListStoragePoolsByNamesCall wrap *gomock.Call
type MockStorageServiceListStoragePoolsByNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceListStoragePoolsByNamesCall) Return(arg0 []storage.StoragePool, arg1 error) *MockStorageServiceListStoragePoolsByNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceListStoragePoolsByNamesCall) Do(f func(context.Context, storage.Names) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsByNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceListStoragePoolsByNamesCall) DoAndReturn(f func(context.Context, storage.Names) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsByNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePoolsByNamesAndProviders mocks base method.
func (m *MockStorageService) ListStoragePoolsByNamesAndProviders(arg0 context.Context, arg1 storage.Names, arg2 storage.Providers) ([]storage.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePoolsByNamesAndProviders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storage.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePoolsByNamesAndProviders indicates an expected call of ListStoragePoolsByNamesAndProviders.
func (mr *MockStorageServiceMockRecorder) ListStoragePoolsByNamesAndProviders(arg0, arg1, arg2 any) *MockStorageServiceListStoragePoolsByNamesAndProvidersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePoolsByNamesAndProviders", reflect.TypeOf((*MockStorageService)(nil).ListStoragePoolsByNamesAndProviders), arg0, arg1, arg2)
	return &MockStorageServiceListStoragePoolsByNamesAndProvidersCall{Call: call}
}

// MockStorageServiceListStoragePoolsByNamesAndProvidersCall wrap *gomock.Call
type MockStorageServiceListStoragePoolsByNamesAndProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceListStoragePoolsByNamesAndProvidersCall) Return(arg0 []storage.StoragePool, arg1 error) *MockStorageServiceListStoragePoolsByNamesAndProvidersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceListStoragePoolsByNamesAndProvidersCall) Do(f func(context.Context, storage.Names, storage.Providers) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsByNamesAndProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceListStoragePoolsByNamesAndProvidersCall) DoAndReturn(f func(context.Context, storage.Names, storage.Providers) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsByNamesAndProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePoolsByProviders mocks base method.
func (m *MockStorageService) ListStoragePoolsByProviders(arg0 context.Context, arg1 storage.Providers) ([]storage.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePoolsByProviders", arg0, arg1)
	ret0, _ := ret[0].([]storage.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePoolsByProviders indicates an expected call of ListStoragePoolsByProviders.
func (mr *MockStorageServiceMockRecorder) ListStoragePoolsByProviders(arg0, arg1 any) *MockStorageServiceListStoragePoolsByProvidersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePoolsByProviders", reflect.TypeOf((*MockStorageService)(nil).ListStoragePoolsByProviders), arg0, arg1)
	return &MockStorageServiceListStoragePoolsByProvidersCall{Call: call}
}

// MockStorageServiceListStoragePoolsByProvidersCall wrap *gomock.Call
type MockStorageServiceListStoragePoolsByProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceListStoragePoolsByProvidersCall) Return(arg0 []storage.StoragePool, arg1 error) *MockStorageServiceListStoragePoolsByProvidersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceListStoragePoolsByProvidersCall) Do(f func(context.Context, storage.Providers) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsByProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceListStoragePoolsByProvidersCall) DoAndReturn(f func(context.Context, storage.Providers) ([]storage.StoragePool, error)) *MockStorageServiceListStoragePoolsByProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplaceStoragePool mocks base method.
func (m *MockStorageService) ReplaceStoragePool(arg0 context.Context, arg1 string, arg2 storage0.ProviderType, arg3 service.PoolAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceStoragePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceStoragePool indicates an expected call of ReplaceStoragePool.
func (mr *MockStorageServiceMockRecorder) ReplaceStoragePool(arg0, arg1, arg2, arg3 any) *MockStorageServiceReplaceStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceStoragePool", reflect.TypeOf((*MockStorageService)(nil).ReplaceStoragePool), arg0, arg1, arg2, arg3)
	return &MockStorageServiceReplaceStoragePoolCall{Call: call}
}

// MockStorageServiceReplaceStoragePoolCall wrap *gomock.Call
type MockStorageServiceReplaceStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceReplaceStoragePoolCall) Return(arg0 error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceReplaceStoragePoolCall) Do(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceReplaceStoragePoolCall) DoAndReturn(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
