// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/storage (interfaces: StorageService,ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package storage -destination domain_mock_test.go github.com/juju/juju/apiserver/facades/client/storage StorageService,ApplicationService
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	storage "github.com/juju/juju/core/storage"
	unit "github.com/juju/juju/core/unit"
	storage0 "github.com/juju/juju/domain/storage"
	service "github.com/juju/juju/domain/storage/service"
	storage1 "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// CreateStoragePool mocks base method.
func (m *MockStorageService) CreateStoragePool(arg0 context.Context, arg1 string, arg2 storage1.ProviderType, arg3 service.PoolAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockStorageServiceMockRecorder) CreateStoragePool(arg0, arg1, arg2, arg3 any) *MockStorageServiceCreateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockStorageService)(nil).CreateStoragePool), arg0, arg1, arg2, arg3)
	return &MockStorageServiceCreateStoragePoolCall{Call: call}
}

// MockStorageServiceCreateStoragePoolCall wrap *gomock.Call
type MockStorageServiceCreateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceCreateStoragePoolCall) Return(arg0 error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceCreateStoragePoolCall) Do(f func(context.Context, string, storage1.ProviderType, service.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceCreateStoragePoolCall) DoAndReturn(f func(context.Context, string, storage1.ProviderType, service.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePool mocks base method.
func (m *MockStorageService) DeleteStoragePool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockStorageServiceMockRecorder) DeleteStoragePool(arg0, arg1 any) *MockStorageServiceDeleteStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockStorageService)(nil).DeleteStoragePool), arg0, arg1)
	return &MockStorageServiceDeleteStoragePoolCall{Call: call}
}

// MockStorageServiceDeleteStoragePoolCall wrap *gomock.Call
type MockStorageServiceDeleteStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceDeleteStoragePoolCall) Return(arg0 error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceDeleteStoragePoolCall) Do(f func(context.Context, string) error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceDeleteStoragePoolCall) DoAndReturn(f func(context.Context, string) error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportProviderStorage mocks base method.
func (m *MockStorageService) ImportProviderStorage(arg0 context.Context, arg1 service.ImportStorageParams) (storage.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportProviderStorage", arg0, arg1)
	ret0, _ := ret[0].(storage.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportProviderStorage indicates an expected call of ImportProviderStorage.
func (mr *MockStorageServiceMockRecorder) ImportProviderStorage(arg0, arg1 any) *MockStorageServiceImportProviderStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportProviderStorage", reflect.TypeOf((*MockStorageService)(nil).ImportProviderStorage), arg0, arg1)
	return &MockStorageServiceImportProviderStorageCall{Call: call}
}

// MockStorageServiceImportProviderStorageCall wrap *gomock.Call
type MockStorageServiceImportProviderStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceImportProviderStorageCall) Return(arg0 storage.ID, arg1 error) *MockStorageServiceImportProviderStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceImportProviderStorageCall) Do(f func(context.Context, service.ImportStorageParams) (storage.ID, error)) *MockStorageServiceImportProviderStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceImportProviderStorageCall) DoAndReturn(f func(context.Context, service.ImportStorageParams) (storage.ID, error)) *MockStorageServiceImportProviderStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePools mocks base method.
func (m *MockStorageService) ListStoragePools(arg0 context.Context, arg1 storage0.Names, arg2 storage0.Providers) ([]*storage1.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePools", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*storage1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePools indicates an expected call of ListStoragePools.
func (mr *MockStorageServiceMockRecorder) ListStoragePools(arg0, arg1, arg2 any) *MockStorageServiceListStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePools", reflect.TypeOf((*MockStorageService)(nil).ListStoragePools), arg0, arg1, arg2)
	return &MockStorageServiceListStoragePoolsCall{Call: call}
}

// MockStorageServiceListStoragePoolsCall wrap *gomock.Call
type MockStorageServiceListStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceListStoragePoolsCall) Return(arg0 []*storage1.Config, arg1 error) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceListStoragePoolsCall) Do(f func(context.Context, storage0.Names, storage0.Providers) ([]*storage1.Config, error)) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceListStoragePoolsCall) DoAndReturn(f func(context.Context, storage0.Names, storage0.Providers) ([]*storage1.Config, error)) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplaceStoragePool mocks base method.
func (m *MockStorageService) ReplaceStoragePool(arg0 context.Context, arg1 string, arg2 storage1.ProviderType, arg3 service.PoolAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceStoragePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceStoragePool indicates an expected call of ReplaceStoragePool.
func (mr *MockStorageServiceMockRecorder) ReplaceStoragePool(arg0, arg1, arg2, arg3 any) *MockStorageServiceReplaceStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceStoragePool", reflect.TypeOf((*MockStorageService)(nil).ReplaceStoragePool), arg0, arg1, arg2, arg3)
	return &MockStorageServiceReplaceStoragePoolCall{Call: call}
}

// MockStorageServiceReplaceStoragePoolCall wrap *gomock.Call
type MockStorageServiceReplaceStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceReplaceStoragePoolCall) Return(arg0 error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceReplaceStoragePoolCall) Do(f func(context.Context, string, storage1.ProviderType, service.PoolAttrs) error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceReplaceStoragePoolCall) DoAndReturn(f func(context.Context, string, storage1.ProviderType, service.PoolAttrs) error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// AddStorageForUnit mocks base method.
func (m *MockApplicationService) AddStorageForUnit(arg0 context.Context, arg1 storage.Name, arg2 unit.Name, arg3 storage1.Directive) ([]storage.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorageForUnit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]storage.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStorageForUnit indicates an expected call of AddStorageForUnit.
func (mr *MockApplicationServiceMockRecorder) AddStorageForUnit(arg0, arg1, arg2, arg3 any) *MockApplicationServiceAddStorageForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorageForUnit", reflect.TypeOf((*MockApplicationService)(nil).AddStorageForUnit), arg0, arg1, arg2, arg3)
	return &MockApplicationServiceAddStorageForUnitCall{Call: call}
}

// MockApplicationServiceAddStorageForUnitCall wrap *gomock.Call
type MockApplicationServiceAddStorageForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceAddStorageForUnitCall) Return(arg0 []storage.ID, arg1 error) *MockApplicationServiceAddStorageForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceAddStorageForUnitCall) Do(f func(context.Context, storage.Name, unit.Name, storage1.Directive) ([]storage.ID, error)) *MockApplicationServiceAddStorageForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceAddStorageForUnitCall) DoAndReturn(f func(context.Context, storage.Name, unit.Name, storage1.Directive) ([]storage.ID, error)) *MockApplicationServiceAddStorageForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AttachStorageToUnit mocks base method.
func (m *MockApplicationService) AttachStorageToUnit(arg0 context.Context, arg1 storage.ID, arg2 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachStorageToUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachStorageToUnit indicates an expected call of AttachStorageToUnit.
func (mr *MockApplicationServiceMockRecorder) AttachStorageToUnit(arg0, arg1, arg2 any) *MockApplicationServiceAttachStorageToUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStorageToUnit", reflect.TypeOf((*MockApplicationService)(nil).AttachStorageToUnit), arg0, arg1, arg2)
	return &MockApplicationServiceAttachStorageToUnitCall{Call: call}
}

// MockApplicationServiceAttachStorageToUnitCall wrap *gomock.Call
type MockApplicationServiceAttachStorageToUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceAttachStorageToUnitCall) Return(arg0 error) *MockApplicationServiceAttachStorageToUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceAttachStorageToUnitCall) Do(f func(context.Context, storage.ID, unit.Name) error) *MockApplicationServiceAttachStorageToUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceAttachStorageToUnitCall) DoAndReturn(f func(context.Context, storage.ID, unit.Name) error) *MockApplicationServiceAttachStorageToUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachStorageForUnit mocks base method.
func (m *MockApplicationService) DetachStorageForUnit(arg0 context.Context, arg1 storage.ID, arg2 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorageForUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachStorageForUnit indicates an expected call of DetachStorageForUnit.
func (mr *MockApplicationServiceMockRecorder) DetachStorageForUnit(arg0, arg1, arg2 any) *MockApplicationServiceDetachStorageForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorageForUnit", reflect.TypeOf((*MockApplicationService)(nil).DetachStorageForUnit), arg0, arg1, arg2)
	return &MockApplicationServiceDetachStorageForUnitCall{Call: call}
}

// MockApplicationServiceDetachStorageForUnitCall wrap *gomock.Call
type MockApplicationServiceDetachStorageForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDetachStorageForUnitCall) Return(arg0 error) *MockApplicationServiceDetachStorageForUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDetachStorageForUnitCall) Do(f func(context.Context, storage.ID, unit.Name) error) *MockApplicationServiceDetachStorageForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDetachStorageForUnitCall) DoAndReturn(f func(context.Context, storage.ID, unit.Name) error) *MockApplicationServiceDetachStorageForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachStorageFromUnit mocks base method.
func (m *MockApplicationService) DetachStorageFromUnit(arg0 context.Context, arg1 storage.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorageFromUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachStorageFromUnit indicates an expected call of DetachStorageFromUnit.
func (mr *MockApplicationServiceMockRecorder) DetachStorageFromUnit(arg0, arg1 any) *MockApplicationServiceDetachStorageFromUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorageFromUnit", reflect.TypeOf((*MockApplicationService)(nil).DetachStorageFromUnit), arg0, arg1)
	return &MockApplicationServiceDetachStorageFromUnitCall{Call: call}
}

// MockApplicationServiceDetachStorageFromUnitCall wrap *gomock.Call
type MockApplicationServiceDetachStorageFromUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDetachStorageFromUnitCall) Return(arg0 error) *MockApplicationServiceDetachStorageFromUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDetachStorageFromUnitCall) Do(f func(context.Context, storage.ID) error) *MockApplicationServiceDetachStorageFromUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDetachStorageFromUnitCall) DoAndReturn(f func(context.Context, storage.ID) error) *MockApplicationServiceDetachStorageFromUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitMachineName mocks base method.
func (m *MockApplicationService) GetUnitMachineName(arg0 context.Context, arg1 unit.Name) (machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMachineName", arg0, arg1)
	ret0, _ := ret[0].(machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMachineName indicates an expected call of GetUnitMachineName.
func (mr *MockApplicationServiceMockRecorder) GetUnitMachineName(arg0, arg1 any) *MockApplicationServiceGetUnitMachineNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMachineName", reflect.TypeOf((*MockApplicationService)(nil).GetUnitMachineName), arg0, arg1)
	return &MockApplicationServiceGetUnitMachineNameCall{Call: call}
}

// MockApplicationServiceGetUnitMachineNameCall wrap *gomock.Call
type MockApplicationServiceGetUnitMachineNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitMachineNameCall) Return(arg0 machine.Name, arg1 error) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitMachineNameCall) Do(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitMachineNameCall) DoAndReturn(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
