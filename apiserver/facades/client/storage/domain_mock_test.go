// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/storage (interfaces: StorageService)
//
// Generated by this command:
//
//	mockgen -typed -package storage -destination domain_mock_test.go github.com/juju/juju/apiserver/facades/client/storage StorageService
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	storage "github.com/juju/juju/domain/storage"
	service "github.com/juju/juju/domain/storage/service"
	storage0 "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStorageService) ISGOMOCK() struct{} {
	return struct{}{}
}

// CreateStoragePool mocks base method.
func (m *MockStorageService) CreateStoragePool(arg0 context.Context, arg1 string, arg2 storage0.ProviderType, arg3 service.PoolAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockStorageServiceMockRecorder) CreateStoragePool(arg0, arg1, arg2, arg3 any) *MockStorageServiceCreateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockStorageService)(nil).CreateStoragePool), arg0, arg1, arg2, arg3)
	return &MockStorageServiceCreateStoragePoolCall{Call: call}
}

// MockStorageServiceCreateStoragePoolCall wrap *gomock.Call
type MockStorageServiceCreateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceCreateStoragePoolCall) Return(arg0 error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceCreateStoragePoolCall) Do(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceCreateStoragePoolCall) DoAndReturn(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceCreateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePool mocks base method.
func (m *MockStorageService) DeleteStoragePool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockStorageServiceMockRecorder) DeleteStoragePool(arg0, arg1 any) *MockStorageServiceDeleteStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockStorageService)(nil).DeleteStoragePool), arg0, arg1)
	return &MockStorageServiceDeleteStoragePoolCall{Call: call}
}

// MockStorageServiceDeleteStoragePoolCall wrap *gomock.Call
type MockStorageServiceDeleteStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceDeleteStoragePoolCall) Return(arg0 error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceDeleteStoragePoolCall) Do(f func(context.Context, string) error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceDeleteStoragePoolCall) DoAndReturn(f func(context.Context, string) error) *MockStorageServiceDeleteStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolByName mocks base method.
func (m *MockStorageService) GetStoragePoolByName(arg0 context.Context, arg1 string) (*storage0.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolByName", arg0, arg1)
	ret0, _ := ret[0].(*storage0.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolByName indicates an expected call of GetStoragePoolByName.
func (mr *MockStorageServiceMockRecorder) GetStoragePoolByName(arg0, arg1 any) *MockStorageServiceGetStoragePoolByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolByName", reflect.TypeOf((*MockStorageService)(nil).GetStoragePoolByName), arg0, arg1)
	return &MockStorageServiceGetStoragePoolByNameCall{Call: call}
}

// MockStorageServiceGetStoragePoolByNameCall wrap *gomock.Call
type MockStorageServiceGetStoragePoolByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetStoragePoolByNameCall) Return(arg0 *storage0.Config, arg1 error) *MockStorageServiceGetStoragePoolByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetStoragePoolByNameCall) Do(f func(context.Context, string) (*storage0.Config, error)) *MockStorageServiceGetStoragePoolByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetStoragePoolByNameCall) DoAndReturn(f func(context.Context, string) (*storage0.Config, error)) *MockStorageServiceGetStoragePoolByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePools mocks base method.
func (m *MockStorageService) ListStoragePools(arg0 context.Context, arg1 storage.Names, arg2 storage.Providers) ([]*storage0.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePools", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*storage0.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePools indicates an expected call of ListStoragePools.
func (mr *MockStorageServiceMockRecorder) ListStoragePools(arg0, arg1, arg2 any) *MockStorageServiceListStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePools", reflect.TypeOf((*MockStorageService)(nil).ListStoragePools), arg0, arg1, arg2)
	return &MockStorageServiceListStoragePoolsCall{Call: call}
}

// MockStorageServiceListStoragePoolsCall wrap *gomock.Call
type MockStorageServiceListStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceListStoragePoolsCall) Return(arg0 []*storage0.Config, arg1 error) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceListStoragePoolsCall) Do(f func(context.Context, storage.Names, storage.Providers) ([]*storage0.Config, error)) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceListStoragePoolsCall) DoAndReturn(f func(context.Context, storage.Names, storage.Providers) ([]*storage0.Config, error)) *MockStorageServiceListStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplaceStoragePool mocks base method.
func (m *MockStorageService) ReplaceStoragePool(arg0 context.Context, arg1 string, arg2 storage0.ProviderType, arg3 service.PoolAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceStoragePool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceStoragePool indicates an expected call of ReplaceStoragePool.
func (mr *MockStorageServiceMockRecorder) ReplaceStoragePool(arg0, arg1, arg2, arg3 any) *MockStorageServiceReplaceStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceStoragePool", reflect.TypeOf((*MockStorageService)(nil).ReplaceStoragePool), arg0, arg1, arg2, arg3)
	return &MockStorageServiceReplaceStoragePoolCall{Call: call}
}

// MockStorageServiceReplaceStoragePoolCall wrap *gomock.Call
type MockStorageServiceReplaceStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceReplaceStoragePoolCall) Return(arg0 error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceReplaceStoragePoolCall) Do(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceReplaceStoragePoolCall) DoAndReturn(f func(context.Context, string, storage0.ProviderType, service.PoolAttrs) error) *MockStorageServiceReplaceStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
