// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/secretbackends (interfaces: SecretBackendService)
//
// Generated by this command:
//
//	mockgen -typed -package secretbackends -destination mock_service.go github.com/juju/juju/apiserver/facades/client/secretbackends SecretBackendService
//

// Package secretbackends is a generated GoMock package.
package secretbackends

import (
	context "context"
	reflect "reflect"

	secrets "github.com/juju/juju/core/secrets"
	service "github.com/juju/juju/domain/secretbackend/service"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendService is a mock of SecretBackendService interface.
type MockSecretBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendServiceMockRecorder
}

// MockSecretBackendServiceMockRecorder is the mock recorder for MockSecretBackendService.
type MockSecretBackendServiceMockRecorder struct {
	mock *MockSecretBackendService
}

// NewMockSecretBackendService creates a new mock instance.
func NewMockSecretBackendService(ctrl *gomock.Controller) *MockSecretBackendService {
	mock := &MockSecretBackendService{ctrl: ctrl}
	mock.recorder = &MockSecretBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendService) EXPECT() *MockSecretBackendServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSecretBackendService) ISGOMOCK() struct{} {
	return struct{}{}
}

// BackendSummaryInfo mocks base method.
func (m *MockSecretBackendService) BackendSummaryInfo(arg0 context.Context, arg1 bool, arg2 ...string) ([]*service.SecretBackendInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BackendSummaryInfo", varargs...)
	ret0, _ := ret[0].([]*service.SecretBackendInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendSummaryInfo indicates an expected call of BackendSummaryInfo.
func (mr *MockSecretBackendServiceMockRecorder) BackendSummaryInfo(arg0, arg1 any, arg2 ...any) *MockSecretBackendServiceBackendSummaryInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendSummaryInfo", reflect.TypeOf((*MockSecretBackendService)(nil).BackendSummaryInfo), varargs...)
	return &MockSecretBackendServiceBackendSummaryInfoCall{Call: call}
}

// MockSecretBackendServiceBackendSummaryInfoCall wrap *gomock.Call
type MockSecretBackendServiceBackendSummaryInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceBackendSummaryInfoCall) Return(arg0 []*service.SecretBackendInfo, arg1 error) *MockSecretBackendServiceBackendSummaryInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceBackendSummaryInfoCall) Do(f func(context.Context, bool, ...string) ([]*service.SecretBackendInfo, error)) *MockSecretBackendServiceBackendSummaryInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceBackendSummaryInfoCall) DoAndReturn(f func(context.Context, bool, ...string) ([]*service.SecretBackendInfo, error)) *MockSecretBackendServiceBackendSummaryInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSecretBackend mocks base method.
func (m *MockSecretBackendService) CreateSecretBackend(arg0 context.Context, arg1 secrets.SecretBackend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecretBackend indicates an expected call of CreateSecretBackend.
func (mr *MockSecretBackendServiceMockRecorder) CreateSecretBackend(arg0, arg1 any) *MockSecretBackendServiceCreateSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretBackend", reflect.TypeOf((*MockSecretBackendService)(nil).CreateSecretBackend), arg0, arg1)
	return &MockSecretBackendServiceCreateSecretBackendCall{Call: call}
}

// MockSecretBackendServiceCreateSecretBackendCall wrap *gomock.Call
type MockSecretBackendServiceCreateSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceCreateSecretBackendCall) Return(arg0 error) *MockSecretBackendServiceCreateSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceCreateSecretBackendCall) Do(f func(context.Context, secrets.SecretBackend) error) *MockSecretBackendServiceCreateSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceCreateSecretBackendCall) DoAndReturn(f func(context.Context, secrets.SecretBackend) error) *MockSecretBackendServiceCreateSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSecretBackend mocks base method.
func (m *MockSecretBackendService) DeleteSecretBackend(arg0 context.Context, arg1 service.DeleteSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretBackend indicates an expected call of DeleteSecretBackend.
func (mr *MockSecretBackendServiceMockRecorder) DeleteSecretBackend(arg0, arg1 any) *MockSecretBackendServiceDeleteSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretBackend", reflect.TypeOf((*MockSecretBackendService)(nil).DeleteSecretBackend), arg0, arg1)
	return &MockSecretBackendServiceDeleteSecretBackendCall{Call: call}
}

// MockSecretBackendServiceDeleteSecretBackendCall wrap *gomock.Call
type MockSecretBackendServiceDeleteSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceDeleteSecretBackendCall) Return(arg0 error) *MockSecretBackendServiceDeleteSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceDeleteSecretBackendCall) Do(f func(context.Context, service.DeleteSecretBackendParams) error) *MockSecretBackendServiceDeleteSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceDeleteSecretBackendCall) DoAndReturn(f func(context.Context, service.DeleteSecretBackendParams) error) *MockSecretBackendServiceDeleteSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecretBackend mocks base method.
func (m *MockSecretBackendService) UpdateSecretBackend(arg0 context.Context, arg1 service.UpdateSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecretBackend indicates an expected call of UpdateSecretBackend.
func (mr *MockSecretBackendServiceMockRecorder) UpdateSecretBackend(arg0, arg1 any) *MockSecretBackendServiceUpdateSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretBackend", reflect.TypeOf((*MockSecretBackendService)(nil).UpdateSecretBackend), arg0, arg1)
	return &MockSecretBackendServiceUpdateSecretBackendCall{Call: call}
}

// MockSecretBackendServiceUpdateSecretBackendCall wrap *gomock.Call
type MockSecretBackendServiceUpdateSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceUpdateSecretBackendCall) Return(arg0 error) *MockSecretBackendServiceUpdateSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceUpdateSecretBackendCall) Do(f func(context.Context, service.UpdateSecretBackendParams) error) *MockSecretBackendServiceUpdateSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceUpdateSecretBackendCall) DoAndReturn(f func(context.Context, service.UpdateSecretBackendParams) error) *MockSecretBackendServiceUpdateSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
