// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/controller (interfaces: ControllerAccessService,ControllerConfigService,ModelService,AgentService,ModelConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package controller -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/controller ControllerAccessService,ControllerConfigService,ModelService,AgentService,ModelConfigService
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"
	time "time"

	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	permission "github.com/juju/juju/core/permission"
	access "github.com/juju/juju/domain/access"
	config "github.com/juju/juju/environs/config"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerAccessService is a mock of ControllerAccessService interface.
type MockControllerAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerAccessServiceMockRecorder
}

// MockControllerAccessServiceMockRecorder is the mock recorder for MockControllerAccessService.
type MockControllerAccessServiceMockRecorder struct {
	mock *MockControllerAccessService
}

// NewMockControllerAccessService creates a new mock instance.
func NewMockControllerAccessService(ctrl *gomock.Controller) *MockControllerAccessService {
	mock := &MockControllerAccessService{ctrl: ctrl}
	mock.recorder = &MockControllerAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerAccessService) EXPECT() *MockControllerAccessServiceMockRecorder {
	return m.recorder
}

// GetModelUsers mocks base method.
func (m *MockControllerAccessService) GetModelUsers(arg0 context.Context, arg1 string, arg2 model.UUID) ([]access.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]access.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUsers indicates an expected call of GetModelUsers.
func (mr *MockControllerAccessServiceMockRecorder) GetModelUsers(arg0, arg1, arg2 any) *MockControllerAccessServiceGetModelUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUsers", reflect.TypeOf((*MockControllerAccessService)(nil).GetModelUsers), arg0, arg1, arg2)
	return &MockControllerAccessServiceGetModelUsersCall{Call: call}
}

// MockControllerAccessServiceGetModelUsersCall wrap *gomock.Call
type MockControllerAccessServiceGetModelUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAccessServiceGetModelUsersCall) Return(arg0 []access.ModelUserInfo, arg1 error) *MockControllerAccessServiceGetModelUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAccessServiceGetModelUsersCall) Do(f func(context.Context, string, model.UUID) ([]access.ModelUserInfo, error)) *MockControllerAccessServiceGetModelUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAccessServiceGetModelUsersCall) DoAndReturn(f func(context.Context, string, model.UUID) ([]access.ModelUserInfo, error)) *MockControllerAccessServiceGetModelUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastModelLogin mocks base method.
func (m *MockControllerAccessService) LastModelLogin(arg0 context.Context, arg1 string, arg2 model.UUID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastModelLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastModelLogin indicates an expected call of LastModelLogin.
func (mr *MockControllerAccessServiceMockRecorder) LastModelLogin(arg0, arg1, arg2 any) *MockControllerAccessServiceLastModelLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModelLogin", reflect.TypeOf((*MockControllerAccessService)(nil).LastModelLogin), arg0, arg1, arg2)
	return &MockControllerAccessServiceLastModelLoginCall{Call: call}
}

// MockControllerAccessServiceLastModelLoginCall wrap *gomock.Call
type MockControllerAccessServiceLastModelLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAccessServiceLastModelLoginCall) Return(arg0 time.Time, arg1 error) *MockControllerAccessServiceLastModelLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAccessServiceLastModelLoginCall) Do(f func(context.Context, string, model.UUID) (time.Time, error)) *MockControllerAccessServiceLastModelLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAccessServiceLastModelLoginCall) DoAndReturn(f func(context.Context, string, model.UUID) (time.Time, error)) *MockControllerAccessServiceLastModelLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockControllerAccessService) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 string, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockControllerAccessServiceMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockControllerAccessService)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockControllerAccessServiceReadUserAccessLevelForTargetCall{Call: call}
}

// MockControllerAccessServiceReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockControllerAccessServiceReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAccessServiceReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAccessServiceReadUserAccessLevelForTargetCall) Do(f func(context.Context, string, permission.ID) (permission.Access, error)) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAccessServiceReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, string, permission.ID) (permission.Access, error)) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockControllerAccessService) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockControllerAccessServiceMockRecorder) UpdatePermission(arg0, arg1 any) *MockControllerAccessServiceUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockControllerAccessService)(nil).UpdatePermission), arg0, arg1)
	return &MockControllerAccessServiceUpdatePermissionCall{Call: call}
}

// MockControllerAccessServiceUpdatePermissionCall wrap *gomock.Call
type MockControllerAccessServiceUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAccessServiceUpdatePermissionCall) Return(arg0 error) *MockControllerAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAccessServiceUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockControllerAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAccessServiceUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockControllerAccessServiceUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateControllerConfig mocks base method.
func (m *MockControllerConfigService) UpdateControllerConfig(arg0 context.Context, arg1 controller.Config, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateControllerConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateControllerConfig indicates an expected call of UpdateControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) UpdateControllerConfig(arg0, arg1, arg2 any) *MockControllerConfigServiceUpdateControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).UpdateControllerConfig), arg0, arg1, arg2)
	return &MockControllerConfigServiceUpdateControllerConfigCall{Call: call}
}

// MockControllerConfigServiceUpdateControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceUpdateControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceUpdateControllerConfigCall) Return(arg0 error) *MockControllerConfigServiceUpdateControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceUpdateControllerConfigCall) Do(f func(context.Context, controller.Config, []string) error) *MockControllerConfigServiceUpdateControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceUpdateControllerConfigCall) DoAndReturn(f func(context.Context, controller.Config, []string) error) *MockControllerConfigServiceUpdateControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// ControllerModel mocks base method.
func (m *MockModelService) ControllerModel(arg0 context.Context) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModel", arg0)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerModel indicates an expected call of ControllerModel.
func (mr *MockModelServiceMockRecorder) ControllerModel(arg0 any) *MockModelServiceControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModel", reflect.TypeOf((*MockModelService)(nil).ControllerModel), arg0)
	return &MockModelServiceControllerModelCall{Call: call}
}

// MockModelServiceControllerModelCall wrap *gomock.Call
type MockModelServiceControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceControllerModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceControllerModelCall) Do(f func(context.Context) (model.Model, error)) *MockModelServiceControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceControllerModelCall) DoAndReturn(f func(context.Context) (model.Model, error)) *MockModelServiceControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockModelService) Model(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockModelServiceMockRecorder) Model(arg0, arg1 any) *MockModelServiceModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelService)(nil).Model), arg0, arg1)
	return &MockModelServiceModelCall{Call: call}
}

// MockModelServiceModelCall wrap *gomock.Call
type MockModelServiceModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentService is a mock of AgentService interface.
type MockAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceMockRecorder
}

// MockAgentServiceMockRecorder is the mock recorder for MockAgentService.
type MockAgentServiceMockRecorder struct {
	mock *MockAgentService
}

// NewMockAgentService creates a new mock instance.
func NewMockAgentService(ctrl *gomock.Controller) *MockAgentService {
	mock := &MockAgentService{ctrl: ctrl}
	mock.recorder = &MockAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentService) EXPECT() *MockAgentServiceMockRecorder {
	return m.recorder
}

// ControllerAgentVersion mocks base method.
func (m *MockAgentService) ControllerAgentVersion(arg0 context.Context) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerAgentVersion", arg0)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerAgentVersion indicates an expected call of ControllerAgentVersion.
func (mr *MockAgentServiceMockRecorder) ControllerAgentVersion(arg0 any) *MockAgentServiceControllerAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerAgentVersion", reflect.TypeOf((*MockAgentService)(nil).ControllerAgentVersion), arg0)
	return &MockAgentServiceControllerAgentVersionCall{Call: call}
}

// MockAgentServiceControllerAgentVersionCall wrap *gomock.Call
type MockAgentServiceControllerAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentServiceControllerAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockAgentServiceControllerAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentServiceControllerAgentVersionCall) Do(f func(context.Context) (version.Number, error)) *MockAgentServiceControllerAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentServiceControllerAgentVersionCall) DoAndReturn(f func(context.Context) (version.Number, error)) *MockAgentServiceControllerAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelAgentVersion mocks base method.
func (m *MockAgentService) GetModelAgentVersion(arg0 context.Context, arg1 model.UUID) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelAgentVersion indicates an expected call of GetModelAgentVersion.
func (mr *MockAgentServiceMockRecorder) GetModelAgentVersion(arg0, arg1 any) *MockAgentServiceGetModelAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelAgentVersion", reflect.TypeOf((*MockAgentService)(nil).GetModelAgentVersion), arg0, arg1)
	return &MockAgentServiceGetModelAgentVersionCall{Call: call}
}

// MockAgentServiceGetModelAgentVersionCall wrap *gomock.Call
type MockAgentServiceGetModelAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentServiceGetModelAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockAgentServiceGetModelAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentServiceGetModelAgentVersionCall) Do(f func(context.Context, model.UUID) (version.Number, error)) *MockAgentServiceGetModelAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentServiceGetModelAgentVersionCall) DoAndReturn(f func(context.Context, model.UUID) (version.Number, error)) *MockAgentServiceGetModelAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
