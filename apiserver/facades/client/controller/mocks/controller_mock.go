// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/controller (interfaces: ControllerState,ControllerNode)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/juju/juju/apiserver/facades/client/controller"
	controller0 "github.com/juju/juju/controller"
	network "github.com/juju/juju/core/network"
	permission "github.com/juju/juju/core/permission"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v4"
)

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// APIHostPortsForAgents mocks base method.
func (m *MockControllerState) APIHostPortsForAgents() ([]network.SpaceHostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIHostPortsForAgents")
	ret0, _ := ret[0].([]network.SpaceHostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIHostPortsForAgents indicates an expected call of APIHostPortsForAgents.
func (mr *MockControllerStateMockRecorder) APIHostPortsForAgents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIHostPortsForAgents", reflect.TypeOf((*MockControllerState)(nil).APIHostPortsForAgents))
}

// AddControllerUser mocks base method.
func (m *MockControllerState) AddControllerUser(arg0 state.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControllerUser", arg0)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddControllerUser indicates an expected call of AddControllerUser.
func (mr *MockControllerStateMockRecorder) AddControllerUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControllerUser", reflect.TypeOf((*MockControllerState)(nil).AddControllerUser), arg0)
}

// AllBlocksForController mocks base method.
func (m *MockControllerState) AllBlocksForController() ([]state.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBlocksForController")
	ret0, _ := ret[0].([]state.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBlocksForController indicates an expected call of AllBlocksForController.
func (mr *MockControllerStateMockRecorder) AllBlocksForController() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBlocksForController", reflect.TypeOf((*MockControllerState)(nil).AllBlocksForController))
}

// AllModelUUIDs mocks base method.
func (m *MockControllerState) AllModelUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModelUUIDs indicates an expected call of AllModelUUIDs.
func (mr *MockControllerStateMockRecorder) AllModelUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelUUIDs", reflect.TypeOf((*MockControllerState)(nil).AllModelUUIDs))
}

// CompletedMigrationForModel mocks base method.
func (m *MockControllerState) CompletedMigrationForModel(arg0 string) (state.ModelMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletedMigrationForModel", arg0)
	ret0, _ := ret[0].(state.ModelMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletedMigrationForModel indicates an expected call of CompletedMigrationForModel.
func (mr *MockControllerStateMockRecorder) CompletedMigrationForModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletedMigrationForModel", reflect.TypeOf((*MockControllerState)(nil).CompletedMigrationForModel), arg0)
}

// ControllerConfig mocks base method.
func (m *MockControllerState) ControllerConfig() (controller0.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller0.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerStateMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerState)(nil).ControllerConfig))
}

// ControllerInfo mocks base method.
func (m *MockControllerState) ControllerInfo() (*state.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerInfo")
	ret0, _ := ret[0].(*state.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerInfo indicates an expected call of ControllerInfo.
func (mr *MockControllerStateMockRecorder) ControllerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerInfo", reflect.TypeOf((*MockControllerState)(nil).ControllerInfo))
}

// ControllerModelUUID mocks base method.
func (m *MockControllerState) ControllerModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ControllerModelUUID indicates an expected call of ControllerModelUUID.
func (mr *MockControllerStateMockRecorder) ControllerModelUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModelUUID", reflect.TypeOf((*MockControllerState)(nil).ControllerModelUUID))
}

// ControllerNodes mocks base method.
func (m *MockControllerState) ControllerNodes() ([]controller.ControllerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNodes")
	ret0, _ := ret[0].([]controller.ControllerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerNodes indicates an expected call of ControllerNodes.
func (mr *MockControllerStateMockRecorder) ControllerNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNodes", reflect.TypeOf((*MockControllerState)(nil).ControllerNodes))
}

// ControllerTag mocks base method.
func (m *MockControllerState) ControllerTag() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTag")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// ControllerTag indicates an expected call of ControllerTag.
func (mr *MockControllerStateMockRecorder) ControllerTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTag", reflect.TypeOf((*MockControllerState)(nil).ControllerTag))
}

// CreateCloudAccess mocks base method.
func (m *MockControllerState) CreateCloudAccess(arg0 string, arg1 names.UserTag, arg2 permission.Access) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudAccess indicates an expected call of CreateCloudAccess.
func (mr *MockControllerStateMockRecorder) CreateCloudAccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudAccess", reflect.TypeOf((*MockControllerState)(nil).CreateCloudAccess), arg0, arg1, arg2)
}

// GetCloudAccess mocks base method.
func (m *MockControllerState) GetCloudAccess(arg0 string, arg1 names.UserTag) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudAccess", arg0, arg1)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudAccess indicates an expected call of GetCloudAccess.
func (mr *MockControllerStateMockRecorder) GetCloudAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudAccess", reflect.TypeOf((*MockControllerState)(nil).GetCloudAccess), arg0, arg1)
}

// HAPrimaryMachine mocks base method.
func (m *MockControllerState) HAPrimaryMachine() (names.MachineTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HAPrimaryMachine")
	ret0, _ := ret[0].(names.MachineTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HAPrimaryMachine indicates an expected call of HAPrimaryMachine.
func (mr *MockControllerStateMockRecorder) HAPrimaryMachine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HAPrimaryMachine", reflect.TypeOf((*MockControllerState)(nil).HAPrimaryMachine))
}

// Model mocks base method.
func (m *MockControllerState) Model() (*state.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(*state.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockControllerStateMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockControllerState)(nil).Model))
}

// ModelExists mocks base method.
func (m *MockControllerState) ModelExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelExists indicates an expected call of ModelExists.
func (mr *MockControllerStateMockRecorder) ModelExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelExists", reflect.TypeOf((*MockControllerState)(nil).ModelExists), arg0)
}

// ModelUUID mocks base method.
func (m *MockControllerState) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockControllerStateMockRecorder) ModelUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockControllerState)(nil).ModelUUID))
}

// MongoVersion mocks base method.
func (m *MockControllerState) MongoVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MongoVersion indicates an expected call of MongoVersion.
func (mr *MockControllerStateMockRecorder) MongoVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoVersion", reflect.TypeOf((*MockControllerState)(nil).MongoVersion))
}

// NewExternalControllers mocks base method.
func (m *MockControllerState) NewExternalControllers() state.ExternalControllers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewExternalControllers")
	ret0, _ := ret[0].(state.ExternalControllers)
	return ret0
}

// NewExternalControllers indicates an expected call of NewExternalControllers.
func (mr *MockControllerStateMockRecorder) NewExternalControllers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExternalControllers", reflect.TypeOf((*MockControllerState)(nil).NewExternalControllers))
}

// RemoveAllBlocksForController mocks base method.
func (m *MockControllerState) RemoveAllBlocksForController() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllBlocksForController")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllBlocksForController indicates an expected call of RemoveAllBlocksForController.
func (mr *MockControllerStateMockRecorder) RemoveAllBlocksForController() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllBlocksForController", reflect.TypeOf((*MockControllerState)(nil).RemoveAllBlocksForController))
}

// RemoveCloudAccess mocks base method.
func (m *MockControllerState) RemoveCloudAccess(arg0 string, arg1 names.UserTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloudAccess indicates an expected call of RemoveCloudAccess.
func (mr *MockControllerStateMockRecorder) RemoveCloudAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudAccess", reflect.TypeOf((*MockControllerState)(nil).RemoveCloudAccess), arg0, arg1)
}

// RemoveUserAccess mocks base method.
func (m *MockControllerState) RemoveUserAccess(arg0 names.UserTag, arg1 names.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserAccess indicates an expected call of RemoveUserAccess.
func (mr *MockControllerStateMockRecorder) RemoveUserAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserAccess", reflect.TypeOf((*MockControllerState)(nil).RemoveUserAccess), arg0, arg1)
}

// SetUserAccess mocks base method.
func (m *MockControllerState) SetUserAccess(arg0 names.UserTag, arg1 names.Tag, arg2 permission.Access) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserAccess indicates an expected call of SetUserAccess.
func (mr *MockControllerStateMockRecorder) SetUserAccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAccess", reflect.TypeOf((*MockControllerState)(nil).SetUserAccess), arg0, arg1, arg2)
}

// UpdateControllerConfig mocks base method.
func (m *MockControllerState) UpdateControllerConfig(arg0 map[string]interface{}, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateControllerConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateControllerConfig indicates an expected call of UpdateControllerConfig.
func (mr *MockControllerStateMockRecorder) UpdateControllerConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControllerConfig", reflect.TypeOf((*MockControllerState)(nil).UpdateControllerConfig), arg0, arg1)
}

// UserAccess mocks base method.
func (m *MockControllerState) UserAccess(arg0 names.UserTag, arg1 names.Tag) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAccess", arg0, arg1)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAccess indicates an expected call of UserAccess.
func (mr *MockControllerStateMockRecorder) UserAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAccess", reflect.TypeOf((*MockControllerState)(nil).UserAccess), arg0, arg1)
}

// UserPermission mocks base method.
func (m *MockControllerState) UserPermission(arg0 names.UserTag, arg1 names.Tag) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermission", arg0, arg1)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermission indicates an expected call of UserPermission.
func (mr *MockControllerStateMockRecorder) UserPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermission", reflect.TypeOf((*MockControllerState)(nil).UserPermission), arg0, arg1)
}

// WatchCredential mocks base method.
func (m *MockControllerState) WatchCredential(arg0 names.CloudCredentialTag) state.NotifyWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCredential", arg0)
	ret0, _ := ret[0].(state.NotifyWatcher)
	return ret0
}

// WatchCredential indicates an expected call of WatchCredential.
func (mr *MockControllerStateMockRecorder) WatchCredential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCredential", reflect.TypeOf((*MockControllerState)(nil).WatchCredential), arg0)
}

// MockControllerNode is a mock of ControllerNode interface.
type MockControllerNode struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeMockRecorder
}

// MockControllerNodeMockRecorder is the mock recorder for MockControllerNode.
type MockControllerNodeMockRecorder struct {
	mock *MockControllerNode
}

// NewMockControllerNode creates a new mock instance.
func NewMockControllerNode(ctrl *gomock.Controller) *MockControllerNode {
	mock := &MockControllerNode{ctrl: ctrl}
	mock.recorder = &MockControllerNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNode) EXPECT() *MockControllerNodeMockRecorder {
	return m.recorder
}

// HasVote mocks base method.
func (m *MockControllerNode) HasVote() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasVote")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasVote indicates an expected call of HasVote.
func (mr *MockControllerNodeMockRecorder) HasVote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVote", reflect.TypeOf((*MockControllerNode)(nil).HasVote))
}

// Id mocks base method.
func (m *MockControllerNode) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockControllerNodeMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockControllerNode)(nil).Id))
}

// Life mocks base method.
func (m *MockControllerNode) Life() state.Life {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(state.Life)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockControllerNodeMockRecorder) Life() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockControllerNode)(nil).Life))
}

// WantsVote mocks base method.
func (m *MockControllerNode) WantsVote() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WantsVote")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WantsVote indicates an expected call of WantsVote.
func (mr *MockControllerNodeMockRecorder) WantsVote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WantsVote", reflect.TypeOf((*MockControllerNode)(nil).WantsVote))
}
