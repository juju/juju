// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/controller (interfaces: ControllerAccessService,ModelService,ModelInfoService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/domain_mock.go github.com/juju/juju/apiserver/facades/client/controller ControllerAccessService,ModelService,ModelInfoService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/juju/juju/core/model"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	access "github.com/juju/juju/domain/access"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerAccessService is a mock of ControllerAccessService interface.
type MockControllerAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerAccessServiceMockRecorder
}

// MockControllerAccessServiceMockRecorder is the mock recorder for MockControllerAccessService.
type MockControllerAccessServiceMockRecorder struct {
	mock *MockControllerAccessService
}

// NewMockControllerAccessService creates a new mock instance.
func NewMockControllerAccessService(ctrl *gomock.Controller) *MockControllerAccessService {
	mock := &MockControllerAccessService{ctrl: ctrl}
	mock.recorder = &MockControllerAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerAccessService) EXPECT() *MockControllerAccessServiceMockRecorder {
	return m.recorder
}

// LastModelLogin mocks base method.
func (m *MockControllerAccessService) LastModelLogin(arg0 context.Context, arg1 user.Name, arg2 model.UUID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastModelLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastModelLogin indicates an expected call of LastModelLogin.
func (mr *MockControllerAccessServiceMockRecorder) LastModelLogin(arg0, arg1, arg2 any) *MockControllerAccessServiceLastModelLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModelLogin", reflect.TypeOf((*MockControllerAccessService)(nil).LastModelLogin), arg0, arg1, arg2)
	return &MockControllerAccessServiceLastModelLoginCall{Call: call}
}

// MockControllerAccessServiceLastModelLoginCall wrap *gomock.Call
type MockControllerAccessServiceLastModelLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAccessServiceLastModelLoginCall) Return(arg0 time.Time, arg1 error) *MockControllerAccessServiceLastModelLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAccessServiceLastModelLoginCall) Do(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockControllerAccessServiceLastModelLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAccessServiceLastModelLoginCall) DoAndReturn(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockControllerAccessServiceLastModelLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockControllerAccessService) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 user.Name, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockControllerAccessServiceMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockControllerAccessService)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockControllerAccessServiceReadUserAccessLevelForTargetCall{Call: call}
}

// MockControllerAccessServiceReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockControllerAccessServiceReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAccessServiceReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAccessServiceReadUserAccessLevelForTargetCall) Do(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAccessServiceReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockControllerAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockControllerAccessService) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockControllerAccessServiceMockRecorder) UpdatePermission(arg0, arg1 any) *MockControllerAccessServiceUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockControllerAccessService)(nil).UpdatePermission), arg0, arg1)
	return &MockControllerAccessServiceUpdatePermissionCall{Call: call}
}

// MockControllerAccessServiceUpdatePermissionCall wrap *gomock.Call
type MockControllerAccessServiceUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerAccessServiceUpdatePermissionCall) Return(arg0 error) *MockControllerAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerAccessServiceUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockControllerAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerAccessServiceUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockControllerAccessServiceUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// ControllerModel mocks base method.
func (m *MockModelService) ControllerModel(arg0 context.Context) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModel", arg0)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerModel indicates an expected call of ControllerModel.
func (mr *MockModelServiceMockRecorder) ControllerModel(arg0 any) *MockModelServiceControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModel", reflect.TypeOf((*MockModelService)(nil).ControllerModel), arg0)
	return &MockModelServiceControllerModelCall{Call: call}
}

// MockModelServiceControllerModelCall wrap *gomock.Call
type MockModelServiceControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceControllerModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceControllerModelCall) Do(f func(context.Context) (model.Model, error)) *MockModelServiceControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceControllerModelCall) DoAndReturn(f func(context.Context) (model.Model, error)) *MockModelServiceControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUsers mocks base method.
func (m *MockModelService) GetModelUsers(arg0 context.Context, arg1 model.UUID) ([]model.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUsers", arg0, arg1)
	ret0, _ := ret[0].([]model.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUsers indicates an expected call of GetModelUsers.
func (mr *MockModelServiceMockRecorder) GetModelUsers(arg0, arg1 any) *MockModelServiceGetModelUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUsers", reflect.TypeOf((*MockModelService)(nil).GetModelUsers), arg0, arg1)
	return &MockModelServiceGetModelUsersCall{Call: call}
}

// MockModelServiceGetModelUsersCall wrap *gomock.Call
type MockModelServiceGetModelUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelUsersCall) Return(arg0 []model.ModelUserInfo, arg1 error) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelUsersCall) Do(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelUsersCall) DoAndReturn(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModels mocks base method.
func (m *MockModelService) ListAllModels(arg0 context.Context) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModels", arg0)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModels indicates an expected call of ListAllModels.
func (mr *MockModelServiceMockRecorder) ListAllModels(arg0 any) *MockModelServiceListAllModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModels", reflect.TypeOf((*MockModelService)(nil).ListAllModels), arg0)
	return &MockModelServiceListAllModelsCall{Call: call}
}

// MockModelServiceListAllModelsCall wrap *gomock.Call
type MockModelServiceListAllModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListAllModelsCall) Return(arg0 []model.Model, arg1 error) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListAllModelsCall) Do(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListAllModelsCall) DoAndReturn(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDs mocks base method.
func (m *MockModelService) ListModelUUIDs(arg0 context.Context) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDs", arg0)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDs indicates an expected call of ListModelUUIDs.
func (mr *MockModelServiceMockRecorder) ListModelUUIDs(arg0 any) *MockModelServiceListModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDs", reflect.TypeOf((*MockModelService)(nil).ListModelUUIDs), arg0)
	return &MockModelServiceListModelUUIDsCall{Call: call}
}

// MockModelServiceListModelUUIDsCall wrap *gomock.Call
type MockModelServiceListModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListModelUUIDsCall) Return(arg0 []model.UUID, arg1 error) *MockModelServiceListModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListModelUUIDsCall) Do(f func(context.Context) ([]model.UUID, error)) *MockModelServiceListModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListModelUUIDsCall) DoAndReturn(f func(context.Context) ([]model.UUID, error)) *MockModelServiceListModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockModelService) Model(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockModelServiceMockRecorder) Model(arg0, arg1 any) *MockModelServiceModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelService)(nil).Model), arg0, arg1)
	return &MockModelServiceModelCall{Call: call}
}

// MockModelServiceModelCall wrap *gomock.Call
type MockModelServiceModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// HasValidCredential mocks base method.
func (m *MockModelInfoService) HasValidCredential(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasValidCredential", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasValidCredential indicates an expected call of HasValidCredential.
func (mr *MockModelInfoServiceMockRecorder) HasValidCredential(arg0 any) *MockModelInfoServiceHasValidCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValidCredential", reflect.TypeOf((*MockModelInfoService)(nil).HasValidCredential), arg0)
	return &MockModelInfoServiceHasValidCredentialCall{Call: call}
}

// MockModelInfoServiceHasValidCredentialCall wrap *gomock.Call
type MockModelInfoServiceHasValidCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceHasValidCredentialCall) Return(arg0 bool, arg1 error) *MockModelInfoServiceHasValidCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceHasValidCredentialCall) Do(f func(context.Context) (bool, error)) *MockModelInfoServiceHasValidCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceHasValidCredentialCall) DoAndReturn(f func(context.Context) (bool, error)) *MockModelInfoServiceHasValidCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerModel mocks base method.
func (m *MockModelInfoService) IsControllerModel(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerModel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerModel indicates an expected call of IsControllerModel.
func (mr *MockModelInfoServiceMockRecorder) IsControllerModel(arg0 any) *MockModelInfoServiceIsControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerModel", reflect.TypeOf((*MockModelInfoService)(nil).IsControllerModel), arg0)
	return &MockModelInfoServiceIsControllerModelCall{Call: call}
}

// MockModelInfoServiceIsControllerModelCall wrap *gomock.Call
type MockModelInfoServiceIsControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceIsControllerModelCall) Return(arg0 bool, arg1 error) *MockModelInfoServiceIsControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceIsControllerModelCall) Do(f func(context.Context) (bool, error)) *MockModelInfoServiceIsControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceIsControllerModelCall) DoAndReturn(f func(context.Context) (bool, error)) *MockModelInfoServiceIsControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
