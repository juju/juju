// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common/cloudspec (interfaces: CloudSpecer)
//
// Generated by this command:
//
//	mockgen -typed -package controller -destination cloudspec_mock.go github.com/juju/juju/apiserver/common/cloudspec CloudSpecer
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudSpecer is a mock of CloudSpecer interface.
type MockCloudSpecer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudSpecerMockRecorder
}

// MockCloudSpecerMockRecorder is the mock recorder for MockCloudSpecer.
type MockCloudSpecerMockRecorder struct {
	mock *MockCloudSpecer
}

// NewMockCloudSpecer creates a new mock instance.
func NewMockCloudSpecer(ctrl *gomock.Controller) *MockCloudSpecer {
	mock := &MockCloudSpecer{ctrl: ctrl}
	mock.recorder = &MockCloudSpecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudSpecer) EXPECT() *MockCloudSpecerMockRecorder {
	return m.recorder
}

// CloudSpec mocks base method.
func (m *MockCloudSpecer) CloudSpec(arg0 context.Context, arg1 params.Entities) (params.CloudSpecResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSpec", arg0, arg1)
	ret0, _ := ret[0].(params.CloudSpecResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSpec indicates an expected call of CloudSpec.
func (mr *MockCloudSpecerMockRecorder) CloudSpec(arg0, arg1 any) *MockCloudSpecerCloudSpecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSpec", reflect.TypeOf((*MockCloudSpecer)(nil).CloudSpec), arg0, arg1)
	return &MockCloudSpecerCloudSpecCall{Call: call}
}

// MockCloudSpecerCloudSpecCall wrap *gomock.Call
type MockCloudSpecerCloudSpecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSpecerCloudSpecCall) Return(arg0 params.CloudSpecResults, arg1 error) *MockCloudSpecerCloudSpecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSpecerCloudSpecCall) Do(f func(context.Context, params.Entities) (params.CloudSpecResults, error)) *MockCloudSpecerCloudSpecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSpecerCloudSpecCall) DoAndReturn(f func(context.Context, params.Entities) (params.CloudSpecResults, error)) *MockCloudSpecerCloudSpecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCloudSpec mocks base method.
func (m *MockCloudSpecer) GetCloudSpec(arg0 context.Context, arg1 names.ModelTag) params.CloudSpecResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudSpec", arg0, arg1)
	ret0, _ := ret[0].(params.CloudSpecResult)
	return ret0
}

// GetCloudSpec indicates an expected call of GetCloudSpec.
func (mr *MockCloudSpecerMockRecorder) GetCloudSpec(arg0, arg1 any) *MockCloudSpecerGetCloudSpecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudSpec", reflect.TypeOf((*MockCloudSpecer)(nil).GetCloudSpec), arg0, arg1)
	return &MockCloudSpecerGetCloudSpecCall{Call: call}
}

// MockCloudSpecerGetCloudSpecCall wrap *gomock.Call
type MockCloudSpecerGetCloudSpecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSpecerGetCloudSpecCall) Return(arg0 params.CloudSpecResult) *MockCloudSpecerGetCloudSpecCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSpecerGetCloudSpecCall) Do(f func(context.Context, names.ModelTag) params.CloudSpecResult) *MockCloudSpecerGetCloudSpecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSpecerGetCloudSpecCall) DoAndReturn(f func(context.Context, names.ModelTag) params.CloudSpecResult) *MockCloudSpecerGetCloudSpecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchCloudSpecsChanges mocks base method.
func (m *MockCloudSpecer) WatchCloudSpecsChanges(arg0 context.Context, arg1 params.Entities) (params.NotifyWatchResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCloudSpecsChanges", arg0, arg1)
	ret0, _ := ret[0].(params.NotifyWatchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchCloudSpecsChanges indicates an expected call of WatchCloudSpecsChanges.
func (mr *MockCloudSpecerMockRecorder) WatchCloudSpecsChanges(arg0, arg1 any) *MockCloudSpecerWatchCloudSpecsChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCloudSpecsChanges", reflect.TypeOf((*MockCloudSpecer)(nil).WatchCloudSpecsChanges), arg0, arg1)
	return &MockCloudSpecerWatchCloudSpecsChangesCall{Call: call}
}

// MockCloudSpecerWatchCloudSpecsChangesCall wrap *gomock.Call
type MockCloudSpecerWatchCloudSpecsChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSpecerWatchCloudSpecsChangesCall) Return(arg0 params.NotifyWatchResults, arg1 error) *MockCloudSpecerWatchCloudSpecsChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSpecerWatchCloudSpecsChangesCall) Do(f func(context.Context, params.Entities) (params.NotifyWatchResults, error)) *MockCloudSpecerWatchCloudSpecsChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSpecerWatchCloudSpecsChangesCall) DoAndReturn(f func(context.Context, params.Entities) (params.NotifyWatchResults, error)) *MockCloudSpecerWatchCloudSpecsChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
