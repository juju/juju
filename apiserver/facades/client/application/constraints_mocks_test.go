// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/constraints (interfaces: Validator)
//
// Generated by this command:
//
//	mockgen -package application -destination constraints_mocks_test.go github.com/juju/juju/core/constraints Validator
//

// Package application is a generated GoMock package.
package application

import (
	reflect "reflect"

	constraints "github.com/juju/juju/core/constraints"
	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Merge mocks base method.
func (m *MockValidator) Merge(arg0, arg1 constraints.Value) (constraints.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0, arg1)
	ret0, _ := ret[0].(constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Merge indicates an expected call of Merge.
func (mr *MockValidatorMockRecorder) Merge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockValidator)(nil).Merge), arg0, arg1)
}

// RegisterConflictResolver mocks base method.
func (m *MockValidator) RegisterConflictResolver(arg0, arg1 string, arg2 constraints.ConflictResolver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterConflictResolver", arg0, arg1, arg2)
}

// RegisterConflictResolver indicates an expected call of RegisterConflictResolver.
func (mr *MockValidatorMockRecorder) RegisterConflictResolver(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConflictResolver", reflect.TypeOf((*MockValidator)(nil).RegisterConflictResolver), arg0, arg1, arg2)
}

// RegisterConflicts mocks base method.
func (m *MockValidator) RegisterConflicts(arg0, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterConflicts", arg0, arg1)
}

// RegisterConflicts indicates an expected call of RegisterConflicts.
func (mr *MockValidatorMockRecorder) RegisterConflicts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConflicts", reflect.TypeOf((*MockValidator)(nil).RegisterConflicts), arg0, arg1)
}

// RegisterUnsupported mocks base method.
func (m *MockValidator) RegisterUnsupported(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterUnsupported", arg0)
}

// RegisterUnsupported indicates an expected call of RegisterUnsupported.
func (mr *MockValidatorMockRecorder) RegisterUnsupported(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUnsupported", reflect.TypeOf((*MockValidator)(nil).RegisterUnsupported), arg0)
}

// RegisterVocabulary mocks base method.
func (m *MockValidator) RegisterVocabulary(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterVocabulary", arg0, arg1)
}

// RegisterVocabulary indicates an expected call of RegisterVocabulary.
func (mr *MockValidatorMockRecorder) RegisterVocabulary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVocabulary", reflect.TypeOf((*MockValidator)(nil).RegisterVocabulary), arg0, arg1)
}

// UpdateVocabulary mocks base method.
func (m *MockValidator) UpdateVocabulary(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateVocabulary", arg0, arg1)
}

// UpdateVocabulary indicates an expected call of UpdateVocabulary.
func (mr *MockValidatorMockRecorder) UpdateVocabulary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVocabulary", reflect.TypeOf((*MockValidator)(nil).UpdateVocabulary), arg0, arg1)
}

// Validate mocks base method.
func (m *MockValidator) Validate(arg0 constraints.Value) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), arg0)
}
