// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/application (interfaces: NetworkService,DeployFromRepository,BlockChecker,ModelConfigService,MachineService,ApplicationService,ResolveService,PortService,Leadership,StorageService,RelationService,ResourceService,RemovalService,ExternalControllerService,CrossModelRelationService,StatusService)
//
// Generated by this command:
//
//	mockgen -typed -package application -destination services_mock_test.go github.com/juju/juju/apiserver/facades/client/application NetworkService,DeployFromRepository,BlockChecker,ModelConfigService,MachineService,ApplicationService,ResolveService,PortService,Leadership,StorageService,RelationService,ResourceService,RemovalService,ExternalControllerService,CrossModelRelationService,StatusService
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"
	time "time"

	set "github.com/juju/collections/set"
	application "github.com/juju/juju/core/application"
	assumes "github.com/juju/juju/core/assumes"
	base "github.com/juju/juju/core/base"
	charm "github.com/juju/juju/core/charm"
	constraints "github.com/juju/juju/core/constraints"
	crossmodel "github.com/juju/juju/core/crossmodel"
	instance "github.com/juju/juju/core/instance"
	life "github.com/juju/juju/core/life"
	machine "github.com/juju/juju/core/machine"
	network "github.com/juju/juju/core/network"
	relation "github.com/juju/juju/core/relation"
	remoteapplication "github.com/juju/juju/core/remoteapplication"
	resource "github.com/juju/juju/core/resource"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	application0 "github.com/juju/juju/domain/application"
	charm0 "github.com/juju/juju/domain/application/charm"
	service "github.com/juju/juju/domain/application/service"
	service0 "github.com/juju/juju/domain/crossmodelrelation/service"
	relation0 "github.com/juju/juju/domain/relation"
	removal "github.com/juju/juju/domain/removal"
	resolve "github.com/juju/juju/domain/resolve"
	storage "github.com/juju/juju/domain/storage"
	config "github.com/juju/juju/environs/config"
	charm1 "github.com/juju/juju/internal/charm"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockNetworkService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockNetworkServiceMockRecorder) GetAllSpaces(arg0 any) *MockNetworkServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockNetworkService)(nil).GetAllSpaces), arg0)
	return &MockNetworkServiceGetAllSpacesCall{Call: call}
}

// MockNetworkServiceGetAllSpacesCall wrap *gomock.Call
type MockNetworkServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitPublicAddress mocks base method.
func (m *MockNetworkService) GetUnitPublicAddress(arg0 context.Context, arg1 unit.Name) (network.SpaceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPublicAddress", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitPublicAddress indicates an expected call of GetUnitPublicAddress.
func (mr *MockNetworkServiceMockRecorder) GetUnitPublicAddress(arg0, arg1 any) *MockNetworkServiceGetUnitPublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPublicAddress", reflect.TypeOf((*MockNetworkService)(nil).GetUnitPublicAddress), arg0, arg1)
	return &MockNetworkServiceGetUnitPublicAddressCall{Call: call}
}

// MockNetworkServiceGetUnitPublicAddressCall wrap *gomock.Call
type MockNetworkServiceGetUnitPublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetUnitPublicAddressCall) Return(arg0 network.SpaceAddress, arg1 error) *MockNetworkServiceGetUnitPublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetUnitPublicAddressCall) Do(f func(context.Context, unit.Name) (network.SpaceAddress, error)) *MockNetworkServiceGetUnitPublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetUnitPublicAddressCall) DoAndReturn(f func(context.Context, unit.Name) (network.SpaceAddress, error)) *MockNetworkServiceGetUnitPublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDeployFromRepository is a mock of DeployFromRepository interface.
type MockDeployFromRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeployFromRepositoryMockRecorder
}

// MockDeployFromRepositoryMockRecorder is the mock recorder for MockDeployFromRepository.
type MockDeployFromRepositoryMockRecorder struct {
	mock *MockDeployFromRepository
}

// NewMockDeployFromRepository creates a new mock instance.
func NewMockDeployFromRepository(ctrl *gomock.Controller) *MockDeployFromRepository {
	mock := &MockDeployFromRepository{ctrl: ctrl}
	mock.recorder = &MockDeployFromRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployFromRepository) EXPECT() *MockDeployFromRepositoryMockRecorder {
	return m.recorder
}

// DeployFromRepository mocks base method.
func (m *MockDeployFromRepository) DeployFromRepository(arg0 context.Context, arg1 params.DeployFromRepositoryArg) (params.DeployFromRepositoryInfo, []*params.PendingResourceUpload, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployFromRepository", arg0, arg1)
	ret0, _ := ret[0].(params.DeployFromRepositoryInfo)
	ret1, _ := ret[1].([]*params.PendingResourceUpload)
	ret2, _ := ret[2].([]error)
	return ret0, ret1, ret2
}

// DeployFromRepository indicates an expected call of DeployFromRepository.
func (mr *MockDeployFromRepositoryMockRecorder) DeployFromRepository(arg0, arg1 any) *MockDeployFromRepositoryDeployFromRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployFromRepository", reflect.TypeOf((*MockDeployFromRepository)(nil).DeployFromRepository), arg0, arg1)
	return &MockDeployFromRepositoryDeployFromRepositoryCall{Call: call}
}

// MockDeployFromRepositoryDeployFromRepositoryCall wrap *gomock.Call
type MockDeployFromRepositoryDeployFromRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployFromRepositoryDeployFromRepositoryCall) Return(arg0 params.DeployFromRepositoryInfo, arg1 []*params.PendingResourceUpload, arg2 []error) *MockDeployFromRepositoryDeployFromRepositoryCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployFromRepositoryDeployFromRepositoryCall) Do(f func(context.Context, params.DeployFromRepositoryArg) (params.DeployFromRepositoryInfo, []*params.PendingResourceUpload, []error)) *MockDeployFromRepositoryDeployFromRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployFromRepositoryDeployFromRepositoryCall) DoAndReturn(f func(context.Context, params.DeployFromRepositoryArg) (params.DeployFromRepositoryInfo, []*params.PendingResourceUpload, []error)) *MockDeployFromRepositoryDeployFromRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockChecker is a mock of BlockChecker interface.
type MockBlockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCheckerMockRecorder
}

// MockBlockCheckerMockRecorder is the mock recorder for MockBlockChecker.
type MockBlockCheckerMockRecorder struct {
	mock *MockBlockChecker
}

// NewMockBlockChecker creates a new mock instance.
func NewMockBlockChecker(ctrl *gomock.Controller) *MockBlockChecker {
	mock := &MockBlockChecker{ctrl: ctrl}
	mock.recorder = &MockBlockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockChecker) EXPECT() *MockBlockCheckerMockRecorder {
	return m.recorder
}

// ChangeAllowed mocks base method.
func (m *MockBlockChecker) ChangeAllowed(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAllowed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAllowed indicates an expected call of ChangeAllowed.
func (mr *MockBlockCheckerMockRecorder) ChangeAllowed(arg0 any) *MockBlockCheckerChangeAllowedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAllowed", reflect.TypeOf((*MockBlockChecker)(nil).ChangeAllowed), arg0)
	return &MockBlockCheckerChangeAllowedCall{Call: call}
}

// MockBlockCheckerChangeAllowedCall wrap *gomock.Call
type MockBlockCheckerChangeAllowedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCheckerChangeAllowedCall) Return(arg0 error) *MockBlockCheckerChangeAllowedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCheckerChangeAllowedCall) Do(f func(context.Context) error) *MockBlockCheckerChangeAllowedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCheckerChangeAllowedCall) DoAndReturn(f func(context.Context) error) *MockBlockCheckerChangeAllowedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAllowed mocks base method.
func (m *MockBlockChecker) RemoveAllowed(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllowed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllowed indicates an expected call of RemoveAllowed.
func (mr *MockBlockCheckerMockRecorder) RemoveAllowed(arg0 any) *MockBlockCheckerRemoveAllowedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllowed", reflect.TypeOf((*MockBlockChecker)(nil).RemoveAllowed), arg0)
	return &MockBlockCheckerRemoveAllowedCall{Call: call}
}

// MockBlockCheckerRemoveAllowedCall wrap *gomock.Call
type MockBlockCheckerRemoveAllowedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCheckerRemoveAllowedCall) Return(arg0 error) *MockBlockCheckerRemoveAllowedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCheckerRemoveAllowedCall) Do(f func(context.Context) error) *MockBlockCheckerRemoveAllowedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCheckerRemoveAllowedCall) DoAndReturn(f func(context.Context) error) *MockBlockCheckerRemoveAllowedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetHardwareCharacteristics mocks base method.
func (m *MockMachineService) GetHardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockMachineServiceGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceGetHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceGetHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Return(arg0 instance.HardwareCharacteristics, arg1 error) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineBase mocks base method.
func (m *MockMachineService) GetMachineBase(arg0 context.Context, arg1 machine.Name) (base.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineBase", arg0, arg1)
	ret0, _ := ret[0].(base.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineBase indicates an expected call of GetMachineBase.
func (mr *MockMachineServiceMockRecorder) GetMachineBase(arg0, arg1 any) *MockMachineServiceGetMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineBase", reflect.TypeOf((*MockMachineService)(nil).GetMachineBase), arg0, arg1)
	return &MockMachineServiceGetMachineBaseCall{Call: call}
}

// MockMachineServiceGetMachineBaseCall wrap *gomock.Call
type MockMachineServiceGetMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineBaseCall) Return(arg0 base.Base, arg1 error) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineBaseCall) Do(f func(context.Context, machine.Name) (base.Base, error)) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineBaseCall) DoAndReturn(f func(context.Context, machine.Name) (base.Base, error)) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// AddCAASUnits mocks base method.
func (m *MockApplicationService) AddCAASUnits(arg0 context.Context, arg1 string, arg2 ...service.AddUnitArg) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCAASUnits", varargs...)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCAASUnits indicates an expected call of AddCAASUnits.
func (mr *MockApplicationServiceMockRecorder) AddCAASUnits(arg0, arg1 any, arg2 ...any) *MockApplicationServiceAddCAASUnitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCAASUnits", reflect.TypeOf((*MockApplicationService)(nil).AddCAASUnits), varargs...)
	return &MockApplicationServiceAddCAASUnitsCall{Call: call}
}

// MockApplicationServiceAddCAASUnitsCall wrap *gomock.Call
type MockApplicationServiceAddCAASUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceAddCAASUnitsCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceAddCAASUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceAddCAASUnitsCall) Do(f func(context.Context, string, ...service.AddUnitArg) ([]unit.Name, error)) *MockApplicationServiceAddCAASUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceAddCAASUnitsCall) DoAndReturn(f func(context.Context, string, ...service.AddUnitArg) ([]unit.Name, error)) *MockApplicationServiceAddCAASUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddIAASUnits mocks base method.
func (m *MockApplicationService) AddIAASUnits(arg0 context.Context, arg1 string, arg2 ...service.AddIAASUnitArg) ([]unit.Name, []machine.Name, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIAASUnits", varargs...)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].([]machine.Name)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddIAASUnits indicates an expected call of AddIAASUnits.
func (mr *MockApplicationServiceMockRecorder) AddIAASUnits(arg0, arg1 any, arg2 ...any) *MockApplicationServiceAddIAASUnitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIAASUnits", reflect.TypeOf((*MockApplicationService)(nil).AddIAASUnits), varargs...)
	return &MockApplicationServiceAddIAASUnitsCall{Call: call}
}

// MockApplicationServiceAddIAASUnitsCall wrap *gomock.Call
type MockApplicationServiceAddIAASUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceAddIAASUnitsCall) Return(arg0 []unit.Name, arg1 []machine.Name, arg2 error) *MockApplicationServiceAddIAASUnitsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceAddIAASUnitsCall) Do(f func(context.Context, string, ...service.AddIAASUnitArg) ([]unit.Name, []machine.Name, error)) *MockApplicationServiceAddIAASUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceAddIAASUnitsCall) DoAndReturn(f func(context.Context, string, ...service.AddIAASUnitArg) ([]unit.Name, []machine.Name, error)) *MockApplicationServiceAddIAASUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChangeApplicationScale mocks base method.
func (m *MockApplicationService) ChangeApplicationScale(arg0 context.Context, arg1 string, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeApplicationScale", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeApplicationScale indicates an expected call of ChangeApplicationScale.
func (mr *MockApplicationServiceMockRecorder) ChangeApplicationScale(arg0, arg1, arg2 any) *MockApplicationServiceChangeApplicationScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeApplicationScale", reflect.TypeOf((*MockApplicationService)(nil).ChangeApplicationScale), arg0, arg1, arg2)
	return &MockApplicationServiceChangeApplicationScaleCall{Call: call}
}

// MockApplicationServiceChangeApplicationScaleCall wrap *gomock.Call
type MockApplicationServiceChangeApplicationScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceChangeApplicationScaleCall) Return(arg0 int, arg1 error) *MockApplicationServiceChangeApplicationScaleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceChangeApplicationScaleCall) Do(f func(context.Context, string, int) (int, error)) *MockApplicationServiceChangeApplicationScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceChangeApplicationScaleCall) DoAndReturn(f func(context.Context, string, int) (int, error)) *MockApplicationServiceChangeApplicationScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCAASApplication mocks base method.
func (m *MockApplicationService) CreateCAASApplication(arg0 context.Context, arg1 string, arg2 charm1.Charm, arg3 charm.Origin, arg4 service.AddApplicationArgs, arg5 ...service.AddUnitArg) (application.UUID, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCAASApplication", varargs...)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCAASApplication indicates an expected call of CreateCAASApplication.
func (mr *MockApplicationServiceMockRecorder) CreateCAASApplication(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockApplicationServiceCreateCAASApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCAASApplication", reflect.TypeOf((*MockApplicationService)(nil).CreateCAASApplication), varargs...)
	return &MockApplicationServiceCreateCAASApplicationCall{Call: call}
}

// MockApplicationServiceCreateCAASApplicationCall wrap *gomock.Call
type MockApplicationServiceCreateCAASApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceCreateCAASApplicationCall) Return(arg0 application.UUID, arg1 error) *MockApplicationServiceCreateCAASApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceCreateCAASApplicationCall) Do(f func(context.Context, string, charm1.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddUnitArg) (application.UUID, error)) *MockApplicationServiceCreateCAASApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceCreateCAASApplicationCall) DoAndReturn(f func(context.Context, string, charm1.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddUnitArg) (application.UUID, error)) *MockApplicationServiceCreateCAASApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateIAASApplication mocks base method.
func (m *MockApplicationService) CreateIAASApplication(arg0 context.Context, arg1 string, arg2 charm1.Charm, arg3 charm.Origin, arg4 service.AddApplicationArgs, arg5 ...service.AddIAASUnitArg) (application.UUID, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIAASApplication", varargs...)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIAASApplication indicates an expected call of CreateIAASApplication.
func (mr *MockApplicationServiceMockRecorder) CreateIAASApplication(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *MockApplicationServiceCreateIAASApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIAASApplication", reflect.TypeOf((*MockApplicationService)(nil).CreateIAASApplication), varargs...)
	return &MockApplicationServiceCreateIAASApplicationCall{Call: call}
}

// MockApplicationServiceCreateIAASApplicationCall wrap *gomock.Call
type MockApplicationServiceCreateIAASApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceCreateIAASApplicationCall) Return(arg0 application.UUID, arg1 error) *MockApplicationServiceCreateIAASApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceCreateIAASApplicationCall) Do(f func(context.Context, string, charm1.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddIAASUnitArg) (application.UUID, error)) *MockApplicationServiceCreateIAASApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceCreateIAASApplicationCall) DoAndReturn(f func(context.Context, string, charm1.Charm, charm.Origin, service.AddApplicationArgs, ...service.AddIAASUnitArg) (application.UUID, error)) *MockApplicationServiceCreateIAASApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationAndCharmConfig mocks base method.
func (m *MockApplicationService) GetApplicationAndCharmConfig(arg0 context.Context, arg1 application.UUID) (service.ApplicationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndCharmConfig", arg0, arg1)
	ret0, _ := ret[0].(service.ApplicationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndCharmConfig indicates an expected call of GetApplicationAndCharmConfig.
func (mr *MockApplicationServiceMockRecorder) GetApplicationAndCharmConfig(arg0, arg1 any) *MockApplicationServiceGetApplicationAndCharmConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndCharmConfig", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationAndCharmConfig), arg0, arg1)
	return &MockApplicationServiceGetApplicationAndCharmConfigCall{Call: call}
}

// MockApplicationServiceGetApplicationAndCharmConfigCall wrap *gomock.Call
type MockApplicationServiceGetApplicationAndCharmConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationAndCharmConfigCall) Return(arg0 service.ApplicationConfig, arg1 error) *MockApplicationServiceGetApplicationAndCharmConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationAndCharmConfigCall) Do(f func(context.Context, application.UUID) (service.ApplicationConfig, error)) *MockApplicationServiceGetApplicationAndCharmConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationAndCharmConfigCall) DoAndReturn(f func(context.Context, application.UUID) (service.ApplicationConfig, error)) *MockApplicationServiceGetApplicationAndCharmConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationCharmOrigin mocks base method.
func (m *MockApplicationService) GetApplicationCharmOrigin(arg0 context.Context, arg1 string) (charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationCharmOrigin", arg0, arg1)
	ret0, _ := ret[0].(charm.Origin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationCharmOrigin indicates an expected call of GetApplicationCharmOrigin.
func (mr *MockApplicationServiceMockRecorder) GetApplicationCharmOrigin(arg0, arg1 any) *MockApplicationServiceGetApplicationCharmOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationCharmOrigin", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationCharmOrigin), arg0, arg1)
	return &MockApplicationServiceGetApplicationCharmOriginCall{Call: call}
}

// MockApplicationServiceGetApplicationCharmOriginCall wrap *gomock.Call
type MockApplicationServiceGetApplicationCharmOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationCharmOriginCall) Return(arg0 charm.Origin, arg1 error) *MockApplicationServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationCharmOriginCall) Do(f func(context.Context, string) (charm.Origin, error)) *MockApplicationServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationCharmOriginCall) DoAndReturn(f func(context.Context, string) (charm.Origin, error)) *MockApplicationServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationConstraints mocks base method.
func (m *MockApplicationService) GetApplicationConstraints(arg0 context.Context, arg1 application.UUID) (constraints.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConstraints", arg0, arg1)
	ret0, _ := ret[0].(constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationConstraints indicates an expected call of GetApplicationConstraints.
func (mr *MockApplicationServiceMockRecorder) GetApplicationConstraints(arg0, arg1 any) *MockApplicationServiceGetApplicationConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConstraints", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationConstraints), arg0, arg1)
	return &MockApplicationServiceGetApplicationConstraintsCall{Call: call}
}

// MockApplicationServiceGetApplicationConstraintsCall wrap *gomock.Call
type MockApplicationServiceGetApplicationConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationConstraintsCall) Return(arg0 constraints.Value, arg1 error) *MockApplicationServiceGetApplicationConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationConstraintsCall) Do(f func(context.Context, application.UUID) (constraints.Value, error)) *MockApplicationServiceGetApplicationConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationConstraintsCall) DoAndReturn(f func(context.Context, application.UUID) (constraints.Value, error)) *MockApplicationServiceGetApplicationConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationEndpointBindings mocks base method.
func (m *MockApplicationService) GetApplicationEndpointBindings(arg0 context.Context, arg1 string) (map[string]network.SpaceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationEndpointBindings", arg0, arg1)
	ret0, _ := ret[0].(map[string]network.SpaceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationEndpointBindings indicates an expected call of GetApplicationEndpointBindings.
func (mr *MockApplicationServiceMockRecorder) GetApplicationEndpointBindings(arg0, arg1 any) *MockApplicationServiceGetApplicationEndpointBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationEndpointBindings", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationEndpointBindings), arg0, arg1)
	return &MockApplicationServiceGetApplicationEndpointBindingsCall{Call: call}
}

// MockApplicationServiceGetApplicationEndpointBindingsCall wrap *gomock.Call
type MockApplicationServiceGetApplicationEndpointBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationEndpointBindingsCall) Return(arg0 map[string]network.SpaceUUID, arg1 error) *MockApplicationServiceGetApplicationEndpointBindingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationEndpointBindingsCall) Do(f func(context.Context, string) (map[string]network.SpaceUUID, error)) *MockApplicationServiceGetApplicationEndpointBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationEndpointBindingsCall) DoAndReturn(f func(context.Context, string) (map[string]network.SpaceUUID, error)) *MockApplicationServiceGetApplicationEndpointBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationEndpointNames mocks base method.
func (m *MockApplicationService) GetApplicationEndpointNames(arg0 context.Context, arg1 application.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationEndpointNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationEndpointNames indicates an expected call of GetApplicationEndpointNames.
func (mr *MockApplicationServiceMockRecorder) GetApplicationEndpointNames(arg0, arg1 any) *MockApplicationServiceGetApplicationEndpointNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationEndpointNames", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationEndpointNames), arg0, arg1)
	return &MockApplicationServiceGetApplicationEndpointNamesCall{Call: call}
}

// MockApplicationServiceGetApplicationEndpointNamesCall wrap *gomock.Call
type MockApplicationServiceGetApplicationEndpointNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationEndpointNamesCall) Return(arg0 []string, arg1 error) *MockApplicationServiceGetApplicationEndpointNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationEndpointNamesCall) Do(f func(context.Context, application.UUID) ([]string, error)) *MockApplicationServiceGetApplicationEndpointNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationEndpointNamesCall) DoAndReturn(f func(context.Context, application.UUID) ([]string, error)) *MockApplicationServiceGetApplicationEndpointNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLife mocks base method.
func (m *MockApplicationService) GetApplicationLife(arg0 context.Context, arg1 application.UUID) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLife indicates an expected call of GetApplicationLife.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLife(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLife", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLife), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeCall) Do(f func(context.Context, application.UUID) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeCall) DoAndReturn(f func(context.Context, application.UUID) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationStorageInfo mocks base method.
func (m *MockApplicationService) GetApplicationStorageInfo(arg0 context.Context, arg1 application.UUID) (map[string]application0.ApplicationStorageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationStorageInfo", arg0, arg1)
	ret0, _ := ret[0].(map[string]application0.ApplicationStorageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationStorageInfo indicates an expected call of GetApplicationStorageInfo.
func (mr *MockApplicationServiceMockRecorder) GetApplicationStorageInfo(arg0, arg1 any) *MockApplicationServiceGetApplicationStorageInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStorageInfo", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationStorageInfo), arg0, arg1)
	return &MockApplicationServiceGetApplicationStorageInfoCall{Call: call}
}

// MockApplicationServiceGetApplicationStorageInfoCall wrap *gomock.Call
type MockApplicationServiceGetApplicationStorageInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationStorageInfoCall) Return(arg0 map[string]application0.ApplicationStorageInfo, arg1 error) *MockApplicationServiceGetApplicationStorageInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationStorageInfoCall) Do(f func(context.Context, application.UUID) (map[string]application0.ApplicationStorageInfo, error)) *MockApplicationServiceGetApplicationStorageInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationStorageInfoCall) DoAndReturn(f func(context.Context, application.UUID) (map[string]application0.ApplicationStorageInfo, error)) *MockApplicationServiceGetApplicationStorageInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationUUIDByName mocks base method.
func (m *MockApplicationService) GetApplicationUUIDByName(arg0 context.Context, arg1 string) (application.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationUUIDByName indicates an expected call of GetApplicationUUIDByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationUUIDByName(arg0, arg1 any) *MockApplicationServiceGetApplicationUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUUIDByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationUUIDByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationUUIDByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationUUIDByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationUUIDByNameCall) Return(arg0 application.UUID, arg1 error) *MockApplicationServiceGetApplicationUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationUUIDByNameCall) Do(f func(context.Context, string) (application.UUID, error)) *MockApplicationServiceGetApplicationUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationUUIDByNameCall) DoAndReturn(f func(context.Context, string) (application.UUID, error)) *MockApplicationServiceGetApplicationUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharm mocks base method.
func (m *MockApplicationService) GetCharm(arg0 context.Context, arg1 charm0.CharmLocator) (charm1.Charm, charm0.CharmLocator, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharm", arg0, arg1)
	ret0, _ := ret[0].(charm1.Charm)
	ret1, _ := ret[1].(charm0.CharmLocator)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCharm indicates an expected call of GetCharm.
func (mr *MockApplicationServiceMockRecorder) GetCharm(arg0, arg1 any) *MockApplicationServiceGetCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharm", reflect.TypeOf((*MockApplicationService)(nil).GetCharm), arg0, arg1)
	return &MockApplicationServiceGetCharmCall{Call: call}
}

// MockApplicationServiceGetCharmCall wrap *gomock.Call
type MockApplicationServiceGetCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmCall) Return(arg0 charm1.Charm, arg1 charm0.CharmLocator, arg2 bool, arg3 error) *MockApplicationServiceGetCharmCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmCall) Do(f func(context.Context, charm0.CharmLocator) (charm1.Charm, charm0.CharmLocator, bool, error)) *MockApplicationServiceGetCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmCall) DoAndReturn(f func(context.Context, charm0.CharmLocator) (charm1.Charm, charm0.CharmLocator, bool, error)) *MockApplicationServiceGetCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmDownloadInfo mocks base method.
func (m *MockApplicationService) GetCharmDownloadInfo(arg0 context.Context, arg1 charm0.CharmLocator) (*charm0.DownloadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmDownloadInfo", arg0, arg1)
	ret0, _ := ret[0].(*charm0.DownloadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmDownloadInfo indicates an expected call of GetCharmDownloadInfo.
func (mr *MockApplicationServiceMockRecorder) GetCharmDownloadInfo(arg0, arg1 any) *MockApplicationServiceGetCharmDownloadInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmDownloadInfo", reflect.TypeOf((*MockApplicationService)(nil).GetCharmDownloadInfo), arg0, arg1)
	return &MockApplicationServiceGetCharmDownloadInfoCall{Call: call}
}

// MockApplicationServiceGetCharmDownloadInfoCall wrap *gomock.Call
type MockApplicationServiceGetCharmDownloadInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmDownloadInfoCall) Return(arg0 *charm0.DownloadInfo, arg1 error) *MockApplicationServiceGetCharmDownloadInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmDownloadInfoCall) Do(f func(context.Context, charm0.CharmLocator) (*charm0.DownloadInfo, error)) *MockApplicationServiceGetCharmDownloadInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmDownloadInfoCall) DoAndReturn(f func(context.Context, charm0.CharmLocator) (*charm0.DownloadInfo, error)) *MockApplicationServiceGetCharmDownloadInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLocatorByApplicationName mocks base method.
func (m *MockApplicationService) GetCharmLocatorByApplicationName(arg0 context.Context, arg1 string) (charm0.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLocatorByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm0.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmLocatorByApplicationName indicates an expected call of GetCharmLocatorByApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetCharmLocatorByApplicationName(arg0, arg1 any) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLocatorByApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLocatorByApplicationName), arg0, arg1)
	return &MockApplicationServiceGetCharmLocatorByApplicationNameCall{Call: call}
}

// MockApplicationServiceGetCharmLocatorByApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmLocatorByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Return(arg0 charm0.CharmLocator, arg1 error) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Do(f func(context.Context, string) (charm0.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm0.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmMetadata mocks base method.
func (m *MockApplicationService) GetCharmMetadata(arg0 context.Context, arg1 charm0.CharmLocator) (charm1.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmMetadata", arg0, arg1)
	ret0, _ := ret[0].(charm1.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmMetadata indicates an expected call of GetCharmMetadata.
func (mr *MockApplicationServiceMockRecorder) GetCharmMetadata(arg0, arg1 any) *MockApplicationServiceGetCharmMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmMetadata", reflect.TypeOf((*MockApplicationService)(nil).GetCharmMetadata), arg0, arg1)
	return &MockApplicationServiceGetCharmMetadataCall{Call: call}
}

// MockApplicationServiceGetCharmMetadataCall wrap *gomock.Call
type MockApplicationServiceGetCharmMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmMetadataCall) Return(arg0 charm1.Meta, arg1 error) *MockApplicationServiceGetCharmMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmMetadataCall) Do(f func(context.Context, charm0.CharmLocator) (charm1.Meta, error)) *MockApplicationServiceGetCharmMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmMetadataCall) DoAndReturn(f func(context.Context, charm0.CharmLocator) (charm1.Meta, error)) *MockApplicationServiceGetCharmMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmMetadataName mocks base method.
func (m *MockApplicationService) GetCharmMetadataName(arg0 context.Context, arg1 charm0.CharmLocator) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmMetadataName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmMetadataName indicates an expected call of GetCharmMetadataName.
func (mr *MockApplicationServiceMockRecorder) GetCharmMetadataName(arg0, arg1 any) *MockApplicationServiceGetCharmMetadataNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmMetadataName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmMetadataName), arg0, arg1)
	return &MockApplicationServiceGetCharmMetadataNameCall{Call: call}
}

// MockApplicationServiceGetCharmMetadataNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmMetadataNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmMetadataNameCall) Return(arg0 string, arg1 error) *MockApplicationServiceGetCharmMetadataNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmMetadataNameCall) Do(f func(context.Context, charm0.CharmLocator) (string, error)) *MockApplicationServiceGetCharmMetadataNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmMetadataNameCall) DoAndReturn(f func(context.Context, charm0.CharmLocator) (string, error)) *MockApplicationServiceGetCharmMetadataNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetExposedEndpoints mocks base method.
func (m *MockApplicationService) GetExposedEndpoints(arg0 context.Context, arg1 string) (map[string]application0.ExposedEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposedEndpoints", arg0, arg1)
	ret0, _ := ret[0].(map[string]application0.ExposedEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExposedEndpoints indicates an expected call of GetExposedEndpoints.
func (mr *MockApplicationServiceMockRecorder) GetExposedEndpoints(arg0, arg1 any) *MockApplicationServiceGetExposedEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposedEndpoints", reflect.TypeOf((*MockApplicationService)(nil).GetExposedEndpoints), arg0, arg1)
	return &MockApplicationServiceGetExposedEndpointsCall{Call: call}
}

// MockApplicationServiceGetExposedEndpointsCall wrap *gomock.Call
type MockApplicationServiceGetExposedEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetExposedEndpointsCall) Return(arg0 map[string]application0.ExposedEndpoint, arg1 error) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetExposedEndpointsCall) Do(f func(context.Context, string) (map[string]application0.ExposedEndpoint, error)) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetExposedEndpointsCall) DoAndReturn(f func(context.Context, string) (map[string]application0.ExposedEndpoint, error)) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSupportedFeatures mocks base method.
func (m *MockApplicationService) GetSupportedFeatures(arg0 context.Context) (assumes.FeatureSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFeatures", arg0)
	ret0, _ := ret[0].(assumes.FeatureSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedFeatures indicates an expected call of GetSupportedFeatures.
func (mr *MockApplicationServiceMockRecorder) GetSupportedFeatures(arg0 any) *MockApplicationServiceGetSupportedFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFeatures", reflect.TypeOf((*MockApplicationService)(nil).GetSupportedFeatures), arg0)
	return &MockApplicationServiceGetSupportedFeaturesCall{Call: call}
}

// MockApplicationServiceGetSupportedFeaturesCall wrap *gomock.Call
type MockApplicationServiceGetSupportedFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetSupportedFeaturesCall) Return(arg0 assumes.FeatureSet, arg1 error) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetSupportedFeaturesCall) Do(f func(context.Context) (assumes.FeatureSet, error)) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetSupportedFeaturesCall) DoAndReturn(f func(context.Context) (assumes.FeatureSet, error)) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitK8sPodInfo mocks base method.
func (m *MockApplicationService) GetUnitK8sPodInfo(arg0 context.Context, arg1 unit.Name) (application0.K8sPodInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitK8sPodInfo", arg0, arg1)
	ret0, _ := ret[0].(application0.K8sPodInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitK8sPodInfo indicates an expected call of GetUnitK8sPodInfo.
func (mr *MockApplicationServiceMockRecorder) GetUnitK8sPodInfo(arg0, arg1 any) *MockApplicationServiceGetUnitK8sPodInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitK8sPodInfo", reflect.TypeOf((*MockApplicationService)(nil).GetUnitK8sPodInfo), arg0, arg1)
	return &MockApplicationServiceGetUnitK8sPodInfoCall{Call: call}
}

// MockApplicationServiceGetUnitK8sPodInfoCall wrap *gomock.Call
type MockApplicationServiceGetUnitK8sPodInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitK8sPodInfoCall) Return(arg0 application0.K8sPodInfo, arg1 error) *MockApplicationServiceGetUnitK8sPodInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitK8sPodInfoCall) Do(f func(context.Context, unit.Name) (application0.K8sPodInfo, error)) *MockApplicationServiceGetUnitK8sPodInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitK8sPodInfoCall) DoAndReturn(f func(context.Context, unit.Name) (application0.K8sPodInfo, error)) *MockApplicationServiceGetUnitK8sPodInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitMachineName mocks base method.
func (m *MockApplicationService) GetUnitMachineName(arg0 context.Context, arg1 unit.Name) (machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitMachineName", arg0, arg1)
	ret0, _ := ret[0].(machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitMachineName indicates an expected call of GetUnitMachineName.
func (mr *MockApplicationServiceMockRecorder) GetUnitMachineName(arg0, arg1 any) *MockApplicationServiceGetUnitMachineNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitMachineName", reflect.TypeOf((*MockApplicationService)(nil).GetUnitMachineName), arg0, arg1)
	return &MockApplicationServiceGetUnitMachineNameCall{Call: call}
}

// MockApplicationServiceGetUnitMachineNameCall wrap *gomock.Call
type MockApplicationServiceGetUnitMachineNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitMachineNameCall) Return(arg0 machine.Name, arg1 error) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitMachineNameCall) Do(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitMachineNameCall) DoAndReturn(f func(context.Context, unit.Name) (machine.Name, error)) *MockApplicationServiceGetUnitMachineNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitNamesForApplication mocks base method.
func (m *MockApplicationService) GetUnitNamesForApplication(arg0 context.Context, arg1 string) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNamesForApplication", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNamesForApplication indicates an expected call of GetUnitNamesForApplication.
func (mr *MockApplicationServiceMockRecorder) GetUnitNamesForApplication(arg0, arg1 any) *MockApplicationServiceGetUnitNamesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNamesForApplication", reflect.TypeOf((*MockApplicationService)(nil).GetUnitNamesForApplication), arg0, arg1)
	return &MockApplicationServiceGetUnitNamesForApplicationCall{Call: call}
}

// MockApplicationServiceGetUnitNamesForApplicationCall wrap *gomock.Call
type MockApplicationServiceGetUnitNamesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) Do(f func(context.Context, string) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) DoAndReturn(f func(context.Context, string) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadVersion mocks base method.
func (m *MockApplicationService) GetUnitWorkloadVersion(arg0 context.Context, arg1 unit.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadVersion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadVersion indicates an expected call of GetUnitWorkloadVersion.
func (mr *MockApplicationServiceMockRecorder) GetUnitWorkloadVersion(arg0, arg1 any) *MockApplicationServiceGetUnitWorkloadVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadVersion", reflect.TypeOf((*MockApplicationService)(nil).GetUnitWorkloadVersion), arg0, arg1)
	return &MockApplicationServiceGetUnitWorkloadVersionCall{Call: call}
}

// MockApplicationServiceGetUnitWorkloadVersionCall wrap *gomock.Call
type MockApplicationServiceGetUnitWorkloadVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitWorkloadVersionCall) Return(arg0 string, arg1 error) *MockApplicationServiceGetUnitWorkloadVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitWorkloadVersionCall) Do(f func(context.Context, unit.Name) (string, error)) *MockApplicationServiceGetUnitWorkloadVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitWorkloadVersionCall) DoAndReturn(f func(context.Context, unit.Name) (string, error)) *MockApplicationServiceGetUnitWorkloadVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsApplicationExposed mocks base method.
func (m *MockApplicationService) IsApplicationExposed(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplicationExposed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApplicationExposed indicates an expected call of IsApplicationExposed.
func (mr *MockApplicationServiceMockRecorder) IsApplicationExposed(arg0, arg1 any) *MockApplicationServiceIsApplicationExposedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplicationExposed", reflect.TypeOf((*MockApplicationService)(nil).IsApplicationExposed), arg0, arg1)
	return &MockApplicationServiceIsApplicationExposedCall{Call: call}
}

// MockApplicationServiceIsApplicationExposedCall wrap *gomock.Call
type MockApplicationServiceIsApplicationExposedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceIsApplicationExposedCall) Return(arg0 bool, arg1 error) *MockApplicationServiceIsApplicationExposedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceIsApplicationExposedCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationServiceIsApplicationExposedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceIsApplicationExposedCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationServiceIsApplicationExposedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsCharmAvailable mocks base method.
func (m *MockApplicationService) IsCharmAvailable(arg0 context.Context, arg1 charm0.CharmLocator) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCharmAvailable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCharmAvailable indicates an expected call of IsCharmAvailable.
func (mr *MockApplicationServiceMockRecorder) IsCharmAvailable(arg0, arg1 any) *MockApplicationServiceIsCharmAvailableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCharmAvailable", reflect.TypeOf((*MockApplicationService)(nil).IsCharmAvailable), arg0, arg1)
	return &MockApplicationServiceIsCharmAvailableCall{Call: call}
}

// MockApplicationServiceIsCharmAvailableCall wrap *gomock.Call
type MockApplicationServiceIsCharmAvailableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceIsCharmAvailableCall) Return(arg0 bool, arg1 error) *MockApplicationServiceIsCharmAvailableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceIsCharmAvailableCall) Do(f func(context.Context, charm0.CharmLocator) (bool, error)) *MockApplicationServiceIsCharmAvailableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceIsCharmAvailableCall) DoAndReturn(f func(context.Context, charm0.CharmLocator) (bool, error)) *MockApplicationServiceIsCharmAvailableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsSubordinateApplication mocks base method.
func (m *MockApplicationService) IsSubordinateApplication(arg0 context.Context, arg1 application.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubordinateApplication", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSubordinateApplication indicates an expected call of IsSubordinateApplication.
func (mr *MockApplicationServiceMockRecorder) IsSubordinateApplication(arg0, arg1 any) *MockApplicationServiceIsSubordinateApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubordinateApplication", reflect.TypeOf((*MockApplicationService)(nil).IsSubordinateApplication), arg0, arg1)
	return &MockApplicationServiceIsSubordinateApplicationCall{Call: call}
}

// MockApplicationServiceIsSubordinateApplicationCall wrap *gomock.Call
type MockApplicationServiceIsSubordinateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceIsSubordinateApplicationCall) Return(arg0 bool, arg1 error) *MockApplicationServiceIsSubordinateApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceIsSubordinateApplicationCall) Do(f func(context.Context, application.UUID) (bool, error)) *MockApplicationServiceIsSubordinateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceIsSubordinateApplicationCall) DoAndReturn(f func(context.Context, application.UUID) (bool, error)) *MockApplicationServiceIsSubordinateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsSubordinateApplicationByName mocks base method.
func (m *MockApplicationService) IsSubordinateApplicationByName(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubordinateApplicationByName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSubordinateApplicationByName indicates an expected call of IsSubordinateApplicationByName.
func (mr *MockApplicationServiceMockRecorder) IsSubordinateApplicationByName(arg0, arg1 any) *MockApplicationServiceIsSubordinateApplicationByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubordinateApplicationByName", reflect.TypeOf((*MockApplicationService)(nil).IsSubordinateApplicationByName), arg0, arg1)
	return &MockApplicationServiceIsSubordinateApplicationByNameCall{Call: call}
}

// MockApplicationServiceIsSubordinateApplicationByNameCall wrap *gomock.Call
type MockApplicationServiceIsSubordinateApplicationByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceIsSubordinateApplicationByNameCall) Return(arg0 bool, arg1 error) *MockApplicationServiceIsSubordinateApplicationByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceIsSubordinateApplicationByNameCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationServiceIsSubordinateApplicationByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceIsSubordinateApplicationByNameCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationServiceIsSubordinateApplicationByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MergeApplicationEndpointBindings mocks base method.
func (m *MockApplicationService) MergeApplicationEndpointBindings(arg0 context.Context, arg1 application.UUID, arg2 map[string]network.SpaceName, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeApplicationEndpointBindings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeApplicationEndpointBindings indicates an expected call of MergeApplicationEndpointBindings.
func (mr *MockApplicationServiceMockRecorder) MergeApplicationEndpointBindings(arg0, arg1, arg2, arg3 any) *MockApplicationServiceMergeApplicationEndpointBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeApplicationEndpointBindings", reflect.TypeOf((*MockApplicationService)(nil).MergeApplicationEndpointBindings), arg0, arg1, arg2, arg3)
	return &MockApplicationServiceMergeApplicationEndpointBindingsCall{Call: call}
}

// MockApplicationServiceMergeApplicationEndpointBindingsCall wrap *gomock.Call
type MockApplicationServiceMergeApplicationEndpointBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceMergeApplicationEndpointBindingsCall) Return(arg0 error) *MockApplicationServiceMergeApplicationEndpointBindingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceMergeApplicationEndpointBindingsCall) Do(f func(context.Context, application.UUID, map[string]network.SpaceName, bool) error) *MockApplicationServiceMergeApplicationEndpointBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceMergeApplicationEndpointBindingsCall) DoAndReturn(f func(context.Context, application.UUID, map[string]network.SpaceName, bool) error) *MockApplicationServiceMergeApplicationEndpointBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MergeExposeSettings mocks base method.
func (m *MockApplicationService) MergeExposeSettings(arg0 context.Context, arg1 string, arg2 map[string]application0.ExposedEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeExposeSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeExposeSettings indicates an expected call of MergeExposeSettings.
func (mr *MockApplicationServiceMockRecorder) MergeExposeSettings(arg0, arg1, arg2 any) *MockApplicationServiceMergeExposeSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeExposeSettings", reflect.TypeOf((*MockApplicationService)(nil).MergeExposeSettings), arg0, arg1, arg2)
	return &MockApplicationServiceMergeExposeSettingsCall{Call: call}
}

// MockApplicationServiceMergeExposeSettingsCall wrap *gomock.Call
type MockApplicationServiceMergeExposeSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceMergeExposeSettingsCall) Return(arg0 error) *MockApplicationServiceMergeExposeSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceMergeExposeSettingsCall) Do(f func(context.Context, string, map[string]application0.ExposedEndpoint) error) *MockApplicationServiceMergeExposeSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceMergeExposeSettingsCall) DoAndReturn(f func(context.Context, string, map[string]application0.ExposedEndpoint) error) *MockApplicationServiceMergeExposeSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveApplicationConstraints mocks base method.
func (m *MockApplicationService) ResolveApplicationConstraints(arg0 context.Context, arg1 constraints.Value) (constraints.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveApplicationConstraints", arg0, arg1)
	ret0, _ := ret[0].(constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveApplicationConstraints indicates an expected call of ResolveApplicationConstraints.
func (mr *MockApplicationServiceMockRecorder) ResolveApplicationConstraints(arg0, arg1 any) *MockApplicationServiceResolveApplicationConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveApplicationConstraints", reflect.TypeOf((*MockApplicationService)(nil).ResolveApplicationConstraints), arg0, arg1)
	return &MockApplicationServiceResolveApplicationConstraintsCall{Call: call}
}

// MockApplicationServiceResolveApplicationConstraintsCall wrap *gomock.Call
type MockApplicationServiceResolveApplicationConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceResolveApplicationConstraintsCall) Return(arg0 constraints.Value, arg1 error) *MockApplicationServiceResolveApplicationConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceResolveApplicationConstraintsCall) Do(f func(context.Context, constraints.Value) (constraints.Value, error)) *MockApplicationServiceResolveApplicationConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceResolveApplicationConstraintsCall) DoAndReturn(f func(context.Context, constraints.Value) (constraints.Value, error)) *MockApplicationServiceResolveApplicationConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationCharm mocks base method.
func (m *MockApplicationService) SetApplicationCharm(arg0 context.Context, arg1 string, arg2 charm0.CharmLocator, arg3 application0.SetCharmParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationCharm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationCharm indicates an expected call of SetApplicationCharm.
func (mr *MockApplicationServiceMockRecorder) SetApplicationCharm(arg0, arg1, arg2, arg3 any) *MockApplicationServiceSetApplicationCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationCharm", reflect.TypeOf((*MockApplicationService)(nil).SetApplicationCharm), arg0, arg1, arg2, arg3)
	return &MockApplicationServiceSetApplicationCharmCall{Call: call}
}

// MockApplicationServiceSetApplicationCharmCall wrap *gomock.Call
type MockApplicationServiceSetApplicationCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetApplicationCharmCall) Return(arg0 error) *MockApplicationServiceSetApplicationCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetApplicationCharmCall) Do(f func(context.Context, string, charm0.CharmLocator, application0.SetCharmParams) error) *MockApplicationServiceSetApplicationCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetApplicationCharmCall) DoAndReturn(f func(context.Context, string, charm0.CharmLocator, application0.SetCharmParams) error) *MockApplicationServiceSetApplicationCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationConstraints mocks base method.
func (m *MockApplicationService) SetApplicationConstraints(arg0 context.Context, arg1 application.UUID, arg2 constraints.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationConstraints", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationConstraints indicates an expected call of SetApplicationConstraints.
func (mr *MockApplicationServiceMockRecorder) SetApplicationConstraints(arg0, arg1, arg2 any) *MockApplicationServiceSetApplicationConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationConstraints", reflect.TypeOf((*MockApplicationService)(nil).SetApplicationConstraints), arg0, arg1, arg2)
	return &MockApplicationServiceSetApplicationConstraintsCall{Call: call}
}

// MockApplicationServiceSetApplicationConstraintsCall wrap *gomock.Call
type MockApplicationServiceSetApplicationConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetApplicationConstraintsCall) Return(arg0 error) *MockApplicationServiceSetApplicationConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetApplicationConstraintsCall) Do(f func(context.Context, application.UUID, constraints.Value) error) *MockApplicationServiceSetApplicationConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetApplicationConstraintsCall) DoAndReturn(f func(context.Context, application.UUID, constraints.Value) error) *MockApplicationServiceSetApplicationConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationScale mocks base method.
func (m *MockApplicationService) SetApplicationScale(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationScale", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationScale indicates an expected call of SetApplicationScale.
func (mr *MockApplicationServiceMockRecorder) SetApplicationScale(arg0, arg1, arg2 any) *MockApplicationServiceSetApplicationScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationScale", reflect.TypeOf((*MockApplicationService)(nil).SetApplicationScale), arg0, arg1, arg2)
	return &MockApplicationServiceSetApplicationScaleCall{Call: call}
}

// MockApplicationServiceSetApplicationScaleCall wrap *gomock.Call
type MockApplicationServiceSetApplicationScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetApplicationScaleCall) Return(arg0 error) *MockApplicationServiceSetApplicationScaleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetApplicationScaleCall) Do(f func(context.Context, string, int) error) *MockApplicationServiceSetApplicationScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetApplicationScaleCall) DoAndReturn(f func(context.Context, string, int) error) *MockApplicationServiceSetApplicationScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnsetApplicationConfigKeys mocks base method.
func (m *MockApplicationService) UnsetApplicationConfigKeys(arg0 context.Context, arg1 application.UUID, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetApplicationConfigKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetApplicationConfigKeys indicates an expected call of UnsetApplicationConfigKeys.
func (mr *MockApplicationServiceMockRecorder) UnsetApplicationConfigKeys(arg0, arg1, arg2 any) *MockApplicationServiceUnsetApplicationConfigKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetApplicationConfigKeys", reflect.TypeOf((*MockApplicationService)(nil).UnsetApplicationConfigKeys), arg0, arg1, arg2)
	return &MockApplicationServiceUnsetApplicationConfigKeysCall{Call: call}
}

// MockApplicationServiceUnsetApplicationConfigKeysCall wrap *gomock.Call
type MockApplicationServiceUnsetApplicationConfigKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceUnsetApplicationConfigKeysCall) Return(arg0 error) *MockApplicationServiceUnsetApplicationConfigKeysCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceUnsetApplicationConfigKeysCall) Do(f func(context.Context, application.UUID, []string) error) *MockApplicationServiceUnsetApplicationConfigKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceUnsetApplicationConfigKeysCall) DoAndReturn(f func(context.Context, application.UUID, []string) error) *MockApplicationServiceUnsetApplicationConfigKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnsetExposeSettings mocks base method.
func (m *MockApplicationService) UnsetExposeSettings(arg0 context.Context, arg1 string, arg2 set.Strings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetExposeSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetExposeSettings indicates an expected call of UnsetExposeSettings.
func (mr *MockApplicationServiceMockRecorder) UnsetExposeSettings(arg0, arg1, arg2 any) *MockApplicationServiceUnsetExposeSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetExposeSettings", reflect.TypeOf((*MockApplicationService)(nil).UnsetExposeSettings), arg0, arg1, arg2)
	return &MockApplicationServiceUnsetExposeSettingsCall{Call: call}
}

// MockApplicationServiceUnsetExposeSettingsCall wrap *gomock.Call
type MockApplicationServiceUnsetExposeSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceUnsetExposeSettingsCall) Return(arg0 error) *MockApplicationServiceUnsetExposeSettingsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceUnsetExposeSettingsCall) Do(f func(context.Context, string, set.Strings) error) *MockApplicationServiceUnsetExposeSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceUnsetExposeSettingsCall) DoAndReturn(f func(context.Context, string, set.Strings) error) *MockApplicationServiceUnsetExposeSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateApplicationConfig mocks base method.
func (m *MockApplicationService) UpdateApplicationConfig(arg0 context.Context, arg1 application.UUID, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicationConfig indicates an expected call of UpdateApplicationConfig.
func (mr *MockApplicationServiceMockRecorder) UpdateApplicationConfig(arg0, arg1, arg2 any) *MockApplicationServiceUpdateApplicationConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationConfig", reflect.TypeOf((*MockApplicationService)(nil).UpdateApplicationConfig), arg0, arg1, arg2)
	return &MockApplicationServiceUpdateApplicationConfigCall{Call: call}
}

// MockApplicationServiceUpdateApplicationConfigCall wrap *gomock.Call
type MockApplicationServiceUpdateApplicationConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceUpdateApplicationConfigCall) Return(arg0 error) *MockApplicationServiceUpdateApplicationConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceUpdateApplicationConfigCall) Do(f func(context.Context, application.UUID, map[string]string) error) *MockApplicationServiceUpdateApplicationConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceUpdateApplicationConfigCall) DoAndReturn(f func(context.Context, application.UUID, map[string]string) error) *MockApplicationServiceUpdateApplicationConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResolveService is a mock of ResolveService interface.
type MockResolveService struct {
	ctrl     *gomock.Controller
	recorder *MockResolveServiceMockRecorder
}

// MockResolveServiceMockRecorder is the mock recorder for MockResolveService.
type MockResolveServiceMockRecorder struct {
	mock *MockResolveService
}

// NewMockResolveService creates a new mock instance.
func NewMockResolveService(ctrl *gomock.Controller) *MockResolveService {
	mock := &MockResolveService{ctrl: ctrl}
	mock.recorder = &MockResolveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolveService) EXPECT() *MockResolveServiceMockRecorder {
	return m.recorder
}

// ResolveAllUnits mocks base method.
func (m *MockResolveService) ResolveAllUnits(arg0 context.Context, arg1 resolve.ResolveMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAllUnits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveAllUnits indicates an expected call of ResolveAllUnits.
func (mr *MockResolveServiceMockRecorder) ResolveAllUnits(arg0, arg1 any) *MockResolveServiceResolveAllUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAllUnits", reflect.TypeOf((*MockResolveService)(nil).ResolveAllUnits), arg0, arg1)
	return &MockResolveServiceResolveAllUnitsCall{Call: call}
}

// MockResolveServiceResolveAllUnitsCall wrap *gomock.Call
type MockResolveServiceResolveAllUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolveServiceResolveAllUnitsCall) Return(arg0 error) *MockResolveServiceResolveAllUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolveServiceResolveAllUnitsCall) Do(f func(context.Context, resolve.ResolveMode) error) *MockResolveServiceResolveAllUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolveServiceResolveAllUnitsCall) DoAndReturn(f func(context.Context, resolve.ResolveMode) error) *MockResolveServiceResolveAllUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveUnit mocks base method.
func (m *MockResolveService) ResolveUnit(arg0 context.Context, arg1 unit.Name, arg2 resolve.ResolveMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveUnit indicates an expected call of ResolveUnit.
func (mr *MockResolveServiceMockRecorder) ResolveUnit(arg0, arg1, arg2 any) *MockResolveServiceResolveUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUnit", reflect.TypeOf((*MockResolveService)(nil).ResolveUnit), arg0, arg1, arg2)
	return &MockResolveServiceResolveUnitCall{Call: call}
}

// MockResolveServiceResolveUnitCall wrap *gomock.Call
type MockResolveServiceResolveUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResolveServiceResolveUnitCall) Return(arg0 error) *MockResolveServiceResolveUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResolveServiceResolveUnitCall) Do(f func(context.Context, unit.Name, resolve.ResolveMode) error) *MockResolveServiceResolveUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResolveServiceResolveUnitCall) DoAndReturn(f func(context.Context, unit.Name, resolve.ResolveMode) error) *MockResolveServiceResolveUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPortService is a mock of PortService interface.
type MockPortService struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceMockRecorder
}

// MockPortServiceMockRecorder is the mock recorder for MockPortService.
type MockPortServiceMockRecorder struct {
	mock *MockPortService
}

// NewMockPortService creates a new mock instance.
func NewMockPortService(ctrl *gomock.Controller) *MockPortService {
	mock := &MockPortService{ctrl: ctrl}
	mock.recorder = &MockPortServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService) EXPECT() *MockPortServiceMockRecorder {
	return m.recorder
}

// GetUnitOpenedPorts mocks base method.
func (m *MockPortService) GetUnitOpenedPorts(arg0 context.Context, arg1 unit.UUID) (network.GroupedPortRanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitOpenedPorts", arg0, arg1)
	ret0, _ := ret[0].(network.GroupedPortRanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitOpenedPorts indicates an expected call of GetUnitOpenedPorts.
func (mr *MockPortServiceMockRecorder) GetUnitOpenedPorts(arg0, arg1 any) *MockPortServiceGetUnitOpenedPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitOpenedPorts", reflect.TypeOf((*MockPortService)(nil).GetUnitOpenedPorts), arg0, arg1)
	return &MockPortServiceGetUnitOpenedPortsCall{Call: call}
}

// MockPortServiceGetUnitOpenedPortsCall wrap *gomock.Call
type MockPortServiceGetUnitOpenedPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortServiceGetUnitOpenedPortsCall) Return(arg0 network.GroupedPortRanges, arg1 error) *MockPortServiceGetUnitOpenedPortsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortServiceGetUnitOpenedPortsCall) Do(f func(context.Context, unit.UUID) (network.GroupedPortRanges, error)) *MockPortServiceGetUnitOpenedPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortServiceGetUnitOpenedPortsCall) DoAndReturn(f func(context.Context, unit.UUID) (network.GroupedPortRanges, error)) *MockPortServiceGetUnitOpenedPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeadership is a mock of Leadership interface.
type MockLeadership struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipMockRecorder
}

// MockLeadershipMockRecorder is the mock recorder for MockLeadership.
type MockLeadershipMockRecorder struct {
	mock *MockLeadership
}

// NewMockLeadership creates a new mock instance.
func NewMockLeadership(ctrl *gomock.Controller) *MockLeadership {
	mock := &MockLeadership{ctrl: ctrl}
	mock.recorder = &MockLeadershipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadership) EXPECT() *MockLeadershipMockRecorder {
	return m.recorder
}

// Leaders mocks base method.
func (m *MockLeadership) Leaders() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leaders")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leaders indicates an expected call of Leaders.
func (mr *MockLeadershipMockRecorder) Leaders() *MockLeadershipLeadersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leaders", reflect.TypeOf((*MockLeadership)(nil).Leaders))
	return &MockLeadershipLeadersCall{Call: call}
}

// MockLeadershipLeadersCall wrap *gomock.Call
type MockLeadershipLeadersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipLeadersCall) Return(arg0 map[string]string, arg1 error) *MockLeadershipLeadersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipLeadersCall) Do(f func() (map[string]string, error)) *MockLeadershipLeadersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipLeadersCall) DoAndReturn(f func() (map[string]string, error)) *MockLeadershipLeadersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// GetStoragePoolUUID mocks base method.
func (m *MockStorageService) GetStoragePoolUUID(arg0 context.Context, arg1 string) (storage.StoragePoolUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolUUID", arg0, arg1)
	ret0, _ := ret[0].(storage.StoragePoolUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolUUID indicates an expected call of GetStoragePoolUUID.
func (mr *MockStorageServiceMockRecorder) GetStoragePoolUUID(arg0, arg1 any) *MockStorageServiceGetStoragePoolUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolUUID", reflect.TypeOf((*MockStorageService)(nil).GetStoragePoolUUID), arg0, arg1)
	return &MockStorageServiceGetStoragePoolUUIDCall{Call: call}
}

// MockStorageServiceGetStoragePoolUUIDCall wrap *gomock.Call
type MockStorageServiceGetStoragePoolUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageServiceGetStoragePoolUUIDCall) Return(arg0 storage.StoragePoolUUID, arg1 error) *MockStorageServiceGetStoragePoolUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageServiceGetStoragePoolUUIDCall) Do(f func(context.Context, string) (storage.StoragePoolUUID, error)) *MockStorageServiceGetStoragePoolUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageServiceGetStoragePoolUUIDCall) DoAndReturn(f func(context.Context, string) (storage.StoragePoolUUID, error)) *MockStorageServiceGetStoragePoolUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// AddRelation mocks base method.
func (m *MockRelationService) AddRelation(arg0 context.Context, arg1, arg2 string, arg3 ...string) (relation0.Endpoint, relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRelation", varargs...)
	ret0, _ := ret[0].(relation0.Endpoint)
	ret1, _ := ret[1].(relation0.Endpoint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockRelationServiceMockRecorder) AddRelation(arg0, arg1, arg2 any, arg3 ...any) *MockRelationServiceAddRelationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockRelationService)(nil).AddRelation), varargs...)
	return &MockRelationServiceAddRelationCall{Call: call}
}

// MockRelationServiceAddRelationCall wrap *gomock.Call
type MockRelationServiceAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceAddRelationCall) Return(arg0, arg1 relation0.Endpoint, arg2 error) *MockRelationServiceAddRelationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceAddRelationCall) Do(f func(context.Context, string, string, ...string) (relation0.Endpoint, relation0.Endpoint, error)) *MockRelationServiceAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceAddRelationCall) DoAndReturn(f func(context.Context, string, string, ...string) (relation0.Endpoint, relation0.Endpoint, error)) *MockRelationServiceAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplicationRelationsInfo mocks base method.
func (m *MockRelationService) ApplicationRelationsInfo(arg0 context.Context, arg1 application.UUID) ([]relation0.EndpointRelationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationRelationsInfo", arg0, arg1)
	ret0, _ := ret[0].([]relation0.EndpointRelationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationRelationsInfo indicates an expected call of ApplicationRelationsInfo.
func (mr *MockRelationServiceMockRecorder) ApplicationRelationsInfo(arg0, arg1 any) *MockRelationServiceApplicationRelationsInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationRelationsInfo", reflect.TypeOf((*MockRelationService)(nil).ApplicationRelationsInfo), arg0, arg1)
	return &MockRelationServiceApplicationRelationsInfoCall{Call: call}
}

// MockRelationServiceApplicationRelationsInfoCall wrap *gomock.Call
type MockRelationServiceApplicationRelationsInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceApplicationRelationsInfoCall) Return(arg0 []relation0.EndpointRelationData, arg1 error) *MockRelationServiceApplicationRelationsInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceApplicationRelationsInfoCall) Do(f func(context.Context, application.UUID) ([]relation0.EndpointRelationData, error)) *MockRelationServiceApplicationRelationsInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceApplicationRelationsInfoCall) DoAndReturn(f func(context.Context, application.UUID) ([]relation0.EndpointRelationData, error)) *MockRelationServiceApplicationRelationsInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockRelationService) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetRelationDetails(arg0, arg1 any) *MockRelationServiceGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetRelationDetails), arg0, arg1)
	return &MockRelationServiceGetRelationDetailsCall{Call: call}
}

// MockRelationServiceGetRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationDetailsCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByID mocks base method.
func (m *MockRelationService) GetRelationUUIDByID(arg0 context.Context, arg1 int) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByID indicates an expected call of GetRelationUUIDByID.
func (mr *MockRelationServiceMockRecorder) GetRelationUUIDByID(arg0, arg1 any) *MockRelationServiceGetRelationUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByID", reflect.TypeOf((*MockRelationService)(nil).GetRelationUUIDByID), arg0, arg1)
	return &MockRelationServiceGetRelationUUIDByIDCall{Call: call}
}

// MockRelationServiceGetRelationUUIDByIDCall wrap *gomock.Call
type MockRelationServiceGetRelationUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUUIDByIDCall) Return(arg0 relation.UUID, arg1 error) *MockRelationServiceGetRelationUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUUIDByIDCall) Do(f func(context.Context, int) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUUIDByIDCall) DoAndReturn(f func(context.Context, int) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDForRemoval mocks base method.
func (m *MockRelationService) GetRelationUUIDForRemoval(arg0 context.Context, arg1 relation0.GetRelationUUIDForRemovalArgs) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDForRemoval", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDForRemoval indicates an expected call of GetRelationUUIDForRemoval.
func (mr *MockRelationServiceMockRecorder) GetRelationUUIDForRemoval(arg0, arg1 any) *MockRelationServiceGetRelationUUIDForRemovalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDForRemoval", reflect.TypeOf((*MockRelationService)(nil).GetRelationUUIDForRemoval), arg0, arg1)
	return &MockRelationServiceGetRelationUUIDForRemovalCall{Call: call}
}

// MockRelationServiceGetRelationUUIDForRemovalCall wrap *gomock.Call
type MockRelationServiceGetRelationUUIDForRemovalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUUIDForRemovalCall) Return(arg0 relation.UUID, arg1 error) *MockRelationServiceGetRelationUUIDForRemovalCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUUIDForRemovalCall) Do(f func(context.Context, relation0.GetRelationUUIDForRemovalArgs) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDForRemovalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUUIDForRemovalCall) DoAndReturn(f func(context.Context, relation0.GetRelationUUIDForRemovalArgs) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDForRemovalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRemoteRelationSuspendedState mocks base method.
func (m *MockRelationService) SetRemoteRelationSuspendedState(arg0 context.Context, arg1 relation.UUID, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteRelationSuspendedState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteRelationSuspendedState indicates an expected call of SetRemoteRelationSuspendedState.
func (mr *MockRelationServiceMockRecorder) SetRemoteRelationSuspendedState(arg0, arg1, arg2, arg3 any) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteRelationSuspendedState", reflect.TypeOf((*MockRelationService)(nil).SetRemoteRelationSuspendedState), arg0, arg1, arg2, arg3)
	return &MockRelationServiceSetRemoteRelationSuspendedStateCall{Call: call}
}

// MockRelationServiceSetRemoteRelationSuspendedStateCall wrap *gomock.Call
type MockRelationServiceSetRemoteRelationSuspendedStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceSetRemoteRelationSuspendedStateCall) Return(arg0 error) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceSetRemoteRelationSuspendedStateCall) Do(f func(context.Context, relation.UUID, bool, string) error) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceSetRemoteRelationSuspendedStateCall) DoAndReturn(f func(context.Context, relation.UUID, bool, string) error) *MockRelationServiceSetRemoteRelationSuspendedStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// DeleteResourcesAddedBeforeApplication mocks base method.
func (m *MockResourceService) DeleteResourcesAddedBeforeApplication(arg0 context.Context, arg1 []resource.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcesAddedBeforeApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourcesAddedBeforeApplication indicates an expected call of DeleteResourcesAddedBeforeApplication.
func (mr *MockResourceServiceMockRecorder) DeleteResourcesAddedBeforeApplication(arg0, arg1 any) *MockResourceServiceDeleteResourcesAddedBeforeApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcesAddedBeforeApplication", reflect.TypeOf((*MockResourceService)(nil).DeleteResourcesAddedBeforeApplication), arg0, arg1)
	return &MockResourceServiceDeleteResourcesAddedBeforeApplicationCall{Call: call}
}

// MockResourceServiceDeleteResourcesAddedBeforeApplicationCall wrap *gomock.Call
type MockResourceServiceDeleteResourcesAddedBeforeApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceDeleteResourcesAddedBeforeApplicationCall) Return(arg0 error) *MockResourceServiceDeleteResourcesAddedBeforeApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceDeleteResourcesAddedBeforeApplicationCall) Do(f func(context.Context, []resource.UUID) error) *MockResourceServiceDeleteResourcesAddedBeforeApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceDeleteResourcesAddedBeforeApplicationCall) DoAndReturn(f func(context.Context, []resource.UUID) error) *MockResourceServiceDeleteResourcesAddedBeforeApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemovalService is a mock of RemovalService interface.
type MockRemovalService struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceMockRecorder
}

// MockRemovalServiceMockRecorder is the mock recorder for MockRemovalService.
type MockRemovalServiceMockRecorder struct {
	mock *MockRemovalService
}

// NewMockRemovalService creates a new mock instance.
func NewMockRemovalService(ctrl *gomock.Controller) *MockRemovalService {
	mock := &MockRemovalService{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalService) EXPECT() *MockRemovalServiceMockRecorder {
	return m.recorder
}

// RemoveApplication mocks base method.
func (m *MockRemovalService) RemoveApplication(arg0 context.Context, arg1 application.UUID, arg2, arg3 bool, arg4 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApplication", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveApplication indicates an expected call of RemoveApplication.
func (mr *MockRemovalServiceMockRecorder) RemoveApplication(arg0, arg1, arg2, arg3, arg4 any) *MockRemovalServiceRemoveApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApplication", reflect.TypeOf((*MockRemovalService)(nil).RemoveApplication), arg0, arg1, arg2, arg3, arg4)
	return &MockRemovalServiceRemoveApplicationCall{Call: call}
}

// MockRemovalServiceRemoveApplicationCall wrap *gomock.Call
type MockRemovalServiceRemoveApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveApplicationCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveApplicationCall) Do(f func(context.Context, application.UUID, bool, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveApplicationCall) DoAndReturn(f func(context.Context, application.UUID, bool, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveRelation mocks base method.
func (m *MockRemovalService) RemoveRelation(arg0 context.Context, arg1 relation.UUID, arg2 bool, arg3 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRelation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRelation indicates an expected call of RemoveRelation.
func (mr *MockRemovalServiceMockRecorder) RemoveRelation(arg0, arg1, arg2, arg3 any) *MockRemovalServiceRemoveRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRelation", reflect.TypeOf((*MockRemovalService)(nil).RemoveRelation), arg0, arg1, arg2, arg3)
	return &MockRemovalServiceRemoveRelationCall{Call: call}
}

// MockRemovalServiceRemoveRelationCall wrap *gomock.Call
type MockRemovalServiceRemoveRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveRelationCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveRelationCall) Do(f func(context.Context, relation.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveRelationCall) DoAndReturn(f func(context.Context, relation.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveRemoteApplicationOfferer mocks base method.
func (m *MockRemovalService) RemoveRemoteApplicationOfferer(arg0 context.Context, arg1 remoteapplication.UUID, arg2 bool, arg3 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRemoteApplicationOfferer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRemoteApplicationOfferer indicates an expected call of RemoveRemoteApplicationOfferer.
func (mr *MockRemovalServiceMockRecorder) RemoveRemoteApplicationOfferer(arg0, arg1, arg2, arg3 any) *MockRemovalServiceRemoveRemoteApplicationOffererCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemoteApplicationOfferer", reflect.TypeOf((*MockRemovalService)(nil).RemoveRemoteApplicationOfferer), arg0, arg1, arg2, arg3)
	return &MockRemovalServiceRemoveRemoteApplicationOffererCall{Call: call}
}

// MockRemovalServiceRemoveRemoteApplicationOffererCall wrap *gomock.Call
type MockRemovalServiceRemoveRemoteApplicationOffererCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveRemoteApplicationOffererCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveRemoteApplicationOffererCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveRemoteApplicationOffererCall) Do(f func(context.Context, remoteapplication.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRemoteApplicationOffererCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveRemoteApplicationOffererCall) DoAndReturn(f func(context.Context, remoteapplication.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRemoteApplicationOffererCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveRemoteRelation mocks base method.
func (m *MockRemovalService) RemoveRemoteRelation(arg0 context.Context, arg1 relation.UUID, arg2 bool, arg3 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRemoteRelation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRemoteRelation indicates an expected call of RemoveRemoteRelation.
func (mr *MockRemovalServiceMockRecorder) RemoveRemoteRelation(arg0, arg1, arg2, arg3 any) *MockRemovalServiceRemoveRemoteRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemoteRelation", reflect.TypeOf((*MockRemovalService)(nil).RemoveRemoteRelation), arg0, arg1, arg2, arg3)
	return &MockRemovalServiceRemoveRemoteRelationCall{Call: call}
}

// MockRemovalServiceRemoveRemoteRelationCall wrap *gomock.Call
type MockRemovalServiceRemoveRemoteRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveRemoteRelationCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveRemoteRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveRemoteRelationCall) Do(f func(context.Context, relation.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRemoteRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveRemoteRelationCall) DoAndReturn(f func(context.Context, relation.UUID, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveRemoteRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveUnit mocks base method.
func (m *MockRemovalService) RemoveUnit(arg0 context.Context, arg1 unit.UUID, arg2, arg3 bool, arg4 time.Duration) (removal.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUnit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(removal.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUnit indicates an expected call of RemoveUnit.
func (mr *MockRemovalServiceMockRecorder) RemoveUnit(arg0, arg1, arg2, arg3, arg4 any) *MockRemovalServiceRemoveUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUnit", reflect.TypeOf((*MockRemovalService)(nil).RemoveUnit), arg0, arg1, arg2, arg3, arg4)
	return &MockRemovalServiceRemoveUnitCall{Call: call}
}

// MockRemovalServiceRemoveUnitCall wrap *gomock.Call
type MockRemovalServiceRemoveUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceRemoveUnitCall) Return(arg0 removal.UUID, arg1 error) *MockRemovalServiceRemoveUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceRemoveUnitCall) Do(f func(context.Context, unit.UUID, bool, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceRemoveUnitCall) DoAndReturn(f func(context.Context, unit.UUID, bool, bool, time.Duration) (removal.UUID, error)) *MockRemovalServiceRemoveUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExternalControllerService is a mock of ExternalControllerService interface.
type MockExternalControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalControllerServiceMockRecorder
}

// MockExternalControllerServiceMockRecorder is the mock recorder for MockExternalControllerService.
type MockExternalControllerServiceMockRecorder struct {
	mock *MockExternalControllerService
}

// NewMockExternalControllerService creates a new mock instance.
func NewMockExternalControllerService(ctrl *gomock.Controller) *MockExternalControllerService {
	mock := &MockExternalControllerService{ctrl: ctrl}
	mock.recorder = &MockExternalControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalControllerService) EXPECT() *MockExternalControllerServiceMockRecorder {
	return m.recorder
}

// UpdateExternalController mocks base method.
func (m *MockExternalControllerService) UpdateExternalController(arg0 context.Context, arg1 crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalController indicates an expected call of UpdateExternalController.
func (mr *MockExternalControllerServiceMockRecorder) UpdateExternalController(arg0, arg1 any) *MockExternalControllerServiceUpdateExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalController", reflect.TypeOf((*MockExternalControllerService)(nil).UpdateExternalController), arg0, arg1)
	return &MockExternalControllerServiceUpdateExternalControllerCall{Call: call}
}

// MockExternalControllerServiceUpdateExternalControllerCall wrap *gomock.Call
type MockExternalControllerServiceUpdateExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Return(arg0 error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Do(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalControllerServiceUpdateExternalControllerCall) DoAndReturn(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// AddRemoteApplicationOfferer mocks base method.
func (m *MockCrossModelRelationService) AddRemoteApplicationOfferer(arg0 context.Context, arg1 string, arg2 service0.AddRemoteApplicationOffererArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteApplicationOfferer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteApplicationOfferer indicates an expected call of AddRemoteApplicationOfferer.
func (mr *MockCrossModelRelationServiceMockRecorder) AddRemoteApplicationOfferer(arg0, arg1, arg2 any) *MockCrossModelRelationServiceAddRemoteApplicationOffererCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteApplicationOfferer", reflect.TypeOf((*MockCrossModelRelationService)(nil).AddRemoteApplicationOfferer), arg0, arg1, arg2)
	return &MockCrossModelRelationServiceAddRemoteApplicationOffererCall{Call: call}
}

// MockCrossModelRelationServiceAddRemoteApplicationOffererCall wrap *gomock.Call
type MockCrossModelRelationServiceAddRemoteApplicationOffererCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceAddRemoteApplicationOffererCall) Return(arg0 error) *MockCrossModelRelationServiceAddRemoteApplicationOffererCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceAddRemoteApplicationOffererCall) Do(f func(context.Context, string, service0.AddRemoteApplicationOffererArgs) error) *MockCrossModelRelationServiceAddRemoteApplicationOffererCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceAddRemoteApplicationOffererCall) DoAndReturn(f func(context.Context, string, service0.AddRemoteApplicationOffererArgs) error) *MockCrossModelRelationServiceAddRemoteApplicationOffererCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteApplicationOffererByApplicationName mocks base method.
func (m *MockCrossModelRelationService) GetRemoteApplicationOffererByApplicationName(arg0 context.Context, arg1 string) (remoteapplication.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOffererByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(remoteapplication.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOffererByApplicationName indicates an expected call of GetRemoteApplicationOffererByApplicationName.
func (mr *MockCrossModelRelationServiceMockRecorder) GetRemoteApplicationOffererByApplicationName(arg0, arg1 any) *MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOffererByApplicationName", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetRemoteApplicationOffererByApplicationName), arg0, arg1)
	return &MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall{Call: call}
}

// MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall wrap *gomock.Call
type MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall) Return(arg0 remoteapplication.UUID, arg1 error) *MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall) Do(f func(context.Context, string) (remoteapplication.UUID, error)) *MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall) DoAndReturn(f func(context.Context, string) (remoteapplication.UUID, error)) *MockCrossModelRelationServiceGetRemoteApplicationOffererByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// SetRemoteRelationStatus mocks base method.
func (m *MockStatusService) SetRemoteRelationStatus(arg0 context.Context, arg1 relation.UUID, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteRelationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteRelationStatus indicates an expected call of SetRemoteRelationStatus.
func (mr *MockStatusServiceMockRecorder) SetRemoteRelationStatus(arg0, arg1, arg2 any) *MockStatusServiceSetRemoteRelationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteRelationStatus", reflect.TypeOf((*MockStatusService)(nil).SetRemoteRelationStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetRemoteRelationStatusCall{Call: call}
}

// MockStatusServiceSetRemoteRelationStatusCall wrap *gomock.Call
type MockStatusServiceSetRemoteRelationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetRemoteRelationStatusCall) Return(arg0 error) *MockStatusServiceSetRemoteRelationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetRemoteRelationStatusCall) Do(f func(context.Context, relation.UUID, status.StatusInfo) error) *MockStatusServiceSetRemoteRelationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetRemoteRelationStatusCall) DoAndReturn(f func(context.Context, relation.UUID, status.StatusInfo) error) *MockStatusServiceSetRemoteRelationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
