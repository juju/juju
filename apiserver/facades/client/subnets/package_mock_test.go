// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/subnets (interfaces: NetworkService)
//
// Generated by this command:
//
//	mockgen -typed -package subnets -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/subnets NetworkService
//

// Package subnets is a generated GoMock package.
package subnets

import (
	context "context"
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	gomock "go.uber.org/mock/gomock"
)

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockNetworkService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockNetworkServiceMockRecorder) GetAllSpaces(arg0 any) *MockNetworkServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockNetworkService)(nil).GetAllSpaces), arg0)
	return &MockNetworkServiceGetAllSpacesCall{Call: call}
}

// MockNetworkServiceGetAllSpacesCall wrap *gomock.Call
type MockNetworkServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSubnets mocks base method.
func (m *MockNetworkService) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockNetworkServiceMockRecorder) GetAllSubnets(arg0 any) *MockNetworkServiceGetAllSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockNetworkService)(nil).GetAllSubnets), arg0)
	return &MockNetworkServiceGetAllSubnetsCall{Call: call}
}

// MockNetworkServiceGetAllSubnetsCall wrap *gomock.Call
type MockNetworkServiceGetAllSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSubnetsCall) Return(arg0 network.SubnetInfos, arg1 error) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSubnetsCall) Do(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSubnetsCall) DoAndReturn(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderAvailabilityZones mocks base method.
func (m *MockNetworkService) GetProviderAvailabilityZones(arg0 context.Context) (network.AvailabilityZones, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderAvailabilityZones", arg0)
	ret0, _ := ret[0].(network.AvailabilityZones)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderAvailabilityZones indicates an expected call of GetProviderAvailabilityZones.
func (mr *MockNetworkServiceMockRecorder) GetProviderAvailabilityZones(arg0 any) *MockNetworkServiceGetProviderAvailabilityZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderAvailabilityZones", reflect.TypeOf((*MockNetworkService)(nil).GetProviderAvailabilityZones), arg0)
	return &MockNetworkServiceGetProviderAvailabilityZonesCall{Call: call}
}

// MockNetworkServiceGetProviderAvailabilityZonesCall wrap *gomock.Call
type MockNetworkServiceGetProviderAvailabilityZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetProviderAvailabilityZonesCall) Return(arg0 network.AvailabilityZones, arg1 error) *MockNetworkServiceGetProviderAvailabilityZonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetProviderAvailabilityZonesCall) Do(f func(context.Context) (network.AvailabilityZones, error)) *MockNetworkServiceGetProviderAvailabilityZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetProviderAvailabilityZonesCall) DoAndReturn(f func(context.Context) (network.AvailabilityZones, error)) *MockNetworkServiceGetProviderAvailabilityZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubnetsByCIDR mocks base method.
func (m *MockNetworkService) SubnetsByCIDR(arg0 context.Context, arg1 ...string) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubnetsByCIDR", varargs...)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetsByCIDR indicates an expected call of SubnetsByCIDR.
func (mr *MockNetworkServiceMockRecorder) SubnetsByCIDR(arg0 any, arg1 ...any) *MockNetworkServiceSubnetsByCIDRCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetsByCIDR", reflect.TypeOf((*MockNetworkService)(nil).SubnetsByCIDR), varargs...)
	return &MockNetworkServiceSubnetsByCIDRCall{Call: call}
}

// MockNetworkServiceSubnetsByCIDRCall wrap *gomock.Call
type MockNetworkServiceSubnetsByCIDRCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSubnetsByCIDRCall) Return(arg0 []network.SubnetInfo, arg1 error) *MockNetworkServiceSubnetsByCIDRCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSubnetsByCIDRCall) Do(f func(context.Context, ...string) ([]network.SubnetInfo, error)) *MockNetworkServiceSubnetsByCIDRCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSubnetsByCIDRCall) DoAndReturn(f func(context.Context, ...string) ([]network.SubnetInfo, error)) *MockNetworkServiceSubnetsByCIDRCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
