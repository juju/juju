// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/subnets (interfaces: Backing,SpaceService,SubnetService)
//
// Generated by this command:
//
//	mockgen -package subnets -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/subnets Backing,SpaceService,SubnetService
//

// Package subnets is a generated GoMock package.
package subnets

import (
	context "context"
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	config "github.com/juju/juju/environs/config"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockBacking is a mock of Backing interface.
type MockBacking struct {
	ctrl     *gomock.Controller
	recorder *MockBackingMockRecorder
}

// MockBackingMockRecorder is the mock recorder for MockBacking.
type MockBackingMockRecorder struct {
	mock *MockBacking
}

// NewMockBacking creates a new mock instance.
func NewMockBacking(ctrl *gomock.Controller) *MockBacking {
	mock := &MockBacking{ctrl: ctrl}
	mock.recorder = &MockBackingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBacking) EXPECT() *MockBackingMockRecorder {
	return m.recorder
}

// AvailabilityZones mocks base method.
func (m *MockBacking) AvailabilityZones() (network.AvailabilityZones, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityZones")
	ret0, _ := ret[0].(network.AvailabilityZones)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityZones indicates an expected call of AvailabilityZones.
func (mr *MockBackingMockRecorder) AvailabilityZones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityZones", reflect.TypeOf((*MockBacking)(nil).AvailabilityZones))
}

// CloudSpec mocks base method.
func (m *MockBacking) CloudSpec(arg0 context.Context) (cloudspec.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSpec", arg0)
	ret0, _ := ret[0].(cloudspec.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSpec indicates an expected call of CloudSpec.
func (mr *MockBackingMockRecorder) CloudSpec(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSpec", reflect.TypeOf((*MockBacking)(nil).CloudSpec), arg0)
}

// ModelConfig mocks base method.
func (m *MockBacking) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockBackingMockRecorder) ModelConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockBacking)(nil).ModelConfig), arg0)
}

// ModelTag mocks base method.
func (m *MockBacking) ModelTag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// ModelTag indicates an expected call of ModelTag.
func (mr *MockBackingMockRecorder) ModelTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTag", reflect.TypeOf((*MockBacking)(nil).ModelTag))
}

// SetAvailabilityZones mocks base method.
func (m *MockBacking) SetAvailabilityZones(arg0 network.AvailabilityZones) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvailabilityZones", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAvailabilityZones indicates an expected call of SetAvailabilityZones.
func (mr *MockBackingMockRecorder) SetAvailabilityZones(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvailabilityZones", reflect.TypeOf((*MockBacking)(nil).SetAvailabilityZones), arg0)
}

// MockSpaceService is a mock of SpaceService interface.
type MockSpaceService struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceServiceMockRecorder
}

// MockSpaceServiceMockRecorder is the mock recorder for MockSpaceService.
type MockSpaceServiceMockRecorder struct {
	mock *MockSpaceService
}

// NewMockSpaceService creates a new mock instance.
func NewMockSpaceService(ctrl *gomock.Controller) *MockSpaceService {
	mock := &MockSpaceService{ctrl: ctrl}
	mock.recorder = &MockSpaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceService) EXPECT() *MockSpaceServiceMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockSpaceService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockSpaceServiceMockRecorder) GetAllSpaces(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockSpaceService)(nil).GetAllSpaces), arg0)
}

// Space mocks base method.
func (m *MockSpaceService) Space(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Space", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Space indicates an expected call of Space.
func (mr *MockSpaceServiceMockRecorder) Space(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Space", reflect.TypeOf((*MockSpaceService)(nil).Space), arg0, arg1)
}

// SpaceByName mocks base method.
func (m *MockSpaceService) SpaceByName(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByName indicates an expected call of SpaceByName.
func (mr *MockSpaceServiceMockRecorder) SpaceByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByName", reflect.TypeOf((*MockSpaceService)(nil).SpaceByName), arg0, arg1)
}

// MockSubnetService is a mock of SubnetService interface.
type MockSubnetService struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetServiceMockRecorder
}

// MockSubnetServiceMockRecorder is the mock recorder for MockSubnetService.
type MockSubnetServiceMockRecorder struct {
	mock *MockSubnetService
}

// NewMockSubnetService creates a new mock instance.
func NewMockSubnetService(ctrl *gomock.Controller) *MockSubnetService {
	mock := &MockSubnetService{ctrl: ctrl}
	mock.recorder = &MockSubnetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetService) EXPECT() *MockSubnetServiceMockRecorder {
	return m.recorder
}

// GetAllSubnets mocks base method.
func (m *MockSubnetService) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockSubnetServiceMockRecorder) GetAllSubnets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockSubnetService)(nil).GetAllSubnets), arg0)
}

// SubnetsByCIDR mocks base method.
func (m *MockSubnetService) SubnetsByCIDR(arg0 context.Context, arg1 ...string) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubnetsByCIDR", varargs...)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetsByCIDR indicates an expected call of SubnetsByCIDR.
func (mr *MockSubnetServiceMockRecorder) SubnetsByCIDR(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetsByCIDR", reflect.TypeOf((*MockSubnetService)(nil).SubnetsByCIDR), varargs...)
}
