// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/spaces (interfaces: Backing,BlockChecker,Machine,Constraints,Address,NetworkService,ControllerConfigService,ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package spaces -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/spaces Backing,BlockChecker,Machine,Constraints,Address,NetworkService,ControllerConfigService,ApplicationService
//

// Package spaces is a generated GoMock package.
package spaces

import (
	context "context"
	reflect "reflect"

	set "github.com/juju/collections/set"
	controller "github.com/juju/juju/controller"
	constraints "github.com/juju/juju/core/constraints"
	machine "github.com/juju/juju/core/machine"
	network "github.com/juju/juju/core/network"
	unit "github.com/juju/juju/core/unit"
	txn "github.com/juju/mgo/v3/txn"
	gomock "go.uber.org/mock/gomock"
)

// MockBacking is a mock of Backing interface.
type MockBacking struct {
	ctrl     *gomock.Controller
	recorder *MockBackingMockRecorder
}

// MockBackingMockRecorder is the mock recorder for MockBacking.
type MockBackingMockRecorder struct {
	mock *MockBacking
}

// NewMockBacking creates a new mock instance.
func NewMockBacking(ctrl *gomock.Controller) *MockBacking {
	mock := &MockBacking{ctrl: ctrl}
	mock.recorder = &MockBackingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBacking) EXPECT() *MockBackingMockRecorder {
	return m.recorder
}

// AllConstraints mocks base method.
func (m *MockBacking) AllConstraints() ([]Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllConstraints")
	ret0, _ := ret[0].([]Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllConstraints indicates an expected call of AllConstraints.
func (mr *MockBackingMockRecorder) AllConstraints() *MockBackingAllConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllConstraints", reflect.TypeOf((*MockBacking)(nil).AllConstraints))
	return &MockBackingAllConstraintsCall{Call: call}
}

// MockBackingAllConstraintsCall wrap *gomock.Call
type MockBackingAllConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackingAllConstraintsCall) Return(arg0 []Constraints, arg1 error) *MockBackingAllConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackingAllConstraintsCall) Do(f func() ([]Constraints, error)) *MockBackingAllConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackingAllConstraintsCall) DoAndReturn(f func() ([]Constraints, error)) *MockBackingAllConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllMachines mocks base method.
func (m *MockBacking) AllMachines() ([]Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachines")
	ret0, _ := ret[0].([]Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachines indicates an expected call of AllMachines.
func (mr *MockBackingMockRecorder) AllMachines() *MockBackingAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachines", reflect.TypeOf((*MockBacking)(nil).AllMachines))
	return &MockBackingAllMachinesCall{Call: call}
}

// MockBackingAllMachinesCall wrap *gomock.Call
type MockBackingAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackingAllMachinesCall) Return(arg0 []Machine, arg1 error) *MockBackingAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackingAllMachinesCall) Do(f func() ([]Machine, error)) *MockBackingAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackingAllMachinesCall) DoAndReturn(f func() ([]Machine, error)) *MockBackingAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConstraintsBySpaceName mocks base method.
func (m *MockBacking) ConstraintsBySpaceName(arg0 string) ([]Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsBySpaceName", arg0)
	ret0, _ := ret[0].([]Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsBySpaceName indicates an expected call of ConstraintsBySpaceName.
func (mr *MockBackingMockRecorder) ConstraintsBySpaceName(arg0 any) *MockBackingConstraintsBySpaceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsBySpaceName", reflect.TypeOf((*MockBacking)(nil).ConstraintsBySpaceName), arg0)
	return &MockBackingConstraintsBySpaceNameCall{Call: call}
}

// MockBackingConstraintsBySpaceNameCall wrap *gomock.Call
type MockBackingConstraintsBySpaceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackingConstraintsBySpaceNameCall) Return(arg0 []Constraints, arg1 error) *MockBackingConstraintsBySpaceNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackingConstraintsBySpaceNameCall) Do(f func(string) ([]Constraints, error)) *MockBackingConstraintsBySpaceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackingConstraintsBySpaceNameCall) DoAndReturn(f func(string) ([]Constraints, error)) *MockBackingConstraintsBySpaceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsController mocks base method.
func (m *MockBacking) IsController() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsController")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsController indicates an expected call of IsController.
func (mr *MockBackingMockRecorder) IsController() *MockBackingIsControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsController", reflect.TypeOf((*MockBacking)(nil).IsController))
	return &MockBackingIsControllerCall{Call: call}
}

// MockBackingIsControllerCall wrap *gomock.Call
type MockBackingIsControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackingIsControllerCall) Return(arg0 bool) *MockBackingIsControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackingIsControllerCall) Do(f func() bool) *MockBackingIsControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackingIsControllerCall) DoAndReturn(f func() bool) *MockBackingIsControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockChecker is a mock of BlockChecker interface.
type MockBlockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCheckerMockRecorder
}

// MockBlockCheckerMockRecorder is the mock recorder for MockBlockChecker.
type MockBlockCheckerMockRecorder struct {
	mock *MockBlockChecker
}

// NewMockBlockChecker creates a new mock instance.
func NewMockBlockChecker(ctrl *gomock.Controller) *MockBlockChecker {
	mock := &MockBlockChecker{ctrl: ctrl}
	mock.recorder = &MockBlockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockChecker) EXPECT() *MockBlockCheckerMockRecorder {
	return m.recorder
}

// ChangeAllowed mocks base method.
func (m *MockBlockChecker) ChangeAllowed(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAllowed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAllowed indicates an expected call of ChangeAllowed.
func (mr *MockBlockCheckerMockRecorder) ChangeAllowed(arg0 any) *MockBlockCheckerChangeAllowedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAllowed", reflect.TypeOf((*MockBlockChecker)(nil).ChangeAllowed), arg0)
	return &MockBlockCheckerChangeAllowedCall{Call: call}
}

// MockBlockCheckerChangeAllowedCall wrap *gomock.Call
type MockBlockCheckerChangeAllowedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCheckerChangeAllowedCall) Return(arg0 error) *MockBlockCheckerChangeAllowedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCheckerChangeAllowedCall) Do(f func(context.Context) error) *MockBlockCheckerChangeAllowedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCheckerChangeAllowedCall) DoAndReturn(f func(context.Context) error) *MockBlockCheckerChangeAllowedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAllowed mocks base method.
func (m *MockBlockChecker) RemoveAllowed(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllowed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllowed indicates an expected call of RemoveAllowed.
func (mr *MockBlockCheckerMockRecorder) RemoveAllowed(arg0 any) *MockBlockCheckerRemoveAllowedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllowed", reflect.TypeOf((*MockBlockChecker)(nil).RemoveAllowed), arg0)
	return &MockBlockCheckerRemoveAllowedCall{Call: call}
}

// MockBlockCheckerRemoveAllowedCall wrap *gomock.Call
type MockBlockCheckerRemoveAllowedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCheckerRemoveAllowedCall) Return(arg0 error) *MockBlockCheckerRemoveAllowedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCheckerRemoveAllowedCall) Do(f func(context.Context) error) *MockBlockCheckerRemoveAllowedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCheckerRemoveAllowedCall) DoAndReturn(f func(context.Context) error) *MockBlockCheckerRemoveAllowedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// AllAddresses mocks base method.
func (m *MockMachine) AllAddresses() ([]Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllAddresses")
	ret0, _ := ret[0].([]Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllAddresses indicates an expected call of AllAddresses.
func (mr *MockMachineMockRecorder) AllAddresses() *MockMachineAllAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllAddresses", reflect.TypeOf((*MockMachine)(nil).AllAddresses))
	return &MockMachineAllAddressesCall{Call: call}
}

// MockMachineAllAddressesCall wrap *gomock.Call
type MockMachineAllAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineAllAddressesCall) Return(arg0 []Address, arg1 error) *MockMachineAllAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineAllAddressesCall) Do(f func() ([]Address, error)) *MockMachineAllAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineAllAddressesCall) DoAndReturn(f func() ([]Address, error)) *MockMachineAllAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllSpaces mocks base method.
func (m *MockMachine) AllSpaces(arg0 network.SubnetInfos) (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSpaces", arg0)
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSpaces indicates an expected call of AllSpaces.
func (mr *MockMachineMockRecorder) AllSpaces(arg0 any) *MockMachineAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSpaces", reflect.TypeOf((*MockMachine)(nil).AllSpaces), arg0)
	return &MockMachineAllSpacesCall{Call: call}
}

// MockMachineAllSpacesCall wrap *gomock.Call
type MockMachineAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineAllSpacesCall) Return(arg0 set.Strings, arg1 error) *MockMachineAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineAllSpacesCall) Do(f func(network.SubnetInfos) (set.Strings, error)) *MockMachineAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineAllSpacesCall) DoAndReturn(f func(network.SubnetInfos) (set.Strings, error)) *MockMachineAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockMachine) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockMachineMockRecorder) Id() *MockMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMachine)(nil).Id))
	return &MockMachineIdCall{Call: call}
}

// MockMachineIdCall wrap *gomock.Call
type MockMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineIdCall) Return(arg0 string) *MockMachineIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineIdCall) Do(f func() string) *MockMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineIdCall) DoAndReturn(f func() string) *MockMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConstraints is a mock of Constraints interface.
type MockConstraints struct {
	ctrl     *gomock.Controller
	recorder *MockConstraintsMockRecorder
}

// MockConstraintsMockRecorder is the mock recorder for MockConstraints.
type MockConstraintsMockRecorder struct {
	mock *MockConstraints
}

// NewMockConstraints creates a new mock instance.
func NewMockConstraints(ctrl *gomock.Controller) *MockConstraints {
	mock := &MockConstraints{ctrl: ctrl}
	mock.recorder = &MockConstraintsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConstraints) EXPECT() *MockConstraintsMockRecorder {
	return m.recorder
}

// ChangeSpaceNameOps mocks base method.
func (m *MockConstraints) ChangeSpaceNameOps(arg0, arg1 string) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSpaceNameOps", arg0, arg1)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// ChangeSpaceNameOps indicates an expected call of ChangeSpaceNameOps.
func (mr *MockConstraintsMockRecorder) ChangeSpaceNameOps(arg0, arg1 any) *MockConstraintsChangeSpaceNameOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSpaceNameOps", reflect.TypeOf((*MockConstraints)(nil).ChangeSpaceNameOps), arg0, arg1)
	return &MockConstraintsChangeSpaceNameOpsCall{Call: call}
}

// MockConstraintsChangeSpaceNameOpsCall wrap *gomock.Call
type MockConstraintsChangeSpaceNameOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConstraintsChangeSpaceNameOpsCall) Return(arg0 []txn.Op) *MockConstraintsChangeSpaceNameOpsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConstraintsChangeSpaceNameOpsCall) Do(f func(string, string) []txn.Op) *MockConstraintsChangeSpaceNameOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConstraintsChangeSpaceNameOpsCall) DoAndReturn(f func(string, string) []txn.Op) *MockConstraintsChangeSpaceNameOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockConstraints) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockConstraintsMockRecorder) ID() *MockConstraintsIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockConstraints)(nil).ID))
	return &MockConstraintsIDCall{Call: call}
}

// MockConstraintsIDCall wrap *gomock.Call
type MockConstraintsIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConstraintsIDCall) Return(arg0 string) *MockConstraintsIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConstraintsIDCall) Do(f func() string) *MockConstraintsIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConstraintsIDCall) DoAndReturn(f func() string) *MockConstraintsIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockConstraints) Value() constraints.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(constraints.Value)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockConstraintsMockRecorder) Value() *MockConstraintsValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockConstraints)(nil).Value))
	return &MockConstraintsValueCall{Call: call}
}

// MockConstraintsValueCall wrap *gomock.Call
type MockConstraintsValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConstraintsValueCall) Return(arg0 constraints.Value) *MockConstraintsValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConstraintsValueCall) Do(f func() constraints.Value) *MockConstraintsValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConstraintsValueCall) DoAndReturn(f func() constraints.Value) *MockConstraintsValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAddress is a mock of Address interface.
type MockAddress struct {
	ctrl     *gomock.Controller
	recorder *MockAddressMockRecorder
}

// MockAddressMockRecorder is the mock recorder for MockAddress.
type MockAddressMockRecorder struct {
	mock *MockAddress
}

// NewMockAddress creates a new mock instance.
func NewMockAddress(ctrl *gomock.Controller) *MockAddress {
	mock := &MockAddress{ctrl: ctrl}
	mock.recorder = &MockAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddress) EXPECT() *MockAddressMockRecorder {
	return m.recorder
}

// ConfigMethod mocks base method.
func (m *MockAddress) ConfigMethod() network.AddressConfigType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMethod")
	ret0, _ := ret[0].(network.AddressConfigType)
	return ret0
}

// ConfigMethod indicates an expected call of ConfigMethod.
func (mr *MockAddressMockRecorder) ConfigMethod() *MockAddressConfigMethodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMethod", reflect.TypeOf((*MockAddress)(nil).ConfigMethod))
	return &MockAddressConfigMethodCall{Call: call}
}

// MockAddressConfigMethodCall wrap *gomock.Call
type MockAddressConfigMethodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddressConfigMethodCall) Return(arg0 network.AddressConfigType) *MockAddressConfigMethodCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddressConfigMethodCall) Do(f func() network.AddressConfigType) *MockAddressConfigMethodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddressConfigMethodCall) DoAndReturn(f func() network.AddressConfigType) *MockAddressConfigMethodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubnetCIDR mocks base method.
func (m *MockAddress) SubnetCIDR() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetCIDR")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubnetCIDR indicates an expected call of SubnetCIDR.
func (mr *MockAddressMockRecorder) SubnetCIDR() *MockAddressSubnetCIDRCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetCIDR", reflect.TypeOf((*MockAddress)(nil).SubnetCIDR))
	return &MockAddressSubnetCIDRCall{Call: call}
}

// MockAddressSubnetCIDRCall wrap *gomock.Call
type MockAddressSubnetCIDRCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddressSubnetCIDRCall) Return(arg0 string) *MockAddressSubnetCIDRCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddressSubnetCIDRCall) Do(f func() string) *MockAddressSubnetCIDRCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddressSubnetCIDRCall) DoAndReturn(f func() string) *MockAddressSubnetCIDRCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Value mocks base method.
func (m *MockAddress) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockAddressMockRecorder) Value() *MockAddressValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockAddress)(nil).Value))
	return &MockAddressValueCall{Call: call}
}

// MockAddressValueCall wrap *gomock.Call
type MockAddressValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAddressValueCall) Return(arg0 string) *MockAddressValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAddressValueCall) Do(f func() string) *MockAddressValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAddressValueCall) DoAndReturn(f func() string) *MockAddressValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockNetworkService) AddSpace(arg0 context.Context, arg1 network.SpaceInfo) (network.SpaceUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockNetworkServiceMockRecorder) AddSpace(arg0, arg1 any) *MockNetworkServiceAddSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockNetworkService)(nil).AddSpace), arg0, arg1)
	return &MockNetworkServiceAddSpaceCall{Call: call}
}

// MockNetworkServiceAddSpaceCall wrap *gomock.Call
type MockNetworkServiceAddSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceAddSpaceCall) Return(arg0 network.SpaceUUID, arg1 error) *MockNetworkServiceAddSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceAddSpaceCall) Do(f func(context.Context, network.SpaceInfo) (network.SpaceUUID, error)) *MockNetworkServiceAddSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceAddSpaceCall) DoAndReturn(f func(context.Context, network.SpaceInfo) (network.SpaceUUID, error)) *MockNetworkServiceAddSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSpaces mocks base method.
func (m *MockNetworkService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockNetworkServiceMockRecorder) GetAllSpaces(arg0 any) *MockNetworkServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockNetworkService)(nil).GetAllSpaces), arg0)
	return &MockNetworkServiceGetAllSpacesCall{Call: call}
}

// MockNetworkServiceGetAllSpacesCall wrap *gomock.Call
type MockNetworkServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSubnets mocks base method.
func (m *MockNetworkService) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockNetworkServiceMockRecorder) GetAllSubnets(arg0 any) *MockNetworkServiceGetAllSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockNetworkService)(nil).GetAllSubnets), arg0)
	return &MockNetworkServiceGetAllSubnetsCall{Call: call}
}

// MockNetworkServiceGetAllSubnetsCall wrap *gomock.Call
type MockNetworkServiceGetAllSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSubnetsCall) Return(arg0 network.SubnetInfos, arg1 error) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSubnetsCall) Do(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSubnetsCall) DoAndReturn(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReloadSpaces mocks base method.
func (m *MockNetworkService) ReloadSpaces(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockNetworkServiceMockRecorder) ReloadSpaces(arg0 any) *MockNetworkServiceReloadSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockNetworkService)(nil).ReloadSpaces), arg0)
	return &MockNetworkServiceReloadSpacesCall{Call: call}
}

// MockNetworkServiceReloadSpacesCall wrap *gomock.Call
type MockNetworkServiceReloadSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceReloadSpacesCall) Return(arg0 error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceReloadSpacesCall) Do(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceReloadSpacesCall) DoAndReturn(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSpace mocks base method.
func (m *MockNetworkService) RemoveSpace(arg0 context.Context, arg1 network.SpaceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSpace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSpace indicates an expected call of RemoveSpace.
func (mr *MockNetworkServiceMockRecorder) RemoveSpace(arg0, arg1 any) *MockNetworkServiceRemoveSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpace", reflect.TypeOf((*MockNetworkService)(nil).RemoveSpace), arg0, arg1)
	return &MockNetworkServiceRemoveSpaceCall{Call: call}
}

// MockNetworkServiceRemoveSpaceCall wrap *gomock.Call
type MockNetworkServiceRemoveSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceRemoveSpaceCall) Return(arg0 error) *MockNetworkServiceRemoveSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceRemoveSpaceCall) Do(f func(context.Context, network.SpaceUUID) error) *MockNetworkServiceRemoveSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceRemoveSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID) error) *MockNetworkServiceRemoveSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SpaceByName mocks base method.
func (m *MockNetworkService) SpaceByName(arg0 context.Context, arg1 network.SpaceName) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByName indicates an expected call of SpaceByName.
func (mr *MockNetworkServiceMockRecorder) SpaceByName(arg0, arg1 any) *MockNetworkServiceSpaceByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByName", reflect.TypeOf((*MockNetworkService)(nil).SpaceByName), arg0, arg1)
	return &MockNetworkServiceSpaceByNameCall{Call: call}
}

// MockNetworkServiceSpaceByNameCall wrap *gomock.Call
type MockNetworkServiceSpaceByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSpaceByNameCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSpaceByNameCall) Do(f func(context.Context, network.SpaceName) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSpaceByNameCall) DoAndReturn(f func(context.Context, network.SpaceName) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subnet mocks base method.
func (m *MockNetworkService) Subnet(arg0 context.Context, arg1 string) (*network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnet", arg0, arg1)
	ret0, _ := ret[0].(*network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnet indicates an expected call of Subnet.
func (mr *MockNetworkServiceMockRecorder) Subnet(arg0, arg1 any) *MockNetworkServiceSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnet", reflect.TypeOf((*MockNetworkService)(nil).Subnet), arg0, arg1)
	return &MockNetworkServiceSubnetCall{Call: call}
}

// MockNetworkServiceSubnetCall wrap *gomock.Call
type MockNetworkServiceSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSubnetCall) Return(arg0 *network.SubnetInfo, arg1 error) *MockNetworkServiceSubnetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSubnetCall) Do(f func(context.Context, string) (*network.SubnetInfo, error)) *MockNetworkServiceSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSubnetCall) DoAndReturn(f func(context.Context, string) (*network.SubnetInfo, error)) *MockNetworkServiceSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubnetsByCIDR mocks base method.
func (m *MockNetworkService) SubnetsByCIDR(arg0 context.Context, arg1 ...string) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubnetsByCIDR", varargs...)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetsByCIDR indicates an expected call of SubnetsByCIDR.
func (mr *MockNetworkServiceMockRecorder) SubnetsByCIDR(arg0 any, arg1 ...any) *MockNetworkServiceSubnetsByCIDRCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetsByCIDR", reflect.TypeOf((*MockNetworkService)(nil).SubnetsByCIDR), varargs...)
	return &MockNetworkServiceSubnetsByCIDRCall{Call: call}
}

// MockNetworkServiceSubnetsByCIDRCall wrap *gomock.Call
type MockNetworkServiceSubnetsByCIDRCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSubnetsByCIDRCall) Return(arg0 []network.SubnetInfo, arg1 error) *MockNetworkServiceSubnetsByCIDRCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSubnetsByCIDRCall) Do(f func(context.Context, ...string) ([]network.SubnetInfo, error)) *MockNetworkServiceSubnetsByCIDRCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSubnetsByCIDRCall) DoAndReturn(f func(context.Context, ...string) ([]network.SubnetInfo, error)) *MockNetworkServiceSubnetsByCIDRCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaceDiscovery mocks base method.
func (m *MockNetworkService) SupportsSpaceDiscovery(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaceDiscovery", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaceDiscovery indicates an expected call of SupportsSpaceDiscovery.
func (mr *MockNetworkServiceMockRecorder) SupportsSpaceDiscovery(arg0 any) *MockNetworkServiceSupportsSpaceDiscoveryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaceDiscovery", reflect.TypeOf((*MockNetworkService)(nil).SupportsSpaceDiscovery), arg0)
	return &MockNetworkServiceSupportsSpaceDiscoveryCall{Call: call}
}

// MockNetworkServiceSupportsSpaceDiscoveryCall wrap *gomock.Call
type MockNetworkServiceSupportsSpaceDiscoveryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSupportsSpaceDiscoveryCall) Return(arg0 bool, arg1 error) *MockNetworkServiceSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSupportsSpaceDiscoveryCall) Do(f func(context.Context) (bool, error)) *MockNetworkServiceSupportsSpaceDiscoveryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSupportsSpaceDiscoveryCall) DoAndReturn(f func(context.Context) (bool, error)) *MockNetworkServiceSupportsSpaceDiscoveryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsSpaces mocks base method.
func (m *MockNetworkService) SupportsSpaces(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSpaces", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsSpaces indicates an expected call of SupportsSpaces.
func (mr *MockNetworkServiceMockRecorder) SupportsSpaces(arg0 any) *MockNetworkServiceSupportsSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSpaces", reflect.TypeOf((*MockNetworkService)(nil).SupportsSpaces), arg0)
	return &MockNetworkServiceSupportsSpacesCall{Call: call}
}

// MockNetworkServiceSupportsSpacesCall wrap *gomock.Call
type MockNetworkServiceSupportsSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSupportsSpacesCall) Return(arg0 bool, arg1 error) *MockNetworkServiceSupportsSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSupportsSpacesCall) Do(f func(context.Context) (bool, error)) *MockNetworkServiceSupportsSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSupportsSpacesCall) DoAndReturn(f func(context.Context) (bool, error)) *MockNetworkServiceSupportsSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSpace mocks base method.
func (m *MockNetworkService) UpdateSpace(arg0 context.Context, arg1 network.SpaceUUID, arg2 network.SpaceName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpace indicates an expected call of UpdateSpace.
func (mr *MockNetworkServiceMockRecorder) UpdateSpace(arg0, arg1, arg2 any) *MockNetworkServiceUpdateSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpace", reflect.TypeOf((*MockNetworkService)(nil).UpdateSpace), arg0, arg1, arg2)
	return &MockNetworkServiceUpdateSpaceCall{Call: call}
}

// MockNetworkServiceUpdateSpaceCall wrap *gomock.Call
type MockNetworkServiceUpdateSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceUpdateSpaceCall) Return(arg0 error) *MockNetworkServiceUpdateSpaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceUpdateSpaceCall) Do(f func(context.Context, network.SpaceUUID, network.SpaceName) error) *MockNetworkServiceUpdateSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceUpdateSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID, network.SpaceName) error) *MockNetworkServiceUpdateSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSubnet mocks base method.
func (m *MockNetworkService) UpdateSubnet(arg0 context.Context, arg1 string, arg2 network.SpaceUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubnet indicates an expected call of UpdateSubnet.
func (mr *MockNetworkServiceMockRecorder) UpdateSubnet(arg0, arg1, arg2 any) *MockNetworkServiceUpdateSubnetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnet", reflect.TypeOf((*MockNetworkService)(nil).UpdateSubnet), arg0, arg1, arg2)
	return &MockNetworkServiceUpdateSubnetCall{Call: call}
}

// MockNetworkServiceUpdateSubnetCall wrap *gomock.Call
type MockNetworkServiceUpdateSubnetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceUpdateSubnetCall) Return(arg0 error) *MockNetworkServiceUpdateSubnetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceUpdateSubnetCall) Do(f func(context.Context, string, network.SpaceUUID) error) *MockNetworkServiceUpdateSubnetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceUpdateSubnetCall) DoAndReturn(f func(context.Context, string, network.SpaceUUID) error) *MockNetworkServiceUpdateSubnetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetAllEndpointBindings mocks base method.
func (m *MockApplicationService) GetAllEndpointBindings(arg0 context.Context) (map[string]map[string]network.SpaceName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEndpointBindings", arg0)
	ret0, _ := ret[0].(map[string]map[string]network.SpaceName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEndpointBindings indicates an expected call of GetAllEndpointBindings.
func (mr *MockApplicationServiceMockRecorder) GetAllEndpointBindings(arg0 any) *MockApplicationServiceGetAllEndpointBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEndpointBindings", reflect.TypeOf((*MockApplicationService)(nil).GetAllEndpointBindings), arg0)
	return &MockApplicationServiceGetAllEndpointBindingsCall{Call: call}
}

// MockApplicationServiceGetAllEndpointBindingsCall wrap *gomock.Call
type MockApplicationServiceGetAllEndpointBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAllEndpointBindingsCall) Return(arg0 map[string]map[string]network.SpaceName, arg1 error) *MockApplicationServiceGetAllEndpointBindingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAllEndpointBindingsCall) Do(f func(context.Context) (map[string]map[string]network.SpaceName, error)) *MockApplicationServiceGetAllEndpointBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAllEndpointBindingsCall) DoAndReturn(f func(context.Context) (map[string]map[string]network.SpaceName, error)) *MockApplicationServiceGetAllEndpointBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationsBoundToSpace mocks base method.
func (m *MockApplicationService) GetApplicationsBoundToSpace(arg0 context.Context, arg1 network.SpaceUUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsBoundToSpace", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsBoundToSpace indicates an expected call of GetApplicationsBoundToSpace.
func (mr *MockApplicationServiceMockRecorder) GetApplicationsBoundToSpace(arg0, arg1 any) *MockApplicationServiceGetApplicationsBoundToSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsBoundToSpace", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationsBoundToSpace), arg0, arg1)
	return &MockApplicationServiceGetApplicationsBoundToSpaceCall{Call: call}
}

// MockApplicationServiceGetApplicationsBoundToSpaceCall wrap *gomock.Call
type MockApplicationServiceGetApplicationsBoundToSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationsBoundToSpaceCall) Return(arg0 []string, arg1 error) *MockApplicationServiceGetApplicationsBoundToSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationsBoundToSpaceCall) Do(f func(context.Context, network.SpaceUUID) ([]string, error)) *MockApplicationServiceGetApplicationsBoundToSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationsBoundToSpaceCall) DoAndReturn(f func(context.Context, network.SpaceUUID) ([]string, error)) *MockApplicationServiceGetApplicationsBoundToSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitNamesOnMachine mocks base method.
func (m *MockApplicationService) GetUnitNamesOnMachine(arg0 context.Context, arg1 machine.Name) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNamesOnMachine", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNamesOnMachine indicates an expected call of GetUnitNamesOnMachine.
func (mr *MockApplicationServiceMockRecorder) GetUnitNamesOnMachine(arg0, arg1 any) *MockApplicationServiceGetUnitNamesOnMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNamesOnMachine", reflect.TypeOf((*MockApplicationService)(nil).GetUnitNamesOnMachine), arg0, arg1)
	return &MockApplicationServiceGetUnitNamesOnMachineCall{Call: call}
}

// MockApplicationServiceGetUnitNamesOnMachineCall wrap *gomock.Call
type MockApplicationServiceGetUnitNamesOnMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) Do(f func(context.Context, machine.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) DoAndReturn(f func(context.Context, machine.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
