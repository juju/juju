// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/spaces (interfaces: Backing,BlockChecker,Machine,RenameSpace,RenameSpaceState,Settings,OpFactory,Constraints,Address,Unit,ReloadSpaces,ReloadSpacesState,ReloadSpacesEnviron,EnvironSpaces,AuthorizerState,Bindings,SpaceService,SubnetService)
//
// Generated by this command:
//
//	mockgen -package spaces -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/spaces Backing,BlockChecker,Machine,RenameSpace,RenameSpaceState,Settings,OpFactory,Constraints,Address,Unit,ReloadSpaces,ReloadSpacesState,ReloadSpacesEnviron,EnvironSpaces,AuthorizerState,Bindings,SpaceService,SubnetService
//

// Package spaces is a generated GoMock package.
package spaces

import (
	context "context"
	reflect "reflect"

	set "github.com/juju/collections/set"
	controller "github.com/juju/juju/controller"
	constraints "github.com/juju/juju/core/constraints"
	network "github.com/juju/juju/core/network"
	settings "github.com/juju/juju/core/settings"
	environs "github.com/juju/juju/environs"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	config "github.com/juju/juju/environs/config"
	envcontext "github.com/juju/juju/environs/envcontext"
	space "github.com/juju/juju/environs/space"
	state "github.com/juju/juju/state"
	txn "github.com/juju/mgo/v3/txn"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockBacking is a mock of Backing interface.
type MockBacking struct {
	ctrl     *gomock.Controller
	recorder *MockBackingMockRecorder
}

// MockBackingMockRecorder is the mock recorder for MockBacking.
type MockBackingMockRecorder struct {
	mock *MockBacking
}

// NewMockBacking creates a new mock instance.
func NewMockBacking(ctrl *gomock.Controller) *MockBacking {
	mock := &MockBacking{ctrl: ctrl}
	mock.recorder = &MockBackingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBacking) EXPECT() *MockBackingMockRecorder {
	return m.recorder
}

// AllConstraints mocks base method.
func (m *MockBacking) AllConstraints() ([]Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllConstraints")
	ret0, _ := ret[0].([]Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllConstraints indicates an expected call of AllConstraints.
func (mr *MockBackingMockRecorder) AllConstraints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllConstraints", reflect.TypeOf((*MockBacking)(nil).AllConstraints))
}

// AllEndpointBindings mocks base method.
func (m *MockBacking) AllEndpointBindings(arg0 network.SpaceInfos) (map[string]Bindings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllEndpointBindings", arg0)
	ret0, _ := ret[0].(map[string]Bindings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllEndpointBindings indicates an expected call of AllEndpointBindings.
func (mr *MockBackingMockRecorder) AllEndpointBindings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllEndpointBindings", reflect.TypeOf((*MockBacking)(nil).AllEndpointBindings), arg0)
}

// AllMachines mocks base method.
func (m *MockBacking) AllMachines() ([]Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachines")
	ret0, _ := ret[0].([]Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachines indicates an expected call of AllMachines.
func (mr *MockBackingMockRecorder) AllMachines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachines", reflect.TypeOf((*MockBacking)(nil).AllMachines))
}

// ApplyOperation mocks base method.
func (m *MockBacking) ApplyOperation(arg0 state.ModelOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockBackingMockRecorder) ApplyOperation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockBacking)(nil).ApplyOperation), arg0)
}

// CloudSpec mocks base method.
func (m *MockBacking) CloudSpec(arg0 context.Context) (cloudspec.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSpec", arg0)
	ret0, _ := ret[0].(cloudspec.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSpec indicates an expected call of CloudSpec.
func (mr *MockBackingMockRecorder) CloudSpec(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSpec", reflect.TypeOf((*MockBacking)(nil).CloudSpec), arg0)
}

// ConstraintsBySpaceName mocks base method.
func (m *MockBacking) ConstraintsBySpaceName(arg0 string) ([]Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsBySpaceName", arg0)
	ret0, _ := ret[0].([]Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsBySpaceName indicates an expected call of ConstraintsBySpaceName.
func (mr *MockBackingMockRecorder) ConstraintsBySpaceName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsBySpaceName", reflect.TypeOf((*MockBacking)(nil).ConstraintsBySpaceName), arg0)
}

// ControllerConfig mocks base method.
func (m *MockBacking) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockBackingMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockBacking)(nil).ControllerConfig))
}

// IsController mocks base method.
func (m *MockBacking) IsController() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsController")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsController indicates an expected call of IsController.
func (mr *MockBackingMockRecorder) IsController() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsController", reflect.TypeOf((*MockBacking)(nil).IsController))
}

// ModelConfig mocks base method.
func (m *MockBacking) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockBackingMockRecorder) ModelConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockBacking)(nil).ModelConfig), arg0)
}

// ModelTag mocks base method.
func (m *MockBacking) ModelTag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// ModelTag indicates an expected call of ModelTag.
func (mr *MockBackingMockRecorder) ModelTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTag", reflect.TypeOf((*MockBacking)(nil).ModelTag))
}

// MockBlockChecker is a mock of BlockChecker interface.
type MockBlockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCheckerMockRecorder
}

// MockBlockCheckerMockRecorder is the mock recorder for MockBlockChecker.
type MockBlockCheckerMockRecorder struct {
	mock *MockBlockChecker
}

// NewMockBlockChecker creates a new mock instance.
func NewMockBlockChecker(ctrl *gomock.Controller) *MockBlockChecker {
	mock := &MockBlockChecker{ctrl: ctrl}
	mock.recorder = &MockBlockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockChecker) EXPECT() *MockBlockCheckerMockRecorder {
	return m.recorder
}

// ChangeAllowed mocks base method.
func (m *MockBlockChecker) ChangeAllowed(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAllowed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAllowed indicates an expected call of ChangeAllowed.
func (mr *MockBlockCheckerMockRecorder) ChangeAllowed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAllowed", reflect.TypeOf((*MockBlockChecker)(nil).ChangeAllowed), arg0)
}

// RemoveAllowed mocks base method.
func (m *MockBlockChecker) RemoveAllowed(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllowed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllowed indicates an expected call of RemoveAllowed.
func (mr *MockBlockCheckerMockRecorder) RemoveAllowed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllowed", reflect.TypeOf((*MockBlockChecker)(nil).RemoveAllowed), arg0)
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// AllAddresses mocks base method.
func (m *MockMachine) AllAddresses() ([]Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllAddresses")
	ret0, _ := ret[0].([]Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllAddresses indicates an expected call of AllAddresses.
func (mr *MockMachineMockRecorder) AllAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllAddresses", reflect.TypeOf((*MockMachine)(nil).AllAddresses))
}

// AllSpaces mocks base method.
func (m *MockMachine) AllSpaces() (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSpaces")
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSpaces indicates an expected call of AllSpaces.
func (mr *MockMachineMockRecorder) AllSpaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSpaces", reflect.TypeOf((*MockMachine)(nil).AllSpaces))
}

// Units mocks base method.
func (m *MockMachine) Units() ([]Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Units")
	ret0, _ := ret[0].([]Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Units indicates an expected call of Units.
func (mr *MockMachineMockRecorder) Units() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Units", reflect.TypeOf((*MockMachine)(nil).Units))
}

// MockRenameSpace is a mock of RenameSpace interface.
type MockRenameSpace struct {
	ctrl     *gomock.Controller
	recorder *MockRenameSpaceMockRecorder
}

// MockRenameSpaceMockRecorder is the mock recorder for MockRenameSpace.
type MockRenameSpaceMockRecorder struct {
	mock *MockRenameSpace
}

// NewMockRenameSpace creates a new mock instance.
func NewMockRenameSpace(ctrl *gomock.Controller) *MockRenameSpace {
	mock := &MockRenameSpace{ctrl: ctrl}
	mock.recorder = &MockRenameSpaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenameSpace) EXPECT() *MockRenameSpaceMockRecorder {
	return m.recorder
}

// Id mocks base method.
func (m *MockRenameSpace) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockRenameSpaceMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockRenameSpace)(nil).Id))
}

// Name mocks base method.
func (m *MockRenameSpace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRenameSpaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRenameSpace)(nil).Name))
}

// Refresh mocks base method.
func (m *MockRenameSpace) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockRenameSpaceMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockRenameSpace)(nil).Refresh))
}

// RenameSpaceOps mocks base method.
func (m *MockRenameSpace) RenameSpaceOps(arg0 string) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameSpaceOps", arg0)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// RenameSpaceOps indicates an expected call of RenameSpaceOps.
func (mr *MockRenameSpaceMockRecorder) RenameSpaceOps(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSpaceOps", reflect.TypeOf((*MockRenameSpace)(nil).RenameSpaceOps), arg0)
}

// MockRenameSpaceState is a mock of RenameSpaceState interface.
type MockRenameSpaceState struct {
	ctrl     *gomock.Controller
	recorder *MockRenameSpaceStateMockRecorder
}

// MockRenameSpaceStateMockRecorder is the mock recorder for MockRenameSpaceState.
type MockRenameSpaceStateMockRecorder struct {
	mock *MockRenameSpaceState
}

// NewMockRenameSpaceState creates a new mock instance.
func NewMockRenameSpaceState(ctrl *gomock.Controller) *MockRenameSpaceState {
	mock := &MockRenameSpaceState{ctrl: ctrl}
	mock.recorder = &MockRenameSpaceStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenameSpaceState) EXPECT() *MockRenameSpaceStateMockRecorder {
	return m.recorder
}

// ConstraintsBySpaceName mocks base method.
func (m *MockRenameSpaceState) ConstraintsBySpaceName(arg0 string) ([]Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsBySpaceName", arg0)
	ret0, _ := ret[0].([]Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsBySpaceName indicates an expected call of ConstraintsBySpaceName.
func (mr *MockRenameSpaceStateMockRecorder) ConstraintsBySpaceName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsBySpaceName", reflect.TypeOf((*MockRenameSpaceState)(nil).ConstraintsBySpaceName), arg0)
}

// ControllerConfig mocks base method.
func (m *MockRenameSpaceState) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockRenameSpaceStateMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockRenameSpaceState)(nil).ControllerConfig))
}

// MockSettings is a mock of Settings interface.
type MockSettings struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsMockRecorder
}

// MockSettingsMockRecorder is the mock recorder for MockSettings.
type MockSettingsMockRecorder struct {
	mock *MockSettings
}

// NewMockSettings creates a new mock instance.
func NewMockSettings(ctrl *gomock.Controller) *MockSettings {
	mock := &MockSettings{ctrl: ctrl}
	mock.recorder = &MockSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettings) EXPECT() *MockSettingsMockRecorder {
	return m.recorder
}

// DeltaOps mocks base method.
func (m *MockSettings) DeltaOps(arg0 string, arg1 settings.ItemChanges) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeltaOps", arg0, arg1)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeltaOps indicates an expected call of DeltaOps.
func (mr *MockSettingsMockRecorder) DeltaOps(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeltaOps", reflect.TypeOf((*MockSettings)(nil).DeltaOps), arg0, arg1)
}

// MockOpFactory is a mock of OpFactory interface.
type MockOpFactory struct {
	ctrl     *gomock.Controller
	recorder *MockOpFactoryMockRecorder
}

// MockOpFactoryMockRecorder is the mock recorder for MockOpFactory.
type MockOpFactoryMockRecorder struct {
	mock *MockOpFactory
}

// NewMockOpFactory creates a new mock instance.
func NewMockOpFactory(ctrl *gomock.Controller) *MockOpFactory {
	mock := &MockOpFactory{ctrl: ctrl}
	mock.recorder = &MockOpFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpFactory) EXPECT() *MockOpFactoryMockRecorder {
	return m.recorder
}

// NewRenameSpaceOp mocks base method.
func (m *MockOpFactory) NewRenameSpaceOp(arg0, arg1 string) (state.ModelOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRenameSpaceOp", arg0, arg1)
	ret0, _ := ret[0].(state.ModelOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRenameSpaceOp indicates an expected call of NewRenameSpaceOp.
func (mr *MockOpFactoryMockRecorder) NewRenameSpaceOp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRenameSpaceOp", reflect.TypeOf((*MockOpFactory)(nil).NewRenameSpaceOp), arg0, arg1)
}

// MockConstraints is a mock of Constraints interface.
type MockConstraints struct {
	ctrl     *gomock.Controller
	recorder *MockConstraintsMockRecorder
}

// MockConstraintsMockRecorder is the mock recorder for MockConstraints.
type MockConstraintsMockRecorder struct {
	mock *MockConstraints
}

// NewMockConstraints creates a new mock instance.
func NewMockConstraints(ctrl *gomock.Controller) *MockConstraints {
	mock := &MockConstraints{ctrl: ctrl}
	mock.recorder = &MockConstraintsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConstraints) EXPECT() *MockConstraintsMockRecorder {
	return m.recorder
}

// ChangeSpaceNameOps mocks base method.
func (m *MockConstraints) ChangeSpaceNameOps(arg0, arg1 string) []txn.Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSpaceNameOps", arg0, arg1)
	ret0, _ := ret[0].([]txn.Op)
	return ret0
}

// ChangeSpaceNameOps indicates an expected call of ChangeSpaceNameOps.
func (mr *MockConstraintsMockRecorder) ChangeSpaceNameOps(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSpaceNameOps", reflect.TypeOf((*MockConstraints)(nil).ChangeSpaceNameOps), arg0, arg1)
}

// ID mocks base method.
func (m *MockConstraints) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockConstraintsMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockConstraints)(nil).ID))
}

// Value mocks base method.
func (m *MockConstraints) Value() constraints.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(constraints.Value)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockConstraintsMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockConstraints)(nil).Value))
}

// MockAddress is a mock of Address interface.
type MockAddress struct {
	ctrl     *gomock.Controller
	recorder *MockAddressMockRecorder
}

// MockAddressMockRecorder is the mock recorder for MockAddress.
type MockAddressMockRecorder struct {
	mock *MockAddress
}

// NewMockAddress creates a new mock instance.
func NewMockAddress(ctrl *gomock.Controller) *MockAddress {
	mock := &MockAddress{ctrl: ctrl}
	mock.recorder = &MockAddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddress) EXPECT() *MockAddressMockRecorder {
	return m.recorder
}

// ConfigMethod mocks base method.
func (m *MockAddress) ConfigMethod() network.AddressConfigType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMethod")
	ret0, _ := ret[0].(network.AddressConfigType)
	return ret0
}

// ConfigMethod indicates an expected call of ConfigMethod.
func (mr *MockAddressMockRecorder) ConfigMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMethod", reflect.TypeOf((*MockAddress)(nil).ConfigMethod))
}

// SubnetCIDR mocks base method.
func (m *MockAddress) SubnetCIDR() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetCIDR")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubnetCIDR indicates an expected call of SubnetCIDR.
func (mr *MockAddressMockRecorder) SubnetCIDR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetCIDR", reflect.TypeOf((*MockAddress)(nil).SubnetCIDR))
}

// Value mocks base method.
func (m *MockAddress) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockAddressMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockAddress)(nil).Value))
}

// MockUnit is a mock of Unit interface.
type MockUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMockRecorder
}

// MockUnitMockRecorder is the mock recorder for MockUnit.
type MockUnitMockRecorder struct {
	mock *MockUnit
}

// NewMockUnit creates a new mock instance.
func NewMockUnit(ctrl *gomock.Controller) *MockUnit {
	mock := &MockUnit{ctrl: ctrl}
	mock.recorder = &MockUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnit) EXPECT() *MockUnitMockRecorder {
	return m.recorder
}

// ApplicationName mocks base method.
func (m *MockUnit) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockUnitMockRecorder) ApplicationName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockUnit)(nil).ApplicationName))
}

// Name mocks base method.
func (m *MockUnit) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockUnitMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUnit)(nil).Name))
}

// MockReloadSpaces is a mock of ReloadSpaces interface.
type MockReloadSpaces struct {
	ctrl     *gomock.Controller
	recorder *MockReloadSpacesMockRecorder
}

// MockReloadSpacesMockRecorder is the mock recorder for MockReloadSpaces.
type MockReloadSpacesMockRecorder struct {
	mock *MockReloadSpaces
}

// NewMockReloadSpaces creates a new mock instance.
func NewMockReloadSpaces(ctrl *gomock.Controller) *MockReloadSpaces {
	mock := &MockReloadSpaces{ctrl: ctrl}
	mock.recorder = &MockReloadSpacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReloadSpaces) EXPECT() *MockReloadSpacesMockRecorder {
	return m.recorder
}

// ReloadSpaces mocks base method.
func (m *MockReloadSpaces) ReloadSpaces(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockReloadSpacesMockRecorder) ReloadSpaces(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockReloadSpaces)(nil).ReloadSpaces), arg0)
}

// MockReloadSpacesState is a mock of ReloadSpacesState interface.
type MockReloadSpacesState struct {
	ctrl     *gomock.Controller
	recorder *MockReloadSpacesStateMockRecorder
}

// MockReloadSpacesStateMockRecorder is the mock recorder for MockReloadSpacesState.
type MockReloadSpacesStateMockRecorder struct {
	mock *MockReloadSpacesState
}

// NewMockReloadSpacesState creates a new mock instance.
func NewMockReloadSpacesState(ctrl *gomock.Controller) *MockReloadSpacesState {
	mock := &MockReloadSpacesState{ctrl: ctrl}
	mock.recorder = &MockReloadSpacesStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReloadSpacesState) EXPECT() *MockReloadSpacesStateMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockReloadSpacesState) AddSpace(arg0 string, arg1 network.Id, arg2 []string) (network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockReloadSpacesStateMockRecorder) AddSpace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockReloadSpacesState)(nil).AddSpace), arg0, arg1, arg2)
}

// AllEndpointBindingsSpaceNames mocks base method.
func (m *MockReloadSpacesState) AllEndpointBindingsSpaceNames(arg0 network.SpaceInfos) (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllEndpointBindingsSpaceNames", arg0)
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllEndpointBindingsSpaceNames indicates an expected call of AllEndpointBindingsSpaceNames.
func (mr *MockReloadSpacesStateMockRecorder) AllEndpointBindingsSpaceNames(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllEndpointBindingsSpaceNames", reflect.TypeOf((*MockReloadSpacesState)(nil).AllEndpointBindingsSpaceNames), arg0)
}

// AllSpaces mocks base method.
func (m *MockReloadSpacesState) AllSpaces() ([]network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSpaces")
	ret0, _ := ret[0].([]network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSpaces indicates an expected call of AllSpaces.
func (mr *MockReloadSpacesStateMockRecorder) AllSpaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSpaces", reflect.TypeOf((*MockReloadSpacesState)(nil).AllSpaces))
}

// ConstraintsBySpaceName mocks base method.
func (m *MockReloadSpacesState) ConstraintsBySpaceName(arg0 string) ([]space.Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsBySpaceName", arg0)
	ret0, _ := ret[0].([]space.Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsBySpaceName indicates an expected call of ConstraintsBySpaceName.
func (mr *MockReloadSpacesStateMockRecorder) ConstraintsBySpaceName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsBySpaceName", reflect.TypeOf((*MockReloadSpacesState)(nil).ConstraintsBySpaceName), arg0)
}

// Remove mocks base method.
func (m *MockReloadSpacesState) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockReloadSpacesStateMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockReloadSpacesState)(nil).Remove), arg0)
}

// SaveProviderSubnets mocks base method.
func (m *MockReloadSpacesState) SaveProviderSubnets(arg0 []network.SubnetInfo, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProviderSubnets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProviderSubnets indicates an expected call of SaveProviderSubnets.
func (mr *MockReloadSpacesStateMockRecorder) SaveProviderSubnets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProviderSubnets", reflect.TypeOf((*MockReloadSpacesState)(nil).SaveProviderSubnets), arg0, arg1)
}

// MockReloadSpacesEnviron is a mock of ReloadSpacesEnviron interface.
type MockReloadSpacesEnviron struct {
	ctrl     *gomock.Controller
	recorder *MockReloadSpacesEnvironMockRecorder
}

// MockReloadSpacesEnvironMockRecorder is the mock recorder for MockReloadSpacesEnviron.
type MockReloadSpacesEnvironMockRecorder struct {
	mock *MockReloadSpacesEnviron
}

// NewMockReloadSpacesEnviron creates a new mock instance.
func NewMockReloadSpacesEnviron(ctrl *gomock.Controller) *MockReloadSpacesEnviron {
	mock := &MockReloadSpacesEnviron{ctrl: ctrl}
	mock.recorder = &MockReloadSpacesEnvironMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReloadSpacesEnviron) EXPECT() *MockReloadSpacesEnvironMockRecorder {
	return m.recorder
}

// CloudSpec mocks base method.
func (m *MockReloadSpacesEnviron) CloudSpec(arg0 context.Context) (cloudspec.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSpec", arg0)
	ret0, _ := ret[0].(cloudspec.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSpec indicates an expected call of CloudSpec.
func (mr *MockReloadSpacesEnvironMockRecorder) CloudSpec(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSpec", reflect.TypeOf((*MockReloadSpacesEnviron)(nil).CloudSpec), arg0)
}

// GetEnviron mocks base method.
func (m *MockReloadSpacesEnviron) GetEnviron(arg0 context.Context, arg1 environs.EnvironConfigGetter, arg2 environs.NewEnvironFunc) (environs.Environ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnviron", arg0, arg1, arg2)
	ret0, _ := ret[0].(environs.Environ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnviron indicates an expected call of GetEnviron.
func (mr *MockReloadSpacesEnvironMockRecorder) GetEnviron(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnviron", reflect.TypeOf((*MockReloadSpacesEnviron)(nil).GetEnviron), arg0, arg1, arg2)
}

// ModelConfig mocks base method.
func (m *MockReloadSpacesEnviron) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockReloadSpacesEnvironMockRecorder) ModelConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockReloadSpacesEnviron)(nil).ModelConfig), arg0)
}

// MockEnvironSpaces is a mock of EnvironSpaces interface.
type MockEnvironSpaces struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironSpacesMockRecorder
}

// MockEnvironSpacesMockRecorder is the mock recorder for MockEnvironSpaces.
type MockEnvironSpacesMockRecorder struct {
	mock *MockEnvironSpaces
}

// NewMockEnvironSpaces creates a new mock instance.
func NewMockEnvironSpaces(ctrl *gomock.Controller) *MockEnvironSpaces {
	mock := &MockEnvironSpaces{ctrl: ctrl}
	mock.recorder = &MockEnvironSpacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironSpaces) EXPECT() *MockEnvironSpacesMockRecorder {
	return m.recorder
}

// ReloadSpaces mocks base method.
func (m *MockEnvironSpaces) ReloadSpaces(arg0 envcontext.ProviderCallContext, arg1 ReloadSpacesState, arg2 environs.BootstrapEnviron) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockEnvironSpacesMockRecorder) ReloadSpaces(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockEnvironSpaces)(nil).ReloadSpaces), arg0, arg1, arg2)
}

// MockAuthorizerState is a mock of AuthorizerState interface.
type MockAuthorizerState struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerStateMockRecorder
}

// MockAuthorizerStateMockRecorder is the mock recorder for MockAuthorizerState.
type MockAuthorizerStateMockRecorder struct {
	mock *MockAuthorizerState
}

// NewMockAuthorizerState creates a new mock instance.
func NewMockAuthorizerState(ctrl *gomock.Controller) *MockAuthorizerState {
	mock := &MockAuthorizerState{ctrl: ctrl}
	mock.recorder = &MockAuthorizerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizerState) EXPECT() *MockAuthorizerStateMockRecorder {
	return m.recorder
}

// ModelTag mocks base method.
func (m *MockAuthorizerState) ModelTag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// ModelTag indicates an expected call of ModelTag.
func (mr *MockAuthorizerStateMockRecorder) ModelTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTag", reflect.TypeOf((*MockAuthorizerState)(nil).ModelTag))
}

// MockBindings is a mock of Bindings interface.
type MockBindings struct {
	ctrl     *gomock.Controller
	recorder *MockBindingsMockRecorder
}

// MockBindingsMockRecorder is the mock recorder for MockBindings.
type MockBindingsMockRecorder struct {
	mock *MockBindings
}

// NewMockBindings creates a new mock instance.
func NewMockBindings(ctrl *gomock.Controller) *MockBindings {
	mock := &MockBindings{ctrl: ctrl}
	mock.recorder = &MockBindingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBindings) EXPECT() *MockBindingsMockRecorder {
	return m.recorder
}

// Map mocks base method.
func (m *MockBindings) Map() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockBindingsMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockBindings)(nil).Map))
}

// MockSpaceService is a mock of SpaceService interface.
type MockSpaceService struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceServiceMockRecorder
}

// MockSpaceServiceMockRecorder is the mock recorder for MockSpaceService.
type MockSpaceServiceMockRecorder struct {
	mock *MockSpaceService
}

// NewMockSpaceService creates a new mock instance.
func NewMockSpaceService(ctrl *gomock.Controller) *MockSpaceService {
	mock := &MockSpaceService{ctrl: ctrl}
	mock.recorder = &MockSpaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceService) EXPECT() *MockSpaceServiceMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockSpaceService) AddSpace(arg0 context.Context, arg1 string, arg2 network.Id, arg3 []string) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockSpaceServiceMockRecorder) AddSpace(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockSpaceService)(nil).AddSpace), arg0, arg1, arg2, arg3)
}

// GetAllSpaces mocks base method.
func (m *MockSpaceService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockSpaceServiceMockRecorder) GetAllSpaces(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockSpaceService)(nil).GetAllSpaces), arg0)
}

// Remove mocks base method.
func (m *MockSpaceService) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSpaceServiceMockRecorder) Remove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSpaceService)(nil).Remove), arg0, arg1)
}

// Space mocks base method.
func (m *MockSpaceService) Space(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Space", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Space indicates an expected call of Space.
func (mr *MockSpaceServiceMockRecorder) Space(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Space", reflect.TypeOf((*MockSpaceService)(nil).Space), arg0, arg1)
}

// SpaceByName mocks base method.
func (m *MockSpaceService) SpaceByName(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByName indicates an expected call of SpaceByName.
func (mr *MockSpaceServiceMockRecorder) SpaceByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByName", reflect.TypeOf((*MockSpaceService)(nil).SpaceByName), arg0, arg1)
}

// UpdateSpace mocks base method.
func (m *MockSpaceService) UpdateSpace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpace indicates an expected call of UpdateSpace.
func (mr *MockSpaceServiceMockRecorder) UpdateSpace(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpace", reflect.TypeOf((*MockSpaceService)(nil).UpdateSpace), arg0, arg1, arg2)
}

// MockSubnetService is a mock of SubnetService interface.
type MockSubnetService struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetServiceMockRecorder
}

// MockSubnetServiceMockRecorder is the mock recorder for MockSubnetService.
type MockSubnetServiceMockRecorder struct {
	mock *MockSubnetService
}

// NewMockSubnetService creates a new mock instance.
func NewMockSubnetService(ctrl *gomock.Controller) *MockSubnetService {
	mock := &MockSubnetService{ctrl: ctrl}
	mock.recorder = &MockSubnetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetService) EXPECT() *MockSubnetServiceMockRecorder {
	return m.recorder
}

// GetAllSubnets mocks base method.
func (m *MockSubnetService) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockSubnetServiceMockRecorder) GetAllSubnets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockSubnetService)(nil).GetAllSubnets), arg0)
}

// Subnet mocks base method.
func (m *MockSubnetService) Subnet(arg0 context.Context, arg1 string) (*network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnet", arg0, arg1)
	ret0, _ := ret[0].(*network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnet indicates an expected call of Subnet.
func (mr *MockSubnetServiceMockRecorder) Subnet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnet", reflect.TypeOf((*MockSubnetService)(nil).Subnet), arg0, arg1)
}

// SubnetsByCIDR mocks base method.
func (m *MockSubnetService) SubnetsByCIDR(arg0 context.Context, arg1 ...string) ([]network.SubnetInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubnetsByCIDR", varargs...)
	ret0, _ := ret[0].([]network.SubnetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetsByCIDR indicates an expected call of SubnetsByCIDR.
func (mr *MockSubnetServiceMockRecorder) SubnetsByCIDR(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetsByCIDR", reflect.TypeOf((*MockSubnetService)(nil).SubnetsByCIDR), varargs...)
}

// UpdateSubnet mocks base method.
func (m *MockSubnetService) UpdateSubnet(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubnet indicates an expected call of UpdateSubnet.
func (mr *MockSubnetServiceMockRecorder) UpdateSubnet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnet", reflect.TypeOf((*MockSubnetService)(nil).UpdateSubnet), arg0, arg1, arg2)
}
