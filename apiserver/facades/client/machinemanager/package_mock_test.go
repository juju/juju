// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/machinemanager (interfaces: Leadership,Authorizer,ControllerBackend,InstanceConfigBackend,Backend,StorageInterface,Pool,Machine,CharmhubClient,ControllerConfigService,MachineService,ApplicationService,NetworkService,KeyUpdaterService,ModelConfigService,BlockCommandService,AgentBinaryService,AgentPasswordService,ControllerNodeService,StatusService)
//
// Generated by this command:
//
//	mockgen -typed -package machinemanager -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/machinemanager Leadership,Authorizer,ControllerBackend,InstanceConfigBackend,Backend,StorageInterface,Pool,Machine,CharmhubClient,ControllerConfigService,MachineService,ApplicationService,NetworkService,KeyUpdaterService,ModelConfigService,BlockCommandService,AgentBinaryService,AgentPasswordService,ControllerNodeService,StatusService
//

// Package machinemanager is a generated GoMock package.
package machinemanager

import (
	context "context"
	reflect "reflect"
	time "time"

	storagecommon "github.com/juju/juju/apiserver/common/storagecommon"
	controller "github.com/juju/juju/controller"
	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/core/machine"
	network "github.com/juju/juju/core/network"
	objectstore "github.com/juju/juju/core/objectstore"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	service "github.com/juju/juju/domain/agentbinary/service"
	blockcommand "github.com/juju/juju/domain/blockcommand"
	environs "github.com/juju/juju/environs"
	config "github.com/juju/juju/environs/config"
	charmhub "github.com/juju/juju/internal/charmhub"
	transport "github.com/juju/juju/internal/charmhub/transport"
	params "github.com/juju/juju/rpc/params"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockLeadership is a mock of Leadership interface.
type MockLeadership struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipMockRecorder
}

// MockLeadershipMockRecorder is the mock recorder for MockLeadership.
type MockLeadershipMockRecorder struct {
	mock *MockLeadership
}

// NewMockLeadership creates a new mock instance.
func NewMockLeadership(ctrl *gomock.Controller) *MockLeadership {
	mock := &MockLeadership{ctrl: ctrl}
	mock.recorder = &MockLeadershipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadership) EXPECT() *MockLeadershipMockRecorder {
	return m.recorder
}

// GetMachineApplicationNames mocks base method.
func (m *MockLeadership) GetMachineApplicationNames(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineApplicationNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineApplicationNames indicates an expected call of GetMachineApplicationNames.
func (mr *MockLeadershipMockRecorder) GetMachineApplicationNames(arg0, arg1 any) *MockLeadershipGetMachineApplicationNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineApplicationNames", reflect.TypeOf((*MockLeadership)(nil).GetMachineApplicationNames), arg0, arg1)
	return &MockLeadershipGetMachineApplicationNamesCall{Call: call}
}

// MockLeadershipGetMachineApplicationNamesCall wrap *gomock.Call
type MockLeadershipGetMachineApplicationNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipGetMachineApplicationNamesCall) Return(arg0 []string, arg1 error) *MockLeadershipGetMachineApplicationNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipGetMachineApplicationNamesCall) Do(f func(context.Context, string) ([]string, error)) *MockLeadershipGetMachineApplicationNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipGetMachineApplicationNamesCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockLeadershipGetMachineApplicationNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnpinApplicationLeadersByName mocks base method.
func (m *MockLeadership) UnpinApplicationLeadersByName(arg0 context.Context, arg1 names.Tag, arg2 []string) (params.PinApplicationsResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinApplicationLeadersByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(params.PinApplicationsResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpinApplicationLeadersByName indicates an expected call of UnpinApplicationLeadersByName.
func (mr *MockLeadershipMockRecorder) UnpinApplicationLeadersByName(arg0, arg1, arg2 any) *MockLeadershipUnpinApplicationLeadersByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinApplicationLeadersByName", reflect.TypeOf((*MockLeadership)(nil).UnpinApplicationLeadersByName), arg0, arg1, arg2)
	return &MockLeadershipUnpinApplicationLeadersByNameCall{Call: call}
}

// MockLeadershipUnpinApplicationLeadersByNameCall wrap *gomock.Call
type MockLeadershipUnpinApplicationLeadersByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipUnpinApplicationLeadersByNameCall) Return(arg0 params.PinApplicationsResults, arg1 error) *MockLeadershipUnpinApplicationLeadersByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipUnpinApplicationLeadersByNameCall) Do(f func(context.Context, names.Tag, []string) (params.PinApplicationsResults, error)) *MockLeadershipUnpinApplicationLeadersByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipUnpinApplicationLeadersByNameCall) DoAndReturn(f func(context.Context, names.Tag, []string) (params.PinApplicationsResults, error)) *MockLeadershipUnpinApplicationLeadersByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// AuthClient mocks base method.
func (m *MockAuthorizer) AuthClient() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthClient")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuthClient indicates an expected call of AuthClient.
func (mr *MockAuthorizerMockRecorder) AuthClient() *MockAuthorizerAuthClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthClient", reflect.TypeOf((*MockAuthorizer)(nil).AuthClient))
	return &MockAuthorizerAuthClientCall{Call: call}
}

// MockAuthorizerAuthClientCall wrap *gomock.Call
type MockAuthorizerAuthClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorizerAuthClientCall) Return(arg0 bool) *MockAuthorizerAuthClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorizerAuthClientCall) Do(f func() bool) *MockAuthorizerAuthClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorizerAuthClientCall) DoAndReturn(f func() bool) *MockAuthorizerAuthClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanRead mocks base method.
func (m *MockAuthorizer) CanRead(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanRead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanRead indicates an expected call of CanRead.
func (mr *MockAuthorizerMockRecorder) CanRead(arg0 any) *MockAuthorizerCanReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanRead", reflect.TypeOf((*MockAuthorizer)(nil).CanRead), arg0)
	return &MockAuthorizerCanReadCall{Call: call}
}

// MockAuthorizerCanReadCall wrap *gomock.Call
type MockAuthorizerCanReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorizerCanReadCall) Return(arg0 error) *MockAuthorizerCanReadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorizerCanReadCall) Do(f func(context.Context) error) *MockAuthorizerCanReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorizerCanReadCall) DoAndReturn(f func(context.Context) error) *MockAuthorizerCanReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CanWrite mocks base method.
func (m *MockAuthorizer) CanWrite(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanWrite", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanWrite indicates an expected call of CanWrite.
func (mr *MockAuthorizerMockRecorder) CanWrite(arg0 any) *MockAuthorizerCanWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanWrite", reflect.TypeOf((*MockAuthorizer)(nil).CanWrite), arg0)
	return &MockAuthorizerCanWriteCall{Call: call}
}

// MockAuthorizerCanWriteCall wrap *gomock.Call
type MockAuthorizerCanWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorizerCanWriteCall) Return(arg0 error) *MockAuthorizerCanWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorizerCanWriteCall) Do(f func(context.Context) error) *MockAuthorizerCanWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorizerCanWriteCall) DoAndReturn(f func(context.Context) error) *MockAuthorizerCanWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerBackend is a mock of ControllerBackend interface.
type MockControllerBackend struct {
	ctrl     *gomock.Controller
	recorder *MockControllerBackendMockRecorder
}

// MockControllerBackendMockRecorder is the mock recorder for MockControllerBackend.
type MockControllerBackendMockRecorder struct {
	mock *MockControllerBackend
}

// NewMockControllerBackend creates a new mock instance.
func NewMockControllerBackend(ctrl *gomock.Controller) *MockControllerBackend {
	mock := &MockControllerBackend{ctrl: ctrl}
	mock.recorder = &MockControllerBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerBackend) EXPECT() *MockControllerBackendMockRecorder {
	return m.recorder
}

// ControllerTag mocks base method.
func (m *MockControllerBackend) ControllerTag() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTag")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// ControllerTag indicates an expected call of ControllerTag.
func (mr *MockControllerBackendMockRecorder) ControllerTag() *MockControllerBackendControllerTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTag", reflect.TypeOf((*MockControllerBackend)(nil).ControllerTag))
	return &MockControllerBackendControllerTagCall{Call: call}
}

// MockControllerBackendControllerTagCall wrap *gomock.Call
type MockControllerBackendControllerTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerBackendControllerTagCall) Return(arg0 names.ControllerTag) *MockControllerBackendControllerTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerBackendControllerTagCall) Do(f func() names.ControllerTag) *MockControllerBackendControllerTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerBackendControllerTagCall) DoAndReturn(f func() names.ControllerTag) *MockControllerBackendControllerTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstanceConfigBackend is a mock of InstanceConfigBackend interface.
type MockInstanceConfigBackend struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceConfigBackendMockRecorder
}

// MockInstanceConfigBackendMockRecorder is the mock recorder for MockInstanceConfigBackend.
type MockInstanceConfigBackendMockRecorder struct {
	mock *MockInstanceConfigBackend
}

// NewMockInstanceConfigBackend creates a new mock instance.
func NewMockInstanceConfigBackend(ctrl *gomock.Controller) *MockInstanceConfigBackend {
	mock := &MockInstanceConfigBackend{ctrl: ctrl}
	mock.recorder = &MockInstanceConfigBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceConfigBackend) EXPECT() *MockInstanceConfigBackendMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockInstanceConfigBackend) Machine(arg0 string) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockInstanceConfigBackendMockRecorder) Machine(arg0 any) *MockInstanceConfigBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockInstanceConfigBackend)(nil).Machine), arg0)
	return &MockInstanceConfigBackendMachineCall{Call: call}
}

// MockInstanceConfigBackendMachineCall wrap *gomock.Call
type MockInstanceConfigBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceConfigBackendMachineCall) Return(arg0 Machine, arg1 error) *MockInstanceConfigBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceConfigBackendMachineCall) Do(f func(string) (Machine, error)) *MockInstanceConfigBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceConfigBackendMachineCall) DoAndReturn(f func(string) (Machine, error)) *MockInstanceConfigBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ToolsStorage mocks base method.
func (m *MockInstanceConfigBackend) ToolsStorage(arg0 objectstore.ObjectStore) (binarystorage.StorageCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsStorage", arg0)
	ret0, _ := ret[0].(binarystorage.StorageCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsStorage indicates an expected call of ToolsStorage.
func (mr *MockInstanceConfigBackendMockRecorder) ToolsStorage(arg0 any) *MockInstanceConfigBackendToolsStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsStorage", reflect.TypeOf((*MockInstanceConfigBackend)(nil).ToolsStorage), arg0)
	return &MockInstanceConfigBackendToolsStorageCall{Call: call}
}

// MockInstanceConfigBackendToolsStorageCall wrap *gomock.Call
type MockInstanceConfigBackendToolsStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceConfigBackendToolsStorageCall) Return(arg0 binarystorage.StorageCloser, arg1 error) *MockInstanceConfigBackendToolsStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceConfigBackendToolsStorageCall) Do(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockInstanceConfigBackendToolsStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceConfigBackendToolsStorageCall) DoAndReturn(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockInstanceConfigBackendToolsStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AddMachineInsideMachine mocks base method.
func (m *MockBackend) AddMachineInsideMachine(arg0 state.MachineTemplate, arg1 string, arg2 instance.ContainerType) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachineInsideMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMachineInsideMachine indicates an expected call of AddMachineInsideMachine.
func (mr *MockBackendMockRecorder) AddMachineInsideMachine(arg0, arg1, arg2 any) *MockBackendAddMachineInsideMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachineInsideMachine", reflect.TypeOf((*MockBackend)(nil).AddMachineInsideMachine), arg0, arg1, arg2)
	return &MockBackendAddMachineInsideMachineCall{Call: call}
}

// MockBackendAddMachineInsideMachineCall wrap *gomock.Call
type MockBackendAddMachineInsideMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddMachineInsideMachineCall) Return(arg0 Machine, arg1 error) *MockBackendAddMachineInsideMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddMachineInsideMachineCall) Do(f func(state.MachineTemplate, string, instance.ContainerType) (Machine, error)) *MockBackendAddMachineInsideMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddMachineInsideMachineCall) DoAndReturn(f func(state.MachineTemplate, string, instance.ContainerType) (Machine, error)) *MockBackendAddMachineInsideMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddMachineInsideNewMachine mocks base method.
func (m *MockBackend) AddMachineInsideNewMachine(arg0, arg1 state.MachineTemplate, arg2 instance.ContainerType) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachineInsideNewMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMachineInsideNewMachine indicates an expected call of AddMachineInsideNewMachine.
func (mr *MockBackendMockRecorder) AddMachineInsideNewMachine(arg0, arg1, arg2 any) *MockBackendAddMachineInsideNewMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachineInsideNewMachine", reflect.TypeOf((*MockBackend)(nil).AddMachineInsideNewMachine), arg0, arg1, arg2)
	return &MockBackendAddMachineInsideNewMachineCall{Call: call}
}

// MockBackendAddMachineInsideNewMachineCall wrap *gomock.Call
type MockBackendAddMachineInsideNewMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddMachineInsideNewMachineCall) Return(arg0 Machine, arg1 error) *MockBackendAddMachineInsideNewMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddMachineInsideNewMachineCall) Do(f func(state.MachineTemplate, state.MachineTemplate, instance.ContainerType) (Machine, error)) *MockBackendAddMachineInsideNewMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddMachineInsideNewMachineCall) DoAndReturn(f func(state.MachineTemplate, state.MachineTemplate, instance.ContainerType) (Machine, error)) *MockBackendAddMachineInsideNewMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddOneMachine mocks base method.
func (m *MockBackend) AddOneMachine(arg0 state.MachineTemplate) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOneMachine", arg0)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOneMachine indicates an expected call of AddOneMachine.
func (mr *MockBackendMockRecorder) AddOneMachine(arg0 any) *MockBackendAddOneMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOneMachine", reflect.TypeOf((*MockBackend)(nil).AddOneMachine), arg0)
	return &MockBackendAddOneMachineCall{Call: call}
}

// MockBackendAddOneMachineCall wrap *gomock.Call
type MockBackendAddOneMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddOneMachineCall) Return(arg0 Machine, arg1 error) *MockBackendAddOneMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddOneMachineCall) Do(f func(state.MachineTemplate) (Machine, error)) *MockBackendAddOneMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddOneMachineCall) DoAndReturn(f func(state.MachineTemplate) (Machine, error)) *MockBackendAddOneMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllMachines mocks base method.
func (m *MockBackend) AllMachines() ([]Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachines")
	ret0, _ := ret[0].([]Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachines indicates an expected call of AllMachines.
func (mr *MockBackendMockRecorder) AllMachines() *MockBackendAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachines", reflect.TypeOf((*MockBackend)(nil).AllMachines))
	return &MockBackendAllMachinesCall{Call: call}
}

// MockBackendAllMachinesCall wrap *gomock.Call
type MockBackendAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllMachinesCall) Return(arg0 []Machine, arg1 error) *MockBackendAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllMachinesCall) Do(f func() ([]Machine, error)) *MockBackendAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllMachinesCall) DoAndReturn(f func() ([]Machine, error)) *MockBackendAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockBackend) Machine(arg0 string) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockBackendMockRecorder) Machine(arg0 any) *MockBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockBackend)(nil).Machine), arg0)
	return &MockBackendMachineCall{Call: call}
}

// MockBackendMachineCall wrap *gomock.Call
type MockBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendMachineCall) Return(arg0 Machine, arg1 error) *MockBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendMachineCall) Do(f func(string) (Machine, error)) *MockBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendMachineCall) DoAndReturn(f func(string) (Machine, error)) *MockBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ToolsStorage mocks base method.
func (m *MockBackend) ToolsStorage(arg0 objectstore.ObjectStore) (binarystorage.StorageCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsStorage", arg0)
	ret0, _ := ret[0].(binarystorage.StorageCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsStorage indicates an expected call of ToolsStorage.
func (mr *MockBackendMockRecorder) ToolsStorage(arg0 any) *MockBackendToolsStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsStorage", reflect.TypeOf((*MockBackend)(nil).ToolsStorage), arg0)
	return &MockBackendToolsStorageCall{Call: call}
}

// MockBackendToolsStorageCall wrap *gomock.Call
type MockBackendToolsStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendToolsStorageCall) Return(arg0 binarystorage.StorageCloser, arg1 error) *MockBackendToolsStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendToolsStorageCall) Do(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockBackendToolsStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendToolsStorageCall) DoAndReturn(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockBackendToolsStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageInterface is a mock of StorageInterface interface.
type MockStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInterfaceMockRecorder
}

// MockStorageInterfaceMockRecorder is the mock recorder for MockStorageInterface.
type MockStorageInterfaceMockRecorder struct {
	mock *MockStorageInterface
}

// NewMockStorageInterface creates a new mock instance.
func NewMockStorageInterface(ctrl *gomock.Controller) *MockStorageInterface {
	mock := &MockStorageInterface{ctrl: ctrl}
	mock.recorder = &MockStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInterface) EXPECT() *MockStorageInterfaceMockRecorder {
	return m.recorder
}

// FilesystemAccess mocks base method.
func (m *MockStorageInterface) FilesystemAccess() storagecommon.FilesystemAccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesystemAccess")
	ret0, _ := ret[0].(storagecommon.FilesystemAccess)
	return ret0
}

// FilesystemAccess indicates an expected call of FilesystemAccess.
func (mr *MockStorageInterfaceMockRecorder) FilesystemAccess() *MockStorageInterfaceFilesystemAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesystemAccess", reflect.TypeOf((*MockStorageInterface)(nil).FilesystemAccess))
	return &MockStorageInterfaceFilesystemAccessCall{Call: call}
}

// MockStorageInterfaceFilesystemAccessCall wrap *gomock.Call
type MockStorageInterfaceFilesystemAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInterfaceFilesystemAccessCall) Return(arg0 storagecommon.FilesystemAccess) *MockStorageInterfaceFilesystemAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInterfaceFilesystemAccessCall) Do(f func() storagecommon.FilesystemAccess) *MockStorageInterfaceFilesystemAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInterfaceFilesystemAccessCall) DoAndReturn(f func() storagecommon.FilesystemAccess) *MockStorageInterfaceFilesystemAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageInstance mocks base method.
func (m *MockStorageInterface) StorageInstance(arg0 names.StorageTag) (state.StorageInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageInstance", arg0)
	ret0, _ := ret[0].(state.StorageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageInstance indicates an expected call of StorageInstance.
func (mr *MockStorageInterfaceMockRecorder) StorageInstance(arg0 any) *MockStorageInterfaceStorageInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageInstance", reflect.TypeOf((*MockStorageInterface)(nil).StorageInstance), arg0)
	return &MockStorageInterfaceStorageInstanceCall{Call: call}
}

// MockStorageInterfaceStorageInstanceCall wrap *gomock.Call
type MockStorageInterfaceStorageInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInterfaceStorageInstanceCall) Return(arg0 state.StorageInstance, arg1 error) *MockStorageInterfaceStorageInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInterfaceStorageInstanceCall) Do(f func(names.StorageTag) (state.StorageInstance, error)) *MockStorageInterfaceStorageInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInterfaceStorageInstanceCall) DoAndReturn(f func(names.StorageTag) (state.StorageInstance, error)) *MockStorageInterfaceStorageInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitStorageAttachments mocks base method.
func (m *MockStorageInterface) UnitStorageAttachments(arg0 names.UnitTag) ([]state.StorageAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitStorageAttachments", arg0)
	ret0, _ := ret[0].([]state.StorageAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitStorageAttachments indicates an expected call of UnitStorageAttachments.
func (mr *MockStorageInterfaceMockRecorder) UnitStorageAttachments(arg0 any) *MockStorageInterfaceUnitStorageAttachmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitStorageAttachments", reflect.TypeOf((*MockStorageInterface)(nil).UnitStorageAttachments), arg0)
	return &MockStorageInterfaceUnitStorageAttachmentsCall{Call: call}
}

// MockStorageInterfaceUnitStorageAttachmentsCall wrap *gomock.Call
type MockStorageInterfaceUnitStorageAttachmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInterfaceUnitStorageAttachmentsCall) Return(arg0 []state.StorageAttachment, arg1 error) *MockStorageInterfaceUnitStorageAttachmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInterfaceUnitStorageAttachmentsCall) Do(f func(names.UnitTag) ([]state.StorageAttachment, error)) *MockStorageInterfaceUnitStorageAttachmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInterfaceUnitStorageAttachmentsCall) DoAndReturn(f func(names.UnitTag) ([]state.StorageAttachment, error)) *MockStorageInterfaceUnitStorageAttachmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VolumeAccess mocks base method.
func (m *MockStorageInterface) VolumeAccess() storagecommon.VolumeAccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAccess")
	ret0, _ := ret[0].(storagecommon.VolumeAccess)
	return ret0
}

// VolumeAccess indicates an expected call of VolumeAccess.
func (mr *MockStorageInterfaceMockRecorder) VolumeAccess() *MockStorageInterfaceVolumeAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAccess", reflect.TypeOf((*MockStorageInterface)(nil).VolumeAccess))
	return &MockStorageInterfaceVolumeAccessCall{Call: call}
}

// MockStorageInterfaceVolumeAccessCall wrap *gomock.Call
type MockStorageInterfaceVolumeAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInterfaceVolumeAccessCall) Return(arg0 storagecommon.VolumeAccess) *MockStorageInterfaceVolumeAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInterfaceVolumeAccessCall) Do(f func() storagecommon.VolumeAccess) *MockStorageInterfaceVolumeAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInterfaceVolumeAccessCall) DoAndReturn(f func() storagecommon.VolumeAccess) *MockStorageInterfaceVolumeAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// SystemState mocks base method.
func (m *MockPool) SystemState() (ControllerBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemState")
	ret0, _ := ret[0].(ControllerBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemState indicates an expected call of SystemState.
func (mr *MockPoolMockRecorder) SystemState() *MockPoolSystemStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemState", reflect.TypeOf((*MockPool)(nil).SystemState))
	return &MockPoolSystemStateCall{Call: call}
}

// MockPoolSystemStateCall wrap *gomock.Call
type MockPoolSystemStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolSystemStateCall) Return(arg0 ControllerBackend, arg1 error) *MockPoolSystemStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolSystemStateCall) Do(f func() (ControllerBackend, error)) *MockPoolSystemStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolSystemStateCall) DoAndReturn(f func() (ControllerBackend, error)) *MockPoolSystemStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// Base mocks base method.
func (m *MockMachine) Base() state.Base {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base")
	ret0, _ := ret[0].(state.Base)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockMachineMockRecorder) Base() *MockMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockMachine)(nil).Base))
	return &MockMachineBaseCall{Call: call}
}

// MockMachineBaseCall wrap *gomock.Call
type MockMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineBaseCall) Return(arg0 state.Base) *MockMachineBaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineBaseCall) Do(f func() state.Base) *MockMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineBaseCall) DoAndReturn(f func() state.Base) *MockMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Containers mocks base method.
func (m *MockMachine) Containers() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Containers indicates an expected call of Containers.
func (mr *MockMachineMockRecorder) Containers() *MockMachineContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockMachine)(nil).Containers))
	return &MockMachineContainersCall{Call: call}
}

// MockMachineContainersCall wrap *gomock.Call
type MockMachineContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineContainersCall) Return(arg0 []string, arg1 error) *MockMachineContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineContainersCall) Do(f func() ([]string, error)) *MockMachineContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineContainersCall) DoAndReturn(f func() ([]string, error)) *MockMachineContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockMachine) Destroy(arg0 objectstore.ObjectStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockMachineMockRecorder) Destroy(arg0 any) *MockMachineDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockMachine)(nil).Destroy), arg0)
	return &MockMachineDestroyCall{Call: call}
}

// MockMachineDestroyCall wrap *gomock.Call
type MockMachineDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineDestroyCall) Return(arg0 error) *MockMachineDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineDestroyCall) Do(f func(objectstore.ObjectStore) error) *MockMachineDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineDestroyCall) DoAndReturn(f func(objectstore.ObjectStore) error) *MockMachineDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ForceDestroy mocks base method.
func (m *MockMachine) ForceDestroy(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDestroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceDestroy indicates an expected call of ForceDestroy.
func (mr *MockMachineMockRecorder) ForceDestroy(arg0 any) *MockMachineForceDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDestroy", reflect.TypeOf((*MockMachine)(nil).ForceDestroy), arg0)
	return &MockMachineForceDestroyCall{Call: call}
}

// MockMachineForceDestroyCall wrap *gomock.Call
type MockMachineForceDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineForceDestroyCall) Return(arg0 error) *MockMachineForceDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineForceDestroyCall) Do(f func(time.Duration) error) *MockMachineForceDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineForceDestroyCall) DoAndReturn(f func(time.Duration) error) *MockMachineForceDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockMachine) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockMachineMockRecorder) Id() *MockMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMachine)(nil).Id))
	return &MockMachineIdCall{Call: call}
}

// MockMachineIdCall wrap *gomock.Call
type MockMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineIdCall) Return(arg0 string) *MockMachineIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineIdCall) Do(f func() string) *MockMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineIdCall) DoAndReturn(f func() string) *MockMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Principals mocks base method.
func (m *MockMachine) Principals() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Principals")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Principals indicates an expected call of Principals.
func (mr *MockMachineMockRecorder) Principals() *MockMachinePrincipalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Principals", reflect.TypeOf((*MockMachine)(nil).Principals))
	return &MockMachinePrincipalsCall{Call: call}
}

// MockMachinePrincipalsCall wrap *gomock.Call
type MockMachinePrincipalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinePrincipalsCall) Return(arg0 []string) *MockMachinePrincipalsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinePrincipalsCall) Do(f func() []string) *MockMachinePrincipalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinePrincipalsCall) DoAndReturn(f func() []string) *MockMachinePrincipalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockMachine) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockMachineMockRecorder) Tag() *MockMachineTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockMachine)(nil).Tag))
	return &MockMachineTagCall{Call: call}
}

// MockMachineTagCall wrap *gomock.Call
type MockMachineTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineTagCall) Return(arg0 names.Tag) *MockMachineTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineTagCall) Do(f func() names.Tag) *MockMachineTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineTagCall) DoAndReturn(f func() names.Tag) *MockMachineTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmhubClient is a mock of CharmhubClient interface.
type MockCharmhubClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharmhubClientMockRecorder
}

// MockCharmhubClientMockRecorder is the mock recorder for MockCharmhubClient.
type MockCharmhubClientMockRecorder struct {
	mock *MockCharmhubClient
}

// NewMockCharmhubClient creates a new mock instance.
func NewMockCharmhubClient(ctrl *gomock.Controller) *MockCharmhubClient {
	mock := &MockCharmhubClient{ctrl: ctrl}
	mock.recorder = &MockCharmhubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmhubClient) EXPECT() *MockCharmhubClientMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockCharmhubClient) Refresh(arg0 context.Context, arg1 charmhub.RefreshConfig) ([]transport.RefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0, arg1)
	ret0, _ := ret[0].([]transport.RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockCharmhubClientMockRecorder) Refresh(arg0, arg1 any) *MockCharmhubClientRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockCharmhubClient)(nil).Refresh), arg0, arg1)
	return &MockCharmhubClientRefreshCall{Call: call}
}

// MockCharmhubClientRefreshCall wrap *gomock.Call
type MockCharmhubClientRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmhubClientRefreshCall) Return(arg0 []transport.RefreshResponse, arg1 error) *MockCharmhubClientRefreshCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmhubClientRefreshCall) Do(f func(context.Context, charmhub.RefreshConfig) ([]transport.RefreshResponse, error)) *MockCharmhubClientRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmhubClientRefreshCall) DoAndReturn(f func(context.Context, charmhub.RefreshConfig) ([]transport.RefreshResponse, error)) *MockCharmhubClientRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// CreateMachine mocks base method.
func (m *MockMachineService) CreateMachine(arg0 context.Context, arg1 machine.Name, arg2 *string) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMachine indicates an expected call of CreateMachine.
func (mr *MockMachineServiceMockRecorder) CreateMachine(arg0, arg1, arg2 any) *MockMachineServiceCreateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachine", reflect.TypeOf((*MockMachineService)(nil).CreateMachine), arg0, arg1, arg2)
	return &MockMachineServiceCreateMachineCall{Call: call}
}

// MockMachineServiceCreateMachineCall wrap *gomock.Call
type MockMachineServiceCreateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceCreateMachineCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceCreateMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceCreateMachineCall) Do(f func(context.Context, machine.Name, *string) (machine.UUID, error)) *MockMachineServiceCreateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceCreateMachineCall) DoAndReturn(f func(context.Context, machine.Name, *string) (machine.UUID, error)) *MockMachineServiceCreateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteMachine mocks base method.
func (m *MockMachineService) DeleteMachine(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachine indicates an expected call of DeleteMachine.
func (mr *MockMachineServiceMockRecorder) DeleteMachine(arg0, arg1 any) *MockMachineServiceDeleteMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockMachineService)(nil).DeleteMachine), arg0, arg1)
	return &MockMachineServiceDeleteMachineCall{Call: call}
}

// MockMachineServiceDeleteMachineCall wrap *gomock.Call
type MockMachineServiceDeleteMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceDeleteMachineCall) Return(arg0 error) *MockMachineServiceDeleteMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceDeleteMachineCall) Do(f func(context.Context, machine.Name) error) *MockMachineServiceDeleteMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceDeleteMachineCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockMachineServiceDeleteMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBootstrapEnviron mocks base method.
func (m *MockMachineService) GetBootstrapEnviron(arg0 context.Context) (environs.BootstrapEnviron, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBootstrapEnviron", arg0)
	ret0, _ := ret[0].(environs.BootstrapEnviron)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBootstrapEnviron indicates an expected call of GetBootstrapEnviron.
func (mr *MockMachineServiceMockRecorder) GetBootstrapEnviron(arg0 any) *MockMachineServiceGetBootstrapEnvironCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrapEnviron", reflect.TypeOf((*MockMachineService)(nil).GetBootstrapEnviron), arg0)
	return &MockMachineServiceGetBootstrapEnvironCall{Call: call}
}

// MockMachineServiceGetBootstrapEnvironCall wrap *gomock.Call
type MockMachineServiceGetBootstrapEnvironCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetBootstrapEnvironCall) Return(arg0 environs.BootstrapEnviron, arg1 error) *MockMachineServiceGetBootstrapEnvironCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetBootstrapEnvironCall) Do(f func(context.Context) (environs.BootstrapEnviron, error)) *MockMachineServiceGetBootstrapEnvironCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetBootstrapEnvironCall) DoAndReturn(f func(context.Context) (environs.BootstrapEnviron, error)) *MockMachineServiceGetBootstrapEnvironCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHardwareCharacteristics mocks base method.
func (m *MockMachineService) GetHardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (*instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(*instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockMachineServiceGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceGetHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceGetHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Return(arg0 *instance.HardwareCharacteristics, arg1 error) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceTypesFetcher mocks base method.
func (m *MockMachineService) GetInstanceTypesFetcher(arg0 context.Context) (environs.InstanceTypesFetcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTypesFetcher", arg0)
	ret0, _ := ret[0].(environs.InstanceTypesFetcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTypesFetcher indicates an expected call of GetInstanceTypesFetcher.
func (mr *MockMachineServiceMockRecorder) GetInstanceTypesFetcher(arg0 any) *MockMachineServiceGetInstanceTypesFetcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTypesFetcher", reflect.TypeOf((*MockMachineService)(nil).GetInstanceTypesFetcher), arg0)
	return &MockMachineServiceGetInstanceTypesFetcherCall{Call: call}
}

// MockMachineServiceGetInstanceTypesFetcherCall wrap *gomock.Call
type MockMachineServiceGetInstanceTypesFetcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceTypesFetcherCall) Return(arg0 environs.InstanceTypesFetcher, arg1 error) *MockMachineServiceGetInstanceTypesFetcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceTypesFetcherCall) Do(f func(context.Context) (environs.InstanceTypesFetcher, error)) *MockMachineServiceGetInstanceTypesFetcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceTypesFetcherCall) DoAndReturn(f func(context.Context) (environs.InstanceTypesFetcher, error)) *MockMachineServiceGetInstanceTypesFetcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetKeepInstance mocks base method.
func (m *MockMachineService) SetKeepInstance(arg0 context.Context, arg1 machine.Name, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepInstance indicates an expected call of SetKeepInstance.
func (mr *MockMachineServiceMockRecorder) SetKeepInstance(arg0, arg1, arg2 any) *MockMachineServiceSetKeepInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepInstance", reflect.TypeOf((*MockMachineService)(nil).SetKeepInstance), arg0, arg1, arg2)
	return &MockMachineServiceSetKeepInstanceCall{Call: call}
}

// MockMachineServiceSetKeepInstanceCall wrap *gomock.Call
type MockMachineServiceSetKeepInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceSetKeepInstanceCall) Return(arg0 error) *MockMachineServiceSetKeepInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceSetKeepInstanceCall) Do(f func(context.Context, machine.Name, bool) error) *MockMachineServiceSetKeepInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceSetKeepInstanceCall) DoAndReturn(f func(context.Context, machine.Name, bool) error) *MockMachineServiceSetKeepInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldKeepInstance mocks base method.
func (m *MockMachineService) ShouldKeepInstance(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldKeepInstance", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldKeepInstance indicates an expected call of ShouldKeepInstance.
func (mr *MockMachineServiceMockRecorder) ShouldKeepInstance(arg0, arg1 any) *MockMachineServiceShouldKeepInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldKeepInstance", reflect.TypeOf((*MockMachineService)(nil).ShouldKeepInstance), arg0, arg1)
	return &MockMachineServiceShouldKeepInstanceCall{Call: call}
}

// MockMachineServiceShouldKeepInstanceCall wrap *gomock.Call
type MockMachineServiceShouldKeepInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceShouldKeepInstanceCall) Return(arg0 bool, arg1 error) *MockMachineServiceShouldKeepInstanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceShouldKeepInstanceCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceShouldKeepInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceShouldKeepInstanceCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceShouldKeepInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetUnitNamesOnMachine mocks base method.
func (m *MockApplicationService) GetUnitNamesOnMachine(arg0 context.Context, arg1 machine.Name) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNamesOnMachine", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNamesOnMachine indicates an expected call of GetUnitNamesOnMachine.
func (mr *MockApplicationServiceMockRecorder) GetUnitNamesOnMachine(arg0, arg1 any) *MockApplicationServiceGetUnitNamesOnMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNamesOnMachine", reflect.TypeOf((*MockApplicationService)(nil).GetUnitNamesOnMachine), arg0, arg1)
	return &MockApplicationServiceGetUnitNamesOnMachineCall{Call: call}
}

// MockApplicationServiceGetUnitNamesOnMachineCall wrap *gomock.Call
type MockApplicationServiceGetUnitNamesOnMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) Do(f func(context.Context, machine.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitNamesOnMachineCall) DoAndReturn(f func(context.Context, machine.Name) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesOnMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetAllSpaces mocks base method.
func (m *MockNetworkService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockNetworkServiceMockRecorder) GetAllSpaces(arg0 any) *MockNetworkServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockNetworkService)(nil).GetAllSpaces), arg0)
	return &MockNetworkServiceGetAllSpacesCall{Call: call}
}

// MockNetworkServiceGetAllSpacesCall wrap *gomock.Call
type MockNetworkServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockKeyUpdaterService is a mock of KeyUpdaterService interface.
type MockKeyUpdaterService struct {
	ctrl     *gomock.Controller
	recorder *MockKeyUpdaterServiceMockRecorder
}

// MockKeyUpdaterServiceMockRecorder is the mock recorder for MockKeyUpdaterService.
type MockKeyUpdaterServiceMockRecorder struct {
	mock *MockKeyUpdaterService
}

// NewMockKeyUpdaterService creates a new mock instance.
func NewMockKeyUpdaterService(ctrl *gomock.Controller) *MockKeyUpdaterService {
	mock := &MockKeyUpdaterService{ctrl: ctrl}
	mock.recorder = &MockKeyUpdaterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyUpdaterService) EXPECT() *MockKeyUpdaterServiceMockRecorder {
	return m.recorder
}

// GetAuthorisedKeysForMachine mocks base method.
func (m *MockKeyUpdaterService) GetAuthorisedKeysForMachine(arg0 context.Context, arg1 machine.Name) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorisedKeysForMachine", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorisedKeysForMachine indicates an expected call of GetAuthorisedKeysForMachine.
func (mr *MockKeyUpdaterServiceMockRecorder) GetAuthorisedKeysForMachine(arg0, arg1 any) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorisedKeysForMachine", reflect.TypeOf((*MockKeyUpdaterService)(nil).GetAuthorisedKeysForMachine), arg0, arg1)
	return &MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall{Call: call}
}

// MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall wrap *gomock.Call
type MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall) Return(arg0 []string, arg1 error) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall) Do(f func(context.Context, machine.Name) ([]string, error)) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall) DoAndReturn(f func(context.Context, machine.Name) ([]string, error)) *MockKeyUpdaterServiceGetAuthorisedKeysForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockCommandService is a mock of BlockCommandService interface.
type MockBlockCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCommandServiceMockRecorder
}

// MockBlockCommandServiceMockRecorder is the mock recorder for MockBlockCommandService.
type MockBlockCommandServiceMockRecorder struct {
	mock *MockBlockCommandService
}

// NewMockBlockCommandService creates a new mock instance.
func NewMockBlockCommandService(ctrl *gomock.Controller) *MockBlockCommandService {
	mock := &MockBlockCommandService{ctrl: ctrl}
	mock.recorder = &MockBlockCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockCommandService) EXPECT() *MockBlockCommandServiceMockRecorder {
	return m.recorder
}

// GetBlockSwitchedOn mocks base method.
func (m *MockBlockCommandService) GetBlockSwitchedOn(arg0 context.Context, arg1 blockcommand.BlockType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSwitchedOn", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSwitchedOn indicates an expected call of GetBlockSwitchedOn.
func (mr *MockBlockCommandServiceMockRecorder) GetBlockSwitchedOn(arg0, arg1 any) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSwitchedOn", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlockSwitchedOn), arg0, arg1)
	return &MockBlockCommandServiceGetBlockSwitchedOnCall{Call: call}
}

// MockBlockCommandServiceGetBlockSwitchedOnCall wrap *gomock.Call
type MockBlockCommandServiceGetBlockSwitchedOnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Return(arg0 string, arg1 error) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Do(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) DoAndReturn(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlocks mocks base method.
func (m *MockBlockCommandService) GetBlocks(arg0 context.Context) ([]blockcommand.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", arg0)
	ret0, _ := ret[0].([]blockcommand.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBlockCommandServiceMockRecorder) GetBlocks(arg0 any) *MockBlockCommandServiceGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlocks), arg0)
	return &MockBlockCommandServiceGetBlocksCall{Call: call}
}

// MockBlockCommandServiceGetBlocksCall wrap *gomock.Call
type MockBlockCommandServiceGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlocksCall) Return(arg0 []blockcommand.Block, arg1 error) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlocksCall) Do(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlocksCall) DoAndReturn(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentBinaryService is a mock of AgentBinaryService interface.
type MockAgentBinaryService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryServiceMockRecorder
}

// MockAgentBinaryServiceMockRecorder is the mock recorder for MockAgentBinaryService.
type MockAgentBinaryServiceMockRecorder struct {
	mock *MockAgentBinaryService
}

// NewMockAgentBinaryService creates a new mock instance.
func NewMockAgentBinaryService(ctrl *gomock.Controller) *MockAgentBinaryService {
	mock := &MockAgentBinaryService{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryService) EXPECT() *MockAgentBinaryServiceMockRecorder {
	return m.recorder
}

// GetEnvironAgentBinariesFinder mocks base method.
func (m *MockAgentBinaryService) GetEnvironAgentBinariesFinder() service.EnvironAgentBinariesFinderFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironAgentBinariesFinder")
	ret0, _ := ret[0].(service.EnvironAgentBinariesFinderFunc)
	return ret0
}

// GetEnvironAgentBinariesFinder indicates an expected call of GetEnvironAgentBinariesFinder.
func (mr *MockAgentBinaryServiceMockRecorder) GetEnvironAgentBinariesFinder() *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironAgentBinariesFinder", reflect.TypeOf((*MockAgentBinaryService)(nil).GetEnvironAgentBinariesFinder))
	return &MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall{Call: call}
}

// MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall wrap *gomock.Call
type MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) Return(arg0 service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) Do(f func() service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall) DoAndReturn(f func() service.EnvironAgentBinariesFinderFunc) *MockAgentBinaryServiceGetEnvironAgentBinariesFinderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentPasswordService is a mock of AgentPasswordService interface.
type MockAgentPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentPasswordServiceMockRecorder
}

// MockAgentPasswordServiceMockRecorder is the mock recorder for MockAgentPasswordService.
type MockAgentPasswordServiceMockRecorder struct {
	mock *MockAgentPasswordService
}

// NewMockAgentPasswordService creates a new mock instance.
func NewMockAgentPasswordService(ctrl *gomock.Controller) *MockAgentPasswordService {
	mock := &MockAgentPasswordService{ctrl: ctrl}
	mock.recorder = &MockAgentPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentPasswordService) EXPECT() *MockAgentPasswordServiceMockRecorder {
	return m.recorder
}

// SetMachinePassword mocks base method.
func (m *MockAgentPasswordService) SetMachinePassword(arg0 context.Context, arg1 machine.Name, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachinePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachinePassword indicates an expected call of SetMachinePassword.
func (mr *MockAgentPasswordServiceMockRecorder) SetMachinePassword(arg0, arg1, arg2 any) *MockAgentPasswordServiceSetMachinePasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachinePassword", reflect.TypeOf((*MockAgentPasswordService)(nil).SetMachinePassword), arg0, arg1, arg2)
	return &MockAgentPasswordServiceSetMachinePasswordCall{Call: call}
}

// MockAgentPasswordServiceSetMachinePasswordCall wrap *gomock.Call
type MockAgentPasswordServiceSetMachinePasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceSetMachinePasswordCall) Return(arg0 error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceSetMachinePasswordCall) Do(f func(context.Context, machine.Name, string) error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceSetMachinePasswordCall) DoAndReturn(f func(context.Context, machine.Name, string) error) *MockAgentPasswordServiceSetMachinePasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesForAgents mocks base method.
func (m *MockControllerNodeService) GetAllAPIAddressesForAgents(arg0 context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgents", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgents indicates an expected call of GetAllAPIAddressesForAgents.
func (mr *MockControllerNodeServiceMockRecorder) GetAllAPIAddressesForAgents(arg0 any) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgents", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllAPIAddressesForAgents), arg0)
	return &MockControllerNodeServiceGetAllAPIAddressesForAgentsCall{Call: call}
}

// MockControllerNodeServiceGetAllAPIAddressesForAgentsCall wrap *gomock.Call
type MockControllerNodeServiceGetAllAPIAddressesForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) Return(arg0 map[string][]string, arg1 error) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) Do(f func(context.Context) (map[string][]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) DoAndReturn(f func(context.Context) (map[string][]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllAPIAddressesForAgentsInPreferredOrder mocks base method.
func (m *MockControllerNodeService) GetAllAPIAddressesForAgentsInPreferredOrder(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgentsInPreferredOrder", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgentsInPreferredOrder indicates an expected call of GetAllAPIAddressesForAgentsInPreferredOrder.
func (mr *MockControllerNodeServiceMockRecorder) GetAllAPIAddressesForAgentsInPreferredOrder(arg0 any) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgentsInPreferredOrder", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllAPIAddressesForAgentsInPreferredOrder), arg0)
	return &MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall{Call: call}
}

// MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall wrap *gomock.Call
type MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsInPreferredOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetInstanceStatus mocks base method.
func (m *MockStatusService) GetInstanceStatus(arg0 context.Context, arg1 machine.Name) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceStatus", arg0, arg1)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceStatus indicates an expected call of GetInstanceStatus.
func (mr *MockStatusServiceMockRecorder) GetInstanceStatus(arg0, arg1 any) *MockStatusServiceGetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceStatus", reflect.TypeOf((*MockStatusService)(nil).GetInstanceStatus), arg0, arg1)
	return &MockStatusServiceGetInstanceStatusCall{Call: call}
}

// MockStatusServiceGetInstanceStatusCall wrap *gomock.Call
type MockStatusServiceGetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetInstanceStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetInstanceStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetInstanceStatusCall) Do(f func(context.Context, machine.Name) (status.StatusInfo, error)) *MockStatusServiceGetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetInstanceStatusCall) DoAndReturn(f func(context.Context, machine.Name) (status.StatusInfo, error)) *MockStatusServiceGetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetInstanceStatus mocks base method.
func (m *MockStatusService) SetInstanceStatus(arg0 context.Context, arg1 machine.Name, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceStatus indicates an expected call of SetInstanceStatus.
func (mr *MockStatusServiceMockRecorder) SetInstanceStatus(arg0, arg1, arg2 any) *MockStatusServiceSetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceStatus", reflect.TypeOf((*MockStatusService)(nil).SetInstanceStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetInstanceStatusCall{Call: call}
}

// MockStatusServiceSetInstanceStatusCall wrap *gomock.Call
type MockStatusServiceSetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetInstanceStatusCall) Return(arg0 error) *MockStatusServiceSetInstanceStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetInstanceStatusCall) Do(f func(context.Context, machine.Name, status.StatusInfo) error) *MockStatusServiceSetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetInstanceStatusCall) DoAndReturn(f func(context.Context, machine.Name, status.StatusInfo) error) *MockStatusServiceSetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
