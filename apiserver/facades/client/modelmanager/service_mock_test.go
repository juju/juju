// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelmanager (interfaces: ApplicationService,AccessService,SecretBackendService,ModelService,DomainServicesGetter,ModelDefaultsService,ModelInfoService,ModelConfigService,NetworkService,ModelDomainServices,MachineService,ModelAgentService,StatusService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmanager_test -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/modelmanager ApplicationService,AccessService,SecretBackendService,ModelService,DomainServicesGetter,ModelDefaultsService,ModelInfoService,ModelConfigService,NetworkService,ModelDomainServices,MachineService,ModelAgentService,StatusService
//

// Package modelmanager_test is a generated GoMock package.
package modelmanager_test

import (
	context "context"
	reflect "reflect"
	time "time"

	modelmanager "github.com/juju/juju/apiserver/facades/client/modelmanager"
	agentbinary "github.com/juju/juju/core/agentbinary"
	assumes "github.com/juju/juju/core/assumes"
	credential "github.com/juju/juju/core/credential"
	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	semversion "github.com/juju/juju/core/semversion"
	status "github.com/juju/juju/core/status"
	user "github.com/juju/juju/core/user"
	access "github.com/juju/juju/domain/access"
	model0 "github.com/juju/juju/domain/model"
	modeldefaults "github.com/juju/juju/domain/modeldefaults"
	service "github.com/juju/juju/domain/secretbackend/service"
	status0 "github.com/juju/juju/domain/status"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetSupportedFeatures mocks base method.
func (m *MockApplicationService) GetSupportedFeatures(arg0 context.Context) (assumes.FeatureSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFeatures", arg0)
	ret0, _ := ret[0].(assumes.FeatureSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedFeatures indicates an expected call of GetSupportedFeatures.
func (mr *MockApplicationServiceMockRecorder) GetSupportedFeatures(arg0 any) *MockApplicationServiceGetSupportedFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFeatures", reflect.TypeOf((*MockApplicationService)(nil).GetSupportedFeatures), arg0)
	return &MockApplicationServiceGetSupportedFeaturesCall{Call: call}
}

// MockApplicationServiceGetSupportedFeaturesCall wrap *gomock.Call
type MockApplicationServiceGetSupportedFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetSupportedFeaturesCall) Return(arg0 assumes.FeatureSet, arg1 error) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetSupportedFeaturesCall) Do(f func(context.Context) (assumes.FeatureSet, error)) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetSupportedFeaturesCall) DoAndReturn(f func(context.Context) (assumes.FeatureSet, error)) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// GetUserUUIDByName mocks base method.
func (m *MockAccessService) GetUserUUIDByName(arg0 context.Context, arg1 user.Name) (user.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(user.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUUIDByName indicates an expected call of GetUserUUIDByName.
func (mr *MockAccessServiceMockRecorder) GetUserUUIDByName(arg0, arg1 any) *MockAccessServiceGetUserUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUIDByName", reflect.TypeOf((*MockAccessService)(nil).GetUserUUIDByName), arg0, arg1)
	return &MockAccessServiceGetUserUUIDByNameCall{Call: call}
}

// MockAccessServiceGetUserUUIDByNameCall wrap *gomock.Call
type MockAccessServiceGetUserUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceGetUserUUIDByNameCall) Return(arg0 user.UUID, arg1 error) *MockAccessServiceGetUserUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceGetUserUUIDByNameCall) Do(f func(context.Context, user.Name) (user.UUID, error)) *MockAccessServiceGetUserUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceGetUserUUIDByNameCall) DoAndReturn(f func(context.Context, user.Name) (user.UUID, error)) *MockAccessServiceGetUserUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastModelLogin mocks base method.
func (m *MockAccessService) LastModelLogin(arg0 context.Context, arg1 user.Name, arg2 model.UUID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastModelLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastModelLogin indicates an expected call of LastModelLogin.
func (mr *MockAccessServiceMockRecorder) LastModelLogin(arg0, arg1, arg2 any) *MockAccessServiceLastModelLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModelLogin", reflect.TypeOf((*MockAccessService)(nil).LastModelLogin), arg0, arg1, arg2)
	return &MockAccessServiceLastModelLoginCall{Call: call}
}

// MockAccessServiceLastModelLoginCall wrap *gomock.Call
type MockAccessServiceLastModelLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceLastModelLoginCall) Return(arg0 time.Time, arg1 error) *MockAccessServiceLastModelLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceLastModelLoginCall) Do(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockAccessServiceLastModelLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceLastModelLoginCall) DoAndReturn(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockAccessServiceLastModelLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockAccessService) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockAccessServiceMockRecorder) UpdatePermission(arg0, arg1 any) *MockAccessServiceUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockAccessService)(nil).UpdatePermission), arg0, arg1)
	return &MockAccessServiceUpdatePermissionCall{Call: call}
}

// MockAccessServiceUpdatePermissionCall wrap *gomock.Call
type MockAccessServiceUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceUpdatePermissionCall) Return(arg0 error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretBackendService is a mock of SecretBackendService interface.
type MockSecretBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendServiceMockRecorder
}

// MockSecretBackendServiceMockRecorder is the mock recorder for MockSecretBackendService.
type MockSecretBackendServiceMockRecorder struct {
	mock *MockSecretBackendService
}

// NewMockSecretBackendService creates a new mock instance.
func NewMockSecretBackendService(ctrl *gomock.Controller) *MockSecretBackendService {
	mock := &MockSecretBackendService{ctrl: ctrl}
	mock.recorder = &MockSecretBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendService) EXPECT() *MockSecretBackendServiceMockRecorder {
	return m.recorder
}

// BackendSummaryInfoForModel mocks base method.
func (m *MockSecretBackendService) BackendSummaryInfoForModel(arg0 context.Context, arg1 model.UUID) ([]*service.SecretBackendInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendSummaryInfoForModel", arg0, arg1)
	ret0, _ := ret[0].([]*service.SecretBackendInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendSummaryInfoForModel indicates an expected call of BackendSummaryInfoForModel.
func (mr *MockSecretBackendServiceMockRecorder) BackendSummaryInfoForModel(arg0, arg1 any) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendSummaryInfoForModel", reflect.TypeOf((*MockSecretBackendService)(nil).BackendSummaryInfoForModel), arg0, arg1)
	return &MockSecretBackendServiceBackendSummaryInfoForModelCall{Call: call}
}

// MockSecretBackendServiceBackendSummaryInfoForModelCall wrap *gomock.Call
type MockSecretBackendServiceBackendSummaryInfoForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceBackendSummaryInfoForModelCall) Return(arg0 []*service.SecretBackendInfo, arg1 error) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceBackendSummaryInfoForModelCall) Do(f func(context.Context, model.UUID) ([]*service.SecretBackendInfo, error)) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceBackendSummaryInfoForModelCall) DoAndReturn(f func(context.Context, model.UUID) ([]*service.SecretBackendInfo, error)) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelService) CreateModel(arg0 context.Context, arg1 model0.GlobalModelCreationArgs) (model.UUID, func(context.Context) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(func(context.Context) error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelServiceMockRecorder) CreateModel(arg0, arg1 any) *MockModelServiceCreateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelService)(nil).CreateModel), arg0, arg1)
	return &MockModelServiceCreateModelCall{Call: call}
}

// MockModelServiceCreateModelCall wrap *gomock.Call
type MockModelServiceCreateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceCreateModelCall) Return(arg0 model.UUID, arg1 func(context.Context) error, arg2 error) *MockModelServiceCreateModelCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceCreateModelCall) Do(f func(context.Context, model0.GlobalModelCreationArgs) (model.UUID, func(context.Context) error, error)) *MockModelServiceCreateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceCreateModelCall) DoAndReturn(f func(context.Context, model0.GlobalModelCreationArgs) (model.UUID, func(context.Context) error, error)) *MockModelServiceCreateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DefaultModelCloudInfo mocks base method.
func (m *MockModelService) DefaultModelCloudInfo(arg0 context.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultModelCloudInfo", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DefaultModelCloudInfo indicates an expected call of DefaultModelCloudInfo.
func (mr *MockModelServiceMockRecorder) DefaultModelCloudInfo(arg0 any) *MockModelServiceDefaultModelCloudInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultModelCloudInfo", reflect.TypeOf((*MockModelService)(nil).DefaultModelCloudInfo), arg0)
	return &MockModelServiceDefaultModelCloudInfoCall{Call: call}
}

// MockModelServiceDefaultModelCloudInfoCall wrap *gomock.Call
type MockModelServiceDefaultModelCloudInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceDefaultModelCloudInfoCall) Return(arg0, arg1 string, arg2 error) *MockModelServiceDefaultModelCloudInfoCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceDefaultModelCloudInfoCall) Do(f func(context.Context) (string, string, error)) *MockModelServiceDefaultModelCloudInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceDefaultModelCloudInfoCall) DoAndReturn(f func(context.Context) (string, string, error)) *MockModelServiceDefaultModelCloudInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteModel mocks base method.
func (m *MockModelService) DeleteModel(arg0 context.Context, arg1 model.UUID, arg2 ...model0.DeleteModelOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelServiceMockRecorder) DeleteModel(arg0, arg1 any, arg2 ...any) *MockModelServiceDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelService)(nil).DeleteModel), varargs...)
	return &MockModelServiceDeleteModelCall{Call: call}
}

// MockModelServiceDeleteModelCall wrap *gomock.Call
type MockModelServiceDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceDeleteModelCall) Return(arg0 error) *MockModelServiceDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceDeleteModelCall) Do(f func(context.Context, model.UUID, ...model0.DeleteModelOption) error) *MockModelServiceDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceDeleteModelCall) DoAndReturn(f func(context.Context, model.UUID, ...model0.DeleteModelOption) error) *MockModelServiceDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUser mocks base method.
func (m *MockModelService) GetModelUser(arg0 context.Context, arg1 model.UUID, arg2 user.Name) (model.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUser indicates an expected call of GetModelUser.
func (mr *MockModelServiceMockRecorder) GetModelUser(arg0, arg1, arg2 any) *MockModelServiceGetModelUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUser", reflect.TypeOf((*MockModelService)(nil).GetModelUser), arg0, arg1, arg2)
	return &MockModelServiceGetModelUserCall{Call: call}
}

// MockModelServiceGetModelUserCall wrap *gomock.Call
type MockModelServiceGetModelUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelUserCall) Return(arg0 model.ModelUserInfo, arg1 error) *MockModelServiceGetModelUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelUserCall) Do(f func(context.Context, model.UUID, user.Name) (model.ModelUserInfo, error)) *MockModelServiceGetModelUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelUserCall) DoAndReturn(f func(context.Context, model.UUID, user.Name) (model.ModelUserInfo, error)) *MockModelServiceGetModelUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUsers mocks base method.
func (m *MockModelService) GetModelUsers(arg0 context.Context, arg1 model.UUID) ([]model.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUsers", arg0, arg1)
	ret0, _ := ret[0].([]model.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUsers indicates an expected call of GetModelUsers.
func (mr *MockModelServiceMockRecorder) GetModelUsers(arg0, arg1 any) *MockModelServiceGetModelUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUsers", reflect.TypeOf((*MockModelService)(nil).GetModelUsers), arg0, arg1)
	return &MockModelServiceGetModelUsersCall{Call: call}
}

// MockModelServiceGetModelUsersCall wrap *gomock.Call
type MockModelServiceGetModelUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelUsersCall) Return(arg0 []model.ModelUserInfo, arg1 error) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelUsersCall) Do(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelUsersCall) DoAndReturn(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModels mocks base method.
func (m *MockModelService) ListAllModels(arg0 context.Context) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModels", arg0)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModels indicates an expected call of ListAllModels.
func (mr *MockModelServiceMockRecorder) ListAllModels(arg0 any) *MockModelServiceListAllModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModels", reflect.TypeOf((*MockModelService)(nil).ListAllModels), arg0)
	return &MockModelServiceListAllModelsCall{Call: call}
}

// MockModelServiceListAllModelsCall wrap *gomock.Call
type MockModelServiceListAllModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListAllModelsCall) Return(arg0 []model.Model, arg1 error) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListAllModelsCall) Do(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListAllModelsCall) DoAndReturn(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDs mocks base method.
func (m *MockModelService) ListModelUUIDs(arg0 context.Context) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDs", arg0)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDs indicates an expected call of ListModelUUIDs.
func (mr *MockModelServiceMockRecorder) ListModelUUIDs(arg0 any) *MockModelServiceListModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDs", reflect.TypeOf((*MockModelService)(nil).ListModelUUIDs), arg0)
	return &MockModelServiceListModelUUIDsCall{Call: call}
}

// MockModelServiceListModelUUIDsCall wrap *gomock.Call
type MockModelServiceListModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListModelUUIDsCall) Return(arg0 []model.UUID, arg1 error) *MockModelServiceListModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListModelUUIDsCall) Do(f func(context.Context) ([]model.UUID, error)) *MockModelServiceListModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListModelUUIDsCall) DoAndReturn(f func(context.Context) ([]model.UUID, error)) *MockModelServiceListModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelUUIDsForUser mocks base method.
func (m *MockModelService) ListModelUUIDsForUser(arg0 context.Context, arg1 user.UUID) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelUUIDsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelUUIDsForUser indicates an expected call of ListModelUUIDsForUser.
func (mr *MockModelServiceMockRecorder) ListModelUUIDsForUser(arg0, arg1 any) *MockModelServiceListModelUUIDsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelUUIDsForUser", reflect.TypeOf((*MockModelService)(nil).ListModelUUIDsForUser), arg0, arg1)
	return &MockModelServiceListModelUUIDsForUserCall{Call: call}
}

// MockModelServiceListModelUUIDsForUserCall wrap *gomock.Call
type MockModelServiceListModelUUIDsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListModelUUIDsForUserCall) Return(arg0 []model.UUID, arg1 error) *MockModelServiceListModelUUIDsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListModelUUIDsForUserCall) Do(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockModelServiceListModelUUIDsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListModelUUIDsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.UUID, error)) *MockModelServiceListModelUUIDsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelsForUser mocks base method.
func (m *MockModelService) ListModelsForUser(arg0 context.Context, arg1 user.UUID) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelsForUser indicates an expected call of ListModelsForUser.
func (mr *MockModelServiceMockRecorder) ListModelsForUser(arg0, arg1 any) *MockModelServiceListModelsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsForUser", reflect.TypeOf((*MockModelService)(nil).ListModelsForUser), arg0, arg1)
	return &MockModelServiceListModelsForUserCall{Call: call}
}

// MockModelServiceListModelsForUserCall wrap *gomock.Call
type MockModelServiceListModelsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListModelsForUserCall) Return(arg0 []model.Model, arg1 error) *MockModelServiceListModelsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListModelsForUserCall) Do(f func(context.Context, user.UUID) ([]model.Model, error)) *MockModelServiceListModelsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListModelsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.Model, error)) *MockModelServiceListModelsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockModelService) Model(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockModelServiceMockRecorder) Model(arg0, arg1 any) *MockModelServiceModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelService)(nil).Model), arg0, arg1)
	return &MockModelServiceModelCall{Call: call}
}

// MockModelServiceModelCall wrap *gomock.Call
type MockModelServiceModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCredential mocks base method.
func (m *MockModelService) UpdateCredential(arg0 context.Context, arg1 model.UUID, arg2 credential.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockModelServiceMockRecorder) UpdateCredential(arg0, arg1, arg2 any) *MockModelServiceUpdateCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockModelService)(nil).UpdateCredential), arg0, arg1, arg2)
	return &MockModelServiceUpdateCredentialCall{Call: call}
}

// MockModelServiceUpdateCredentialCall wrap *gomock.Call
type MockModelServiceUpdateCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceUpdateCredentialCall) Return(arg0 error) *MockModelServiceUpdateCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceUpdateCredentialCall) Do(f func(context.Context, model.UUID, credential.Key) error) *MockModelServiceUpdateCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceUpdateCredentialCall) DoAndReturn(f func(context.Context, model.UUID, credential.Key) error) *MockModelServiceUpdateCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// DomainServicesForModel mocks base method.
func (m *MockDomainServicesGetter) DomainServicesForModel(arg0 context.Context, arg1 model.UUID) (modelmanager.ModelDomainServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainServicesForModel", arg0, arg1)
	ret0, _ := ret[0].(modelmanager.ModelDomainServices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainServicesForModel indicates an expected call of DomainServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) DomainServicesForModel(arg0, arg1 any) *MockDomainServicesGetterDomainServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).DomainServicesForModel), arg0, arg1)
	return &MockDomainServicesGetterDomainServicesForModelCall{Call: call}
}

// MockDomainServicesGetterDomainServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterDomainServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterDomainServicesForModelCall) Return(arg0 modelmanager.ModelDomainServices, arg1 error) *MockDomainServicesGetterDomainServicesForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterDomainServicesForModelCall) Do(f func(context.Context, model.UUID) (modelmanager.ModelDomainServices, error)) *MockDomainServicesGetterDomainServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterDomainServicesForModelCall) DoAndReturn(f func(context.Context, model.UUID) (modelmanager.ModelDomainServices, error)) *MockDomainServicesGetterDomainServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDefaultsService is a mock of ModelDefaultsService interface.
type MockModelDefaultsService struct {
	ctrl     *gomock.Controller
	recorder *MockModelDefaultsServiceMockRecorder
}

// MockModelDefaultsServiceMockRecorder is the mock recorder for MockModelDefaultsService.
type MockModelDefaultsServiceMockRecorder struct {
	mock *MockModelDefaultsService
}

// NewMockModelDefaultsService creates a new mock instance.
func NewMockModelDefaultsService(ctrl *gomock.Controller) *MockModelDefaultsService {
	mock := &MockModelDefaultsService{ctrl: ctrl}
	mock.recorder = &MockModelDefaultsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDefaultsService) EXPECT() *MockModelDefaultsServiceMockRecorder {
	return m.recorder
}

// CloudDefaults mocks base method.
func (m *MockModelDefaultsService) CloudDefaults(arg0 context.Context, arg1 string) (modeldefaults.ModelDefaultAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudDefaults", arg0, arg1)
	ret0, _ := ret[0].(modeldefaults.ModelDefaultAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudDefaults indicates an expected call of CloudDefaults.
func (mr *MockModelDefaultsServiceMockRecorder) CloudDefaults(arg0, arg1 any) *MockModelDefaultsServiceCloudDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudDefaults", reflect.TypeOf((*MockModelDefaultsService)(nil).CloudDefaults), arg0, arg1)
	return &MockModelDefaultsServiceCloudDefaultsCall{Call: call}
}

// MockModelDefaultsServiceCloudDefaultsCall wrap *gomock.Call
type MockModelDefaultsServiceCloudDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDefaultsServiceCloudDefaultsCall) Return(arg0 modeldefaults.ModelDefaultAttributes, arg1 error) *MockModelDefaultsServiceCloudDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDefaultsServiceCloudDefaultsCall) Do(f func(context.Context, string) (modeldefaults.ModelDefaultAttributes, error)) *MockModelDefaultsServiceCloudDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDefaultsServiceCloudDefaultsCall) DoAndReturn(f func(context.Context, string) (modeldefaults.ModelDefaultAttributes, error)) *MockModelDefaultsServiceCloudDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveCloudDefaults mocks base method.
func (m *MockModelDefaultsService) RemoveCloudDefaults(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudDefaults", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloudDefaults indicates an expected call of RemoveCloudDefaults.
func (mr *MockModelDefaultsServiceMockRecorder) RemoveCloudDefaults(arg0, arg1, arg2 any) *MockModelDefaultsServiceRemoveCloudDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudDefaults", reflect.TypeOf((*MockModelDefaultsService)(nil).RemoveCloudDefaults), arg0, arg1, arg2)
	return &MockModelDefaultsServiceRemoveCloudDefaultsCall{Call: call}
}

// MockModelDefaultsServiceRemoveCloudDefaultsCall wrap *gomock.Call
type MockModelDefaultsServiceRemoveCloudDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDefaultsServiceRemoveCloudDefaultsCall) Return(arg0 error) *MockModelDefaultsServiceRemoveCloudDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDefaultsServiceRemoveCloudDefaultsCall) Do(f func(context.Context, string, []string) error) *MockModelDefaultsServiceRemoveCloudDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDefaultsServiceRemoveCloudDefaultsCall) DoAndReturn(f func(context.Context, string, []string) error) *MockModelDefaultsServiceRemoveCloudDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveCloudRegionDefaults mocks base method.
func (m *MockModelDefaultsService) RemoveCloudRegionDefaults(arg0 context.Context, arg1, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudRegionDefaults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloudRegionDefaults indicates an expected call of RemoveCloudRegionDefaults.
func (mr *MockModelDefaultsServiceMockRecorder) RemoveCloudRegionDefaults(arg0, arg1, arg2, arg3 any) *MockModelDefaultsServiceRemoveCloudRegionDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudRegionDefaults", reflect.TypeOf((*MockModelDefaultsService)(nil).RemoveCloudRegionDefaults), arg0, arg1, arg2, arg3)
	return &MockModelDefaultsServiceRemoveCloudRegionDefaultsCall{Call: call}
}

// MockModelDefaultsServiceRemoveCloudRegionDefaultsCall wrap *gomock.Call
type MockModelDefaultsServiceRemoveCloudRegionDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDefaultsServiceRemoveCloudRegionDefaultsCall) Return(arg0 error) *MockModelDefaultsServiceRemoveCloudRegionDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDefaultsServiceRemoveCloudRegionDefaultsCall) Do(f func(context.Context, string, string, []string) error) *MockModelDefaultsServiceRemoveCloudRegionDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDefaultsServiceRemoveCloudRegionDefaultsCall) DoAndReturn(f func(context.Context, string, string, []string) error) *MockModelDefaultsServiceRemoveCloudRegionDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloudDefaults mocks base method.
func (m *MockModelDefaultsService) UpdateCloudDefaults(arg0 context.Context, arg1 string, arg2 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudDefaults", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudDefaults indicates an expected call of UpdateCloudDefaults.
func (mr *MockModelDefaultsServiceMockRecorder) UpdateCloudDefaults(arg0, arg1, arg2 any) *MockModelDefaultsServiceUpdateCloudDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudDefaults", reflect.TypeOf((*MockModelDefaultsService)(nil).UpdateCloudDefaults), arg0, arg1, arg2)
	return &MockModelDefaultsServiceUpdateCloudDefaultsCall{Call: call}
}

// MockModelDefaultsServiceUpdateCloudDefaultsCall wrap *gomock.Call
type MockModelDefaultsServiceUpdateCloudDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDefaultsServiceUpdateCloudDefaultsCall) Return(arg0 error) *MockModelDefaultsServiceUpdateCloudDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDefaultsServiceUpdateCloudDefaultsCall) Do(f func(context.Context, string, map[string]any) error) *MockModelDefaultsServiceUpdateCloudDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDefaultsServiceUpdateCloudDefaultsCall) DoAndReturn(f func(context.Context, string, map[string]any) error) *MockModelDefaultsServiceUpdateCloudDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCloudRegionDefaults mocks base method.
func (m *MockModelDefaultsService) UpdateCloudRegionDefaults(arg0 context.Context, arg1, arg2 string, arg3 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudRegionDefaults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudRegionDefaults indicates an expected call of UpdateCloudRegionDefaults.
func (mr *MockModelDefaultsServiceMockRecorder) UpdateCloudRegionDefaults(arg0, arg1, arg2, arg3 any) *MockModelDefaultsServiceUpdateCloudRegionDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudRegionDefaults", reflect.TypeOf((*MockModelDefaultsService)(nil).UpdateCloudRegionDefaults), arg0, arg1, arg2, arg3)
	return &MockModelDefaultsServiceUpdateCloudRegionDefaultsCall{Call: call}
}

// MockModelDefaultsServiceUpdateCloudRegionDefaultsCall wrap *gomock.Call
type MockModelDefaultsServiceUpdateCloudRegionDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDefaultsServiceUpdateCloudRegionDefaultsCall) Return(arg0 error) *MockModelDefaultsServiceUpdateCloudRegionDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDefaultsServiceUpdateCloudRegionDefaultsCall) Do(f func(context.Context, string, string, map[string]any) error) *MockModelDefaultsServiceUpdateCloudRegionDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDefaultsServiceUpdateCloudRegionDefaultsCall) DoAndReturn(f func(context.Context, string, string, map[string]any) error) *MockModelDefaultsServiceUpdateCloudRegionDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelInfoService) CreateModel(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelInfoServiceMockRecorder) CreateModel(arg0 any) *MockModelInfoServiceCreateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelInfoService)(nil).CreateModel), arg0)
	return &MockModelInfoServiceCreateModelCall{Call: call}
}

// MockModelInfoServiceCreateModelCall wrap *gomock.Call
type MockModelInfoServiceCreateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceCreateModelCall) Return(arg0 error) *MockModelInfoServiceCreateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceCreateModelCall) Do(f func(context.Context) error) *MockModelInfoServiceCreateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceCreateModelCall) DoAndReturn(f func(context.Context) error) *MockModelInfoServiceCreateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateModelWithAgentVersion mocks base method.
func (m *MockModelInfoService) CreateModelWithAgentVersion(arg0 context.Context, arg1 semversion.Number) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelWithAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModelWithAgentVersion indicates an expected call of CreateModelWithAgentVersion.
func (mr *MockModelInfoServiceMockRecorder) CreateModelWithAgentVersion(arg0, arg1 any) *MockModelInfoServiceCreateModelWithAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelWithAgentVersion", reflect.TypeOf((*MockModelInfoService)(nil).CreateModelWithAgentVersion), arg0, arg1)
	return &MockModelInfoServiceCreateModelWithAgentVersionCall{Call: call}
}

// MockModelInfoServiceCreateModelWithAgentVersionCall wrap *gomock.Call
type MockModelInfoServiceCreateModelWithAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceCreateModelWithAgentVersionCall) Return(arg0 error) *MockModelInfoServiceCreateModelWithAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceCreateModelWithAgentVersionCall) Do(f func(context.Context, semversion.Number) error) *MockModelInfoServiceCreateModelWithAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceCreateModelWithAgentVersionCall) DoAndReturn(f func(context.Context, semversion.Number) error) *MockModelInfoServiceCreateModelWithAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateModelWithAgentVersionStream mocks base method.
func (m *MockModelInfoService) CreateModelWithAgentVersionStream(arg0 context.Context, arg1 semversion.Number, arg2 agentbinary.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelWithAgentVersionStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModelWithAgentVersionStream indicates an expected call of CreateModelWithAgentVersionStream.
func (mr *MockModelInfoServiceMockRecorder) CreateModelWithAgentVersionStream(arg0, arg1, arg2 any) *MockModelInfoServiceCreateModelWithAgentVersionStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelWithAgentVersionStream", reflect.TypeOf((*MockModelInfoService)(nil).CreateModelWithAgentVersionStream), arg0, arg1, arg2)
	return &MockModelInfoServiceCreateModelWithAgentVersionStreamCall{Call: call}
}

// MockModelInfoServiceCreateModelWithAgentVersionStreamCall wrap *gomock.Call
type MockModelInfoServiceCreateModelWithAgentVersionStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceCreateModelWithAgentVersionStreamCall) Return(arg0 error) *MockModelInfoServiceCreateModelWithAgentVersionStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceCreateModelWithAgentVersionStreamCall) Do(f func(context.Context, semversion.Number, agentbinary.AgentStream) error) *MockModelInfoServiceCreateModelWithAgentVersionStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceCreateModelWithAgentVersionStreamCall) DoAndReturn(f func(context.Context, semversion.Number, agentbinary.AgentStream) error) *MockModelInfoServiceCreateModelWithAgentVersionStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteModel mocks base method.
func (m *MockModelInfoService) DeleteModel(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelInfoServiceMockRecorder) DeleteModel(arg0 any) *MockModelInfoServiceDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelInfoService)(nil).DeleteModel), arg0)
	return &MockModelInfoServiceDeleteModelCall{Call: call}
}

// MockModelInfoServiceDeleteModelCall wrap *gomock.Call
type MockModelInfoServiceDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceDeleteModelCall) Return(arg0 error) *MockModelInfoServiceDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceDeleteModelCall) Do(f func(context.Context) error) *MockModelInfoServiceDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceDeleteModelCall) DoAndReturn(f func(context.Context) error) *MockModelInfoServiceDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelSummary mocks base method.
func (m *MockModelInfoService) GetModelSummary(arg0 context.Context) (model.ModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSummary", arg0)
	ret0, _ := ret[0].(model.ModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSummary indicates an expected call of GetModelSummary.
func (mr *MockModelInfoServiceMockRecorder) GetModelSummary(arg0 any) *MockModelInfoServiceGetModelSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSummary", reflect.TypeOf((*MockModelInfoService)(nil).GetModelSummary), arg0)
	return &MockModelInfoServiceGetModelSummaryCall{Call: call}
}

// MockModelInfoServiceGetModelSummaryCall wrap *gomock.Call
type MockModelInfoServiceGetModelSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelSummaryCall) Return(arg0 model.ModelSummary, arg1 error) *MockModelInfoServiceGetModelSummaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelSummaryCall) Do(f func(context.Context) (model.ModelSummary, error)) *MockModelInfoServiceGetModelSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelSummaryCall) DoAndReturn(f func(context.Context) (model.ModelSummary, error)) *MockModelInfoServiceGetModelSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserModelSummary mocks base method.
func (m *MockModelInfoService) GetUserModelSummary(arg0 context.Context, arg1 user.UUID) (model.UserModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserModelSummary", arg0, arg1)
	ret0, _ := ret[0].(model.UserModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserModelSummary indicates an expected call of GetUserModelSummary.
func (mr *MockModelInfoServiceMockRecorder) GetUserModelSummary(arg0, arg1 any) *MockModelInfoServiceGetUserModelSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserModelSummary", reflect.TypeOf((*MockModelInfoService)(nil).GetUserModelSummary), arg0, arg1)
	return &MockModelInfoServiceGetUserModelSummaryCall{Call: call}
}

// MockModelInfoServiceGetUserModelSummaryCall wrap *gomock.Call
type MockModelInfoServiceGetUserModelSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetUserModelSummaryCall) Return(arg0 model.UserModelSummary, arg1 error) *MockModelInfoServiceGetUserModelSummaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetUserModelSummaryCall) Do(f func(context.Context, user.UUID) (model.UserModelSummary, error)) *MockModelInfoServiceGetUserModelSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetUserModelSummaryCall) DoAndReturn(f func(context.Context, user.UUID) (model.UserModelSummary, error)) *MockModelInfoServiceGetUserModelSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasValidCredential mocks base method.
func (m *MockModelInfoService) HasValidCredential(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasValidCredential", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasValidCredential indicates an expected call of HasValidCredential.
func (mr *MockModelInfoServiceMockRecorder) HasValidCredential(arg0 any) *MockModelInfoServiceHasValidCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValidCredential", reflect.TypeOf((*MockModelInfoService)(nil).HasValidCredential), arg0)
	return &MockModelInfoServiceHasValidCredentialCall{Call: call}
}

// MockModelInfoServiceHasValidCredentialCall wrap *gomock.Call
type MockModelInfoServiceHasValidCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceHasValidCredentialCall) Return(arg0 bool, arg1 error) *MockModelInfoServiceHasValidCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceHasValidCredentialCall) Do(f func(context.Context) (bool, error)) *MockModelInfoServiceHasValidCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceHasValidCredentialCall) DoAndReturn(f func(context.Context) (bool, error)) *MockModelInfoServiceHasValidCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerModel mocks base method.
func (m *MockModelInfoService) IsControllerModel(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerModel", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerModel indicates an expected call of IsControllerModel.
func (mr *MockModelInfoServiceMockRecorder) IsControllerModel(arg0 any) *MockModelInfoServiceIsControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerModel", reflect.TypeOf((*MockModelInfoService)(nil).IsControllerModel), arg0)
	return &MockModelInfoServiceIsControllerModelCall{Call: call}
}

// MockModelInfoServiceIsControllerModelCall wrap *gomock.Call
type MockModelInfoServiceIsControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceIsControllerModelCall) Return(arg0 bool, arg1 error) *MockModelInfoServiceIsControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceIsControllerModelCall) Do(f func(context.Context) (bool, error)) *MockModelInfoServiceIsControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceIsControllerModelCall) DoAndReturn(f func(context.Context) (bool, error)) *MockModelInfoServiceIsControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// SetModelConfig mocks base method.
func (m *MockModelConfigService) SetModelConfig(arg0 context.Context, arg1 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelConfig indicates an expected call of SetModelConfig.
func (mr *MockModelConfigServiceMockRecorder) SetModelConfig(arg0, arg1 any) *MockModelConfigServiceSetModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).SetModelConfig), arg0, arg1)
	return &MockModelConfigServiceSetModelConfigCall{Call: call}
}

// MockModelConfigServiceSetModelConfigCall wrap *gomock.Call
type MockModelConfigServiceSetModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceSetModelConfigCall) Return(arg0 error) *MockModelConfigServiceSetModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceSetModelConfigCall) Do(f func(context.Context, map[string]any) error) *MockModelConfigServiceSetModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceSetModelConfigCall) DoAndReturn(f func(context.Context, map[string]any) error) *MockModelConfigServiceSetModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// ReloadSpaces mocks base method.
func (m *MockNetworkService) ReloadSpaces(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockNetworkServiceMockRecorder) ReloadSpaces(arg0 any) *MockNetworkServiceReloadSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockNetworkService)(nil).ReloadSpaces), arg0)
	return &MockNetworkServiceReloadSpacesCall{Call: call}
}

// MockNetworkServiceReloadSpacesCall wrap *gomock.Call
type MockNetworkServiceReloadSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceReloadSpacesCall) Return(arg0 error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceReloadSpacesCall) Do(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceReloadSpacesCall) DoAndReturn(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDomainServices is a mock of ModelDomainServices interface.
type MockModelDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockModelDomainServicesMockRecorder
}

// MockModelDomainServicesMockRecorder is the mock recorder for MockModelDomainServices.
type MockModelDomainServicesMockRecorder struct {
	mock *MockModelDomainServices
}

// NewMockModelDomainServices creates a new mock instance.
func NewMockModelDomainServices(ctrl *gomock.Controller) *MockModelDomainServices {
	mock := &MockModelDomainServices{ctrl: ctrl}
	mock.recorder = &MockModelDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDomainServices) EXPECT() *MockModelDomainServicesMockRecorder {
	return m.recorder
}

// Agent mocks base method.
func (m *MockModelDomainServices) Agent() modelmanager.ModelAgentService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(modelmanager.ModelAgentService)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockModelDomainServicesMockRecorder) Agent() *MockModelDomainServicesAgentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockModelDomainServices)(nil).Agent))
	return &MockModelDomainServicesAgentCall{Call: call}
}

// MockModelDomainServicesAgentCall wrap *gomock.Call
type MockModelDomainServicesAgentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesAgentCall) Return(arg0 modelmanager.ModelAgentService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesAgentCall) Do(f func() modelmanager.ModelAgentService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesAgentCall) DoAndReturn(f func() modelmanager.ModelAgentService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockCommand mocks base method.
func (m *MockModelDomainServices) BlockCommand() modelmanager.BlockCommandService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCommand")
	ret0, _ := ret[0].(modelmanager.BlockCommandService)
	return ret0
}

// BlockCommand indicates an expected call of BlockCommand.
func (mr *MockModelDomainServicesMockRecorder) BlockCommand() *MockModelDomainServicesBlockCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCommand", reflect.TypeOf((*MockModelDomainServices)(nil).BlockCommand))
	return &MockModelDomainServicesBlockCommandCall{Call: call}
}

// MockModelDomainServicesBlockCommandCall wrap *gomock.Call
type MockModelDomainServicesBlockCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesBlockCommandCall) Return(arg0 modelmanager.BlockCommandService) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesBlockCommandCall) Do(f func() modelmanager.BlockCommandService) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesBlockCommandCall) DoAndReturn(f func() modelmanager.BlockCommandService) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockModelDomainServices) Config() modelmanager.ModelConfigService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(modelmanager.ModelConfigService)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockModelDomainServicesMockRecorder) Config() *MockModelDomainServicesConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockModelDomainServices)(nil).Config))
	return &MockModelDomainServicesConfigCall{Call: call}
}

// MockModelDomainServicesConfigCall wrap *gomock.Call
type MockModelDomainServicesConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesConfigCall) Return(arg0 modelmanager.ModelConfigService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesConfigCall) Do(f func() modelmanager.ModelConfigService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesConfigCall) DoAndReturn(f func() modelmanager.ModelConfigService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockModelDomainServices) Machine() modelmanager.MachineService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine")
	ret0, _ := ret[0].(modelmanager.MachineService)
	return ret0
}

// Machine indicates an expected call of Machine.
func (mr *MockModelDomainServicesMockRecorder) Machine() *MockModelDomainServicesMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockModelDomainServices)(nil).Machine))
	return &MockModelDomainServicesMachineCall{Call: call}
}

// MockModelDomainServicesMachineCall wrap *gomock.Call
type MockModelDomainServicesMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesMachineCall) Return(arg0 modelmanager.MachineService) *MockModelDomainServicesMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesMachineCall) Do(f func() modelmanager.MachineService) *MockModelDomainServicesMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesMachineCall) DoAndReturn(f func() modelmanager.MachineService) *MockModelDomainServicesMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelInfo mocks base method.
func (m *MockModelDomainServices) ModelInfo() modelmanager.ModelInfoService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo")
	ret0, _ := ret[0].(modelmanager.ModelInfoService)
	return ret0
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockModelDomainServicesMockRecorder) ModelInfo() *MockModelDomainServicesModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockModelDomainServices)(nil).ModelInfo))
	return &MockModelDomainServicesModelInfoCall{Call: call}
}

// MockModelDomainServicesModelInfoCall wrap *gomock.Call
type MockModelDomainServicesModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesModelInfoCall) Return(arg0 modelmanager.ModelInfoService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesModelInfoCall) Do(f func() modelmanager.ModelInfoService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesModelInfoCall) DoAndReturn(f func() modelmanager.ModelInfoService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Network mocks base method.
func (m *MockModelDomainServices) Network() modelmanager.NetworkService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(modelmanager.NetworkService)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockModelDomainServicesMockRecorder) Network() *MockModelDomainServicesNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockModelDomainServices)(nil).Network))
	return &MockModelDomainServicesNetworkCall{Call: call}
}

// MockModelDomainServicesNetworkCall wrap *gomock.Call
type MockModelDomainServicesNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesNetworkCall) Return(arg0 modelmanager.NetworkService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesNetworkCall) Do(f func() modelmanager.NetworkService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesNetworkCall) DoAndReturn(f func() modelmanager.NetworkService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockModelDomainServices) Status() modelmanager.StatusService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(modelmanager.StatusService)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockModelDomainServicesMockRecorder) Status() *MockModelDomainServicesStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockModelDomainServices)(nil).Status))
	return &MockModelDomainServicesStatusCall{Call: call}
}

// MockModelDomainServicesStatusCall wrap *gomock.Call
type MockModelDomainServicesStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesStatusCall) Return(arg0 modelmanager.StatusService) *MockModelDomainServicesStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesStatusCall) Do(f func() modelmanager.StatusService) *MockModelDomainServicesStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesStatusCall) DoAndReturn(f func() modelmanager.StatusService) *MockModelDomainServicesStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetHardwareCharacteristics mocks base method.
func (m *MockMachineService) GetHardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (*instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(*instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockMachineServiceGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceGetHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceGetHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Return(arg0 *instance.HardwareCharacteristics, arg1 error) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceIDAndName mocks base method.
func (m *MockMachineService) GetInstanceIDAndName(arg0 context.Context, arg1 machine.UUID) (instance.Id, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIDAndName", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceIDAndName indicates an expected call of GetInstanceIDAndName.
func (mr *MockMachineServiceMockRecorder) GetInstanceIDAndName(arg0, arg1 any) *MockMachineServiceGetInstanceIDAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIDAndName", reflect.TypeOf((*MockMachineService)(nil).GetInstanceIDAndName), arg0, arg1)
	return &MockMachineServiceGetInstanceIDAndNameCall{Call: call}
}

// MockMachineServiceGetInstanceIDAndNameCall wrap *gomock.Call
type MockMachineServiceGetInstanceIDAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceIDAndNameCall) Return(arg0 instance.Id, arg1 string, arg2 error) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceIDAndNameCall) Do(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceIDAndNameCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetAllMachineStatuses mocks base method.
func (m *MockStatusService) GetAllMachineStatuses(arg0 context.Context) (map[machine.Name]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMachineStatuses", arg0)
	ret0, _ := ret[0].(map[machine.Name]status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMachineStatuses indicates an expected call of GetAllMachineStatuses.
func (mr *MockStatusServiceMockRecorder) GetAllMachineStatuses(arg0 any) *MockStatusServiceGetAllMachineStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMachineStatuses", reflect.TypeOf((*MockStatusService)(nil).GetAllMachineStatuses), arg0)
	return &MockStatusServiceGetAllMachineStatusesCall{Call: call}
}

// MockStatusServiceGetAllMachineStatusesCall wrap *gomock.Call
type MockStatusServiceGetAllMachineStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetAllMachineStatusesCall) Return(arg0 map[machine.Name]status.StatusInfo, arg1 error) *MockStatusServiceGetAllMachineStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetAllMachineStatusesCall) Do(f func(context.Context) (map[machine.Name]status.StatusInfo, error)) *MockStatusServiceGetAllMachineStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetAllMachineStatusesCall) DoAndReturn(f func(context.Context) (map[machine.Name]status.StatusInfo, error)) *MockStatusServiceGetAllMachineStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationAndUnitModelStatuses mocks base method.
func (m *MockStatusService) GetApplicationAndUnitModelStatuses(arg0 context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitModelStatuses", arg0)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndUnitModelStatuses indicates an expected call of GetApplicationAndUnitModelStatuses.
func (mr *MockStatusServiceMockRecorder) GetApplicationAndUnitModelStatuses(arg0 any) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitModelStatuses", reflect.TypeOf((*MockStatusService)(nil).GetApplicationAndUnitModelStatuses), arg0)
	return &MockStatusServiceGetApplicationAndUnitModelStatusesCall{Call: call}
}

// MockStatusServiceGetApplicationAndUnitModelStatusesCall wrap *gomock.Call
type MockStatusServiceGetApplicationAndUnitModelStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetApplicationAndUnitModelStatusesCall) Return(arg0 map[string]int, arg1 error) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetApplicationAndUnitModelStatusesCall) Do(f func(context.Context) (map[string]int, error)) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetApplicationAndUnitModelStatusesCall) DoAndReturn(f func(context.Context) (map[string]int, error)) *MockStatusServiceGetApplicationAndUnitModelStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelStatus mocks base method.
func (m *MockStatusService) GetModelStatus(arg0 context.Context) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatus", arg0)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatus indicates an expected call of GetModelStatus.
func (mr *MockStatusServiceMockRecorder) GetModelStatus(arg0 any) *MockStatusServiceGetModelStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatus", reflect.TypeOf((*MockStatusService)(nil).GetModelStatus), arg0)
	return &MockStatusServiceGetModelStatusCall{Call: call}
}

// MockStatusServiceGetModelStatusCall wrap *gomock.Call
type MockStatusServiceGetModelStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetModelStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetModelStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetModelStatusCall) Do(f func(context.Context) (status.StatusInfo, error)) *MockStatusServiceGetModelStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetModelStatusCall) DoAndReturn(f func(context.Context) (status.StatusInfo, error)) *MockStatusServiceGetModelStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelStatusInfo mocks base method.
func (m *MockStatusService) GetModelStatusInfo(arg0 context.Context) (status0.ModelStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatusInfo", arg0)
	ret0, _ := ret[0].(status0.ModelStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatusInfo indicates an expected call of GetModelStatusInfo.
func (mr *MockStatusServiceMockRecorder) GetModelStatusInfo(arg0 any) *MockStatusServiceGetModelStatusInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatusInfo", reflect.TypeOf((*MockStatusService)(nil).GetModelStatusInfo), arg0)
	return &MockStatusServiceGetModelStatusInfoCall{Call: call}
}

// MockStatusServiceGetModelStatusInfoCall wrap *gomock.Call
type MockStatusServiceGetModelStatusInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetModelStatusInfoCall) Return(arg0 status0.ModelStatusInfo, arg1 error) *MockStatusServiceGetModelStatusInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetModelStatusInfoCall) Do(f func(context.Context) (status0.ModelStatusInfo, error)) *MockStatusServiceGetModelStatusInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetModelStatusInfoCall) DoAndReturn(f func(context.Context) (status0.ModelStatusInfo, error)) *MockStatusServiceGetModelStatusInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
