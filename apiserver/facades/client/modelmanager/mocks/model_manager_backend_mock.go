// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: ModelManagerBackend)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	set "github.com/juju/collections/set"
	description "github.com/juju/description/v3"
	common "github.com/juju/juju/apiserver/common"
	cloud "github.com/juju/juju/cloud"
	controller "github.com/juju/juju/controller"
	network "github.com/juju/juju/core/network"
	permission "github.com/juju/juju/core/permission"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	config "github.com/juju/juju/environs/config"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	names "github.com/juju/names/v4"
)

// MockModelManagerBackend is a mock of ModelManagerBackend interface.
type MockModelManagerBackend struct {
	ctrl     *gomock.Controller
	recorder *MockModelManagerBackendMockRecorder
}

// MockModelManagerBackendMockRecorder is the mock recorder for MockModelManagerBackend.
type MockModelManagerBackendMockRecorder struct {
	mock *MockModelManagerBackend
}

// NewMockModelManagerBackend creates a new mock instance.
func NewMockModelManagerBackend(ctrl *gomock.Controller) *MockModelManagerBackend {
	mock := &MockModelManagerBackend{ctrl: ctrl}
	mock.recorder = &MockModelManagerBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelManagerBackend) EXPECT() *MockModelManagerBackendMockRecorder {
	return m.recorder
}

// APIHostPortsForAgents mocks base method.
func (m *MockModelManagerBackend) APIHostPortsForAgents() ([]network.SpaceHostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIHostPortsForAgents")
	ret0, _ := ret[0].([]network.SpaceHostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIHostPortsForAgents indicates an expected call of APIHostPortsForAgents.
func (mr *MockModelManagerBackendMockRecorder) APIHostPortsForAgents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIHostPortsForAgents", reflect.TypeOf((*MockModelManagerBackend)(nil).APIHostPortsForAgents))
}

// AddControllerUser mocks base method.
func (m *MockModelManagerBackend) AddControllerUser(arg0 state.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControllerUser", arg0)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddControllerUser indicates an expected call of AddControllerUser.
func (mr *MockModelManagerBackendMockRecorder) AddControllerUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControllerUser", reflect.TypeOf((*MockModelManagerBackend)(nil).AddControllerUser), arg0)
}

// AddSpace mocks base method.
func (m *MockModelManagerBackend) AddSpace(arg0 string, arg1 network.Id, arg2 []string, arg3 bool) (*state.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*state.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockModelManagerBackendMockRecorder) AddSpace(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockModelManagerBackend)(nil).AddSpace), arg0, arg1, arg2, arg3)
}

// AllApplications mocks base method.
func (m *MockModelManagerBackend) AllApplications() ([]common.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllApplications")
	ret0, _ := ret[0].([]common.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllApplications indicates an expected call of AllApplications.
func (mr *MockModelManagerBackendMockRecorder) AllApplications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllApplications", reflect.TypeOf((*MockModelManagerBackend)(nil).AllApplications))
}

// AllEndpointBindingsSpaceNames mocks base method.
func (m *MockModelManagerBackend) AllEndpointBindingsSpaceNames() (set.Strings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllEndpointBindingsSpaceNames")
	ret0, _ := ret[0].(set.Strings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllEndpointBindingsSpaceNames indicates an expected call of AllEndpointBindingsSpaceNames.
func (mr *MockModelManagerBackendMockRecorder) AllEndpointBindingsSpaceNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllEndpointBindingsSpaceNames", reflect.TypeOf((*MockModelManagerBackend)(nil).AllEndpointBindingsSpaceNames))
}

// AllFilesystems mocks base method.
func (m *MockModelManagerBackend) AllFilesystems() ([]state.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllFilesystems")
	ret0, _ := ret[0].([]state.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFilesystems indicates an expected call of AllFilesystems.
func (mr *MockModelManagerBackendMockRecorder) AllFilesystems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFilesystems", reflect.TypeOf((*MockModelManagerBackend)(nil).AllFilesystems))
}

// AllMachines mocks base method.
func (m *MockModelManagerBackend) AllMachines() ([]common.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachines")
	ret0, _ := ret[0].([]common.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachines indicates an expected call of AllMachines.
func (mr *MockModelManagerBackendMockRecorder) AllMachines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachines", reflect.TypeOf((*MockModelManagerBackend)(nil).AllMachines))
}

// AllModelUUIDs mocks base method.
func (m *MockModelManagerBackend) AllModelUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModelUUIDs indicates an expected call of AllModelUUIDs.
func (mr *MockModelManagerBackendMockRecorder) AllModelUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelUUIDs", reflect.TypeOf((*MockModelManagerBackend)(nil).AllModelUUIDs))
}

// AllSpaces mocks base method.
func (m *MockModelManagerBackend) AllSpaces() ([]*state.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSpaces")
	ret0, _ := ret[0].([]*state.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSpaces indicates an expected call of AllSpaces.
func (mr *MockModelManagerBackendMockRecorder) AllSpaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSpaces", reflect.TypeOf((*MockModelManagerBackend)(nil).AllSpaces))
}

// AllVolumes mocks base method.
func (m *MockModelManagerBackend) AllVolumes() ([]state.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllVolumes")
	ret0, _ := ret[0].([]state.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllVolumes indicates an expected call of AllVolumes.
func (mr *MockModelManagerBackendMockRecorder) AllVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllVolumes", reflect.TypeOf((*MockModelManagerBackend)(nil).AllVolumes))
}

// CleanupOldMetrics mocks base method.
func (m *MockModelManagerBackend) CleanupOldMetrics() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldMetrics")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldMetrics indicates an expected call of CleanupOldMetrics.
func (mr *MockModelManagerBackendMockRecorder) CleanupOldMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldMetrics", reflect.TypeOf((*MockModelManagerBackend)(nil).CleanupOldMetrics))
}

// Close mocks base method.
func (m *MockModelManagerBackend) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModelManagerBackendMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelManagerBackend)(nil).Close))
}

// Cloud mocks base method.
func (m *MockModelManagerBackend) Cloud(arg0 string) (cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", arg0)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud.
func (mr *MockModelManagerBackendMockRecorder) Cloud(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockModelManagerBackend)(nil).Cloud), arg0)
}

// CloudCredential mocks base method.
func (m *MockModelManagerBackend) CloudCredential(arg0 names.CloudCredentialTag) (state.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredential", arg0)
	ret0, _ := ret[0].(state.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredential indicates an expected call of CloudCredential.
func (mr *MockModelManagerBackendMockRecorder) CloudCredential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredential", reflect.TypeOf((*MockModelManagerBackend)(nil).CloudCredential), arg0)
}

// Clouds mocks base method.
func (m *MockModelManagerBackend) Clouds() (map[names.CloudTag]cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clouds")
	ret0, _ := ret[0].(map[names.CloudTag]cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clouds indicates an expected call of Clouds.
func (mr *MockModelManagerBackendMockRecorder) Clouds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clouds", reflect.TypeOf((*MockModelManagerBackend)(nil).Clouds))
}

// ComposeNewModelConfig mocks base method.
func (m *MockModelManagerBackend) ComposeNewModelConfig(arg0 map[string]interface{}, arg1 *cloudspec.CloudRegionSpec) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComposeNewModelConfig", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComposeNewModelConfig indicates an expected call of ComposeNewModelConfig.
func (mr *MockModelManagerBackendMockRecorder) ComposeNewModelConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComposeNewModelConfig", reflect.TypeOf((*MockModelManagerBackend)(nil).ComposeNewModelConfig), arg0, arg1)
}

// ConstraintsBySpaceName mocks base method.
func (m *MockModelManagerBackend) ConstraintsBySpaceName(arg0 string) ([]*state.Constraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstraintsBySpaceName", arg0)
	ret0, _ := ret[0].([]*state.Constraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstraintsBySpaceName indicates an expected call of ConstraintsBySpaceName.
func (mr *MockModelManagerBackendMockRecorder) ConstraintsBySpaceName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstraintsBySpaceName", reflect.TypeOf((*MockModelManagerBackend)(nil).ConstraintsBySpaceName), arg0)
}

// ControllerConfig mocks base method.
func (m *MockModelManagerBackend) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockModelManagerBackendMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockModelManagerBackend)(nil).ControllerConfig))
}

// ControllerModelTag mocks base method.
func (m *MockModelManagerBackend) ControllerModelTag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// ControllerModelTag indicates an expected call of ControllerModelTag.
func (mr *MockModelManagerBackendMockRecorder) ControllerModelTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModelTag", reflect.TypeOf((*MockModelManagerBackend)(nil).ControllerModelTag))
}

// ControllerModelUUID mocks base method.
func (m *MockModelManagerBackend) ControllerModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ControllerModelUUID indicates an expected call of ControllerModelUUID.
func (mr *MockModelManagerBackendMockRecorder) ControllerModelUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModelUUID", reflect.TypeOf((*MockModelManagerBackend)(nil).ControllerModelUUID))
}

// ControllerNodes mocks base method.
func (m *MockModelManagerBackend) ControllerNodes() ([]common.ControllerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNodes")
	ret0, _ := ret[0].([]common.ControllerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerNodes indicates an expected call of ControllerNodes.
func (mr *MockModelManagerBackendMockRecorder) ControllerNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNodes", reflect.TypeOf((*MockModelManagerBackend)(nil).ControllerNodes))
}

// ControllerTag mocks base method.
func (m *MockModelManagerBackend) ControllerTag() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTag")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// ControllerTag indicates an expected call of ControllerTag.
func (mr *MockModelManagerBackendMockRecorder) ControllerTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTag", reflect.TypeOf((*MockModelManagerBackend)(nil).ControllerTag))
}

// ControllerUUID mocks base method.
func (m *MockModelManagerBackend) ControllerUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ControllerUUID indicates an expected call of ControllerUUID.
func (mr *MockModelManagerBackendMockRecorder) ControllerUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerUUID", reflect.TypeOf((*MockModelManagerBackend)(nil).ControllerUUID))
}

// CountOfSentMetrics mocks base method.
func (m *MockModelManagerBackend) CountOfSentMetrics() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOfSentMetrics")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOfSentMetrics indicates an expected call of CountOfSentMetrics.
func (mr *MockModelManagerBackendMockRecorder) CountOfSentMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOfSentMetrics", reflect.TypeOf((*MockModelManagerBackend)(nil).CountOfSentMetrics))
}

// CountOfUnsentMetrics mocks base method.
func (m *MockModelManagerBackend) CountOfUnsentMetrics() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOfUnsentMetrics")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOfUnsentMetrics indicates an expected call of CountOfUnsentMetrics.
func (mr *MockModelManagerBackendMockRecorder) CountOfUnsentMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOfUnsentMetrics", reflect.TypeOf((*MockModelManagerBackend)(nil).CountOfUnsentMetrics))
}

// DefaultEndpointBindingSpace mocks base method.
func (m *MockModelManagerBackend) DefaultEndpointBindingSpace() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultEndpointBindingSpace")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultEndpointBindingSpace indicates an expected call of DefaultEndpointBindingSpace.
func (mr *MockModelManagerBackendMockRecorder) DefaultEndpointBindingSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultEndpointBindingSpace", reflect.TypeOf((*MockModelManagerBackend)(nil).DefaultEndpointBindingSpace))
}

// DumpAll mocks base method.
func (m *MockModelManagerBackend) DumpAll() (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpAll")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpAll indicates an expected call of DumpAll.
func (mr *MockModelManagerBackendMockRecorder) DumpAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpAll", reflect.TypeOf((*MockModelManagerBackend)(nil).DumpAll))
}

// Export mocks base method.
func (m *MockModelManagerBackend) Export() (description.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export")
	ret0, _ := ret[0].(description.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockModelManagerBackendMockRecorder) Export() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockModelManagerBackend)(nil).Export))
}

// ExportPartial mocks base method.
func (m *MockModelManagerBackend) ExportPartial(arg0 state.ExportConfig) (description.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPartial", arg0)
	ret0, _ := ret[0].(description.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPartial indicates an expected call of ExportPartial.
func (mr *MockModelManagerBackendMockRecorder) ExportPartial(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPartial", reflect.TypeOf((*MockModelManagerBackend)(nil).ExportPartial), arg0)
}

// GetBackend mocks base method.
func (m *MockModelManagerBackend) GetBackend(arg0 string) (common.ModelManagerBackend, func() bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackend", arg0)
	ret0, _ := ret[0].(common.ModelManagerBackend)
	ret1, _ := ret[1].(func() bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBackend indicates an expected call of GetBackend.
func (mr *MockModelManagerBackendMockRecorder) GetBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackend", reflect.TypeOf((*MockModelManagerBackend)(nil).GetBackend), arg0)
}

// GetBlockForType mocks base method.
func (m *MockModelManagerBackend) GetBlockForType(arg0 state.BlockType) (state.Block, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockForType", arg0)
	ret0, _ := ret[0].(state.Block)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlockForType indicates an expected call of GetBlockForType.
func (mr *MockModelManagerBackendMockRecorder) GetBlockForType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockForType", reflect.TypeOf((*MockModelManagerBackend)(nil).GetBlockForType), arg0)
}

// GetCloudAccess mocks base method.
func (m *MockModelManagerBackend) GetCloudAccess(arg0 string, arg1 names.UserTag) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudAccess", arg0, arg1)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudAccess indicates an expected call of GetCloudAccess.
func (mr *MockModelManagerBackendMockRecorder) GetCloudAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudAccess", reflect.TypeOf((*MockModelManagerBackend)(nil).GetCloudAccess), arg0, arg1)
}

// GetModel mocks base method.
func (m *MockModelManagerBackend) GetModel(arg0 string) (common.Model, func() bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0)
	ret0, _ := ret[0].(common.Model)
	ret1, _ := ret[1].(func() bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelManagerBackendMockRecorder) GetModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelManagerBackend)(nil).GetModel), arg0)
}

// HAPrimaryMachine mocks base method.
func (m *MockModelManagerBackend) HAPrimaryMachine() (names.MachineTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HAPrimaryMachine")
	ret0, _ := ret[0].(names.MachineTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HAPrimaryMachine indicates an expected call of HAPrimaryMachine.
func (mr *MockModelManagerBackendMockRecorder) HAPrimaryMachine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HAPrimaryMachine", reflect.TypeOf((*MockModelManagerBackend)(nil).HAPrimaryMachine))
}

// IsController mocks base method.
func (m *MockModelManagerBackend) IsController() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsController")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsController indicates an expected call of IsController.
func (mr *MockModelManagerBackendMockRecorder) IsController() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsController", reflect.TypeOf((*MockModelManagerBackend)(nil).IsController))
}

// IsControllerAdmin mocks base method.
func (m *MockModelManagerBackend) IsControllerAdmin(arg0 names.UserTag) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerAdmin", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerAdmin indicates an expected call of IsControllerAdmin.
func (mr *MockModelManagerBackendMockRecorder) IsControllerAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerAdmin", reflect.TypeOf((*MockModelManagerBackend)(nil).IsControllerAdmin), arg0)
}

// LatestMigration mocks base method.
func (m *MockModelManagerBackend) LatestMigration() (state.ModelMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestMigration")
	ret0, _ := ret[0].(state.ModelMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestMigration indicates an expected call of LatestMigration.
func (mr *MockModelManagerBackendMockRecorder) LatestMigration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestMigration", reflect.TypeOf((*MockModelManagerBackend)(nil).LatestMigration))
}

// MetricsManager mocks base method.
func (m *MockModelManagerBackend) MetricsManager() (*state.MetricsManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsManager")
	ret0, _ := ret[0].(*state.MetricsManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsManager indicates an expected call of MetricsManager.
func (mr *MockModelManagerBackendMockRecorder) MetricsManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsManager", reflect.TypeOf((*MockModelManagerBackend)(nil).MetricsManager))
}

// MetricsToSend mocks base method.
func (m *MockModelManagerBackend) MetricsToSend(arg0 int) ([]*state.MetricBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsToSend", arg0)
	ret0, _ := ret[0].([]*state.MetricBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsToSend indicates an expected call of MetricsToSend.
func (mr *MockModelManagerBackendMockRecorder) MetricsToSend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsToSend", reflect.TypeOf((*MockModelManagerBackend)(nil).MetricsToSend), arg0)
}

// Model mocks base method.
func (m *MockModelManagerBackend) Model() (common.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(common.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockModelManagerBackendMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelManagerBackend)(nil).Model))
}

// ModelBasicInfoForUser mocks base method.
func (m *MockModelManagerBackend) ModelBasicInfoForUser(arg0 names.UserTag) ([]state.ModelAccessInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelBasicInfoForUser", arg0)
	ret0, _ := ret[0].([]state.ModelAccessInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelBasicInfoForUser indicates an expected call of ModelBasicInfoForUser.
func (mr *MockModelManagerBackendMockRecorder) ModelBasicInfoForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelBasicInfoForUser", reflect.TypeOf((*MockModelManagerBackend)(nil).ModelBasicInfoForUser), arg0)
}

// ModelConfig mocks base method.
func (m *MockModelManagerBackend) ModelConfig() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelManagerBackendMockRecorder) ModelConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelManagerBackend)(nil).ModelConfig))
}

// ModelConfigDefaultValues mocks base method.
func (m *MockModelManagerBackend) ModelConfigDefaultValues(arg0 string) (config.ModelDefaultAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfigDefaultValues", arg0)
	ret0, _ := ret[0].(config.ModelDefaultAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfigDefaultValues indicates an expected call of ModelConfigDefaultValues.
func (mr *MockModelManagerBackendMockRecorder) ModelConfigDefaultValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfigDefaultValues", reflect.TypeOf((*MockModelManagerBackend)(nil).ModelConfigDefaultValues), arg0)
}

// ModelSummariesForUser mocks base method.
func (m *MockModelManagerBackend) ModelSummariesForUser(arg0 names.UserTag, arg1 bool) ([]state.ModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelSummariesForUser", arg0, arg1)
	ret0, _ := ret[0].([]state.ModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelSummariesForUser indicates an expected call of ModelSummariesForUser.
func (mr *MockModelManagerBackendMockRecorder) ModelSummariesForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelSummariesForUser", reflect.TypeOf((*MockModelManagerBackend)(nil).ModelSummariesForUser), arg0, arg1)
}

// ModelTag mocks base method.
func (m *MockModelManagerBackend) ModelTag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// ModelTag indicates an expected call of ModelTag.
func (mr *MockModelManagerBackendMockRecorder) ModelTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTag", reflect.TypeOf((*MockModelManagerBackend)(nil).ModelTag))
}

// ModelUUID mocks base method.
func (m *MockModelManagerBackend) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockModelManagerBackendMockRecorder) ModelUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockModelManagerBackend)(nil).ModelUUID))
}

// ModelUUIDsForUser mocks base method.
func (m *MockModelManagerBackend) ModelUUIDsForUser(arg0 names.UserTag) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUIDsForUser", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelUUIDsForUser indicates an expected call of ModelUUIDsForUser.
func (mr *MockModelManagerBackendMockRecorder) ModelUUIDsForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUIDsForUser", reflect.TypeOf((*MockModelManagerBackend)(nil).ModelUUIDsForUser), arg0)
}

// Name mocks base method.
func (m *MockModelManagerBackend) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockModelManagerBackendMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockModelManagerBackend)(nil).Name))
}

// NewModel mocks base method.
func (m *MockModelManagerBackend) NewModel(arg0 state.ModelArgs) (common.Model, common.ModelManagerBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewModel", arg0)
	ret0, _ := ret[0].(common.Model)
	ret1, _ := ret[1].(common.ModelManagerBackend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewModel indicates an expected call of NewModel.
func (mr *MockModelManagerBackendMockRecorder) NewModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewModel", reflect.TypeOf((*MockModelManagerBackend)(nil).NewModel), arg0)
}

// RemoveUserAccess mocks base method.
func (m *MockModelManagerBackend) RemoveUserAccess(arg0 names.UserTag, arg1 names.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserAccess indicates an expected call of RemoveUserAccess.
func (mr *MockModelManagerBackendMockRecorder) RemoveUserAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserAccess", reflect.TypeOf((*MockModelManagerBackend)(nil).RemoveUserAccess), arg0, arg1)
}

// SaveProviderSubnets mocks base method.
func (m *MockModelManagerBackend) SaveProviderSubnets(arg0 []network.SubnetInfo, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProviderSubnets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProviderSubnets indicates an expected call of SaveProviderSubnets.
func (mr *MockModelManagerBackendMockRecorder) SaveProviderSubnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProviderSubnets", reflect.TypeOf((*MockModelManagerBackend)(nil).SaveProviderSubnets), arg0, arg1)
}

// SetMetricBatchesSent mocks base method.
func (m *MockModelManagerBackend) SetMetricBatchesSent(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetricBatchesSent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetricBatchesSent indicates an expected call of SetMetricBatchesSent.
func (mr *MockModelManagerBackendMockRecorder) SetMetricBatchesSent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetricBatchesSent", reflect.TypeOf((*MockModelManagerBackend)(nil).SetMetricBatchesSent), arg0)
}

// SetModelMeterStatus mocks base method.
func (m *MockModelManagerBackend) SetModelMeterStatus(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelMeterStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelMeterStatus indicates an expected call of SetModelMeterStatus.
func (mr *MockModelManagerBackendMockRecorder) SetModelMeterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelMeterStatus", reflect.TypeOf((*MockModelManagerBackend)(nil).SetModelMeterStatus), arg0, arg1)
}

// SetUserAccess mocks base method.
func (m *MockModelManagerBackend) SetUserAccess(arg0 names.UserTag, arg1 names.Tag, arg2 permission.Access) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserAccess indicates an expected call of SetUserAccess.
func (mr *MockModelManagerBackendMockRecorder) SetUserAccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAccess", reflect.TypeOf((*MockModelManagerBackend)(nil).SetUserAccess), arg0, arg1, arg2)
}

// ToolsStorage mocks base method.
func (m *MockModelManagerBackend) ToolsStorage() (binarystorage.StorageCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsStorage")
	ret0, _ := ret[0].(binarystorage.StorageCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsStorage indicates an expected call of ToolsStorage.
func (mr *MockModelManagerBackendMockRecorder) ToolsStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsStorage", reflect.TypeOf((*MockModelManagerBackend)(nil).ToolsStorage))
}

// Unit mocks base method.
func (m *MockModelManagerBackend) Unit(arg0 string) (*state.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(*state.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockModelManagerBackendMockRecorder) Unit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockModelManagerBackend)(nil).Unit), arg0)
}

// UpdateModelConfigDefaultValues mocks base method.
func (m *MockModelManagerBackend) UpdateModelConfigDefaultValues(arg0 map[string]interface{}, arg1 []string, arg2 *cloudspec.CloudRegionSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelConfigDefaultValues", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelConfigDefaultValues indicates an expected call of UpdateModelConfigDefaultValues.
func (mr *MockModelManagerBackendMockRecorder) UpdateModelConfigDefaultValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelConfigDefaultValues", reflect.TypeOf((*MockModelManagerBackend)(nil).UpdateModelConfigDefaultValues), arg0, arg1, arg2)
}

// UserAccess mocks base method.
func (m *MockModelManagerBackend) UserAccess(arg0 names.UserTag, arg1 names.Tag) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAccess", arg0, arg1)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAccess indicates an expected call of UserAccess.
func (mr *MockModelManagerBackendMockRecorder) UserAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAccess", reflect.TypeOf((*MockModelManagerBackend)(nil).UserAccess), arg0, arg1)
}
