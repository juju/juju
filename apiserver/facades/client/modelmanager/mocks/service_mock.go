// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelmanager (interfaces: ApplicationService,AccessService,SecretBackendService,ModelService,DomainServicesGetter,ModelDefaultsService,ModelInfoService,ModelConfigService,NetworkService,ModelDomainServices,MachineService,ModelAgentService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/service_mock.go github.com/juju/juju/apiserver/facades/client/modelmanager ApplicationService,AccessService,SecretBackendService,ModelService,DomainServicesGetter,ModelDefaultsService,ModelInfoService,ModelConfigService,NetworkService,ModelDomainServices,MachineService,ModelAgentService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	modelmanager "github.com/juju/juju/apiserver/facades/client/modelmanager"
	assumes "github.com/juju/juju/core/assumes"
	controller "github.com/juju/juju/core/controller"
	credential "github.com/juju/juju/core/credential"
	instance "github.com/juju/juju/core/instance"
	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	access "github.com/juju/juju/domain/access"
	model0 "github.com/juju/juju/domain/model"
	service "github.com/juju/juju/domain/modeldefaults/service"
	service0 "github.com/juju/juju/domain/secretbackend/service"
	config "github.com/juju/juju/environs/config"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetSupportedFeatures mocks base method.
func (m *MockApplicationService) GetSupportedFeatures(arg0 context.Context) (assumes.FeatureSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFeatures", arg0)
	ret0, _ := ret[0].(assumes.FeatureSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedFeatures indicates an expected call of GetSupportedFeatures.
func (mr *MockApplicationServiceMockRecorder) GetSupportedFeatures(arg0 any) *MockApplicationServiceGetSupportedFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFeatures", reflect.TypeOf((*MockApplicationService)(nil).GetSupportedFeatures), arg0)
	return &MockApplicationServiceGetSupportedFeaturesCall{Call: call}
}

// MockApplicationServiceGetSupportedFeaturesCall wrap *gomock.Call
type MockApplicationServiceGetSupportedFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetSupportedFeaturesCall) Return(arg0 assumes.FeatureSet, arg1 error) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetSupportedFeaturesCall) Do(f func(context.Context) (assumes.FeatureSet, error)) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetSupportedFeaturesCall) DoAndReturn(f func(context.Context) (assumes.FeatureSet, error)) *MockApplicationServiceGetSupportedFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// GetUserByName mocks base method.
func (m *MockAccessService) GetUserByName(arg0 context.Context, arg1 user.Name) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockAccessServiceMockRecorder) GetUserByName(arg0, arg1 any) *MockAccessServiceGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockAccessService)(nil).GetUserByName), arg0, arg1)
	return &MockAccessServiceGetUserByNameCall{Call: call}
}

// MockAccessServiceGetUserByNameCall wrap *gomock.Call
type MockAccessServiceGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceGetUserByNameCall) Do(f func(context.Context, user.Name) (user.User, error)) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceGetUserByNameCall) DoAndReturn(f func(context.Context, user.Name) (user.User, error)) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastModelLogin mocks base method.
func (m *MockAccessService) LastModelLogin(arg0 context.Context, arg1 user.Name, arg2 model.UUID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastModelLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastModelLogin indicates an expected call of LastModelLogin.
func (mr *MockAccessServiceMockRecorder) LastModelLogin(arg0, arg1, arg2 any) *MockAccessServiceLastModelLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModelLogin", reflect.TypeOf((*MockAccessService)(nil).LastModelLogin), arg0, arg1, arg2)
	return &MockAccessServiceLastModelLoginCall{Call: call}
}

// MockAccessServiceLastModelLoginCall wrap *gomock.Call
type MockAccessServiceLastModelLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceLastModelLoginCall) Return(arg0 time.Time, arg1 error) *MockAccessServiceLastModelLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceLastModelLoginCall) Do(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockAccessServiceLastModelLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceLastModelLoginCall) DoAndReturn(f func(context.Context, user.Name, model.UUID) (time.Time, error)) *MockAccessServiceLastModelLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockAccessService) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 user.Name, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockAccessServiceMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockAccessServiceReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockAccessService)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockAccessServiceReadUserAccessLevelForTargetCall{Call: call}
}

// MockAccessServiceReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockAccessServiceReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Do(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockAccessService) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockAccessServiceMockRecorder) UpdatePermission(arg0, arg1 any) *MockAccessServiceUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockAccessService)(nil).UpdatePermission), arg0, arg1)
	return &MockAccessServiceUpdatePermissionCall{Call: call}
}

// MockAccessServiceUpdatePermissionCall wrap *gomock.Call
type MockAccessServiceUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceUpdatePermissionCall) Return(arg0 error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretBackendService is a mock of SecretBackendService interface.
type MockSecretBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendServiceMockRecorder
}

// MockSecretBackendServiceMockRecorder is the mock recorder for MockSecretBackendService.
type MockSecretBackendServiceMockRecorder struct {
	mock *MockSecretBackendService
}

// NewMockSecretBackendService creates a new mock instance.
func NewMockSecretBackendService(ctrl *gomock.Controller) *MockSecretBackendService {
	mock := &MockSecretBackendService{ctrl: ctrl}
	mock.recorder = &MockSecretBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendService) EXPECT() *MockSecretBackendServiceMockRecorder {
	return m.recorder
}

// BackendSummaryInfoForModel mocks base method.
func (m *MockSecretBackendService) BackendSummaryInfoForModel(arg0 context.Context, arg1 model.UUID) ([]*service0.SecretBackendInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendSummaryInfoForModel", arg0, arg1)
	ret0, _ := ret[0].([]*service0.SecretBackendInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendSummaryInfoForModel indicates an expected call of BackendSummaryInfoForModel.
func (mr *MockSecretBackendServiceMockRecorder) BackendSummaryInfoForModel(arg0, arg1 any) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendSummaryInfoForModel", reflect.TypeOf((*MockSecretBackendService)(nil).BackendSummaryInfoForModel), arg0, arg1)
	return &MockSecretBackendServiceBackendSummaryInfoForModelCall{Call: call}
}

// MockSecretBackendServiceBackendSummaryInfoForModelCall wrap *gomock.Call
type MockSecretBackendServiceBackendSummaryInfoForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendServiceBackendSummaryInfoForModelCall) Return(arg0 []*service0.SecretBackendInfo, arg1 error) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendServiceBackendSummaryInfoForModelCall) Do(f func(context.Context, model.UUID) ([]*service0.SecretBackendInfo, error)) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendServiceBackendSummaryInfoForModelCall) DoAndReturn(f func(context.Context, model.UUID) ([]*service0.SecretBackendInfo, error)) *MockSecretBackendServiceBackendSummaryInfoForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelService) CreateModel(arg0 context.Context, arg1 model0.ModelCreationArgs) (model.UUID, func(context.Context) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(func(context.Context) error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelServiceMockRecorder) CreateModel(arg0, arg1 any) *MockModelServiceCreateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelService)(nil).CreateModel), arg0, arg1)
	return &MockModelServiceCreateModelCall{Call: call}
}

// MockModelServiceCreateModelCall wrap *gomock.Call
type MockModelServiceCreateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceCreateModelCall) Return(arg0 model.UUID, arg1 func(context.Context) error, arg2 error) *MockModelServiceCreateModelCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceCreateModelCall) Do(f func(context.Context, model0.ModelCreationArgs) (model.UUID, func(context.Context) error, error)) *MockModelServiceCreateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceCreateModelCall) DoAndReturn(f func(context.Context, model0.ModelCreationArgs) (model.UUID, func(context.Context) error, error)) *MockModelServiceCreateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DefaultModelCloudNameAndCredential mocks base method.
func (m *MockModelService) DefaultModelCloudNameAndCredential(arg0 context.Context) (string, credential.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultModelCloudNameAndCredential", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(credential.Key)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DefaultModelCloudNameAndCredential indicates an expected call of DefaultModelCloudNameAndCredential.
func (mr *MockModelServiceMockRecorder) DefaultModelCloudNameAndCredential(arg0 any) *MockModelServiceDefaultModelCloudNameAndCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultModelCloudNameAndCredential", reflect.TypeOf((*MockModelService)(nil).DefaultModelCloudNameAndCredential), arg0)
	return &MockModelServiceDefaultModelCloudNameAndCredentialCall{Call: call}
}

// MockModelServiceDefaultModelCloudNameAndCredentialCall wrap *gomock.Call
type MockModelServiceDefaultModelCloudNameAndCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceDefaultModelCloudNameAndCredentialCall) Return(arg0 string, arg1 credential.Key, arg2 error) *MockModelServiceDefaultModelCloudNameAndCredentialCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceDefaultModelCloudNameAndCredentialCall) Do(f func(context.Context) (string, credential.Key, error)) *MockModelServiceDefaultModelCloudNameAndCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceDefaultModelCloudNameAndCredentialCall) DoAndReturn(f func(context.Context) (string, credential.Key, error)) *MockModelServiceDefaultModelCloudNameAndCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteModel mocks base method.
func (m *MockModelService) DeleteModel(arg0 context.Context, arg1 model.UUID, arg2 ...model0.DeleteModelOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelServiceMockRecorder) DeleteModel(arg0, arg1 any, arg2 ...any) *MockModelServiceDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelService)(nil).DeleteModel), varargs...)
	return &MockModelServiceDeleteModelCall{Call: call}
}

// MockModelServiceDeleteModelCall wrap *gomock.Call
type MockModelServiceDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceDeleteModelCall) Return(arg0 error) *MockModelServiceDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceDeleteModelCall) Do(f func(context.Context, model.UUID, ...model0.DeleteModelOption) error) *MockModelServiceDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceDeleteModelCall) DoAndReturn(f func(context.Context, model.UUID, ...model0.DeleteModelOption) error) *MockModelServiceDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUser mocks base method.
func (m *MockModelService) GetModelUser(arg0 context.Context, arg1 model.UUID, arg2 user.Name) (model.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUser indicates an expected call of GetModelUser.
func (mr *MockModelServiceMockRecorder) GetModelUser(arg0, arg1, arg2 any) *MockModelServiceGetModelUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUser", reflect.TypeOf((*MockModelService)(nil).GetModelUser), arg0, arg1, arg2)
	return &MockModelServiceGetModelUserCall{Call: call}
}

// MockModelServiceGetModelUserCall wrap *gomock.Call
type MockModelServiceGetModelUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelUserCall) Return(arg0 model.ModelUserInfo, arg1 error) *MockModelServiceGetModelUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelUserCall) Do(f func(context.Context, model.UUID, user.Name) (model.ModelUserInfo, error)) *MockModelServiceGetModelUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelUserCall) DoAndReturn(f func(context.Context, model.UUID, user.Name) (model.ModelUserInfo, error)) *MockModelServiceGetModelUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUsers mocks base method.
func (m *MockModelService) GetModelUsers(arg0 context.Context, arg1 model.UUID) ([]model.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUsers", arg0, arg1)
	ret0, _ := ret[0].([]model.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUsers indicates an expected call of GetModelUsers.
func (mr *MockModelServiceMockRecorder) GetModelUsers(arg0, arg1 any) *MockModelServiceGetModelUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUsers", reflect.TypeOf((*MockModelService)(nil).GetModelUsers), arg0, arg1)
	return &MockModelServiceGetModelUsersCall{Call: call}
}

// MockModelServiceGetModelUsersCall wrap *gomock.Call
type MockModelServiceGetModelUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelUsersCall) Return(arg0 []model.ModelUserInfo, arg1 error) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelUsersCall) Do(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelUsersCall) DoAndReturn(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockModelServiceGetModelUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModelSummaries mocks base method.
func (m *MockModelService) ListAllModelSummaries(arg0 context.Context) ([]model.ModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModelSummaries", arg0)
	ret0, _ := ret[0].([]model.ModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModelSummaries indicates an expected call of ListAllModelSummaries.
func (mr *MockModelServiceMockRecorder) ListAllModelSummaries(arg0 any) *MockModelServiceListAllModelSummariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModelSummaries", reflect.TypeOf((*MockModelService)(nil).ListAllModelSummaries), arg0)
	return &MockModelServiceListAllModelSummariesCall{Call: call}
}

// MockModelServiceListAllModelSummariesCall wrap *gomock.Call
type MockModelServiceListAllModelSummariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListAllModelSummariesCall) Return(arg0 []model.ModelSummary, arg1 error) *MockModelServiceListAllModelSummariesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListAllModelSummariesCall) Do(f func(context.Context) ([]model.ModelSummary, error)) *MockModelServiceListAllModelSummariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListAllModelSummariesCall) DoAndReturn(f func(context.Context) ([]model.ModelSummary, error)) *MockModelServiceListAllModelSummariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModels mocks base method.
func (m *MockModelService) ListAllModels(arg0 context.Context) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModels", arg0)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModels indicates an expected call of ListAllModels.
func (mr *MockModelServiceMockRecorder) ListAllModels(arg0 any) *MockModelServiceListAllModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModels", reflect.TypeOf((*MockModelService)(nil).ListAllModels), arg0)
	return &MockModelServiceListAllModelsCall{Call: call}
}

// MockModelServiceListAllModelsCall wrap *gomock.Call
type MockModelServiceListAllModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListAllModelsCall) Return(arg0 []model.Model, arg1 error) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListAllModelsCall) Do(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListAllModelsCall) DoAndReturn(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelSummariesForUser mocks base method.
func (m *MockModelService) ListModelSummariesForUser(arg0 context.Context, arg1 user.Name) ([]model.UserModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelSummariesForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.UserModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelSummariesForUser indicates an expected call of ListModelSummariesForUser.
func (mr *MockModelServiceMockRecorder) ListModelSummariesForUser(arg0, arg1 any) *MockModelServiceListModelSummariesForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelSummariesForUser", reflect.TypeOf((*MockModelService)(nil).ListModelSummariesForUser), arg0, arg1)
	return &MockModelServiceListModelSummariesForUserCall{Call: call}
}

// MockModelServiceListModelSummariesForUserCall wrap *gomock.Call
type MockModelServiceListModelSummariesForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListModelSummariesForUserCall) Return(arg0 []model.UserModelSummary, arg1 error) *MockModelServiceListModelSummariesForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListModelSummariesForUserCall) Do(f func(context.Context, user.Name) ([]model.UserModelSummary, error)) *MockModelServiceListModelSummariesForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListModelSummariesForUserCall) DoAndReturn(f func(context.Context, user.Name) ([]model.UserModelSummary, error)) *MockModelServiceListModelSummariesForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelsForUser mocks base method.
func (m *MockModelService) ListModelsForUser(arg0 context.Context, arg1 user.UUID) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelsForUser indicates an expected call of ListModelsForUser.
func (mr *MockModelServiceMockRecorder) ListModelsForUser(arg0, arg1 any) *MockModelServiceListModelsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsForUser", reflect.TypeOf((*MockModelService)(nil).ListModelsForUser), arg0, arg1)
	return &MockModelServiceListModelsForUserCall{Call: call}
}

// MockModelServiceListModelsForUserCall wrap *gomock.Call
type MockModelServiceListModelsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListModelsForUserCall) Return(arg0 []model.Model, arg1 error) *MockModelServiceListModelsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListModelsForUserCall) Do(f func(context.Context, user.UUID) ([]model.Model, error)) *MockModelServiceListModelsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListModelsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.Model, error)) *MockModelServiceListModelsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// DomainServicesForModel mocks base method.
func (m *MockDomainServicesGetter) DomainServicesForModel(arg0 model.UUID) modelmanager.ModelDomainServices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainServicesForModel", arg0)
	ret0, _ := ret[0].(modelmanager.ModelDomainServices)
	return ret0
}

// DomainServicesForModel indicates an expected call of DomainServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) DomainServicesForModel(arg0 any) *MockDomainServicesGetterDomainServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).DomainServicesForModel), arg0)
	return &MockDomainServicesGetterDomainServicesForModelCall{Call: call}
}

// MockDomainServicesGetterDomainServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterDomainServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterDomainServicesForModelCall) Return(arg0 modelmanager.ModelDomainServices) *MockDomainServicesGetterDomainServicesForModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterDomainServicesForModelCall) Do(f func(model.UUID) modelmanager.ModelDomainServices) *MockDomainServicesGetterDomainServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterDomainServicesForModelCall) DoAndReturn(f func(model.UUID) modelmanager.ModelDomainServices) *MockDomainServicesGetterDomainServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDefaultsService is a mock of ModelDefaultsService interface.
type MockModelDefaultsService struct {
	ctrl     *gomock.Controller
	recorder *MockModelDefaultsServiceMockRecorder
}

// MockModelDefaultsServiceMockRecorder is the mock recorder for MockModelDefaultsService.
type MockModelDefaultsServiceMockRecorder struct {
	mock *MockModelDefaultsService
}

// NewMockModelDefaultsService creates a new mock instance.
func NewMockModelDefaultsService(ctrl *gomock.Controller) *MockModelDefaultsService {
	mock := &MockModelDefaultsService{ctrl: ctrl}
	mock.recorder = &MockModelDefaultsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDefaultsService) EXPECT() *MockModelDefaultsServiceMockRecorder {
	return m.recorder
}

// ModelDefaultsProvider mocks base method.
func (m *MockModelDefaultsService) ModelDefaultsProvider(arg0 model.UUID) service.ModelDefaultsProviderFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelDefaultsProvider", arg0)
	ret0, _ := ret[0].(service.ModelDefaultsProviderFunc)
	return ret0
}

// ModelDefaultsProvider indicates an expected call of ModelDefaultsProvider.
func (mr *MockModelDefaultsServiceMockRecorder) ModelDefaultsProvider(arg0 any) *MockModelDefaultsServiceModelDefaultsProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelDefaultsProvider", reflect.TypeOf((*MockModelDefaultsService)(nil).ModelDefaultsProvider), arg0)
	return &MockModelDefaultsServiceModelDefaultsProviderCall{Call: call}
}

// MockModelDefaultsServiceModelDefaultsProviderCall wrap *gomock.Call
type MockModelDefaultsServiceModelDefaultsProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDefaultsServiceModelDefaultsProviderCall) Return(arg0 service.ModelDefaultsProviderFunc) *MockModelDefaultsServiceModelDefaultsProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDefaultsServiceModelDefaultsProviderCall) Do(f func(model.UUID) service.ModelDefaultsProviderFunc) *MockModelDefaultsServiceModelDefaultsProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDefaultsServiceModelDefaultsProviderCall) DoAndReturn(f func(model.UUID) service.ModelDefaultsProviderFunc) *MockModelDefaultsServiceModelDefaultsProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelInfoService) CreateModel(arg0 context.Context, arg1 controller.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelInfoServiceMockRecorder) CreateModel(arg0, arg1 any) *MockModelInfoServiceCreateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelInfoService)(nil).CreateModel), arg0, arg1)
	return &MockModelInfoServiceCreateModelCall{Call: call}
}

// MockModelInfoServiceCreateModelCall wrap *gomock.Call
type MockModelInfoServiceCreateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceCreateModelCall) Return(arg0 error) *MockModelInfoServiceCreateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceCreateModelCall) Do(f func(context.Context, controller.UUID) error) *MockModelInfoServiceCreateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceCreateModelCall) DoAndReturn(f func(context.Context, controller.UUID) error) *MockModelInfoServiceCreateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteModel mocks base method.
func (m *MockModelInfoService) DeleteModel(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelInfoServiceMockRecorder) DeleteModel(arg0 any) *MockModelInfoServiceDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelInfoService)(nil).DeleteModel), arg0)
	return &MockModelInfoServiceDeleteModelCall{Call: call}
}

// MockModelInfoServiceDeleteModelCall wrap *gomock.Call
type MockModelInfoServiceDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceDeleteModelCall) Return(arg0 error) *MockModelInfoServiceDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceDeleteModelCall) Do(f func(context.Context) error) *MockModelInfoServiceDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceDeleteModelCall) DoAndReturn(f func(context.Context) error) *MockModelInfoServiceDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ReadOnlyModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ReadOnlyModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ReadOnlyModel, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ReadOnlyModel, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ReadOnlyModel, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelConfig mocks base method.
func (m *MockModelConfigService) SetModelConfig(arg0 context.Context, arg1 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelConfig indicates an expected call of SetModelConfig.
func (mr *MockModelConfigServiceMockRecorder) SetModelConfig(arg0, arg1 any) *MockModelConfigServiceSetModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).SetModelConfig), arg0, arg1)
	return &MockModelConfigServiceSetModelConfigCall{Call: call}
}

// MockModelConfigServiceSetModelConfigCall wrap *gomock.Call
type MockModelConfigServiceSetModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceSetModelConfigCall) Return(arg0 error) *MockModelConfigServiceSetModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceSetModelConfigCall) Do(f func(context.Context, map[string]any) error) *MockModelConfigServiceSetModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceSetModelConfigCall) DoAndReturn(f func(context.Context, map[string]any) error) *MockModelConfigServiceSetModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// ReloadSpaces mocks base method.
func (m *MockNetworkService) ReloadSpaces(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSpaces indicates an expected call of ReloadSpaces.
func (mr *MockNetworkServiceMockRecorder) ReloadSpaces(arg0 any) *MockNetworkServiceReloadSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSpaces", reflect.TypeOf((*MockNetworkService)(nil).ReloadSpaces), arg0)
	return &MockNetworkServiceReloadSpacesCall{Call: call}
}

// MockNetworkServiceReloadSpacesCall wrap *gomock.Call
type MockNetworkServiceReloadSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceReloadSpacesCall) Return(arg0 error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceReloadSpacesCall) Do(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceReloadSpacesCall) DoAndReturn(f func(context.Context) error) *MockNetworkServiceReloadSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelDomainServices is a mock of ModelDomainServices interface.
type MockModelDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockModelDomainServicesMockRecorder
}

// MockModelDomainServicesMockRecorder is the mock recorder for MockModelDomainServices.
type MockModelDomainServicesMockRecorder struct {
	mock *MockModelDomainServices
}

// NewMockModelDomainServices creates a new mock instance.
func NewMockModelDomainServices(ctrl *gomock.Controller) *MockModelDomainServices {
	mock := &MockModelDomainServices{ctrl: ctrl}
	mock.recorder = &MockModelDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDomainServices) EXPECT() *MockModelDomainServicesMockRecorder {
	return m.recorder
}

// Agent mocks base method.
func (m *MockModelDomainServices) Agent() modelmanager.ModelAgentService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(modelmanager.ModelAgentService)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockModelDomainServicesMockRecorder) Agent() *MockModelDomainServicesAgentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockModelDomainServices)(nil).Agent))
	return &MockModelDomainServicesAgentCall{Call: call}
}

// MockModelDomainServicesAgentCall wrap *gomock.Call
type MockModelDomainServicesAgentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesAgentCall) Return(arg0 modelmanager.ModelAgentService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesAgentCall) Do(f func() modelmanager.ModelAgentService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesAgentCall) DoAndReturn(f func() modelmanager.ModelAgentService) *MockModelDomainServicesAgentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockCommand mocks base method.
func (m *MockModelDomainServices) BlockCommand() modelmanager.BlockCommandService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCommand")
	ret0, _ := ret[0].(modelmanager.BlockCommandService)
	return ret0
}

// BlockCommand indicates an expected call of BlockCommand.
func (mr *MockModelDomainServicesMockRecorder) BlockCommand() *MockModelDomainServicesBlockCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCommand", reflect.TypeOf((*MockModelDomainServices)(nil).BlockCommand))
	return &MockModelDomainServicesBlockCommandCall{Call: call}
}

// MockModelDomainServicesBlockCommandCall wrap *gomock.Call
type MockModelDomainServicesBlockCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesBlockCommandCall) Return(arg0 modelmanager.BlockCommandService) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesBlockCommandCall) Do(f func() modelmanager.BlockCommandService) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesBlockCommandCall) DoAndReturn(f func() modelmanager.BlockCommandService) *MockModelDomainServicesBlockCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockModelDomainServices) Config() modelmanager.ModelConfigService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(modelmanager.ModelConfigService)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockModelDomainServicesMockRecorder) Config() *MockModelDomainServicesConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockModelDomainServices)(nil).Config))
	return &MockModelDomainServicesConfigCall{Call: call}
}

// MockModelDomainServicesConfigCall wrap *gomock.Call
type MockModelDomainServicesConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesConfigCall) Return(arg0 modelmanager.ModelConfigService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesConfigCall) Do(f func() modelmanager.ModelConfigService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesConfigCall) DoAndReturn(f func() modelmanager.ModelConfigService) *MockModelDomainServicesConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelInfo mocks base method.
func (m *MockModelDomainServices) ModelInfo() modelmanager.ModelInfoService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo")
	ret0, _ := ret[0].(modelmanager.ModelInfoService)
	return ret0
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockModelDomainServicesMockRecorder) ModelInfo() *MockModelDomainServicesModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockModelDomainServices)(nil).ModelInfo))
	return &MockModelDomainServicesModelInfoCall{Call: call}
}

// MockModelDomainServicesModelInfoCall wrap *gomock.Call
type MockModelDomainServicesModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesModelInfoCall) Return(arg0 modelmanager.ModelInfoService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesModelInfoCall) Do(f func() modelmanager.ModelInfoService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesModelInfoCall) DoAndReturn(f func() modelmanager.ModelInfoService) *MockModelDomainServicesModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Network mocks base method.
func (m *MockModelDomainServices) Network() modelmanager.NetworkService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(modelmanager.NetworkService)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockModelDomainServicesMockRecorder) Network() *MockModelDomainServicesNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockModelDomainServices)(nil).Network))
	return &MockModelDomainServicesNetworkCall{Call: call}
}

// MockModelDomainServicesNetworkCall wrap *gomock.Call
type MockModelDomainServicesNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDomainServicesNetworkCall) Return(arg0 modelmanager.NetworkService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDomainServicesNetworkCall) Do(f func() modelmanager.NetworkService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDomainServicesNetworkCall) DoAndReturn(f func() modelmanager.NetworkService) *MockModelDomainServicesNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// EnsureDeadMachine mocks base method.
func (m *MockMachineService) EnsureDeadMachine(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeadMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeadMachine indicates an expected call of EnsureDeadMachine.
func (mr *MockMachineServiceMockRecorder) EnsureDeadMachine(arg0, arg1 any) *MockMachineServiceEnsureDeadMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeadMachine", reflect.TypeOf((*MockMachineService)(nil).EnsureDeadMachine), arg0, arg1)
	return &MockMachineServiceEnsureDeadMachineCall{Call: call}
}

// MockMachineServiceEnsureDeadMachineCall wrap *gomock.Call
type MockMachineServiceEnsureDeadMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceEnsureDeadMachineCall) Return(arg0 error) *MockMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceEnsureDeadMachineCall) Do(f func(context.Context, machine.Name) error) *MockMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceEnsureDeadMachineCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockMachineServiceEnsureDeadMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 string, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (string, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (string, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HardwareCharacteristics mocks base method.
func (m *MockMachineService) HardwareCharacteristics(arg0 context.Context, arg1 string) (*instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(*instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HardwareCharacteristics indicates an expected call of HardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) HardwareCharacteristics(arg0, arg1 any) *MockMachineServiceHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).HardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceHardwareCharacteristicsCall) Return(arg0 *instance.HardwareCharacteristics, arg1 error) *MockMachineServiceHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceHardwareCharacteristicsCall) Do(f func(context.Context, string) (*instance.HardwareCharacteristics, error)) *MockMachineServiceHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, string) (*instance.HardwareCharacteristics, error)) *MockMachineServiceHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceID mocks base method.
func (m *MockMachineService) InstanceID(arg0 context.Context, arg1 string) (instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceID", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceID indicates an expected call of InstanceID.
func (mr *MockMachineServiceMockRecorder) InstanceID(arg0, arg1 any) *MockMachineServiceInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceID", reflect.TypeOf((*MockMachineService)(nil).InstanceID), arg0, arg1)
	return &MockMachineServiceInstanceIDCall{Call: call}
}

// MockMachineServiceInstanceIDCall wrap *gomock.Call
type MockMachineServiceInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceInstanceIDCall) Return(arg0 instance.Id, arg1 error) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceInstanceIDCall) Do(f func(context.Context, string) (instance.Id, error)) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceInstanceIDCall) DoAndReturn(f func(context.Context, string) (instance.Id, error)) *MockMachineServiceInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InstanceIDAndName mocks base method.
func (m *MockMachineService) InstanceIDAndName(arg0 context.Context, arg1 string) (instance.Id, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIDAndName", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InstanceIDAndName indicates an expected call of InstanceIDAndName.
func (mr *MockMachineServiceMockRecorder) InstanceIDAndName(arg0, arg1 any) *MockMachineServiceInstanceIDAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIDAndName", reflect.TypeOf((*MockMachineService)(nil).InstanceIDAndName), arg0, arg1)
	return &MockMachineServiceInstanceIDAndNameCall{Call: call}
}

// MockMachineServiceInstanceIDAndNameCall wrap *gomock.Call
type MockMachineServiceInstanceIDAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceInstanceIDAndNameCall) Return(arg0 instance.Id, arg1 string, arg2 error) *MockMachineServiceInstanceIDAndNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceInstanceIDAndNameCall) Do(f func(context.Context, string) (instance.Id, string, error)) *MockMachineServiceInstanceIDAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceInstanceIDAndNameCall) DoAndReturn(f func(context.Context, string) (instance.Id, string, error)) *MockMachineServiceInstanceIDAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// GetModelAgentVersion mocks base method.
func (m *MockModelAgentService) GetModelAgentVersion(arg0 context.Context) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelAgentVersion", arg0)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelAgentVersion indicates an expected call of GetModelAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetModelAgentVersion(arg0 any) *MockModelAgentServiceGetModelAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetModelAgentVersion), arg0)
	return &MockModelAgentServiceGetModelAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetModelAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetModelAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetModelAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockModelAgentServiceGetModelAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetModelAgentVersionCall) Do(f func(context.Context) (version.Number, error)) *MockModelAgentServiceGetModelAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetModelAgentVersionCall) DoAndReturn(f func(context.Context) (version.Number, error)) *MockModelAgentServiceGetModelAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
