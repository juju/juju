// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/block (interfaces: BlockCommandService,Authorizer)
//
// Generated by this command:
//
//	mockgen -typed -package block -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/block BlockCommandService,Authorizer
//

// Package block is a generated GoMock package.
package block

import (
	context "context"
	reflect "reflect"

	permission "github.com/juju/juju/core/permission"
	blockcommand "github.com/juju/juju/domain/blockcommand"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockCommandService is a mock of BlockCommandService interface.
type MockBlockCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCommandServiceMockRecorder
}

// MockBlockCommandServiceMockRecorder is the mock recorder for MockBlockCommandService.
type MockBlockCommandServiceMockRecorder struct {
	mock *MockBlockCommandService
}

// NewMockBlockCommandService creates a new mock instance.
func NewMockBlockCommandService(ctrl *gomock.Controller) *MockBlockCommandService {
	mock := &MockBlockCommandService{ctrl: ctrl}
	mock.recorder = &MockBlockCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockCommandService) EXPECT() *MockBlockCommandServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBlockCommandService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetBlocks mocks base method.
func (m *MockBlockCommandService) GetBlocks(arg0 context.Context) ([]blockcommand.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", arg0)
	ret0, _ := ret[0].([]blockcommand.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBlockCommandServiceMockRecorder) GetBlocks(arg0 any) *MockBlockCommandServiceGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlocks), arg0)
	return &MockBlockCommandServiceGetBlocksCall{Call: call}
}

// MockBlockCommandServiceGetBlocksCall wrap *gomock.Call
type MockBlockCommandServiceGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlocksCall) Return(arg0 []blockcommand.Block, arg1 error) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlocksCall) Do(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlocksCall) DoAndReturn(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SwitchBlockOff mocks base method.
func (m *MockBlockCommandService) SwitchBlockOff(arg0 context.Context, arg1 blockcommand.BlockType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchBlockOff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchBlockOff indicates an expected call of SwitchBlockOff.
func (mr *MockBlockCommandServiceMockRecorder) SwitchBlockOff(arg0, arg1 any) *MockBlockCommandServiceSwitchBlockOffCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchBlockOff", reflect.TypeOf((*MockBlockCommandService)(nil).SwitchBlockOff), arg0, arg1)
	return &MockBlockCommandServiceSwitchBlockOffCall{Call: call}
}

// MockBlockCommandServiceSwitchBlockOffCall wrap *gomock.Call
type MockBlockCommandServiceSwitchBlockOffCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceSwitchBlockOffCall) Return(arg0 error) *MockBlockCommandServiceSwitchBlockOffCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceSwitchBlockOffCall) Do(f func(context.Context, blockcommand.BlockType) error) *MockBlockCommandServiceSwitchBlockOffCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceSwitchBlockOffCall) DoAndReturn(f func(context.Context, blockcommand.BlockType) error) *MockBlockCommandServiceSwitchBlockOffCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SwitchBlockOn mocks base method.
func (m *MockBlockCommandService) SwitchBlockOn(arg0 context.Context, arg1 blockcommand.BlockType, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchBlockOn", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchBlockOn indicates an expected call of SwitchBlockOn.
func (mr *MockBlockCommandServiceMockRecorder) SwitchBlockOn(arg0, arg1, arg2 any) *MockBlockCommandServiceSwitchBlockOnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchBlockOn", reflect.TypeOf((*MockBlockCommandService)(nil).SwitchBlockOn), arg0, arg1, arg2)
	return &MockBlockCommandServiceSwitchBlockOnCall{Call: call}
}

// MockBlockCommandServiceSwitchBlockOnCall wrap *gomock.Call
type MockBlockCommandServiceSwitchBlockOnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceSwitchBlockOnCall) Return(arg0 error) *MockBlockCommandServiceSwitchBlockOnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceSwitchBlockOnCall) Do(f func(context.Context, blockcommand.BlockType, string) error) *MockBlockCommandServiceSwitchBlockOnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceSwitchBlockOnCall) DoAndReturn(f func(context.Context, blockcommand.BlockType, string) error) *MockBlockCommandServiceSwitchBlockOnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAuthorizer) ISGOMOCK() struct{} {
	return struct{}{}
}

// HasPermission mocks base method.
func (m *MockAuthorizer) HasPermission(arg0 context.Context, arg1 permission.Access, arg2 names.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockAuthorizerMockRecorder) HasPermission(arg0, arg1, arg2 any) *MockAuthorizerHasPermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockAuthorizer)(nil).HasPermission), arg0, arg1, arg2)
	return &MockAuthorizerHasPermissionCall{Call: call}
}

// MockAuthorizerHasPermissionCall wrap *gomock.Call
type MockAuthorizerHasPermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorizerHasPermissionCall) Return(arg0 error) *MockAuthorizerHasPermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorizerHasPermissionCall) Do(f func(context.Context, permission.Access, names.Tag) error) *MockAuthorizerHasPermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorizerHasPermissionCall) DoAndReturn(f func(context.Context, permission.Access, names.Tag) error) *MockAuthorizerHasPermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
