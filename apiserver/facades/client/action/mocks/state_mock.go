// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: Action,ActionReceiver)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v4"
)

// MockAction is a mock of Action interface.
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction.
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance.
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// ActionTag mocks base method.
func (m *MockAction) ActionTag() names.ActionTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionTag")
	ret0, _ := ret[0].(names.ActionTag)
	return ret0
}

// ActionTag indicates an expected call of ActionTag.
func (mr *MockActionMockRecorder) ActionTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionTag", reflect.TypeOf((*MockAction)(nil).ActionTag))
}

// Begin mocks base method.
func (m *MockAction) Begin() (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockActionMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockAction)(nil).Begin))
}

// Cancel mocks base method.
func (m *MockAction) Cancel() (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockActionMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockAction)(nil).Cancel))
}

// Completed mocks base method.
func (m *MockAction) Completed() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Completed")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Completed indicates an expected call of Completed.
func (mr *MockActionMockRecorder) Completed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completed", reflect.TypeOf((*MockAction)(nil).Completed))
}

// Enqueued mocks base method.
func (m *MockAction) Enqueued() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueued")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Enqueued indicates an expected call of Enqueued.
func (mr *MockActionMockRecorder) Enqueued() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueued", reflect.TypeOf((*MockAction)(nil).Enqueued))
}

// ExecutionGroup mocks base method.
func (m *MockAction) ExecutionGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExecutionGroup indicates an expected call of ExecutionGroup.
func (mr *MockActionMockRecorder) ExecutionGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionGroup", reflect.TypeOf((*MockAction)(nil).ExecutionGroup))
}

// Finish mocks base method.
func (m *MockAction) Finish(arg0 state.ActionResults) (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", arg0)
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finish indicates an expected call of Finish.
func (mr *MockActionMockRecorder) Finish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockAction)(nil).Finish), arg0)
}

// Id mocks base method.
func (m *MockAction) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockActionMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockAction)(nil).Id))
}

// Log mocks base method.
func (m *MockAction) Log(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockActionMockRecorder) Log(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAction)(nil).Log), arg0)
}

// Messages mocks base method.
func (m *MockAction) Messages() []state.ActionMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].([]state.ActionMessage)
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockActionMockRecorder) Messages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockAction)(nil).Messages))
}

// Name mocks base method.
func (m *MockAction) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockActionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAction)(nil).Name))
}

// Parallel mocks base method.
func (m *MockAction) Parallel() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parallel")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Parallel indicates an expected call of Parallel.
func (mr *MockActionMockRecorder) Parallel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parallel", reflect.TypeOf((*MockAction)(nil).Parallel))
}

// Parameters mocks base method.
func (m *MockAction) Parameters() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockActionMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockAction)(nil).Parameters))
}

// Receiver mocks base method.
func (m *MockAction) Receiver() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receiver")
	ret0, _ := ret[0].(string)
	return ret0
}

// Receiver indicates an expected call of Receiver.
func (mr *MockActionMockRecorder) Receiver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receiver", reflect.TypeOf((*MockAction)(nil).Receiver))
}

// Refresh mocks base method.
func (m *MockAction) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockActionMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAction)(nil).Refresh))
}

// Results mocks base method.
func (m *MockAction) Results() (map[string]interface{}, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockActionMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockAction)(nil).Results))
}

// Started mocks base method.
func (m *MockAction) Started() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Started")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Started indicates an expected call of Started.
func (mr *MockActionMockRecorder) Started() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Started", reflect.TypeOf((*MockAction)(nil).Started))
}

// Status mocks base method.
func (m *MockAction) Status() state.ActionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(state.ActionStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockActionMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAction)(nil).Status))
}

// Tag mocks base method.
func (m *MockAction) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockActionMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockAction)(nil).Tag))
}

// MockActionReceiver is a mock of ActionReceiver interface.
type MockActionReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockActionReceiverMockRecorder
}

// MockActionReceiverMockRecorder is the mock recorder for MockActionReceiver.
type MockActionReceiverMockRecorder struct {
	mock *MockActionReceiver
}

// NewMockActionReceiver creates a new mock instance.
func NewMockActionReceiver(ctrl *gomock.Controller) *MockActionReceiver {
	mock := &MockActionReceiver{ctrl: ctrl}
	mock.recorder = &MockActionReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionReceiver) EXPECT() *MockActionReceiverMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockActionReceiver) Actions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Actions indicates an expected call of Actions.
func (mr *MockActionReceiverMockRecorder) Actions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockActionReceiver)(nil).Actions))
}

// CancelAction mocks base method.
func (m *MockActionReceiver) CancelAction(arg0 state.Action) (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAction", arg0)
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAction indicates an expected call of CancelAction.
func (mr *MockActionReceiverMockRecorder) CancelAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAction", reflect.TypeOf((*MockActionReceiver)(nil).CancelAction), arg0)
}

// CompletedActions mocks base method.
func (m *MockActionReceiver) CompletedActions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletedActions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletedActions indicates an expected call of CompletedActions.
func (mr *MockActionReceiverMockRecorder) CompletedActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletedActions", reflect.TypeOf((*MockActionReceiver)(nil).CompletedActions))
}

// PendingActions mocks base method.
func (m *MockActionReceiver) PendingActions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingActions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingActions indicates an expected call of PendingActions.
func (mr *MockActionReceiverMockRecorder) PendingActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingActions", reflect.TypeOf((*MockActionReceiver)(nil).PendingActions))
}

// PrepareActionPayload mocks base method.
func (m *MockActionReceiver) PrepareActionPayload(arg0 string, arg1 map[string]interface{}, arg2 *bool, arg3 *string) (map[string]interface{}, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareActionPayload", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// PrepareActionPayload indicates an expected call of PrepareActionPayload.
func (mr *MockActionReceiverMockRecorder) PrepareActionPayload(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareActionPayload", reflect.TypeOf((*MockActionReceiver)(nil).PrepareActionPayload), arg0, arg1, arg2, arg3)
}

// RunningActions mocks base method.
func (m *MockActionReceiver) RunningActions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunningActions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunningActions indicates an expected call of RunningActions.
func (mr *MockActionReceiverMockRecorder) RunningActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningActions", reflect.TypeOf((*MockActionReceiver)(nil).RunningActions))
}

// Tag mocks base method.
func (m *MockActionReceiver) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockActionReceiverMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockActionReceiver)(nil).Tag))
}

// WatchActionNotifications mocks base method.
func (m *MockActionReceiver) WatchActionNotifications() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchActionNotifications")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchActionNotifications indicates an expected call of WatchActionNotifications.
func (mr *MockActionReceiverMockRecorder) WatchActionNotifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchActionNotifications", reflect.TypeOf((*MockActionReceiver)(nil).WatchActionNotifications))
}

// WatchPendingActionNotifications mocks base method.
func (m *MockActionReceiver) WatchPendingActionNotifications() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchPendingActionNotifications")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchPendingActionNotifications indicates an expected call of WatchPendingActionNotifications.
func (mr *MockActionReceiverMockRecorder) WatchPendingActionNotifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPendingActionNotifications", reflect.TypeOf((*MockActionReceiver)(nil).WatchPendingActionNotifications))
}
