// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: Action,ActionReceiver)
//
// Generated by this command:
//
//	mockgen -typed -package action -destination state_mock_test.go github.com/juju/juju/state Action,ActionReceiver
//

// Package action is a generated GoMock package.
package action

import (
	reflect "reflect"
	time "time"

	state "github.com/juju/juju/state"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockAction is a mock of Action interface.
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction.
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance.
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAction) ISGOMOCK() struct{} {
	return struct{}{}
}

// ActionTag mocks base method.
func (m *MockAction) ActionTag() names.ActionTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionTag")
	ret0, _ := ret[0].(names.ActionTag)
	return ret0
}

// ActionTag indicates an expected call of ActionTag.
func (mr *MockActionMockRecorder) ActionTag() *MockActionActionTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionTag", reflect.TypeOf((*MockAction)(nil).ActionTag))
	return &MockActionActionTagCall{Call: call}
}

// MockActionActionTagCall wrap *gomock.Call
type MockActionActionTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionActionTagCall) Return(arg0 names.ActionTag) *MockActionActionTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionActionTagCall) Do(f func() names.ActionTag) *MockActionActionTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionActionTagCall) DoAndReturn(f func() names.ActionTag) *MockActionActionTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Begin mocks base method.
func (m *MockAction) Begin() (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockActionMockRecorder) Begin() *MockActionBeginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockAction)(nil).Begin))
	return &MockActionBeginCall{Call: call}
}

// MockActionBeginCall wrap *gomock.Call
type MockActionBeginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionBeginCall) Return(arg0 state.Action, arg1 error) *MockActionBeginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionBeginCall) Do(f func() (state.Action, error)) *MockActionBeginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionBeginCall) DoAndReturn(f func() (state.Action, error)) *MockActionBeginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Cancel mocks base method.
func (m *MockAction) Cancel() (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockActionMockRecorder) Cancel() *MockActionCancelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockAction)(nil).Cancel))
	return &MockActionCancelCall{Call: call}
}

// MockActionCancelCall wrap *gomock.Call
type MockActionCancelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionCancelCall) Return(arg0 state.Action, arg1 error) *MockActionCancelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionCancelCall) Do(f func() (state.Action, error)) *MockActionCancelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionCancelCall) DoAndReturn(f func() (state.Action, error)) *MockActionCancelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Completed mocks base method.
func (m *MockAction) Completed() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Completed")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Completed indicates an expected call of Completed.
func (mr *MockActionMockRecorder) Completed() *MockActionCompletedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completed", reflect.TypeOf((*MockAction)(nil).Completed))
	return &MockActionCompletedCall{Call: call}
}

// MockActionCompletedCall wrap *gomock.Call
type MockActionCompletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionCompletedCall) Return(arg0 time.Time) *MockActionCompletedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionCompletedCall) Do(f func() time.Time) *MockActionCompletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionCompletedCall) DoAndReturn(f func() time.Time) *MockActionCompletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Enqueued mocks base method.
func (m *MockAction) Enqueued() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueued")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Enqueued indicates an expected call of Enqueued.
func (mr *MockActionMockRecorder) Enqueued() *MockActionEnqueuedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueued", reflect.TypeOf((*MockAction)(nil).Enqueued))
	return &MockActionEnqueuedCall{Call: call}
}

// MockActionEnqueuedCall wrap *gomock.Call
type MockActionEnqueuedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionEnqueuedCall) Return(arg0 time.Time) *MockActionEnqueuedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionEnqueuedCall) Do(f func() time.Time) *MockActionEnqueuedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionEnqueuedCall) DoAndReturn(f func() time.Time) *MockActionEnqueuedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecutionGroup mocks base method.
func (m *MockAction) ExecutionGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExecutionGroup indicates an expected call of ExecutionGroup.
func (mr *MockActionMockRecorder) ExecutionGroup() *MockActionExecutionGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionGroup", reflect.TypeOf((*MockAction)(nil).ExecutionGroup))
	return &MockActionExecutionGroupCall{Call: call}
}

// MockActionExecutionGroupCall wrap *gomock.Call
type MockActionExecutionGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionExecutionGroupCall) Return(arg0 string) *MockActionExecutionGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionExecutionGroupCall) Do(f func() string) *MockActionExecutionGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionExecutionGroupCall) DoAndReturn(f func() string) *MockActionExecutionGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Finish mocks base method.
func (m *MockAction) Finish(arg0 state.ActionResults) (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", arg0)
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finish indicates an expected call of Finish.
func (mr *MockActionMockRecorder) Finish(arg0 any) *MockActionFinishCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockAction)(nil).Finish), arg0)
	return &MockActionFinishCall{Call: call}
}

// MockActionFinishCall wrap *gomock.Call
type MockActionFinishCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionFinishCall) Return(arg0 state.Action, arg1 error) *MockActionFinishCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionFinishCall) Do(f func(state.ActionResults) (state.Action, error)) *MockActionFinishCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionFinishCall) DoAndReturn(f func(state.ActionResults) (state.Action, error)) *MockActionFinishCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockAction) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockActionMockRecorder) Id() *MockActionIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockAction)(nil).Id))
	return &MockActionIdCall{Call: call}
}

// MockActionIdCall wrap *gomock.Call
type MockActionIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionIdCall) Return(arg0 string) *MockActionIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionIdCall) Do(f func() string) *MockActionIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionIdCall) DoAndReturn(f func() string) *MockActionIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Log mocks base method.
func (m *MockAction) Log(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockActionMockRecorder) Log(arg0 any) *MockActionLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAction)(nil).Log), arg0)
	return &MockActionLogCall{Call: call}
}

// MockActionLogCall wrap *gomock.Call
type MockActionLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionLogCall) Return(arg0 error) *MockActionLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionLogCall) Do(f func(string) error) *MockActionLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionLogCall) DoAndReturn(f func(string) error) *MockActionLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Messages mocks base method.
func (m *MockAction) Messages() []state.ActionMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].([]state.ActionMessage)
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockActionMockRecorder) Messages() *MockActionMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockAction)(nil).Messages))
	return &MockActionMessagesCall{Call: call}
}

// MockActionMessagesCall wrap *gomock.Call
type MockActionMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionMessagesCall) Return(arg0 []state.ActionMessage) *MockActionMessagesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionMessagesCall) Do(f func() []state.ActionMessage) *MockActionMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionMessagesCall) DoAndReturn(f func() []state.ActionMessage) *MockActionMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockAction) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockActionMockRecorder) Name() *MockActionNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAction)(nil).Name))
	return &MockActionNameCall{Call: call}
}

// MockActionNameCall wrap *gomock.Call
type MockActionNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionNameCall) Return(arg0 string) *MockActionNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionNameCall) Do(f func() string) *MockActionNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionNameCall) DoAndReturn(f func() string) *MockActionNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Parallel mocks base method.
func (m *MockAction) Parallel() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parallel")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Parallel indicates an expected call of Parallel.
func (mr *MockActionMockRecorder) Parallel() *MockActionParallelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parallel", reflect.TypeOf((*MockAction)(nil).Parallel))
	return &MockActionParallelCall{Call: call}
}

// MockActionParallelCall wrap *gomock.Call
type MockActionParallelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionParallelCall) Return(arg0 bool) *MockActionParallelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionParallelCall) Do(f func() bool) *MockActionParallelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionParallelCall) DoAndReturn(f func() bool) *MockActionParallelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Parameters mocks base method.
func (m *MockAction) Parameters() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockActionMockRecorder) Parameters() *MockActionParametersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockAction)(nil).Parameters))
	return &MockActionParametersCall{Call: call}
}

// MockActionParametersCall wrap *gomock.Call
type MockActionParametersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionParametersCall) Return(arg0 map[string]any) *MockActionParametersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionParametersCall) Do(f func() map[string]any) *MockActionParametersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionParametersCall) DoAndReturn(f func() map[string]any) *MockActionParametersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Receiver mocks base method.
func (m *MockAction) Receiver() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receiver")
	ret0, _ := ret[0].(string)
	return ret0
}

// Receiver indicates an expected call of Receiver.
func (mr *MockActionMockRecorder) Receiver() *MockActionReceiverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receiver", reflect.TypeOf((*MockAction)(nil).Receiver))
	return &MockActionReceiverCall{Call: call}
}

// MockActionReceiverCall wrap *gomock.Call
type MockActionReceiverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverCall) Return(arg0 string) *MockActionReceiverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverCall) Do(f func() string) *MockActionReceiverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverCall) DoAndReturn(f func() string) *MockActionReceiverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Refresh mocks base method.
func (m *MockAction) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockActionMockRecorder) Refresh() *MockActionRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAction)(nil).Refresh))
	return &MockActionRefreshCall{Call: call}
}

// MockActionRefreshCall wrap *gomock.Call
type MockActionRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionRefreshCall) Return(arg0 error) *MockActionRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionRefreshCall) Do(f func() error) *MockActionRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionRefreshCall) DoAndReturn(f func() error) *MockActionRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Results mocks base method.
func (m *MockAction) Results() (map[string]any, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockActionMockRecorder) Results() *MockActionResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockAction)(nil).Results))
	return &MockActionResultsCall{Call: call}
}

// MockActionResultsCall wrap *gomock.Call
type MockActionResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionResultsCall) Return(arg0 map[string]any, arg1 string) *MockActionResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionResultsCall) Do(f func() (map[string]any, string)) *MockActionResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionResultsCall) DoAndReturn(f func() (map[string]any, string)) *MockActionResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Started mocks base method.
func (m *MockAction) Started() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Started")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Started indicates an expected call of Started.
func (mr *MockActionMockRecorder) Started() *MockActionStartedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Started", reflect.TypeOf((*MockAction)(nil).Started))
	return &MockActionStartedCall{Call: call}
}

// MockActionStartedCall wrap *gomock.Call
type MockActionStartedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionStartedCall) Return(arg0 time.Time) *MockActionStartedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionStartedCall) Do(f func() time.Time) *MockActionStartedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionStartedCall) DoAndReturn(f func() time.Time) *MockActionStartedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockAction) Status() state.ActionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(state.ActionStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockActionMockRecorder) Status() *MockActionStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAction)(nil).Status))
	return &MockActionStatusCall{Call: call}
}

// MockActionStatusCall wrap *gomock.Call
type MockActionStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionStatusCall) Return(arg0 state.ActionStatus) *MockActionStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionStatusCall) Do(f func() state.ActionStatus) *MockActionStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionStatusCall) DoAndReturn(f func() state.ActionStatus) *MockActionStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockAction) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockActionMockRecorder) Tag() *MockActionTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockAction)(nil).Tag))
	return &MockActionTagCall{Call: call}
}

// MockActionTagCall wrap *gomock.Call
type MockActionTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionTagCall) Return(arg0 names.Tag) *MockActionTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionTagCall) Do(f func() names.Tag) *MockActionTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionTagCall) DoAndReturn(f func() names.Tag) *MockActionTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockActionReceiver is a mock of ActionReceiver interface.
type MockActionReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockActionReceiverMockRecorder
}

// MockActionReceiverMockRecorder is the mock recorder for MockActionReceiver.
type MockActionReceiverMockRecorder struct {
	mock *MockActionReceiver
}

// NewMockActionReceiver creates a new mock instance.
func NewMockActionReceiver(ctrl *gomock.Controller) *MockActionReceiver {
	mock := &MockActionReceiver{ctrl: ctrl}
	mock.recorder = &MockActionReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionReceiver) EXPECT() *MockActionReceiverMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockActionReceiver) ISGOMOCK() struct{} {
	return struct{}{}
}

// Actions mocks base method.
func (m *MockActionReceiver) Actions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Actions indicates an expected call of Actions.
func (mr *MockActionReceiverMockRecorder) Actions() *MockActionReceiverActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockActionReceiver)(nil).Actions))
	return &MockActionReceiverActionsCall{Call: call}
}

// MockActionReceiverActionsCall wrap *gomock.Call
type MockActionReceiverActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverActionsCall) Return(arg0 []state.Action, arg1 error) *MockActionReceiverActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverActionsCall) Do(f func() ([]state.Action, error)) *MockActionReceiverActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverActionsCall) DoAndReturn(f func() ([]state.Action, error)) *MockActionReceiverActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CancelAction mocks base method.
func (m *MockActionReceiver) CancelAction(arg0 state.Action) (state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAction", arg0)
	ret0, _ := ret[0].(state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAction indicates an expected call of CancelAction.
func (mr *MockActionReceiverMockRecorder) CancelAction(arg0 any) *MockActionReceiverCancelActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAction", reflect.TypeOf((*MockActionReceiver)(nil).CancelAction), arg0)
	return &MockActionReceiverCancelActionCall{Call: call}
}

// MockActionReceiverCancelActionCall wrap *gomock.Call
type MockActionReceiverCancelActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverCancelActionCall) Return(arg0 state.Action, arg1 error) *MockActionReceiverCancelActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverCancelActionCall) Do(f func(state.Action) (state.Action, error)) *MockActionReceiverCancelActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverCancelActionCall) DoAndReturn(f func(state.Action) (state.Action, error)) *MockActionReceiverCancelActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CompletedActions mocks base method.
func (m *MockActionReceiver) CompletedActions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletedActions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletedActions indicates an expected call of CompletedActions.
func (mr *MockActionReceiverMockRecorder) CompletedActions() *MockActionReceiverCompletedActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletedActions", reflect.TypeOf((*MockActionReceiver)(nil).CompletedActions))
	return &MockActionReceiverCompletedActionsCall{Call: call}
}

// MockActionReceiverCompletedActionsCall wrap *gomock.Call
type MockActionReceiverCompletedActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverCompletedActionsCall) Return(arg0 []state.Action, arg1 error) *MockActionReceiverCompletedActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverCompletedActionsCall) Do(f func() ([]state.Action, error)) *MockActionReceiverCompletedActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverCompletedActionsCall) DoAndReturn(f func() ([]state.Action, error)) *MockActionReceiverCompletedActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PendingActions mocks base method.
func (m *MockActionReceiver) PendingActions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingActions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingActions indicates an expected call of PendingActions.
func (mr *MockActionReceiverMockRecorder) PendingActions() *MockActionReceiverPendingActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingActions", reflect.TypeOf((*MockActionReceiver)(nil).PendingActions))
	return &MockActionReceiverPendingActionsCall{Call: call}
}

// MockActionReceiverPendingActionsCall wrap *gomock.Call
type MockActionReceiverPendingActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverPendingActionsCall) Return(arg0 []state.Action, arg1 error) *MockActionReceiverPendingActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverPendingActionsCall) Do(f func() ([]state.Action, error)) *MockActionReceiverPendingActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverPendingActionsCall) DoAndReturn(f func() ([]state.Action, error)) *MockActionReceiverPendingActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareActionPayload mocks base method.
func (m *MockActionReceiver) PrepareActionPayload(arg0 string, arg1 map[string]any, arg2 *bool, arg3 *string) (map[string]any, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareActionPayload", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// PrepareActionPayload indicates an expected call of PrepareActionPayload.
func (mr *MockActionReceiverMockRecorder) PrepareActionPayload(arg0, arg1, arg2, arg3 any) *MockActionReceiverPrepareActionPayloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareActionPayload", reflect.TypeOf((*MockActionReceiver)(nil).PrepareActionPayload), arg0, arg1, arg2, arg3)
	return &MockActionReceiverPrepareActionPayloadCall{Call: call}
}

// MockActionReceiverPrepareActionPayloadCall wrap *gomock.Call
type MockActionReceiverPrepareActionPayloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverPrepareActionPayloadCall) Return(arg0 map[string]any, arg1 bool, arg2 string, arg3 error) *MockActionReceiverPrepareActionPayloadCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverPrepareActionPayloadCall) Do(f func(string, map[string]any, *bool, *string) (map[string]any, bool, string, error)) *MockActionReceiverPrepareActionPayloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverPrepareActionPayloadCall) DoAndReturn(f func(string, map[string]any, *bool, *string) (map[string]any, bool, string, error)) *MockActionReceiverPrepareActionPayloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunningActions mocks base method.
func (m *MockActionReceiver) RunningActions() ([]state.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunningActions")
	ret0, _ := ret[0].([]state.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunningActions indicates an expected call of RunningActions.
func (mr *MockActionReceiverMockRecorder) RunningActions() *MockActionReceiverRunningActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningActions", reflect.TypeOf((*MockActionReceiver)(nil).RunningActions))
	return &MockActionReceiverRunningActionsCall{Call: call}
}

// MockActionReceiverRunningActionsCall wrap *gomock.Call
type MockActionReceiverRunningActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverRunningActionsCall) Return(arg0 []state.Action, arg1 error) *MockActionReceiverRunningActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverRunningActionsCall) Do(f func() ([]state.Action, error)) *MockActionReceiverRunningActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverRunningActionsCall) DoAndReturn(f func() ([]state.Action, error)) *MockActionReceiverRunningActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockActionReceiver) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockActionReceiverMockRecorder) Tag() *MockActionReceiverTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockActionReceiver)(nil).Tag))
	return &MockActionReceiverTagCall{Call: call}
}

// MockActionReceiverTagCall wrap *gomock.Call
type MockActionReceiverTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverTagCall) Return(arg0 names.Tag) *MockActionReceiverTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverTagCall) Do(f func() names.Tag) *MockActionReceiverTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverTagCall) DoAndReturn(f func() names.Tag) *MockActionReceiverTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchActionNotifications mocks base method.
func (m *MockActionReceiver) WatchActionNotifications() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchActionNotifications")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchActionNotifications indicates an expected call of WatchActionNotifications.
func (mr *MockActionReceiverMockRecorder) WatchActionNotifications() *MockActionReceiverWatchActionNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchActionNotifications", reflect.TypeOf((*MockActionReceiver)(nil).WatchActionNotifications))
	return &MockActionReceiverWatchActionNotificationsCall{Call: call}
}

// MockActionReceiverWatchActionNotificationsCall wrap *gomock.Call
type MockActionReceiverWatchActionNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverWatchActionNotificationsCall) Return(arg0 state.StringsWatcher) *MockActionReceiverWatchActionNotificationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverWatchActionNotificationsCall) Do(f func() state.StringsWatcher) *MockActionReceiverWatchActionNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverWatchActionNotificationsCall) DoAndReturn(f func() state.StringsWatcher) *MockActionReceiverWatchActionNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchPendingActionNotifications mocks base method.
func (m *MockActionReceiver) WatchPendingActionNotifications() state.StringsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchPendingActionNotifications")
	ret0, _ := ret[0].(state.StringsWatcher)
	return ret0
}

// WatchPendingActionNotifications indicates an expected call of WatchPendingActionNotifications.
func (mr *MockActionReceiverMockRecorder) WatchPendingActionNotifications() *MockActionReceiverWatchPendingActionNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPendingActionNotifications", reflect.TypeOf((*MockActionReceiver)(nil).WatchPendingActionNotifications))
	return &MockActionReceiverWatchPendingActionNotificationsCall{Call: call}
}

// MockActionReceiverWatchPendingActionNotificationsCall wrap *gomock.Call
type MockActionReceiverWatchPendingActionNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionReceiverWatchPendingActionNotificationsCall) Return(arg0 state.StringsWatcher) *MockActionReceiverWatchPendingActionNotificationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionReceiverWatchPendingActionNotificationsCall) Do(f func() state.StringsWatcher) *MockActionReceiverWatchPendingActionNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionReceiverWatchPendingActionNotificationsCall) DoAndReturn(f func() state.StringsWatcher) *MockActionReceiverWatchPendingActionNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
