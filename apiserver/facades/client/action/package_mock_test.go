// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/action (interfaces: ApplicationService,ModelInfoService,OperationService)
//
// Generated by this command:
//
//	mockgen -typed -package action -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/action ApplicationService,ModelInfoService,OperationService
//

// Package action is a generated GoMock package.
package action

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	charm "github.com/juju/juju/domain/application/charm"
	operation "github.com/juju/juju/domain/operation"
	charm0 "github.com/juju/juju/internal/charm"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetCharmActions mocks base method.
func (m *MockApplicationService) GetCharmActions(arg0 context.Context, arg1 charm.CharmLocator) (charm0.Actions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmActions", arg0, arg1)
	ret0, _ := ret[0].(charm0.Actions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmActions indicates an expected call of GetCharmActions.
func (mr *MockApplicationServiceMockRecorder) GetCharmActions(arg0, arg1 any) *MockApplicationServiceGetCharmActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmActions", reflect.TypeOf((*MockApplicationService)(nil).GetCharmActions), arg0, arg1)
	return &MockApplicationServiceGetCharmActionsCall{Call: call}
}

// MockApplicationServiceGetCharmActionsCall wrap *gomock.Call
type MockApplicationServiceGetCharmActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmActionsCall) Return(arg0 charm0.Actions, arg1 error) *MockApplicationServiceGetCharmActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmActionsCall) Do(f func(context.Context, charm.CharmLocator) (charm0.Actions, error)) *MockApplicationServiceGetCharmActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmActionsCall) DoAndReturn(f func(context.Context, charm.CharmLocator) (charm0.Actions, error)) *MockApplicationServiceGetCharmActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLocatorByApplicationName mocks base method.
func (m *MockApplicationService) GetCharmLocatorByApplicationName(arg0 context.Context, arg1 string) (charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLocatorByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmLocatorByApplicationName indicates an expected call of GetCharmLocatorByApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetCharmLocatorByApplicationName(arg0, arg1 any) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLocatorByApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLocatorByApplicationName), arg0, arg1)
	return &MockApplicationServiceGetCharmLocatorByApplicationNameCall{Call: call}
}

// MockApplicationServiceGetCharmLocatorByApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmLocatorByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Return(arg0 charm.CharmLocator, arg1 error) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) Do(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLocatorByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm.CharmLocator, error)) *MockApplicationServiceGetCharmLocatorByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOperationService is a mock of OperationService interface.
type MockOperationService struct {
	ctrl     *gomock.Controller
	recorder *MockOperationServiceMockRecorder
}

// MockOperationServiceMockRecorder is the mock recorder for MockOperationService.
type MockOperationServiceMockRecorder struct {
	mock *MockOperationService
}

// NewMockOperationService creates a new mock instance.
func NewMockOperationService(ctrl *gomock.Controller) *MockOperationService {
	mock := &MockOperationService{ctrl: ctrl}
	mock.recorder = &MockOperationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationService) EXPECT() *MockOperationServiceMockRecorder {
	return m.recorder
}

// CancelAction mocks base method.
func (m *MockOperationService) CancelAction(arg0 context.Context, arg1 uuid.UUID) (operation.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAction", arg0, arg1)
	ret0, _ := ret[0].(operation.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAction indicates an expected call of CancelAction.
func (mr *MockOperationServiceMockRecorder) CancelAction(arg0, arg1 any) *MockOperationServiceCancelActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAction", reflect.TypeOf((*MockOperationService)(nil).CancelAction), arg0, arg1)
	return &MockOperationServiceCancelActionCall{Call: call}
}

// MockOperationServiceCancelActionCall wrap *gomock.Call
type MockOperationServiceCancelActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceCancelActionCall) Return(arg0 operation.Action, arg1 error) *MockOperationServiceCancelActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceCancelActionCall) Do(f func(context.Context, uuid.UUID) (operation.Action, error)) *MockOperationServiceCancelActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceCancelActionCall) DoAndReturn(f func(context.Context, uuid.UUID) (operation.Action, error)) *MockOperationServiceCancelActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAction mocks base method.
func (m *MockOperationService) GetAction(arg0 context.Context, arg1 uuid.UUID) (operation.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", arg0, arg1)
	ret0, _ := ret[0].(operation.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction.
func (mr *MockOperationServiceMockRecorder) GetAction(arg0, arg1 any) *MockOperationServiceGetActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockOperationService)(nil).GetAction), arg0, arg1)
	return &MockOperationServiceGetActionCall{Call: call}
}

// MockOperationServiceGetActionCall wrap *gomock.Call
type MockOperationServiceGetActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetActionCall) Return(arg0 operation.Action, arg1 error) *MockOperationServiceGetActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetActionCall) Do(f func(context.Context, uuid.UUID) (operation.Action, error)) *MockOperationServiceGetActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetActionCall) DoAndReturn(f func(context.Context, uuid.UUID) (operation.Action, error)) *MockOperationServiceGetActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperations mocks base method.
func (m *MockOperationService) GetOperations(arg0 context.Context, arg1 operation.QueryArgs) (operation.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", arg0, arg1)
	ret0, _ := ret[0].(operation.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockOperationServiceMockRecorder) GetOperations(arg0, arg1 any) *MockOperationServiceGetOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockOperationService)(nil).GetOperations), arg0, arg1)
	return &MockOperationServiceGetOperationsCall{Call: call}
}

// MockOperationServiceGetOperationsCall wrap *gomock.Call
type MockOperationServiceGetOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetOperationsCall) Return(arg0 operation.QueryResult, arg1 error) *MockOperationServiceGetOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetOperationsCall) Do(f func(context.Context, operation.QueryArgs) (operation.QueryResult, error)) *MockOperationServiceGetOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetOperationsCall) DoAndReturn(f func(context.Context, operation.QueryArgs) (operation.QueryResult, error)) *MockOperationServiceGetOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperationsByIDs mocks base method.
func (m *MockOperationService) GetOperationsByIDs(arg0 context.Context, arg1 []string) (operation.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsByIDs", arg0, arg1)
	ret0, _ := ret[0].(operation.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsByIDs indicates an expected call of GetOperationsByIDs.
func (mr *MockOperationServiceMockRecorder) GetOperationsByIDs(arg0, arg1 any) *MockOperationServiceGetOperationsByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsByIDs", reflect.TypeOf((*MockOperationService)(nil).GetOperationsByIDs), arg0, arg1)
	return &MockOperationServiceGetOperationsByIDsCall{Call: call}
}

// MockOperationServiceGetOperationsByIDsCall wrap *gomock.Call
type MockOperationServiceGetOperationsByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceGetOperationsByIDsCall) Return(arg0 operation.QueryResult, arg1 error) *MockOperationServiceGetOperationsByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceGetOperationsByIDsCall) Do(f func(context.Context, []string) (operation.QueryResult, error)) *MockOperationServiceGetOperationsByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceGetOperationsByIDsCall) DoAndReturn(f func(context.Context, []string) (operation.QueryResult, error)) *MockOperationServiceGetOperationsByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Run mocks base method.
func (m *MockOperationService) Run(arg0 context.Context, arg1 []operation.RunArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockOperationServiceMockRecorder) Run(arg0, arg1 any) *MockOperationServiceRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockOperationService)(nil).Run), arg0, arg1)
	return &MockOperationServiceRunCall{Call: call}
}

// MockOperationServiceRunCall wrap *gomock.Call
type MockOperationServiceRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceRunCall) Return(arg0 operation.RunResult, arg1 error) *MockOperationServiceRunCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceRunCall) Do(f func(context.Context, []operation.RunArgs) (operation.RunResult, error)) *MockOperationServiceRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceRunCall) DoAndReturn(f func(context.Context, []operation.RunArgs) (operation.RunResult, error)) *MockOperationServiceRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunOnAllMachines mocks base method.
func (m *MockOperationService) RunOnAllMachines(arg0 context.Context, arg1 operation.TaskArgs) (operation.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunOnAllMachines", arg0, arg1)
	ret0, _ := ret[0].(operation.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunOnAllMachines indicates an expected call of RunOnAllMachines.
func (mr *MockOperationServiceMockRecorder) RunOnAllMachines(arg0, arg1 any) *MockOperationServiceRunOnAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOnAllMachines", reflect.TypeOf((*MockOperationService)(nil).RunOnAllMachines), arg0, arg1)
	return &MockOperationServiceRunOnAllMachinesCall{Call: call}
}

// MockOperationServiceRunOnAllMachinesCall wrap *gomock.Call
type MockOperationServiceRunOnAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationServiceRunOnAllMachinesCall) Return(arg0 operation.RunResult, arg1 error) *MockOperationServiceRunOnAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationServiceRunOnAllMachinesCall) Do(f func(context.Context, operation.TaskArgs) (operation.RunResult, error)) *MockOperationServiceRunOnAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationServiceRunOnAllMachinesCall) DoAndReturn(f func(context.Context, operation.TaskArgs) (operation.RunResult, error)) *MockOperationServiceRunOnAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
