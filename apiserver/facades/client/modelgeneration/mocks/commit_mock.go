// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelgeneration (interfaces: CommitBranchModelOp,CommitBranchState,Settings,OpFactory,CommitBranchGen,CommitBranchApp)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	modelgeneration "github.com/juju/juju/apiserver/facades/client/modelgeneration"
	settings "github.com/juju/juju/core/settings"
	txn "gopkg.in/mgo.v2/txn"
	reflect "reflect"
	time "time"
)

// MockCommitBranchModelOp is a mock of CommitBranchModelOp interface
type MockCommitBranchModelOp struct {
	ctrl     *gomock.Controller
	recorder *MockCommitBranchModelOpMockRecorder
}

// MockCommitBranchModelOpMockRecorder is the mock recorder for MockCommitBranchModelOp
type MockCommitBranchModelOpMockRecorder struct {
	mock *MockCommitBranchModelOp
}

// NewMockCommitBranchModelOp creates a new mock instance
func NewMockCommitBranchModelOp(ctrl *gomock.Controller) *MockCommitBranchModelOp {
	mock := &MockCommitBranchModelOp{ctrl: ctrl}
	mock.recorder = &MockCommitBranchModelOpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitBranchModelOp) EXPECT() *MockCommitBranchModelOpMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockCommitBranchModelOp) Build(arg0 int) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockCommitBranchModelOpMockRecorder) Build(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockCommitBranchModelOp)(nil).Build), arg0)
}

// Done mocks base method
func (m *MockCommitBranchModelOp) Done(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockCommitBranchModelOpMockRecorder) Done(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockCommitBranchModelOp)(nil).Done), arg0)
}

// GetModelGen mocks base method
func (m *MockCommitBranchModelOp) GetModelGen() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelGen")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetModelGen indicates an expected call of GetModelGen
func (mr *MockCommitBranchModelOpMockRecorder) GetModelGen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelGen", reflect.TypeOf((*MockCommitBranchModelOp)(nil).GetModelGen))
}

// MockCommitBranchState is a mock of CommitBranchState interface
type MockCommitBranchState struct {
	ctrl     *gomock.Controller
	recorder *MockCommitBranchStateMockRecorder
}

// MockCommitBranchStateMockRecorder is the mock recorder for MockCommitBranchState
type MockCommitBranchStateMockRecorder struct {
	mock *MockCommitBranchState
}

// NewMockCommitBranchState creates a new mock instance
func NewMockCommitBranchState(ctrl *gomock.Controller) *MockCommitBranchState {
	mock := &MockCommitBranchState{ctrl: ctrl}
	mock.recorder = &MockCommitBranchStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitBranchState) EXPECT() *MockCommitBranchStateMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockCommitBranchState) Application(arg0 string) (modelgeneration.CommitBranchApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(modelgeneration.CommitBranchApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockCommitBranchStateMockRecorder) Application(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockCommitBranchState)(nil).Application), arg0)
}

// ControllerTimestamp mocks base method
func (m *MockCommitBranchState) ControllerTimestamp() (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTimestamp")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerTimestamp indicates an expected call of ControllerTimestamp
func (mr *MockCommitBranchStateMockRecorder) ControllerTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTimestamp", reflect.TypeOf((*MockCommitBranchState)(nil).ControllerTimestamp))
}

// MockSettings is a mock of Settings interface
type MockSettings struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsMockRecorder
}

// MockSettingsMockRecorder is the mock recorder for MockSettings
type MockSettingsMockRecorder struct {
	mock *MockSettings
}

// NewMockSettings creates a new mock instance
func NewMockSettings(ctrl *gomock.Controller) *MockSettings {
	mock := &MockSettings{ctrl: ctrl}
	mock.recorder = &MockSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettings) EXPECT() *MockSettingsMockRecorder {
	return m.recorder
}

// DeltaOps mocks base method
func (m *MockSettings) DeltaOps(arg0 string, arg1 settings.ItemChanges) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeltaOps", arg0, arg1)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeltaOps indicates an expected call of DeltaOps
func (mr *MockSettingsMockRecorder) DeltaOps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeltaOps", reflect.TypeOf((*MockSettings)(nil).DeltaOps), arg0, arg1)
}

// MockOpFactory is a mock of OpFactory interface
type MockOpFactory struct {
	ctrl     *gomock.Controller
	recorder *MockOpFactoryMockRecorder
}

// MockOpFactoryMockRecorder is the mock recorder for MockOpFactory
type MockOpFactoryMockRecorder struct {
	mock *MockOpFactory
}

// NewMockOpFactory creates a new mock instance
func NewMockOpFactory(ctrl *gomock.Controller) *MockOpFactory {
	mock := &MockOpFactory{ctrl: ctrl}
	mock.recorder = &MockOpFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpFactory) EXPECT() *MockOpFactoryMockRecorder {
	return m.recorder
}

// NewCommitBranchModelOp mocks base method
func (m *MockOpFactory) NewCommitBranchModelOp(arg0, arg1 string) (modelgeneration.CommitBranchModelOp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommitBranchModelOp", arg0, arg1)
	ret0, _ := ret[0].(modelgeneration.CommitBranchModelOp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCommitBranchModelOp indicates an expected call of NewCommitBranchModelOp
func (mr *MockOpFactoryMockRecorder) NewCommitBranchModelOp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommitBranchModelOp", reflect.TypeOf((*MockOpFactory)(nil).NewCommitBranchModelOp), arg0, arg1)
}

// MockCommitBranchGen is a mock of CommitBranchGen interface
type MockCommitBranchGen struct {
	ctrl     *gomock.Controller
	recorder *MockCommitBranchGenMockRecorder
}

// MockCommitBranchGenMockRecorder is the mock recorder for MockCommitBranchGen
type MockCommitBranchGenMockRecorder struct {
	mock *MockCommitBranchGen
}

// NewMockCommitBranchGen creates a new mock instance
func NewMockCommitBranchGen(ctrl *gomock.Controller) *MockCommitBranchGen {
	mock := &MockCommitBranchGen{ctrl: ctrl}
	mock.recorder = &MockCommitBranchGenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitBranchGen) EXPECT() *MockCommitBranchGenMockRecorder {
	return m.recorder
}

// AssignedUnits mocks base method
func (m *MockCommitBranchGen) AssignedUnits() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignedUnits")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// AssignedUnits indicates an expected call of AssignedUnits
func (mr *MockCommitBranchGenMockRecorder) AssignedUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignedUnits", reflect.TypeOf((*MockCommitBranchGen)(nil).AssignedUnits))
}

// CompleteOps mocks base method
func (m *MockCommitBranchGen) CompleteOps(arg0 map[string][]string, arg1 *time.Time, arg2 string) ([]txn.Op, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOps", arg0, arg1, arg2)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompleteOps indicates an expected call of CompleteOps
func (mr *MockCommitBranchGenMockRecorder) CompleteOps(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOps", reflect.TypeOf((*MockCommitBranchGen)(nil).CompleteOps), arg0, arg1, arg2)
}

// Config mocks base method
func (m *MockCommitBranchGen) Config() map[string]settings.ItemChanges {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(map[string]settings.ItemChanges)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockCommitBranchGenMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCommitBranchGen)(nil).Config))
}

// Refresh mocks base method
func (m *MockCommitBranchGen) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockCommitBranchGenMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockCommitBranchGen)(nil).Refresh))
}

// ValidateForCompletion mocks base method
func (m *MockCommitBranchGen) ValidateForCompletion() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateForCompletion")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateForCompletion indicates an expected call of ValidateForCompletion
func (mr *MockCommitBranchGenMockRecorder) ValidateForCompletion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateForCompletion", reflect.TypeOf((*MockCommitBranchGen)(nil).ValidateForCompletion))
}

// MockCommitBranchApp is a mock of CommitBranchApp interface
type MockCommitBranchApp struct {
	ctrl     *gomock.Controller
	recorder *MockCommitBranchAppMockRecorder
}

// MockCommitBranchAppMockRecorder is the mock recorder for MockCommitBranchApp
type MockCommitBranchAppMockRecorder struct {
	mock *MockCommitBranchApp
}

// NewMockCommitBranchApp creates a new mock instance
func NewMockCommitBranchApp(ctrl *gomock.Controller) *MockCommitBranchApp {
	mock := &MockCommitBranchApp{ctrl: ctrl}
	mock.recorder = &MockCommitBranchAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitBranchApp) EXPECT() *MockCommitBranchAppMockRecorder {
	return m.recorder
}

// CharmConfigKey mocks base method
func (m *MockCommitBranchApp) CharmConfigKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmConfigKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// CharmConfigKey indicates an expected call of CharmConfigKey
func (mr *MockCommitBranchAppMockRecorder) CharmConfigKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmConfigKey", reflect.TypeOf((*MockCommitBranchApp)(nil).CharmConfigKey))
}

// UnitNames mocks base method
func (m *MockCommitBranchApp) UnitNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitNames indicates an expected call of UnitNames
func (mr *MockCommitBranchAppMockRecorder) UnitNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitNames", reflect.TypeOf((*MockCommitBranchApp)(nil).UnitNames))
}
