// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelgeneration (interfaces: CommitBranchModelOp,CommitBranchState,Settings,OpFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	modelgeneration "github.com/juju/juju/apiserver/facades/client/modelgeneration"
	settings "github.com/juju/juju/core/settings"
	state "github.com/juju/juju/state"
	txn "gopkg.in/mgo.v2/txn"
	reflect "reflect"
	time "time"
)

// MockCommitBranchModelOp is a mock of CommitBranchModelOp interface
type MockCommitBranchModelOp struct {
	ctrl     *gomock.Controller
	recorder *MockCommitBranchModelOpMockRecorder
}

// MockCommitBranchModelOpMockRecorder is the mock recorder for MockCommitBranchModelOp
type MockCommitBranchModelOpMockRecorder struct {
	mock *MockCommitBranchModelOp
}

// NewMockCommitBranchModelOp creates a new mock instance
func NewMockCommitBranchModelOp(ctrl *gomock.Controller) *MockCommitBranchModelOp {
	mock := &MockCommitBranchModelOp{ctrl: ctrl}
	mock.recorder = &MockCommitBranchModelOpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitBranchModelOp) EXPECT() *MockCommitBranchModelOpMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockCommitBranchModelOp) Build(arg0 int) ([]txn.Op, error) {
	ret := m.ctrl.Call(m, "Build", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockCommitBranchModelOpMockRecorder) Build(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockCommitBranchModelOp)(nil).Build), arg0)
}

// Done mocks base method
func (m *MockCommitBranchModelOp) Done(arg0 error) error {
	ret := m.ctrl.Call(m, "Done", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockCommitBranchModelOpMockRecorder) Done(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockCommitBranchModelOp)(nil).Done), arg0)
}

// GetModelGen mocks base method
func (m *MockCommitBranchModelOp) GetModelGen() int {
	ret := m.ctrl.Call(m, "GetModelGen")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetModelGen indicates an expected call of GetModelGen
func (mr *MockCommitBranchModelOpMockRecorder) GetModelGen() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelGen", reflect.TypeOf((*MockCommitBranchModelOp)(nil).GetModelGen))
}

// MockCommitBranchState is a mock of CommitBranchState interface
type MockCommitBranchState struct {
	ctrl     *gomock.Controller
	recorder *MockCommitBranchStateMockRecorder
}

// MockCommitBranchStateMockRecorder is the mock recorder for MockCommitBranchState
type MockCommitBranchStateMockRecorder struct {
	mock *MockCommitBranchState
}

// NewMockCommitBranchState creates a new mock instance
func NewMockCommitBranchState(ctrl *gomock.Controller) *MockCommitBranchState {
	mock := &MockCommitBranchState{ctrl: ctrl}
	mock.recorder = &MockCommitBranchStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitBranchState) EXPECT() *MockCommitBranchStateMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockCommitBranchState) Application(arg0 string) (*state.Application, error) {
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(*state.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockCommitBranchStateMockRecorder) Application(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockCommitBranchState)(nil).Application), arg0)
}

// Branch mocks base method
func (m *MockCommitBranchState) Branch(arg0 string) (*state.Generation, error) {
	ret := m.ctrl.Call(m, "Branch", arg0)
	ret0, _ := ret[0].(*state.Generation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Branch indicates an expected call of Branch
func (mr *MockCommitBranchStateMockRecorder) Branch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branch", reflect.TypeOf((*MockCommitBranchState)(nil).Branch), arg0)
}

// ControllerTimestamp mocks base method
func (m *MockCommitBranchState) ControllerTimestamp() (*time.Time, error) {
	ret := m.ctrl.Call(m, "ControllerTimestamp")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerTimestamp indicates an expected call of ControllerTimestamp
func (mr *MockCommitBranchStateMockRecorder) ControllerTimestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTimestamp", reflect.TypeOf((*MockCommitBranchState)(nil).ControllerTimestamp))
}

// MockSettings is a mock of Settings interface
type MockSettings struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsMockRecorder
}

// MockSettingsMockRecorder is the mock recorder for MockSettings
type MockSettingsMockRecorder struct {
	mock *MockSettings
}

// NewMockSettings creates a new mock instance
func NewMockSettings(ctrl *gomock.Controller) *MockSettings {
	mock := &MockSettings{ctrl: ctrl}
	mock.recorder = &MockSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettings) EXPECT() *MockSettingsMockRecorder {
	return m.recorder
}

// DeltaOps mocks base method
func (m *MockSettings) DeltaOps(arg0 string, arg1 settings.ItemChanges) ([]txn.Op, error) {
	ret := m.ctrl.Call(m, "DeltaOps", arg0, arg1)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeltaOps indicates an expected call of DeltaOps
func (mr *MockSettingsMockRecorder) DeltaOps(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeltaOps", reflect.TypeOf((*MockSettings)(nil).DeltaOps), arg0, arg1)
}

// MockOpFactory is a mock of OpFactory interface
type MockOpFactory struct {
	ctrl     *gomock.Controller
	recorder *MockOpFactoryMockRecorder
}

// MockOpFactoryMockRecorder is the mock recorder for MockOpFactory
type MockOpFactoryMockRecorder struct {
	mock *MockOpFactory
}

// NewMockOpFactory creates a new mock instance
func NewMockOpFactory(ctrl *gomock.Controller) *MockOpFactory {
	mock := &MockOpFactory{ctrl: ctrl}
	mock.recorder = &MockOpFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpFactory) EXPECT() *MockOpFactoryMockRecorder {
	return m.recorder
}

// NewCommitBranchModelOp mocks base method
func (m *MockOpFactory) NewCommitBranchModelOp(arg0, arg1 string) (modelgeneration.CommitBranchModelOp, error) {
	ret := m.ctrl.Call(m, "NewCommitBranchModelOp", arg0, arg1)
	ret0, _ := ret[0].(modelgeneration.CommitBranchModelOp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCommitBranchModelOp indicates an expected call of NewCommitBranchModelOp
func (mr *MockOpFactoryMockRecorder) NewCommitBranchModelOp(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommitBranchModelOp", reflect.TypeOf((*MockOpFactory)(nil).NewCommitBranchModelOp), arg0, arg1)
}
