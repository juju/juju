// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/client (interfaces: ApplicationService,BlockDeviceService,CrossModelRelationService,MachineService,ModelInfoService,NetworkService,PortService,RelationService,StatusService)
//
// Generated by this command:
//
//	mockgen -typed -package client -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/client ApplicationService,BlockDeviceService,CrossModelRelationService,MachineService,ModelInfoService,NetworkService,PortService,RelationService,StatusService
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	blockdevice "github.com/juju/juju/core/blockdevice"
	machine "github.com/juju/juju/core/machine"
	model "github.com/juju/juju/core/model"
	network "github.com/juju/juju/core/network"
	relation "github.com/juju/juju/core/relation"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	application "github.com/juju/juju/domain/application"
	architecture "github.com/juju/juju/domain/application/architecture"
	charm "github.com/juju/juju/domain/application/charm"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	network0 "github.com/juju/juju/domain/network"
	port "github.com/juju/juju/domain/port"
	relation0 "github.com/juju/juju/domain/relation"
	service "github.com/juju/juju/domain/status/service"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetAllEndpointBindings mocks base method.
func (m *MockApplicationService) GetAllEndpointBindings(arg0 context.Context) (map[string]map[string]network.SpaceName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEndpointBindings", arg0)
	ret0, _ := ret[0].(map[string]map[string]network.SpaceName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEndpointBindings indicates an expected call of GetAllEndpointBindings.
func (mr *MockApplicationServiceMockRecorder) GetAllEndpointBindings(arg0 any) *MockApplicationServiceGetAllEndpointBindingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEndpointBindings", reflect.TypeOf((*MockApplicationService)(nil).GetAllEndpointBindings), arg0)
	return &MockApplicationServiceGetAllEndpointBindingsCall{Call: call}
}

// MockApplicationServiceGetAllEndpointBindingsCall wrap *gomock.Call
type MockApplicationServiceGetAllEndpointBindingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAllEndpointBindingsCall) Return(arg0 map[string]map[string]network.SpaceName, arg1 error) *MockApplicationServiceGetAllEndpointBindingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAllEndpointBindingsCall) Do(f func(context.Context) (map[string]map[string]network.SpaceName, error)) *MockApplicationServiceGetAllEndpointBindingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAllEndpointBindingsCall) DoAndReturn(f func(context.Context) (map[string]map[string]network.SpaceName, error)) *MockApplicationServiceGetAllEndpointBindingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetExposedEndpoints mocks base method.
func (m *MockApplicationService) GetExposedEndpoints(arg0 context.Context, arg1 string) (map[string]application.ExposedEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposedEndpoints", arg0, arg1)
	ret0, _ := ret[0].(map[string]application.ExposedEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExposedEndpoints indicates an expected call of GetExposedEndpoints.
func (mr *MockApplicationServiceMockRecorder) GetExposedEndpoints(arg0, arg1 any) *MockApplicationServiceGetExposedEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposedEndpoints", reflect.TypeOf((*MockApplicationService)(nil).GetExposedEndpoints), arg0, arg1)
	return &MockApplicationServiceGetExposedEndpointsCall{Call: call}
}

// MockApplicationServiceGetExposedEndpointsCall wrap *gomock.Call
type MockApplicationServiceGetExposedEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetExposedEndpointsCall) Return(arg0 map[string]application.ExposedEndpoint, arg1 error) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetExposedEndpointsCall) Do(f func(context.Context, string) (map[string]application.ExposedEndpoint, error)) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetExposedEndpointsCall) DoAndReturn(f func(context.Context, string) (map[string]application.ExposedEndpoint, error)) *MockApplicationServiceGetExposedEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLatestPendingCharmhubCharm mocks base method.
func (m *MockApplicationService) GetLatestPendingCharmhubCharm(arg0 context.Context, arg1 string, arg2 architecture.Architecture) (charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPendingCharmhubCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(charm.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPendingCharmhubCharm indicates an expected call of GetLatestPendingCharmhubCharm.
func (mr *MockApplicationServiceMockRecorder) GetLatestPendingCharmhubCharm(arg0, arg1, arg2 any) *MockApplicationServiceGetLatestPendingCharmhubCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPendingCharmhubCharm", reflect.TypeOf((*MockApplicationService)(nil).GetLatestPendingCharmhubCharm), arg0, arg1, arg2)
	return &MockApplicationServiceGetLatestPendingCharmhubCharmCall{Call: call}
}

// MockApplicationServiceGetLatestPendingCharmhubCharmCall wrap *gomock.Call
type MockApplicationServiceGetLatestPendingCharmhubCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetLatestPendingCharmhubCharmCall) Return(arg0 charm.CharmLocator, arg1 error) *MockApplicationServiceGetLatestPendingCharmhubCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetLatestPendingCharmhubCharmCall) Do(f func(context.Context, string, architecture.Architecture) (charm.CharmLocator, error)) *MockApplicationServiceGetLatestPendingCharmhubCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetLatestPendingCharmhubCharmCall) DoAndReturn(f func(context.Context, string, architecture.Architecture) (charm.CharmLocator, error)) *MockApplicationServiceGetLatestPendingCharmhubCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockDeviceService is a mock of BlockDeviceService interface.
type MockBlockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceServiceMockRecorder
}

// MockBlockDeviceServiceMockRecorder is the mock recorder for MockBlockDeviceService.
type MockBlockDeviceServiceMockRecorder struct {
	mock *MockBlockDeviceService
}

// NewMockBlockDeviceService creates a new mock instance.
func NewMockBlockDeviceService(ctrl *gomock.Controller) *MockBlockDeviceService {
	mock := &MockBlockDeviceService{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceService) EXPECT() *MockBlockDeviceServiceMockRecorder {
	return m.recorder
}

// GetBlockDevicesForMachine mocks base method.
func (m *MockBlockDeviceService) GetBlockDevicesForMachine(arg0 context.Context, arg1 machine.UUID) ([]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevicesForMachine", arg0, arg1)
	ret0, _ := ret[0].([]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDevicesForMachine indicates an expected call of GetBlockDevicesForMachine.
func (mr *MockBlockDeviceServiceMockRecorder) GetBlockDevicesForMachine(arg0, arg1 any) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevicesForMachine", reflect.TypeOf((*MockBlockDeviceService)(nil).GetBlockDevicesForMachine), arg0, arg1)
	return &MockBlockDeviceServiceGetBlockDevicesForMachineCall{Call: call}
}

// MockBlockDeviceServiceGetBlockDevicesForMachineCall wrap *gomock.Call
type MockBlockDeviceServiceGetBlockDevicesForMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Return(arg0 []blockdevice.BlockDevice, arg1 error) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) Do(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceGetBlockDevicesForMachineCall) DoAndReturn(f func(context.Context, machine.UUID) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceGetBlockDevicesForMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// GetOffers mocks base method.
func (m *MockCrossModelRelationService) GetOffers(arg0 context.Context, arg1 []crossmodelrelation.OfferFilter) ([]*crossmodelrelation.OfferDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffers", arg0, arg1)
	ret0, _ := ret[0].([]*crossmodelrelation.OfferDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffers indicates an expected call of GetOffers.
func (mr *MockCrossModelRelationServiceMockRecorder) GetOffers(arg0, arg1 any) *MockCrossModelRelationServiceGetOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffers", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetOffers), arg0, arg1)
	return &MockCrossModelRelationServiceGetOffersCall{Call: call}
}

// MockCrossModelRelationServiceGetOffersCall wrap *gomock.Call
type MockCrossModelRelationServiceGetOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetOffersCall) Return(arg0 []*crossmodelrelation.OfferDetail, arg1 error) *MockCrossModelRelationServiceGetOffersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetOffersCall) Do(f func(context.Context, []crossmodelrelation.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockCrossModelRelationServiceGetOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetOffersCall) DoAndReturn(f func(context.Context, []crossmodelrelation.OfferFilter) ([]*crossmodelrelation.OfferDetail, error)) *MockCrossModelRelationServiceGetOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// IsMachineController mocks base method.
func (m *MockMachineService) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockMachineServiceMockRecorder) IsMachineController(arg0, arg1 any) *MockMachineServiceIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockMachineService)(nil).IsMachineController), arg0, arg1)
	return &MockMachineServiceIsMachineControllerCall{Call: call}
}

// MockMachineServiceIsMachineControllerCall wrap *gomock.Call
type MockMachineServiceIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockMachineServiceIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// GetAllDevicesByMachineNames mocks base method.
func (m *MockNetworkService) GetAllDevicesByMachineNames(arg0 context.Context) (map[machine.Name][]network0.NetInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDevicesByMachineNames", arg0)
	ret0, _ := ret[0].(map[machine.Name][]network0.NetInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDevicesByMachineNames indicates an expected call of GetAllDevicesByMachineNames.
func (mr *MockNetworkServiceMockRecorder) GetAllDevicesByMachineNames(arg0 any) *MockNetworkServiceGetAllDevicesByMachineNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDevicesByMachineNames", reflect.TypeOf((*MockNetworkService)(nil).GetAllDevicesByMachineNames), arg0)
	return &MockNetworkServiceGetAllDevicesByMachineNamesCall{Call: call}
}

// MockNetworkServiceGetAllDevicesByMachineNamesCall wrap *gomock.Call
type MockNetworkServiceGetAllDevicesByMachineNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllDevicesByMachineNamesCall) Return(arg0 map[machine.Name][]network0.NetInterface, arg1 error) *MockNetworkServiceGetAllDevicesByMachineNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllDevicesByMachineNamesCall) Do(f func(context.Context) (map[machine.Name][]network0.NetInterface, error)) *MockNetworkServiceGetAllDevicesByMachineNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllDevicesByMachineNamesCall) DoAndReturn(f func(context.Context) (map[machine.Name][]network0.NetInterface, error)) *MockNetworkServiceGetAllDevicesByMachineNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSpaces mocks base method.
func (m *MockNetworkService) GetAllSpaces(arg0 context.Context) (network.SpaceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(network.SpaceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockNetworkServiceMockRecorder) GetAllSpaces(arg0 any) *MockNetworkServiceGetAllSpacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockNetworkService)(nil).GetAllSpaces), arg0)
	return &MockNetworkServiceGetAllSpacesCall{Call: call}
}

// MockNetworkServiceGetAllSpacesCall wrap *gomock.Call
type MockNetworkServiceGetAllSpacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSpacesCall) Return(arg0 network.SpaceInfos, arg1 error) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSpacesCall) Do(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSpacesCall) DoAndReturn(f func(context.Context) (network.SpaceInfos, error)) *MockNetworkServiceGetAllSpacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllSubnets mocks base method.
func (m *MockNetworkService) GetAllSubnets(arg0 context.Context) (network.SubnetInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubnets", arg0)
	ret0, _ := ret[0].(network.SubnetInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubnets indicates an expected call of GetAllSubnets.
func (mr *MockNetworkServiceMockRecorder) GetAllSubnets(arg0 any) *MockNetworkServiceGetAllSubnetsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubnets", reflect.TypeOf((*MockNetworkService)(nil).GetAllSubnets), arg0)
	return &MockNetworkServiceGetAllSubnetsCall{Call: call}
}

// MockNetworkServiceGetAllSubnetsCall wrap *gomock.Call
type MockNetworkServiceGetAllSubnetsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetAllSubnetsCall) Return(arg0 network.SubnetInfos, arg1 error) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetAllSubnetsCall) Do(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetAllSubnetsCall) DoAndReturn(f func(context.Context) (network.SubnetInfos, error)) *MockNetworkServiceGetAllSubnetsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPortService is a mock of PortService interface.
type MockPortService struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceMockRecorder
}

// MockPortServiceMockRecorder is the mock recorder for MockPortService.
type MockPortServiceMockRecorder struct {
	mock *MockPortService
}

// NewMockPortService creates a new mock instance.
func NewMockPortService(ctrl *gomock.Controller) *MockPortService {
	mock := &MockPortService{ctrl: ctrl}
	mock.recorder = &MockPortServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService) EXPECT() *MockPortServiceMockRecorder {
	return m.recorder
}

// GetAllOpenedPorts mocks base method.
func (m *MockPortService) GetAllOpenedPorts(arg0 context.Context) (port.UnitGroupedPortRanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOpenedPorts", arg0)
	ret0, _ := ret[0].(port.UnitGroupedPortRanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOpenedPorts indicates an expected call of GetAllOpenedPorts.
func (mr *MockPortServiceMockRecorder) GetAllOpenedPorts(arg0 any) *MockPortServiceGetAllOpenedPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOpenedPorts", reflect.TypeOf((*MockPortService)(nil).GetAllOpenedPorts), arg0)
	return &MockPortServiceGetAllOpenedPortsCall{Call: call}
}

// MockPortServiceGetAllOpenedPortsCall wrap *gomock.Call
type MockPortServiceGetAllOpenedPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortServiceGetAllOpenedPortsCall) Return(arg0 port.UnitGroupedPortRanges, arg1 error) *MockPortServiceGetAllOpenedPortsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortServiceGetAllOpenedPortsCall) Do(f func(context.Context) (port.UnitGroupedPortRanges, error)) *MockPortServiceGetAllOpenedPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortServiceGetAllOpenedPortsCall) DoAndReturn(f func(context.Context) (port.UnitGroupedPortRanges, error)) *MockPortServiceGetAllOpenedPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitOpenedPorts mocks base method.
func (m *MockPortService) GetUnitOpenedPorts(arg0 context.Context, arg1 unit.UUID) (network.GroupedPortRanges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitOpenedPorts", arg0, arg1)
	ret0, _ := ret[0].(network.GroupedPortRanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitOpenedPorts indicates an expected call of GetUnitOpenedPorts.
func (mr *MockPortServiceMockRecorder) GetUnitOpenedPorts(arg0, arg1 any) *MockPortServiceGetUnitOpenedPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitOpenedPorts", reflect.TypeOf((*MockPortService)(nil).GetUnitOpenedPorts), arg0, arg1)
	return &MockPortServiceGetUnitOpenedPortsCall{Call: call}
}

// MockPortServiceGetUnitOpenedPortsCall wrap *gomock.Call
type MockPortServiceGetUnitOpenedPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPortServiceGetUnitOpenedPortsCall) Return(arg0 network.GroupedPortRanges, arg1 error) *MockPortServiceGetUnitOpenedPortsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPortServiceGetUnitOpenedPortsCall) Do(f func(context.Context, unit.UUID) (network.GroupedPortRanges, error)) *MockPortServiceGetUnitOpenedPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPortServiceGetUnitOpenedPortsCall) DoAndReturn(f func(context.Context, unit.UUID) (network.GroupedPortRanges, error)) *MockPortServiceGetUnitOpenedPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// GetAllRelationDetails mocks base method.
func (m *MockRelationService) GetAllRelationDetails(arg0 context.Context) ([]relation0.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationDetails", arg0)
	ret0, _ := ret[0].([]relation0.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationDetails indicates an expected call of GetAllRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetAllRelationDetails(arg0 any) *MockRelationServiceGetAllRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetAllRelationDetails), arg0)
	return &MockRelationServiceGetAllRelationDetailsCall{Call: call}
}

// MockRelationServiceGetAllRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetAllRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetAllRelationDetailsCall) Return(arg0 []relation0.RelationDetailsResult, arg1 error) *MockRelationServiceGetAllRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetAllRelationDetailsCall) Do(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockRelationServiceGetAllRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetAllRelationDetailsCall) DoAndReturn(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockRelationServiceGetAllRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetAllRelationStatuses mocks base method.
func (m *MockStatusService) GetAllRelationStatuses(arg0 context.Context) (map[relation.UUID]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationStatuses", arg0)
	ret0, _ := ret[0].(map[relation.UUID]status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationStatuses indicates an expected call of GetAllRelationStatuses.
func (mr *MockStatusServiceMockRecorder) GetAllRelationStatuses(arg0 any) *MockStatusServiceGetAllRelationStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationStatuses", reflect.TypeOf((*MockStatusService)(nil).GetAllRelationStatuses), arg0)
	return &MockStatusServiceGetAllRelationStatusesCall{Call: call}
}

// MockStatusServiceGetAllRelationStatusesCall wrap *gomock.Call
type MockStatusServiceGetAllRelationStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetAllRelationStatusesCall) Return(arg0 map[relation.UUID]status.StatusInfo, arg1 error) *MockStatusServiceGetAllRelationStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetAllRelationStatusesCall) Do(f func(context.Context) (map[relation.UUID]status.StatusInfo, error)) *MockStatusServiceGetAllRelationStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetAllRelationStatusesCall) DoAndReturn(f func(context.Context) (map[relation.UUID]status.StatusInfo, error)) *MockStatusServiceGetAllRelationStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationAndUnitStatuses mocks base method.
func (m *MockStatusService) GetApplicationAndUnitStatuses(arg0 context.Context) (map[string]service.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationAndUnitStatuses", arg0)
	ret0, _ := ret[0].(map[string]service.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAndUnitStatuses indicates an expected call of GetApplicationAndUnitStatuses.
func (mr *MockStatusServiceMockRecorder) GetApplicationAndUnitStatuses(arg0 any) *MockStatusServiceGetApplicationAndUnitStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAndUnitStatuses", reflect.TypeOf((*MockStatusService)(nil).GetApplicationAndUnitStatuses), arg0)
	return &MockStatusServiceGetApplicationAndUnitStatusesCall{Call: call}
}

// MockStatusServiceGetApplicationAndUnitStatusesCall wrap *gomock.Call
type MockStatusServiceGetApplicationAndUnitStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetApplicationAndUnitStatusesCall) Return(arg0 map[string]service.Application, arg1 error) *MockStatusServiceGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetApplicationAndUnitStatusesCall) Do(f func(context.Context) (map[string]service.Application, error)) *MockStatusServiceGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetApplicationAndUnitStatusesCall) DoAndReturn(f func(context.Context) (map[string]service.Application, error)) *MockStatusServiceGetApplicationAndUnitStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFilesystemStatuses mocks base method.
func (m *MockStatusService) GetFilesystemStatuses(arg0 context.Context) ([]service.Filesystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemStatuses", arg0)
	ret0, _ := ret[0].([]service.Filesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemStatuses indicates an expected call of GetFilesystemStatuses.
func (mr *MockStatusServiceMockRecorder) GetFilesystemStatuses(arg0 any) *MockStatusServiceGetFilesystemStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemStatuses", reflect.TypeOf((*MockStatusService)(nil).GetFilesystemStatuses), arg0)
	return &MockStatusServiceGetFilesystemStatusesCall{Call: call}
}

// MockStatusServiceGetFilesystemStatusesCall wrap *gomock.Call
type MockStatusServiceGetFilesystemStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetFilesystemStatusesCall) Return(arg0 []service.Filesystem, arg1 error) *MockStatusServiceGetFilesystemStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetFilesystemStatusesCall) Do(f func(context.Context) ([]service.Filesystem, error)) *MockStatusServiceGetFilesystemStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetFilesystemStatusesCall) DoAndReturn(f func(context.Context) ([]service.Filesystem, error)) *MockStatusServiceGetFilesystemStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineFullStatuses mocks base method.
func (m *MockStatusService) GetMachineFullStatuses(arg0 context.Context) (map[machine.Name]service.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineFullStatuses", arg0)
	ret0, _ := ret[0].(map[machine.Name]service.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineFullStatuses indicates an expected call of GetMachineFullStatuses.
func (mr *MockStatusServiceMockRecorder) GetMachineFullStatuses(arg0 any) *MockStatusServiceGetMachineFullStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineFullStatuses", reflect.TypeOf((*MockStatusService)(nil).GetMachineFullStatuses), arg0)
	return &MockStatusServiceGetMachineFullStatusesCall{Call: call}
}

// MockStatusServiceGetMachineFullStatusesCall wrap *gomock.Call
type MockStatusServiceGetMachineFullStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetMachineFullStatusesCall) Return(arg0 map[machine.Name]service.Machine, arg1 error) *MockStatusServiceGetMachineFullStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetMachineFullStatusesCall) Do(f func(context.Context) (map[machine.Name]service.Machine, error)) *MockStatusServiceGetMachineFullStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetMachineFullStatusesCall) DoAndReturn(f func(context.Context) (map[machine.Name]service.Machine, error)) *MockStatusServiceGetMachineFullStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelStatus mocks base method.
func (m *MockStatusService) GetModelStatus(arg0 context.Context) (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatus", arg0)
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelStatus indicates an expected call of GetModelStatus.
func (mr *MockStatusServiceMockRecorder) GetModelStatus(arg0 any) *MockStatusServiceGetModelStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatus", reflect.TypeOf((*MockStatusService)(nil).GetModelStatus), arg0)
	return &MockStatusServiceGetModelStatusCall{Call: call}
}

// MockStatusServiceGetModelStatusCall wrap *gomock.Call
type MockStatusServiceGetModelStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetModelStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusServiceGetModelStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetModelStatusCall) Do(f func(context.Context) (status.StatusInfo, error)) *MockStatusServiceGetModelStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetModelStatusCall) DoAndReturn(f func(context.Context) (status.StatusInfo, error)) *MockStatusServiceGetModelStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStatusHistory mocks base method.
func (m *MockStatusService) GetStatusHistory(arg0 context.Context, arg1 service.StatusHistoryRequest) ([]status.DetailedStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusHistory", arg0, arg1)
	ret0, _ := ret[0].([]status.DetailedStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusHistory indicates an expected call of GetStatusHistory.
func (mr *MockStatusServiceMockRecorder) GetStatusHistory(arg0, arg1 any) *MockStatusServiceGetStatusHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusHistory", reflect.TypeOf((*MockStatusService)(nil).GetStatusHistory), arg0, arg1)
	return &MockStatusServiceGetStatusHistoryCall{Call: call}
}

// MockStatusServiceGetStatusHistoryCall wrap *gomock.Call
type MockStatusServiceGetStatusHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetStatusHistoryCall) Return(arg0 []status.DetailedStatus, arg1 error) *MockStatusServiceGetStatusHistoryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetStatusHistoryCall) Do(f func(context.Context, service.StatusHistoryRequest) ([]status.DetailedStatus, error)) *MockStatusServiceGetStatusHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetStatusHistoryCall) DoAndReturn(f func(context.Context, service.StatusHistoryRequest) ([]status.DetailedStatus, error)) *MockStatusServiceGetStatusHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageInstanceStatuses mocks base method.
func (m *MockStatusService) GetStorageInstanceStatuses(arg0 context.Context) ([]service.StorageInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageInstanceStatuses", arg0)
	ret0, _ := ret[0].([]service.StorageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageInstanceStatuses indicates an expected call of GetStorageInstanceStatuses.
func (mr *MockStatusServiceMockRecorder) GetStorageInstanceStatuses(arg0 any) *MockStatusServiceGetStorageInstanceStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageInstanceStatuses", reflect.TypeOf((*MockStatusService)(nil).GetStorageInstanceStatuses), arg0)
	return &MockStatusServiceGetStorageInstanceStatusesCall{Call: call}
}

// MockStatusServiceGetStorageInstanceStatusesCall wrap *gomock.Call
type MockStatusServiceGetStorageInstanceStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetStorageInstanceStatusesCall) Return(arg0 []service.StorageInstance, arg1 error) *MockStatusServiceGetStorageInstanceStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetStorageInstanceStatusesCall) Do(f func(context.Context) ([]service.StorageInstance, error)) *MockStatusServiceGetStorageInstanceStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetStorageInstanceStatusesCall) DoAndReturn(f func(context.Context) ([]service.StorageInstance, error)) *MockStatusServiceGetStorageInstanceStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVolumeStatuses mocks base method.
func (m *MockStatusService) GetVolumeStatuses(arg0 context.Context) ([]service.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeStatuses", arg0)
	ret0, _ := ret[0].([]service.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeStatuses indicates an expected call of GetVolumeStatuses.
func (mr *MockStatusServiceMockRecorder) GetVolumeStatuses(arg0 any) *MockStatusServiceGetVolumeStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeStatuses", reflect.TypeOf((*MockStatusService)(nil).GetVolumeStatuses), arg0)
	return &MockStatusServiceGetVolumeStatusesCall{Call: call}
}

// MockStatusServiceGetVolumeStatusesCall wrap *gomock.Call
type MockStatusServiceGetVolumeStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceGetVolumeStatusesCall) Return(arg0 []service.Volume, arg1 error) *MockStatusServiceGetVolumeStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceGetVolumeStatusesCall) Do(f func(context.Context) ([]service.Volume, error)) *MockStatusServiceGetVolumeStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceGetVolumeStatusesCall) DoAndReturn(f func(context.Context) ([]service.Volume, error)) *MockStatusServiceGetVolumeStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
