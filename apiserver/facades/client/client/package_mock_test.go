// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/client (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -typed -package client_test -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/client Backend
//

// Package client_test is a generated GoMock package.
package client_test

import (
	reflect "reflect"
	time "time"

	client "github.com/juju/juju/apiserver/facades/client/client"
	crossmodel "github.com/juju/juju/core/crossmodel"
	relation "github.com/juju/juju/internal/relation"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBackend) ISGOMOCK() struct{} {
	return struct{}{}
}

// AddRelation mocks base method.
func (m *MockBackend) AddRelation(arg0 ...relation.Endpoint) (*state.Relation, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRelation", varargs...)
	ret0, _ := ret[0].(*state.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockBackendMockRecorder) AddRelation(arg0 ...any) *MockBackendAddRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockBackend)(nil).AddRelation), arg0...)
	return &MockBackendAddRelationCall{Call: call}
}

// MockBackendAddRelationCall wrap *gomock.Call
type MockBackendAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddRelationCall) Return(arg0 *state.Relation, arg1 error) *MockBackendAddRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddRelationCall) Do(f func(...relation.Endpoint) (*state.Relation, error)) *MockBackendAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddRelationCall) DoAndReturn(f func(...relation.Endpoint) (*state.Relation, error)) *MockBackendAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllApplicationOffers mocks base method.
func (m *MockBackend) AllApplicationOffers() ([]*crossmodel.ApplicationOffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllApplicationOffers")
	ret0, _ := ret[0].([]*crossmodel.ApplicationOffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllApplicationOffers indicates an expected call of AllApplicationOffers.
func (mr *MockBackendMockRecorder) AllApplicationOffers() *MockBackendAllApplicationOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllApplicationOffers", reflect.TypeOf((*MockBackend)(nil).AllApplicationOffers))
	return &MockBackendAllApplicationOffersCall{Call: call}
}

// MockBackendAllApplicationOffersCall wrap *gomock.Call
type MockBackendAllApplicationOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllApplicationOffersCall) Return(arg0 []*crossmodel.ApplicationOffer, arg1 error) *MockBackendAllApplicationOffersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllApplicationOffersCall) Do(f func() ([]*crossmodel.ApplicationOffer, error)) *MockBackendAllApplicationOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllApplicationOffersCall) DoAndReturn(f func() ([]*crossmodel.ApplicationOffer, error)) *MockBackendAllApplicationOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllApplications mocks base method.
func (m *MockBackend) AllApplications() ([]*state.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllApplications")
	ret0, _ := ret[0].([]*state.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllApplications indicates an expected call of AllApplications.
func (mr *MockBackendMockRecorder) AllApplications() *MockBackendAllApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllApplications", reflect.TypeOf((*MockBackend)(nil).AllApplications))
	return &MockBackendAllApplicationsCall{Call: call}
}

// MockBackendAllApplicationsCall wrap *gomock.Call
type MockBackendAllApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllApplicationsCall) Return(arg0 []*state.Application, arg1 error) *MockBackendAllApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllApplicationsCall) Do(f func() ([]*state.Application, error)) *MockBackendAllApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllApplicationsCall) DoAndReturn(f func() ([]*state.Application, error)) *MockBackendAllApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllIPAddresses mocks base method.
func (m *MockBackend) AllIPAddresses() ([]*state.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllIPAddresses")
	ret0, _ := ret[0].([]*state.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllIPAddresses indicates an expected call of AllIPAddresses.
func (mr *MockBackendMockRecorder) AllIPAddresses() *MockBackendAllIPAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllIPAddresses", reflect.TypeOf((*MockBackend)(nil).AllIPAddresses))
	return &MockBackendAllIPAddressesCall{Call: call}
}

// MockBackendAllIPAddressesCall wrap *gomock.Call
type MockBackendAllIPAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllIPAddressesCall) Return(arg0 []*state.Address, arg1 error) *MockBackendAllIPAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllIPAddressesCall) Do(f func() ([]*state.Address, error)) *MockBackendAllIPAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllIPAddressesCall) DoAndReturn(f func() ([]*state.Address, error)) *MockBackendAllIPAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllLinkLayerDevices mocks base method.
func (m *MockBackend) AllLinkLayerDevices() ([]*state.LinkLayerDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllLinkLayerDevices")
	ret0, _ := ret[0].([]*state.LinkLayerDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllLinkLayerDevices indicates an expected call of AllLinkLayerDevices.
func (mr *MockBackendMockRecorder) AllLinkLayerDevices() *MockBackendAllLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllLinkLayerDevices", reflect.TypeOf((*MockBackend)(nil).AllLinkLayerDevices))
	return &MockBackendAllLinkLayerDevicesCall{Call: call}
}

// MockBackendAllLinkLayerDevicesCall wrap *gomock.Call
type MockBackendAllLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllLinkLayerDevicesCall) Return(arg0 []*state.LinkLayerDevice, arg1 error) *MockBackendAllLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllLinkLayerDevicesCall) Do(f func() ([]*state.LinkLayerDevice, error)) *MockBackendAllLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllLinkLayerDevicesCall) DoAndReturn(f func() ([]*state.LinkLayerDevice, error)) *MockBackendAllLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllMachines mocks base method.
func (m *MockBackend) AllMachines() ([]*state.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachines")
	ret0, _ := ret[0].([]*state.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachines indicates an expected call of AllMachines.
func (mr *MockBackendMockRecorder) AllMachines() *MockBackendAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachines", reflect.TypeOf((*MockBackend)(nil).AllMachines))
	return &MockBackendAllMachinesCall{Call: call}
}

// MockBackendAllMachinesCall wrap *gomock.Call
type MockBackendAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllMachinesCall) Return(arg0 []*state.Machine, arg1 error) *MockBackendAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllMachinesCall) Do(f func() ([]*state.Machine, error)) *MockBackendAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllMachinesCall) DoAndReturn(f func() ([]*state.Machine, error)) *MockBackendAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRelations mocks base method.
func (m *MockBackend) AllRelations() ([]*state.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRelations")
	ret0, _ := ret[0].([]*state.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRelations indicates an expected call of AllRelations.
func (mr *MockBackendMockRecorder) AllRelations() *MockBackendAllRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRelations", reflect.TypeOf((*MockBackend)(nil).AllRelations))
	return &MockBackendAllRelationsCall{Call: call}
}

// MockBackendAllRelationsCall wrap *gomock.Call
type MockBackendAllRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllRelationsCall) Return(arg0 []*state.Relation, arg1 error) *MockBackendAllRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllRelationsCall) Do(f func() ([]*state.Relation, error)) *MockBackendAllRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllRelationsCall) DoAndReturn(f func() ([]*state.Relation, error)) *MockBackendAllRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllRemoteApplications mocks base method.
func (m *MockBackend) AllRemoteApplications() ([]*state.RemoteApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRemoteApplications")
	ret0, _ := ret[0].([]*state.RemoteApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRemoteApplications indicates an expected call of AllRemoteApplications.
func (mr *MockBackendMockRecorder) AllRemoteApplications() *MockBackendAllRemoteApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRemoteApplications", reflect.TypeOf((*MockBackend)(nil).AllRemoteApplications))
	return &MockBackendAllRemoteApplicationsCall{Call: call}
}

// MockBackendAllRemoteApplicationsCall wrap *gomock.Call
type MockBackendAllRemoteApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllRemoteApplicationsCall) Return(arg0 []*state.RemoteApplication, arg1 error) *MockBackendAllRemoteApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllRemoteApplicationsCall) Do(f func() ([]*state.RemoteApplication, error)) *MockBackendAllRemoteApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllRemoteApplicationsCall) DoAndReturn(f func() ([]*state.RemoteApplication, error)) *MockBackendAllRemoteApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerNodes mocks base method.
func (m *MockBackend) ControllerNodes() ([]state.ControllerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNodes")
	ret0, _ := ret[0].([]state.ControllerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerNodes indicates an expected call of ControllerNodes.
func (mr *MockBackendMockRecorder) ControllerNodes() *MockBackendControllerNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNodes", reflect.TypeOf((*MockBackend)(nil).ControllerNodes))
	return &MockBackendControllerNodesCall{Call: call}
}

// MockBackendControllerNodesCall wrap *gomock.Call
type MockBackendControllerNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendControllerNodesCall) Return(arg0 []state.ControllerNode, arg1 error) *MockBackendControllerNodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendControllerNodesCall) Do(f func() ([]state.ControllerNode, error)) *MockBackendControllerNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendControllerNodesCall) DoAndReturn(f func() ([]state.ControllerNode, error)) *MockBackendControllerNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerTag mocks base method.
func (m *MockBackend) ControllerTag() names.ControllerTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTag")
	ret0, _ := ret[0].(names.ControllerTag)
	return ret0
}

// ControllerTag indicates an expected call of ControllerTag.
func (mr *MockBackendMockRecorder) ControllerTag() *MockBackendControllerTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTag", reflect.TypeOf((*MockBackend)(nil).ControllerTag))
	return &MockBackendControllerTagCall{Call: call}
}

// MockBackendControllerTagCall wrap *gomock.Call
type MockBackendControllerTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendControllerTagCall) Return(arg0 names.ControllerTag) *MockBackendControllerTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendControllerTagCall) Do(f func() names.ControllerTag) *MockBackendControllerTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendControllerTagCall) DoAndReturn(f func() names.ControllerTag) *MockBackendControllerTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerTimestamp mocks base method.
func (m *MockBackend) ControllerTimestamp() (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerTimestamp")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerTimestamp indicates an expected call of ControllerTimestamp.
func (mr *MockBackendMockRecorder) ControllerTimestamp() *MockBackendControllerTimestampCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerTimestamp", reflect.TypeOf((*MockBackend)(nil).ControllerTimestamp))
	return &MockBackendControllerTimestampCall{Call: call}
}

// MockBackendControllerTimestampCall wrap *gomock.Call
type MockBackendControllerTimestampCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendControllerTimestampCall) Return(arg0 *time.Time, arg1 error) *MockBackendControllerTimestampCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendControllerTimestampCall) Do(f func() (*time.Time, error)) *MockBackendControllerTimestampCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendControllerTimestampCall) DoAndReturn(f func() (*time.Time, error)) *MockBackendControllerTimestampCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HAPrimaryMachine mocks base method.
func (m *MockBackend) HAPrimaryMachine() (names.MachineTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HAPrimaryMachine")
	ret0, _ := ret[0].(names.MachineTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HAPrimaryMachine indicates an expected call of HAPrimaryMachine.
func (mr *MockBackendMockRecorder) HAPrimaryMachine() *MockBackendHAPrimaryMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HAPrimaryMachine", reflect.TypeOf((*MockBackend)(nil).HAPrimaryMachine))
	return &MockBackendHAPrimaryMachineCall{Call: call}
}

// MockBackendHAPrimaryMachineCall wrap *gomock.Call
type MockBackendHAPrimaryMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendHAPrimaryMachineCall) Return(arg0 names.MachineTag, arg1 error) *MockBackendHAPrimaryMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendHAPrimaryMachineCall) Do(f func() (names.MachineTag, error)) *MockBackendHAPrimaryMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendHAPrimaryMachineCall) DoAndReturn(f func() (names.MachineTag, error)) *MockBackendHAPrimaryMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockBackend) Machine(arg0 string) (*state.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(*state.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockBackendMockRecorder) Machine(arg0 any) *MockBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockBackend)(nil).Machine), arg0)
	return &MockBackendMachineCall{Call: call}
}

// MockBackendMachineCall wrap *gomock.Call
type MockBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendMachineCall) Return(arg0 *state.Machine, arg1 error) *MockBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendMachineCall) Do(f func(string) (*state.Machine, error)) *MockBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendMachineCall) DoAndReturn(f func(string) (*state.Machine, error)) *MockBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelTag mocks base method.
func (m *MockBackend) ModelTag() names.ModelTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelTag")
	ret0, _ := ret[0].(names.ModelTag)
	return ret0
}

// ModelTag indicates an expected call of ModelTag.
func (mr *MockBackendMockRecorder) ModelTag() *MockBackendModelTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTag", reflect.TypeOf((*MockBackend)(nil).ModelTag))
	return &MockBackendModelTagCall{Call: call}
}

// MockBackendModelTagCall wrap *gomock.Call
type MockBackendModelTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendModelTagCall) Return(arg0 names.ModelTag) *MockBackendModelTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendModelTagCall) Do(f func() names.ModelTag) *MockBackendModelTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendModelTagCall) DoAndReturn(f func() names.ModelTag) *MockBackendModelTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockBackend) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockBackendMockRecorder) ModelUUID() *MockBackendModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockBackend)(nil).ModelUUID))
	return &MockBackendModelUUIDCall{Call: call}
}

// MockBackendModelUUIDCall wrap *gomock.Call
type MockBackendModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendModelUUIDCall) Return(arg0 string) *MockBackendModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendModelUUIDCall) Do(f func() string) *MockBackendModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendModelUUIDCall) DoAndReturn(f func() string) *MockBackendModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteApplication mocks base method.
func (m *MockBackend) RemoteApplication(arg0 string) (*state.RemoteApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteApplication", arg0)
	ret0, _ := ret[0].(*state.RemoteApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteApplication indicates an expected call of RemoteApplication.
func (mr *MockBackendMockRecorder) RemoteApplication(arg0 any) *MockBackendRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteApplication", reflect.TypeOf((*MockBackend)(nil).RemoteApplication), arg0)
	return &MockBackendRemoteApplicationCall{Call: call}
}

// MockBackendRemoteApplicationCall wrap *gomock.Call
type MockBackendRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendRemoteApplicationCall) Return(arg0 *state.RemoteApplication, arg1 error) *MockBackendRemoteApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendRemoteApplicationCall) Do(f func(string) (*state.RemoteApplication, error)) *MockBackendRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendRemoteApplicationCall) DoAndReturn(f func(string) (*state.RemoteApplication, error)) *MockBackendRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteConnectionStatus mocks base method.
func (m *MockBackend) RemoteConnectionStatus(arg0 string) (*state.RemoteConnectionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteConnectionStatus", arg0)
	ret0, _ := ret[0].(*state.RemoteConnectionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteConnectionStatus indicates an expected call of RemoteConnectionStatus.
func (mr *MockBackendMockRecorder) RemoteConnectionStatus(arg0 any) *MockBackendRemoteConnectionStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteConnectionStatus", reflect.TypeOf((*MockBackend)(nil).RemoteConnectionStatus), arg0)
	return &MockBackendRemoteConnectionStatusCall{Call: call}
}

// MockBackendRemoteConnectionStatusCall wrap *gomock.Call
type MockBackendRemoteConnectionStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendRemoteConnectionStatusCall) Return(arg0 *state.RemoteConnectionStatus, arg1 error) *MockBackendRemoteConnectionStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendRemoteConnectionStatusCall) Do(f func(string) (*state.RemoteConnectionStatus, error)) *MockBackendRemoteConnectionStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendRemoteConnectionStatusCall) DoAndReturn(f func(string) (*state.RemoteConnectionStatus, error)) *MockBackendRemoteConnectionStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockBackend) Unit(arg0 string) (client.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(client.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockBackendMockRecorder) Unit(arg0 any) *MockBackendUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockBackend)(nil).Unit), arg0)
	return &MockBackendUnitCall{Call: call}
}

// MockBackendUnitCall wrap *gomock.Call
type MockBackendUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendUnitCall) Return(arg0 client.Unit, arg1 error) *MockBackendUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendUnitCall) Do(f func(string) (client.Unit, error)) *MockBackendUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendUnitCall) DoAndReturn(f func(string) (client.Unit, error)) *MockBackendUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
