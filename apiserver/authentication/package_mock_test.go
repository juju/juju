// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/authentication (interfaces: AgentPasswordService)
//
// Generated by this command:
//
//	mockgen -typed -package authentication_test -destination package_mock_test.go github.com/juju/juju/apiserver/authentication AgentPasswordService
//

// Package authentication_test is a generated GoMock package.
package authentication_test

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentPasswordService is a mock of AgentPasswordService interface.
type MockAgentPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentPasswordServiceMockRecorder
}

// MockAgentPasswordServiceMockRecorder is the mock recorder for MockAgentPasswordService.
type MockAgentPasswordServiceMockRecorder struct {
	mock *MockAgentPasswordService
}

// NewMockAgentPasswordService creates a new mock instance.
func NewMockAgentPasswordService(ctrl *gomock.Controller) *MockAgentPasswordService {
	mock := &MockAgentPasswordService{ctrl: ctrl}
	mock.recorder = &MockAgentPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentPasswordService) EXPECT() *MockAgentPasswordServiceMockRecorder {
	return m.recorder
}

// IsMachineController mocks base method.
func (m *MockAgentPasswordService) IsMachineController(arg0 context.Context, arg1 machine.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMachineController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMachineController indicates an expected call of IsMachineController.
func (mr *MockAgentPasswordServiceMockRecorder) IsMachineController(arg0, arg1 any) *MockAgentPasswordServiceIsMachineControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMachineController", reflect.TypeOf((*MockAgentPasswordService)(nil).IsMachineController), arg0, arg1)
	return &MockAgentPasswordServiceIsMachineControllerCall{Call: call}
}

// MockAgentPasswordServiceIsMachineControllerCall wrap *gomock.Call
type MockAgentPasswordServiceIsMachineControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceIsMachineControllerCall) Return(arg0 bool, arg1 error) *MockAgentPasswordServiceIsMachineControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceIsMachineControllerCall) Do(f func(context.Context, machine.Name) (bool, error)) *MockAgentPasswordServiceIsMachineControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceIsMachineControllerCall) DoAndReturn(f func(context.Context, machine.Name) (bool, error)) *MockAgentPasswordServiceIsMachineControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesMachinePasswordHashWithNonce mocks base method.
func (m *MockAgentPasswordService) MatchesMachinePasswordHashWithNonce(arg0 context.Context, arg1 machine.Name, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesMachinePasswordHashWithNonce", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesMachinePasswordHashWithNonce indicates an expected call of MatchesMachinePasswordHashWithNonce.
func (mr *MockAgentPasswordServiceMockRecorder) MatchesMachinePasswordHashWithNonce(arg0, arg1, arg2, arg3 any) *MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesMachinePasswordHashWithNonce", reflect.TypeOf((*MockAgentPasswordService)(nil).MatchesMachinePasswordHashWithNonce), arg0, arg1, arg2, arg3)
	return &MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall{Call: call}
}

// MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall wrap *gomock.Call
type MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall) Return(arg0 bool, arg1 error) *MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall) Do(f func(context.Context, machine.Name, string, string) (bool, error)) *MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall) DoAndReturn(f func(context.Context, machine.Name, string, string) (bool, error)) *MockAgentPasswordServiceMatchesMachinePasswordHashWithNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MatchesUnitPasswordHash mocks base method.
func (m *MockAgentPasswordService) MatchesUnitPasswordHash(arg0 context.Context, arg1 unit.Name, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchesUnitPasswordHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchesUnitPasswordHash indicates an expected call of MatchesUnitPasswordHash.
func (mr *MockAgentPasswordServiceMockRecorder) MatchesUnitPasswordHash(arg0, arg1, arg2 any) *MockAgentPasswordServiceMatchesUnitPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchesUnitPasswordHash", reflect.TypeOf((*MockAgentPasswordService)(nil).MatchesUnitPasswordHash), arg0, arg1, arg2)
	return &MockAgentPasswordServiceMatchesUnitPasswordHashCall{Call: call}
}

// MockAgentPasswordServiceMatchesUnitPasswordHashCall wrap *gomock.Call
type MockAgentPasswordServiceMatchesUnitPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentPasswordServiceMatchesUnitPasswordHashCall) Return(arg0 bool, arg1 error) *MockAgentPasswordServiceMatchesUnitPasswordHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentPasswordServiceMatchesUnitPasswordHashCall) Do(f func(context.Context, unit.Name, string) (bool, error)) *MockAgentPasswordServiceMatchesUnitPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentPasswordServiceMatchesUnitPasswordHashCall) DoAndReturn(f func(context.Context, unit.Name, string) (bool, error)) *MockAgentPasswordServiceMatchesUnitPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
