// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/network (interfaces: AvailabilityZone)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAvailabilityZone is a mock of AvailabilityZone interface.
type MockAvailabilityZone struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityZoneMockRecorder
}

// MockAvailabilityZoneMockRecorder is the mock recorder for MockAvailabilityZone.
type MockAvailabilityZoneMockRecorder struct {
	mock *MockAvailabilityZone
}

// NewMockAvailabilityZone creates a new mock instance.
func NewMockAvailabilityZone(ctrl *gomock.Controller) *MockAvailabilityZone {
	mock := &MockAvailabilityZone{ctrl: ctrl}
	mock.recorder = &MockAvailabilityZoneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityZone) EXPECT() *MockAvailabilityZoneMockRecorder {
	return m.recorder
}

// Available mocks base method.
func (m *MockAvailabilityZone) Available() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Available")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Available indicates an expected call of Available.
func (mr *MockAvailabilityZoneMockRecorder) Available() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockAvailabilityZone)(nil).Available))
}

// Name mocks base method.
func (m *MockAvailabilityZone) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAvailabilityZoneMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAvailabilityZone)(nil).Name))
}
