// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/provider/oci/common (interfaces: OCIStorageClient)

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	core "github.com/oracle/oci-go-sdk/core"
	reflect "reflect"
)

// MockOCIStorageClient is a mock of OCIStorageClient interface
type MockOCIStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCIStorageClientMockRecorder
}

// MockOCIStorageClientMockRecorder is the mock recorder for MockOCIStorageClient
type MockOCIStorageClientMockRecorder struct {
	mock *MockOCIStorageClient
}

// NewMockOCIStorageClient creates a new mock instance
func NewMockOCIStorageClient(ctrl *gomock.Controller) *MockOCIStorageClient {
	mock := &MockOCIStorageClient{ctrl: ctrl}
	mock.recorder = &MockOCIStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOCIStorageClient) EXPECT() *MockOCIStorageClientMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method
func (m *MockOCIStorageClient) CreateVolume(arg0 context.Context, arg1 core.CreateVolumeRequest) (core.CreateVolumeResponse, error) {
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(core.CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockOCIStorageClientMockRecorder) CreateVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).CreateVolume), arg0, arg1)
}

// DeleteVolume mocks base method
func (m *MockOCIStorageClient) DeleteVolume(arg0 context.Context, arg1 core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error) {
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(core.DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockOCIStorageClientMockRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).DeleteVolume), arg0, arg1)
}

// GetVolume mocks base method
func (m *MockOCIStorageClient) GetVolume(arg0 context.Context, arg1 core.GetVolumeRequest) (core.GetVolumeResponse, error) {
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(core.GetVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume
func (mr *MockOCIStorageClientMockRecorder) GetVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).GetVolume), arg0, arg1)
}

// ListVolumes mocks base method
func (m *MockOCIStorageClient) ListVolumes(arg0 context.Context, arg1 core.ListVolumesRequest) (core.ListVolumesResponse, error) {
	ret := m.ctrl.Call(m, "ListVolumes", arg0, arg1)
	ret0, _ := ret[0].(core.ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes
func (mr *MockOCIStorageClientMockRecorder) ListVolumes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockOCIStorageClient)(nil).ListVolumes), arg0, arg1)
}

// UpdateVolume mocks base method
func (m *MockOCIStorageClient) UpdateVolume(arg0 context.Context, arg1 core.UpdateVolumeRequest) (core.UpdateVolumeResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVolume", arg0, arg1)
	ret0, _ := ret[0].(core.UpdateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume
func (mr *MockOCIStorageClientMockRecorder) UpdateVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockOCIStorageClient)(nil).UpdateVolume), arg0, arg1)
}
