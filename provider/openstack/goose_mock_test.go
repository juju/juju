// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-goose/goose/v3/client (interfaces: AuthenticatingClient)

// Package openstack is a generated GoMock package.
package openstack

import (
	reflect "reflect"

	http "github.com/go-goose/goose/v4/http"
	identity "github.com/go-goose/goose/v4/identity"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticatingClient is a mock of AuthenticatingClient interface.
type MockAuthenticatingClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatingClientMockRecorder
}

// MockAuthenticatingClientMockRecorder is the mock recorder for MockAuthenticatingClient.
type MockAuthenticatingClientMockRecorder struct {
	mock *MockAuthenticatingClient
}

// NewMockAuthenticatingClient creates a new mock instance.
func NewMockAuthenticatingClient(ctrl *gomock.Controller) *MockAuthenticatingClient {
	mock := &MockAuthenticatingClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticatingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatingClient) EXPECT() *MockAuthenticatingClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticatingClient) Authenticate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatingClientMockRecorder) Authenticate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticatingClient)(nil).Authenticate))
}

// EndpointsForRegion mocks base method.
func (m *MockAuthenticatingClient) EndpointsForRegion(arg0 string) identity.ServiceURLs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsForRegion", arg0)
	ret0, _ := ret[0].(identity.ServiceURLs)
	return ret0
}

// EndpointsForRegion indicates an expected call of EndpointsForRegion.
func (mr *MockAuthenticatingClientMockRecorder) EndpointsForRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsForRegion", reflect.TypeOf((*MockAuthenticatingClient)(nil).EndpointsForRegion), arg0)
}

// IdentityAuthOptions mocks base method.
func (m *MockAuthenticatingClient) IdentityAuthOptions() (identity.AuthOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentityAuthOptions")
	ret0, _ := ret[0].(identity.AuthOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentityAuthOptions indicates an expected call of IdentityAuthOptions.
func (mr *MockAuthenticatingClientMockRecorder) IdentityAuthOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityAuthOptions", reflect.TypeOf((*MockAuthenticatingClient)(nil).IdentityAuthOptions))
}

// IsAuthenticated mocks base method.
func (m *MockAuthenticatingClient) IsAuthenticated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockAuthenticatingClientMockRecorder) IsAuthenticated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockAuthenticatingClient)(nil).IsAuthenticated))
}

// MakeServiceURL mocks base method.
func (m *MockAuthenticatingClient) MakeServiceURL(arg0, arg1 string, arg2 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeServiceURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeServiceURL indicates an expected call of MakeServiceURL.
func (mr *MockAuthenticatingClientMockRecorder) MakeServiceURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeServiceURL", reflect.TypeOf((*MockAuthenticatingClient)(nil).MakeServiceURL), arg0, arg1, arg2)
}

// SendRequest mocks base method.
func (m *MockAuthenticatingClient) SendRequest(arg0, arg1, arg2, arg3 string, arg4 *http.RequestData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockAuthenticatingClientMockRecorder) SendRequest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockAuthenticatingClient)(nil).SendRequest), arg0, arg1, arg2, arg3, arg4)
}

// SetRequiredServiceTypes mocks base method.
func (m *MockAuthenticatingClient) SetRequiredServiceTypes(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequiredServiceTypes", arg0)
}

// SetRequiredServiceTypes indicates an expected call of SetRequiredServiceTypes.
func (mr *MockAuthenticatingClientMockRecorder) SetRequiredServiceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequiredServiceTypes", reflect.TypeOf((*MockAuthenticatingClient)(nil).SetRequiredServiceTypes), arg0)
}

// SetVersionDiscoveryDisabled mocks base method.
func (m *MockAuthenticatingClient) SetVersionDiscoveryDisabled(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersionDiscoveryDisabled", arg0, arg1)
}

// SetVersionDiscoveryDisabled indicates an expected call of SetVersionDiscoveryDisabled.
func (mr *MockAuthenticatingClientMockRecorder) SetVersionDiscoveryDisabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersionDiscoveryDisabled", reflect.TypeOf((*MockAuthenticatingClient)(nil).SetVersionDiscoveryDisabled), arg0, arg1)
}

// TenantId mocks base method.
func (m *MockAuthenticatingClient) TenantId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantId")
	ret0, _ := ret[0].(string)
	return ret0
}

// TenantId indicates an expected call of TenantId.
func (mr *MockAuthenticatingClientMockRecorder) TenantId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantId", reflect.TypeOf((*MockAuthenticatingClient)(nil).TenantId))
}

// Token mocks base method.
func (m *MockAuthenticatingClient) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockAuthenticatingClientMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockAuthenticatingClient)(nil).Token))
}

// UserId mocks base method.
func (m *MockAuthenticatingClient) UserId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserId")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserId indicates an expected call of UserId.
func (mr *MockAuthenticatingClientMockRecorder) UserId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserId", reflect.TypeOf((*MockAuthenticatingClient)(nil).UserId))
}
